
projekt_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d25c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  0800d500  0800d500  0000e500  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d968  0800d968  0000f1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d968  0800d968  0000e968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d970  0800d970  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d970  0800d970  0000e970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d974  0800d974  0000e974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  24000000  0800d978  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  240001d8  0800db50  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400042c  0800db50  0000f42c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016996  00000000  00000000  0000f206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029bf  00000000  00000000  00025b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  00028560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e2b  00000000  00000000  00029788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b6db  00000000  00000000  0002a5b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000189dc  00000000  00000000  00065c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00188e0f  00000000  00000000  0007e66a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00207479  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000607c  00000000  00000000  002074bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0020d538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d4e4 	.word	0x0800d4e4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800d4e4 	.word	0x0800d4e4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a6c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b64 <SystemInit+0xfc>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a72:	4a3c      	ldr	r2, [pc, #240]	@ (8000b64 <SystemInit+0xfc>)
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a7c:	4b39      	ldr	r3, [pc, #228]	@ (8000b64 <SystemInit+0xfc>)
 8000a7e:	691b      	ldr	r3, [r3, #16]
 8000a80:	4a38      	ldr	r2, [pc, #224]	@ (8000b64 <SystemInit+0xfc>)
 8000a82:	f043 0310 	orr.w	r3, r3, #16
 8000a86:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a88:	4b37      	ldr	r3, [pc, #220]	@ (8000b68 <SystemInit+0x100>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f003 030f 	and.w	r3, r3, #15
 8000a90:	2b06      	cmp	r3, #6
 8000a92:	d807      	bhi.n	8000aa4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a94:	4b34      	ldr	r3, [pc, #208]	@ (8000b68 <SystemInit+0x100>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f023 030f 	bic.w	r3, r3, #15
 8000a9c:	4a32      	ldr	r2, [pc, #200]	@ (8000b68 <SystemInit+0x100>)
 8000a9e:	f043 0307 	orr.w	r3, r3, #7
 8000aa2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aa4:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <SystemInit+0x104>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a30      	ldr	r2, [pc, #192]	@ (8000b6c <SystemInit+0x104>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <SystemInit+0x104>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b6c <SystemInit+0x104>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	492c      	ldr	r1, [pc, #176]	@ (8000b6c <SystemInit+0x104>)
 8000abc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b70 <SystemInit+0x108>)
 8000abe:	4013      	ands	r3, r2
 8000ac0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ac2:	4b29      	ldr	r3, [pc, #164]	@ (8000b68 <SystemInit+0x100>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f003 0308 	and.w	r3, r3, #8
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d007      	beq.n	8000ade <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ace:	4b26      	ldr	r3, [pc, #152]	@ (8000b68 <SystemInit+0x100>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f023 030f 	bic.w	r3, r3, #15
 8000ad6:	4a24      	ldr	r2, [pc, #144]	@ (8000b68 <SystemInit+0x100>)
 8000ad8:	f043 0307 	orr.w	r3, r3, #7
 8000adc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ade:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <SystemInit+0x104>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <SystemInit+0x104>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000aea:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <SystemInit+0x104>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000af0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b6c <SystemInit+0x104>)
 8000af2:	4a20      	ldr	r2, [pc, #128]	@ (8000b74 <SystemInit+0x10c>)
 8000af4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000af6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <SystemInit+0x104>)
 8000af8:	4a1f      	ldr	r2, [pc, #124]	@ (8000b78 <SystemInit+0x110>)
 8000afa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <SystemInit+0x104>)
 8000afe:	4a1f      	ldr	r2, [pc, #124]	@ (8000b7c <SystemInit+0x114>)
 8000b00:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <SystemInit+0x104>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b08:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <SystemInit+0x104>)
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b7c <SystemInit+0x114>)
 8000b0c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b0e:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <SystemInit+0x104>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b14:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <SystemInit+0x104>)
 8000b16:	4a19      	ldr	r2, [pc, #100]	@ (8000b7c <SystemInit+0x114>)
 8000b18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <SystemInit+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <SystemInit+0x104>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a11      	ldr	r2, [pc, #68]	@ (8000b6c <SystemInit+0x104>)
 8000b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <SystemInit+0x104>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <SystemInit+0x118>)
 8000b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b36:	4a12      	ldr	r2, [pc, #72]	@ (8000b80 <SystemInit+0x118>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <SystemInit+0x11c>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <SystemInit+0x120>)
 8000b44:	4013      	ands	r3, r2
 8000b46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b4a:	d202      	bcs.n	8000b52 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <SystemInit+0x124>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b52:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <SystemInit+0x128>)
 8000b54:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b58:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00
 8000b68:	52002000 	.word	0x52002000
 8000b6c:	58024400 	.word	0x58024400
 8000b70:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b74:	02020200 	.word	0x02020200
 8000b78:	01ff0000 	.word	0x01ff0000
 8000b7c:	01010280 	.word	0x01010280
 8000b80:	580000c0 	.word	0x580000c0
 8000b84:	5c001000 	.word	0x5c001000
 8000b88:	ffff0000 	.word	0xffff0000
 8000b8c:	51008108 	.word	0x51008108
 8000b90:	52004000 	.word	0x52004000

08000b94 <SendDebugMessage>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void SendDebugMessage(const char* message) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff fbef 	bl	8000380 <strlen>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	4803      	ldr	r0, [pc, #12]	@ (8000bbc <SendDebugMessage+0x28>)
 8000bae:	f005 fe3f 	bl	8006830 <HAL_UART_Transmit>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	24000240 	.word	0x24000240

08000bc0 <HAL_UART_RxCpltCallback>:
    snprintf(buffer, sizeof(buffer), "%.2f", value);
    SendDebugMessage(buffer);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	SendDebugMessage(rx_data);
 8000bc8:	4811      	ldr	r0, [pc, #68]	@ (8000c10 <HAL_UART_RxCpltCallback+0x50>)
 8000bca:	f7ff ffe3 	bl	8000b94 <SendDebugMessage>
	int rx_data_int = 100*(rx_data[0]-'0') + 10*(rx_data[1]-'0') + (rx_data[2]-'0');
 8000bce:	4b10      	ldr	r3, [pc, #64]	@ (8000c10 <HAL_UART_RxCpltCallback+0x50>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	3b30      	subs	r3, #48	@ 0x30
 8000bd4:	2264      	movs	r2, #100	@ 0x64
 8000bd6:	fb02 f103 	mul.w	r1, r2, r3
 8000bda:	4b0d      	ldr	r3, [pc, #52]	@ (8000c10 <HAL_UART_RxCpltCallback+0x50>)
 8000bdc:	785b      	ldrb	r3, [r3, #1]
 8000bde:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8000be2:	4613      	mov	r3, r2
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	4413      	add	r3, r2
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	18ca      	adds	r2, r1, r3
 8000bec:	4b08      	ldr	r3, [pc, #32]	@ (8000c10 <HAL_UART_RxCpltCallback+0x50>)
 8000bee:	789b      	ldrb	r3, [r3, #2]
 8000bf0:	3b30      	subs	r3, #48	@ 0x30
 8000bf2:	4413      	add	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, rx_data_int);
 8000bf6:	4b07      	ldr	r3, [pc, #28]	@ (8000c14 <HAL_UART_RxCpltCallback+0x54>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_UART_Receive_IT(&huart3, &rx_data, 3);
 8000bfe:	2203      	movs	r2, #3
 8000c00:	4903      	ldr	r1, [pc, #12]	@ (8000c10 <HAL_UART_RxCpltCallback+0x50>)
 8000c02:	4805      	ldr	r0, [pc, #20]	@ (8000c18 <HAL_UART_RxCpltCallback+0x58>)
 8000c04:	f005 fea2 	bl	800694c <HAL_UART_Receive_IT>
}
 8000c08:	bf00      	nop
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	240002d4 	.word	0x240002d4
 8000c14:	240001f4 	.word	0x240001f4
 8000c18:	24000240 	.word	0x24000240

08000c1c <setServoPulse>:

void setServoPulse(TIM_HandleTypeDef *htim, uint32_t channel, uint16_t ticks) {
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	4613      	mov	r3, r2
 8000c28:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COMPARE(htim, channel, ticks);
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d104      	bne.n	8000c3a <setServoPulse+0x1e>
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	88fa      	ldrh	r2, [r7, #6]
 8000c36:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000c38:	e023      	b.n	8000c82 <setServoPulse+0x66>
    __HAL_TIM_SET_COMPARE(htim, channel, ticks);
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	2b04      	cmp	r3, #4
 8000c3e:	d104      	bne.n	8000c4a <setServoPulse+0x2e>
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	88fb      	ldrh	r3, [r7, #6]
 8000c46:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000c48:	e01b      	b.n	8000c82 <setServoPulse+0x66>
    __HAL_TIM_SET_COMPARE(htim, channel, ticks);
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	2b08      	cmp	r3, #8
 8000c4e:	d104      	bne.n	8000c5a <setServoPulse+0x3e>
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	88fb      	ldrh	r3, [r7, #6]
 8000c56:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000c58:	e013      	b.n	8000c82 <setServoPulse+0x66>
    __HAL_TIM_SET_COMPARE(htim, channel, ticks);
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	2b0c      	cmp	r3, #12
 8000c5e:	d104      	bne.n	8000c6a <setServoPulse+0x4e>
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	88fb      	ldrh	r3, [r7, #6]
 8000c66:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000c68:	e00b      	b.n	8000c82 <setServoPulse+0x66>
    __HAL_TIM_SET_COMPARE(htim, channel, ticks);
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	2b10      	cmp	r3, #16
 8000c6e:	d104      	bne.n	8000c7a <setServoPulse+0x5e>
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	88fb      	ldrh	r3, [r7, #6]
 8000c76:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000c78:	e003      	b.n	8000c82 <setServoPulse+0x66>
    __HAL_TIM_SET_COMPARE(htim, channel, ticks);
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	88fb      	ldrh	r3, [r7, #6]
 8000c80:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000c82:	bf00      	nop
 8000c84:	3714      	adds	r7, #20
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
	...

08000c90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000c96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c9a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000c9c:	bf00      	nop
 8000c9e:	4b3f      	ldr	r3, [pc, #252]	@ (8000d9c <main+0x10c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d004      	beq.n	8000cb4 <main+0x24>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	1e5a      	subs	r2, r3, #1
 8000cae:	607a      	str	r2, [r7, #4]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	dcf4      	bgt.n	8000c9e <main+0xe>
  if ( timeout < 0 )
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	da01      	bge.n	8000cbe <main+0x2e>
  {
  Error_Handler();
 8000cba:	f000 faad 	bl	8001218 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cbe:	f000 fce1 	bl	8001684 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc2:	f000 f873 	bl	8000dac <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000cc6:	4b35      	ldr	r3, [pc, #212]	@ (8000d9c <main+0x10c>)
 8000cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ccc:	4a33      	ldr	r2, [pc, #204]	@ (8000d9c <main+0x10c>)
 8000cce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cd6:	4b31      	ldr	r3, [pc, #196]	@ (8000d9c <main+0x10c>)
 8000cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ce0:	603b      	str	r3, [r7, #0]
 8000ce2:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f001 fdcd 	bl	8002884 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000cea:	2100      	movs	r1, #0
 8000cec:	2000      	movs	r0, #0
 8000cee:	f001 fde3 	bl	80028b8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000cf2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cf6:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000cf8:	bf00      	nop
 8000cfa:	4b28      	ldr	r3, [pc, #160]	@ (8000d9c <main+0x10c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d104      	bne.n	8000d10 <main+0x80>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	1e5a      	subs	r2, r3, #1
 8000d0a:	607a      	str	r2, [r7, #4]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	dcf4      	bgt.n	8000cfa <main+0x6a>
if ( timeout < 0 )
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	da01      	bge.n	8000d1a <main+0x8a>
{
Error_Handler();
 8000d16:	f000 fa7f 	bl	8001218 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1a:	f000 f97f 	bl	800101c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d1e:	f000 f8af 	bl	8000e80 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000d22:	f000 f92f 	bl	8000f84 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  TIM2->CCR1 = 50;
 8000d26:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d2a:	2232      	movs	r2, #50	@ 0x32
 8000d2c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2->CCR2 = 50;
 8000d2e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d32:	2232      	movs	r2, #50	@ 0x32
 8000d34:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8000d36:	2100      	movs	r1, #0
 8000d38:	4819      	ldr	r0, [pc, #100]	@ (8000da0 <main+0x110>)
 8000d3a:	f004 fcf5 	bl	8005728 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 8000d3e:	2104      	movs	r1, #4
 8000d40:	4817      	ldr	r0, [pc, #92]	@ (8000da0 <main+0x110>)
 8000d42:	f004 fcf1 	bl	8005728 <HAL_TIM_PWM_Start_IT>
  HAL_UART_Receive_IT(&huart3, &rx_data, 3);
 8000d46:	2203      	movs	r2, #3
 8000d48:	4916      	ldr	r1, [pc, #88]	@ (8000da4 <main+0x114>)
 8000d4a:	4817      	ldr	r0, [pc, #92]	@ (8000da8 <main+0x118>)
 8000d4c:	f005 fdfe 	bl	800694c <HAL_UART_Receive_IT>
  while (1)
  {
	  setServoPulse(&htim2, TIM_CHANNEL_1, 74);  // Neutral (stop)
 8000d50:	224a      	movs	r2, #74	@ 0x4a
 8000d52:	2100      	movs	r1, #0
 8000d54:	4812      	ldr	r0, [pc, #72]	@ (8000da0 <main+0x110>)
 8000d56:	f7ff ff61 	bl	8000c1c <setServoPulse>
	  HAL_Delay(2000);
 8000d5a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d5e:	f000 fd23 	bl	80017a8 <HAL_Delay>
	  setServoPulse(&htim2, TIM_CHANNEL_1, 49);  // Full speed counterclockwise
 8000d62:	2231      	movs	r2, #49	@ 0x31
 8000d64:	2100      	movs	r1, #0
 8000d66:	480e      	ldr	r0, [pc, #56]	@ (8000da0 <main+0x110>)
 8000d68:	f7ff ff58 	bl	8000c1c <setServoPulse>
	  HAL_Delay(2000);
 8000d6c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d70:	f000 fd1a 	bl	80017a8 <HAL_Delay>
	  setServoPulse(&htim2, TIM_CHANNEL_1, 74);  // Neutral (stop)
 8000d74:	224a      	movs	r2, #74	@ 0x4a
 8000d76:	2100      	movs	r1, #0
 8000d78:	4809      	ldr	r0, [pc, #36]	@ (8000da0 <main+0x110>)
 8000d7a:	f7ff ff4f 	bl	8000c1c <setServoPulse>
	  HAL_Delay(2000);
 8000d7e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d82:	f000 fd11 	bl	80017a8 <HAL_Delay>
	  setServoPulse(&htim2, TIM_CHANNEL_1, 98);  // Full speed clockwise
 8000d86:	2262      	movs	r2, #98	@ 0x62
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4805      	ldr	r0, [pc, #20]	@ (8000da0 <main+0x110>)
 8000d8c:	f7ff ff46 	bl	8000c1c <setServoPulse>
	  HAL_Delay(2000);
 8000d90:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d94:	f000 fd08 	bl	80017a8 <HAL_Delay>
	  setServoPulse(&htim2, TIM_CHANNEL_1, 74);  // Neutral (stop)
 8000d98:	bf00      	nop
 8000d9a:	e7d9      	b.n	8000d50 <main+0xc0>
 8000d9c:	58024400 	.word	0x58024400
 8000da0:	240001f4 	.word	0x240001f4
 8000da4:	240002d4 	.word	0x240002d4
 8000da8:	24000240 	.word	0x24000240

08000dac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b09c      	sub	sp, #112	@ 0x70
 8000db0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000db6:	224c      	movs	r2, #76	@ 0x4c
 8000db8:	2100      	movs	r1, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f009 f87d 	bl	8009eba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	2220      	movs	r2, #32
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f009 f877 	bl	8009eba <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000dcc:	2004      	movs	r0, #4
 8000dce:	f001 fd87 	bl	80028e0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	603b      	str	r3, [r7, #0]
 8000dd6:	4b28      	ldr	r3, [pc, #160]	@ (8000e78 <SystemClock_Config+0xcc>)
 8000dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dda:	4a27      	ldr	r2, [pc, #156]	@ (8000e78 <SystemClock_Config+0xcc>)
 8000ddc:	f023 0301 	bic.w	r3, r3, #1
 8000de0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000de2:	4b25      	ldr	r3, [pc, #148]	@ (8000e78 <SystemClock_Config+0xcc>)
 8000de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	4b23      	ldr	r3, [pc, #140]	@ (8000e7c <SystemClock_Config+0xd0>)
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000df4:	4a21      	ldr	r2, [pc, #132]	@ (8000e7c <SystemClock_Config+0xd0>)
 8000df6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dfa:	6193      	str	r3, [r2, #24]
 8000dfc:	4b1f      	ldr	r3, [pc, #124]	@ (8000e7c <SystemClock_Config+0xd0>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e04:	603b      	str	r3, [r7, #0]
 8000e06:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e08:	bf00      	nop
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e7c <SystemClock_Config+0xd0>)
 8000e0c:	699b      	ldr	r3, [r3, #24]
 8000e0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e16:	d1f8      	bne.n	8000e0a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e20:	2340      	movs	r3, #64	@ 0x40
 8000e22:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f001 fdb1 	bl	8002994 <HAL_RCC_OscConfig>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000e38:	f000 f9ee 	bl	8001218 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3c:	233f      	movs	r3, #63	@ 0x3f
 8000e3e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e50:	2340      	movs	r3, #64	@ 0x40
 8000e52:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	2101      	movs	r1, #1
 8000e60:	4618      	mov	r0, r3
 8000e62:	f002 f9f1 	bl	8003248 <HAL_RCC_ClockConfig>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e6c:	f000 f9d4 	bl	8001218 <Error_Handler>
  }
}
 8000e70:	bf00      	nop
 8000e72:	3770      	adds	r7, #112	@ 0x70
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	58000400 	.word	0x58000400
 8000e7c:	58024800 	.word	0x58024800

08000e80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08e      	sub	sp, #56	@ 0x38
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e86:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e94:	f107 031c 	add.w	r3, r7, #28
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
 8000eac:	611a      	str	r2, [r3, #16]
 8000eae:	615a      	str	r2, [r3, #20]
 8000eb0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eb2:	4b33      	ldr	r3, [pc, #204]	@ (8000f80 <MX_TIM2_Init+0x100>)
 8000eb4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000eb8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1280;
 8000eba:	4b31      	ldr	r3, [pc, #196]	@ (8000f80 <MX_TIM2_Init+0x100>)
 8000ebc:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000ec0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec2:	4b2f      	ldr	r3, [pc, #188]	@ (8000f80 <MX_TIM2_Init+0x100>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000ec8:	4b2d      	ldr	r3, [pc, #180]	@ (8000f80 <MX_TIM2_Init+0x100>)
 8000eca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ece:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed0:	4b2b      	ldr	r3, [pc, #172]	@ (8000f80 <MX_TIM2_Init+0x100>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed6:	4b2a      	ldr	r3, [pc, #168]	@ (8000f80 <MX_TIM2_Init+0x100>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000edc:	4828      	ldr	r0, [pc, #160]	@ (8000f80 <MX_TIM2_Init+0x100>)
 8000ede:	f004 fb6b 	bl	80055b8 <HAL_TIM_Base_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000ee8:	f000 f996 	bl	8001218 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ef2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4821      	ldr	r0, [pc, #132]	@ (8000f80 <MX_TIM2_Init+0x100>)
 8000efa:	f004 fe83 	bl	8005c04 <HAL_TIM_ConfigClockSource>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000f04:	f000 f988 	bl	8001218 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f08:	481d      	ldr	r0, [pc, #116]	@ (8000f80 <MX_TIM2_Init+0x100>)
 8000f0a:	f004 fbac 	bl	8005666 <HAL_TIM_PWM_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000f14:	f000 f980 	bl	8001218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f20:	f107 031c 	add.w	r3, r7, #28
 8000f24:	4619      	mov	r1, r3
 8000f26:	4816      	ldr	r0, [pc, #88]	@ (8000f80 <MX_TIM2_Init+0x100>)
 8000f28:	f005 fba4 	bl	8006674 <HAL_TIMEx_MasterConfigSynchronization>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000f32:	f000 f971 	bl	8001218 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f36:	2360      	movs	r3, #96	@ 0x60
 8000f38:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f46:	463b      	mov	r3, r7
 8000f48:	2200      	movs	r2, #0
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	480c      	ldr	r0, [pc, #48]	@ (8000f80 <MX_TIM2_Init+0x100>)
 8000f4e:	f004 fd45 	bl	80059dc <HAL_TIM_PWM_ConfigChannel>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000f58:	f000 f95e 	bl	8001218 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	2204      	movs	r2, #4
 8000f60:	4619      	mov	r1, r3
 8000f62:	4807      	ldr	r0, [pc, #28]	@ (8000f80 <MX_TIM2_Init+0x100>)
 8000f64:	f004 fd3a 	bl	80059dc <HAL_TIM_PWM_ConfigChannel>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000f6e:	f000 f953 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f72:	4803      	ldr	r0, [pc, #12]	@ (8000f80 <MX_TIM2_Init+0x100>)
 8000f74:	f000 f990 	bl	8001298 <HAL_TIM_MspPostInit>

}
 8000f78:	bf00      	nop
 8000f7a:	3738      	adds	r7, #56	@ 0x38
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	240001f4 	.word	0x240001f4

08000f84 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f88:	4b22      	ldr	r3, [pc, #136]	@ (8001014 <MX_USART3_UART_Init+0x90>)
 8000f8a:	4a23      	ldr	r2, [pc, #140]	@ (8001018 <MX_USART3_UART_Init+0x94>)
 8000f8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000f8e:	4b21      	ldr	r3, [pc, #132]	@ (8001014 <MX_USART3_UART_Init+0x90>)
 8000f90:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000f94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f96:	4b1f      	ldr	r3, [pc, #124]	@ (8001014 <MX_USART3_UART_Init+0x90>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001014 <MX_USART3_UART_Init+0x90>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fa2:	4b1c      	ldr	r3, [pc, #112]	@ (8001014 <MX_USART3_UART_Init+0x90>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8001014 <MX_USART3_UART_Init+0x90>)
 8000faa:	220c      	movs	r2, #12
 8000fac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fae:	4b19      	ldr	r3, [pc, #100]	@ (8001014 <MX_USART3_UART_Init+0x90>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb4:	4b17      	ldr	r3, [pc, #92]	@ (8001014 <MX_USART3_UART_Init+0x90>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fba:	4b16      	ldr	r3, [pc, #88]	@ (8001014 <MX_USART3_UART_Init+0x90>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fc0:	4b14      	ldr	r3, [pc, #80]	@ (8001014 <MX_USART3_UART_Init+0x90>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fc6:	4b13      	ldr	r3, [pc, #76]	@ (8001014 <MX_USART3_UART_Init+0x90>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fcc:	4811      	ldr	r0, [pc, #68]	@ (8001014 <MX_USART3_UART_Init+0x90>)
 8000fce:	f005 fbdf 	bl	8006790 <HAL_UART_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000fd8:	f000 f91e 	bl	8001218 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fdc:	2100      	movs	r1, #0
 8000fde:	480d      	ldr	r0, [pc, #52]	@ (8001014 <MX_USART3_UART_Init+0x90>)
 8000fe0:	f007 ff39 	bl	8008e56 <HAL_UARTEx_SetTxFifoThreshold>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000fea:	f000 f915 	bl	8001218 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4808      	ldr	r0, [pc, #32]	@ (8001014 <MX_USART3_UART_Init+0x90>)
 8000ff2:	f007 ff6e 	bl	8008ed2 <HAL_UARTEx_SetRxFifoThreshold>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ffc:	f000 f90c 	bl	8001218 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001000:	4804      	ldr	r0, [pc, #16]	@ (8001014 <MX_USART3_UART_Init+0x90>)
 8001002:	f007 feef 	bl	8008de4 <HAL_UARTEx_DisableFifoMode>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800100c:	f000 f904 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	24000240 	.word	0x24000240
 8001018:	40004800 	.word	0x40004800

0800101c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08c      	sub	sp, #48	@ 0x30
 8001020:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001022:	f107 031c 	add.w	r3, r7, #28
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001032:	4b73      	ldr	r3, [pc, #460]	@ (8001200 <MX_GPIO_Init+0x1e4>)
 8001034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001038:	4a71      	ldr	r2, [pc, #452]	@ (8001200 <MX_GPIO_Init+0x1e4>)
 800103a:	f043 0304 	orr.w	r3, r3, #4
 800103e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001042:	4b6f      	ldr	r3, [pc, #444]	@ (8001200 <MX_GPIO_Init+0x1e4>)
 8001044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001048:	f003 0304 	and.w	r3, r3, #4
 800104c:	61bb      	str	r3, [r7, #24]
 800104e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001050:	4b6b      	ldr	r3, [pc, #428]	@ (8001200 <MX_GPIO_Init+0x1e4>)
 8001052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001056:	4a6a      	ldr	r2, [pc, #424]	@ (8001200 <MX_GPIO_Init+0x1e4>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001060:	4b67      	ldr	r3, [pc, #412]	@ (8001200 <MX_GPIO_Init+0x1e4>)
 8001062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106e:	4b64      	ldr	r3, [pc, #400]	@ (8001200 <MX_GPIO_Init+0x1e4>)
 8001070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001074:	4a62      	ldr	r2, [pc, #392]	@ (8001200 <MX_GPIO_Init+0x1e4>)
 8001076:	f043 0302 	orr.w	r3, r3, #2
 800107a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800107e:	4b60      	ldr	r3, [pc, #384]	@ (8001200 <MX_GPIO_Init+0x1e4>)
 8001080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800108c:	4b5c      	ldr	r3, [pc, #368]	@ (8001200 <MX_GPIO_Init+0x1e4>)
 800108e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001092:	4a5b      	ldr	r2, [pc, #364]	@ (8001200 <MX_GPIO_Init+0x1e4>)
 8001094:	f043 0308 	orr.w	r3, r3, #8
 8001098:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800109c:	4b58      	ldr	r3, [pc, #352]	@ (8001200 <MX_GPIO_Init+0x1e4>)
 800109e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a2:	f003 0308 	and.w	r3, r3, #8
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010aa:	4b55      	ldr	r3, [pc, #340]	@ (8001200 <MX_GPIO_Init+0x1e4>)
 80010ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b0:	4a53      	ldr	r2, [pc, #332]	@ (8001200 <MX_GPIO_Init+0x1e4>)
 80010b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ba:	4b51      	ldr	r3, [pc, #324]	@ (8001200 <MX_GPIO_Init+0x1e4>)
 80010bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010c8:	4b4d      	ldr	r3, [pc, #308]	@ (8001200 <MX_GPIO_Init+0x1e4>)
 80010ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ce:	4a4c      	ldr	r2, [pc, #304]	@ (8001200 <MX_GPIO_Init+0x1e4>)
 80010d0:	f043 0310 	orr.w	r3, r3, #16
 80010d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010d8:	4b49      	ldr	r3, [pc, #292]	@ (8001200 <MX_GPIO_Init+0x1e4>)
 80010da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010de:	f003 0310 	and.w	r3, r3, #16
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED3_Pin, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	f244 0101 	movw	r1, #16385	@ 0x4001
 80010ec:	4845      	ldr	r0, [pc, #276]	@ (8001204 <MX_GPIO_Init+0x1e8>)
 80010ee:	f001 fbaf 	bl	8002850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2102      	movs	r1, #2
 80010f6:	4844      	ldr	r0, [pc, #272]	@ (8001208 <MX_GPIO_Init+0x1ec>)
 80010f8:	f001 fbaa 	bl	8002850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80010fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001102:	2300      	movs	r3, #0
 8001104:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800110a:	f107 031c 	add.w	r3, r7, #28
 800110e:	4619      	mov	r1, r3
 8001110:	483e      	ldr	r0, [pc, #248]	@ (800120c <MX_GPIO_Init+0x1f0>)
 8001112:	f001 f9ed 	bl	80024f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001116:	2332      	movs	r3, #50	@ 0x32
 8001118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001126:	230b      	movs	r3, #11
 8001128:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112a:	f107 031c 	add.w	r3, r7, #28
 800112e:	4619      	mov	r1, r3
 8001130:	4836      	ldr	r0, [pc, #216]	@ (800120c <MX_GPIO_Init+0x1f0>)
 8001132:	f001 f9dd 	bl	80024f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001136:	2386      	movs	r3, #134	@ 0x86
 8001138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001146:	230b      	movs	r3, #11
 8001148:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	f107 031c 	add.w	r3, r7, #28
 800114e:	4619      	mov	r1, r3
 8001150:	482f      	ldr	r0, [pc, #188]	@ (8001210 <MX_GPIO_Init+0x1f4>)
 8001152:	f001 f9cd 	bl	80024f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin;
 8001156:	f244 0301 	movw	r3, #16385	@ 0x4001
 800115a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115c:	2301      	movs	r3, #1
 800115e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001168:	f107 031c 	add.w	r3, r7, #28
 800116c:	4619      	mov	r1, r3
 800116e:	4825      	ldr	r0, [pc, #148]	@ (8001204 <MX_GPIO_Init+0x1e8>)
 8001170:	f001 f9be 	bl	80024f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001174:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001178:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001186:	230b      	movs	r3, #11
 8001188:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118a:	f107 031c 	add.w	r3, r7, #28
 800118e:	4619      	mov	r1, r3
 8001190:	481c      	ldr	r0, [pc, #112]	@ (8001204 <MX_GPIO_Init+0x1e8>)
 8001192:	f001 f9ad 	bl	80024f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001196:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800119a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80011a8:	230a      	movs	r3, #10
 80011aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	4619      	mov	r1, r3
 80011b2:	4817      	ldr	r0, [pc, #92]	@ (8001210 <MX_GPIO_Init+0x1f4>)
 80011b4:	f001 f99c 	bl	80024f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80011b8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80011bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2300      	movs	r3, #0
 80011c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011ca:	230b      	movs	r3, #11
 80011cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011ce:	f107 031c 	add.w	r3, r7, #28
 80011d2:	4619      	mov	r1, r3
 80011d4:	480f      	ldr	r0, [pc, #60]	@ (8001214 <MX_GPIO_Init+0x1f8>)
 80011d6:	f001 f98b 	bl	80024f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80011da:	2302      	movs	r3, #2
 80011dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011de:	2301      	movs	r3, #1
 80011e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80011ea:	f107 031c 	add.w	r3, r7, #28
 80011ee:	4619      	mov	r1, r3
 80011f0:	4805      	ldr	r0, [pc, #20]	@ (8001208 <MX_GPIO_Init+0x1ec>)
 80011f2:	f001 f97d 	bl	80024f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011f6:	bf00      	nop
 80011f8:	3730      	adds	r7, #48	@ 0x30
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	58024400 	.word	0x58024400
 8001204:	58020400 	.word	0x58020400
 8001208:	58021000 	.word	0x58021000
 800120c:	58020800 	.word	0x58020800
 8001210:	58020000 	.word	0x58020000
 8001214:	58021800 	.word	0x58021800

08001218 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800121c:	b672      	cpsid	i
}
 800121e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <Error_Handler+0x8>

08001224 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122a:	4b0a      	ldr	r3, [pc, #40]	@ (8001254 <HAL_MspInit+0x30>)
 800122c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001230:	4a08      	ldr	r2, [pc, #32]	@ (8001254 <HAL_MspInit+0x30>)
 8001232:	f043 0302 	orr.w	r3, r3, #2
 8001236:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800123a:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <HAL_MspInit+0x30>)
 800123c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	58024400 	.word	0x58024400

08001258 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001268:	d10e      	bne.n	8001288 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800126a:	4b0a      	ldr	r3, [pc, #40]	@ (8001294 <HAL_TIM_Base_MspInit+0x3c>)
 800126c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001270:	4a08      	ldr	r2, [pc, #32]	@ (8001294 <HAL_TIM_Base_MspInit+0x3c>)
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800127a:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <HAL_TIM_Base_MspInit+0x3c>)
 800127c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001288:	bf00      	nop
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	58024400 	.word	0x58024400

08001298 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	@ 0x28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012b8:	d13d      	bne.n	8001336 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	4b21      	ldr	r3, [pc, #132]	@ (8001340 <HAL_TIM_MspPostInit+0xa8>)
 80012bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c0:	4a1f      	ldr	r2, [pc, #124]	@ (8001340 <HAL_TIM_MspPostInit+0xa8>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001340 <HAL_TIM_MspPostInit+0xa8>)
 80012cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d8:	4b19      	ldr	r3, [pc, #100]	@ (8001340 <HAL_TIM_MspPostInit+0xa8>)
 80012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012de:	4a18      	ldr	r2, [pc, #96]	@ (8001340 <HAL_TIM_MspPostInit+0xa8>)
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012e8:	4b15      	ldr	r3, [pc, #84]	@ (8001340 <HAL_TIM_MspPostInit+0xa8>)
 80012ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012f6:	2301      	movs	r3, #1
 80012f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001302:	2300      	movs	r3, #0
 8001304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001306:	2301      	movs	r3, #1
 8001308:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	4619      	mov	r1, r3
 8001310:	480c      	ldr	r0, [pc, #48]	@ (8001344 <HAL_TIM_MspPostInit+0xac>)
 8001312:	f001 f8ed 	bl	80024f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001316:	2308      	movs	r3, #8
 8001318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001326:	2301      	movs	r3, #1
 8001328:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4619      	mov	r1, r3
 8001330:	4805      	ldr	r0, [pc, #20]	@ (8001348 <HAL_TIM_MspPostInit+0xb0>)
 8001332:	f001 f8dd 	bl	80024f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001336:	bf00      	nop
 8001338:	3728      	adds	r7, #40	@ 0x28
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	58024400 	.word	0x58024400
 8001344:	58020000 	.word	0x58020000
 8001348:	58020400 	.word	0x58020400

0800134c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b0ba      	sub	sp, #232	@ 0xe8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001364:	f107 0310 	add.w	r3, r7, #16
 8001368:	22c0      	movs	r2, #192	@ 0xc0
 800136a:	2100      	movs	r1, #0
 800136c:	4618      	mov	r0, r3
 800136e:	f008 fda4 	bl	8009eba <memset>
  if(huart->Instance==USART3)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a2b      	ldr	r2, [pc, #172]	@ (8001424 <HAL_UART_MspInit+0xd8>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d14e      	bne.n	800141a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800137c:	f04f 0202 	mov.w	r2, #2
 8001380:	f04f 0300 	mov.w	r3, #0
 8001384:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001388:	2300      	movs	r3, #0
 800138a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800138e:	f107 0310 	add.w	r3, r7, #16
 8001392:	4618      	mov	r0, r3
 8001394:	f002 fae4 	bl	8003960 <HAL_RCCEx_PeriphCLKConfig>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800139e:	f7ff ff3b 	bl	8001218 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013a2:	4b21      	ldr	r3, [pc, #132]	@ (8001428 <HAL_UART_MspInit+0xdc>)
 80013a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013a8:	4a1f      	ldr	r2, [pc, #124]	@ (8001428 <HAL_UART_MspInit+0xdc>)
 80013aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013ae:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001428 <HAL_UART_MspInit+0xdc>)
 80013b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c0:	4b19      	ldr	r3, [pc, #100]	@ (8001428 <HAL_UART_MspInit+0xdc>)
 80013c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c6:	4a18      	ldr	r2, [pc, #96]	@ (8001428 <HAL_UART_MspInit+0xdc>)
 80013c8:	f043 0308 	orr.w	r3, r3, #8
 80013cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013d0:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <HAL_UART_MspInit+0xdc>)
 80013d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013de:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013f8:	2307      	movs	r3, #7
 80013fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013fe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001402:	4619      	mov	r1, r3
 8001404:	4809      	ldr	r0, [pc, #36]	@ (800142c <HAL_UART_MspInit+0xe0>)
 8001406:	f001 f873 	bl	80024f0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2100      	movs	r1, #0
 800140e:	2027      	movs	r0, #39	@ 0x27
 8001410:	f000 fad5 	bl	80019be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001414:	2027      	movs	r0, #39	@ 0x27
 8001416:	f000 faec 	bl	80019f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800141a:	bf00      	nop
 800141c:	37e8      	adds	r7, #232	@ 0xe8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40004800 	.word	0x40004800
 8001428:	58024400 	.word	0x58024400
 800142c:	58020c00 	.word	0x58020c00

08001430 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001434:	bf00      	nop
 8001436:	e7fd      	b.n	8001434 <NMI_Handler+0x4>

08001438 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <HardFault_Handler+0x4>

08001440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <MemManage_Handler+0x4>

08001448 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <BusFault_Handler+0x4>

08001450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <UsageFault_Handler+0x4>

08001458 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001486:	f000 f96f 	bl	8001768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001494:	4802      	ldr	r0, [pc, #8]	@ (80014a0 <USART3_IRQHandler+0x10>)
 8001496:	f005 faa5 	bl	80069e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	24000240 	.word	0x24000240

080014a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return 1;
 80014a8:	2301      	movs	r3, #1
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <_kill>:

int _kill(int pid, int sig)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014be:	f008 fd4f 	bl	8009f60 <__errno>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2216      	movs	r2, #22
 80014c6:	601a      	str	r2, [r3, #0]
  return -1;
 80014c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <_exit>:

void _exit (int status)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014dc:	f04f 31ff 	mov.w	r1, #4294967295
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff ffe7 	bl	80014b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014e6:	bf00      	nop
 80014e8:	e7fd      	b.n	80014e6 <_exit+0x12>

080014ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b086      	sub	sp, #24
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	60f8      	str	r0, [r7, #12]
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	e00a      	b.n	8001512 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014fc:	f3af 8000 	nop.w
 8001500:	4601      	mov	r1, r0
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	1c5a      	adds	r2, r3, #1
 8001506:	60ba      	str	r2, [r7, #8]
 8001508:	b2ca      	uxtb	r2, r1
 800150a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	3301      	adds	r3, #1
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	429a      	cmp	r2, r3
 8001518:	dbf0      	blt.n	80014fc <_read+0x12>
  }

  return len;
 800151a:	687b      	ldr	r3, [r7, #4]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	e009      	b.n	800154a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	1c5a      	adds	r2, r3, #1
 800153a:	60ba      	str	r2, [r7, #8]
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	3301      	adds	r3, #1
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	429a      	cmp	r2, r3
 8001550:	dbf1      	blt.n	8001536 <_write+0x12>
  }
  return len;
 8001552:	687b      	ldr	r3, [r7, #4]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <_close>:

int _close(int file)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001564:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001568:	4618      	mov	r0, r3
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001584:	605a      	str	r2, [r3, #4]
  return 0;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <_isatty>:

int _isatty(int file)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800159c:	2301      	movs	r3, #1
}
 800159e:	4618      	mov	r0, r3
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b085      	sub	sp, #20
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	60f8      	str	r0, [r7, #12]
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015cc:	4a14      	ldr	r2, [pc, #80]	@ (8001620 <_sbrk+0x5c>)
 80015ce:	4b15      	ldr	r3, [pc, #84]	@ (8001624 <_sbrk+0x60>)
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d8:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <_sbrk+0x64>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d102      	bne.n	80015e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e0:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <_sbrk+0x64>)
 80015e2:	4a12      	ldr	r2, [pc, #72]	@ (800162c <_sbrk+0x68>)
 80015e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015e6:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <_sbrk+0x64>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d207      	bcs.n	8001604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f4:	f008 fcb4 	bl	8009f60 <__errno>
 80015f8:	4603      	mov	r3, r0
 80015fa:	220c      	movs	r2, #12
 80015fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001602:	e009      	b.n	8001618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001604:	4b08      	ldr	r3, [pc, #32]	@ (8001628 <_sbrk+0x64>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800160a:	4b07      	ldr	r3, [pc, #28]	@ (8001628 <_sbrk+0x64>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	4a05      	ldr	r2, [pc, #20]	@ (8001628 <_sbrk+0x64>)
 8001614:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001616:	68fb      	ldr	r3, [r7, #12]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	24080000 	.word	0x24080000
 8001624:	00000400 	.word	0x00000400
 8001628:	240002d8 	.word	0x240002d8
 800162c:	24000430 	.word	0x24000430

08001630 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001630:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001668 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001634:	f7ff fa18 	bl	8000a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001638:	480c      	ldr	r0, [pc, #48]	@ (800166c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800163a:	490d      	ldr	r1, [pc, #52]	@ (8001670 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800163c:	4a0d      	ldr	r2, [pc, #52]	@ (8001674 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800163e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001640:	e002      	b.n	8001648 <LoopCopyDataInit>

08001642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001646:	3304      	adds	r3, #4

08001648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800164a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800164c:	d3f9      	bcc.n	8001642 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800164e:	4a0a      	ldr	r2, [pc, #40]	@ (8001678 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001650:	4c0a      	ldr	r4, [pc, #40]	@ (800167c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001654:	e001      	b.n	800165a <LoopFillZerobss>

08001656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001658:	3204      	adds	r2, #4

0800165a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800165a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800165c:	d3fb      	bcc.n	8001656 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800165e:	f008 fc85 	bl	8009f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001662:	f7ff fb15 	bl	8000c90 <main>
  bx  lr
 8001666:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001668:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800166c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001670:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001674:	0800d978 	.word	0x0800d978
  ldr r2, =_sbss
 8001678:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 800167c:	2400042c 	.word	0x2400042c

08001680 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001680:	e7fe      	b.n	8001680 <ADC3_IRQHandler>
	...

08001684 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800168a:	2003      	movs	r0, #3
 800168c:	f000 f98c 	bl	80019a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001690:	f001 ff90 	bl	80035b4 <HAL_RCC_GetSysClockFreq>
 8001694:	4602      	mov	r2, r0
 8001696:	4b15      	ldr	r3, [pc, #84]	@ (80016ec <HAL_Init+0x68>)
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	0a1b      	lsrs	r3, r3, #8
 800169c:	f003 030f 	and.w	r3, r3, #15
 80016a0:	4913      	ldr	r1, [pc, #76]	@ (80016f0 <HAL_Init+0x6c>)
 80016a2:	5ccb      	ldrb	r3, [r1, r3]
 80016a4:	f003 031f 	and.w	r3, r3, #31
 80016a8:	fa22 f303 	lsr.w	r3, r2, r3
 80016ac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016ae:	4b0f      	ldr	r3, [pc, #60]	@ (80016ec <HAL_Init+0x68>)
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	4a0e      	ldr	r2, [pc, #56]	@ (80016f0 <HAL_Init+0x6c>)
 80016b8:	5cd3      	ldrb	r3, [r2, r3]
 80016ba:	f003 031f 	and.w	r3, r3, #31
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	fa22 f303 	lsr.w	r3, r2, r3
 80016c4:	4a0b      	ldr	r2, [pc, #44]	@ (80016f4 <HAL_Init+0x70>)
 80016c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016c8:	4a0b      	ldr	r2, [pc, #44]	@ (80016f8 <HAL_Init+0x74>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ce:	2000      	movs	r0, #0
 80016d0:	f000 f814 	bl	80016fc <HAL_InitTick>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e002      	b.n	80016e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016de:	f7ff fda1 	bl	8001224 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	58024400 	.word	0x58024400
 80016f0:	0800d500 	.word	0x0800d500
 80016f4:	24000004 	.word	0x24000004
 80016f8:	24000000 	.word	0x24000000

080016fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001704:	4b15      	ldr	r3, [pc, #84]	@ (800175c <HAL_InitTick+0x60>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d101      	bne.n	8001710 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e021      	b.n	8001754 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001710:	4b13      	ldr	r3, [pc, #76]	@ (8001760 <HAL_InitTick+0x64>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b11      	ldr	r3, [pc, #68]	@ (800175c <HAL_InitTick+0x60>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	4619      	mov	r1, r3
 800171a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800171e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001722:	fbb2 f3f3 	udiv	r3, r2, r3
 8001726:	4618      	mov	r0, r3
 8001728:	f000 f971 	bl	8001a0e <HAL_SYSTICK_Config>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e00e      	b.n	8001754 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b0f      	cmp	r3, #15
 800173a:	d80a      	bhi.n	8001752 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800173c:	2200      	movs	r2, #0
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	f04f 30ff 	mov.w	r0, #4294967295
 8001744:	f000 f93b 	bl	80019be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001748:	4a06      	ldr	r2, [pc, #24]	@ (8001764 <HAL_InitTick+0x68>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800174e:	2300      	movs	r3, #0
 8001750:	e000      	b.n	8001754 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
}
 8001754:	4618      	mov	r0, r3
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	2400000c 	.word	0x2400000c
 8001760:	24000000 	.word	0x24000000
 8001764:	24000008 	.word	0x24000008

08001768 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800176c:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <HAL_IncTick+0x20>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	4b06      	ldr	r3, [pc, #24]	@ (800178c <HAL_IncTick+0x24>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4413      	add	r3, r2
 8001778:	4a04      	ldr	r2, [pc, #16]	@ (800178c <HAL_IncTick+0x24>)
 800177a:	6013      	str	r3, [r2, #0]
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	2400000c 	.word	0x2400000c
 800178c:	240002dc 	.word	0x240002dc

08001790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return uwTick;
 8001794:	4b03      	ldr	r3, [pc, #12]	@ (80017a4 <HAL_GetTick+0x14>)
 8001796:	681b      	ldr	r3, [r3, #0]
}
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	240002dc 	.word	0x240002dc

080017a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017b0:	f7ff ffee 	bl	8001790 <HAL_GetTick>
 80017b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c0:	d005      	beq.n	80017ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017c2:	4b0a      	ldr	r3, [pc, #40]	@ (80017ec <HAL_Delay+0x44>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	461a      	mov	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4413      	add	r3, r2
 80017cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ce:	bf00      	nop
 80017d0:	f7ff ffde 	bl	8001790 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d8f7      	bhi.n	80017d0 <HAL_Delay+0x28>
  {
  }
}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	2400000c 	.word	0x2400000c

080017f0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017f4:	4b03      	ldr	r3, [pc, #12]	@ (8001804 <HAL_GetREVID+0x14>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	0c1b      	lsrs	r3, r3, #16
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	5c001000 	.word	0x5c001000

08001808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001818:	4b0b      	ldr	r3, [pc, #44]	@ (8001848 <__NVIC_SetPriorityGrouping+0x40>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001824:	4013      	ands	r3, r2
 8001826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001830:	4b06      	ldr	r3, [pc, #24]	@ (800184c <__NVIC_SetPriorityGrouping+0x44>)
 8001832:	4313      	orrs	r3, r2
 8001834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001836:	4a04      	ldr	r2, [pc, #16]	@ (8001848 <__NVIC_SetPriorityGrouping+0x40>)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	60d3      	str	r3, [r2, #12]
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000ed00 	.word	0xe000ed00
 800184c:	05fa0000 	.word	0x05fa0000

08001850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001854:	4b04      	ldr	r3, [pc, #16]	@ (8001868 <__NVIC_GetPriorityGrouping+0x18>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	0a1b      	lsrs	r3, r3, #8
 800185a:	f003 0307 	and.w	r3, r3, #7
}
 800185e:	4618      	mov	r0, r3
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001876:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800187a:	2b00      	cmp	r3, #0
 800187c:	db0b      	blt.n	8001896 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800187e:	88fb      	ldrh	r3, [r7, #6]
 8001880:	f003 021f 	and.w	r2, r3, #31
 8001884:	4907      	ldr	r1, [pc, #28]	@ (80018a4 <__NVIC_EnableIRQ+0x38>)
 8001886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800188a:	095b      	lsrs	r3, r3, #5
 800188c:	2001      	movs	r0, #1
 800188e:	fa00 f202 	lsl.w	r2, r0, r2
 8001892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000e100 	.word	0xe000e100

080018a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	6039      	str	r1, [r7, #0]
 80018b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	db0a      	blt.n	80018d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	490c      	ldr	r1, [pc, #48]	@ (80018f4 <__NVIC_SetPriority+0x4c>)
 80018c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018c6:	0112      	lsls	r2, r2, #4
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	440b      	add	r3, r1
 80018cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d0:	e00a      	b.n	80018e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	4908      	ldr	r1, [pc, #32]	@ (80018f8 <__NVIC_SetPriority+0x50>)
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	f003 030f 	and.w	r3, r3, #15
 80018de:	3b04      	subs	r3, #4
 80018e0:	0112      	lsls	r2, r2, #4
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	440b      	add	r3, r1
 80018e6:	761a      	strb	r2, [r3, #24]
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	e000e100 	.word	0xe000e100
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b089      	sub	sp, #36	@ 0x24
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f1c3 0307 	rsb	r3, r3, #7
 8001916:	2b04      	cmp	r3, #4
 8001918:	bf28      	it	cs
 800191a:	2304      	movcs	r3, #4
 800191c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3304      	adds	r3, #4
 8001922:	2b06      	cmp	r3, #6
 8001924:	d902      	bls.n	800192c <NVIC_EncodePriority+0x30>
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	3b03      	subs	r3, #3
 800192a:	e000      	b.n	800192e <NVIC_EncodePriority+0x32>
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001930:	f04f 32ff 	mov.w	r2, #4294967295
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43da      	mvns	r2, r3
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	401a      	ands	r2, r3
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001944:	f04f 31ff 	mov.w	r1, #4294967295
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	fa01 f303 	lsl.w	r3, r1, r3
 800194e:	43d9      	mvns	r1, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001954:	4313      	orrs	r3, r2
         );
}
 8001956:	4618      	mov	r0, r3
 8001958:	3724      	adds	r7, #36	@ 0x24
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
	...

08001964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3b01      	subs	r3, #1
 8001970:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001974:	d301      	bcc.n	800197a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001976:	2301      	movs	r3, #1
 8001978:	e00f      	b.n	800199a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800197a:	4a0a      	ldr	r2, [pc, #40]	@ (80019a4 <SysTick_Config+0x40>)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3b01      	subs	r3, #1
 8001980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001982:	210f      	movs	r1, #15
 8001984:	f04f 30ff 	mov.w	r0, #4294967295
 8001988:	f7ff ff8e 	bl	80018a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800198c:	4b05      	ldr	r3, [pc, #20]	@ (80019a4 <SysTick_Config+0x40>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001992:	4b04      	ldr	r3, [pc, #16]	@ (80019a4 <SysTick_Config+0x40>)
 8001994:	2207      	movs	r2, #7
 8001996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	e000e010 	.word	0xe000e010

080019a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff ff29 	bl	8001808 <__NVIC_SetPriorityGrouping>
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b086      	sub	sp, #24
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	4603      	mov	r3, r0
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
 80019ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019cc:	f7ff ff40 	bl	8001850 <__NVIC_GetPriorityGrouping>
 80019d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	68b9      	ldr	r1, [r7, #8]
 80019d6:	6978      	ldr	r0, [r7, #20]
 80019d8:	f7ff ff90 	bl	80018fc <NVIC_EncodePriority>
 80019dc:	4602      	mov	r2, r0
 80019de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019e2:	4611      	mov	r1, r2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff5f 	bl	80018a8 <__NVIC_SetPriority>
}
 80019ea:	bf00      	nop
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	4603      	mov	r3, r0
 80019fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ff33 	bl	800186c <__NVIC_EnableIRQ>
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff ffa4 	bl	8001964 <SysTick_Config>
 8001a1c:	4603      	mov	r3, r0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001a30:	f7ff feae 	bl	8001790 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e2dc      	b.n	8001ffa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d008      	beq.n	8001a5e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2280      	movs	r2, #128	@ 0x80
 8001a50:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e2cd      	b.n	8001ffa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a76      	ldr	r2, [pc, #472]	@ (8001c3c <HAL_DMA_Abort+0x214>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d04a      	beq.n	8001afe <HAL_DMA_Abort+0xd6>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a74      	ldr	r2, [pc, #464]	@ (8001c40 <HAL_DMA_Abort+0x218>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d045      	beq.n	8001afe <HAL_DMA_Abort+0xd6>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a73      	ldr	r2, [pc, #460]	@ (8001c44 <HAL_DMA_Abort+0x21c>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d040      	beq.n	8001afe <HAL_DMA_Abort+0xd6>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a71      	ldr	r2, [pc, #452]	@ (8001c48 <HAL_DMA_Abort+0x220>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d03b      	beq.n	8001afe <HAL_DMA_Abort+0xd6>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a70      	ldr	r2, [pc, #448]	@ (8001c4c <HAL_DMA_Abort+0x224>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d036      	beq.n	8001afe <HAL_DMA_Abort+0xd6>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a6e      	ldr	r2, [pc, #440]	@ (8001c50 <HAL_DMA_Abort+0x228>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d031      	beq.n	8001afe <HAL_DMA_Abort+0xd6>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a6d      	ldr	r2, [pc, #436]	@ (8001c54 <HAL_DMA_Abort+0x22c>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d02c      	beq.n	8001afe <HAL_DMA_Abort+0xd6>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a6b      	ldr	r2, [pc, #428]	@ (8001c58 <HAL_DMA_Abort+0x230>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d027      	beq.n	8001afe <HAL_DMA_Abort+0xd6>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a6a      	ldr	r2, [pc, #424]	@ (8001c5c <HAL_DMA_Abort+0x234>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d022      	beq.n	8001afe <HAL_DMA_Abort+0xd6>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a68      	ldr	r2, [pc, #416]	@ (8001c60 <HAL_DMA_Abort+0x238>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d01d      	beq.n	8001afe <HAL_DMA_Abort+0xd6>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a67      	ldr	r2, [pc, #412]	@ (8001c64 <HAL_DMA_Abort+0x23c>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d018      	beq.n	8001afe <HAL_DMA_Abort+0xd6>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a65      	ldr	r2, [pc, #404]	@ (8001c68 <HAL_DMA_Abort+0x240>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d013      	beq.n	8001afe <HAL_DMA_Abort+0xd6>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a64      	ldr	r2, [pc, #400]	@ (8001c6c <HAL_DMA_Abort+0x244>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d00e      	beq.n	8001afe <HAL_DMA_Abort+0xd6>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a62      	ldr	r2, [pc, #392]	@ (8001c70 <HAL_DMA_Abort+0x248>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d009      	beq.n	8001afe <HAL_DMA_Abort+0xd6>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a61      	ldr	r2, [pc, #388]	@ (8001c74 <HAL_DMA_Abort+0x24c>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d004      	beq.n	8001afe <HAL_DMA_Abort+0xd6>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a5f      	ldr	r2, [pc, #380]	@ (8001c78 <HAL_DMA_Abort+0x250>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d101      	bne.n	8001b02 <HAL_DMA_Abort+0xda>
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <HAL_DMA_Abort+0xdc>
 8001b02:	2300      	movs	r3, #0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d013      	beq.n	8001b30 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 021e 	bic.w	r2, r2, #30
 8001b16:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	695a      	ldr	r2, [r3, #20]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b26:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	e00a      	b.n	8001b46 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 020e 	bic.w	r2, r2, #14
 8001b3e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a3c      	ldr	r2, [pc, #240]	@ (8001c3c <HAL_DMA_Abort+0x214>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d072      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a3a      	ldr	r2, [pc, #232]	@ (8001c40 <HAL_DMA_Abort+0x218>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d06d      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a39      	ldr	r2, [pc, #228]	@ (8001c44 <HAL_DMA_Abort+0x21c>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d068      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a37      	ldr	r2, [pc, #220]	@ (8001c48 <HAL_DMA_Abort+0x220>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d063      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a36      	ldr	r2, [pc, #216]	@ (8001c4c <HAL_DMA_Abort+0x224>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d05e      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a34      	ldr	r2, [pc, #208]	@ (8001c50 <HAL_DMA_Abort+0x228>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d059      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a33      	ldr	r2, [pc, #204]	@ (8001c54 <HAL_DMA_Abort+0x22c>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d054      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a31      	ldr	r2, [pc, #196]	@ (8001c58 <HAL_DMA_Abort+0x230>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d04f      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a30      	ldr	r2, [pc, #192]	@ (8001c5c <HAL_DMA_Abort+0x234>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d04a      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a2e      	ldr	r2, [pc, #184]	@ (8001c60 <HAL_DMA_Abort+0x238>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d045      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a2d      	ldr	r2, [pc, #180]	@ (8001c64 <HAL_DMA_Abort+0x23c>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d040      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a2b      	ldr	r2, [pc, #172]	@ (8001c68 <HAL_DMA_Abort+0x240>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d03b      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a2a      	ldr	r2, [pc, #168]	@ (8001c6c <HAL_DMA_Abort+0x244>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d036      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a28      	ldr	r2, [pc, #160]	@ (8001c70 <HAL_DMA_Abort+0x248>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d031      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a27      	ldr	r2, [pc, #156]	@ (8001c74 <HAL_DMA_Abort+0x24c>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d02c      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a25      	ldr	r2, [pc, #148]	@ (8001c78 <HAL_DMA_Abort+0x250>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d027      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a24      	ldr	r2, [pc, #144]	@ (8001c7c <HAL_DMA_Abort+0x254>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d022      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a22      	ldr	r2, [pc, #136]	@ (8001c80 <HAL_DMA_Abort+0x258>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d01d      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a21      	ldr	r2, [pc, #132]	@ (8001c84 <HAL_DMA_Abort+0x25c>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d018      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a1f      	ldr	r2, [pc, #124]	@ (8001c88 <HAL_DMA_Abort+0x260>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d013      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a1e      	ldr	r2, [pc, #120]	@ (8001c8c <HAL_DMA_Abort+0x264>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d00e      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a1c      	ldr	r2, [pc, #112]	@ (8001c90 <HAL_DMA_Abort+0x268>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d009      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a1b      	ldr	r2, [pc, #108]	@ (8001c94 <HAL_DMA_Abort+0x26c>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d004      	beq.n	8001c36 <HAL_DMA_Abort+0x20e>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a19      	ldr	r2, [pc, #100]	@ (8001c98 <HAL_DMA_Abort+0x270>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d132      	bne.n	8001c9c <HAL_DMA_Abort+0x274>
 8001c36:	2301      	movs	r3, #1
 8001c38:	e031      	b.n	8001c9e <HAL_DMA_Abort+0x276>
 8001c3a:	bf00      	nop
 8001c3c:	40020010 	.word	0x40020010
 8001c40:	40020028 	.word	0x40020028
 8001c44:	40020040 	.word	0x40020040
 8001c48:	40020058 	.word	0x40020058
 8001c4c:	40020070 	.word	0x40020070
 8001c50:	40020088 	.word	0x40020088
 8001c54:	400200a0 	.word	0x400200a0
 8001c58:	400200b8 	.word	0x400200b8
 8001c5c:	40020410 	.word	0x40020410
 8001c60:	40020428 	.word	0x40020428
 8001c64:	40020440 	.word	0x40020440
 8001c68:	40020458 	.word	0x40020458
 8001c6c:	40020470 	.word	0x40020470
 8001c70:	40020488 	.word	0x40020488
 8001c74:	400204a0 	.word	0x400204a0
 8001c78:	400204b8 	.word	0x400204b8
 8001c7c:	58025408 	.word	0x58025408
 8001c80:	5802541c 	.word	0x5802541c
 8001c84:	58025430 	.word	0x58025430
 8001c88:	58025444 	.word	0x58025444
 8001c8c:	58025458 	.word	0x58025458
 8001c90:	5802546c 	.word	0x5802546c
 8001c94:	58025480 	.word	0x58025480
 8001c98:	58025494 	.word	0x58025494
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d007      	beq.n	8001cb2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001cb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a6d      	ldr	r2, [pc, #436]	@ (8001e6c <HAL_DMA_Abort+0x444>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d04a      	beq.n	8001d52 <HAL_DMA_Abort+0x32a>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a6b      	ldr	r2, [pc, #428]	@ (8001e70 <HAL_DMA_Abort+0x448>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d045      	beq.n	8001d52 <HAL_DMA_Abort+0x32a>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a6a      	ldr	r2, [pc, #424]	@ (8001e74 <HAL_DMA_Abort+0x44c>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d040      	beq.n	8001d52 <HAL_DMA_Abort+0x32a>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a68      	ldr	r2, [pc, #416]	@ (8001e78 <HAL_DMA_Abort+0x450>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d03b      	beq.n	8001d52 <HAL_DMA_Abort+0x32a>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a67      	ldr	r2, [pc, #412]	@ (8001e7c <HAL_DMA_Abort+0x454>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d036      	beq.n	8001d52 <HAL_DMA_Abort+0x32a>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a65      	ldr	r2, [pc, #404]	@ (8001e80 <HAL_DMA_Abort+0x458>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d031      	beq.n	8001d52 <HAL_DMA_Abort+0x32a>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a64      	ldr	r2, [pc, #400]	@ (8001e84 <HAL_DMA_Abort+0x45c>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d02c      	beq.n	8001d52 <HAL_DMA_Abort+0x32a>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a62      	ldr	r2, [pc, #392]	@ (8001e88 <HAL_DMA_Abort+0x460>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d027      	beq.n	8001d52 <HAL_DMA_Abort+0x32a>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a61      	ldr	r2, [pc, #388]	@ (8001e8c <HAL_DMA_Abort+0x464>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d022      	beq.n	8001d52 <HAL_DMA_Abort+0x32a>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a5f      	ldr	r2, [pc, #380]	@ (8001e90 <HAL_DMA_Abort+0x468>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d01d      	beq.n	8001d52 <HAL_DMA_Abort+0x32a>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a5e      	ldr	r2, [pc, #376]	@ (8001e94 <HAL_DMA_Abort+0x46c>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d018      	beq.n	8001d52 <HAL_DMA_Abort+0x32a>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a5c      	ldr	r2, [pc, #368]	@ (8001e98 <HAL_DMA_Abort+0x470>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d013      	beq.n	8001d52 <HAL_DMA_Abort+0x32a>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a5b      	ldr	r2, [pc, #364]	@ (8001e9c <HAL_DMA_Abort+0x474>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d00e      	beq.n	8001d52 <HAL_DMA_Abort+0x32a>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a59      	ldr	r2, [pc, #356]	@ (8001ea0 <HAL_DMA_Abort+0x478>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d009      	beq.n	8001d52 <HAL_DMA_Abort+0x32a>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a58      	ldr	r2, [pc, #352]	@ (8001ea4 <HAL_DMA_Abort+0x47c>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d004      	beq.n	8001d52 <HAL_DMA_Abort+0x32a>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a56      	ldr	r2, [pc, #344]	@ (8001ea8 <HAL_DMA_Abort+0x480>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d108      	bne.n	8001d64 <HAL_DMA_Abort+0x33c>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 0201 	bic.w	r2, r2, #1
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	e007      	b.n	8001d74 <HAL_DMA_Abort+0x34c>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 0201 	bic.w	r2, r2, #1
 8001d72:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001d74:	e013      	b.n	8001d9e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d76:	f7ff fd0b 	bl	8001790 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b05      	cmp	r3, #5
 8001d82:	d90c      	bls.n	8001d9e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2220      	movs	r2, #32
 8001d88:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e12d      	b.n	8001ffa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1e5      	bne.n	8001d76 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a2f      	ldr	r2, [pc, #188]	@ (8001e6c <HAL_DMA_Abort+0x444>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d04a      	beq.n	8001e4a <HAL_DMA_Abort+0x422>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a2d      	ldr	r2, [pc, #180]	@ (8001e70 <HAL_DMA_Abort+0x448>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d045      	beq.n	8001e4a <HAL_DMA_Abort+0x422>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a2c      	ldr	r2, [pc, #176]	@ (8001e74 <HAL_DMA_Abort+0x44c>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d040      	beq.n	8001e4a <HAL_DMA_Abort+0x422>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a2a      	ldr	r2, [pc, #168]	@ (8001e78 <HAL_DMA_Abort+0x450>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d03b      	beq.n	8001e4a <HAL_DMA_Abort+0x422>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a29      	ldr	r2, [pc, #164]	@ (8001e7c <HAL_DMA_Abort+0x454>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d036      	beq.n	8001e4a <HAL_DMA_Abort+0x422>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a27      	ldr	r2, [pc, #156]	@ (8001e80 <HAL_DMA_Abort+0x458>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d031      	beq.n	8001e4a <HAL_DMA_Abort+0x422>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a26      	ldr	r2, [pc, #152]	@ (8001e84 <HAL_DMA_Abort+0x45c>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d02c      	beq.n	8001e4a <HAL_DMA_Abort+0x422>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a24      	ldr	r2, [pc, #144]	@ (8001e88 <HAL_DMA_Abort+0x460>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d027      	beq.n	8001e4a <HAL_DMA_Abort+0x422>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a23      	ldr	r2, [pc, #140]	@ (8001e8c <HAL_DMA_Abort+0x464>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d022      	beq.n	8001e4a <HAL_DMA_Abort+0x422>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a21      	ldr	r2, [pc, #132]	@ (8001e90 <HAL_DMA_Abort+0x468>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d01d      	beq.n	8001e4a <HAL_DMA_Abort+0x422>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a20      	ldr	r2, [pc, #128]	@ (8001e94 <HAL_DMA_Abort+0x46c>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d018      	beq.n	8001e4a <HAL_DMA_Abort+0x422>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a1e      	ldr	r2, [pc, #120]	@ (8001e98 <HAL_DMA_Abort+0x470>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d013      	beq.n	8001e4a <HAL_DMA_Abort+0x422>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a1d      	ldr	r2, [pc, #116]	@ (8001e9c <HAL_DMA_Abort+0x474>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d00e      	beq.n	8001e4a <HAL_DMA_Abort+0x422>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a1b      	ldr	r2, [pc, #108]	@ (8001ea0 <HAL_DMA_Abort+0x478>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d009      	beq.n	8001e4a <HAL_DMA_Abort+0x422>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a1a      	ldr	r2, [pc, #104]	@ (8001ea4 <HAL_DMA_Abort+0x47c>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d004      	beq.n	8001e4a <HAL_DMA_Abort+0x422>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a18      	ldr	r2, [pc, #96]	@ (8001ea8 <HAL_DMA_Abort+0x480>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d101      	bne.n	8001e4e <HAL_DMA_Abort+0x426>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <HAL_DMA_Abort+0x428>
 8001e4e:	2300      	movs	r3, #0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d02b      	beq.n	8001eac <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e58:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e5e:	f003 031f 	and.w	r3, r3, #31
 8001e62:	223f      	movs	r2, #63	@ 0x3f
 8001e64:	409a      	lsls	r2, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	609a      	str	r2, [r3, #8]
 8001e6a:	e02a      	b.n	8001ec2 <HAL_DMA_Abort+0x49a>
 8001e6c:	40020010 	.word	0x40020010
 8001e70:	40020028 	.word	0x40020028
 8001e74:	40020040 	.word	0x40020040
 8001e78:	40020058 	.word	0x40020058
 8001e7c:	40020070 	.word	0x40020070
 8001e80:	40020088 	.word	0x40020088
 8001e84:	400200a0 	.word	0x400200a0
 8001e88:	400200b8 	.word	0x400200b8
 8001e8c:	40020410 	.word	0x40020410
 8001e90:	40020428 	.word	0x40020428
 8001e94:	40020440 	.word	0x40020440
 8001e98:	40020458 	.word	0x40020458
 8001e9c:	40020470 	.word	0x40020470
 8001ea0:	40020488 	.word	0x40020488
 8001ea4:	400204a0 	.word	0x400204a0
 8001ea8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eb6:	f003 031f 	and.w	r3, r3, #31
 8001eba:	2201      	movs	r2, #1
 8001ebc:	409a      	lsls	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a4f      	ldr	r2, [pc, #316]	@ (8002004 <HAL_DMA_Abort+0x5dc>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d072      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a4d      	ldr	r2, [pc, #308]	@ (8002008 <HAL_DMA_Abort+0x5e0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d06d      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a4c      	ldr	r2, [pc, #304]	@ (800200c <HAL_DMA_Abort+0x5e4>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d068      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a4a      	ldr	r2, [pc, #296]	@ (8002010 <HAL_DMA_Abort+0x5e8>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d063      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a49      	ldr	r2, [pc, #292]	@ (8002014 <HAL_DMA_Abort+0x5ec>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d05e      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a47      	ldr	r2, [pc, #284]	@ (8002018 <HAL_DMA_Abort+0x5f0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d059      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a46      	ldr	r2, [pc, #280]	@ (800201c <HAL_DMA_Abort+0x5f4>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d054      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a44      	ldr	r2, [pc, #272]	@ (8002020 <HAL_DMA_Abort+0x5f8>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d04f      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a43      	ldr	r2, [pc, #268]	@ (8002024 <HAL_DMA_Abort+0x5fc>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d04a      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a41      	ldr	r2, [pc, #260]	@ (8002028 <HAL_DMA_Abort+0x600>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d045      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a40      	ldr	r2, [pc, #256]	@ (800202c <HAL_DMA_Abort+0x604>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d040      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a3e      	ldr	r2, [pc, #248]	@ (8002030 <HAL_DMA_Abort+0x608>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d03b      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a3d      	ldr	r2, [pc, #244]	@ (8002034 <HAL_DMA_Abort+0x60c>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d036      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a3b      	ldr	r2, [pc, #236]	@ (8002038 <HAL_DMA_Abort+0x610>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d031      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a3a      	ldr	r2, [pc, #232]	@ (800203c <HAL_DMA_Abort+0x614>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d02c      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a38      	ldr	r2, [pc, #224]	@ (8002040 <HAL_DMA_Abort+0x618>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d027      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a37      	ldr	r2, [pc, #220]	@ (8002044 <HAL_DMA_Abort+0x61c>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d022      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a35      	ldr	r2, [pc, #212]	@ (8002048 <HAL_DMA_Abort+0x620>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d01d      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a34      	ldr	r2, [pc, #208]	@ (800204c <HAL_DMA_Abort+0x624>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d018      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a32      	ldr	r2, [pc, #200]	@ (8002050 <HAL_DMA_Abort+0x628>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d013      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a31      	ldr	r2, [pc, #196]	@ (8002054 <HAL_DMA_Abort+0x62c>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d00e      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a2f      	ldr	r2, [pc, #188]	@ (8002058 <HAL_DMA_Abort+0x630>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d009      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a2e      	ldr	r2, [pc, #184]	@ (800205c <HAL_DMA_Abort+0x634>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d004      	beq.n	8001fb2 <HAL_DMA_Abort+0x58a>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a2c      	ldr	r2, [pc, #176]	@ (8002060 <HAL_DMA_Abort+0x638>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d101      	bne.n	8001fb6 <HAL_DMA_Abort+0x58e>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <HAL_DMA_Abort+0x590>
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d015      	beq.n	8001fe8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001fc4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00c      	beq.n	8001fe8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fd8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fdc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001fe6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40020010 	.word	0x40020010
 8002008:	40020028 	.word	0x40020028
 800200c:	40020040 	.word	0x40020040
 8002010:	40020058 	.word	0x40020058
 8002014:	40020070 	.word	0x40020070
 8002018:	40020088 	.word	0x40020088
 800201c:	400200a0 	.word	0x400200a0
 8002020:	400200b8 	.word	0x400200b8
 8002024:	40020410 	.word	0x40020410
 8002028:	40020428 	.word	0x40020428
 800202c:	40020440 	.word	0x40020440
 8002030:	40020458 	.word	0x40020458
 8002034:	40020470 	.word	0x40020470
 8002038:	40020488 	.word	0x40020488
 800203c:	400204a0 	.word	0x400204a0
 8002040:	400204b8 	.word	0x400204b8
 8002044:	58025408 	.word	0x58025408
 8002048:	5802541c 	.word	0x5802541c
 800204c:	58025430 	.word	0x58025430
 8002050:	58025444 	.word	0x58025444
 8002054:	58025458 	.word	0x58025458
 8002058:	5802546c 	.word	0x5802546c
 800205c:	58025480 	.word	0x58025480
 8002060:	58025494 	.word	0x58025494

08002064 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e237      	b.n	80024e6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d004      	beq.n	800208c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2280      	movs	r2, #128	@ 0x80
 8002086:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e22c      	b.n	80024e6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a5c      	ldr	r2, [pc, #368]	@ (8002204 <HAL_DMA_Abort_IT+0x1a0>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d04a      	beq.n	800212c <HAL_DMA_Abort_IT+0xc8>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a5b      	ldr	r2, [pc, #364]	@ (8002208 <HAL_DMA_Abort_IT+0x1a4>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d045      	beq.n	800212c <HAL_DMA_Abort_IT+0xc8>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a59      	ldr	r2, [pc, #356]	@ (800220c <HAL_DMA_Abort_IT+0x1a8>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d040      	beq.n	800212c <HAL_DMA_Abort_IT+0xc8>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a58      	ldr	r2, [pc, #352]	@ (8002210 <HAL_DMA_Abort_IT+0x1ac>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d03b      	beq.n	800212c <HAL_DMA_Abort_IT+0xc8>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a56      	ldr	r2, [pc, #344]	@ (8002214 <HAL_DMA_Abort_IT+0x1b0>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d036      	beq.n	800212c <HAL_DMA_Abort_IT+0xc8>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a55      	ldr	r2, [pc, #340]	@ (8002218 <HAL_DMA_Abort_IT+0x1b4>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d031      	beq.n	800212c <HAL_DMA_Abort_IT+0xc8>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a53      	ldr	r2, [pc, #332]	@ (800221c <HAL_DMA_Abort_IT+0x1b8>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d02c      	beq.n	800212c <HAL_DMA_Abort_IT+0xc8>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a52      	ldr	r2, [pc, #328]	@ (8002220 <HAL_DMA_Abort_IT+0x1bc>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d027      	beq.n	800212c <HAL_DMA_Abort_IT+0xc8>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a50      	ldr	r2, [pc, #320]	@ (8002224 <HAL_DMA_Abort_IT+0x1c0>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d022      	beq.n	800212c <HAL_DMA_Abort_IT+0xc8>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a4f      	ldr	r2, [pc, #316]	@ (8002228 <HAL_DMA_Abort_IT+0x1c4>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d01d      	beq.n	800212c <HAL_DMA_Abort_IT+0xc8>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a4d      	ldr	r2, [pc, #308]	@ (800222c <HAL_DMA_Abort_IT+0x1c8>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d018      	beq.n	800212c <HAL_DMA_Abort_IT+0xc8>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a4c      	ldr	r2, [pc, #304]	@ (8002230 <HAL_DMA_Abort_IT+0x1cc>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d013      	beq.n	800212c <HAL_DMA_Abort_IT+0xc8>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a4a      	ldr	r2, [pc, #296]	@ (8002234 <HAL_DMA_Abort_IT+0x1d0>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d00e      	beq.n	800212c <HAL_DMA_Abort_IT+0xc8>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a49      	ldr	r2, [pc, #292]	@ (8002238 <HAL_DMA_Abort_IT+0x1d4>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d009      	beq.n	800212c <HAL_DMA_Abort_IT+0xc8>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a47      	ldr	r2, [pc, #284]	@ (800223c <HAL_DMA_Abort_IT+0x1d8>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d004      	beq.n	800212c <HAL_DMA_Abort_IT+0xc8>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a46      	ldr	r2, [pc, #280]	@ (8002240 <HAL_DMA_Abort_IT+0x1dc>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d101      	bne.n	8002130 <HAL_DMA_Abort_IT+0xcc>
 800212c:	2301      	movs	r3, #1
 800212e:	e000      	b.n	8002132 <HAL_DMA_Abort_IT+0xce>
 8002130:	2300      	movs	r3, #0
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 8086 	beq.w	8002244 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2204      	movs	r2, #4
 800213c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a2f      	ldr	r2, [pc, #188]	@ (8002204 <HAL_DMA_Abort_IT+0x1a0>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d04a      	beq.n	80021e0 <HAL_DMA_Abort_IT+0x17c>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a2e      	ldr	r2, [pc, #184]	@ (8002208 <HAL_DMA_Abort_IT+0x1a4>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d045      	beq.n	80021e0 <HAL_DMA_Abort_IT+0x17c>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a2c      	ldr	r2, [pc, #176]	@ (800220c <HAL_DMA_Abort_IT+0x1a8>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d040      	beq.n	80021e0 <HAL_DMA_Abort_IT+0x17c>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a2b      	ldr	r2, [pc, #172]	@ (8002210 <HAL_DMA_Abort_IT+0x1ac>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d03b      	beq.n	80021e0 <HAL_DMA_Abort_IT+0x17c>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a29      	ldr	r2, [pc, #164]	@ (8002214 <HAL_DMA_Abort_IT+0x1b0>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d036      	beq.n	80021e0 <HAL_DMA_Abort_IT+0x17c>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a28      	ldr	r2, [pc, #160]	@ (8002218 <HAL_DMA_Abort_IT+0x1b4>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d031      	beq.n	80021e0 <HAL_DMA_Abort_IT+0x17c>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a26      	ldr	r2, [pc, #152]	@ (800221c <HAL_DMA_Abort_IT+0x1b8>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d02c      	beq.n	80021e0 <HAL_DMA_Abort_IT+0x17c>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a25      	ldr	r2, [pc, #148]	@ (8002220 <HAL_DMA_Abort_IT+0x1bc>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d027      	beq.n	80021e0 <HAL_DMA_Abort_IT+0x17c>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a23      	ldr	r2, [pc, #140]	@ (8002224 <HAL_DMA_Abort_IT+0x1c0>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d022      	beq.n	80021e0 <HAL_DMA_Abort_IT+0x17c>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a22      	ldr	r2, [pc, #136]	@ (8002228 <HAL_DMA_Abort_IT+0x1c4>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d01d      	beq.n	80021e0 <HAL_DMA_Abort_IT+0x17c>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a20      	ldr	r2, [pc, #128]	@ (800222c <HAL_DMA_Abort_IT+0x1c8>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d018      	beq.n	80021e0 <HAL_DMA_Abort_IT+0x17c>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a1f      	ldr	r2, [pc, #124]	@ (8002230 <HAL_DMA_Abort_IT+0x1cc>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d013      	beq.n	80021e0 <HAL_DMA_Abort_IT+0x17c>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002234 <HAL_DMA_Abort_IT+0x1d0>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d00e      	beq.n	80021e0 <HAL_DMA_Abort_IT+0x17c>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002238 <HAL_DMA_Abort_IT+0x1d4>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d009      	beq.n	80021e0 <HAL_DMA_Abort_IT+0x17c>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a1a      	ldr	r2, [pc, #104]	@ (800223c <HAL_DMA_Abort_IT+0x1d8>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d004      	beq.n	80021e0 <HAL_DMA_Abort_IT+0x17c>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a19      	ldr	r2, [pc, #100]	@ (8002240 <HAL_DMA_Abort_IT+0x1dc>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d108      	bne.n	80021f2 <HAL_DMA_Abort_IT+0x18e>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0201 	bic.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	e178      	b.n	80024e4 <HAL_DMA_Abort_IT+0x480>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0201 	bic.w	r2, r2, #1
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	e16f      	b.n	80024e4 <HAL_DMA_Abort_IT+0x480>
 8002204:	40020010 	.word	0x40020010
 8002208:	40020028 	.word	0x40020028
 800220c:	40020040 	.word	0x40020040
 8002210:	40020058 	.word	0x40020058
 8002214:	40020070 	.word	0x40020070
 8002218:	40020088 	.word	0x40020088
 800221c:	400200a0 	.word	0x400200a0
 8002220:	400200b8 	.word	0x400200b8
 8002224:	40020410 	.word	0x40020410
 8002228:	40020428 	.word	0x40020428
 800222c:	40020440 	.word	0x40020440
 8002230:	40020458 	.word	0x40020458
 8002234:	40020470 	.word	0x40020470
 8002238:	40020488 	.word	0x40020488
 800223c:	400204a0 	.word	0x400204a0
 8002240:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 020e 	bic.w	r2, r2, #14
 8002252:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a6c      	ldr	r2, [pc, #432]	@ (800240c <HAL_DMA_Abort_IT+0x3a8>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d04a      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x290>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a6b      	ldr	r2, [pc, #428]	@ (8002410 <HAL_DMA_Abort_IT+0x3ac>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d045      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x290>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a69      	ldr	r2, [pc, #420]	@ (8002414 <HAL_DMA_Abort_IT+0x3b0>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d040      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x290>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a68      	ldr	r2, [pc, #416]	@ (8002418 <HAL_DMA_Abort_IT+0x3b4>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d03b      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x290>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a66      	ldr	r2, [pc, #408]	@ (800241c <HAL_DMA_Abort_IT+0x3b8>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d036      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x290>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a65      	ldr	r2, [pc, #404]	@ (8002420 <HAL_DMA_Abort_IT+0x3bc>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d031      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x290>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a63      	ldr	r2, [pc, #396]	@ (8002424 <HAL_DMA_Abort_IT+0x3c0>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d02c      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x290>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a62      	ldr	r2, [pc, #392]	@ (8002428 <HAL_DMA_Abort_IT+0x3c4>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d027      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x290>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a60      	ldr	r2, [pc, #384]	@ (800242c <HAL_DMA_Abort_IT+0x3c8>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d022      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x290>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a5f      	ldr	r2, [pc, #380]	@ (8002430 <HAL_DMA_Abort_IT+0x3cc>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d01d      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x290>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a5d      	ldr	r2, [pc, #372]	@ (8002434 <HAL_DMA_Abort_IT+0x3d0>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d018      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x290>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a5c      	ldr	r2, [pc, #368]	@ (8002438 <HAL_DMA_Abort_IT+0x3d4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d013      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x290>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a5a      	ldr	r2, [pc, #360]	@ (800243c <HAL_DMA_Abort_IT+0x3d8>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d00e      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x290>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a59      	ldr	r2, [pc, #356]	@ (8002440 <HAL_DMA_Abort_IT+0x3dc>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d009      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x290>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a57      	ldr	r2, [pc, #348]	@ (8002444 <HAL_DMA_Abort_IT+0x3e0>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d004      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x290>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a56      	ldr	r2, [pc, #344]	@ (8002448 <HAL_DMA_Abort_IT+0x3e4>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d108      	bne.n	8002306 <HAL_DMA_Abort_IT+0x2a2>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0201 	bic.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	e007      	b.n	8002316 <HAL_DMA_Abort_IT+0x2b2>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 0201 	bic.w	r2, r2, #1
 8002314:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a3c      	ldr	r2, [pc, #240]	@ (800240c <HAL_DMA_Abort_IT+0x3a8>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d072      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a3a      	ldr	r2, [pc, #232]	@ (8002410 <HAL_DMA_Abort_IT+0x3ac>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d06d      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a39      	ldr	r2, [pc, #228]	@ (8002414 <HAL_DMA_Abort_IT+0x3b0>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d068      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a37      	ldr	r2, [pc, #220]	@ (8002418 <HAL_DMA_Abort_IT+0x3b4>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d063      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a36      	ldr	r2, [pc, #216]	@ (800241c <HAL_DMA_Abort_IT+0x3b8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d05e      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a34      	ldr	r2, [pc, #208]	@ (8002420 <HAL_DMA_Abort_IT+0x3bc>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d059      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a33      	ldr	r2, [pc, #204]	@ (8002424 <HAL_DMA_Abort_IT+0x3c0>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d054      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a31      	ldr	r2, [pc, #196]	@ (8002428 <HAL_DMA_Abort_IT+0x3c4>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d04f      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a30      	ldr	r2, [pc, #192]	@ (800242c <HAL_DMA_Abort_IT+0x3c8>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d04a      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a2e      	ldr	r2, [pc, #184]	@ (8002430 <HAL_DMA_Abort_IT+0x3cc>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d045      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a2d      	ldr	r2, [pc, #180]	@ (8002434 <HAL_DMA_Abort_IT+0x3d0>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d040      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a2b      	ldr	r2, [pc, #172]	@ (8002438 <HAL_DMA_Abort_IT+0x3d4>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d03b      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a2a      	ldr	r2, [pc, #168]	@ (800243c <HAL_DMA_Abort_IT+0x3d8>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d036      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a28      	ldr	r2, [pc, #160]	@ (8002440 <HAL_DMA_Abort_IT+0x3dc>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d031      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a27      	ldr	r2, [pc, #156]	@ (8002444 <HAL_DMA_Abort_IT+0x3e0>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d02c      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a25      	ldr	r2, [pc, #148]	@ (8002448 <HAL_DMA_Abort_IT+0x3e4>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d027      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a24      	ldr	r2, [pc, #144]	@ (800244c <HAL_DMA_Abort_IT+0x3e8>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d022      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a22      	ldr	r2, [pc, #136]	@ (8002450 <HAL_DMA_Abort_IT+0x3ec>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d01d      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a21      	ldr	r2, [pc, #132]	@ (8002454 <HAL_DMA_Abort_IT+0x3f0>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d018      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a1f      	ldr	r2, [pc, #124]	@ (8002458 <HAL_DMA_Abort_IT+0x3f4>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d013      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a1e      	ldr	r2, [pc, #120]	@ (800245c <HAL_DMA_Abort_IT+0x3f8>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d00e      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a1c      	ldr	r2, [pc, #112]	@ (8002460 <HAL_DMA_Abort_IT+0x3fc>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d009      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a1b      	ldr	r2, [pc, #108]	@ (8002464 <HAL_DMA_Abort_IT+0x400>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d004      	beq.n	8002406 <HAL_DMA_Abort_IT+0x3a2>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a19      	ldr	r2, [pc, #100]	@ (8002468 <HAL_DMA_Abort_IT+0x404>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d132      	bne.n	800246c <HAL_DMA_Abort_IT+0x408>
 8002406:	2301      	movs	r3, #1
 8002408:	e031      	b.n	800246e <HAL_DMA_Abort_IT+0x40a>
 800240a:	bf00      	nop
 800240c:	40020010 	.word	0x40020010
 8002410:	40020028 	.word	0x40020028
 8002414:	40020040 	.word	0x40020040
 8002418:	40020058 	.word	0x40020058
 800241c:	40020070 	.word	0x40020070
 8002420:	40020088 	.word	0x40020088
 8002424:	400200a0 	.word	0x400200a0
 8002428:	400200b8 	.word	0x400200b8
 800242c:	40020410 	.word	0x40020410
 8002430:	40020428 	.word	0x40020428
 8002434:	40020440 	.word	0x40020440
 8002438:	40020458 	.word	0x40020458
 800243c:	40020470 	.word	0x40020470
 8002440:	40020488 	.word	0x40020488
 8002444:	400204a0 	.word	0x400204a0
 8002448:	400204b8 	.word	0x400204b8
 800244c:	58025408 	.word	0x58025408
 8002450:	5802541c 	.word	0x5802541c
 8002454:	58025430 	.word	0x58025430
 8002458:	58025444 	.word	0x58025444
 800245c:	58025458 	.word	0x58025458
 8002460:	5802546c 	.word	0x5802546c
 8002464:	58025480 	.word	0x58025480
 8002468:	58025494 	.word	0x58025494
 800246c:	2300      	movs	r3, #0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d028      	beq.n	80024c4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800247c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002480:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002486:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	2201      	movs	r2, #1
 8002492:	409a      	lsls	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80024a0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00c      	beq.n	80024c4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024b8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80024c2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop

080024f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b089      	sub	sp, #36	@ 0x24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80024fe:	4b89      	ldr	r3, [pc, #548]	@ (8002724 <HAL_GPIO_Init+0x234>)
 8002500:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002502:	e194      	b.n	800282e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	2101      	movs	r1, #1
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	fa01 f303 	lsl.w	r3, r1, r3
 8002510:	4013      	ands	r3, r2
 8002512:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 8186 	beq.w	8002828 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	2b01      	cmp	r3, #1
 8002526:	d005      	beq.n	8002534 <HAL_GPIO_Init+0x44>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 0303 	and.w	r3, r3, #3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d130      	bne.n	8002596 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	2203      	movs	r2, #3
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	68da      	ldr	r2, [r3, #12]
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4313      	orrs	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800256a:	2201      	movs	r2, #1
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43db      	mvns	r3, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4013      	ands	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	091b      	lsrs	r3, r3, #4
 8002580:	f003 0201 	and.w	r2, r3, #1
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4313      	orrs	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	2b03      	cmp	r3, #3
 80025a0:	d017      	beq.n	80025d2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	2203      	movs	r2, #3
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43db      	mvns	r3, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4013      	ands	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d123      	bne.n	8002626 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	08da      	lsrs	r2, r3, #3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	3208      	adds	r2, #8
 80025e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	220f      	movs	r2, #15
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43db      	mvns	r3, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4013      	ands	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	691a      	ldr	r2, [r3, #16]
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4313      	orrs	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	08da      	lsrs	r2, r3, #3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3208      	adds	r2, #8
 8002620:	69b9      	ldr	r1, [r7, #24]
 8002622:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	2203      	movs	r2, #3
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f003 0203 	and.w	r2, r3, #3
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4313      	orrs	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 80e0 	beq.w	8002828 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002668:	4b2f      	ldr	r3, [pc, #188]	@ (8002728 <HAL_GPIO_Init+0x238>)
 800266a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800266e:	4a2e      	ldr	r2, [pc, #184]	@ (8002728 <HAL_GPIO_Init+0x238>)
 8002670:	f043 0302 	orr.w	r3, r3, #2
 8002674:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002678:	4b2b      	ldr	r3, [pc, #172]	@ (8002728 <HAL_GPIO_Init+0x238>)
 800267a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002686:	4a29      	ldr	r2, [pc, #164]	@ (800272c <HAL_GPIO_Init+0x23c>)
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	089b      	lsrs	r3, r3, #2
 800268c:	3302      	adds	r3, #2
 800268e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002692:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	220f      	movs	r2, #15
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43db      	mvns	r3, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4013      	ands	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a20      	ldr	r2, [pc, #128]	@ (8002730 <HAL_GPIO_Init+0x240>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d052      	beq.n	8002758 <HAL_GPIO_Init+0x268>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a1f      	ldr	r2, [pc, #124]	@ (8002734 <HAL_GPIO_Init+0x244>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d031      	beq.n	800271e <HAL_GPIO_Init+0x22e>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a1e      	ldr	r2, [pc, #120]	@ (8002738 <HAL_GPIO_Init+0x248>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d02b      	beq.n	800271a <HAL_GPIO_Init+0x22a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a1d      	ldr	r2, [pc, #116]	@ (800273c <HAL_GPIO_Init+0x24c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d025      	beq.n	8002716 <HAL_GPIO_Init+0x226>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a1c      	ldr	r2, [pc, #112]	@ (8002740 <HAL_GPIO_Init+0x250>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d01f      	beq.n	8002712 <HAL_GPIO_Init+0x222>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002744 <HAL_GPIO_Init+0x254>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d019      	beq.n	800270e <HAL_GPIO_Init+0x21e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a1a      	ldr	r2, [pc, #104]	@ (8002748 <HAL_GPIO_Init+0x258>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d013      	beq.n	800270a <HAL_GPIO_Init+0x21a>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a19      	ldr	r2, [pc, #100]	@ (800274c <HAL_GPIO_Init+0x25c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d00d      	beq.n	8002706 <HAL_GPIO_Init+0x216>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a18      	ldr	r2, [pc, #96]	@ (8002750 <HAL_GPIO_Init+0x260>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d007      	beq.n	8002702 <HAL_GPIO_Init+0x212>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a17      	ldr	r2, [pc, #92]	@ (8002754 <HAL_GPIO_Init+0x264>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d101      	bne.n	80026fe <HAL_GPIO_Init+0x20e>
 80026fa:	2309      	movs	r3, #9
 80026fc:	e02d      	b.n	800275a <HAL_GPIO_Init+0x26a>
 80026fe:	230a      	movs	r3, #10
 8002700:	e02b      	b.n	800275a <HAL_GPIO_Init+0x26a>
 8002702:	2308      	movs	r3, #8
 8002704:	e029      	b.n	800275a <HAL_GPIO_Init+0x26a>
 8002706:	2307      	movs	r3, #7
 8002708:	e027      	b.n	800275a <HAL_GPIO_Init+0x26a>
 800270a:	2306      	movs	r3, #6
 800270c:	e025      	b.n	800275a <HAL_GPIO_Init+0x26a>
 800270e:	2305      	movs	r3, #5
 8002710:	e023      	b.n	800275a <HAL_GPIO_Init+0x26a>
 8002712:	2304      	movs	r3, #4
 8002714:	e021      	b.n	800275a <HAL_GPIO_Init+0x26a>
 8002716:	2303      	movs	r3, #3
 8002718:	e01f      	b.n	800275a <HAL_GPIO_Init+0x26a>
 800271a:	2302      	movs	r3, #2
 800271c:	e01d      	b.n	800275a <HAL_GPIO_Init+0x26a>
 800271e:	2301      	movs	r3, #1
 8002720:	e01b      	b.n	800275a <HAL_GPIO_Init+0x26a>
 8002722:	bf00      	nop
 8002724:	58000080 	.word	0x58000080
 8002728:	58024400 	.word	0x58024400
 800272c:	58000400 	.word	0x58000400
 8002730:	58020000 	.word	0x58020000
 8002734:	58020400 	.word	0x58020400
 8002738:	58020800 	.word	0x58020800
 800273c:	58020c00 	.word	0x58020c00
 8002740:	58021000 	.word	0x58021000
 8002744:	58021400 	.word	0x58021400
 8002748:	58021800 	.word	0x58021800
 800274c:	58021c00 	.word	0x58021c00
 8002750:	58022000 	.word	0x58022000
 8002754:	58022400 	.word	0x58022400
 8002758:	2300      	movs	r3, #0
 800275a:	69fa      	ldr	r2, [r7, #28]
 800275c:	f002 0203 	and.w	r2, r2, #3
 8002760:	0092      	lsls	r2, r2, #2
 8002762:	4093      	lsls	r3, r2
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4313      	orrs	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800276a:	4938      	ldr	r1, [pc, #224]	@ (800284c <HAL_GPIO_Init+0x35c>)
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	089b      	lsrs	r3, r3, #2
 8002770:	3302      	adds	r3, #2
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002778:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800279e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80027a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80027cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	43db      	mvns	r3, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	43db      	mvns	r3, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4013      	ands	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	3301      	adds	r3, #1
 800282c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	fa22 f303 	lsr.w	r3, r2, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	f47f ae63 	bne.w	8002504 <HAL_GPIO_Init+0x14>
  }
}
 800283e:	bf00      	nop
 8002840:	bf00      	nop
 8002842:	3724      	adds	r7, #36	@ 0x24
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	58000400 	.word	0x58000400

08002850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	807b      	strh	r3, [r7, #2]
 800285c:	4613      	mov	r3, r2
 800285e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002860:	787b      	ldrb	r3, [r7, #1]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002866:	887a      	ldrh	r2, [r7, #2]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800286c:	e003      	b.n	8002876 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800286e:	887b      	ldrh	r3, [r7, #2]
 8002870:	041a      	lsls	r2, r3, #16
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	619a      	str	r2, [r3, #24]
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
	...

08002884 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800288c:	4a08      	ldr	r2, [pc, #32]	@ (80028b0 <HAL_HSEM_FastTake+0x2c>)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3320      	adds	r3, #32
 8002892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002896:	4a07      	ldr	r2, [pc, #28]	@ (80028b4 <HAL_HSEM_FastTake+0x30>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d101      	bne.n	80028a0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800289c:	2300      	movs	r3, #0
 800289e:	e000      	b.n	80028a2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	58026400 	.word	0x58026400
 80028b4:	80000300 	.word	0x80000300

080028b8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80028c2:	4906      	ldr	r1, [pc, #24]	@ (80028dc <HAL_HSEM_Release+0x24>)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	58026400 	.word	0x58026400

080028e0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80028e8:	4b29      	ldr	r3, [pc, #164]	@ (8002990 <HAL_PWREx_ConfigSupply+0xb0>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	2b06      	cmp	r3, #6
 80028f2:	d00a      	beq.n	800290a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80028f4:	4b26      	ldr	r3, [pc, #152]	@ (8002990 <HAL_PWREx_ConfigSupply+0xb0>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d001      	beq.n	8002906 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e040      	b.n	8002988 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	e03e      	b.n	8002988 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800290a:	4b21      	ldr	r3, [pc, #132]	@ (8002990 <HAL_PWREx_ConfigSupply+0xb0>)
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002912:	491f      	ldr	r1, [pc, #124]	@ (8002990 <HAL_PWREx_ConfigSupply+0xb0>)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4313      	orrs	r3, r2
 8002918:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800291a:	f7fe ff39 	bl	8001790 <HAL_GetTick>
 800291e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002920:	e009      	b.n	8002936 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002922:	f7fe ff35 	bl	8001790 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002930:	d901      	bls.n	8002936 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e028      	b.n	8002988 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002936:	4b16      	ldr	r3, [pc, #88]	@ (8002990 <HAL_PWREx_ConfigSupply+0xb0>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800293e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002942:	d1ee      	bne.n	8002922 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b1e      	cmp	r3, #30
 8002948:	d008      	beq.n	800295c <HAL_PWREx_ConfigSupply+0x7c>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b2e      	cmp	r3, #46	@ 0x2e
 800294e:	d005      	beq.n	800295c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b1d      	cmp	r3, #29
 8002954:	d002      	beq.n	800295c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b2d      	cmp	r3, #45	@ 0x2d
 800295a:	d114      	bne.n	8002986 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800295c:	f7fe ff18 	bl	8001790 <HAL_GetTick>
 8002960:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002962:	e009      	b.n	8002978 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002964:	f7fe ff14 	bl	8001790 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002972:	d901      	bls.n	8002978 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e007      	b.n	8002988 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002978:	4b05      	ldr	r3, [pc, #20]	@ (8002990 <HAL_PWREx_ConfigSupply+0xb0>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002980:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002984:	d1ee      	bne.n	8002964 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	58024800 	.word	0x58024800

08002994 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08c      	sub	sp, #48	@ 0x30
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d102      	bne.n	80029a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	f000 bc48 	b.w	8003238 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 8088 	beq.w	8002ac6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029b6:	4b99      	ldr	r3, [pc, #612]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029c0:	4b96      	ldr	r3, [pc, #600]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 80029c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80029c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029c8:	2b10      	cmp	r3, #16
 80029ca:	d007      	beq.n	80029dc <HAL_RCC_OscConfig+0x48>
 80029cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ce:	2b18      	cmp	r3, #24
 80029d0:	d111      	bne.n	80029f6 <HAL_RCC_OscConfig+0x62>
 80029d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d4:	f003 0303 	and.w	r3, r3, #3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d10c      	bne.n	80029f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029dc:	4b8f      	ldr	r3, [pc, #572]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d06d      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x130>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d169      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	f000 bc21 	b.w	8003238 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029fe:	d106      	bne.n	8002a0e <HAL_RCC_OscConfig+0x7a>
 8002a00:	4b86      	ldr	r3, [pc, #536]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a85      	ldr	r2, [pc, #532]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 8002a06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a0a:	6013      	str	r3, [r2, #0]
 8002a0c:	e02e      	b.n	8002a6c <HAL_RCC_OscConfig+0xd8>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10c      	bne.n	8002a30 <HAL_RCC_OscConfig+0x9c>
 8002a16:	4b81      	ldr	r3, [pc, #516]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a80      	ldr	r2, [pc, #512]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 8002a1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	4b7e      	ldr	r3, [pc, #504]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a7d      	ldr	r2, [pc, #500]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 8002a28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	e01d      	b.n	8002a6c <HAL_RCC_OscConfig+0xd8>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a38:	d10c      	bne.n	8002a54 <HAL_RCC_OscConfig+0xc0>
 8002a3a:	4b78      	ldr	r3, [pc, #480]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a77      	ldr	r2, [pc, #476]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 8002a40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	4b75      	ldr	r3, [pc, #468]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a74      	ldr	r2, [pc, #464]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 8002a4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	e00b      	b.n	8002a6c <HAL_RCC_OscConfig+0xd8>
 8002a54:	4b71      	ldr	r3, [pc, #452]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a70      	ldr	r2, [pc, #448]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 8002a5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a5e:	6013      	str	r3, [r2, #0]
 8002a60:	4b6e      	ldr	r3, [pc, #440]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a6d      	ldr	r2, [pc, #436]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 8002a66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d013      	beq.n	8002a9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a74:	f7fe fe8c 	bl	8001790 <HAL_GetTick>
 8002a78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a7c:	f7fe fe88 	bl	8001790 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b64      	cmp	r3, #100	@ 0x64
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e3d4      	b.n	8003238 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a8e:	4b63      	ldr	r3, [pc, #396]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f0      	beq.n	8002a7c <HAL_RCC_OscConfig+0xe8>
 8002a9a:	e014      	b.n	8002ac6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9c:	f7fe fe78 	bl	8001790 <HAL_GetTick>
 8002aa0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa4:	f7fe fe74 	bl	8001790 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b64      	cmp	r3, #100	@ 0x64
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e3c0      	b.n	8003238 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ab6:	4b59      	ldr	r3, [pc, #356]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x110>
 8002ac2:	e000      	b.n	8002ac6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 80ca 	beq.w	8002c68 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ad4:	4b51      	ldr	r3, [pc, #324]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002adc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ade:	4b4f      	ldr	r3, [pc, #316]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d007      	beq.n	8002afa <HAL_RCC_OscConfig+0x166>
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	2b18      	cmp	r3, #24
 8002aee:	d156      	bne.n	8002b9e <HAL_RCC_OscConfig+0x20a>
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d151      	bne.n	8002b9e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002afa:	4b48      	ldr	r3, [pc, #288]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0304 	and.w	r3, r3, #4
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d005      	beq.n	8002b12 <HAL_RCC_OscConfig+0x17e>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e392      	b.n	8003238 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b12:	4b42      	ldr	r3, [pc, #264]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f023 0219 	bic.w	r2, r3, #25
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	493f      	ldr	r1, [pc, #252]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b24:	f7fe fe34 	bl	8001790 <HAL_GetTick>
 8002b28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b2c:	f7fe fe30 	bl	8001790 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e37c      	b.n	8003238 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b3e:	4b37      	ldr	r3, [pc, #220]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0304 	and.w	r3, r3, #4
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0f0      	beq.n	8002b2c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b4a:	f7fe fe51 	bl	80017f0 <HAL_GetREVID>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d817      	bhi.n	8002b88 <HAL_RCC_OscConfig+0x1f4>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	2b40      	cmp	r3, #64	@ 0x40
 8002b5e:	d108      	bne.n	8002b72 <HAL_RCC_OscConfig+0x1de>
 8002b60:	4b2e      	ldr	r3, [pc, #184]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002b68:	4a2c      	ldr	r2, [pc, #176]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 8002b6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b6e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b70:	e07a      	b.n	8002c68 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b72:	4b2a      	ldr	r3, [pc, #168]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	031b      	lsls	r3, r3, #12
 8002b80:	4926      	ldr	r1, [pc, #152]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b86:	e06f      	b.n	8002c68 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b88:	4b24      	ldr	r3, [pc, #144]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	061b      	lsls	r3, r3, #24
 8002b96:	4921      	ldr	r1, [pc, #132]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b9c:	e064      	b.n	8002c68 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d047      	beq.n	8002c36 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f023 0219 	bic.w	r2, r3, #25
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	491a      	ldr	r1, [pc, #104]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb8:	f7fe fdea 	bl	8001790 <HAL_GetTick>
 8002bbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc0:	f7fe fde6 	bl	8001790 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e332      	b.n	8003238 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bd2:	4b12      	ldr	r3, [pc, #72]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0f0      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bde:	f7fe fe07 	bl	80017f0 <HAL_GetREVID>
 8002be2:	4603      	mov	r3, r0
 8002be4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d819      	bhi.n	8002c20 <HAL_RCC_OscConfig+0x28c>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	2b40      	cmp	r3, #64	@ 0x40
 8002bf2:	d108      	bne.n	8002c06 <HAL_RCC_OscConfig+0x272>
 8002bf4:	4b09      	ldr	r3, [pc, #36]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002bfc:	4a07      	ldr	r2, [pc, #28]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 8002bfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c02:	6053      	str	r3, [r2, #4]
 8002c04:	e030      	b.n	8002c68 <HAL_RCC_OscConfig+0x2d4>
 8002c06:	4b05      	ldr	r3, [pc, #20]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	031b      	lsls	r3, r3, #12
 8002c14:	4901      	ldr	r1, [pc, #4]	@ (8002c1c <HAL_RCC_OscConfig+0x288>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	604b      	str	r3, [r1, #4]
 8002c1a:	e025      	b.n	8002c68 <HAL_RCC_OscConfig+0x2d4>
 8002c1c:	58024400 	.word	0x58024400
 8002c20:	4b9a      	ldr	r3, [pc, #616]	@ (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	061b      	lsls	r3, r3, #24
 8002c2e:	4997      	ldr	r1, [pc, #604]	@ (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	604b      	str	r3, [r1, #4]
 8002c34:	e018      	b.n	8002c68 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c36:	4b95      	ldr	r3, [pc, #596]	@ (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a94      	ldr	r2, [pc, #592]	@ (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002c3c:	f023 0301 	bic.w	r3, r3, #1
 8002c40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c42:	f7fe fda5 	bl	8001790 <HAL_GetTick>
 8002c46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c4a:	f7fe fda1 	bl	8001790 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e2ed      	b.n	8003238 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c5c:	4b8b      	ldr	r3, [pc, #556]	@ (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1f0      	bne.n	8002c4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0310 	and.w	r3, r3, #16
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 80a9 	beq.w	8002dc8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c76:	4b85      	ldr	r3, [pc, #532]	@ (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c7e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c80:	4b82      	ldr	r3, [pc, #520]	@ (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c84:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d007      	beq.n	8002c9c <HAL_RCC_OscConfig+0x308>
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	2b18      	cmp	r3, #24
 8002c90:	d13a      	bne.n	8002d08 <HAL_RCC_OscConfig+0x374>
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d135      	bne.n	8002d08 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c9c:	4b7b      	ldr	r3, [pc, #492]	@ (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x320>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	2b80      	cmp	r3, #128	@ 0x80
 8002cae:	d001      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e2c1      	b.n	8003238 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cb4:	f7fe fd9c 	bl	80017f0 <HAL_GetREVID>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d817      	bhi.n	8002cf2 <HAL_RCC_OscConfig+0x35e>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	2b20      	cmp	r3, #32
 8002cc8:	d108      	bne.n	8002cdc <HAL_RCC_OscConfig+0x348>
 8002cca:	4b70      	ldr	r3, [pc, #448]	@ (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002cd2:	4a6e      	ldr	r2, [pc, #440]	@ (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002cd4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002cd8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002cda:	e075      	b.n	8002dc8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cdc:	4b6b      	ldr	r3, [pc, #428]	@ (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	069b      	lsls	r3, r3, #26
 8002cea:	4968      	ldr	r1, [pc, #416]	@ (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002cf0:	e06a      	b.n	8002dc8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cf2:	4b66      	ldr	r3, [pc, #408]	@ (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	061b      	lsls	r3, r3, #24
 8002d00:	4962      	ldr	r1, [pc, #392]	@ (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d06:	e05f      	b.n	8002dc8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d042      	beq.n	8002d96 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002d10:	4b5e      	ldr	r3, [pc, #376]	@ (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a5d      	ldr	r2, [pc, #372]	@ (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002d16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1c:	f7fe fd38 	bl	8001790 <HAL_GetTick>
 8002d20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002d24:	f7fe fd34 	bl	8001790 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e280      	b.n	8003238 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d36:	4b55      	ldr	r3, [pc, #340]	@ (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d42:	f7fe fd55 	bl	80017f0 <HAL_GetREVID>
 8002d46:	4603      	mov	r3, r0
 8002d48:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d817      	bhi.n	8002d80 <HAL_RCC_OscConfig+0x3ec>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	2b20      	cmp	r3, #32
 8002d56:	d108      	bne.n	8002d6a <HAL_RCC_OscConfig+0x3d6>
 8002d58:	4b4c      	ldr	r3, [pc, #304]	@ (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002d60:	4a4a      	ldr	r2, [pc, #296]	@ (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002d62:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002d66:	6053      	str	r3, [r2, #4]
 8002d68:	e02e      	b.n	8002dc8 <HAL_RCC_OscConfig+0x434>
 8002d6a:	4b48      	ldr	r3, [pc, #288]	@ (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	069b      	lsls	r3, r3, #26
 8002d78:	4944      	ldr	r1, [pc, #272]	@ (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	604b      	str	r3, [r1, #4]
 8002d7e:	e023      	b.n	8002dc8 <HAL_RCC_OscConfig+0x434>
 8002d80:	4b42      	ldr	r3, [pc, #264]	@ (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	061b      	lsls	r3, r3, #24
 8002d8e:	493f      	ldr	r1, [pc, #252]	@ (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	60cb      	str	r3, [r1, #12]
 8002d94:	e018      	b.n	8002dc8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002d96:	4b3d      	ldr	r3, [pc, #244]	@ (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a3c      	ldr	r2, [pc, #240]	@ (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002d9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002da0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da2:	f7fe fcf5 	bl	8001790 <HAL_GetTick>
 8002da6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002daa:	f7fe fcf1 	bl	8001790 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e23d      	b.n	8003238 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002dbc:	4b33      	ldr	r3, [pc, #204]	@ (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1f0      	bne.n	8002daa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d036      	beq.n	8002e42 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d019      	beq.n	8002e10 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ddc:	4b2b      	ldr	r3, [pc, #172]	@ (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002dde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002de0:	4a2a      	ldr	r2, [pc, #168]	@ (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002de2:	f043 0301 	orr.w	r3, r3, #1
 8002de6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de8:	f7fe fcd2 	bl	8001790 <HAL_GetTick>
 8002dec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df0:	f7fe fcce 	bl	8001790 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e21a      	b.n	8003238 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e02:	4b22      	ldr	r3, [pc, #136]	@ (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002e04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0f0      	beq.n	8002df0 <HAL_RCC_OscConfig+0x45c>
 8002e0e:	e018      	b.n	8002e42 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e10:	4b1e      	ldr	r3, [pc, #120]	@ (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002e12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e14:	4a1d      	ldr	r2, [pc, #116]	@ (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002e16:	f023 0301 	bic.w	r3, r3, #1
 8002e1a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1c:	f7fe fcb8 	bl	8001790 <HAL_GetTick>
 8002e20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e24:	f7fe fcb4 	bl	8001790 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e200      	b.n	8003238 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e36:	4b15      	ldr	r3, [pc, #84]	@ (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002e38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1f0      	bne.n	8002e24 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0320 	and.w	r3, r3, #32
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d039      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d01c      	beq.n	8002e90 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e56:	4b0d      	ldr	r3, [pc, #52]	@ (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a0c      	ldr	r2, [pc, #48]	@ (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002e5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e60:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e62:	f7fe fc95 	bl	8001790 <HAL_GetTick>
 8002e66:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e6a:	f7fe fc91 	bl	8001790 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e1dd      	b.n	8003238 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e7c:	4b03      	ldr	r3, [pc, #12]	@ (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0f0      	beq.n	8002e6a <HAL_RCC_OscConfig+0x4d6>
 8002e88:	e01b      	b.n	8002ec2 <HAL_RCC_OscConfig+0x52e>
 8002e8a:	bf00      	nop
 8002e8c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e90:	4b9b      	ldr	r3, [pc, #620]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a9a      	ldr	r2, [pc, #616]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 8002e96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e9a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e9c:	f7fe fc78 	bl	8001790 <HAL_GetTick>
 8002ea0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ea4:	f7fe fc74 	bl	8001790 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e1c0      	b.n	8003238 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002eb6:	4b92      	ldr	r3, [pc, #584]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1f0      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 8081 	beq.w	8002fd2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ed0:	4b8c      	ldr	r3, [pc, #560]	@ (8003104 <HAL_RCC_OscConfig+0x770>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a8b      	ldr	r2, [pc, #556]	@ (8003104 <HAL_RCC_OscConfig+0x770>)
 8002ed6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002edc:	f7fe fc58 	bl	8001790 <HAL_GetTick>
 8002ee0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee4:	f7fe fc54 	bl	8001790 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b64      	cmp	r3, #100	@ 0x64
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e1a0      	b.n	8003238 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ef6:	4b83      	ldr	r3, [pc, #524]	@ (8003104 <HAL_RCC_OscConfig+0x770>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0f0      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d106      	bne.n	8002f18 <HAL_RCC_OscConfig+0x584>
 8002f0a:	4b7d      	ldr	r3, [pc, #500]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 8002f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f0e:	4a7c      	ldr	r2, [pc, #496]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f16:	e02d      	b.n	8002f74 <HAL_RCC_OscConfig+0x5e0>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10c      	bne.n	8002f3a <HAL_RCC_OscConfig+0x5a6>
 8002f20:	4b77      	ldr	r3, [pc, #476]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 8002f22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f24:	4a76      	ldr	r2, [pc, #472]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 8002f26:	f023 0301 	bic.w	r3, r3, #1
 8002f2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f2c:	4b74      	ldr	r3, [pc, #464]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 8002f2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f30:	4a73      	ldr	r2, [pc, #460]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 8002f32:	f023 0304 	bic.w	r3, r3, #4
 8002f36:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f38:	e01c      	b.n	8002f74 <HAL_RCC_OscConfig+0x5e0>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	2b05      	cmp	r3, #5
 8002f40:	d10c      	bne.n	8002f5c <HAL_RCC_OscConfig+0x5c8>
 8002f42:	4b6f      	ldr	r3, [pc, #444]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 8002f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f46:	4a6e      	ldr	r2, [pc, #440]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 8002f48:	f043 0304 	orr.w	r3, r3, #4
 8002f4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f4e:	4b6c      	ldr	r3, [pc, #432]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 8002f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f52:	4a6b      	ldr	r2, [pc, #428]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 8002f54:	f043 0301 	orr.w	r3, r3, #1
 8002f58:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f5a:	e00b      	b.n	8002f74 <HAL_RCC_OscConfig+0x5e0>
 8002f5c:	4b68      	ldr	r3, [pc, #416]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 8002f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f60:	4a67      	ldr	r2, [pc, #412]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 8002f62:	f023 0301 	bic.w	r3, r3, #1
 8002f66:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f68:	4b65      	ldr	r3, [pc, #404]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 8002f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f6c:	4a64      	ldr	r2, [pc, #400]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 8002f6e:	f023 0304 	bic.w	r3, r3, #4
 8002f72:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d015      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7c:	f7fe fc08 	bl	8001790 <HAL_GetTick>
 8002f80:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f82:	e00a      	b.n	8002f9a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f84:	f7fe fc04 	bl	8001790 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e14e      	b.n	8003238 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f9a:	4b59      	ldr	r3, [pc, #356]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0ee      	beq.n	8002f84 <HAL_RCC_OscConfig+0x5f0>
 8002fa6:	e014      	b.n	8002fd2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa8:	f7fe fbf2 	bl	8001790 <HAL_GetTick>
 8002fac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002fae:	e00a      	b.n	8002fc6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb0:	f7fe fbee 	bl	8001790 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e138      	b.n	8003238 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002fc6:	4b4e      	ldr	r3, [pc, #312]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 8002fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1ee      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 812d 	beq.w	8003236 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002fdc:	4b48      	ldr	r3, [pc, #288]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fe4:	2b18      	cmp	r3, #24
 8002fe6:	f000 80bd 	beq.w	8003164 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	f040 809e 	bne.w	8003130 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff4:	4b42      	ldr	r3, [pc, #264]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a41      	ldr	r2, [pc, #260]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 8002ffa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003000:	f7fe fbc6 	bl	8001790 <HAL_GetTick>
 8003004:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003008:	f7fe fbc2 	bl	8001790 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e10e      	b.n	8003238 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800301a:	4b39      	ldr	r3, [pc, #228]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f0      	bne.n	8003008 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003026:	4b36      	ldr	r3, [pc, #216]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 8003028:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800302a:	4b37      	ldr	r3, [pc, #220]	@ (8003108 <HAL_RCC_OscConfig+0x774>)
 800302c:	4013      	ands	r3, r2
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003036:	0112      	lsls	r2, r2, #4
 8003038:	430a      	orrs	r2, r1
 800303a:	4931      	ldr	r1, [pc, #196]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 800303c:	4313      	orrs	r3, r2
 800303e:	628b      	str	r3, [r1, #40]	@ 0x28
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003044:	3b01      	subs	r3, #1
 8003046:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800304e:	3b01      	subs	r3, #1
 8003050:	025b      	lsls	r3, r3, #9
 8003052:	b29b      	uxth	r3, r3
 8003054:	431a      	orrs	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800305a:	3b01      	subs	r3, #1
 800305c:	041b      	lsls	r3, r3, #16
 800305e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003068:	3b01      	subs	r3, #1
 800306a:	061b      	lsls	r3, r3, #24
 800306c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003070:	4923      	ldr	r1, [pc, #140]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 8003072:	4313      	orrs	r3, r2
 8003074:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003076:	4b22      	ldr	r3, [pc, #136]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 8003078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800307a:	4a21      	ldr	r2, [pc, #132]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 800307c:	f023 0301 	bic.w	r3, r3, #1
 8003080:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003082:	4b1f      	ldr	r3, [pc, #124]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 8003084:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003086:	4b21      	ldr	r3, [pc, #132]	@ (800310c <HAL_RCC_OscConfig+0x778>)
 8003088:	4013      	ands	r3, r2
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800308e:	00d2      	lsls	r2, r2, #3
 8003090:	491b      	ldr	r1, [pc, #108]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 8003092:	4313      	orrs	r3, r2
 8003094:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003096:	4b1a      	ldr	r3, [pc, #104]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 8003098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309a:	f023 020c 	bic.w	r2, r3, #12
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a2:	4917      	ldr	r1, [pc, #92]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80030a8:	4b15      	ldr	r3, [pc, #84]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 80030aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ac:	f023 0202 	bic.w	r2, r3, #2
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b4:	4912      	ldr	r1, [pc, #72]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80030ba:	4b11      	ldr	r3, [pc, #68]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 80030bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030be:	4a10      	ldr	r2, [pc, #64]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 80030c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 80030c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ca:	4a0d      	ldr	r2, [pc, #52]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 80030cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80030d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 80030d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 80030d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80030de:	4b08      	ldr	r3, [pc, #32]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 80030e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e2:	4a07      	ldr	r2, [pc, #28]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 80030e4:	f043 0301 	orr.w	r3, r3, #1
 80030e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030ea:	4b05      	ldr	r3, [pc, #20]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a04      	ldr	r2, [pc, #16]	@ (8003100 <HAL_RCC_OscConfig+0x76c>)
 80030f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f6:	f7fe fb4b 	bl	8001790 <HAL_GetTick>
 80030fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030fc:	e011      	b.n	8003122 <HAL_RCC_OscConfig+0x78e>
 80030fe:	bf00      	nop
 8003100:	58024400 	.word	0x58024400
 8003104:	58024800 	.word	0x58024800
 8003108:	fffffc0c 	.word	0xfffffc0c
 800310c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003110:	f7fe fb3e 	bl	8001790 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e08a      	b.n	8003238 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003122:	4b47      	ldr	r3, [pc, #284]	@ (8003240 <HAL_RCC_OscConfig+0x8ac>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0x77c>
 800312e:	e082      	b.n	8003236 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003130:	4b43      	ldr	r3, [pc, #268]	@ (8003240 <HAL_RCC_OscConfig+0x8ac>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a42      	ldr	r2, [pc, #264]	@ (8003240 <HAL_RCC_OscConfig+0x8ac>)
 8003136:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800313a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313c:	f7fe fb28 	bl	8001790 <HAL_GetTick>
 8003140:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003144:	f7fe fb24 	bl	8001790 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e070      	b.n	8003238 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003156:	4b3a      	ldr	r3, [pc, #232]	@ (8003240 <HAL_RCC_OscConfig+0x8ac>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f0      	bne.n	8003144 <HAL_RCC_OscConfig+0x7b0>
 8003162:	e068      	b.n	8003236 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003164:	4b36      	ldr	r3, [pc, #216]	@ (8003240 <HAL_RCC_OscConfig+0x8ac>)
 8003166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003168:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800316a:	4b35      	ldr	r3, [pc, #212]	@ (8003240 <HAL_RCC_OscConfig+0x8ac>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003174:	2b01      	cmp	r3, #1
 8003176:	d031      	beq.n	80031dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	f003 0203 	and.w	r2, r3, #3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003182:	429a      	cmp	r2, r3
 8003184:	d12a      	bne.n	80031dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	091b      	lsrs	r3, r3, #4
 800318a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003192:	429a      	cmp	r2, r3
 8003194:	d122      	bne.n	80031dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d11a      	bne.n	80031dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	0a5b      	lsrs	r3, r3, #9
 80031aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031b2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d111      	bne.n	80031dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	0c1b      	lsrs	r3, r3, #16
 80031bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d108      	bne.n	80031dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	0e1b      	lsrs	r3, r3, #24
 80031ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80031d8:	429a      	cmp	r2, r3
 80031da:	d001      	beq.n	80031e0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e02b      	b.n	8003238 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80031e0:	4b17      	ldr	r3, [pc, #92]	@ (8003240 <HAL_RCC_OscConfig+0x8ac>)
 80031e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031e4:	08db      	lsrs	r3, r3, #3
 80031e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031ea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d01f      	beq.n	8003236 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80031f6:	4b12      	ldr	r3, [pc, #72]	@ (8003240 <HAL_RCC_OscConfig+0x8ac>)
 80031f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031fa:	4a11      	ldr	r2, [pc, #68]	@ (8003240 <HAL_RCC_OscConfig+0x8ac>)
 80031fc:	f023 0301 	bic.w	r3, r3, #1
 8003200:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003202:	f7fe fac5 	bl	8001790 <HAL_GetTick>
 8003206:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003208:	bf00      	nop
 800320a:	f7fe fac1 	bl	8001790 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003212:	4293      	cmp	r3, r2
 8003214:	d0f9      	beq.n	800320a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003216:	4b0a      	ldr	r3, [pc, #40]	@ (8003240 <HAL_RCC_OscConfig+0x8ac>)
 8003218:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800321a:	4b0a      	ldr	r3, [pc, #40]	@ (8003244 <HAL_RCC_OscConfig+0x8b0>)
 800321c:	4013      	ands	r3, r2
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003222:	00d2      	lsls	r2, r2, #3
 8003224:	4906      	ldr	r1, [pc, #24]	@ (8003240 <HAL_RCC_OscConfig+0x8ac>)
 8003226:	4313      	orrs	r3, r2
 8003228:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800322a:	4b05      	ldr	r3, [pc, #20]	@ (8003240 <HAL_RCC_OscConfig+0x8ac>)
 800322c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322e:	4a04      	ldr	r2, [pc, #16]	@ (8003240 <HAL_RCC_OscConfig+0x8ac>)
 8003230:	f043 0301 	orr.w	r3, r3, #1
 8003234:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3730      	adds	r7, #48	@ 0x30
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	58024400 	.word	0x58024400
 8003244:	ffff0007 	.word	0xffff0007

08003248 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e19c      	b.n	8003596 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800325c:	4b8a      	ldr	r3, [pc, #552]	@ (8003488 <HAL_RCC_ClockConfig+0x240>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 030f 	and.w	r3, r3, #15
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d910      	bls.n	800328c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326a:	4b87      	ldr	r3, [pc, #540]	@ (8003488 <HAL_RCC_ClockConfig+0x240>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f023 020f 	bic.w	r2, r3, #15
 8003272:	4985      	ldr	r1, [pc, #532]	@ (8003488 <HAL_RCC_ClockConfig+0x240>)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	4313      	orrs	r3, r2
 8003278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800327a:	4b83      	ldr	r3, [pc, #524]	@ (8003488 <HAL_RCC_ClockConfig+0x240>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	429a      	cmp	r2, r3
 8003286:	d001      	beq.n	800328c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e184      	b.n	8003596 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	2b00      	cmp	r3, #0
 8003296:	d010      	beq.n	80032ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691a      	ldr	r2, [r3, #16]
 800329c:	4b7b      	ldr	r3, [pc, #492]	@ (800348c <HAL_RCC_ClockConfig+0x244>)
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d908      	bls.n	80032ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80032a8:	4b78      	ldr	r3, [pc, #480]	@ (800348c <HAL_RCC_ClockConfig+0x244>)
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	4975      	ldr	r1, [pc, #468]	@ (800348c <HAL_RCC_ClockConfig+0x244>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d010      	beq.n	80032e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	695a      	ldr	r2, [r3, #20]
 80032ca:	4b70      	ldr	r3, [pc, #448]	@ (800348c <HAL_RCC_ClockConfig+0x244>)
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d908      	bls.n	80032e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80032d6:	4b6d      	ldr	r3, [pc, #436]	@ (800348c <HAL_RCC_ClockConfig+0x244>)
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	496a      	ldr	r1, [pc, #424]	@ (800348c <HAL_RCC_ClockConfig+0x244>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0310 	and.w	r3, r3, #16
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d010      	beq.n	8003316 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	699a      	ldr	r2, [r3, #24]
 80032f8:	4b64      	ldr	r3, [pc, #400]	@ (800348c <HAL_RCC_ClockConfig+0x244>)
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003300:	429a      	cmp	r2, r3
 8003302:	d908      	bls.n	8003316 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003304:	4b61      	ldr	r3, [pc, #388]	@ (800348c <HAL_RCC_ClockConfig+0x244>)
 8003306:	69db      	ldr	r3, [r3, #28]
 8003308:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	495e      	ldr	r1, [pc, #376]	@ (800348c <HAL_RCC_ClockConfig+0x244>)
 8003312:	4313      	orrs	r3, r2
 8003314:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0320 	and.w	r3, r3, #32
 800331e:	2b00      	cmp	r3, #0
 8003320:	d010      	beq.n	8003344 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69da      	ldr	r2, [r3, #28]
 8003326:	4b59      	ldr	r3, [pc, #356]	@ (800348c <HAL_RCC_ClockConfig+0x244>)
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800332e:	429a      	cmp	r2, r3
 8003330:	d908      	bls.n	8003344 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003332:	4b56      	ldr	r3, [pc, #344]	@ (800348c <HAL_RCC_ClockConfig+0x244>)
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	4953      	ldr	r1, [pc, #332]	@ (800348c <HAL_RCC_ClockConfig+0x244>)
 8003340:	4313      	orrs	r3, r2
 8003342:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d010      	beq.n	8003372 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68da      	ldr	r2, [r3, #12]
 8003354:	4b4d      	ldr	r3, [pc, #308]	@ (800348c <HAL_RCC_ClockConfig+0x244>)
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	f003 030f 	and.w	r3, r3, #15
 800335c:	429a      	cmp	r2, r3
 800335e:	d908      	bls.n	8003372 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003360:	4b4a      	ldr	r3, [pc, #296]	@ (800348c <HAL_RCC_ClockConfig+0x244>)
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	f023 020f 	bic.w	r2, r3, #15
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	4947      	ldr	r1, [pc, #284]	@ (800348c <HAL_RCC_ClockConfig+0x244>)
 800336e:	4313      	orrs	r3, r2
 8003370:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d055      	beq.n	800342a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800337e:	4b43      	ldr	r3, [pc, #268]	@ (800348c <HAL_RCC_ClockConfig+0x244>)
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	4940      	ldr	r1, [pc, #256]	@ (800348c <HAL_RCC_ClockConfig+0x244>)
 800338c:	4313      	orrs	r3, r2
 800338e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b02      	cmp	r3, #2
 8003396:	d107      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003398:	4b3c      	ldr	r3, [pc, #240]	@ (800348c <HAL_RCC_ClockConfig+0x244>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d121      	bne.n	80033e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e0f6      	b.n	8003596 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b03      	cmp	r3, #3
 80033ae:	d107      	bne.n	80033c0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033b0:	4b36      	ldr	r3, [pc, #216]	@ (800348c <HAL_RCC_ClockConfig+0x244>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d115      	bne.n	80033e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e0ea      	b.n	8003596 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d107      	bne.n	80033d8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033c8:	4b30      	ldr	r3, [pc, #192]	@ (800348c <HAL_RCC_ClockConfig+0x244>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d109      	bne.n	80033e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e0de      	b.n	8003596 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033d8:	4b2c      	ldr	r3, [pc, #176]	@ (800348c <HAL_RCC_ClockConfig+0x244>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e0d6      	b.n	8003596 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033e8:	4b28      	ldr	r3, [pc, #160]	@ (800348c <HAL_RCC_ClockConfig+0x244>)
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	f023 0207 	bic.w	r2, r3, #7
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	4925      	ldr	r1, [pc, #148]	@ (800348c <HAL_RCC_ClockConfig+0x244>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033fa:	f7fe f9c9 	bl	8001790 <HAL_GetTick>
 80033fe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003400:	e00a      	b.n	8003418 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003402:	f7fe f9c5 	bl	8001790 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003410:	4293      	cmp	r3, r2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e0be      	b.n	8003596 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003418:	4b1c      	ldr	r3, [pc, #112]	@ (800348c <HAL_RCC_ClockConfig+0x244>)
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	429a      	cmp	r2, r3
 8003428:	d1eb      	bne.n	8003402 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d010      	beq.n	8003458 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68da      	ldr	r2, [r3, #12]
 800343a:	4b14      	ldr	r3, [pc, #80]	@ (800348c <HAL_RCC_ClockConfig+0x244>)
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	429a      	cmp	r2, r3
 8003444:	d208      	bcs.n	8003458 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003446:	4b11      	ldr	r3, [pc, #68]	@ (800348c <HAL_RCC_ClockConfig+0x244>)
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	f023 020f 	bic.w	r2, r3, #15
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	490e      	ldr	r1, [pc, #56]	@ (800348c <HAL_RCC_ClockConfig+0x244>)
 8003454:	4313      	orrs	r3, r2
 8003456:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003458:	4b0b      	ldr	r3, [pc, #44]	@ (8003488 <HAL_RCC_ClockConfig+0x240>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 030f 	and.w	r3, r3, #15
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d214      	bcs.n	8003490 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003466:	4b08      	ldr	r3, [pc, #32]	@ (8003488 <HAL_RCC_ClockConfig+0x240>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f023 020f 	bic.w	r2, r3, #15
 800346e:	4906      	ldr	r1, [pc, #24]	@ (8003488 <HAL_RCC_ClockConfig+0x240>)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	4313      	orrs	r3, r2
 8003474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003476:	4b04      	ldr	r3, [pc, #16]	@ (8003488 <HAL_RCC_ClockConfig+0x240>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	429a      	cmp	r2, r3
 8003482:	d005      	beq.n	8003490 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e086      	b.n	8003596 <HAL_RCC_ClockConfig+0x34e>
 8003488:	52002000 	.word	0x52002000
 800348c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b00      	cmp	r3, #0
 800349a:	d010      	beq.n	80034be <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	4b3f      	ldr	r3, [pc, #252]	@ (80035a0 <HAL_RCC_ClockConfig+0x358>)
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d208      	bcs.n	80034be <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80034ac:	4b3c      	ldr	r3, [pc, #240]	@ (80035a0 <HAL_RCC_ClockConfig+0x358>)
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	4939      	ldr	r1, [pc, #228]	@ (80035a0 <HAL_RCC_ClockConfig+0x358>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d010      	beq.n	80034ec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695a      	ldr	r2, [r3, #20]
 80034ce:	4b34      	ldr	r3, [pc, #208]	@ (80035a0 <HAL_RCC_ClockConfig+0x358>)
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d208      	bcs.n	80034ec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80034da:	4b31      	ldr	r3, [pc, #196]	@ (80035a0 <HAL_RCC_ClockConfig+0x358>)
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	492e      	ldr	r1, [pc, #184]	@ (80035a0 <HAL_RCC_ClockConfig+0x358>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0310 	and.w	r3, r3, #16
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d010      	beq.n	800351a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	699a      	ldr	r2, [r3, #24]
 80034fc:	4b28      	ldr	r3, [pc, #160]	@ (80035a0 <HAL_RCC_ClockConfig+0x358>)
 80034fe:	69db      	ldr	r3, [r3, #28]
 8003500:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003504:	429a      	cmp	r2, r3
 8003506:	d208      	bcs.n	800351a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003508:	4b25      	ldr	r3, [pc, #148]	@ (80035a0 <HAL_RCC_ClockConfig+0x358>)
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	4922      	ldr	r1, [pc, #136]	@ (80035a0 <HAL_RCC_ClockConfig+0x358>)
 8003516:	4313      	orrs	r3, r2
 8003518:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0320 	and.w	r3, r3, #32
 8003522:	2b00      	cmp	r3, #0
 8003524:	d010      	beq.n	8003548 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69da      	ldr	r2, [r3, #28]
 800352a:	4b1d      	ldr	r3, [pc, #116]	@ (80035a0 <HAL_RCC_ClockConfig+0x358>)
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003532:	429a      	cmp	r2, r3
 8003534:	d208      	bcs.n	8003548 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003536:	4b1a      	ldr	r3, [pc, #104]	@ (80035a0 <HAL_RCC_ClockConfig+0x358>)
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	4917      	ldr	r1, [pc, #92]	@ (80035a0 <HAL_RCC_ClockConfig+0x358>)
 8003544:	4313      	orrs	r3, r2
 8003546:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003548:	f000 f834 	bl	80035b4 <HAL_RCC_GetSysClockFreq>
 800354c:	4602      	mov	r2, r0
 800354e:	4b14      	ldr	r3, [pc, #80]	@ (80035a0 <HAL_RCC_ClockConfig+0x358>)
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	0a1b      	lsrs	r3, r3, #8
 8003554:	f003 030f 	and.w	r3, r3, #15
 8003558:	4912      	ldr	r1, [pc, #72]	@ (80035a4 <HAL_RCC_ClockConfig+0x35c>)
 800355a:	5ccb      	ldrb	r3, [r1, r3]
 800355c:	f003 031f 	and.w	r3, r3, #31
 8003560:	fa22 f303 	lsr.w	r3, r2, r3
 8003564:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003566:	4b0e      	ldr	r3, [pc, #56]	@ (80035a0 <HAL_RCC_ClockConfig+0x358>)
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	4a0d      	ldr	r2, [pc, #52]	@ (80035a4 <HAL_RCC_ClockConfig+0x35c>)
 8003570:	5cd3      	ldrb	r3, [r2, r3]
 8003572:	f003 031f 	and.w	r3, r3, #31
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	fa22 f303 	lsr.w	r3, r2, r3
 800357c:	4a0a      	ldr	r2, [pc, #40]	@ (80035a8 <HAL_RCC_ClockConfig+0x360>)
 800357e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003580:	4a0a      	ldr	r2, [pc, #40]	@ (80035ac <HAL_RCC_ClockConfig+0x364>)
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003586:	4b0a      	ldr	r3, [pc, #40]	@ (80035b0 <HAL_RCC_ClockConfig+0x368>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f7fe f8b6 	bl	80016fc <HAL_InitTick>
 8003590:	4603      	mov	r3, r0
 8003592:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003594:	7bfb      	ldrb	r3, [r7, #15]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	58024400 	.word	0x58024400
 80035a4:	0800d500 	.word	0x0800d500
 80035a8:	24000004 	.word	0x24000004
 80035ac:	24000000 	.word	0x24000000
 80035b0:	24000008 	.word	0x24000008

080035b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b089      	sub	sp, #36	@ 0x24
 80035b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035ba:	4bb3      	ldr	r3, [pc, #716]	@ (8003888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80035c2:	2b18      	cmp	r3, #24
 80035c4:	f200 8155 	bhi.w	8003872 <HAL_RCC_GetSysClockFreq+0x2be>
 80035c8:	a201      	add	r2, pc, #4	@ (adr r2, 80035d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80035ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ce:	bf00      	nop
 80035d0:	08003635 	.word	0x08003635
 80035d4:	08003873 	.word	0x08003873
 80035d8:	08003873 	.word	0x08003873
 80035dc:	08003873 	.word	0x08003873
 80035e0:	08003873 	.word	0x08003873
 80035e4:	08003873 	.word	0x08003873
 80035e8:	08003873 	.word	0x08003873
 80035ec:	08003873 	.word	0x08003873
 80035f0:	0800365b 	.word	0x0800365b
 80035f4:	08003873 	.word	0x08003873
 80035f8:	08003873 	.word	0x08003873
 80035fc:	08003873 	.word	0x08003873
 8003600:	08003873 	.word	0x08003873
 8003604:	08003873 	.word	0x08003873
 8003608:	08003873 	.word	0x08003873
 800360c:	08003873 	.word	0x08003873
 8003610:	08003661 	.word	0x08003661
 8003614:	08003873 	.word	0x08003873
 8003618:	08003873 	.word	0x08003873
 800361c:	08003873 	.word	0x08003873
 8003620:	08003873 	.word	0x08003873
 8003624:	08003873 	.word	0x08003873
 8003628:	08003873 	.word	0x08003873
 800362c:	08003873 	.word	0x08003873
 8003630:	08003667 	.word	0x08003667
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003634:	4b94      	ldr	r3, [pc, #592]	@ (8003888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0320 	and.w	r3, r3, #32
 800363c:	2b00      	cmp	r3, #0
 800363e:	d009      	beq.n	8003654 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003640:	4b91      	ldr	r3, [pc, #580]	@ (8003888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	08db      	lsrs	r3, r3, #3
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	4a90      	ldr	r2, [pc, #576]	@ (800388c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800364c:	fa22 f303 	lsr.w	r3, r2, r3
 8003650:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003652:	e111      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003654:	4b8d      	ldr	r3, [pc, #564]	@ (800388c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003656:	61bb      	str	r3, [r7, #24]
      break;
 8003658:	e10e      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800365a:	4b8d      	ldr	r3, [pc, #564]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800365c:	61bb      	str	r3, [r7, #24]
      break;
 800365e:	e10b      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003660:	4b8c      	ldr	r3, [pc, #560]	@ (8003894 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003662:	61bb      	str	r3, [r7, #24]
      break;
 8003664:	e108      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003666:	4b88      	ldr	r3, [pc, #544]	@ (8003888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003670:	4b85      	ldr	r3, [pc, #532]	@ (8003888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003674:	091b      	lsrs	r3, r3, #4
 8003676:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800367a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800367c:	4b82      	ldr	r3, [pc, #520]	@ (8003888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800367e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003686:	4b80      	ldr	r3, [pc, #512]	@ (8003888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800368a:	08db      	lsrs	r3, r3, #3
 800368c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	fb02 f303 	mul.w	r3, r2, r3
 8003696:	ee07 3a90 	vmov	s15, r3
 800369a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800369e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 80e1 	beq.w	800386c <HAL_RCC_GetSysClockFreq+0x2b8>
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	f000 8083 	beq.w	80037b8 <HAL_RCC_GetSysClockFreq+0x204>
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	f200 80a1 	bhi.w	80037fc <HAL_RCC_GetSysClockFreq+0x248>
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <HAL_RCC_GetSysClockFreq+0x114>
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d056      	beq.n	8003774 <HAL_RCC_GetSysClockFreq+0x1c0>
 80036c6:	e099      	b.n	80037fc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036c8:	4b6f      	ldr	r3, [pc, #444]	@ (8003888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0320 	and.w	r3, r3, #32
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d02d      	beq.n	8003730 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80036d4:	4b6c      	ldr	r3, [pc, #432]	@ (8003888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	08db      	lsrs	r3, r3, #3
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	4a6b      	ldr	r2, [pc, #428]	@ (800388c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036e0:	fa22 f303 	lsr.w	r3, r2, r3
 80036e4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	ee07 3a90 	vmov	s15, r3
 80036ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	ee07 3a90 	vmov	s15, r3
 80036f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036fe:	4b62      	ldr	r3, [pc, #392]	@ (8003888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003706:	ee07 3a90 	vmov	s15, r3
 800370a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800370e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003712:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003898 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800371a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800371e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800372a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800372e:	e087      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	ee07 3a90 	vmov	s15, r3
 8003736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800373a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800389c <HAL_RCC_GetSysClockFreq+0x2e8>
 800373e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003742:	4b51      	ldr	r3, [pc, #324]	@ (8003888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800374a:	ee07 3a90 	vmov	s15, r3
 800374e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003752:	ed97 6a02 	vldr	s12, [r7, #8]
 8003756:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003898 <HAL_RCC_GetSysClockFreq+0x2e4>
 800375a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800375e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003762:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800376a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800376e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003772:	e065      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	ee07 3a90 	vmov	s15, r3
 800377a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800377e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80038a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003786:	4b40      	ldr	r3, [pc, #256]	@ (8003888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800378e:	ee07 3a90 	vmov	s15, r3
 8003792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003796:	ed97 6a02 	vldr	s12, [r7, #8]
 800379a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003898 <HAL_RCC_GetSysClockFreq+0x2e4>
 800379e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037b6:	e043      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	ee07 3a90 	vmov	s15, r3
 80037be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037c2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80038a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80037c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ca:	4b2f      	ldr	r3, [pc, #188]	@ (8003888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d2:	ee07 3a90 	vmov	s15, r3
 80037d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037da:	ed97 6a02 	vldr	s12, [r7, #8]
 80037de:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003898 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037fa:	e021      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	ee07 3a90 	vmov	s15, r3
 8003802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003806:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80038a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800380a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800380e:	4b1e      	ldr	r3, [pc, #120]	@ (8003888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003816:	ee07 3a90 	vmov	s15, r3
 800381a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800381e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003822:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003898 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800382a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800382e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800383a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800383e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003840:	4b11      	ldr	r3, [pc, #68]	@ (8003888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003844:	0a5b      	lsrs	r3, r3, #9
 8003846:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800384a:	3301      	adds	r3, #1
 800384c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	ee07 3a90 	vmov	s15, r3
 8003854:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003858:	edd7 6a07 	vldr	s13, [r7, #28]
 800385c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003860:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003864:	ee17 3a90 	vmov	r3, s15
 8003868:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800386a:	e005      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	61bb      	str	r3, [r7, #24]
      break;
 8003870:	e002      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003872:	4b07      	ldr	r3, [pc, #28]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003874:	61bb      	str	r3, [r7, #24]
      break;
 8003876:	bf00      	nop
  }

  return sysclockfreq;
 8003878:	69bb      	ldr	r3, [r7, #24]
}
 800387a:	4618      	mov	r0, r3
 800387c:	3724      	adds	r7, #36	@ 0x24
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	58024400 	.word	0x58024400
 800388c:	03d09000 	.word	0x03d09000
 8003890:	003d0900 	.word	0x003d0900
 8003894:	017d7840 	.word	0x017d7840
 8003898:	46000000 	.word	0x46000000
 800389c:	4c742400 	.word	0x4c742400
 80038a0:	4a742400 	.word	0x4a742400
 80038a4:	4bbebc20 	.word	0x4bbebc20

080038a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80038ae:	f7ff fe81 	bl	80035b4 <HAL_RCC_GetSysClockFreq>
 80038b2:	4602      	mov	r2, r0
 80038b4:	4b10      	ldr	r3, [pc, #64]	@ (80038f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	0a1b      	lsrs	r3, r3, #8
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	490f      	ldr	r1, [pc, #60]	@ (80038fc <HAL_RCC_GetHCLKFreq+0x54>)
 80038c0:	5ccb      	ldrb	r3, [r1, r3]
 80038c2:	f003 031f 	and.w	r3, r3, #31
 80038c6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038cc:	4b0a      	ldr	r3, [pc, #40]	@ (80038f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	f003 030f 	and.w	r3, r3, #15
 80038d4:	4a09      	ldr	r2, [pc, #36]	@ (80038fc <HAL_RCC_GetHCLKFreq+0x54>)
 80038d6:	5cd3      	ldrb	r3, [r2, r3]
 80038d8:	f003 031f 	and.w	r3, r3, #31
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	fa22 f303 	lsr.w	r3, r2, r3
 80038e2:	4a07      	ldr	r2, [pc, #28]	@ (8003900 <HAL_RCC_GetHCLKFreq+0x58>)
 80038e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80038e6:	4a07      	ldr	r2, [pc, #28]	@ (8003904 <HAL_RCC_GetHCLKFreq+0x5c>)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80038ec:	4b04      	ldr	r3, [pc, #16]	@ (8003900 <HAL_RCC_GetHCLKFreq+0x58>)
 80038ee:	681b      	ldr	r3, [r3, #0]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	58024400 	.word	0x58024400
 80038fc:	0800d500 	.word	0x0800d500
 8003900:	24000004 	.word	0x24000004
 8003904:	24000000 	.word	0x24000000

08003908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800390c:	f7ff ffcc 	bl	80038a8 <HAL_RCC_GetHCLKFreq>
 8003910:	4602      	mov	r2, r0
 8003912:	4b06      	ldr	r3, [pc, #24]	@ (800392c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	091b      	lsrs	r3, r3, #4
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	4904      	ldr	r1, [pc, #16]	@ (8003930 <HAL_RCC_GetPCLK1Freq+0x28>)
 800391e:	5ccb      	ldrb	r3, [r1, r3]
 8003920:	f003 031f 	and.w	r3, r3, #31
 8003924:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003928:	4618      	mov	r0, r3
 800392a:	bd80      	pop	{r7, pc}
 800392c:	58024400 	.word	0x58024400
 8003930:	0800d500 	.word	0x0800d500

08003934 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003938:	f7ff ffb6 	bl	80038a8 <HAL_RCC_GetHCLKFreq>
 800393c:	4602      	mov	r2, r0
 800393e:	4b06      	ldr	r3, [pc, #24]	@ (8003958 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	0a1b      	lsrs	r3, r3, #8
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	4904      	ldr	r1, [pc, #16]	@ (800395c <HAL_RCC_GetPCLK2Freq+0x28>)
 800394a:	5ccb      	ldrb	r3, [r1, r3]
 800394c:	f003 031f 	and.w	r3, r3, #31
 8003950:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003954:	4618      	mov	r0, r3
 8003956:	bd80      	pop	{r7, pc}
 8003958:	58024400 	.word	0x58024400
 800395c:	0800d500 	.word	0x0800d500

08003960 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003964:	b0ca      	sub	sp, #296	@ 0x128
 8003966:	af00      	add	r7, sp, #0
 8003968:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800396c:	2300      	movs	r3, #0
 800396e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003972:	2300      	movs	r3, #0
 8003974:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800397c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003980:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003984:	2500      	movs	r5, #0
 8003986:	ea54 0305 	orrs.w	r3, r4, r5
 800398a:	d049      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800398c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003990:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003992:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003996:	d02f      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003998:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800399c:	d828      	bhi.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800399e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039a2:	d01a      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80039a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039a8:	d822      	bhi.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80039ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039b2:	d007      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039b4:	e01c      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039b6:	4bb8      	ldr	r3, [pc, #736]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ba:	4ab7      	ldr	r2, [pc, #732]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039c2:	e01a      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c8:	3308      	adds	r3, #8
 80039ca:	2102      	movs	r1, #2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f001 fc8f 	bl	80052f0 <RCCEx_PLL2_Config>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039d8:	e00f      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039de:	3328      	adds	r3, #40	@ 0x28
 80039e0:	2102      	movs	r1, #2
 80039e2:	4618      	mov	r0, r3
 80039e4:	f001 fd36 	bl	8005454 <RCCEx_PLL3_Config>
 80039e8:	4603      	mov	r3, r0
 80039ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039ee:	e004      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039f6:	e000      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80039f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10a      	bne.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003a02:	4ba5      	ldr	r3, [pc, #660]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a06:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a10:	4aa1      	ldr	r2, [pc, #644]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a12:	430b      	orrs	r3, r1
 8003a14:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a16:	e003      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a28:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003a2c:	f04f 0900 	mov.w	r9, #0
 8003a30:	ea58 0309 	orrs.w	r3, r8, r9
 8003a34:	d047      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3c:	2b04      	cmp	r3, #4
 8003a3e:	d82a      	bhi.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003a40:	a201      	add	r2, pc, #4	@ (adr r2, 8003a48 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a46:	bf00      	nop
 8003a48:	08003a5d 	.word	0x08003a5d
 8003a4c:	08003a6b 	.word	0x08003a6b
 8003a50:	08003a81 	.word	0x08003a81
 8003a54:	08003a9f 	.word	0x08003a9f
 8003a58:	08003a9f 	.word	0x08003a9f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a5c:	4b8e      	ldr	r3, [pc, #568]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a60:	4a8d      	ldr	r2, [pc, #564]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a68:	e01a      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a6e:	3308      	adds	r3, #8
 8003a70:	2100      	movs	r1, #0
 8003a72:	4618      	mov	r0, r3
 8003a74:	f001 fc3c 	bl	80052f0 <RCCEx_PLL2_Config>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a7e:	e00f      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a84:	3328      	adds	r3, #40	@ 0x28
 8003a86:	2100      	movs	r1, #0
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f001 fce3 	bl	8005454 <RCCEx_PLL3_Config>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a94:	e004      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a9c:	e000      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003a9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10a      	bne.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003aa8:	4b7b      	ldr	r3, [pc, #492]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003aaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aac:	f023 0107 	bic.w	r1, r3, #7
 8003ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ab6:	4a78      	ldr	r2, [pc, #480]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ab8:	430b      	orrs	r3, r1
 8003aba:	6513      	str	r3, [r2, #80]	@ 0x50
 8003abc:	e003      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003abe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ac2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ace:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003ad2:	f04f 0b00 	mov.w	fp, #0
 8003ad6:	ea5a 030b 	orrs.w	r3, sl, fp
 8003ada:	d04c      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ae6:	d030      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003ae8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003aec:	d829      	bhi.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003aee:	2bc0      	cmp	r3, #192	@ 0xc0
 8003af0:	d02d      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003af2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003af4:	d825      	bhi.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003af6:	2b80      	cmp	r3, #128	@ 0x80
 8003af8:	d018      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003afa:	2b80      	cmp	r3, #128	@ 0x80
 8003afc:	d821      	bhi.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d002      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003b02:	2b40      	cmp	r3, #64	@ 0x40
 8003b04:	d007      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003b06:	e01c      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b08:	4b63      	ldr	r3, [pc, #396]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0c:	4a62      	ldr	r2, [pc, #392]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b14:	e01c      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b1a:	3308      	adds	r3, #8
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f001 fbe6 	bl	80052f0 <RCCEx_PLL2_Config>
 8003b24:	4603      	mov	r3, r0
 8003b26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b2a:	e011      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b30:	3328      	adds	r3, #40	@ 0x28
 8003b32:	2100      	movs	r1, #0
 8003b34:	4618      	mov	r0, r3
 8003b36:	f001 fc8d 	bl	8005454 <RCCEx_PLL3_Config>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b40:	e006      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b48:	e002      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003b4a:	bf00      	nop
 8003b4c:	e000      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003b4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10a      	bne.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003b58:	4b4f      	ldr	r3, [pc, #316]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b5c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b66:	4a4c      	ldr	r2, [pc, #304]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b68:	430b      	orrs	r3, r1
 8003b6a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b6c:	e003      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003b82:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003b86:	2300      	movs	r3, #0
 8003b88:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003b8c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003b90:	460b      	mov	r3, r1
 8003b92:	4313      	orrs	r3, r2
 8003b94:	d053      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003b9e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ba2:	d035      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003ba4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ba8:	d82e      	bhi.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003baa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003bae:	d031      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003bb0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003bb4:	d828      	bhi.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003bb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bba:	d01a      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003bbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bc0:	d822      	bhi.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003bc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bca:	d007      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003bcc:	e01c      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bce:	4b32      	ldr	r3, [pc, #200]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd2:	4a31      	ldr	r2, [pc, #196]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bda:	e01c      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be0:	3308      	adds	r3, #8
 8003be2:	2100      	movs	r1, #0
 8003be4:	4618      	mov	r0, r3
 8003be6:	f001 fb83 	bl	80052f0 <RCCEx_PLL2_Config>
 8003bea:	4603      	mov	r3, r0
 8003bec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003bf0:	e011      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf6:	3328      	adds	r3, #40	@ 0x28
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f001 fc2a 	bl	8005454 <RCCEx_PLL3_Config>
 8003c00:	4603      	mov	r3, r0
 8003c02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c06:	e006      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c0e:	e002      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003c10:	bf00      	nop
 8003c12:	e000      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10b      	bne.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c22:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003c2e:	4a1a      	ldr	r2, [pc, #104]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c30:	430b      	orrs	r3, r1
 8003c32:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c34:	e003      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c46:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003c4a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003c4e:	2300      	movs	r3, #0
 8003c50:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003c54:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003c58:	460b      	mov	r3, r1
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	d056      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003c66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c6a:	d038      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003c6c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c70:	d831      	bhi.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c72:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c76:	d034      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003c78:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c7c:	d82b      	bhi.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c82:	d01d      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003c84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c88:	d825      	bhi.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d006      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003c8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c92:	d00a      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003c94:	e01f      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c96:	bf00      	nop
 8003c98:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c9c:	4ba2      	ldr	r3, [pc, #648]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca0:	4aa1      	ldr	r2, [pc, #644]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ca2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ca6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ca8:	e01c      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cae:	3308      	adds	r3, #8
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f001 fb1c 	bl	80052f0 <RCCEx_PLL2_Config>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003cbe:	e011      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc4:	3328      	adds	r3, #40	@ 0x28
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f001 fbc3 	bl	8005454 <RCCEx_PLL3_Config>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cd4:	e006      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cdc:	e002      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003cde:	bf00      	nop
 8003ce0:	e000      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003ce2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ce4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10b      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003cec:	4b8e      	ldr	r3, [pc, #568]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003cfc:	4a8a      	ldr	r2, [pc, #552]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cfe:	430b      	orrs	r3, r1
 8003d00:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d02:	e003      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d14:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003d18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003d22:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003d26:	460b      	mov	r3, r1
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	d03a      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d32:	2b30      	cmp	r3, #48	@ 0x30
 8003d34:	d01f      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003d36:	2b30      	cmp	r3, #48	@ 0x30
 8003d38:	d819      	bhi.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003d3a:	2b20      	cmp	r3, #32
 8003d3c:	d00c      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003d3e:	2b20      	cmp	r3, #32
 8003d40:	d815      	bhi.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d019      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003d46:	2b10      	cmp	r3, #16
 8003d48:	d111      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d4a:	4b77      	ldr	r3, [pc, #476]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4e:	4a76      	ldr	r2, [pc, #472]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003d56:	e011      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d5c:	3308      	adds	r3, #8
 8003d5e:	2102      	movs	r1, #2
 8003d60:	4618      	mov	r0, r3
 8003d62:	f001 fac5 	bl	80052f0 <RCCEx_PLL2_Config>
 8003d66:	4603      	mov	r3, r0
 8003d68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003d6c:	e006      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d74:	e002      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003d76:	bf00      	nop
 8003d78:	e000      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003d7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10a      	bne.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003d84:	4b68      	ldr	r3, [pc, #416]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d88:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d92:	4a65      	ldr	r2, [pc, #404]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d94:	430b      	orrs	r3, r1
 8003d96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d98:	e003      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003daa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003dae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003db2:	2300      	movs	r3, #0
 8003db4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003db8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	d051      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dc8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dcc:	d035      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003dce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dd2:	d82e      	bhi.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003dd4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003dd8:	d031      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003dda:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003dde:	d828      	bhi.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003de0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003de4:	d01a      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003de6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dea:	d822      	bhi.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003df0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003df4:	d007      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003df6:	e01c      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003df8:	4b4b      	ldr	r3, [pc, #300]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfc:	4a4a      	ldr	r2, [pc, #296]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e04:	e01c      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e0a:	3308      	adds	r3, #8
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f001 fa6e 	bl	80052f0 <RCCEx_PLL2_Config>
 8003e14:	4603      	mov	r3, r0
 8003e16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e1a:	e011      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e20:	3328      	adds	r3, #40	@ 0x28
 8003e22:	2100      	movs	r1, #0
 8003e24:	4618      	mov	r0, r3
 8003e26:	f001 fb15 	bl	8005454 <RCCEx_PLL3_Config>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e30:	e006      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e38:	e002      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003e3a:	bf00      	nop
 8003e3c:	e000      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003e3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10a      	bne.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003e48:	4b37      	ldr	r3, [pc, #220]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e4c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e56:	4a34      	ldr	r2, [pc, #208]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e58:	430b      	orrs	r3, r1
 8003e5a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e5c:	e003      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003e72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e76:	2300      	movs	r3, #0
 8003e78:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003e7c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003e80:	460b      	mov	r3, r1
 8003e82:	4313      	orrs	r3, r2
 8003e84:	d056      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e90:	d033      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003e92:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e96:	d82c      	bhi.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e98:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e9c:	d02f      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003e9e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ea2:	d826      	bhi.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ea4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ea8:	d02b      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003eaa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003eae:	d820      	bhi.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003eb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003eb4:	d012      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003eb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003eba:	d81a      	bhi.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d022      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003ec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ec4:	d115      	bne.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eca:	3308      	adds	r3, #8
 8003ecc:	2101      	movs	r1, #1
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f001 fa0e 	bl	80052f0 <RCCEx_PLL2_Config>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003eda:	e015      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee0:	3328      	adds	r3, #40	@ 0x28
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f001 fab5 	bl	8005454 <RCCEx_PLL3_Config>
 8003eea:	4603      	mov	r3, r0
 8003eec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ef0:	e00a      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ef8:	e006      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003efa:	bf00      	nop
 8003efc:	e004      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003efe:	bf00      	nop
 8003f00:	e002      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f02:	bf00      	nop
 8003f04:	e000      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10d      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003f10:	4b05      	ldr	r3, [pc, #20]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f14:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f1e:	4a02      	ldr	r2, [pc, #8]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f20:	430b      	orrs	r3, r1
 8003f22:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f24:	e006      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003f26:	bf00      	nop
 8003f28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003f40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f44:	2300      	movs	r3, #0
 8003f46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f4a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003f4e:	460b      	mov	r3, r1
 8003f50:	4313      	orrs	r3, r2
 8003f52:	d055      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003f5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f60:	d033      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003f62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f66:	d82c      	bhi.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f6c:	d02f      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f72:	d826      	bhi.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f74:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f78:	d02b      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003f7a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f7e:	d820      	bhi.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f84:	d012      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003f86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f8a:	d81a      	bhi.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d022      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003f90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f94:	d115      	bne.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f9a:	3308      	adds	r3, #8
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f001 f9a6 	bl	80052f0 <RCCEx_PLL2_Config>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003faa:	e015      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fb0:	3328      	adds	r3, #40	@ 0x28
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f001 fa4d 	bl	8005454 <RCCEx_PLL3_Config>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003fc0:	e00a      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fc8:	e006      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003fca:	bf00      	nop
 8003fcc:	e004      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003fce:	bf00      	nop
 8003fd0:	e002      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003fd2:	bf00      	nop
 8003fd4:	e000      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003fd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10b      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003fe0:	4ba3      	ldr	r3, [pc, #652]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fe4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003ff0:	4a9f      	ldr	r2, [pc, #636]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ff2:	430b      	orrs	r3, r1
 8003ff4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ff6:	e003      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ffc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004008:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800400c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004010:	2300      	movs	r3, #0
 8004012:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004016:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800401a:	460b      	mov	r3, r1
 800401c:	4313      	orrs	r3, r2
 800401e:	d037      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004026:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800402a:	d00e      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800402c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004030:	d816      	bhi.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004032:	2b00      	cmp	r3, #0
 8004034:	d018      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004036:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800403a:	d111      	bne.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800403c:	4b8c      	ldr	r3, [pc, #560]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800403e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004040:	4a8b      	ldr	r2, [pc, #556]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004042:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004046:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004048:	e00f      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800404a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800404e:	3308      	adds	r3, #8
 8004050:	2101      	movs	r1, #1
 8004052:	4618      	mov	r0, r3
 8004054:	f001 f94c 	bl	80052f0 <RCCEx_PLL2_Config>
 8004058:	4603      	mov	r3, r0
 800405a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800405e:	e004      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004066:	e000      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004068:	bf00      	nop
    }

    if (ret == HAL_OK)
 800406a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10a      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004072:	4b7f      	ldr	r3, [pc, #508]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004074:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004076:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800407a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800407e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004080:	4a7b      	ldr	r2, [pc, #492]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004082:	430b      	orrs	r3, r1
 8004084:	6513      	str	r3, [r2, #80]	@ 0x50
 8004086:	e003      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004088:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800408c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004098:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800409c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040a0:	2300      	movs	r3, #0
 80040a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80040a6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80040aa:	460b      	mov	r3, r1
 80040ac:	4313      	orrs	r3, r2
 80040ae:	d039      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80040b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040b6:	2b03      	cmp	r3, #3
 80040b8:	d81c      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80040ba:	a201      	add	r2, pc, #4	@ (adr r2, 80040c0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80040bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c0:	080040fd 	.word	0x080040fd
 80040c4:	080040d1 	.word	0x080040d1
 80040c8:	080040df 	.word	0x080040df
 80040cc:	080040fd 	.word	0x080040fd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040d0:	4b67      	ldr	r3, [pc, #412]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d4:	4a66      	ldr	r2, [pc, #408]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80040dc:	e00f      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e2:	3308      	adds	r3, #8
 80040e4:	2102      	movs	r1, #2
 80040e6:	4618      	mov	r0, r3
 80040e8:	f001 f902 	bl	80052f0 <RCCEx_PLL2_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80040f2:	e004      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040fa:	e000      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80040fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10a      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004106:	4b5a      	ldr	r3, [pc, #360]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800410a:	f023 0103 	bic.w	r1, r3, #3
 800410e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004112:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004114:	4a56      	ldr	r2, [pc, #344]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004116:	430b      	orrs	r3, r1
 8004118:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800411a:	e003      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800411c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004120:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004130:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004134:	2300      	movs	r3, #0
 8004136:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800413a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800413e:	460b      	mov	r3, r1
 8004140:	4313      	orrs	r3, r2
 8004142:	f000 809f 	beq.w	8004284 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004146:	4b4b      	ldr	r3, [pc, #300]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a4a      	ldr	r2, [pc, #296]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800414c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004150:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004152:	f7fd fb1d 	bl	8001790 <HAL_GetTick>
 8004156:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800415a:	e00b      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800415c:	f7fd fb18 	bl	8001790 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b64      	cmp	r3, #100	@ 0x64
 800416a:	d903      	bls.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004172:	e005      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004174:	4b3f      	ldr	r3, [pc, #252]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0ed      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004180:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004184:	2b00      	cmp	r3, #0
 8004186:	d179      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004188:	4b39      	ldr	r3, [pc, #228]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800418a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800418c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004190:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004194:	4053      	eors	r3, r2
 8004196:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800419a:	2b00      	cmp	r3, #0
 800419c:	d015      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800419e:	4b34      	ldr	r3, [pc, #208]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041a6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041aa:	4b31      	ldr	r3, [pc, #196]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ae:	4a30      	ldr	r2, [pc, #192]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041b4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041b6:	4b2e      	ldr	r3, [pc, #184]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ba:	4a2d      	ldr	r2, [pc, #180]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041c0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80041c2:	4a2b      	ldr	r2, [pc, #172]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041c8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80041ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80041d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041d6:	d118      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d8:	f7fd fada 	bl	8001790 <HAL_GetTick>
 80041dc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041e0:	e00d      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e2:	f7fd fad5 	bl	8001790 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80041ec:	1ad2      	subs	r2, r2, r3
 80041ee:	f241 3388 	movw	r3, #5000	@ 0x1388
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d903      	bls.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80041fc:	e005      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041fe:	4b1c      	ldr	r3, [pc, #112]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0eb      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800420a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800420e:	2b00      	cmp	r3, #0
 8004210:	d129      	bne.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004216:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800421a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800421e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004222:	d10e      	bne.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004224:	4b12      	ldr	r3, [pc, #72]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800422c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004230:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004234:	091a      	lsrs	r2, r3, #4
 8004236:	4b10      	ldr	r3, [pc, #64]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004238:	4013      	ands	r3, r2
 800423a:	4a0d      	ldr	r2, [pc, #52]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800423c:	430b      	orrs	r3, r1
 800423e:	6113      	str	r3, [r2, #16]
 8004240:	e005      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004242:	4b0b      	ldr	r3, [pc, #44]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	4a0a      	ldr	r2, [pc, #40]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004248:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800424c:	6113      	str	r3, [r2, #16]
 800424e:	4b08      	ldr	r3, [pc, #32]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004250:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004256:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800425a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800425e:	4a04      	ldr	r2, [pc, #16]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004260:	430b      	orrs	r3, r1
 8004262:	6713      	str	r3, [r2, #112]	@ 0x70
 8004264:	e00e      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004266:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800426a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800426e:	e009      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004270:	58024400 	.word	0x58024400
 8004274:	58024800 	.word	0x58024800
 8004278:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800427c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004280:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428c:	f002 0301 	and.w	r3, r2, #1
 8004290:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004294:	2300      	movs	r3, #0
 8004296:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800429a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800429e:	460b      	mov	r3, r1
 80042a0:	4313      	orrs	r3, r2
 80042a2:	f000 8089 	beq.w	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80042a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042ac:	2b28      	cmp	r3, #40	@ 0x28
 80042ae:	d86b      	bhi.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80042b0:	a201      	add	r2, pc, #4	@ (adr r2, 80042b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80042b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b6:	bf00      	nop
 80042b8:	08004391 	.word	0x08004391
 80042bc:	08004389 	.word	0x08004389
 80042c0:	08004389 	.word	0x08004389
 80042c4:	08004389 	.word	0x08004389
 80042c8:	08004389 	.word	0x08004389
 80042cc:	08004389 	.word	0x08004389
 80042d0:	08004389 	.word	0x08004389
 80042d4:	08004389 	.word	0x08004389
 80042d8:	0800435d 	.word	0x0800435d
 80042dc:	08004389 	.word	0x08004389
 80042e0:	08004389 	.word	0x08004389
 80042e4:	08004389 	.word	0x08004389
 80042e8:	08004389 	.word	0x08004389
 80042ec:	08004389 	.word	0x08004389
 80042f0:	08004389 	.word	0x08004389
 80042f4:	08004389 	.word	0x08004389
 80042f8:	08004373 	.word	0x08004373
 80042fc:	08004389 	.word	0x08004389
 8004300:	08004389 	.word	0x08004389
 8004304:	08004389 	.word	0x08004389
 8004308:	08004389 	.word	0x08004389
 800430c:	08004389 	.word	0x08004389
 8004310:	08004389 	.word	0x08004389
 8004314:	08004389 	.word	0x08004389
 8004318:	08004391 	.word	0x08004391
 800431c:	08004389 	.word	0x08004389
 8004320:	08004389 	.word	0x08004389
 8004324:	08004389 	.word	0x08004389
 8004328:	08004389 	.word	0x08004389
 800432c:	08004389 	.word	0x08004389
 8004330:	08004389 	.word	0x08004389
 8004334:	08004389 	.word	0x08004389
 8004338:	08004391 	.word	0x08004391
 800433c:	08004389 	.word	0x08004389
 8004340:	08004389 	.word	0x08004389
 8004344:	08004389 	.word	0x08004389
 8004348:	08004389 	.word	0x08004389
 800434c:	08004389 	.word	0x08004389
 8004350:	08004389 	.word	0x08004389
 8004354:	08004389 	.word	0x08004389
 8004358:	08004391 	.word	0x08004391
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800435c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004360:	3308      	adds	r3, #8
 8004362:	2101      	movs	r1, #1
 8004364:	4618      	mov	r0, r3
 8004366:	f000 ffc3 	bl	80052f0 <RCCEx_PLL2_Config>
 800436a:	4603      	mov	r3, r0
 800436c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004370:	e00f      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004376:	3328      	adds	r3, #40	@ 0x28
 8004378:	2101      	movs	r1, #1
 800437a:	4618      	mov	r0, r3
 800437c:	f001 f86a 	bl	8005454 <RCCEx_PLL3_Config>
 8004380:	4603      	mov	r3, r0
 8004382:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004386:	e004      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800438e:	e000      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004390:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004392:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10a      	bne.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800439a:	4bbf      	ldr	r3, [pc, #764]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800439c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800439e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80043a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043a8:	4abb      	ldr	r2, [pc, #748]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043aa:	430b      	orrs	r3, r1
 80043ac:	6553      	str	r3, [r2, #84]	@ 0x54
 80043ae:	e003      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80043b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c0:	f002 0302 	and.w	r3, r2, #2
 80043c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043c8:	2300      	movs	r3, #0
 80043ca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80043ce:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80043d2:	460b      	mov	r3, r1
 80043d4:	4313      	orrs	r3, r2
 80043d6:	d041      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80043d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043de:	2b05      	cmp	r3, #5
 80043e0:	d824      	bhi.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80043e2:	a201      	add	r2, pc, #4	@ (adr r2, 80043e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80043e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e8:	08004435 	.word	0x08004435
 80043ec:	08004401 	.word	0x08004401
 80043f0:	08004417 	.word	0x08004417
 80043f4:	08004435 	.word	0x08004435
 80043f8:	08004435 	.word	0x08004435
 80043fc:	08004435 	.word	0x08004435
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004404:	3308      	adds	r3, #8
 8004406:	2101      	movs	r1, #1
 8004408:	4618      	mov	r0, r3
 800440a:	f000 ff71 	bl	80052f0 <RCCEx_PLL2_Config>
 800440e:	4603      	mov	r3, r0
 8004410:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004414:	e00f      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800441a:	3328      	adds	r3, #40	@ 0x28
 800441c:	2101      	movs	r1, #1
 800441e:	4618      	mov	r0, r3
 8004420:	f001 f818 	bl	8005454 <RCCEx_PLL3_Config>
 8004424:	4603      	mov	r3, r0
 8004426:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800442a:	e004      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004432:	e000      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004434:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004436:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10a      	bne.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800443e:	4b96      	ldr	r3, [pc, #600]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004442:	f023 0107 	bic.w	r1, r3, #7
 8004446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800444a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800444c:	4a92      	ldr	r2, [pc, #584]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800444e:	430b      	orrs	r3, r1
 8004450:	6553      	str	r3, [r2, #84]	@ 0x54
 8004452:	e003      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004454:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004458:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800445c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004464:	f002 0304 	and.w	r3, r2, #4
 8004468:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800446c:	2300      	movs	r3, #0
 800446e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004472:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004476:	460b      	mov	r3, r1
 8004478:	4313      	orrs	r3, r2
 800447a:	d044      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800447c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004480:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004484:	2b05      	cmp	r3, #5
 8004486:	d825      	bhi.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004488:	a201      	add	r2, pc, #4	@ (adr r2, 8004490 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800448a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448e:	bf00      	nop
 8004490:	080044dd 	.word	0x080044dd
 8004494:	080044a9 	.word	0x080044a9
 8004498:	080044bf 	.word	0x080044bf
 800449c:	080044dd 	.word	0x080044dd
 80044a0:	080044dd 	.word	0x080044dd
 80044a4:	080044dd 	.word	0x080044dd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ac:	3308      	adds	r3, #8
 80044ae:	2101      	movs	r1, #1
 80044b0:	4618      	mov	r0, r3
 80044b2:	f000 ff1d 	bl	80052f0 <RCCEx_PLL2_Config>
 80044b6:	4603      	mov	r3, r0
 80044b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80044bc:	e00f      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c2:	3328      	adds	r3, #40	@ 0x28
 80044c4:	2101      	movs	r1, #1
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 ffc4 	bl	8005454 <RCCEx_PLL3_Config>
 80044cc:	4603      	mov	r3, r0
 80044ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80044d2:	e004      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044da:	e000      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80044dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10b      	bne.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044e6:	4b6c      	ldr	r3, [pc, #432]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ea:	f023 0107 	bic.w	r1, r3, #7
 80044ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044f6:	4a68      	ldr	r2, [pc, #416]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044f8:	430b      	orrs	r3, r1
 80044fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80044fc:	e003      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004502:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800450a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450e:	f002 0320 	and.w	r3, r2, #32
 8004512:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004516:	2300      	movs	r3, #0
 8004518:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800451c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004520:	460b      	mov	r3, r1
 8004522:	4313      	orrs	r3, r2
 8004524:	d055      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800452a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800452e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004532:	d033      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004534:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004538:	d82c      	bhi.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800453a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800453e:	d02f      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004540:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004544:	d826      	bhi.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004546:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800454a:	d02b      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800454c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004550:	d820      	bhi.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004552:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004556:	d012      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004558:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800455c:	d81a      	bhi.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800455e:	2b00      	cmp	r3, #0
 8004560:	d022      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004562:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004566:	d115      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800456c:	3308      	adds	r3, #8
 800456e:	2100      	movs	r1, #0
 8004570:	4618      	mov	r0, r3
 8004572:	f000 febd 	bl	80052f0 <RCCEx_PLL2_Config>
 8004576:	4603      	mov	r3, r0
 8004578:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800457c:	e015      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800457e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004582:	3328      	adds	r3, #40	@ 0x28
 8004584:	2102      	movs	r1, #2
 8004586:	4618      	mov	r0, r3
 8004588:	f000 ff64 	bl	8005454 <RCCEx_PLL3_Config>
 800458c:	4603      	mov	r3, r0
 800458e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004592:	e00a      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800459a:	e006      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800459c:	bf00      	nop
 800459e:	e004      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80045a0:	bf00      	nop
 80045a2:	e002      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80045a4:	bf00      	nop
 80045a6:	e000      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80045a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10b      	bne.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045b2:	4b39      	ldr	r3, [pc, #228]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045b6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80045ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045c2:	4a35      	ldr	r2, [pc, #212]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045c4:	430b      	orrs	r3, r1
 80045c6:	6553      	str	r3, [r2, #84]	@ 0x54
 80045c8:	e003      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80045d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045da:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80045de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80045e2:	2300      	movs	r3, #0
 80045e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80045e8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80045ec:	460b      	mov	r3, r1
 80045ee:	4313      	orrs	r3, r2
 80045f0:	d058      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80045f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80045fa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80045fe:	d033      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004600:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004604:	d82c      	bhi.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004606:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800460a:	d02f      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800460c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004610:	d826      	bhi.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004612:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004616:	d02b      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004618:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800461c:	d820      	bhi.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800461e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004622:	d012      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004624:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004628:	d81a      	bhi.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800462a:	2b00      	cmp	r3, #0
 800462c:	d022      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800462e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004632:	d115      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004638:	3308      	adds	r3, #8
 800463a:	2100      	movs	r1, #0
 800463c:	4618      	mov	r0, r3
 800463e:	f000 fe57 	bl	80052f0 <RCCEx_PLL2_Config>
 8004642:	4603      	mov	r3, r0
 8004644:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004648:	e015      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800464a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800464e:	3328      	adds	r3, #40	@ 0x28
 8004650:	2102      	movs	r1, #2
 8004652:	4618      	mov	r0, r3
 8004654:	f000 fefe 	bl	8005454 <RCCEx_PLL3_Config>
 8004658:	4603      	mov	r3, r0
 800465a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800465e:	e00a      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004666:	e006      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004668:	bf00      	nop
 800466a:	e004      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800466c:	bf00      	nop
 800466e:	e002      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004670:	bf00      	nop
 8004672:	e000      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004674:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004676:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10e      	bne.n	800469c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800467e:	4b06      	ldr	r3, [pc, #24]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004682:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800468a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800468e:	4a02      	ldr	r2, [pc, #8]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004690:	430b      	orrs	r3, r1
 8004692:	6593      	str	r3, [r2, #88]	@ 0x58
 8004694:	e006      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004696:	bf00      	nop
 8004698:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800469c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80046a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ac:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80046b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80046b4:	2300      	movs	r3, #0
 80046b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80046ba:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80046be:	460b      	mov	r3, r1
 80046c0:	4313      	orrs	r3, r2
 80046c2:	d055      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80046c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80046cc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80046d0:	d033      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80046d2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80046d6:	d82c      	bhi.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80046d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046dc:	d02f      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80046de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046e2:	d826      	bhi.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80046e4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80046e8:	d02b      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80046ea:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80046ee:	d820      	bhi.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80046f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046f4:	d012      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80046f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046fa:	d81a      	bhi.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d022      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004700:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004704:	d115      	bne.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800470a:	3308      	adds	r3, #8
 800470c:	2100      	movs	r1, #0
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fdee 	bl	80052f0 <RCCEx_PLL2_Config>
 8004714:	4603      	mov	r3, r0
 8004716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800471a:	e015      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800471c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004720:	3328      	adds	r3, #40	@ 0x28
 8004722:	2102      	movs	r1, #2
 8004724:	4618      	mov	r0, r3
 8004726:	f000 fe95 	bl	8005454 <RCCEx_PLL3_Config>
 800472a:	4603      	mov	r3, r0
 800472c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004730:	e00a      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004738:	e006      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800473a:	bf00      	nop
 800473c:	e004      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800473e:	bf00      	nop
 8004740:	e002      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004742:	bf00      	nop
 8004744:	e000      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004746:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004748:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10b      	bne.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004750:	4ba1      	ldr	r3, [pc, #644]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004754:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800475c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004760:	4a9d      	ldr	r2, [pc, #628]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004762:	430b      	orrs	r3, r1
 8004764:	6593      	str	r3, [r2, #88]	@ 0x58
 8004766:	e003      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004768:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800476c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004778:	f002 0308 	and.w	r3, r2, #8
 800477c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004780:	2300      	movs	r3, #0
 8004782:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004786:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800478a:	460b      	mov	r3, r1
 800478c:	4313      	orrs	r3, r2
 800478e:	d01e      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004794:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004798:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800479c:	d10c      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800479e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a2:	3328      	adds	r3, #40	@ 0x28
 80047a4:	2102      	movs	r1, #2
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 fe54 	bl	8005454 <RCCEx_PLL3_Config>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80047b8:	4b87      	ldr	r3, [pc, #540]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047bc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047c8:	4a83      	ldr	r2, [pc, #524]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047ca:	430b      	orrs	r3, r1
 80047cc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d6:	f002 0310 	and.w	r3, r2, #16
 80047da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80047de:	2300      	movs	r3, #0
 80047e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80047e4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80047e8:	460b      	mov	r3, r1
 80047ea:	4313      	orrs	r3, r2
 80047ec:	d01e      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80047ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047fa:	d10c      	bne.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80047fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004800:	3328      	adds	r3, #40	@ 0x28
 8004802:	2102      	movs	r1, #2
 8004804:	4618      	mov	r0, r3
 8004806:	f000 fe25 	bl	8005454 <RCCEx_PLL3_Config>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004816:	4b70      	ldr	r3, [pc, #448]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800481a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800481e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004822:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004826:	4a6c      	ldr	r2, [pc, #432]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004828:	430b      	orrs	r3, r1
 800482a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800482c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004834:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004838:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800483c:	2300      	movs	r3, #0
 800483e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004842:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004846:	460b      	mov	r3, r1
 8004848:	4313      	orrs	r3, r2
 800484a:	d03e      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800484c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004850:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004854:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004858:	d022      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800485a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800485e:	d81b      	bhi.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004860:	2b00      	cmp	r3, #0
 8004862:	d003      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004864:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004868:	d00b      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800486a:	e015      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800486c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004870:	3308      	adds	r3, #8
 8004872:	2100      	movs	r1, #0
 8004874:	4618      	mov	r0, r3
 8004876:	f000 fd3b 	bl	80052f0 <RCCEx_PLL2_Config>
 800487a:	4603      	mov	r3, r0
 800487c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004880:	e00f      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004886:	3328      	adds	r3, #40	@ 0x28
 8004888:	2102      	movs	r1, #2
 800488a:	4618      	mov	r0, r3
 800488c:	f000 fde2 	bl	8005454 <RCCEx_PLL3_Config>
 8004890:	4603      	mov	r3, r0
 8004892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004896:	e004      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800489e:	e000      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80048a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10b      	bne.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048aa:	4b4b      	ldr	r3, [pc, #300]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ae:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80048b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80048ba:	4a47      	ldr	r2, [pc, #284]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048bc:	430b      	orrs	r3, r1
 80048be:	6593      	str	r3, [r2, #88]	@ 0x58
 80048c0:	e003      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80048d6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80048d8:	2300      	movs	r3, #0
 80048da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80048dc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80048e0:	460b      	mov	r3, r1
 80048e2:	4313      	orrs	r3, r2
 80048e4:	d03b      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80048e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80048f2:	d01f      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80048f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80048f8:	d818      	bhi.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80048fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048fe:	d003      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004900:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004904:	d007      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004906:	e011      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004908:	4b33      	ldr	r3, [pc, #204]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800490a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800490c:	4a32      	ldr	r2, [pc, #200]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800490e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004912:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004914:	e00f      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800491a:	3328      	adds	r3, #40	@ 0x28
 800491c:	2101      	movs	r1, #1
 800491e:	4618      	mov	r0, r3
 8004920:	f000 fd98 	bl	8005454 <RCCEx_PLL3_Config>
 8004924:	4603      	mov	r3, r0
 8004926:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800492a:	e004      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004932:	e000      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004934:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004936:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10b      	bne.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800493e:	4b26      	ldr	r3, [pc, #152]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004942:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800494a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800494e:	4a22      	ldr	r2, [pc, #136]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004950:	430b      	orrs	r3, r1
 8004952:	6553      	str	r3, [r2, #84]	@ 0x54
 8004954:	e003      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004956:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800495a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800495e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004966:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800496a:	673b      	str	r3, [r7, #112]	@ 0x70
 800496c:	2300      	movs	r3, #0
 800496e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004970:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004974:	460b      	mov	r3, r1
 8004976:	4313      	orrs	r3, r2
 8004978:	d034      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800497a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800497e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004980:	2b00      	cmp	r3, #0
 8004982:	d003      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004984:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004988:	d007      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800498a:	e011      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800498c:	4b12      	ldr	r3, [pc, #72]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800498e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004990:	4a11      	ldr	r2, [pc, #68]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004992:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004996:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004998:	e00e      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800499a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800499e:	3308      	adds	r3, #8
 80049a0:	2102      	movs	r1, #2
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 fca4 	bl	80052f0 <RCCEx_PLL2_Config>
 80049a8:	4603      	mov	r3, r0
 80049aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80049ae:	e003      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10d      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80049c0:	4b05      	ldr	r3, [pc, #20]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049c4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80049c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ce:	4a02      	ldr	r2, [pc, #8]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049d0:	430b      	orrs	r3, r1
 80049d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049d4:	e006      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80049d6:	bf00      	nop
 80049d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ec:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80049f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049f2:	2300      	movs	r3, #0
 80049f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049f6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80049fa:	460b      	mov	r3, r1
 80049fc:	4313      	orrs	r3, r2
 80049fe:	d00c      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a04:	3328      	adds	r3, #40	@ 0x28
 8004a06:	2102      	movs	r1, #2
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f000 fd23 	bl	8005454 <RCCEx_PLL3_Config>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d002      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a22:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004a26:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a28:	2300      	movs	r3, #0
 8004a2a:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a2c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004a30:	460b      	mov	r3, r1
 8004a32:	4313      	orrs	r3, r2
 8004a34:	d038      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a42:	d018      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004a44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a48:	d811      	bhi.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004a4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a4e:	d014      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004a50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a54:	d80b      	bhi.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d011      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004a5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a5e:	d106      	bne.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a60:	4bc3      	ldr	r3, [pc, #780]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a64:	4ac2      	ldr	r2, [pc, #776]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004a6c:	e008      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a74:	e004      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004a76:	bf00      	nop
 8004a78:	e002      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004a7a:	bf00      	nop
 8004a7c:	e000      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004a7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10b      	bne.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a88:	4bb9      	ldr	r3, [pc, #740]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a8c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a98:	4ab5      	ldr	r2, [pc, #724]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a9a:	430b      	orrs	r3, r1
 8004a9c:	6553      	str	r3, [r2, #84]	@ 0x54
 8004a9e:	e003      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aa4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004ab4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004aba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004abe:	460b      	mov	r3, r1
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	d009      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ac4:	4baa      	ldr	r3, [pc, #680]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ac8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ad2:	4aa7      	ldr	r2, [pc, #668]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ad4:	430b      	orrs	r3, r1
 8004ad6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004ae4:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	657b      	str	r3, [r7, #84]	@ 0x54
 8004aea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004aee:	460b      	mov	r3, r1
 8004af0:	4313      	orrs	r3, r2
 8004af2:	d00a      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004af4:	4b9e      	ldr	r3, [pc, #632]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b00:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004b04:	4a9a      	ldr	r2, [pc, #616]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b06:	430b      	orrs	r3, r1
 8004b08:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b12:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004b16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b18:	2300      	movs	r3, #0
 8004b1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b1c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004b20:	460b      	mov	r3, r1
 8004b22:	4313      	orrs	r3, r2
 8004b24:	d009      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b26:	4b92      	ldr	r3, [pc, #584]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b2a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b34:	4a8e      	ldr	r2, [pc, #568]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b36:	430b      	orrs	r3, r1
 8004b38:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b42:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004b46:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b48:	2300      	movs	r3, #0
 8004b4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b4c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004b50:	460b      	mov	r3, r1
 8004b52:	4313      	orrs	r3, r2
 8004b54:	d00e      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b56:	4b86      	ldr	r3, [pc, #536]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	4a85      	ldr	r2, [pc, #532]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b5c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004b60:	6113      	str	r3, [r2, #16]
 8004b62:	4b83      	ldr	r3, [pc, #524]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b64:	6919      	ldr	r1, [r3, #16]
 8004b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b6a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004b6e:	4a80      	ldr	r2, [pc, #512]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b70:	430b      	orrs	r3, r1
 8004b72:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b7c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004b80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b82:	2300      	movs	r3, #0
 8004b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b86:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	d009      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004b90:	4b77      	ldr	r3, [pc, #476]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b94:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b9e:	4a74      	ldr	r2, [pc, #464]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ba0:	430b      	orrs	r3, r1
 8004ba2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bac:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004bb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bb6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	d00a      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004bc0:	4b6b      	ldr	r3, [pc, #428]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bc4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bd0:	4a67      	ldr	r2, [pc, #412]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bd2:	430b      	orrs	r3, r1
 8004bd4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bde:	2100      	movs	r1, #0
 8004be0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004be8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004bec:	460b      	mov	r3, r1
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	d011      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bf6:	3308      	adds	r3, #8
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 fb78 	bl	80052f0 <RCCEx_PLL2_Config>
 8004c00:	4603      	mov	r3, r0
 8004c02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004c06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1e:	2100      	movs	r1, #0
 8004c20:	6239      	str	r1, [r7, #32]
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c28:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	d011      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c36:	3308      	adds	r3, #8
 8004c38:	2101      	movs	r1, #1
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 fb58 	bl	80052f0 <RCCEx_PLL2_Config>
 8004c40:	4603      	mov	r3, r0
 8004c42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004c46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5e:	2100      	movs	r1, #0
 8004c60:	61b9      	str	r1, [r7, #24]
 8004c62:	f003 0304 	and.w	r3, r3, #4
 8004c66:	61fb      	str	r3, [r7, #28]
 8004c68:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	d011      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c76:	3308      	adds	r3, #8
 8004c78:	2102      	movs	r1, #2
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 fb38 	bl	80052f0 <RCCEx_PLL2_Config>
 8004c80:	4603      	mov	r3, r0
 8004c82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004c86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	6139      	str	r1, [r7, #16]
 8004ca2:	f003 0308 	and.w	r3, r3, #8
 8004ca6:	617b      	str	r3, [r7, #20]
 8004ca8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004cac:	460b      	mov	r3, r1
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	d011      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cb6:	3328      	adds	r3, #40	@ 0x28
 8004cb8:	2100      	movs	r1, #0
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 fbca 	bl	8005454 <RCCEx_PLL3_Config>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cde:	2100      	movs	r1, #0
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	f003 0310 	and.w	r3, r3, #16
 8004ce6:	60fb      	str	r3, [r7, #12]
 8004ce8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004cec:	460b      	mov	r3, r1
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	d011      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cf6:	3328      	adds	r3, #40	@ 0x28
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 fbaa 	bl	8005454 <RCCEx_PLL3_Config>
 8004d00:	4603      	mov	r3, r0
 8004d02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d003      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1e:	2100      	movs	r1, #0
 8004d20:	6039      	str	r1, [r7, #0]
 8004d22:	f003 0320 	and.w	r3, r3, #32
 8004d26:	607b      	str	r3, [r7, #4]
 8004d28:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	d011      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d36:	3328      	adds	r3, #40	@ 0x28
 8004d38:	2102      	movs	r1, #2
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 fb8a 	bl	8005454 <RCCEx_PLL3_Config>
 8004d40:	4603      	mov	r3, r0
 8004d42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004d56:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	e000      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d70:	58024400 	.word	0x58024400

08004d74 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004d78:	f7fe fd96 	bl	80038a8 <HAL_RCC_GetHCLKFreq>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	4b06      	ldr	r3, [pc, #24]	@ (8004d98 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	091b      	lsrs	r3, r3, #4
 8004d84:	f003 0307 	and.w	r3, r3, #7
 8004d88:	4904      	ldr	r1, [pc, #16]	@ (8004d9c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004d8a:	5ccb      	ldrb	r3, [r1, r3]
 8004d8c:	f003 031f 	and.w	r3, r3, #31
 8004d90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	58024400 	.word	0x58024400
 8004d9c:	0800d500 	.word	0x0800d500

08004da0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b089      	sub	sp, #36	@ 0x24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004da8:	4ba1      	ldr	r3, [pc, #644]	@ (8005030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dac:	f003 0303 	and.w	r3, r3, #3
 8004db0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004db2:	4b9f      	ldr	r3, [pc, #636]	@ (8005030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db6:	0b1b      	lsrs	r3, r3, #12
 8004db8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dbc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004dbe:	4b9c      	ldr	r3, [pc, #624]	@ (8005030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc2:	091b      	lsrs	r3, r3, #4
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004dca:	4b99      	ldr	r3, [pc, #612]	@ (8005030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dce:	08db      	lsrs	r3, r3, #3
 8004dd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	fb02 f303 	mul.w	r3, r2, r3
 8004dda:	ee07 3a90 	vmov	s15, r3
 8004dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 8111 	beq.w	8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	f000 8083 	beq.w	8004efc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	f200 80a1 	bhi.w	8004f40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d003      	beq.n	8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d056      	beq.n	8004eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004e0a:	e099      	b.n	8004f40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e0c:	4b88      	ldr	r3, [pc, #544]	@ (8005030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0320 	and.w	r3, r3, #32
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d02d      	beq.n	8004e74 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e18:	4b85      	ldr	r3, [pc, #532]	@ (8005030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	08db      	lsrs	r3, r3, #3
 8004e1e:	f003 0303 	and.w	r3, r3, #3
 8004e22:	4a84      	ldr	r2, [pc, #528]	@ (8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004e24:	fa22 f303 	lsr.w	r3, r2, r3
 8004e28:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	ee07 3a90 	vmov	s15, r3
 8004e30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	ee07 3a90 	vmov	s15, r3
 8004e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e42:	4b7b      	ldr	r3, [pc, #492]	@ (8005030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e4a:	ee07 3a90 	vmov	s15, r3
 8004e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e52:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e56:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e6e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004e72:	e087      	b.n	8004f84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	ee07 3a90 	vmov	s15, r3
 8004e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e7e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800503c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e86:	4b6a      	ldr	r3, [pc, #424]	@ (8005030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e8e:	ee07 3a90 	vmov	s15, r3
 8004e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e96:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e9a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ea6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004eb6:	e065      	b.n	8004f84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	ee07 3a90 	vmov	s15, r3
 8004ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ec2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005040 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eca:	4b59      	ldr	r3, [pc, #356]	@ (8005030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ed2:	ee07 3a90 	vmov	s15, r3
 8004ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eda:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ede:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ef6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004efa:	e043      	b.n	8004f84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	ee07 3a90 	vmov	s15, r3
 8004f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f06:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005044 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f0e:	4b48      	ldr	r3, [pc, #288]	@ (8005030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f16:	ee07 3a90 	vmov	s15, r3
 8004f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f22:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f3e:	e021      	b.n	8004f84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	ee07 3a90 	vmov	s15, r3
 8004f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f4a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005040 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f52:	4b37      	ldr	r3, [pc, #220]	@ (8005030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f5a:	ee07 3a90 	vmov	s15, r3
 8004f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f62:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f66:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f82:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004f84:	4b2a      	ldr	r3, [pc, #168]	@ (8005030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f88:	0a5b      	lsrs	r3, r3, #9
 8004f8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f8e:	ee07 3a90 	vmov	s15, r3
 8004f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004faa:	ee17 2a90 	vmov	r2, s15
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004fb2:	4b1f      	ldr	r3, [pc, #124]	@ (8005030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fb6:	0c1b      	lsrs	r3, r3, #16
 8004fb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fbc:	ee07 3a90 	vmov	s15, r3
 8004fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fc4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004fc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fd8:	ee17 2a90 	vmov	r2, s15
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004fe0:	4b13      	ldr	r3, [pc, #76]	@ (8005030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe4:	0e1b      	lsrs	r3, r3, #24
 8004fe6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fea:	ee07 3a90 	vmov	s15, r3
 8004fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ff2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ff6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ffa:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ffe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005002:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005006:	ee17 2a90 	vmov	r2, s15
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800500e:	e008      	b.n	8005022 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	609a      	str	r2, [r3, #8]
}
 8005022:	bf00      	nop
 8005024:	3724      	adds	r7, #36	@ 0x24
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	58024400 	.word	0x58024400
 8005034:	03d09000 	.word	0x03d09000
 8005038:	46000000 	.word	0x46000000
 800503c:	4c742400 	.word	0x4c742400
 8005040:	4a742400 	.word	0x4a742400
 8005044:	4bbebc20 	.word	0x4bbebc20

08005048 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005048:	b480      	push	{r7}
 800504a:	b089      	sub	sp, #36	@ 0x24
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005050:	4ba1      	ldr	r3, [pc, #644]	@ (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005054:	f003 0303 	and.w	r3, r3, #3
 8005058:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800505a:	4b9f      	ldr	r3, [pc, #636]	@ (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800505c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800505e:	0d1b      	lsrs	r3, r3, #20
 8005060:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005064:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005066:	4b9c      	ldr	r3, [pc, #624]	@ (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800506a:	0a1b      	lsrs	r3, r3, #8
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005072:	4b99      	ldr	r3, [pc, #612]	@ (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005076:	08db      	lsrs	r3, r3, #3
 8005078:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	fb02 f303 	mul.w	r3, r2, r3
 8005082:	ee07 3a90 	vmov	s15, r3
 8005086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800508a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 8111 	beq.w	80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	2b02      	cmp	r3, #2
 800509a:	f000 8083 	beq.w	80051a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	f200 80a1 	bhi.w	80051e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d003      	beq.n	80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d056      	beq.n	8005160 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80050b2:	e099      	b.n	80051e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050b4:	4b88      	ldr	r3, [pc, #544]	@ (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0320 	and.w	r3, r3, #32
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d02d      	beq.n	800511c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050c0:	4b85      	ldr	r3, [pc, #532]	@ (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	08db      	lsrs	r3, r3, #3
 80050c6:	f003 0303 	and.w	r3, r3, #3
 80050ca:	4a84      	ldr	r2, [pc, #528]	@ (80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80050cc:	fa22 f303 	lsr.w	r3, r2, r3
 80050d0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	ee07 3a90 	vmov	s15, r3
 80050d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	ee07 3a90 	vmov	s15, r3
 80050e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ea:	4b7b      	ldr	r3, [pc, #492]	@ (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050f2:	ee07 3a90 	vmov	s15, r3
 80050f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80050fe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800510a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800510e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005116:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800511a:	e087      	b.n	800522c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	ee07 3a90 	vmov	s15, r3
 8005122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005126:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80052e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800512a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800512e:	4b6a      	ldr	r3, [pc, #424]	@ (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005136:	ee07 3a90 	vmov	s15, r3
 800513a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800513e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005142:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800514a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800514e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800515a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800515e:	e065      	b.n	800522c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	ee07 3a90 	vmov	s15, r3
 8005166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800516a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80052e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800516e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005172:	4b59      	ldr	r3, [pc, #356]	@ (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800517a:	ee07 3a90 	vmov	s15, r3
 800517e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005182:	ed97 6a03 	vldr	s12, [r7, #12]
 8005186:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800518a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800518e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005192:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800519a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800519e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051a2:	e043      	b.n	800522c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	ee07 3a90 	vmov	s15, r3
 80051aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80052ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80051b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051b6:	4b48      	ldr	r3, [pc, #288]	@ (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051be:	ee07 3a90 	vmov	s15, r3
 80051c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80051ca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051e6:	e021      	b.n	800522c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	ee07 3a90 	vmov	s15, r3
 80051ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051f2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80052e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80051f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051fa:	4b37      	ldr	r3, [pc, #220]	@ (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005202:	ee07 3a90 	vmov	s15, r3
 8005206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800520a:	ed97 6a03 	vldr	s12, [r7, #12]
 800520e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800521a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800521e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005226:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800522a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800522c:	4b2a      	ldr	r3, [pc, #168]	@ (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800522e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005230:	0a5b      	lsrs	r3, r3, #9
 8005232:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005236:	ee07 3a90 	vmov	s15, r3
 800523a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800523e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005242:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005246:	edd7 6a07 	vldr	s13, [r7, #28]
 800524a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800524e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005252:	ee17 2a90 	vmov	r2, s15
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800525a:	4b1f      	ldr	r3, [pc, #124]	@ (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800525c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525e:	0c1b      	lsrs	r3, r3, #16
 8005260:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005264:	ee07 3a90 	vmov	s15, r3
 8005268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800526c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005270:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005274:	edd7 6a07 	vldr	s13, [r7, #28]
 8005278:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800527c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005280:	ee17 2a90 	vmov	r2, s15
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005288:	4b13      	ldr	r3, [pc, #76]	@ (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800528a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528c:	0e1b      	lsrs	r3, r3, #24
 800528e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005292:	ee07 3a90 	vmov	s15, r3
 8005296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800529a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800529e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80052a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052ae:	ee17 2a90 	vmov	r2, s15
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80052b6:	e008      	b.n	80052ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	609a      	str	r2, [r3, #8]
}
 80052ca:	bf00      	nop
 80052cc:	3724      	adds	r7, #36	@ 0x24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	58024400 	.word	0x58024400
 80052dc:	03d09000 	.word	0x03d09000
 80052e0:	46000000 	.word	0x46000000
 80052e4:	4c742400 	.word	0x4c742400
 80052e8:	4a742400 	.word	0x4a742400
 80052ec:	4bbebc20 	.word	0x4bbebc20

080052f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052fa:	2300      	movs	r3, #0
 80052fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052fe:	4b53      	ldr	r3, [pc, #332]	@ (800544c <RCCEx_PLL2_Config+0x15c>)
 8005300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005302:	f003 0303 	and.w	r3, r3, #3
 8005306:	2b03      	cmp	r3, #3
 8005308:	d101      	bne.n	800530e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e099      	b.n	8005442 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800530e:	4b4f      	ldr	r3, [pc, #316]	@ (800544c <RCCEx_PLL2_Config+0x15c>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a4e      	ldr	r2, [pc, #312]	@ (800544c <RCCEx_PLL2_Config+0x15c>)
 8005314:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005318:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800531a:	f7fc fa39 	bl	8001790 <HAL_GetTick>
 800531e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005320:	e008      	b.n	8005334 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005322:	f7fc fa35 	bl	8001790 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	2b02      	cmp	r3, #2
 800532e:	d901      	bls.n	8005334 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e086      	b.n	8005442 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005334:	4b45      	ldr	r3, [pc, #276]	@ (800544c <RCCEx_PLL2_Config+0x15c>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1f0      	bne.n	8005322 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005340:	4b42      	ldr	r3, [pc, #264]	@ (800544c <RCCEx_PLL2_Config+0x15c>)
 8005342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005344:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	031b      	lsls	r3, r3, #12
 800534e:	493f      	ldr	r1, [pc, #252]	@ (800544c <RCCEx_PLL2_Config+0x15c>)
 8005350:	4313      	orrs	r3, r2
 8005352:	628b      	str	r3, [r1, #40]	@ 0x28
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	3b01      	subs	r3, #1
 800535a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	3b01      	subs	r3, #1
 8005364:	025b      	lsls	r3, r3, #9
 8005366:	b29b      	uxth	r3, r3
 8005368:	431a      	orrs	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	3b01      	subs	r3, #1
 8005370:	041b      	lsls	r3, r3, #16
 8005372:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005376:	431a      	orrs	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	3b01      	subs	r3, #1
 800537e:	061b      	lsls	r3, r3, #24
 8005380:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005384:	4931      	ldr	r1, [pc, #196]	@ (800544c <RCCEx_PLL2_Config+0x15c>)
 8005386:	4313      	orrs	r3, r2
 8005388:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800538a:	4b30      	ldr	r3, [pc, #192]	@ (800544c <RCCEx_PLL2_Config+0x15c>)
 800538c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800538e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	492d      	ldr	r1, [pc, #180]	@ (800544c <RCCEx_PLL2_Config+0x15c>)
 8005398:	4313      	orrs	r3, r2
 800539a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800539c:	4b2b      	ldr	r3, [pc, #172]	@ (800544c <RCCEx_PLL2_Config+0x15c>)
 800539e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a0:	f023 0220 	bic.w	r2, r3, #32
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	4928      	ldr	r1, [pc, #160]	@ (800544c <RCCEx_PLL2_Config+0x15c>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80053ae:	4b27      	ldr	r3, [pc, #156]	@ (800544c <RCCEx_PLL2_Config+0x15c>)
 80053b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b2:	4a26      	ldr	r2, [pc, #152]	@ (800544c <RCCEx_PLL2_Config+0x15c>)
 80053b4:	f023 0310 	bic.w	r3, r3, #16
 80053b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80053ba:	4b24      	ldr	r3, [pc, #144]	@ (800544c <RCCEx_PLL2_Config+0x15c>)
 80053bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053be:	4b24      	ldr	r3, [pc, #144]	@ (8005450 <RCCEx_PLL2_Config+0x160>)
 80053c0:	4013      	ands	r3, r2
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	69d2      	ldr	r2, [r2, #28]
 80053c6:	00d2      	lsls	r2, r2, #3
 80053c8:	4920      	ldr	r1, [pc, #128]	@ (800544c <RCCEx_PLL2_Config+0x15c>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80053ce:	4b1f      	ldr	r3, [pc, #124]	@ (800544c <RCCEx_PLL2_Config+0x15c>)
 80053d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d2:	4a1e      	ldr	r2, [pc, #120]	@ (800544c <RCCEx_PLL2_Config+0x15c>)
 80053d4:	f043 0310 	orr.w	r3, r3, #16
 80053d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d106      	bne.n	80053ee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80053e0:	4b1a      	ldr	r3, [pc, #104]	@ (800544c <RCCEx_PLL2_Config+0x15c>)
 80053e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e4:	4a19      	ldr	r2, [pc, #100]	@ (800544c <RCCEx_PLL2_Config+0x15c>)
 80053e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80053ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80053ec:	e00f      	b.n	800540e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d106      	bne.n	8005402 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80053f4:	4b15      	ldr	r3, [pc, #84]	@ (800544c <RCCEx_PLL2_Config+0x15c>)
 80053f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f8:	4a14      	ldr	r2, [pc, #80]	@ (800544c <RCCEx_PLL2_Config+0x15c>)
 80053fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005400:	e005      	b.n	800540e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005402:	4b12      	ldr	r3, [pc, #72]	@ (800544c <RCCEx_PLL2_Config+0x15c>)
 8005404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005406:	4a11      	ldr	r2, [pc, #68]	@ (800544c <RCCEx_PLL2_Config+0x15c>)
 8005408:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800540c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800540e:	4b0f      	ldr	r3, [pc, #60]	@ (800544c <RCCEx_PLL2_Config+0x15c>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a0e      	ldr	r2, [pc, #56]	@ (800544c <RCCEx_PLL2_Config+0x15c>)
 8005414:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005418:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800541a:	f7fc f9b9 	bl	8001790 <HAL_GetTick>
 800541e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005420:	e008      	b.n	8005434 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005422:	f7fc f9b5 	bl	8001790 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	2b02      	cmp	r3, #2
 800542e:	d901      	bls.n	8005434 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e006      	b.n	8005442 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005434:	4b05      	ldr	r3, [pc, #20]	@ (800544c <RCCEx_PLL2_Config+0x15c>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d0f0      	beq.n	8005422 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005440:	7bfb      	ldrb	r3, [r7, #15]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	58024400 	.word	0x58024400
 8005450:	ffff0007 	.word	0xffff0007

08005454 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800545e:	2300      	movs	r3, #0
 8005460:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005462:	4b53      	ldr	r3, [pc, #332]	@ (80055b0 <RCCEx_PLL3_Config+0x15c>)
 8005464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005466:	f003 0303 	and.w	r3, r3, #3
 800546a:	2b03      	cmp	r3, #3
 800546c:	d101      	bne.n	8005472 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e099      	b.n	80055a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005472:	4b4f      	ldr	r3, [pc, #316]	@ (80055b0 <RCCEx_PLL3_Config+0x15c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a4e      	ldr	r2, [pc, #312]	@ (80055b0 <RCCEx_PLL3_Config+0x15c>)
 8005478:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800547c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800547e:	f7fc f987 	bl	8001790 <HAL_GetTick>
 8005482:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005484:	e008      	b.n	8005498 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005486:	f7fc f983 	bl	8001790 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	2b02      	cmp	r3, #2
 8005492:	d901      	bls.n	8005498 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e086      	b.n	80055a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005498:	4b45      	ldr	r3, [pc, #276]	@ (80055b0 <RCCEx_PLL3_Config+0x15c>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1f0      	bne.n	8005486 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80054a4:	4b42      	ldr	r3, [pc, #264]	@ (80055b0 <RCCEx_PLL3_Config+0x15c>)
 80054a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	051b      	lsls	r3, r3, #20
 80054b2:	493f      	ldr	r1, [pc, #252]	@ (80055b0 <RCCEx_PLL3_Config+0x15c>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	628b      	str	r3, [r1, #40]	@ 0x28
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	3b01      	subs	r3, #1
 80054be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	3b01      	subs	r3, #1
 80054c8:	025b      	lsls	r3, r3, #9
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	431a      	orrs	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	3b01      	subs	r3, #1
 80054d4:	041b      	lsls	r3, r3, #16
 80054d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80054da:	431a      	orrs	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	3b01      	subs	r3, #1
 80054e2:	061b      	lsls	r3, r3, #24
 80054e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80054e8:	4931      	ldr	r1, [pc, #196]	@ (80055b0 <RCCEx_PLL3_Config+0x15c>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80054ee:	4b30      	ldr	r3, [pc, #192]	@ (80055b0 <RCCEx_PLL3_Config+0x15c>)
 80054f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	492d      	ldr	r1, [pc, #180]	@ (80055b0 <RCCEx_PLL3_Config+0x15c>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005500:	4b2b      	ldr	r3, [pc, #172]	@ (80055b0 <RCCEx_PLL3_Config+0x15c>)
 8005502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005504:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	4928      	ldr	r1, [pc, #160]	@ (80055b0 <RCCEx_PLL3_Config+0x15c>)
 800550e:	4313      	orrs	r3, r2
 8005510:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005512:	4b27      	ldr	r3, [pc, #156]	@ (80055b0 <RCCEx_PLL3_Config+0x15c>)
 8005514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005516:	4a26      	ldr	r2, [pc, #152]	@ (80055b0 <RCCEx_PLL3_Config+0x15c>)
 8005518:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800551c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800551e:	4b24      	ldr	r3, [pc, #144]	@ (80055b0 <RCCEx_PLL3_Config+0x15c>)
 8005520:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005522:	4b24      	ldr	r3, [pc, #144]	@ (80055b4 <RCCEx_PLL3_Config+0x160>)
 8005524:	4013      	ands	r3, r2
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	69d2      	ldr	r2, [r2, #28]
 800552a:	00d2      	lsls	r2, r2, #3
 800552c:	4920      	ldr	r1, [pc, #128]	@ (80055b0 <RCCEx_PLL3_Config+0x15c>)
 800552e:	4313      	orrs	r3, r2
 8005530:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005532:	4b1f      	ldr	r3, [pc, #124]	@ (80055b0 <RCCEx_PLL3_Config+0x15c>)
 8005534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005536:	4a1e      	ldr	r2, [pc, #120]	@ (80055b0 <RCCEx_PLL3_Config+0x15c>)
 8005538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800553c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d106      	bne.n	8005552 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005544:	4b1a      	ldr	r3, [pc, #104]	@ (80055b0 <RCCEx_PLL3_Config+0x15c>)
 8005546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005548:	4a19      	ldr	r2, [pc, #100]	@ (80055b0 <RCCEx_PLL3_Config+0x15c>)
 800554a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800554e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005550:	e00f      	b.n	8005572 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d106      	bne.n	8005566 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005558:	4b15      	ldr	r3, [pc, #84]	@ (80055b0 <RCCEx_PLL3_Config+0x15c>)
 800555a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800555c:	4a14      	ldr	r2, [pc, #80]	@ (80055b0 <RCCEx_PLL3_Config+0x15c>)
 800555e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005562:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005564:	e005      	b.n	8005572 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005566:	4b12      	ldr	r3, [pc, #72]	@ (80055b0 <RCCEx_PLL3_Config+0x15c>)
 8005568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556a:	4a11      	ldr	r2, [pc, #68]	@ (80055b0 <RCCEx_PLL3_Config+0x15c>)
 800556c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005570:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005572:	4b0f      	ldr	r3, [pc, #60]	@ (80055b0 <RCCEx_PLL3_Config+0x15c>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a0e      	ldr	r2, [pc, #56]	@ (80055b0 <RCCEx_PLL3_Config+0x15c>)
 8005578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800557c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800557e:	f7fc f907 	bl	8001790 <HAL_GetTick>
 8005582:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005584:	e008      	b.n	8005598 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005586:	f7fc f903 	bl	8001790 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b02      	cmp	r3, #2
 8005592:	d901      	bls.n	8005598 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e006      	b.n	80055a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005598:	4b05      	ldr	r3, [pc, #20]	@ (80055b0 <RCCEx_PLL3_Config+0x15c>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d0f0      	beq.n	8005586 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80055a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	58024400 	.word	0x58024400
 80055b4:	ffff0007 	.word	0xffff0007

080055b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e049      	b.n	800565e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d106      	bne.n	80055e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7fb fe3a 	bl	8001258 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2202      	movs	r2, #2
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	3304      	adds	r3, #4
 80055f4:	4619      	mov	r1, r3
 80055f6:	4610      	mov	r0, r2
 80055f8:	f000 fbfc 	bl	8005df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b082      	sub	sp, #8
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e049      	b.n	800570c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d106      	bne.n	8005692 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 f841 	bl	8005714 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2202      	movs	r2, #2
 8005696:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	3304      	adds	r3, #4
 80056a2:	4619      	mov	r1, r3
 80056a4:	4610      	mov	r0, r2
 80056a6:	f000 fba5 	bl	8005df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3708      	adds	r7, #8
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005732:	2300      	movs	r3, #0
 8005734:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d109      	bne.n	8005750 <HAL_TIM_PWM_Start_IT+0x28>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b01      	cmp	r3, #1
 8005746:	bf14      	ite	ne
 8005748:	2301      	movne	r3, #1
 800574a:	2300      	moveq	r3, #0
 800574c:	b2db      	uxtb	r3, r3
 800574e:	e03c      	b.n	80057ca <HAL_TIM_PWM_Start_IT+0xa2>
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	2b04      	cmp	r3, #4
 8005754:	d109      	bne.n	800576a <HAL_TIM_PWM_Start_IT+0x42>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b01      	cmp	r3, #1
 8005760:	bf14      	ite	ne
 8005762:	2301      	movne	r3, #1
 8005764:	2300      	moveq	r3, #0
 8005766:	b2db      	uxtb	r3, r3
 8005768:	e02f      	b.n	80057ca <HAL_TIM_PWM_Start_IT+0xa2>
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b08      	cmp	r3, #8
 800576e:	d109      	bne.n	8005784 <HAL_TIM_PWM_Start_IT+0x5c>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b01      	cmp	r3, #1
 800577a:	bf14      	ite	ne
 800577c:	2301      	movne	r3, #1
 800577e:	2300      	moveq	r3, #0
 8005780:	b2db      	uxtb	r3, r3
 8005782:	e022      	b.n	80057ca <HAL_TIM_PWM_Start_IT+0xa2>
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	2b0c      	cmp	r3, #12
 8005788:	d109      	bne.n	800579e <HAL_TIM_PWM_Start_IT+0x76>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b01      	cmp	r3, #1
 8005794:	bf14      	ite	ne
 8005796:	2301      	movne	r3, #1
 8005798:	2300      	moveq	r3, #0
 800579a:	b2db      	uxtb	r3, r3
 800579c:	e015      	b.n	80057ca <HAL_TIM_PWM_Start_IT+0xa2>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b10      	cmp	r3, #16
 80057a2:	d109      	bne.n	80057b8 <HAL_TIM_PWM_Start_IT+0x90>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	bf14      	ite	ne
 80057b0:	2301      	movne	r3, #1
 80057b2:	2300      	moveq	r3, #0
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	e008      	b.n	80057ca <HAL_TIM_PWM_Start_IT+0xa2>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	bf14      	ite	ne
 80057c4:	2301      	movne	r3, #1
 80057c6:	2300      	moveq	r3, #0
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d001      	beq.n	80057d2 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e0ec      	b.n	80059ac <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d104      	bne.n	80057e2 <HAL_TIM_PWM_Start_IT+0xba>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2202      	movs	r2, #2
 80057dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057e0:	e023      	b.n	800582a <HAL_TIM_PWM_Start_IT+0x102>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b04      	cmp	r3, #4
 80057e6:	d104      	bne.n	80057f2 <HAL_TIM_PWM_Start_IT+0xca>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2202      	movs	r2, #2
 80057ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057f0:	e01b      	b.n	800582a <HAL_TIM_PWM_Start_IT+0x102>
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b08      	cmp	r3, #8
 80057f6:	d104      	bne.n	8005802 <HAL_TIM_PWM_Start_IT+0xda>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2202      	movs	r2, #2
 80057fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005800:	e013      	b.n	800582a <HAL_TIM_PWM_Start_IT+0x102>
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2b0c      	cmp	r3, #12
 8005806:	d104      	bne.n	8005812 <HAL_TIM_PWM_Start_IT+0xea>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2202      	movs	r2, #2
 800580c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005810:	e00b      	b.n	800582a <HAL_TIM_PWM_Start_IT+0x102>
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b10      	cmp	r3, #16
 8005816:	d104      	bne.n	8005822 <HAL_TIM_PWM_Start_IT+0xfa>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005820:	e003      	b.n	800582a <HAL_TIM_PWM_Start_IT+0x102>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2202      	movs	r2, #2
 8005826:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b0c      	cmp	r3, #12
 800582e:	d841      	bhi.n	80058b4 <HAL_TIM_PWM_Start_IT+0x18c>
 8005830:	a201      	add	r2, pc, #4	@ (adr r2, 8005838 <HAL_TIM_PWM_Start_IT+0x110>)
 8005832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005836:	bf00      	nop
 8005838:	0800586d 	.word	0x0800586d
 800583c:	080058b5 	.word	0x080058b5
 8005840:	080058b5 	.word	0x080058b5
 8005844:	080058b5 	.word	0x080058b5
 8005848:	0800587f 	.word	0x0800587f
 800584c:	080058b5 	.word	0x080058b5
 8005850:	080058b5 	.word	0x080058b5
 8005854:	080058b5 	.word	0x080058b5
 8005858:	08005891 	.word	0x08005891
 800585c:	080058b5 	.word	0x080058b5
 8005860:	080058b5 	.word	0x080058b5
 8005864:	080058b5 	.word	0x080058b5
 8005868:	080058a3 	.word	0x080058a3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68da      	ldr	r2, [r3, #12]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f042 0202 	orr.w	r2, r2, #2
 800587a:	60da      	str	r2, [r3, #12]
      break;
 800587c:	e01d      	b.n	80058ba <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68da      	ldr	r2, [r3, #12]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f042 0204 	orr.w	r2, r2, #4
 800588c:	60da      	str	r2, [r3, #12]
      break;
 800588e:	e014      	b.n	80058ba <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68da      	ldr	r2, [r3, #12]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f042 0208 	orr.w	r2, r2, #8
 800589e:	60da      	str	r2, [r3, #12]
      break;
 80058a0:	e00b      	b.n	80058ba <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68da      	ldr	r2, [r3, #12]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f042 0210 	orr.w	r2, r2, #16
 80058b0:	60da      	str	r2, [r3, #12]
      break;
 80058b2:	e002      	b.n	80058ba <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	73fb      	strb	r3, [r7, #15]
      break;
 80058b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80058ba:	7bfb      	ldrb	r3, [r7, #15]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d174      	bne.n	80059aa <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2201      	movs	r2, #1
 80058c6:	6839      	ldr	r1, [r7, #0]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f000 fead 	bl	8006628 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a38      	ldr	r2, [pc, #224]	@ (80059b4 <HAL_TIM_PWM_Start_IT+0x28c>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d013      	beq.n	8005900 <HAL_TIM_PWM_Start_IT+0x1d8>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a36      	ldr	r2, [pc, #216]	@ (80059b8 <HAL_TIM_PWM_Start_IT+0x290>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d00e      	beq.n	8005900 <HAL_TIM_PWM_Start_IT+0x1d8>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a35      	ldr	r2, [pc, #212]	@ (80059bc <HAL_TIM_PWM_Start_IT+0x294>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d009      	beq.n	8005900 <HAL_TIM_PWM_Start_IT+0x1d8>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a33      	ldr	r2, [pc, #204]	@ (80059c0 <HAL_TIM_PWM_Start_IT+0x298>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d004      	beq.n	8005900 <HAL_TIM_PWM_Start_IT+0x1d8>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a32      	ldr	r2, [pc, #200]	@ (80059c4 <HAL_TIM_PWM_Start_IT+0x29c>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d101      	bne.n	8005904 <HAL_TIM_PWM_Start_IT+0x1dc>
 8005900:	2301      	movs	r3, #1
 8005902:	e000      	b.n	8005906 <HAL_TIM_PWM_Start_IT+0x1de>
 8005904:	2300      	movs	r3, #0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d007      	beq.n	800591a <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005918:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a25      	ldr	r2, [pc, #148]	@ (80059b4 <HAL_TIM_PWM_Start_IT+0x28c>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d022      	beq.n	800596a <HAL_TIM_PWM_Start_IT+0x242>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800592c:	d01d      	beq.n	800596a <HAL_TIM_PWM_Start_IT+0x242>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a25      	ldr	r2, [pc, #148]	@ (80059c8 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d018      	beq.n	800596a <HAL_TIM_PWM_Start_IT+0x242>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a23      	ldr	r2, [pc, #140]	@ (80059cc <HAL_TIM_PWM_Start_IT+0x2a4>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d013      	beq.n	800596a <HAL_TIM_PWM_Start_IT+0x242>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a22      	ldr	r2, [pc, #136]	@ (80059d0 <HAL_TIM_PWM_Start_IT+0x2a8>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d00e      	beq.n	800596a <HAL_TIM_PWM_Start_IT+0x242>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a19      	ldr	r2, [pc, #100]	@ (80059b8 <HAL_TIM_PWM_Start_IT+0x290>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d009      	beq.n	800596a <HAL_TIM_PWM_Start_IT+0x242>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a1e      	ldr	r2, [pc, #120]	@ (80059d4 <HAL_TIM_PWM_Start_IT+0x2ac>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d004      	beq.n	800596a <HAL_TIM_PWM_Start_IT+0x242>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a15      	ldr	r2, [pc, #84]	@ (80059bc <HAL_TIM_PWM_Start_IT+0x294>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d115      	bne.n	8005996 <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689a      	ldr	r2, [r3, #8]
 8005970:	4b19      	ldr	r3, [pc, #100]	@ (80059d8 <HAL_TIM_PWM_Start_IT+0x2b0>)
 8005972:	4013      	ands	r3, r2
 8005974:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	2b06      	cmp	r3, #6
 800597a:	d015      	beq.n	80059a8 <HAL_TIM_PWM_Start_IT+0x280>
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005982:	d011      	beq.n	80059a8 <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f042 0201 	orr.w	r2, r2, #1
 8005992:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005994:	e008      	b.n	80059a8 <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f042 0201 	orr.w	r2, r2, #1
 80059a4:	601a      	str	r2, [r3, #0]
 80059a6:	e000      	b.n	80059aa <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059a8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80059aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	40010000 	.word	0x40010000
 80059b8:	40010400 	.word	0x40010400
 80059bc:	40014000 	.word	0x40014000
 80059c0:	40014400 	.word	0x40014400
 80059c4:	40014800 	.word	0x40014800
 80059c8:	40000400 	.word	0x40000400
 80059cc:	40000800 	.word	0x40000800
 80059d0:	40000c00 	.word	0x40000c00
 80059d4:	40001800 	.word	0x40001800
 80059d8:	00010007 	.word	0x00010007

080059dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059e8:	2300      	movs	r3, #0
 80059ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d101      	bne.n	80059fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059f6:	2302      	movs	r3, #2
 80059f8:	e0ff      	b.n	8005bfa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2b14      	cmp	r3, #20
 8005a06:	f200 80f0 	bhi.w	8005bea <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a10:	08005a65 	.word	0x08005a65
 8005a14:	08005beb 	.word	0x08005beb
 8005a18:	08005beb 	.word	0x08005beb
 8005a1c:	08005beb 	.word	0x08005beb
 8005a20:	08005aa5 	.word	0x08005aa5
 8005a24:	08005beb 	.word	0x08005beb
 8005a28:	08005beb 	.word	0x08005beb
 8005a2c:	08005beb 	.word	0x08005beb
 8005a30:	08005ae7 	.word	0x08005ae7
 8005a34:	08005beb 	.word	0x08005beb
 8005a38:	08005beb 	.word	0x08005beb
 8005a3c:	08005beb 	.word	0x08005beb
 8005a40:	08005b27 	.word	0x08005b27
 8005a44:	08005beb 	.word	0x08005beb
 8005a48:	08005beb 	.word	0x08005beb
 8005a4c:	08005beb 	.word	0x08005beb
 8005a50:	08005b69 	.word	0x08005b69
 8005a54:	08005beb 	.word	0x08005beb
 8005a58:	08005beb 	.word	0x08005beb
 8005a5c:	08005beb 	.word	0x08005beb
 8005a60:	08005ba9 	.word	0x08005ba9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68b9      	ldr	r1, [r7, #8]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f000 fa68 	bl	8005f40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	699a      	ldr	r2, [r3, #24]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f042 0208 	orr.w	r2, r2, #8
 8005a7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	699a      	ldr	r2, [r3, #24]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0204 	bic.w	r2, r2, #4
 8005a8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6999      	ldr	r1, [r3, #24]
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	691a      	ldr	r2, [r3, #16]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	619a      	str	r2, [r3, #24]
      break;
 8005aa2:	e0a5      	b.n	8005bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68b9      	ldr	r1, [r7, #8]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 fad8 	bl	8006060 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	699a      	ldr	r2, [r3, #24]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005abe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	699a      	ldr	r2, [r3, #24]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ace:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6999      	ldr	r1, [r3, #24]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	021a      	lsls	r2, r3, #8
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	619a      	str	r2, [r3, #24]
      break;
 8005ae4:	e084      	b.n	8005bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68b9      	ldr	r1, [r7, #8]
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 fb41 	bl	8006174 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	69da      	ldr	r2, [r3, #28]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f042 0208 	orr.w	r2, r2, #8
 8005b00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	69da      	ldr	r2, [r3, #28]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 0204 	bic.w	r2, r2, #4
 8005b10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	69d9      	ldr	r1, [r3, #28]
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	691a      	ldr	r2, [r3, #16]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	430a      	orrs	r2, r1
 8005b22:	61da      	str	r2, [r3, #28]
      break;
 8005b24:	e064      	b.n	8005bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68b9      	ldr	r1, [r7, #8]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f000 fba9 	bl	8006284 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	69da      	ldr	r2, [r3, #28]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	69da      	ldr	r2, [r3, #28]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	69d9      	ldr	r1, [r3, #28]
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	021a      	lsls	r2, r3, #8
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	61da      	str	r2, [r3, #28]
      break;
 8005b66:	e043      	b.n	8005bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68b9      	ldr	r1, [r7, #8]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 fbf2 	bl	8006358 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f042 0208 	orr.w	r2, r2, #8
 8005b82:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f022 0204 	bic.w	r2, r2, #4
 8005b92:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	691a      	ldr	r2, [r3, #16]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005ba6:	e023      	b.n	8005bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68b9      	ldr	r1, [r7, #8]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 fc36 	bl	8006420 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bc2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bd2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	021a      	lsls	r2, r3, #8
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005be8:	e002      	b.n	8005bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	75fb      	strb	r3, [r7, #23]
      break;
 8005bee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3718      	adds	r7, #24
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop

08005c04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d101      	bne.n	8005c20 <HAL_TIM_ConfigClockSource+0x1c>
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	e0dc      	b.n	8005dda <HAL_TIM_ConfigClockSource+0x1d6>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	4b6a      	ldr	r3, [pc, #424]	@ (8005de4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a64      	ldr	r2, [pc, #400]	@ (8005de8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	f000 80a9 	beq.w	8005dae <HAL_TIM_ConfigClockSource+0x1aa>
 8005c5c:	4a62      	ldr	r2, [pc, #392]	@ (8005de8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	f200 80ae 	bhi.w	8005dc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005c64:	4a61      	ldr	r2, [pc, #388]	@ (8005dec <HAL_TIM_ConfigClockSource+0x1e8>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	f000 80a1 	beq.w	8005dae <HAL_TIM_ConfigClockSource+0x1aa>
 8005c6c:	4a5f      	ldr	r2, [pc, #380]	@ (8005dec <HAL_TIM_ConfigClockSource+0x1e8>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	f200 80a6 	bhi.w	8005dc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005c74:	4a5e      	ldr	r2, [pc, #376]	@ (8005df0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	f000 8099 	beq.w	8005dae <HAL_TIM_ConfigClockSource+0x1aa>
 8005c7c:	4a5c      	ldr	r2, [pc, #368]	@ (8005df0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	f200 809e 	bhi.w	8005dc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005c84:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005c88:	f000 8091 	beq.w	8005dae <HAL_TIM_ConfigClockSource+0x1aa>
 8005c8c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005c90:	f200 8096 	bhi.w	8005dc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005c94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c98:	f000 8089 	beq.w	8005dae <HAL_TIM_ConfigClockSource+0x1aa>
 8005c9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ca0:	f200 808e 	bhi.w	8005dc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ca4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ca8:	d03e      	beq.n	8005d28 <HAL_TIM_ConfigClockSource+0x124>
 8005caa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cae:	f200 8087 	bhi.w	8005dc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005cb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cb6:	f000 8086 	beq.w	8005dc6 <HAL_TIM_ConfigClockSource+0x1c2>
 8005cba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cbe:	d87f      	bhi.n	8005dc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005cc0:	2b70      	cmp	r3, #112	@ 0x70
 8005cc2:	d01a      	beq.n	8005cfa <HAL_TIM_ConfigClockSource+0xf6>
 8005cc4:	2b70      	cmp	r3, #112	@ 0x70
 8005cc6:	d87b      	bhi.n	8005dc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005cc8:	2b60      	cmp	r3, #96	@ 0x60
 8005cca:	d050      	beq.n	8005d6e <HAL_TIM_ConfigClockSource+0x16a>
 8005ccc:	2b60      	cmp	r3, #96	@ 0x60
 8005cce:	d877      	bhi.n	8005dc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005cd0:	2b50      	cmp	r3, #80	@ 0x50
 8005cd2:	d03c      	beq.n	8005d4e <HAL_TIM_ConfigClockSource+0x14a>
 8005cd4:	2b50      	cmp	r3, #80	@ 0x50
 8005cd6:	d873      	bhi.n	8005dc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005cd8:	2b40      	cmp	r3, #64	@ 0x40
 8005cda:	d058      	beq.n	8005d8e <HAL_TIM_ConfigClockSource+0x18a>
 8005cdc:	2b40      	cmp	r3, #64	@ 0x40
 8005cde:	d86f      	bhi.n	8005dc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ce0:	2b30      	cmp	r3, #48	@ 0x30
 8005ce2:	d064      	beq.n	8005dae <HAL_TIM_ConfigClockSource+0x1aa>
 8005ce4:	2b30      	cmp	r3, #48	@ 0x30
 8005ce6:	d86b      	bhi.n	8005dc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ce8:	2b20      	cmp	r3, #32
 8005cea:	d060      	beq.n	8005dae <HAL_TIM_ConfigClockSource+0x1aa>
 8005cec:	2b20      	cmp	r3, #32
 8005cee:	d867      	bhi.n	8005dc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d05c      	beq.n	8005dae <HAL_TIM_ConfigClockSource+0x1aa>
 8005cf4:	2b10      	cmp	r3, #16
 8005cf6:	d05a      	beq.n	8005dae <HAL_TIM_ConfigClockSource+0x1aa>
 8005cf8:	e062      	b.n	8005dc0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d0a:	f000 fc6d 	bl	80065e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	609a      	str	r2, [r3, #8]
      break;
 8005d26:	e04f      	b.n	8005dc8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d38:	f000 fc56 	bl	80065e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689a      	ldr	r2, [r3, #8]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d4a:	609a      	str	r2, [r3, #8]
      break;
 8005d4c:	e03c      	b.n	8005dc8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	f000 fbc6 	bl	80064ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2150      	movs	r1, #80	@ 0x50
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 fc20 	bl	80065ac <TIM_ITRx_SetConfig>
      break;
 8005d6c:	e02c      	b.n	8005dc8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	f000 fbe5 	bl	800654a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2160      	movs	r1, #96	@ 0x60
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 fc10 	bl	80065ac <TIM_ITRx_SetConfig>
      break;
 8005d8c:	e01c      	b.n	8005dc8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	f000 fba6 	bl	80064ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2140      	movs	r1, #64	@ 0x40
 8005da6:	4618      	mov	r0, r3
 8005da8:	f000 fc00 	bl	80065ac <TIM_ITRx_SetConfig>
      break;
 8005dac:	e00c      	b.n	8005dc8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4619      	mov	r1, r3
 8005db8:	4610      	mov	r0, r2
 8005dba:	f000 fbf7 	bl	80065ac <TIM_ITRx_SetConfig>
      break;
 8005dbe:	e003      	b.n	8005dc8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8005dc4:	e000      	b.n	8005dc8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005dc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	ffceff88 	.word	0xffceff88
 8005de8:	00100040 	.word	0x00100040
 8005dec:	00100030 	.word	0x00100030
 8005df0:	00100020 	.word	0x00100020

08005df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a46      	ldr	r2, [pc, #280]	@ (8005f20 <TIM_Base_SetConfig+0x12c>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d013      	beq.n	8005e34 <TIM_Base_SetConfig+0x40>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e12:	d00f      	beq.n	8005e34 <TIM_Base_SetConfig+0x40>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a43      	ldr	r2, [pc, #268]	@ (8005f24 <TIM_Base_SetConfig+0x130>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d00b      	beq.n	8005e34 <TIM_Base_SetConfig+0x40>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a42      	ldr	r2, [pc, #264]	@ (8005f28 <TIM_Base_SetConfig+0x134>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d007      	beq.n	8005e34 <TIM_Base_SetConfig+0x40>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a41      	ldr	r2, [pc, #260]	@ (8005f2c <TIM_Base_SetConfig+0x138>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d003      	beq.n	8005e34 <TIM_Base_SetConfig+0x40>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a40      	ldr	r2, [pc, #256]	@ (8005f30 <TIM_Base_SetConfig+0x13c>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d108      	bne.n	8005e46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a35      	ldr	r2, [pc, #212]	@ (8005f20 <TIM_Base_SetConfig+0x12c>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d01f      	beq.n	8005e8e <TIM_Base_SetConfig+0x9a>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e54:	d01b      	beq.n	8005e8e <TIM_Base_SetConfig+0x9a>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a32      	ldr	r2, [pc, #200]	@ (8005f24 <TIM_Base_SetConfig+0x130>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d017      	beq.n	8005e8e <TIM_Base_SetConfig+0x9a>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a31      	ldr	r2, [pc, #196]	@ (8005f28 <TIM_Base_SetConfig+0x134>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d013      	beq.n	8005e8e <TIM_Base_SetConfig+0x9a>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a30      	ldr	r2, [pc, #192]	@ (8005f2c <TIM_Base_SetConfig+0x138>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d00f      	beq.n	8005e8e <TIM_Base_SetConfig+0x9a>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a2f      	ldr	r2, [pc, #188]	@ (8005f30 <TIM_Base_SetConfig+0x13c>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d00b      	beq.n	8005e8e <TIM_Base_SetConfig+0x9a>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a2e      	ldr	r2, [pc, #184]	@ (8005f34 <TIM_Base_SetConfig+0x140>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d007      	beq.n	8005e8e <TIM_Base_SetConfig+0x9a>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a2d      	ldr	r2, [pc, #180]	@ (8005f38 <TIM_Base_SetConfig+0x144>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d003      	beq.n	8005e8e <TIM_Base_SetConfig+0x9a>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a2c      	ldr	r2, [pc, #176]	@ (8005f3c <TIM_Base_SetConfig+0x148>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d108      	bne.n	8005ea0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	689a      	ldr	r2, [r3, #8]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a16      	ldr	r2, [pc, #88]	@ (8005f20 <TIM_Base_SetConfig+0x12c>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d00f      	beq.n	8005eec <TIM_Base_SetConfig+0xf8>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a18      	ldr	r2, [pc, #96]	@ (8005f30 <TIM_Base_SetConfig+0x13c>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d00b      	beq.n	8005eec <TIM_Base_SetConfig+0xf8>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a17      	ldr	r2, [pc, #92]	@ (8005f34 <TIM_Base_SetConfig+0x140>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d007      	beq.n	8005eec <TIM_Base_SetConfig+0xf8>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a16      	ldr	r2, [pc, #88]	@ (8005f38 <TIM_Base_SetConfig+0x144>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d003      	beq.n	8005eec <TIM_Base_SetConfig+0xf8>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a15      	ldr	r2, [pc, #84]	@ (8005f3c <TIM_Base_SetConfig+0x148>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d103      	bne.n	8005ef4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	691a      	ldr	r2, [r3, #16]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d105      	bne.n	8005f12 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	f023 0201 	bic.w	r2, r3, #1
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	611a      	str	r2, [r3, #16]
  }
}
 8005f12:	bf00      	nop
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	40010000 	.word	0x40010000
 8005f24:	40000400 	.word	0x40000400
 8005f28:	40000800 	.word	0x40000800
 8005f2c:	40000c00 	.word	0x40000c00
 8005f30:	40010400 	.word	0x40010400
 8005f34:	40014000 	.word	0x40014000
 8005f38:	40014400 	.word	0x40014400
 8005f3c:	40014800 	.word	0x40014800

08005f40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b087      	sub	sp, #28
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a1b      	ldr	r3, [r3, #32]
 8005f54:	f023 0201 	bic.w	r2, r3, #1
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	4b37      	ldr	r3, [pc, #220]	@ (8006048 <TIM_OC1_SetConfig+0x108>)
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f023 0303 	bic.w	r3, r3, #3
 8005f76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f023 0302 	bic.w	r3, r3, #2
 8005f88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a2d      	ldr	r2, [pc, #180]	@ (800604c <TIM_OC1_SetConfig+0x10c>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d00f      	beq.n	8005fbc <TIM_OC1_SetConfig+0x7c>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a2c      	ldr	r2, [pc, #176]	@ (8006050 <TIM_OC1_SetConfig+0x110>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d00b      	beq.n	8005fbc <TIM_OC1_SetConfig+0x7c>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a2b      	ldr	r2, [pc, #172]	@ (8006054 <TIM_OC1_SetConfig+0x114>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d007      	beq.n	8005fbc <TIM_OC1_SetConfig+0x7c>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a2a      	ldr	r2, [pc, #168]	@ (8006058 <TIM_OC1_SetConfig+0x118>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d003      	beq.n	8005fbc <TIM_OC1_SetConfig+0x7c>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a29      	ldr	r2, [pc, #164]	@ (800605c <TIM_OC1_SetConfig+0x11c>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d10c      	bne.n	8005fd6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	f023 0308 	bic.w	r3, r3, #8
 8005fc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f023 0304 	bic.w	r3, r3, #4
 8005fd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a1c      	ldr	r2, [pc, #112]	@ (800604c <TIM_OC1_SetConfig+0x10c>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d00f      	beq.n	8005ffe <TIM_OC1_SetConfig+0xbe>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a1b      	ldr	r2, [pc, #108]	@ (8006050 <TIM_OC1_SetConfig+0x110>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d00b      	beq.n	8005ffe <TIM_OC1_SetConfig+0xbe>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a1a      	ldr	r2, [pc, #104]	@ (8006054 <TIM_OC1_SetConfig+0x114>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d007      	beq.n	8005ffe <TIM_OC1_SetConfig+0xbe>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a19      	ldr	r2, [pc, #100]	@ (8006058 <TIM_OC1_SetConfig+0x118>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d003      	beq.n	8005ffe <TIM_OC1_SetConfig+0xbe>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a18      	ldr	r2, [pc, #96]	@ (800605c <TIM_OC1_SetConfig+0x11c>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d111      	bne.n	8006022 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800600c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	4313      	orrs	r3, r2
 8006016:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	4313      	orrs	r3, r2
 8006020:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	621a      	str	r2, [r3, #32]
}
 800603c:	bf00      	nop
 800603e:	371c      	adds	r7, #28
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr
 8006048:	fffeff8f 	.word	0xfffeff8f
 800604c:	40010000 	.word	0x40010000
 8006050:	40010400 	.word	0x40010400
 8006054:	40014000 	.word	0x40014000
 8006058:	40014400 	.word	0x40014400
 800605c:	40014800 	.word	0x40014800

08006060 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006060:	b480      	push	{r7}
 8006062:	b087      	sub	sp, #28
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	f023 0210 	bic.w	r2, r3, #16
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	4b34      	ldr	r3, [pc, #208]	@ (800615c <TIM_OC2_SetConfig+0xfc>)
 800608c:	4013      	ands	r3, r2
 800608e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006096:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	021b      	lsls	r3, r3, #8
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	f023 0320 	bic.w	r3, r3, #32
 80060aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	011b      	lsls	r3, r3, #4
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a29      	ldr	r2, [pc, #164]	@ (8006160 <TIM_OC2_SetConfig+0x100>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d003      	beq.n	80060c8 <TIM_OC2_SetConfig+0x68>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a28      	ldr	r2, [pc, #160]	@ (8006164 <TIM_OC2_SetConfig+0x104>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d10d      	bne.n	80060e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	011b      	lsls	r3, r3, #4
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	4313      	orrs	r3, r2
 80060da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a1e      	ldr	r2, [pc, #120]	@ (8006160 <TIM_OC2_SetConfig+0x100>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d00f      	beq.n	800610c <TIM_OC2_SetConfig+0xac>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a1d      	ldr	r2, [pc, #116]	@ (8006164 <TIM_OC2_SetConfig+0x104>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d00b      	beq.n	800610c <TIM_OC2_SetConfig+0xac>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a1c      	ldr	r2, [pc, #112]	@ (8006168 <TIM_OC2_SetConfig+0x108>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d007      	beq.n	800610c <TIM_OC2_SetConfig+0xac>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a1b      	ldr	r2, [pc, #108]	@ (800616c <TIM_OC2_SetConfig+0x10c>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d003      	beq.n	800610c <TIM_OC2_SetConfig+0xac>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a1a      	ldr	r2, [pc, #104]	@ (8006170 <TIM_OC2_SetConfig+0x110>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d113      	bne.n	8006134 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006112:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800611a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	4313      	orrs	r3, r2
 8006126:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	4313      	orrs	r3, r2
 8006132:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	621a      	str	r2, [r3, #32]
}
 800614e:	bf00      	nop
 8006150:	371c      	adds	r7, #28
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	feff8fff 	.word	0xfeff8fff
 8006160:	40010000 	.word	0x40010000
 8006164:	40010400 	.word	0x40010400
 8006168:	40014000 	.word	0x40014000
 800616c:	40014400 	.word	0x40014400
 8006170:	40014800 	.word	0x40014800

08006174 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006174:	b480      	push	{r7}
 8006176:	b087      	sub	sp, #28
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	4b33      	ldr	r3, [pc, #204]	@ (800626c <TIM_OC3_SetConfig+0xf8>)
 80061a0:	4013      	ands	r3, r2
 80061a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f023 0303 	bic.w	r3, r3, #3
 80061aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	021b      	lsls	r3, r3, #8
 80061c4:	697a      	ldr	r2, [r7, #20]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a28      	ldr	r2, [pc, #160]	@ (8006270 <TIM_OC3_SetConfig+0xfc>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d003      	beq.n	80061da <TIM_OC3_SetConfig+0x66>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a27      	ldr	r2, [pc, #156]	@ (8006274 <TIM_OC3_SetConfig+0x100>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d10d      	bne.n	80061f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80061e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	021b      	lsls	r3, r3, #8
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80061f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006270 <TIM_OC3_SetConfig+0xfc>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d00f      	beq.n	800621e <TIM_OC3_SetConfig+0xaa>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a1c      	ldr	r2, [pc, #112]	@ (8006274 <TIM_OC3_SetConfig+0x100>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d00b      	beq.n	800621e <TIM_OC3_SetConfig+0xaa>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a1b      	ldr	r2, [pc, #108]	@ (8006278 <TIM_OC3_SetConfig+0x104>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d007      	beq.n	800621e <TIM_OC3_SetConfig+0xaa>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a1a      	ldr	r2, [pc, #104]	@ (800627c <TIM_OC3_SetConfig+0x108>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d003      	beq.n	800621e <TIM_OC3_SetConfig+0xaa>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a19      	ldr	r2, [pc, #100]	@ (8006280 <TIM_OC3_SetConfig+0x10c>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d113      	bne.n	8006246 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006224:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800622c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	011b      	lsls	r3, r3, #4
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4313      	orrs	r3, r2
 8006238:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	011b      	lsls	r3, r3, #4
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	4313      	orrs	r3, r2
 8006244:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	685a      	ldr	r2, [r3, #4]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	621a      	str	r2, [r3, #32]
}
 8006260:	bf00      	nop
 8006262:	371c      	adds	r7, #28
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	fffeff8f 	.word	0xfffeff8f
 8006270:	40010000 	.word	0x40010000
 8006274:	40010400 	.word	0x40010400
 8006278:	40014000 	.word	0x40014000
 800627c:	40014400 	.word	0x40014400
 8006280:	40014800 	.word	0x40014800

08006284 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006284:	b480      	push	{r7}
 8006286:	b087      	sub	sp, #28
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a1b      	ldr	r3, [r3, #32]
 8006298:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	69db      	ldr	r3, [r3, #28]
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	4b24      	ldr	r3, [pc, #144]	@ (8006340 <TIM_OC4_SetConfig+0xbc>)
 80062b0:	4013      	ands	r3, r2
 80062b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	021b      	lsls	r3, r3, #8
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80062ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	031b      	lsls	r3, r3, #12
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	4313      	orrs	r3, r2
 80062da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a19      	ldr	r2, [pc, #100]	@ (8006344 <TIM_OC4_SetConfig+0xc0>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d00f      	beq.n	8006304 <TIM_OC4_SetConfig+0x80>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a18      	ldr	r2, [pc, #96]	@ (8006348 <TIM_OC4_SetConfig+0xc4>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d00b      	beq.n	8006304 <TIM_OC4_SetConfig+0x80>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a17      	ldr	r2, [pc, #92]	@ (800634c <TIM_OC4_SetConfig+0xc8>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d007      	beq.n	8006304 <TIM_OC4_SetConfig+0x80>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a16      	ldr	r2, [pc, #88]	@ (8006350 <TIM_OC4_SetConfig+0xcc>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d003      	beq.n	8006304 <TIM_OC4_SetConfig+0x80>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a15      	ldr	r2, [pc, #84]	@ (8006354 <TIM_OC4_SetConfig+0xd0>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d109      	bne.n	8006318 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800630a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	019b      	lsls	r3, r3, #6
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	4313      	orrs	r3, r2
 8006316:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	621a      	str	r2, [r3, #32]
}
 8006332:	bf00      	nop
 8006334:	371c      	adds	r7, #28
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	feff8fff 	.word	0xfeff8fff
 8006344:	40010000 	.word	0x40010000
 8006348:	40010400 	.word	0x40010400
 800634c:	40014000 	.word	0x40014000
 8006350:	40014400 	.word	0x40014400
 8006354:	40014800 	.word	0x40014800

08006358 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006358:	b480      	push	{r7}
 800635a:	b087      	sub	sp, #28
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a1b      	ldr	r3, [r3, #32]
 800636c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800637e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	4b21      	ldr	r3, [pc, #132]	@ (8006408 <TIM_OC5_SetConfig+0xb0>)
 8006384:	4013      	ands	r3, r2
 8006386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	4313      	orrs	r3, r2
 8006390:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006398:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	041b      	lsls	r3, r3, #16
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a18      	ldr	r2, [pc, #96]	@ (800640c <TIM_OC5_SetConfig+0xb4>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d00f      	beq.n	80063ce <TIM_OC5_SetConfig+0x76>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a17      	ldr	r2, [pc, #92]	@ (8006410 <TIM_OC5_SetConfig+0xb8>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d00b      	beq.n	80063ce <TIM_OC5_SetConfig+0x76>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a16      	ldr	r2, [pc, #88]	@ (8006414 <TIM_OC5_SetConfig+0xbc>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d007      	beq.n	80063ce <TIM_OC5_SetConfig+0x76>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a15      	ldr	r2, [pc, #84]	@ (8006418 <TIM_OC5_SetConfig+0xc0>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d003      	beq.n	80063ce <TIM_OC5_SetConfig+0x76>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a14      	ldr	r2, [pc, #80]	@ (800641c <TIM_OC5_SetConfig+0xc4>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d109      	bne.n	80063e2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	021b      	lsls	r3, r3, #8
 80063dc:	697a      	ldr	r2, [r7, #20]
 80063de:	4313      	orrs	r3, r2
 80063e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	697a      	ldr	r2, [r7, #20]
 80063e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	685a      	ldr	r2, [r3, #4]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	621a      	str	r2, [r3, #32]
}
 80063fc:	bf00      	nop
 80063fe:	371c      	adds	r7, #28
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr
 8006408:	fffeff8f 	.word	0xfffeff8f
 800640c:	40010000 	.word	0x40010000
 8006410:	40010400 	.word	0x40010400
 8006414:	40014000 	.word	0x40014000
 8006418:	40014400 	.word	0x40014400
 800641c:	40014800 	.word	0x40014800

08006420 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006420:	b480      	push	{r7}
 8006422:	b087      	sub	sp, #28
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a1b      	ldr	r3, [r3, #32]
 8006434:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	4b22      	ldr	r3, [pc, #136]	@ (80064d4 <TIM_OC6_SetConfig+0xb4>)
 800644c:	4013      	ands	r3, r2
 800644e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	021b      	lsls	r3, r3, #8
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	4313      	orrs	r3, r2
 800645a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006462:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	051b      	lsls	r3, r3, #20
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	4313      	orrs	r3, r2
 800646e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a19      	ldr	r2, [pc, #100]	@ (80064d8 <TIM_OC6_SetConfig+0xb8>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d00f      	beq.n	8006498 <TIM_OC6_SetConfig+0x78>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a18      	ldr	r2, [pc, #96]	@ (80064dc <TIM_OC6_SetConfig+0xbc>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d00b      	beq.n	8006498 <TIM_OC6_SetConfig+0x78>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a17      	ldr	r2, [pc, #92]	@ (80064e0 <TIM_OC6_SetConfig+0xc0>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d007      	beq.n	8006498 <TIM_OC6_SetConfig+0x78>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a16      	ldr	r2, [pc, #88]	@ (80064e4 <TIM_OC6_SetConfig+0xc4>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d003      	beq.n	8006498 <TIM_OC6_SetConfig+0x78>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a15      	ldr	r2, [pc, #84]	@ (80064e8 <TIM_OC6_SetConfig+0xc8>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d109      	bne.n	80064ac <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800649e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	695b      	ldr	r3, [r3, #20]
 80064a4:	029b      	lsls	r3, r3, #10
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	621a      	str	r2, [r3, #32]
}
 80064c6:	bf00      	nop
 80064c8:	371c      	adds	r7, #28
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	feff8fff 	.word	0xfeff8fff
 80064d8:	40010000 	.word	0x40010000
 80064dc:	40010400 	.word	0x40010400
 80064e0:	40014000 	.word	0x40014000
 80064e4:	40014400 	.word	0x40014400
 80064e8:	40014800 	.word	0x40014800

080064ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b087      	sub	sp, #28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6a1b      	ldr	r3, [r3, #32]
 80064fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	f023 0201 	bic.w	r2, r3, #1
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	011b      	lsls	r3, r3, #4
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	4313      	orrs	r3, r2
 8006520:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	f023 030a 	bic.w	r3, r3, #10
 8006528:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	4313      	orrs	r3, r2
 8006530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	621a      	str	r2, [r3, #32]
}
 800653e:	bf00      	nop
 8006540:	371c      	adds	r7, #28
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr

0800654a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800654a:	b480      	push	{r7}
 800654c:	b087      	sub	sp, #28
 800654e:	af00      	add	r7, sp, #0
 8006550:	60f8      	str	r0, [r7, #12]
 8006552:	60b9      	str	r1, [r7, #8]
 8006554:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	f023 0210 	bic.w	r2, r3, #16
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006574:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	031b      	lsls	r3, r3, #12
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	4313      	orrs	r3, r2
 800657e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006586:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	011b      	lsls	r3, r3, #4
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	4313      	orrs	r3, r2
 8006590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	621a      	str	r2, [r3, #32]
}
 800659e:	bf00      	nop
 80065a0:	371c      	adds	r7, #28
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
	...

080065ac <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	4b09      	ldr	r3, [pc, #36]	@ (80065e4 <TIM_ITRx_SetConfig+0x38>)
 80065c0:	4013      	ands	r3, r2
 80065c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	f043 0307 	orr.w	r3, r3, #7
 80065ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	609a      	str	r2, [r3, #8]
}
 80065d6:	bf00      	nop
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	ffcfff8f 	.word	0xffcfff8f

080065e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b087      	sub	sp, #28
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
 80065f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006602:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	021a      	lsls	r2, r3, #8
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	431a      	orrs	r2, r3
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	4313      	orrs	r3, r2
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	4313      	orrs	r3, r2
 8006614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	609a      	str	r2, [r3, #8]
}
 800661c:	bf00      	nop
 800661e:	371c      	adds	r7, #28
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006628:	b480      	push	{r7}
 800662a:	b087      	sub	sp, #28
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	f003 031f 	and.w	r3, r3, #31
 800663a:	2201      	movs	r2, #1
 800663c:	fa02 f303 	lsl.w	r3, r2, r3
 8006640:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6a1a      	ldr	r2, [r3, #32]
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	43db      	mvns	r3, r3
 800664a:	401a      	ands	r2, r3
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6a1a      	ldr	r2, [r3, #32]
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	f003 031f 	and.w	r3, r3, #31
 800665a:	6879      	ldr	r1, [r7, #4]
 800665c:	fa01 f303 	lsl.w	r3, r1, r3
 8006660:	431a      	orrs	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	621a      	str	r2, [r3, #32]
}
 8006666:	bf00      	nop
 8006668:	371c      	adds	r7, #28
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
	...

08006674 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006684:	2b01      	cmp	r3, #1
 8006686:	d101      	bne.n	800668c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006688:	2302      	movs	r3, #2
 800668a:	e06d      	b.n	8006768 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2202      	movs	r2, #2
 8006698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a30      	ldr	r2, [pc, #192]	@ (8006774 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d004      	beq.n	80066c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a2f      	ldr	r2, [pc, #188]	@ (8006778 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d108      	bne.n	80066d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80066c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a20      	ldr	r2, [pc, #128]	@ (8006774 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d022      	beq.n	800673c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066fe:	d01d      	beq.n	800673c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a1d      	ldr	r2, [pc, #116]	@ (800677c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d018      	beq.n	800673c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a1c      	ldr	r2, [pc, #112]	@ (8006780 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d013      	beq.n	800673c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a1a      	ldr	r2, [pc, #104]	@ (8006784 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d00e      	beq.n	800673c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a15      	ldr	r2, [pc, #84]	@ (8006778 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d009      	beq.n	800673c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a16      	ldr	r2, [pc, #88]	@ (8006788 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d004      	beq.n	800673c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a15      	ldr	r2, [pc, #84]	@ (800678c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d10c      	bne.n	8006756 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006742:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	4313      	orrs	r3, r2
 800674c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2201      	movs	r2, #1
 800675a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr
 8006774:	40010000 	.word	0x40010000
 8006778:	40010400 	.word	0x40010400
 800677c:	40000400 	.word	0x40000400
 8006780:	40000800 	.word	0x40000800
 8006784:	40000c00 	.word	0x40000c00
 8006788:	40001800 	.word	0x40001800
 800678c:	40014000 	.word	0x40014000

08006790 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d101      	bne.n	80067a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e042      	b.n	8006828 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d106      	bne.n	80067ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f7fa fdc9 	bl	800134c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2224      	movs	r2, #36	@ 0x24
 80067be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f022 0201 	bic.w	r2, r2, #1
 80067d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d002      	beq.n	80067e0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f001 fa44 	bl	8007c68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 fcd9 	bl	8007198 <UART_SetConfig>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d101      	bne.n	80067f0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e01b      	b.n	8006828 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	685a      	ldr	r2, [r3, #4]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80067fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	689a      	ldr	r2, [r3, #8]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800680e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f042 0201 	orr.w	r2, r2, #1
 800681e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f001 fac3 	bl	8007dac <UART_CheckIdleState>
 8006826:	4603      	mov	r3, r0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3708      	adds	r7, #8
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b08a      	sub	sp, #40	@ 0x28
 8006834:	af02      	add	r7, sp, #8
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	603b      	str	r3, [r7, #0]
 800683c:	4613      	mov	r3, r2
 800683e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006846:	2b20      	cmp	r3, #32
 8006848:	d17b      	bne.n	8006942 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d002      	beq.n	8006856 <HAL_UART_Transmit+0x26>
 8006850:	88fb      	ldrh	r3, [r7, #6]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e074      	b.n	8006944 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2221      	movs	r2, #33	@ 0x21
 8006866:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800686a:	f7fa ff91 	bl	8001790 <HAL_GetTick>
 800686e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	88fa      	ldrh	r2, [r7, #6]
 8006874:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	88fa      	ldrh	r2, [r7, #6]
 800687c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006888:	d108      	bne.n	800689c <HAL_UART_Transmit+0x6c>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d104      	bne.n	800689c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006892:	2300      	movs	r3, #0
 8006894:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	61bb      	str	r3, [r7, #24]
 800689a:	e003      	b.n	80068a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068a0:	2300      	movs	r3, #0
 80068a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80068a4:	e030      	b.n	8006908 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	2200      	movs	r2, #0
 80068ae:	2180      	movs	r1, #128	@ 0x80
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f001 fb25 	bl	8007f00 <UART_WaitOnFlagUntilTimeout>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d005      	beq.n	80068c8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2220      	movs	r2, #32
 80068c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e03d      	b.n	8006944 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10b      	bne.n	80068e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	881b      	ldrh	r3, [r3, #0]
 80068d2:	461a      	mov	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068dc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	3302      	adds	r3, #2
 80068e2:	61bb      	str	r3, [r7, #24]
 80068e4:	e007      	b.n	80068f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	781a      	ldrb	r2, [r3, #0]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	3301      	adds	r3, #1
 80068f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	3b01      	subs	r3, #1
 8006900:	b29a      	uxth	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800690e:	b29b      	uxth	r3, r3
 8006910:	2b00      	cmp	r3, #0
 8006912:	d1c8      	bne.n	80068a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	9300      	str	r3, [sp, #0]
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	2200      	movs	r2, #0
 800691c:	2140      	movs	r1, #64	@ 0x40
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f001 faee 	bl	8007f00 <UART_WaitOnFlagUntilTimeout>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d005      	beq.n	8006936 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2220      	movs	r2, #32
 800692e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e006      	b.n	8006944 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2220      	movs	r2, #32
 800693a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800693e:	2300      	movs	r3, #0
 8006940:	e000      	b.n	8006944 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006942:	2302      	movs	r3, #2
  }
}
 8006944:	4618      	mov	r0, r3
 8006946:	3720      	adds	r7, #32
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b08a      	sub	sp, #40	@ 0x28
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	4613      	mov	r3, r2
 8006958:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006960:	2b20      	cmp	r3, #32
 8006962:	d137      	bne.n	80069d4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d002      	beq.n	8006970 <HAL_UART_Receive_IT+0x24>
 800696a:	88fb      	ldrh	r3, [r7, #6]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e030      	b.n	80069d6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a18      	ldr	r2, [pc, #96]	@ (80069e0 <HAL_UART_Receive_IT+0x94>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d01f      	beq.n	80069c4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d018      	beq.n	80069c4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	e853 3f00 	ldrex	r3, [r3]
 800699e:	613b      	str	r3, [r7, #16]
   return(result);
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80069a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	461a      	mov	r2, r3
 80069ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b0:	623b      	str	r3, [r7, #32]
 80069b2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b4:	69f9      	ldr	r1, [r7, #28]
 80069b6:	6a3a      	ldr	r2, [r7, #32]
 80069b8:	e841 2300 	strex	r3, r2, [r1]
 80069bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1e6      	bne.n	8006992 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80069c4:	88fb      	ldrh	r3, [r7, #6]
 80069c6:	461a      	mov	r2, r3
 80069c8:	68b9      	ldr	r1, [r7, #8]
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	f001 fb06 	bl	8007fdc <UART_Start_Receive_IT>
 80069d0:	4603      	mov	r3, r0
 80069d2:	e000      	b.n	80069d6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80069d4:	2302      	movs	r3, #2
  }
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3728      	adds	r7, #40	@ 0x28
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	58000c00 	.word	0x58000c00

080069e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b0ba      	sub	sp, #232	@ 0xe8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	69db      	ldr	r3, [r3, #28]
 80069f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006a0a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006a0e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006a12:	4013      	ands	r3, r2
 8006a14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006a18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d11b      	bne.n	8006a58 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a24:	f003 0320 	and.w	r3, r3, #32
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d015      	beq.n	8006a58 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a30:	f003 0320 	and.w	r3, r3, #32
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d105      	bne.n	8006a44 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d009      	beq.n	8006a58 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 8377 	beq.w	800713c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	4798      	blx	r3
      }
      return;
 8006a56:	e371      	b.n	800713c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006a58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f000 8123 	beq.w	8006ca8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006a62:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006a66:	4b8d      	ldr	r3, [pc, #564]	@ (8006c9c <HAL_UART_IRQHandler+0x2b8>)
 8006a68:	4013      	ands	r3, r2
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d106      	bne.n	8006a7c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006a6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006a72:	4b8b      	ldr	r3, [pc, #556]	@ (8006ca0 <HAL_UART_IRQHandler+0x2bc>)
 8006a74:	4013      	ands	r3, r2
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f000 8116 	beq.w	8006ca8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a80:	f003 0301 	and.w	r3, r3, #1
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d011      	beq.n	8006aac <HAL_UART_IRQHandler+0xc8>
 8006a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00b      	beq.n	8006aac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aa2:	f043 0201 	orr.w	r2, r3, #1
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ab0:	f003 0302 	and.w	r3, r3, #2
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d011      	beq.n	8006adc <HAL_UART_IRQHandler+0xf8>
 8006ab8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006abc:	f003 0301 	and.w	r3, r3, #1
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00b      	beq.n	8006adc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2202      	movs	r2, #2
 8006aca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ad2:	f043 0204 	orr.w	r2, r3, #4
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ae0:	f003 0304 	and.w	r3, r3, #4
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d011      	beq.n	8006b0c <HAL_UART_IRQHandler+0x128>
 8006ae8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00b      	beq.n	8006b0c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2204      	movs	r2, #4
 8006afa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b02:	f043 0202 	orr.w	r2, r3, #2
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b10:	f003 0308 	and.w	r3, r3, #8
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d017      	beq.n	8006b48 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b1c:	f003 0320 	and.w	r3, r3, #32
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d105      	bne.n	8006b30 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006b24:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006b28:	4b5c      	ldr	r3, [pc, #368]	@ (8006c9c <HAL_UART_IRQHandler+0x2b8>)
 8006b2a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00b      	beq.n	8006b48 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2208      	movs	r2, #8
 8006b36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b3e:	f043 0208 	orr.w	r2, r3, #8
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d012      	beq.n	8006b7a <HAL_UART_IRQHandler+0x196>
 8006b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b58:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00c      	beq.n	8006b7a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b70:	f043 0220 	orr.w	r2, r3, #32
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f000 82dd 	beq.w	8007140 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b8a:	f003 0320 	and.w	r3, r3, #32
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d013      	beq.n	8006bba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b96:	f003 0320 	and.w	r3, r3, #32
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d105      	bne.n	8006baa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006b9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d007      	beq.n	8006bba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bc0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bce:	2b40      	cmp	r3, #64	@ 0x40
 8006bd0:	d005      	beq.n	8006bde <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006bd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006bd6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d054      	beq.n	8006c88 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f001 fb1e 	bl	8008220 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bee:	2b40      	cmp	r3, #64	@ 0x40
 8006bf0:	d146      	bne.n	8006c80 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	3308      	adds	r3, #8
 8006bf8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006c00:	e853 3f00 	ldrex	r3, [r3]
 8006c04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006c08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	3308      	adds	r3, #8
 8006c1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006c1e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006c22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006c2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006c2e:	e841 2300 	strex	r3, r2, [r1]
 8006c32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006c36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1d9      	bne.n	8006bf2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d017      	beq.n	8006c78 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c4e:	4a15      	ldr	r2, [pc, #84]	@ (8006ca4 <HAL_UART_IRQHandler+0x2c0>)
 8006c50:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7fb fa03 	bl	8002064 <HAL_DMA_Abort_IT>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d019      	beq.n	8006c98 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006c72:	4610      	mov	r0, r2
 8006c74:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c76:	e00f      	b.n	8006c98 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 fa77 	bl	800716c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c7e:	e00b      	b.n	8006c98 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 fa73 	bl	800716c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c86:	e007      	b.n	8006c98 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 fa6f 	bl	800716c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006c96:	e253      	b.n	8007140 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c98:	bf00      	nop
    return;
 8006c9a:	e251      	b.n	8007140 <HAL_UART_IRQHandler+0x75c>
 8006c9c:	10000001 	.word	0x10000001
 8006ca0:	04000120 	.word	0x04000120
 8006ca4:	080082ed 	.word	0x080082ed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	f040 81e7 	bne.w	8007080 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cb6:	f003 0310 	and.w	r3, r3, #16
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f000 81e0 	beq.w	8007080 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cc4:	f003 0310 	and.w	r3, r3, #16
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f000 81d9 	beq.w	8007080 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2210      	movs	r2, #16
 8006cd4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ce0:	2b40      	cmp	r3, #64	@ 0x40
 8006ce2:	f040 8151 	bne.w	8006f88 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a96      	ldr	r2, [pc, #600]	@ (8006f48 <HAL_UART_IRQHandler+0x564>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d068      	beq.n	8006dc6 <HAL_UART_IRQHandler+0x3e2>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a93      	ldr	r2, [pc, #588]	@ (8006f4c <HAL_UART_IRQHandler+0x568>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d061      	beq.n	8006dc6 <HAL_UART_IRQHandler+0x3e2>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a91      	ldr	r2, [pc, #580]	@ (8006f50 <HAL_UART_IRQHandler+0x56c>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d05a      	beq.n	8006dc6 <HAL_UART_IRQHandler+0x3e2>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a8e      	ldr	r2, [pc, #568]	@ (8006f54 <HAL_UART_IRQHandler+0x570>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d053      	beq.n	8006dc6 <HAL_UART_IRQHandler+0x3e2>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a8c      	ldr	r2, [pc, #560]	@ (8006f58 <HAL_UART_IRQHandler+0x574>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d04c      	beq.n	8006dc6 <HAL_UART_IRQHandler+0x3e2>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a89      	ldr	r2, [pc, #548]	@ (8006f5c <HAL_UART_IRQHandler+0x578>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d045      	beq.n	8006dc6 <HAL_UART_IRQHandler+0x3e2>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a87      	ldr	r2, [pc, #540]	@ (8006f60 <HAL_UART_IRQHandler+0x57c>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d03e      	beq.n	8006dc6 <HAL_UART_IRQHandler+0x3e2>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a84      	ldr	r2, [pc, #528]	@ (8006f64 <HAL_UART_IRQHandler+0x580>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d037      	beq.n	8006dc6 <HAL_UART_IRQHandler+0x3e2>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a82      	ldr	r2, [pc, #520]	@ (8006f68 <HAL_UART_IRQHandler+0x584>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d030      	beq.n	8006dc6 <HAL_UART_IRQHandler+0x3e2>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a7f      	ldr	r2, [pc, #508]	@ (8006f6c <HAL_UART_IRQHandler+0x588>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d029      	beq.n	8006dc6 <HAL_UART_IRQHandler+0x3e2>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a7d      	ldr	r2, [pc, #500]	@ (8006f70 <HAL_UART_IRQHandler+0x58c>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d022      	beq.n	8006dc6 <HAL_UART_IRQHandler+0x3e2>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a7a      	ldr	r2, [pc, #488]	@ (8006f74 <HAL_UART_IRQHandler+0x590>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d01b      	beq.n	8006dc6 <HAL_UART_IRQHandler+0x3e2>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a78      	ldr	r2, [pc, #480]	@ (8006f78 <HAL_UART_IRQHandler+0x594>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d014      	beq.n	8006dc6 <HAL_UART_IRQHandler+0x3e2>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a75      	ldr	r2, [pc, #468]	@ (8006f7c <HAL_UART_IRQHandler+0x598>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d00d      	beq.n	8006dc6 <HAL_UART_IRQHandler+0x3e2>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a73      	ldr	r2, [pc, #460]	@ (8006f80 <HAL_UART_IRQHandler+0x59c>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d006      	beq.n	8006dc6 <HAL_UART_IRQHandler+0x3e2>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a70      	ldr	r2, [pc, #448]	@ (8006f84 <HAL_UART_IRQHandler+0x5a0>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d106      	bne.n	8006dd4 <HAL_UART_IRQHandler+0x3f0>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	e005      	b.n	8006de0 <HAL_UART_IRQHandler+0x3fc>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006de4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 81ab 	beq.w	8007144 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006df4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	f080 81a3 	bcs.w	8007144 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e04:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e14:	f000 8087 	beq.w	8006f26 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006e24:	e853 3f00 	ldrex	r3, [r3]
 8006e28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006e2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006e30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006e42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006e46:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006e4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006e52:	e841 2300 	strex	r3, r2, [r1]
 8006e56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006e5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1da      	bne.n	8006e18 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	3308      	adds	r3, #8
 8006e68:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e6c:	e853 3f00 	ldrex	r3, [r3]
 8006e70:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006e72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e74:	f023 0301 	bic.w	r3, r3, #1
 8006e78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	3308      	adds	r3, #8
 8006e82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006e86:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006e8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006e8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006e92:	e841 2300 	strex	r3, r2, [r1]
 8006e96:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006e98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d1e1      	bne.n	8006e62 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	3308      	adds	r3, #8
 8006ea4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ea8:	e853 3f00 	ldrex	r3, [r3]
 8006eac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006eae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006eb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006eb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	3308      	adds	r3, #8
 8006ebe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006ec2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006ec4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006ec8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006eca:	e841 2300 	strex	r3, r2, [r1]
 8006ece:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006ed0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1e3      	bne.n	8006e9e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2220      	movs	r2, #32
 8006eda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006eec:	e853 3f00 	ldrex	r3, [r3]
 8006ef0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ef2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ef4:	f023 0310 	bic.w	r3, r3, #16
 8006ef8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	461a      	mov	r2, r3
 8006f02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f08:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f0e:	e841 2300 	strex	r3, r2, [r1]
 8006f12:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006f14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1e4      	bne.n	8006ee4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7fa fd81 	bl	8001a28 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2202      	movs	r2, #2
 8006f2a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	4619      	mov	r1, r3
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 f91d 	bl	8007180 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f46:	e0fd      	b.n	8007144 <HAL_UART_IRQHandler+0x760>
 8006f48:	40020010 	.word	0x40020010
 8006f4c:	40020028 	.word	0x40020028
 8006f50:	40020040 	.word	0x40020040
 8006f54:	40020058 	.word	0x40020058
 8006f58:	40020070 	.word	0x40020070
 8006f5c:	40020088 	.word	0x40020088
 8006f60:	400200a0 	.word	0x400200a0
 8006f64:	400200b8 	.word	0x400200b8
 8006f68:	40020410 	.word	0x40020410
 8006f6c:	40020428 	.word	0x40020428
 8006f70:	40020440 	.word	0x40020440
 8006f74:	40020458 	.word	0x40020458
 8006f78:	40020470 	.word	0x40020470
 8006f7c:	40020488 	.word	0x40020488
 8006f80:	400204a0 	.word	0x400204a0
 8006f84:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 80cf 	beq.w	8007148 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8006faa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f000 80ca 	beq.w	8007148 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fbc:	e853 3f00 	ldrex	r3, [r3]
 8006fc0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fc8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006fd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fd8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fda:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006fdc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fde:	e841 2300 	strex	r3, r2, [r1]
 8006fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006fe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1e4      	bne.n	8006fb4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	3308      	adds	r3, #8
 8006ff0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff4:	e853 3f00 	ldrex	r3, [r3]
 8006ff8:	623b      	str	r3, [r7, #32]
   return(result);
 8006ffa:	6a3a      	ldr	r2, [r7, #32]
 8006ffc:	4b55      	ldr	r3, [pc, #340]	@ (8007154 <HAL_UART_IRQHandler+0x770>)
 8006ffe:	4013      	ands	r3, r2
 8007000:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	3308      	adds	r3, #8
 800700a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800700e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007010:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007012:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007014:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007016:	e841 2300 	strex	r3, r2, [r1]
 800701a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800701c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1e3      	bne.n	8006fea <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2220      	movs	r2, #32
 8007026:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	e853 3f00 	ldrex	r3, [r3]
 8007042:	60fb      	str	r3, [r7, #12]
   return(result);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f023 0310 	bic.w	r3, r3, #16
 800704a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	461a      	mov	r2, r3
 8007054:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007058:	61fb      	str	r3, [r7, #28]
 800705a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705c:	69b9      	ldr	r1, [r7, #24]
 800705e:	69fa      	ldr	r2, [r7, #28]
 8007060:	e841 2300 	strex	r3, r2, [r1]
 8007064:	617b      	str	r3, [r7, #20]
   return(result);
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1e4      	bne.n	8007036 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2202      	movs	r2, #2
 8007070:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007072:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007076:	4619      	mov	r1, r3
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 f881 	bl	8007180 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800707e:	e063      	b.n	8007148 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007084:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00e      	beq.n	80070aa <HAL_UART_IRQHandler+0x6c6>
 800708c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007090:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d008      	beq.n	80070aa <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80070a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f001 fe80 	bl	8008da8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80070a8:	e051      	b.n	800714e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80070aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d014      	beq.n	80070e0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80070b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d105      	bne.n	80070ce <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80070c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d008      	beq.n	80070e0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d03a      	beq.n	800714c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	4798      	blx	r3
    }
    return;
 80070de:	e035      	b.n	800714c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80070e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d009      	beq.n	8007100 <HAL_UART_IRQHandler+0x71c>
 80070ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d003      	beq.n	8007100 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f001 f90d 	bl	8008318 <UART_EndTransmit_IT>
    return;
 80070fe:	e026      	b.n	800714e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007104:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007108:	2b00      	cmp	r3, #0
 800710a:	d009      	beq.n	8007120 <HAL_UART_IRQHandler+0x73c>
 800710c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007110:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d003      	beq.n	8007120 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f001 fe59 	bl	8008dd0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800711e:	e016      	b.n	800714e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007124:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007128:	2b00      	cmp	r3, #0
 800712a:	d010      	beq.n	800714e <HAL_UART_IRQHandler+0x76a>
 800712c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007130:	2b00      	cmp	r3, #0
 8007132:	da0c      	bge.n	800714e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f001 fe41 	bl	8008dbc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800713a:	e008      	b.n	800714e <HAL_UART_IRQHandler+0x76a>
      return;
 800713c:	bf00      	nop
 800713e:	e006      	b.n	800714e <HAL_UART_IRQHandler+0x76a>
    return;
 8007140:	bf00      	nop
 8007142:	e004      	b.n	800714e <HAL_UART_IRQHandler+0x76a>
      return;
 8007144:	bf00      	nop
 8007146:	e002      	b.n	800714e <HAL_UART_IRQHandler+0x76a>
      return;
 8007148:	bf00      	nop
 800714a:	e000      	b.n	800714e <HAL_UART_IRQHandler+0x76a>
    return;
 800714c:	bf00      	nop
  }
}
 800714e:	37e8      	adds	r7, #232	@ 0xe8
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	effffffe 	.word	0xeffffffe

08007158 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007160:	bf00      	nop
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007174:	bf00      	nop
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	460b      	mov	r3, r1
 800718a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800719c:	b092      	sub	sp, #72	@ 0x48
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071a2:	2300      	movs	r3, #0
 80071a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	689a      	ldr	r2, [r3, #8]
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	431a      	orrs	r2, r3
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	431a      	orrs	r2, r3
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	69db      	ldr	r3, [r3, #28]
 80071bc:	4313      	orrs	r3, r2
 80071be:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	4bbe      	ldr	r3, [pc, #760]	@ (80074c0 <UART_SetConfig+0x328>)
 80071c8:	4013      	ands	r3, r2
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	6812      	ldr	r2, [r2, #0]
 80071ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80071d0:	430b      	orrs	r3, r1
 80071d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	68da      	ldr	r2, [r3, #12]
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	430a      	orrs	r2, r1
 80071e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4ab3      	ldr	r2, [pc, #716]	@ (80074c4 <UART_SetConfig+0x32c>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d004      	beq.n	8007204 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007200:	4313      	orrs	r3, r2
 8007202:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	689a      	ldr	r2, [r3, #8]
 800720a:	4baf      	ldr	r3, [pc, #700]	@ (80074c8 <UART_SetConfig+0x330>)
 800720c:	4013      	ands	r3, r2
 800720e:	697a      	ldr	r2, [r7, #20]
 8007210:	6812      	ldr	r2, [r2, #0]
 8007212:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007214:	430b      	orrs	r3, r1
 8007216:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800721e:	f023 010f 	bic.w	r1, r3, #15
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	430a      	orrs	r2, r1
 800722c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4aa6      	ldr	r2, [pc, #664]	@ (80074cc <UART_SetConfig+0x334>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d177      	bne.n	8007328 <UART_SetConfig+0x190>
 8007238:	4ba5      	ldr	r3, [pc, #660]	@ (80074d0 <UART_SetConfig+0x338>)
 800723a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800723c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007240:	2b28      	cmp	r3, #40	@ 0x28
 8007242:	d86d      	bhi.n	8007320 <UART_SetConfig+0x188>
 8007244:	a201      	add	r2, pc, #4	@ (adr r2, 800724c <UART_SetConfig+0xb4>)
 8007246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724a:	bf00      	nop
 800724c:	080072f1 	.word	0x080072f1
 8007250:	08007321 	.word	0x08007321
 8007254:	08007321 	.word	0x08007321
 8007258:	08007321 	.word	0x08007321
 800725c:	08007321 	.word	0x08007321
 8007260:	08007321 	.word	0x08007321
 8007264:	08007321 	.word	0x08007321
 8007268:	08007321 	.word	0x08007321
 800726c:	080072f9 	.word	0x080072f9
 8007270:	08007321 	.word	0x08007321
 8007274:	08007321 	.word	0x08007321
 8007278:	08007321 	.word	0x08007321
 800727c:	08007321 	.word	0x08007321
 8007280:	08007321 	.word	0x08007321
 8007284:	08007321 	.word	0x08007321
 8007288:	08007321 	.word	0x08007321
 800728c:	08007301 	.word	0x08007301
 8007290:	08007321 	.word	0x08007321
 8007294:	08007321 	.word	0x08007321
 8007298:	08007321 	.word	0x08007321
 800729c:	08007321 	.word	0x08007321
 80072a0:	08007321 	.word	0x08007321
 80072a4:	08007321 	.word	0x08007321
 80072a8:	08007321 	.word	0x08007321
 80072ac:	08007309 	.word	0x08007309
 80072b0:	08007321 	.word	0x08007321
 80072b4:	08007321 	.word	0x08007321
 80072b8:	08007321 	.word	0x08007321
 80072bc:	08007321 	.word	0x08007321
 80072c0:	08007321 	.word	0x08007321
 80072c4:	08007321 	.word	0x08007321
 80072c8:	08007321 	.word	0x08007321
 80072cc:	08007311 	.word	0x08007311
 80072d0:	08007321 	.word	0x08007321
 80072d4:	08007321 	.word	0x08007321
 80072d8:	08007321 	.word	0x08007321
 80072dc:	08007321 	.word	0x08007321
 80072e0:	08007321 	.word	0x08007321
 80072e4:	08007321 	.word	0x08007321
 80072e8:	08007321 	.word	0x08007321
 80072ec:	08007319 	.word	0x08007319
 80072f0:	2301      	movs	r3, #1
 80072f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072f6:	e222      	b.n	800773e <UART_SetConfig+0x5a6>
 80072f8:	2304      	movs	r3, #4
 80072fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072fe:	e21e      	b.n	800773e <UART_SetConfig+0x5a6>
 8007300:	2308      	movs	r3, #8
 8007302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007306:	e21a      	b.n	800773e <UART_SetConfig+0x5a6>
 8007308:	2310      	movs	r3, #16
 800730a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800730e:	e216      	b.n	800773e <UART_SetConfig+0x5a6>
 8007310:	2320      	movs	r3, #32
 8007312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007316:	e212      	b.n	800773e <UART_SetConfig+0x5a6>
 8007318:	2340      	movs	r3, #64	@ 0x40
 800731a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800731e:	e20e      	b.n	800773e <UART_SetConfig+0x5a6>
 8007320:	2380      	movs	r3, #128	@ 0x80
 8007322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007326:	e20a      	b.n	800773e <UART_SetConfig+0x5a6>
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a69      	ldr	r2, [pc, #420]	@ (80074d4 <UART_SetConfig+0x33c>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d130      	bne.n	8007394 <UART_SetConfig+0x1fc>
 8007332:	4b67      	ldr	r3, [pc, #412]	@ (80074d0 <UART_SetConfig+0x338>)
 8007334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007336:	f003 0307 	and.w	r3, r3, #7
 800733a:	2b05      	cmp	r3, #5
 800733c:	d826      	bhi.n	800738c <UART_SetConfig+0x1f4>
 800733e:	a201      	add	r2, pc, #4	@ (adr r2, 8007344 <UART_SetConfig+0x1ac>)
 8007340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007344:	0800735d 	.word	0x0800735d
 8007348:	08007365 	.word	0x08007365
 800734c:	0800736d 	.word	0x0800736d
 8007350:	08007375 	.word	0x08007375
 8007354:	0800737d 	.word	0x0800737d
 8007358:	08007385 	.word	0x08007385
 800735c:	2300      	movs	r3, #0
 800735e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007362:	e1ec      	b.n	800773e <UART_SetConfig+0x5a6>
 8007364:	2304      	movs	r3, #4
 8007366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800736a:	e1e8      	b.n	800773e <UART_SetConfig+0x5a6>
 800736c:	2308      	movs	r3, #8
 800736e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007372:	e1e4      	b.n	800773e <UART_SetConfig+0x5a6>
 8007374:	2310      	movs	r3, #16
 8007376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800737a:	e1e0      	b.n	800773e <UART_SetConfig+0x5a6>
 800737c:	2320      	movs	r3, #32
 800737e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007382:	e1dc      	b.n	800773e <UART_SetConfig+0x5a6>
 8007384:	2340      	movs	r3, #64	@ 0x40
 8007386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800738a:	e1d8      	b.n	800773e <UART_SetConfig+0x5a6>
 800738c:	2380      	movs	r3, #128	@ 0x80
 800738e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007392:	e1d4      	b.n	800773e <UART_SetConfig+0x5a6>
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a4f      	ldr	r2, [pc, #316]	@ (80074d8 <UART_SetConfig+0x340>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d130      	bne.n	8007400 <UART_SetConfig+0x268>
 800739e:	4b4c      	ldr	r3, [pc, #304]	@ (80074d0 <UART_SetConfig+0x338>)
 80073a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073a2:	f003 0307 	and.w	r3, r3, #7
 80073a6:	2b05      	cmp	r3, #5
 80073a8:	d826      	bhi.n	80073f8 <UART_SetConfig+0x260>
 80073aa:	a201      	add	r2, pc, #4	@ (adr r2, 80073b0 <UART_SetConfig+0x218>)
 80073ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b0:	080073c9 	.word	0x080073c9
 80073b4:	080073d1 	.word	0x080073d1
 80073b8:	080073d9 	.word	0x080073d9
 80073bc:	080073e1 	.word	0x080073e1
 80073c0:	080073e9 	.word	0x080073e9
 80073c4:	080073f1 	.word	0x080073f1
 80073c8:	2300      	movs	r3, #0
 80073ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ce:	e1b6      	b.n	800773e <UART_SetConfig+0x5a6>
 80073d0:	2304      	movs	r3, #4
 80073d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073d6:	e1b2      	b.n	800773e <UART_SetConfig+0x5a6>
 80073d8:	2308      	movs	r3, #8
 80073da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073de:	e1ae      	b.n	800773e <UART_SetConfig+0x5a6>
 80073e0:	2310      	movs	r3, #16
 80073e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073e6:	e1aa      	b.n	800773e <UART_SetConfig+0x5a6>
 80073e8:	2320      	movs	r3, #32
 80073ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ee:	e1a6      	b.n	800773e <UART_SetConfig+0x5a6>
 80073f0:	2340      	movs	r3, #64	@ 0x40
 80073f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073f6:	e1a2      	b.n	800773e <UART_SetConfig+0x5a6>
 80073f8:	2380      	movs	r3, #128	@ 0x80
 80073fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073fe:	e19e      	b.n	800773e <UART_SetConfig+0x5a6>
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a35      	ldr	r2, [pc, #212]	@ (80074dc <UART_SetConfig+0x344>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d130      	bne.n	800746c <UART_SetConfig+0x2d4>
 800740a:	4b31      	ldr	r3, [pc, #196]	@ (80074d0 <UART_SetConfig+0x338>)
 800740c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800740e:	f003 0307 	and.w	r3, r3, #7
 8007412:	2b05      	cmp	r3, #5
 8007414:	d826      	bhi.n	8007464 <UART_SetConfig+0x2cc>
 8007416:	a201      	add	r2, pc, #4	@ (adr r2, 800741c <UART_SetConfig+0x284>)
 8007418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741c:	08007435 	.word	0x08007435
 8007420:	0800743d 	.word	0x0800743d
 8007424:	08007445 	.word	0x08007445
 8007428:	0800744d 	.word	0x0800744d
 800742c:	08007455 	.word	0x08007455
 8007430:	0800745d 	.word	0x0800745d
 8007434:	2300      	movs	r3, #0
 8007436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800743a:	e180      	b.n	800773e <UART_SetConfig+0x5a6>
 800743c:	2304      	movs	r3, #4
 800743e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007442:	e17c      	b.n	800773e <UART_SetConfig+0x5a6>
 8007444:	2308      	movs	r3, #8
 8007446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800744a:	e178      	b.n	800773e <UART_SetConfig+0x5a6>
 800744c:	2310      	movs	r3, #16
 800744e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007452:	e174      	b.n	800773e <UART_SetConfig+0x5a6>
 8007454:	2320      	movs	r3, #32
 8007456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800745a:	e170      	b.n	800773e <UART_SetConfig+0x5a6>
 800745c:	2340      	movs	r3, #64	@ 0x40
 800745e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007462:	e16c      	b.n	800773e <UART_SetConfig+0x5a6>
 8007464:	2380      	movs	r3, #128	@ 0x80
 8007466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800746a:	e168      	b.n	800773e <UART_SetConfig+0x5a6>
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a1b      	ldr	r2, [pc, #108]	@ (80074e0 <UART_SetConfig+0x348>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d142      	bne.n	80074fc <UART_SetConfig+0x364>
 8007476:	4b16      	ldr	r3, [pc, #88]	@ (80074d0 <UART_SetConfig+0x338>)
 8007478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800747a:	f003 0307 	and.w	r3, r3, #7
 800747e:	2b05      	cmp	r3, #5
 8007480:	d838      	bhi.n	80074f4 <UART_SetConfig+0x35c>
 8007482:	a201      	add	r2, pc, #4	@ (adr r2, 8007488 <UART_SetConfig+0x2f0>)
 8007484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007488:	080074a1 	.word	0x080074a1
 800748c:	080074a9 	.word	0x080074a9
 8007490:	080074b1 	.word	0x080074b1
 8007494:	080074b9 	.word	0x080074b9
 8007498:	080074e5 	.word	0x080074e5
 800749c:	080074ed 	.word	0x080074ed
 80074a0:	2300      	movs	r3, #0
 80074a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074a6:	e14a      	b.n	800773e <UART_SetConfig+0x5a6>
 80074a8:	2304      	movs	r3, #4
 80074aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ae:	e146      	b.n	800773e <UART_SetConfig+0x5a6>
 80074b0:	2308      	movs	r3, #8
 80074b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074b6:	e142      	b.n	800773e <UART_SetConfig+0x5a6>
 80074b8:	2310      	movs	r3, #16
 80074ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074be:	e13e      	b.n	800773e <UART_SetConfig+0x5a6>
 80074c0:	cfff69f3 	.word	0xcfff69f3
 80074c4:	58000c00 	.word	0x58000c00
 80074c8:	11fff4ff 	.word	0x11fff4ff
 80074cc:	40011000 	.word	0x40011000
 80074d0:	58024400 	.word	0x58024400
 80074d4:	40004400 	.word	0x40004400
 80074d8:	40004800 	.word	0x40004800
 80074dc:	40004c00 	.word	0x40004c00
 80074e0:	40005000 	.word	0x40005000
 80074e4:	2320      	movs	r3, #32
 80074e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ea:	e128      	b.n	800773e <UART_SetConfig+0x5a6>
 80074ec:	2340      	movs	r3, #64	@ 0x40
 80074ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074f2:	e124      	b.n	800773e <UART_SetConfig+0x5a6>
 80074f4:	2380      	movs	r3, #128	@ 0x80
 80074f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074fa:	e120      	b.n	800773e <UART_SetConfig+0x5a6>
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4acb      	ldr	r2, [pc, #812]	@ (8007830 <UART_SetConfig+0x698>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d176      	bne.n	80075f4 <UART_SetConfig+0x45c>
 8007506:	4bcb      	ldr	r3, [pc, #812]	@ (8007834 <UART_SetConfig+0x69c>)
 8007508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800750a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800750e:	2b28      	cmp	r3, #40	@ 0x28
 8007510:	d86c      	bhi.n	80075ec <UART_SetConfig+0x454>
 8007512:	a201      	add	r2, pc, #4	@ (adr r2, 8007518 <UART_SetConfig+0x380>)
 8007514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007518:	080075bd 	.word	0x080075bd
 800751c:	080075ed 	.word	0x080075ed
 8007520:	080075ed 	.word	0x080075ed
 8007524:	080075ed 	.word	0x080075ed
 8007528:	080075ed 	.word	0x080075ed
 800752c:	080075ed 	.word	0x080075ed
 8007530:	080075ed 	.word	0x080075ed
 8007534:	080075ed 	.word	0x080075ed
 8007538:	080075c5 	.word	0x080075c5
 800753c:	080075ed 	.word	0x080075ed
 8007540:	080075ed 	.word	0x080075ed
 8007544:	080075ed 	.word	0x080075ed
 8007548:	080075ed 	.word	0x080075ed
 800754c:	080075ed 	.word	0x080075ed
 8007550:	080075ed 	.word	0x080075ed
 8007554:	080075ed 	.word	0x080075ed
 8007558:	080075cd 	.word	0x080075cd
 800755c:	080075ed 	.word	0x080075ed
 8007560:	080075ed 	.word	0x080075ed
 8007564:	080075ed 	.word	0x080075ed
 8007568:	080075ed 	.word	0x080075ed
 800756c:	080075ed 	.word	0x080075ed
 8007570:	080075ed 	.word	0x080075ed
 8007574:	080075ed 	.word	0x080075ed
 8007578:	080075d5 	.word	0x080075d5
 800757c:	080075ed 	.word	0x080075ed
 8007580:	080075ed 	.word	0x080075ed
 8007584:	080075ed 	.word	0x080075ed
 8007588:	080075ed 	.word	0x080075ed
 800758c:	080075ed 	.word	0x080075ed
 8007590:	080075ed 	.word	0x080075ed
 8007594:	080075ed 	.word	0x080075ed
 8007598:	080075dd 	.word	0x080075dd
 800759c:	080075ed 	.word	0x080075ed
 80075a0:	080075ed 	.word	0x080075ed
 80075a4:	080075ed 	.word	0x080075ed
 80075a8:	080075ed 	.word	0x080075ed
 80075ac:	080075ed 	.word	0x080075ed
 80075b0:	080075ed 	.word	0x080075ed
 80075b4:	080075ed 	.word	0x080075ed
 80075b8:	080075e5 	.word	0x080075e5
 80075bc:	2301      	movs	r3, #1
 80075be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075c2:	e0bc      	b.n	800773e <UART_SetConfig+0x5a6>
 80075c4:	2304      	movs	r3, #4
 80075c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ca:	e0b8      	b.n	800773e <UART_SetConfig+0x5a6>
 80075cc:	2308      	movs	r3, #8
 80075ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075d2:	e0b4      	b.n	800773e <UART_SetConfig+0x5a6>
 80075d4:	2310      	movs	r3, #16
 80075d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075da:	e0b0      	b.n	800773e <UART_SetConfig+0x5a6>
 80075dc:	2320      	movs	r3, #32
 80075de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075e2:	e0ac      	b.n	800773e <UART_SetConfig+0x5a6>
 80075e4:	2340      	movs	r3, #64	@ 0x40
 80075e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ea:	e0a8      	b.n	800773e <UART_SetConfig+0x5a6>
 80075ec:	2380      	movs	r3, #128	@ 0x80
 80075ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075f2:	e0a4      	b.n	800773e <UART_SetConfig+0x5a6>
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a8f      	ldr	r2, [pc, #572]	@ (8007838 <UART_SetConfig+0x6a0>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d130      	bne.n	8007660 <UART_SetConfig+0x4c8>
 80075fe:	4b8d      	ldr	r3, [pc, #564]	@ (8007834 <UART_SetConfig+0x69c>)
 8007600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007602:	f003 0307 	and.w	r3, r3, #7
 8007606:	2b05      	cmp	r3, #5
 8007608:	d826      	bhi.n	8007658 <UART_SetConfig+0x4c0>
 800760a:	a201      	add	r2, pc, #4	@ (adr r2, 8007610 <UART_SetConfig+0x478>)
 800760c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007610:	08007629 	.word	0x08007629
 8007614:	08007631 	.word	0x08007631
 8007618:	08007639 	.word	0x08007639
 800761c:	08007641 	.word	0x08007641
 8007620:	08007649 	.word	0x08007649
 8007624:	08007651 	.word	0x08007651
 8007628:	2300      	movs	r3, #0
 800762a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800762e:	e086      	b.n	800773e <UART_SetConfig+0x5a6>
 8007630:	2304      	movs	r3, #4
 8007632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007636:	e082      	b.n	800773e <UART_SetConfig+0x5a6>
 8007638:	2308      	movs	r3, #8
 800763a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800763e:	e07e      	b.n	800773e <UART_SetConfig+0x5a6>
 8007640:	2310      	movs	r3, #16
 8007642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007646:	e07a      	b.n	800773e <UART_SetConfig+0x5a6>
 8007648:	2320      	movs	r3, #32
 800764a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800764e:	e076      	b.n	800773e <UART_SetConfig+0x5a6>
 8007650:	2340      	movs	r3, #64	@ 0x40
 8007652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007656:	e072      	b.n	800773e <UART_SetConfig+0x5a6>
 8007658:	2380      	movs	r3, #128	@ 0x80
 800765a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800765e:	e06e      	b.n	800773e <UART_SetConfig+0x5a6>
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a75      	ldr	r2, [pc, #468]	@ (800783c <UART_SetConfig+0x6a4>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d130      	bne.n	80076cc <UART_SetConfig+0x534>
 800766a:	4b72      	ldr	r3, [pc, #456]	@ (8007834 <UART_SetConfig+0x69c>)
 800766c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800766e:	f003 0307 	and.w	r3, r3, #7
 8007672:	2b05      	cmp	r3, #5
 8007674:	d826      	bhi.n	80076c4 <UART_SetConfig+0x52c>
 8007676:	a201      	add	r2, pc, #4	@ (adr r2, 800767c <UART_SetConfig+0x4e4>)
 8007678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767c:	08007695 	.word	0x08007695
 8007680:	0800769d 	.word	0x0800769d
 8007684:	080076a5 	.word	0x080076a5
 8007688:	080076ad 	.word	0x080076ad
 800768c:	080076b5 	.word	0x080076b5
 8007690:	080076bd 	.word	0x080076bd
 8007694:	2300      	movs	r3, #0
 8007696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800769a:	e050      	b.n	800773e <UART_SetConfig+0x5a6>
 800769c:	2304      	movs	r3, #4
 800769e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076a2:	e04c      	b.n	800773e <UART_SetConfig+0x5a6>
 80076a4:	2308      	movs	r3, #8
 80076a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076aa:	e048      	b.n	800773e <UART_SetConfig+0x5a6>
 80076ac:	2310      	movs	r3, #16
 80076ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076b2:	e044      	b.n	800773e <UART_SetConfig+0x5a6>
 80076b4:	2320      	movs	r3, #32
 80076b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ba:	e040      	b.n	800773e <UART_SetConfig+0x5a6>
 80076bc:	2340      	movs	r3, #64	@ 0x40
 80076be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076c2:	e03c      	b.n	800773e <UART_SetConfig+0x5a6>
 80076c4:	2380      	movs	r3, #128	@ 0x80
 80076c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ca:	e038      	b.n	800773e <UART_SetConfig+0x5a6>
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a5b      	ldr	r2, [pc, #364]	@ (8007840 <UART_SetConfig+0x6a8>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d130      	bne.n	8007738 <UART_SetConfig+0x5a0>
 80076d6:	4b57      	ldr	r3, [pc, #348]	@ (8007834 <UART_SetConfig+0x69c>)
 80076d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076da:	f003 0307 	and.w	r3, r3, #7
 80076de:	2b05      	cmp	r3, #5
 80076e0:	d826      	bhi.n	8007730 <UART_SetConfig+0x598>
 80076e2:	a201      	add	r2, pc, #4	@ (adr r2, 80076e8 <UART_SetConfig+0x550>)
 80076e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e8:	08007701 	.word	0x08007701
 80076ec:	08007709 	.word	0x08007709
 80076f0:	08007711 	.word	0x08007711
 80076f4:	08007719 	.word	0x08007719
 80076f8:	08007721 	.word	0x08007721
 80076fc:	08007729 	.word	0x08007729
 8007700:	2302      	movs	r3, #2
 8007702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007706:	e01a      	b.n	800773e <UART_SetConfig+0x5a6>
 8007708:	2304      	movs	r3, #4
 800770a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800770e:	e016      	b.n	800773e <UART_SetConfig+0x5a6>
 8007710:	2308      	movs	r3, #8
 8007712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007716:	e012      	b.n	800773e <UART_SetConfig+0x5a6>
 8007718:	2310      	movs	r3, #16
 800771a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800771e:	e00e      	b.n	800773e <UART_SetConfig+0x5a6>
 8007720:	2320      	movs	r3, #32
 8007722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007726:	e00a      	b.n	800773e <UART_SetConfig+0x5a6>
 8007728:	2340      	movs	r3, #64	@ 0x40
 800772a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800772e:	e006      	b.n	800773e <UART_SetConfig+0x5a6>
 8007730:	2380      	movs	r3, #128	@ 0x80
 8007732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007736:	e002      	b.n	800773e <UART_SetConfig+0x5a6>
 8007738:	2380      	movs	r3, #128	@ 0x80
 800773a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a3f      	ldr	r2, [pc, #252]	@ (8007840 <UART_SetConfig+0x6a8>)
 8007744:	4293      	cmp	r3, r2
 8007746:	f040 80f8 	bne.w	800793a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800774a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800774e:	2b20      	cmp	r3, #32
 8007750:	dc46      	bgt.n	80077e0 <UART_SetConfig+0x648>
 8007752:	2b02      	cmp	r3, #2
 8007754:	f2c0 8082 	blt.w	800785c <UART_SetConfig+0x6c4>
 8007758:	3b02      	subs	r3, #2
 800775a:	2b1e      	cmp	r3, #30
 800775c:	d87e      	bhi.n	800785c <UART_SetConfig+0x6c4>
 800775e:	a201      	add	r2, pc, #4	@ (adr r2, 8007764 <UART_SetConfig+0x5cc>)
 8007760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007764:	080077e7 	.word	0x080077e7
 8007768:	0800785d 	.word	0x0800785d
 800776c:	080077ef 	.word	0x080077ef
 8007770:	0800785d 	.word	0x0800785d
 8007774:	0800785d 	.word	0x0800785d
 8007778:	0800785d 	.word	0x0800785d
 800777c:	080077ff 	.word	0x080077ff
 8007780:	0800785d 	.word	0x0800785d
 8007784:	0800785d 	.word	0x0800785d
 8007788:	0800785d 	.word	0x0800785d
 800778c:	0800785d 	.word	0x0800785d
 8007790:	0800785d 	.word	0x0800785d
 8007794:	0800785d 	.word	0x0800785d
 8007798:	0800785d 	.word	0x0800785d
 800779c:	0800780f 	.word	0x0800780f
 80077a0:	0800785d 	.word	0x0800785d
 80077a4:	0800785d 	.word	0x0800785d
 80077a8:	0800785d 	.word	0x0800785d
 80077ac:	0800785d 	.word	0x0800785d
 80077b0:	0800785d 	.word	0x0800785d
 80077b4:	0800785d 	.word	0x0800785d
 80077b8:	0800785d 	.word	0x0800785d
 80077bc:	0800785d 	.word	0x0800785d
 80077c0:	0800785d 	.word	0x0800785d
 80077c4:	0800785d 	.word	0x0800785d
 80077c8:	0800785d 	.word	0x0800785d
 80077cc:	0800785d 	.word	0x0800785d
 80077d0:	0800785d 	.word	0x0800785d
 80077d4:	0800785d 	.word	0x0800785d
 80077d8:	0800785d 	.word	0x0800785d
 80077dc:	0800784f 	.word	0x0800784f
 80077e0:	2b40      	cmp	r3, #64	@ 0x40
 80077e2:	d037      	beq.n	8007854 <UART_SetConfig+0x6bc>
 80077e4:	e03a      	b.n	800785c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80077e6:	f7fd fac5 	bl	8004d74 <HAL_RCCEx_GetD3PCLK1Freq>
 80077ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80077ec:	e03c      	b.n	8007868 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7fd fad4 	bl	8004da0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80077f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077fc:	e034      	b.n	8007868 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077fe:	f107 0318 	add.w	r3, r7, #24
 8007802:	4618      	mov	r0, r3
 8007804:	f7fd fc20 	bl	8005048 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800780c:	e02c      	b.n	8007868 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800780e:	4b09      	ldr	r3, [pc, #36]	@ (8007834 <UART_SetConfig+0x69c>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0320 	and.w	r3, r3, #32
 8007816:	2b00      	cmp	r3, #0
 8007818:	d016      	beq.n	8007848 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800781a:	4b06      	ldr	r3, [pc, #24]	@ (8007834 <UART_SetConfig+0x69c>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	08db      	lsrs	r3, r3, #3
 8007820:	f003 0303 	and.w	r3, r3, #3
 8007824:	4a07      	ldr	r2, [pc, #28]	@ (8007844 <UART_SetConfig+0x6ac>)
 8007826:	fa22 f303 	lsr.w	r3, r2, r3
 800782a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800782c:	e01c      	b.n	8007868 <UART_SetConfig+0x6d0>
 800782e:	bf00      	nop
 8007830:	40011400 	.word	0x40011400
 8007834:	58024400 	.word	0x58024400
 8007838:	40007800 	.word	0x40007800
 800783c:	40007c00 	.word	0x40007c00
 8007840:	58000c00 	.word	0x58000c00
 8007844:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007848:	4b9d      	ldr	r3, [pc, #628]	@ (8007ac0 <UART_SetConfig+0x928>)
 800784a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800784c:	e00c      	b.n	8007868 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800784e:	4b9d      	ldr	r3, [pc, #628]	@ (8007ac4 <UART_SetConfig+0x92c>)
 8007850:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007852:	e009      	b.n	8007868 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007854:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007858:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800785a:	e005      	b.n	8007868 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800785c:	2300      	movs	r3, #0
 800785e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007866:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007868:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800786a:	2b00      	cmp	r3, #0
 800786c:	f000 81de 	beq.w	8007c2c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007874:	4a94      	ldr	r2, [pc, #592]	@ (8007ac8 <UART_SetConfig+0x930>)
 8007876:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800787a:	461a      	mov	r2, r3
 800787c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800787e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007882:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	685a      	ldr	r2, [r3, #4]
 8007888:	4613      	mov	r3, r2
 800788a:	005b      	lsls	r3, r3, #1
 800788c:	4413      	add	r3, r2
 800788e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007890:	429a      	cmp	r2, r3
 8007892:	d305      	bcc.n	80078a0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800789a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800789c:	429a      	cmp	r2, r3
 800789e:	d903      	bls.n	80078a8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80078a6:	e1c1      	b.n	8007c2c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078aa:	2200      	movs	r2, #0
 80078ac:	60bb      	str	r3, [r7, #8]
 80078ae:	60fa      	str	r2, [r7, #12]
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078b4:	4a84      	ldr	r2, [pc, #528]	@ (8007ac8 <UART_SetConfig+0x930>)
 80078b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	2200      	movs	r2, #0
 80078be:	603b      	str	r3, [r7, #0]
 80078c0:	607a      	str	r2, [r7, #4]
 80078c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80078ca:	f7f8 ff1d 	bl	8000708 <__aeabi_uldivmod>
 80078ce:	4602      	mov	r2, r0
 80078d0:	460b      	mov	r3, r1
 80078d2:	4610      	mov	r0, r2
 80078d4:	4619      	mov	r1, r3
 80078d6:	f04f 0200 	mov.w	r2, #0
 80078da:	f04f 0300 	mov.w	r3, #0
 80078de:	020b      	lsls	r3, r1, #8
 80078e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80078e4:	0202      	lsls	r2, r0, #8
 80078e6:	6979      	ldr	r1, [r7, #20]
 80078e8:	6849      	ldr	r1, [r1, #4]
 80078ea:	0849      	lsrs	r1, r1, #1
 80078ec:	2000      	movs	r0, #0
 80078ee:	460c      	mov	r4, r1
 80078f0:	4605      	mov	r5, r0
 80078f2:	eb12 0804 	adds.w	r8, r2, r4
 80078f6:	eb43 0905 	adc.w	r9, r3, r5
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	469a      	mov	sl, r3
 8007902:	4693      	mov	fp, r2
 8007904:	4652      	mov	r2, sl
 8007906:	465b      	mov	r3, fp
 8007908:	4640      	mov	r0, r8
 800790a:	4649      	mov	r1, r9
 800790c:	f7f8 fefc 	bl	8000708 <__aeabi_uldivmod>
 8007910:	4602      	mov	r2, r0
 8007912:	460b      	mov	r3, r1
 8007914:	4613      	mov	r3, r2
 8007916:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800791a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800791e:	d308      	bcc.n	8007932 <UART_SetConfig+0x79a>
 8007920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007922:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007926:	d204      	bcs.n	8007932 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800792e:	60da      	str	r2, [r3, #12]
 8007930:	e17c      	b.n	8007c2c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007938:	e178      	b.n	8007c2c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	69db      	ldr	r3, [r3, #28]
 800793e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007942:	f040 80c5 	bne.w	8007ad0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007946:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800794a:	2b20      	cmp	r3, #32
 800794c:	dc48      	bgt.n	80079e0 <UART_SetConfig+0x848>
 800794e:	2b00      	cmp	r3, #0
 8007950:	db7b      	blt.n	8007a4a <UART_SetConfig+0x8b2>
 8007952:	2b20      	cmp	r3, #32
 8007954:	d879      	bhi.n	8007a4a <UART_SetConfig+0x8b2>
 8007956:	a201      	add	r2, pc, #4	@ (adr r2, 800795c <UART_SetConfig+0x7c4>)
 8007958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795c:	080079e7 	.word	0x080079e7
 8007960:	080079ef 	.word	0x080079ef
 8007964:	08007a4b 	.word	0x08007a4b
 8007968:	08007a4b 	.word	0x08007a4b
 800796c:	080079f7 	.word	0x080079f7
 8007970:	08007a4b 	.word	0x08007a4b
 8007974:	08007a4b 	.word	0x08007a4b
 8007978:	08007a4b 	.word	0x08007a4b
 800797c:	08007a07 	.word	0x08007a07
 8007980:	08007a4b 	.word	0x08007a4b
 8007984:	08007a4b 	.word	0x08007a4b
 8007988:	08007a4b 	.word	0x08007a4b
 800798c:	08007a4b 	.word	0x08007a4b
 8007990:	08007a4b 	.word	0x08007a4b
 8007994:	08007a4b 	.word	0x08007a4b
 8007998:	08007a4b 	.word	0x08007a4b
 800799c:	08007a17 	.word	0x08007a17
 80079a0:	08007a4b 	.word	0x08007a4b
 80079a4:	08007a4b 	.word	0x08007a4b
 80079a8:	08007a4b 	.word	0x08007a4b
 80079ac:	08007a4b 	.word	0x08007a4b
 80079b0:	08007a4b 	.word	0x08007a4b
 80079b4:	08007a4b 	.word	0x08007a4b
 80079b8:	08007a4b 	.word	0x08007a4b
 80079bc:	08007a4b 	.word	0x08007a4b
 80079c0:	08007a4b 	.word	0x08007a4b
 80079c4:	08007a4b 	.word	0x08007a4b
 80079c8:	08007a4b 	.word	0x08007a4b
 80079cc:	08007a4b 	.word	0x08007a4b
 80079d0:	08007a4b 	.word	0x08007a4b
 80079d4:	08007a4b 	.word	0x08007a4b
 80079d8:	08007a4b 	.word	0x08007a4b
 80079dc:	08007a3d 	.word	0x08007a3d
 80079e0:	2b40      	cmp	r3, #64	@ 0x40
 80079e2:	d02e      	beq.n	8007a42 <UART_SetConfig+0x8aa>
 80079e4:	e031      	b.n	8007a4a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079e6:	f7fb ff8f 	bl	8003908 <HAL_RCC_GetPCLK1Freq>
 80079ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80079ec:	e033      	b.n	8007a56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079ee:	f7fb ffa1 	bl	8003934 <HAL_RCC_GetPCLK2Freq>
 80079f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80079f4:	e02f      	b.n	8007a56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7fd f9d0 	bl	8004da0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a04:	e027      	b.n	8007a56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a06:	f107 0318 	add.w	r3, r7, #24
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7fd fb1c 	bl	8005048 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a14:	e01f      	b.n	8007a56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a16:	4b2d      	ldr	r3, [pc, #180]	@ (8007acc <UART_SetConfig+0x934>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 0320 	and.w	r3, r3, #32
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d009      	beq.n	8007a36 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a22:	4b2a      	ldr	r3, [pc, #168]	@ (8007acc <UART_SetConfig+0x934>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	08db      	lsrs	r3, r3, #3
 8007a28:	f003 0303 	and.w	r3, r3, #3
 8007a2c:	4a24      	ldr	r2, [pc, #144]	@ (8007ac0 <UART_SetConfig+0x928>)
 8007a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a34:	e00f      	b.n	8007a56 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007a36:	4b22      	ldr	r3, [pc, #136]	@ (8007ac0 <UART_SetConfig+0x928>)
 8007a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a3a:	e00c      	b.n	8007a56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a3c:	4b21      	ldr	r3, [pc, #132]	@ (8007ac4 <UART_SetConfig+0x92c>)
 8007a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a40:	e009      	b.n	8007a56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a48:	e005      	b.n	8007a56 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007a54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f000 80e7 	beq.w	8007c2c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a62:	4a19      	ldr	r2, [pc, #100]	@ (8007ac8 <UART_SetConfig+0x930>)
 8007a64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a68:	461a      	mov	r2, r3
 8007a6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a70:	005a      	lsls	r2, r3, #1
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	085b      	lsrs	r3, r3, #1
 8007a78:	441a      	add	r2, r3
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a82:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a86:	2b0f      	cmp	r3, #15
 8007a88:	d916      	bls.n	8007ab8 <UART_SetConfig+0x920>
 8007a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a90:	d212      	bcs.n	8007ab8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	f023 030f 	bic.w	r3, r3, #15
 8007a9a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a9e:	085b      	lsrs	r3, r3, #1
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	f003 0307 	and.w	r3, r3, #7
 8007aa6:	b29a      	uxth	r2, r3
 8007aa8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007ab4:	60da      	str	r2, [r3, #12]
 8007ab6:	e0b9      	b.n	8007c2c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007abe:	e0b5      	b.n	8007c2c <UART_SetConfig+0xa94>
 8007ac0:	03d09000 	.word	0x03d09000
 8007ac4:	003d0900 	.word	0x003d0900
 8007ac8:	0800d510 	.word	0x0800d510
 8007acc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ad0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007ad4:	2b20      	cmp	r3, #32
 8007ad6:	dc49      	bgt.n	8007b6c <UART_SetConfig+0x9d4>
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	db7c      	blt.n	8007bd6 <UART_SetConfig+0xa3e>
 8007adc:	2b20      	cmp	r3, #32
 8007ade:	d87a      	bhi.n	8007bd6 <UART_SetConfig+0xa3e>
 8007ae0:	a201      	add	r2, pc, #4	@ (adr r2, 8007ae8 <UART_SetConfig+0x950>)
 8007ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae6:	bf00      	nop
 8007ae8:	08007b73 	.word	0x08007b73
 8007aec:	08007b7b 	.word	0x08007b7b
 8007af0:	08007bd7 	.word	0x08007bd7
 8007af4:	08007bd7 	.word	0x08007bd7
 8007af8:	08007b83 	.word	0x08007b83
 8007afc:	08007bd7 	.word	0x08007bd7
 8007b00:	08007bd7 	.word	0x08007bd7
 8007b04:	08007bd7 	.word	0x08007bd7
 8007b08:	08007b93 	.word	0x08007b93
 8007b0c:	08007bd7 	.word	0x08007bd7
 8007b10:	08007bd7 	.word	0x08007bd7
 8007b14:	08007bd7 	.word	0x08007bd7
 8007b18:	08007bd7 	.word	0x08007bd7
 8007b1c:	08007bd7 	.word	0x08007bd7
 8007b20:	08007bd7 	.word	0x08007bd7
 8007b24:	08007bd7 	.word	0x08007bd7
 8007b28:	08007ba3 	.word	0x08007ba3
 8007b2c:	08007bd7 	.word	0x08007bd7
 8007b30:	08007bd7 	.word	0x08007bd7
 8007b34:	08007bd7 	.word	0x08007bd7
 8007b38:	08007bd7 	.word	0x08007bd7
 8007b3c:	08007bd7 	.word	0x08007bd7
 8007b40:	08007bd7 	.word	0x08007bd7
 8007b44:	08007bd7 	.word	0x08007bd7
 8007b48:	08007bd7 	.word	0x08007bd7
 8007b4c:	08007bd7 	.word	0x08007bd7
 8007b50:	08007bd7 	.word	0x08007bd7
 8007b54:	08007bd7 	.word	0x08007bd7
 8007b58:	08007bd7 	.word	0x08007bd7
 8007b5c:	08007bd7 	.word	0x08007bd7
 8007b60:	08007bd7 	.word	0x08007bd7
 8007b64:	08007bd7 	.word	0x08007bd7
 8007b68:	08007bc9 	.word	0x08007bc9
 8007b6c:	2b40      	cmp	r3, #64	@ 0x40
 8007b6e:	d02e      	beq.n	8007bce <UART_SetConfig+0xa36>
 8007b70:	e031      	b.n	8007bd6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b72:	f7fb fec9 	bl	8003908 <HAL_RCC_GetPCLK1Freq>
 8007b76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007b78:	e033      	b.n	8007be2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b7a:	f7fb fedb 	bl	8003934 <HAL_RCC_GetPCLK2Freq>
 8007b7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007b80:	e02f      	b.n	8007be2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7fd f90a 	bl	8004da0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b90:	e027      	b.n	8007be2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b92:	f107 0318 	add.w	r3, r7, #24
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7fd fa56 	bl	8005048 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ba0:	e01f      	b.n	8007be2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ba2:	4b2d      	ldr	r3, [pc, #180]	@ (8007c58 <UART_SetConfig+0xac0>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 0320 	and.w	r3, r3, #32
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d009      	beq.n	8007bc2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007bae:	4b2a      	ldr	r3, [pc, #168]	@ (8007c58 <UART_SetConfig+0xac0>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	08db      	lsrs	r3, r3, #3
 8007bb4:	f003 0303 	and.w	r3, r3, #3
 8007bb8:	4a28      	ldr	r2, [pc, #160]	@ (8007c5c <UART_SetConfig+0xac4>)
 8007bba:	fa22 f303 	lsr.w	r3, r2, r3
 8007bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007bc0:	e00f      	b.n	8007be2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007bc2:	4b26      	ldr	r3, [pc, #152]	@ (8007c5c <UART_SetConfig+0xac4>)
 8007bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bc6:	e00c      	b.n	8007be2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007bc8:	4b25      	ldr	r3, [pc, #148]	@ (8007c60 <UART_SetConfig+0xac8>)
 8007bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bcc:	e009      	b.n	8007be2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bd4:	e005      	b.n	8007be2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007be0:	bf00      	nop
    }

    if (pclk != 0U)
 8007be2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d021      	beq.n	8007c2c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bec:	4a1d      	ldr	r2, [pc, #116]	@ (8007c64 <UART_SetConfig+0xacc>)
 8007bee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bf6:	fbb3 f2f2 	udiv	r2, r3, r2
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	085b      	lsrs	r3, r3, #1
 8007c00:	441a      	add	r2, r3
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c0e:	2b0f      	cmp	r3, #15
 8007c10:	d909      	bls.n	8007c26 <UART_SetConfig+0xa8e>
 8007c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c18:	d205      	bcs.n	8007c26 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c1c:	b29a      	uxth	r2, r3
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	60da      	str	r2, [r3, #12]
 8007c24:	e002      	b.n	8007c2c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	2200      	movs	r2, #0
 8007c46:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007c48:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3748      	adds	r7, #72	@ 0x48
 8007c50:	46bd      	mov	sp, r7
 8007c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c56:	bf00      	nop
 8007c58:	58024400 	.word	0x58024400
 8007c5c:	03d09000 	.word	0x03d09000
 8007c60:	003d0900 	.word	0x003d0900
 8007c64:	0800d510 	.word	0x0800d510

08007c68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c74:	f003 0308 	and.w	r3, r3, #8
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00a      	beq.n	8007c92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	430a      	orrs	r2, r1
 8007c90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c96:	f003 0301 	and.w	r3, r3, #1
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00a      	beq.n	8007cb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	430a      	orrs	r2, r1
 8007cb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cb8:	f003 0302 	and.w	r3, r3, #2
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00a      	beq.n	8007cd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	430a      	orrs	r2, r1
 8007cd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cda:	f003 0304 	and.w	r3, r3, #4
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00a      	beq.n	8007cf8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	430a      	orrs	r2, r1
 8007cf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cfc:	f003 0310 	and.w	r3, r3, #16
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00a      	beq.n	8007d1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	430a      	orrs	r2, r1
 8007d18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d1e:	f003 0320 	and.w	r3, r3, #32
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00a      	beq.n	8007d3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	430a      	orrs	r2, r1
 8007d3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d01a      	beq.n	8007d7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	430a      	orrs	r2, r1
 8007d5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d66:	d10a      	bne.n	8007d7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	430a      	orrs	r2, r1
 8007d7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00a      	beq.n	8007da0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	430a      	orrs	r2, r1
 8007d9e:	605a      	str	r2, [r3, #4]
  }
}
 8007da0:	bf00      	nop
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b098      	sub	sp, #96	@ 0x60
 8007db0:	af02      	add	r7, sp, #8
 8007db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007dbc:	f7f9 fce8 	bl	8001790 <HAL_GetTick>
 8007dc0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 0308 	and.w	r3, r3, #8
 8007dcc:	2b08      	cmp	r3, #8
 8007dce:	d12f      	bne.n	8007e30 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007dd0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007dd4:	9300      	str	r3, [sp, #0]
 8007dd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f88e 	bl	8007f00 <UART_WaitOnFlagUntilTimeout>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d022      	beq.n	8007e30 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df2:	e853 3f00 	ldrex	r3, [r3]
 8007df6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007dfe:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	461a      	mov	r2, r3
 8007e06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e08:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e0a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e10:	e841 2300 	strex	r3, r2, [r1]
 8007e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d1e6      	bne.n	8007dea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2220      	movs	r2, #32
 8007e20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e063      	b.n	8007ef8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 0304 	and.w	r3, r3, #4
 8007e3a:	2b04      	cmp	r3, #4
 8007e3c:	d149      	bne.n	8007ed2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e3e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e42:	9300      	str	r3, [sp, #0]
 8007e44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e46:	2200      	movs	r2, #0
 8007e48:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 f857 	bl	8007f00 <UART_WaitOnFlagUntilTimeout>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d03c      	beq.n	8007ed2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e60:	e853 3f00 	ldrex	r3, [r3]
 8007e64:	623b      	str	r3, [r7, #32]
   return(result);
 8007e66:	6a3b      	ldr	r3, [r7, #32]
 8007e68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	461a      	mov	r2, r3
 8007e74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e76:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e78:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e7e:	e841 2300 	strex	r3, r2, [r1]
 8007e82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1e6      	bne.n	8007e58 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	3308      	adds	r3, #8
 8007e90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	e853 3f00 	ldrex	r3, [r3]
 8007e98:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f023 0301 	bic.w	r3, r3, #1
 8007ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	3308      	adds	r3, #8
 8007ea8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007eaa:	61fa      	str	r2, [r7, #28]
 8007eac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eae:	69b9      	ldr	r1, [r7, #24]
 8007eb0:	69fa      	ldr	r2, [r7, #28]
 8007eb2:	e841 2300 	strex	r3, r2, [r1]
 8007eb6:	617b      	str	r3, [r7, #20]
   return(result);
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1e5      	bne.n	8007e8a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2220      	movs	r2, #32
 8007ec2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e012      	b.n	8007ef8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2220      	movs	r2, #32
 8007ed6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2220      	movs	r2, #32
 8007ede:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ef6:	2300      	movs	r3, #0
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3758      	adds	r7, #88	@ 0x58
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	603b      	str	r3, [r7, #0]
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f10:	e04f      	b.n	8007fb2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f18:	d04b      	beq.n	8007fb2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f1a:	f7f9 fc39 	bl	8001790 <HAL_GetTick>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	1ad3      	subs	r3, r2, r3
 8007f24:	69ba      	ldr	r2, [r7, #24]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d302      	bcc.n	8007f30 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d101      	bne.n	8007f34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f30:	2303      	movs	r3, #3
 8007f32:	e04e      	b.n	8007fd2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 0304 	and.w	r3, r3, #4
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d037      	beq.n	8007fb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	2b80      	cmp	r3, #128	@ 0x80
 8007f46:	d034      	beq.n	8007fb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	2b40      	cmp	r3, #64	@ 0x40
 8007f4c:	d031      	beq.n	8007fb2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	69db      	ldr	r3, [r3, #28]
 8007f54:	f003 0308 	and.w	r3, r3, #8
 8007f58:	2b08      	cmp	r3, #8
 8007f5a:	d110      	bne.n	8007f7e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2208      	movs	r2, #8
 8007f62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f000 f95b 	bl	8008220 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2208      	movs	r2, #8
 8007f6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e029      	b.n	8007fd2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	69db      	ldr	r3, [r3, #28]
 8007f84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f8c:	d111      	bne.n	8007fb2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007f96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f98:	68f8      	ldr	r0, [r7, #12]
 8007f9a:	f000 f941 	bl	8008220 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2220      	movs	r2, #32
 8007fa2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	e00f      	b.n	8007fd2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	69da      	ldr	r2, [r3, #28]
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	4013      	ands	r3, r2
 8007fbc:	68ba      	ldr	r2, [r7, #8]
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	bf0c      	ite	eq
 8007fc2:	2301      	moveq	r3, #1
 8007fc4:	2300      	movne	r3, #0
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	461a      	mov	r2, r3
 8007fca:	79fb      	ldrb	r3, [r7, #7]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d0a0      	beq.n	8007f12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
	...

08007fdc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b0a3      	sub	sp, #140	@ 0x8c
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	88fa      	ldrh	r2, [r7, #6]
 8007ff4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	88fa      	ldrh	r2, [r7, #6]
 8007ffc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2200      	movs	r2, #0
 8008004:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800800e:	d10e      	bne.n	800802e <UART_Start_Receive_IT+0x52>
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d105      	bne.n	8008024 <UART_Start_Receive_IT+0x48>
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800801e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008022:	e02d      	b.n	8008080 <UART_Start_Receive_IT+0xa4>
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	22ff      	movs	r2, #255	@ 0xff
 8008028:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800802c:	e028      	b.n	8008080 <UART_Start_Receive_IT+0xa4>
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d10d      	bne.n	8008052 <UART_Start_Receive_IT+0x76>
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d104      	bne.n	8008048 <UART_Start_Receive_IT+0x6c>
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	22ff      	movs	r2, #255	@ 0xff
 8008042:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008046:	e01b      	b.n	8008080 <UART_Start_Receive_IT+0xa4>
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	227f      	movs	r2, #127	@ 0x7f
 800804c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008050:	e016      	b.n	8008080 <UART_Start_Receive_IT+0xa4>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800805a:	d10d      	bne.n	8008078 <UART_Start_Receive_IT+0x9c>
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	691b      	ldr	r3, [r3, #16]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d104      	bne.n	800806e <UART_Start_Receive_IT+0x92>
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	227f      	movs	r2, #127	@ 0x7f
 8008068:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800806c:	e008      	b.n	8008080 <UART_Start_Receive_IT+0xa4>
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	223f      	movs	r2, #63	@ 0x3f
 8008072:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008076:	e003      	b.n	8008080 <UART_Start_Receive_IT+0xa4>
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2200      	movs	r2, #0
 800807c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2200      	movs	r2, #0
 8008084:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2222      	movs	r2, #34	@ 0x22
 800808c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	3308      	adds	r3, #8
 8008096:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008098:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800809a:	e853 3f00 	ldrex	r3, [r3]
 800809e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80080a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80080a2:	f043 0301 	orr.w	r3, r3, #1
 80080a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	3308      	adds	r3, #8
 80080b0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80080b4:	673a      	str	r2, [r7, #112]	@ 0x70
 80080b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80080ba:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80080bc:	e841 2300 	strex	r3, r2, [r1]
 80080c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80080c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d1e3      	bne.n	8008090 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080d0:	d14f      	bne.n	8008172 <UART_Start_Receive_IT+0x196>
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80080d8:	88fa      	ldrh	r2, [r7, #6]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d349      	bcc.n	8008172 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080e6:	d107      	bne.n	80080f8 <UART_Start_Receive_IT+0x11c>
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d103      	bne.n	80080f8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	4a47      	ldr	r2, [pc, #284]	@ (8008210 <UART_Start_Receive_IT+0x234>)
 80080f4:	675a      	str	r2, [r3, #116]	@ 0x74
 80080f6:	e002      	b.n	80080fe <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	4a46      	ldr	r2, [pc, #280]	@ (8008214 <UART_Start_Receive_IT+0x238>)
 80080fc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d01a      	beq.n	800813c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800810e:	e853 3f00 	ldrex	r3, [r3]
 8008112:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008114:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008116:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800811a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	461a      	mov	r2, r3
 8008124:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008128:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800812a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800812e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008130:	e841 2300 	strex	r3, r2, [r1]
 8008134:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008136:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008138:	2b00      	cmp	r3, #0
 800813a:	d1e4      	bne.n	8008106 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	3308      	adds	r3, #8
 8008142:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008144:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008146:	e853 3f00 	ldrex	r3, [r3]
 800814a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800814c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800814e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008152:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	3308      	adds	r3, #8
 800815a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800815c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800815e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008160:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008162:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008164:	e841 2300 	strex	r3, r2, [r1]
 8008168:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800816a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1e5      	bne.n	800813c <UART_Start_Receive_IT+0x160>
 8008170:	e046      	b.n	8008200 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800817a:	d107      	bne.n	800818c <UART_Start_Receive_IT+0x1b0>
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	691b      	ldr	r3, [r3, #16]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d103      	bne.n	800818c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	4a24      	ldr	r2, [pc, #144]	@ (8008218 <UART_Start_Receive_IT+0x23c>)
 8008188:	675a      	str	r2, [r3, #116]	@ 0x74
 800818a:	e002      	b.n	8008192 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	4a23      	ldr	r2, [pc, #140]	@ (800821c <UART_Start_Receive_IT+0x240>)
 8008190:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d019      	beq.n	80081ce <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a2:	e853 3f00 	ldrex	r3, [r3]
 80081a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80081a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081aa:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80081ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	461a      	mov	r2, r3
 80081b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80081b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80081ba:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80081be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80081c0:	e841 2300 	strex	r3, r2, [r1]
 80081c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80081c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d1e6      	bne.n	800819a <UART_Start_Receive_IT+0x1be>
 80081cc:	e018      	b.n	8008200 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	e853 3f00 	ldrex	r3, [r3]
 80081da:	613b      	str	r3, [r7, #16]
   return(result);
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	f043 0320 	orr.w	r3, r3, #32
 80081e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	461a      	mov	r2, r3
 80081ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081ec:	623b      	str	r3, [r7, #32]
 80081ee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f0:	69f9      	ldr	r1, [r7, #28]
 80081f2:	6a3a      	ldr	r2, [r7, #32]
 80081f4:	e841 2300 	strex	r3, r2, [r1]
 80081f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d1e6      	bne.n	80081ce <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	378c      	adds	r7, #140	@ 0x8c
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr
 800820e:	bf00      	nop
 8008210:	08008a41 	.word	0x08008a41
 8008214:	080086e1 	.word	0x080086e1
 8008218:	08008529 	.word	0x08008529
 800821c:	08008371 	.word	0x08008371

08008220 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008220:	b480      	push	{r7}
 8008222:	b095      	sub	sp, #84	@ 0x54
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008230:	e853 3f00 	ldrex	r3, [r3]
 8008234:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008238:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800823c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	461a      	mov	r2, r3
 8008244:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008246:	643b      	str	r3, [r7, #64]	@ 0x40
 8008248:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800824a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800824c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800824e:	e841 2300 	strex	r3, r2, [r1]
 8008252:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008256:	2b00      	cmp	r3, #0
 8008258:	d1e6      	bne.n	8008228 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	3308      	adds	r3, #8
 8008260:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008262:	6a3b      	ldr	r3, [r7, #32]
 8008264:	e853 3f00 	ldrex	r3, [r3]
 8008268:	61fb      	str	r3, [r7, #28]
   return(result);
 800826a:	69fa      	ldr	r2, [r7, #28]
 800826c:	4b1e      	ldr	r3, [pc, #120]	@ (80082e8 <UART_EndRxTransfer+0xc8>)
 800826e:	4013      	ands	r3, r2
 8008270:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	3308      	adds	r3, #8
 8008278:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800827a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800827c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800827e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008280:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008282:	e841 2300 	strex	r3, r2, [r1]
 8008286:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1e5      	bne.n	800825a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008292:	2b01      	cmp	r3, #1
 8008294:	d118      	bne.n	80082c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	e853 3f00 	ldrex	r3, [r3]
 80082a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	f023 0310 	bic.w	r3, r3, #16
 80082aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	461a      	mov	r2, r3
 80082b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082b4:	61bb      	str	r3, [r7, #24]
 80082b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b8:	6979      	ldr	r1, [r7, #20]
 80082ba:	69ba      	ldr	r2, [r7, #24]
 80082bc:	e841 2300 	strex	r3, r2, [r1]
 80082c0:	613b      	str	r3, [r7, #16]
   return(result);
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d1e6      	bne.n	8008296 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2220      	movs	r2, #32
 80082cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80082dc:	bf00      	nop
 80082de:	3754      	adds	r7, #84	@ 0x54
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr
 80082e8:	effffffe 	.word	0xeffffffe

080082ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2200      	movs	r2, #0
 8008306:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f7fe ff2e 	bl	800716c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008310:	bf00      	nop
 8008312:	3710      	adds	r7, #16
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b088      	sub	sp, #32
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	e853 3f00 	ldrex	r3, [r3]
 800832c:	60bb      	str	r3, [r7, #8]
   return(result);
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008334:	61fb      	str	r3, [r7, #28]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	461a      	mov	r2, r3
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	61bb      	str	r3, [r7, #24]
 8008340:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008342:	6979      	ldr	r1, [r7, #20]
 8008344:	69ba      	ldr	r2, [r7, #24]
 8008346:	e841 2300 	strex	r3, r2, [r1]
 800834a:	613b      	str	r3, [r7, #16]
   return(result);
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1e6      	bne.n	8008320 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2220      	movs	r2, #32
 8008356:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f7fe fef9 	bl	8007158 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008366:	bf00      	nop
 8008368:	3720      	adds	r7, #32
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
	...

08008370 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b09c      	sub	sp, #112	@ 0x70
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800837e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008388:	2b22      	cmp	r3, #34	@ 0x22
 800838a:	f040 80be 	bne.w	800850a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008394:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008398:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800839c:	b2d9      	uxtb	r1, r3
 800839e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80083a2:	b2da      	uxtb	r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083a8:	400a      	ands	r2, r1
 80083aa:	b2d2      	uxtb	r2, r2
 80083ac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083b2:	1c5a      	adds	r2, r3, #1
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80083be:	b29b      	uxth	r3, r3
 80083c0:	3b01      	subs	r3, #1
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	f040 80a1 	bne.w	800851a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083e0:	e853 3f00 	ldrex	r3, [r3]
 80083e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80083e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	461a      	mov	r2, r3
 80083f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80083f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80083f8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80083fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80083fe:	e841 2300 	strex	r3, r2, [r1]
 8008402:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008404:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1e6      	bne.n	80083d8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	3308      	adds	r3, #8
 8008410:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008414:	e853 3f00 	ldrex	r3, [r3]
 8008418:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800841a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800841c:	f023 0301 	bic.w	r3, r3, #1
 8008420:	667b      	str	r3, [r7, #100]	@ 0x64
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	3308      	adds	r3, #8
 8008428:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800842a:	647a      	str	r2, [r7, #68]	@ 0x44
 800842c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008430:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008432:	e841 2300 	strex	r3, r2, [r1]
 8008436:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1e5      	bne.n	800840a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2220      	movs	r2, #32
 8008442:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a33      	ldr	r2, [pc, #204]	@ (8008524 <UART_RxISR_8BIT+0x1b4>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d01f      	beq.n	800849c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008466:	2b00      	cmp	r3, #0
 8008468:	d018      	beq.n	800849c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008472:	e853 3f00 	ldrex	r3, [r3]
 8008476:	623b      	str	r3, [r7, #32]
   return(result);
 8008478:	6a3b      	ldr	r3, [r7, #32]
 800847a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800847e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	461a      	mov	r2, r3
 8008486:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008488:	633b      	str	r3, [r7, #48]	@ 0x30
 800848a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800848e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008490:	e841 2300 	strex	r3, r2, [r1]
 8008494:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008498:	2b00      	cmp	r3, #0
 800849a:	d1e6      	bne.n	800846a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d12e      	bne.n	8008502 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	e853 3f00 	ldrex	r3, [r3]
 80084b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f023 0310 	bic.w	r3, r3, #16
 80084be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	461a      	mov	r2, r3
 80084c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084c8:	61fb      	str	r3, [r7, #28]
 80084ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084cc:	69b9      	ldr	r1, [r7, #24]
 80084ce:	69fa      	ldr	r2, [r7, #28]
 80084d0:	e841 2300 	strex	r3, r2, [r1]
 80084d4:	617b      	str	r3, [r7, #20]
   return(result);
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d1e6      	bne.n	80084aa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	69db      	ldr	r3, [r3, #28]
 80084e2:	f003 0310 	and.w	r3, r3, #16
 80084e6:	2b10      	cmp	r3, #16
 80084e8:	d103      	bne.n	80084f2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2210      	movs	r2, #16
 80084f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80084f8:	4619      	mov	r1, r3
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f7fe fe40 	bl	8007180 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008500:	e00b      	b.n	800851a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f7f8 fb5c 	bl	8000bc0 <HAL_UART_RxCpltCallback>
}
 8008508:	e007      	b.n	800851a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	699a      	ldr	r2, [r3, #24]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f042 0208 	orr.w	r2, r2, #8
 8008518:	619a      	str	r2, [r3, #24]
}
 800851a:	bf00      	nop
 800851c:	3770      	adds	r7, #112	@ 0x70
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	58000c00 	.word	0x58000c00

08008528 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b09c      	sub	sp, #112	@ 0x70
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008536:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008540:	2b22      	cmp	r3, #34	@ 0x22
 8008542:	f040 80be 	bne.w	80086c2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800854c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008554:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008556:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800855a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800855e:	4013      	ands	r3, r2
 8008560:	b29a      	uxth	r2, r3
 8008562:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008564:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800856a:	1c9a      	adds	r2, r3, #2
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008576:	b29b      	uxth	r3, r3
 8008578:	3b01      	subs	r3, #1
 800857a:	b29a      	uxth	r2, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008588:	b29b      	uxth	r3, r3
 800858a:	2b00      	cmp	r3, #0
 800858c:	f040 80a1 	bne.w	80086d2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008596:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008598:	e853 3f00 	ldrex	r3, [r3]
 800859c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800859e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	461a      	mov	r2, r3
 80085ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80085ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80085b0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80085b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80085b6:	e841 2300 	strex	r3, r2, [r1]
 80085ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80085bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1e6      	bne.n	8008590 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	3308      	adds	r3, #8
 80085c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085cc:	e853 3f00 	ldrex	r3, [r3]
 80085d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80085d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d4:	f023 0301 	bic.w	r3, r3, #1
 80085d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	3308      	adds	r3, #8
 80085e0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80085e2:	643a      	str	r2, [r7, #64]	@ 0x40
 80085e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80085e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80085ea:	e841 2300 	strex	r3, r2, [r1]
 80085ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80085f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d1e5      	bne.n	80085c2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2220      	movs	r2, #32
 80085fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a33      	ldr	r2, [pc, #204]	@ (80086dc <UART_RxISR_16BIT+0x1b4>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d01f      	beq.n	8008654 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800861e:	2b00      	cmp	r3, #0
 8008620:	d018      	beq.n	8008654 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008628:	6a3b      	ldr	r3, [r7, #32]
 800862a:	e853 3f00 	ldrex	r3, [r3]
 800862e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008636:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	461a      	mov	r2, r3
 800863e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008640:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008642:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008644:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008646:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008648:	e841 2300 	strex	r3, r2, [r1]
 800864c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800864e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008650:	2b00      	cmp	r3, #0
 8008652:	d1e6      	bne.n	8008622 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008658:	2b01      	cmp	r3, #1
 800865a:	d12e      	bne.n	80086ba <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2200      	movs	r2, #0
 8008660:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	e853 3f00 	ldrex	r3, [r3]
 800866e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	f023 0310 	bic.w	r3, r3, #16
 8008676:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	461a      	mov	r2, r3
 800867e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008680:	61bb      	str	r3, [r7, #24]
 8008682:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008684:	6979      	ldr	r1, [r7, #20]
 8008686:	69ba      	ldr	r2, [r7, #24]
 8008688:	e841 2300 	strex	r3, r2, [r1]
 800868c:	613b      	str	r3, [r7, #16]
   return(result);
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d1e6      	bne.n	8008662 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	69db      	ldr	r3, [r3, #28]
 800869a:	f003 0310 	and.w	r3, r3, #16
 800869e:	2b10      	cmp	r3, #16
 80086a0:	d103      	bne.n	80086aa <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2210      	movs	r2, #16
 80086a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80086b0:	4619      	mov	r1, r3
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f7fe fd64 	bl	8007180 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80086b8:	e00b      	b.n	80086d2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f7f8 fa80 	bl	8000bc0 <HAL_UART_RxCpltCallback>
}
 80086c0:	e007      	b.n	80086d2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	699a      	ldr	r2, [r3, #24]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f042 0208 	orr.w	r2, r2, #8
 80086d0:	619a      	str	r2, [r3, #24]
}
 80086d2:	bf00      	nop
 80086d4:	3770      	adds	r7, #112	@ 0x70
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	58000c00 	.word	0x58000c00

080086e0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b0ac      	sub	sp, #176	@ 0xb0
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80086ee:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	69db      	ldr	r3, [r3, #28]
 80086f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008716:	2b22      	cmp	r3, #34	@ 0x22
 8008718:	f040 8180 	bne.w	8008a1c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008722:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008726:	e123      	b.n	8008970 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800872e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008732:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008736:	b2d9      	uxtb	r1, r3
 8008738:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800873c:	b2da      	uxtb	r2, r3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008742:	400a      	ands	r2, r1
 8008744:	b2d2      	uxtb	r2, r2
 8008746:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800874c:	1c5a      	adds	r2, r3, #1
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008758:	b29b      	uxth	r3, r3
 800875a:	3b01      	subs	r3, #1
 800875c:	b29a      	uxth	r2, r3
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	69db      	ldr	r3, [r3, #28]
 800876a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800876e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008772:	f003 0307 	and.w	r3, r3, #7
 8008776:	2b00      	cmp	r3, #0
 8008778:	d053      	beq.n	8008822 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800877a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800877e:	f003 0301 	and.w	r3, r3, #1
 8008782:	2b00      	cmp	r3, #0
 8008784:	d011      	beq.n	80087aa <UART_RxISR_8BIT_FIFOEN+0xca>
 8008786:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800878a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00b      	beq.n	80087aa <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2201      	movs	r2, #1
 8008798:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087a0:	f043 0201 	orr.w	r2, r3, #1
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80087ae:	f003 0302 	and.w	r3, r3, #2
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d011      	beq.n	80087da <UART_RxISR_8BIT_FIFOEN+0xfa>
 80087b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80087ba:	f003 0301 	and.w	r3, r3, #1
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00b      	beq.n	80087da <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2202      	movs	r2, #2
 80087c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087d0:	f043 0204 	orr.w	r2, r3, #4
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80087de:	f003 0304 	and.w	r3, r3, #4
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d011      	beq.n	800880a <UART_RxISR_8BIT_FIFOEN+0x12a>
 80087e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80087ea:	f003 0301 	and.w	r3, r3, #1
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d00b      	beq.n	800880a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2204      	movs	r2, #4
 80087f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008800:	f043 0202 	orr.w	r2, r3, #2
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008810:	2b00      	cmp	r3, #0
 8008812:	d006      	beq.n	8008822 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f7fe fca9 	bl	800716c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008828:	b29b      	uxth	r3, r3
 800882a:	2b00      	cmp	r3, #0
 800882c:	f040 80a0 	bne.w	8008970 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008836:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008838:	e853 3f00 	ldrex	r3, [r3]
 800883c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800883e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008840:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008844:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	461a      	mov	r2, r3
 800884e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008852:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008854:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008856:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008858:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800885a:	e841 2300 	strex	r3, r2, [r1]
 800885e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008860:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008862:	2b00      	cmp	r3, #0
 8008864:	d1e4      	bne.n	8008830 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	3308      	adds	r3, #8
 800886c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800886e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008870:	e853 3f00 	ldrex	r3, [r3]
 8008874:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008876:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008878:	4b6e      	ldr	r3, [pc, #440]	@ (8008a34 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800887a:	4013      	ands	r3, r2
 800887c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	3308      	adds	r3, #8
 8008886:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800888a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800888c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008890:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008892:	e841 2300 	strex	r3, r2, [r1]
 8008896:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008898:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800889a:	2b00      	cmp	r3, #0
 800889c:	d1e3      	bne.n	8008866 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2220      	movs	r2, #32
 80088a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a60      	ldr	r2, [pc, #384]	@ (8008a38 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d021      	beq.n	8008900 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d01a      	beq.n	8008900 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088d2:	e853 3f00 	ldrex	r3, [r3]
 80088d6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80088d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80088de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	461a      	mov	r2, r3
 80088e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80088ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80088ee:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80088f2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80088f4:	e841 2300 	strex	r3, r2, [r1]
 80088f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80088fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d1e4      	bne.n	80088ca <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008904:	2b01      	cmp	r3, #1
 8008906:	d130      	bne.n	800896a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008916:	e853 3f00 	ldrex	r3, [r3]
 800891a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800891c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800891e:	f023 0310 	bic.w	r3, r3, #16
 8008922:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	461a      	mov	r2, r3
 800892c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008930:	643b      	str	r3, [r7, #64]	@ 0x40
 8008932:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008934:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008936:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008938:	e841 2300 	strex	r3, r2, [r1]
 800893c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800893e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008940:	2b00      	cmp	r3, #0
 8008942:	d1e4      	bne.n	800890e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	69db      	ldr	r3, [r3, #28]
 800894a:	f003 0310 	and.w	r3, r3, #16
 800894e:	2b10      	cmp	r3, #16
 8008950:	d103      	bne.n	800895a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2210      	movs	r2, #16
 8008958:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008960:	4619      	mov	r1, r3
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7fe fc0c 	bl	8007180 <HAL_UARTEx_RxEventCallback>
 8008968:	e002      	b.n	8008970 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f7f8 f928 	bl	8000bc0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008970:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008974:	2b00      	cmp	r3, #0
 8008976:	d006      	beq.n	8008986 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8008978:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800897c:	f003 0320 	and.w	r3, r3, #32
 8008980:	2b00      	cmp	r3, #0
 8008982:	f47f aed1 	bne.w	8008728 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800898c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008990:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008994:	2b00      	cmp	r3, #0
 8008996:	d049      	beq.n	8008a2c <UART_RxISR_8BIT_FIFOEN+0x34c>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800899e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d242      	bcs.n	8008a2c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	3308      	adds	r3, #8
 80089ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ae:	6a3b      	ldr	r3, [r7, #32]
 80089b0:	e853 3f00 	ldrex	r3, [r3]
 80089b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80089bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	3308      	adds	r3, #8
 80089c6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80089ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80089cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089d2:	e841 2300 	strex	r3, r2, [r1]
 80089d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80089d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1e3      	bne.n	80089a6 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	4a16      	ldr	r2, [pc, #88]	@ (8008a3c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80089e2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	e853 3f00 	ldrex	r3, [r3]
 80089f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	f043 0320 	orr.w	r3, r3, #32
 80089f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	461a      	mov	r2, r3
 8008a02:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008a06:	61bb      	str	r3, [r7, #24]
 8008a08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a0a:	6979      	ldr	r1, [r7, #20]
 8008a0c:	69ba      	ldr	r2, [r7, #24]
 8008a0e:	e841 2300 	strex	r3, r2, [r1]
 8008a12:	613b      	str	r3, [r7, #16]
   return(result);
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d1e4      	bne.n	80089e4 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a1a:	e007      	b.n	8008a2c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	699a      	ldr	r2, [r3, #24]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f042 0208 	orr.w	r2, r2, #8
 8008a2a:	619a      	str	r2, [r3, #24]
}
 8008a2c:	bf00      	nop
 8008a2e:	37b0      	adds	r7, #176	@ 0xb0
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	effffffe 	.word	0xeffffffe
 8008a38:	58000c00 	.word	0x58000c00
 8008a3c:	08008371 	.word	0x08008371

08008a40 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b0ae      	sub	sp, #184	@ 0xb8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008a4e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	69db      	ldr	r3, [r3, #28]
 8008a58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a76:	2b22      	cmp	r3, #34	@ 0x22
 8008a78:	f040 8184 	bne.w	8008d84 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008a82:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008a86:	e127      	b.n	8008cd8 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a8e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008a9a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8008a9e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8008aa2:	4013      	ands	r3, r2
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008aaa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ab0:	1c9a      	adds	r2, r3, #2
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	3b01      	subs	r3, #1
 8008ac0:	b29a      	uxth	r2, r3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	69db      	ldr	r3, [r3, #28]
 8008ace:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008ad2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008ad6:	f003 0307 	and.w	r3, r3, #7
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d053      	beq.n	8008b86 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ade:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008ae2:	f003 0301 	and.w	r3, r3, #1
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d011      	beq.n	8008b0e <UART_RxISR_16BIT_FIFOEN+0xce>
 8008aea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00b      	beq.n	8008b0e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	2201      	movs	r2, #1
 8008afc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b04:	f043 0201 	orr.w	r2, r3, #1
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008b12:	f003 0302 	and.w	r3, r3, #2
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d011      	beq.n	8008b3e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008b1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008b1e:	f003 0301 	and.w	r3, r3, #1
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00b      	beq.n	8008b3e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2202      	movs	r2, #2
 8008b2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b34:	f043 0204 	orr.w	r2, r3, #4
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008b42:	f003 0304 	and.w	r3, r3, #4
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d011      	beq.n	8008b6e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008b4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008b4e:	f003 0301 	and.w	r3, r3, #1
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d00b      	beq.n	8008b6e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2204      	movs	r2, #4
 8008b5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b64:	f043 0202 	orr.w	r2, r3, #2
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d006      	beq.n	8008b86 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f7fe faf7 	bl	800716c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	f040 80a2 	bne.w	8008cd8 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008b9c:	e853 3f00 	ldrex	r3, [r3]
 8008ba0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008ba2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ba4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ba8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008bb6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008bba:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bbc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008bbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008bc2:	e841 2300 	strex	r3, r2, [r1]
 8008bc6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008bc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1e2      	bne.n	8008b94 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	3308      	adds	r3, #8
 8008bd4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008bd8:	e853 3f00 	ldrex	r3, [r3]
 8008bdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008bde:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008be0:	4b6e      	ldr	r3, [pc, #440]	@ (8008d9c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8008be2:	4013      	ands	r3, r2
 8008be4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	3308      	adds	r3, #8
 8008bee:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008bf2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008bf4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008bf8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008bfa:	e841 2300 	strex	r3, r2, [r1]
 8008bfe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008c00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1e3      	bne.n	8008bce <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2220      	movs	r2, #32
 8008c0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2200      	movs	r2, #0
 8008c12:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a60      	ldr	r2, [pc, #384]	@ (8008da0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d021      	beq.n	8008c68 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d01a      	beq.n	8008c68 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c3a:	e853 3f00 	ldrex	r3, [r3]
 8008c3e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008c40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c42:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008c46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	461a      	mov	r2, r3
 8008c50:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008c54:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008c56:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c58:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008c5a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008c5c:	e841 2300 	strex	r3, r2, [r1]
 8008c60:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008c62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1e4      	bne.n	8008c32 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d130      	bne.n	8008cd2 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c7e:	e853 3f00 	ldrex	r3, [r3]
 8008c82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c86:	f023 0310 	bic.w	r3, r3, #16
 8008c8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	461a      	mov	r2, r3
 8008c94:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008c98:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c9a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ca0:	e841 2300 	strex	r3, r2, [r1]
 8008ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d1e4      	bne.n	8008c76 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	69db      	ldr	r3, [r3, #28]
 8008cb2:	f003 0310 	and.w	r3, r3, #16
 8008cb6:	2b10      	cmp	r3, #16
 8008cb8:	d103      	bne.n	8008cc2 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2210      	movs	r2, #16
 8008cc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008cc8:	4619      	mov	r1, r3
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f7fe fa58 	bl	8007180 <HAL_UARTEx_RxEventCallback>
 8008cd0:	e002      	b.n	8008cd8 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f7f7 ff74 	bl	8000bc0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008cd8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d006      	beq.n	8008cee <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8008ce0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008ce4:	f003 0320 	and.w	r3, r3, #32
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	f47f aecd 	bne.w	8008a88 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008cf4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008cf8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d049      	beq.n	8008d94 <UART_RxISR_16BIT_FIFOEN+0x354>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008d06:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d242      	bcs.n	8008d94 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	3308      	adds	r3, #8
 8008d14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d18:	e853 3f00 	ldrex	r3, [r3]
 8008d1c:	623b      	str	r3, [r7, #32]
   return(result);
 8008d1e:	6a3b      	ldr	r3, [r7, #32]
 8008d20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	3308      	adds	r3, #8
 8008d2e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008d32:	633a      	str	r2, [r7, #48]	@ 0x30
 8008d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d3a:	e841 2300 	strex	r3, r2, [r1]
 8008d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d1e3      	bne.n	8008d0e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a16      	ldr	r2, [pc, #88]	@ (8008da4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008d4a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	e853 3f00 	ldrex	r3, [r3]
 8008d58:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f043 0320 	orr.w	r3, r3, #32
 8008d60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	461a      	mov	r2, r3
 8008d6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008d6e:	61fb      	str	r3, [r7, #28]
 8008d70:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d72:	69b9      	ldr	r1, [r7, #24]
 8008d74:	69fa      	ldr	r2, [r7, #28]
 8008d76:	e841 2300 	strex	r3, r2, [r1]
 8008d7a:	617b      	str	r3, [r7, #20]
   return(result);
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d1e4      	bne.n	8008d4c <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d82:	e007      	b.n	8008d94 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	699a      	ldr	r2, [r3, #24]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f042 0208 	orr.w	r2, r2, #8
 8008d92:	619a      	str	r2, [r3, #24]
}
 8008d94:	bf00      	nop
 8008d96:	37b8      	adds	r7, #184	@ 0xb8
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	effffffe 	.word	0xeffffffe
 8008da0:	58000c00 	.word	0x58000c00
 8008da4:	08008529 	.word	0x08008529

08008da8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008db0:	bf00      	nop
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008dc4:	bf00      	nop
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008dd8:	bf00      	nop
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b085      	sub	sp, #20
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d101      	bne.n	8008dfa <HAL_UARTEx_DisableFifoMode+0x16>
 8008df6:	2302      	movs	r3, #2
 8008df8:	e027      	b.n	8008e4a <HAL_UARTEx_DisableFifoMode+0x66>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2224      	movs	r2, #36	@ 0x24
 8008e06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f022 0201 	bic.w	r2, r2, #1
 8008e20:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008e28:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2220      	movs	r2, #32
 8008e3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2200      	movs	r2, #0
 8008e44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3714      	adds	r7, #20
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr

08008e56 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b084      	sub	sp, #16
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
 8008e5e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d101      	bne.n	8008e6e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008e6a:	2302      	movs	r3, #2
 8008e6c:	e02d      	b.n	8008eca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2201      	movs	r2, #1
 8008e72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2224      	movs	r2, #36	@ 0x24
 8008e7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f022 0201 	bic.w	r2, r2, #1
 8008e94:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	683a      	ldr	r2, [r7, #0]
 8008ea6:	430a      	orrs	r2, r1
 8008ea8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 f850 	bl	8008f50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2220      	movs	r2, #32
 8008ebc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ec8:	2300      	movs	r3, #0
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b084      	sub	sp, #16
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
 8008eda:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d101      	bne.n	8008eea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008ee6:	2302      	movs	r3, #2
 8008ee8:	e02d      	b.n	8008f46 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2201      	movs	r2, #1
 8008eee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2224      	movs	r2, #36	@ 0x24
 8008ef6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f022 0201 	bic.w	r2, r2, #1
 8008f10:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	683a      	ldr	r2, [r7, #0]
 8008f22:	430a      	orrs	r2, r1
 8008f24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 f812 	bl	8008f50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	68fa      	ldr	r2, [r7, #12]
 8008f32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2220      	movs	r2, #32
 8008f38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
	...

08008f50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b085      	sub	sp, #20
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d108      	bne.n	8008f72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2201      	movs	r2, #1
 8008f64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008f70:	e031      	b.n	8008fd6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008f72:	2310      	movs	r3, #16
 8008f74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008f76:	2310      	movs	r3, #16
 8008f78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	0e5b      	lsrs	r3, r3, #25
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	f003 0307 	and.w	r3, r3, #7
 8008f88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	0f5b      	lsrs	r3, r3, #29
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	f003 0307 	and.w	r3, r3, #7
 8008f98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f9a:	7bbb      	ldrb	r3, [r7, #14]
 8008f9c:	7b3a      	ldrb	r2, [r7, #12]
 8008f9e:	4911      	ldr	r1, [pc, #68]	@ (8008fe4 <UARTEx_SetNbDataToProcess+0x94>)
 8008fa0:	5c8a      	ldrb	r2, [r1, r2]
 8008fa2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008fa6:	7b3a      	ldrb	r2, [r7, #12]
 8008fa8:	490f      	ldr	r1, [pc, #60]	@ (8008fe8 <UARTEx_SetNbDataToProcess+0x98>)
 8008faa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008fac:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fb0:	b29a      	uxth	r2, r3
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008fb8:	7bfb      	ldrb	r3, [r7, #15]
 8008fba:	7b7a      	ldrb	r2, [r7, #13]
 8008fbc:	4909      	ldr	r1, [pc, #36]	@ (8008fe4 <UARTEx_SetNbDataToProcess+0x94>)
 8008fbe:	5c8a      	ldrb	r2, [r1, r2]
 8008fc0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008fc4:	7b7a      	ldrb	r2, [r7, #13]
 8008fc6:	4908      	ldr	r1, [pc, #32]	@ (8008fe8 <UARTEx_SetNbDataToProcess+0x98>)
 8008fc8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008fca:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008fd6:	bf00      	nop
 8008fd8:	3714      	adds	r7, #20
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	0800d528 	.word	0x0800d528
 8008fe8:	0800d530 	.word	0x0800d530

08008fec <__cvt>:
 8008fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fee:	ed2d 8b02 	vpush	{d8}
 8008ff2:	eeb0 8b40 	vmov.f64	d8, d0
 8008ff6:	b085      	sub	sp, #20
 8008ff8:	4617      	mov	r7, r2
 8008ffa:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8008ffc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008ffe:	ee18 2a90 	vmov	r2, s17
 8009002:	f025 0520 	bic.w	r5, r5, #32
 8009006:	2a00      	cmp	r2, #0
 8009008:	bfb6      	itet	lt
 800900a:	222d      	movlt	r2, #45	@ 0x2d
 800900c:	2200      	movge	r2, #0
 800900e:	eeb1 8b40 	vneglt.f64	d8, d0
 8009012:	2d46      	cmp	r5, #70	@ 0x46
 8009014:	460c      	mov	r4, r1
 8009016:	701a      	strb	r2, [r3, #0]
 8009018:	d004      	beq.n	8009024 <__cvt+0x38>
 800901a:	2d45      	cmp	r5, #69	@ 0x45
 800901c:	d100      	bne.n	8009020 <__cvt+0x34>
 800901e:	3401      	adds	r4, #1
 8009020:	2102      	movs	r1, #2
 8009022:	e000      	b.n	8009026 <__cvt+0x3a>
 8009024:	2103      	movs	r1, #3
 8009026:	ab03      	add	r3, sp, #12
 8009028:	9301      	str	r3, [sp, #4]
 800902a:	ab02      	add	r3, sp, #8
 800902c:	9300      	str	r3, [sp, #0]
 800902e:	4622      	mov	r2, r4
 8009030:	4633      	mov	r3, r6
 8009032:	eeb0 0b48 	vmov.f64	d0, d8
 8009036:	f001 f84f 	bl	800a0d8 <_dtoa_r>
 800903a:	2d47      	cmp	r5, #71	@ 0x47
 800903c:	d114      	bne.n	8009068 <__cvt+0x7c>
 800903e:	07fb      	lsls	r3, r7, #31
 8009040:	d50a      	bpl.n	8009058 <__cvt+0x6c>
 8009042:	1902      	adds	r2, r0, r4
 8009044:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800904c:	bf08      	it	eq
 800904e:	9203      	streq	r2, [sp, #12]
 8009050:	2130      	movs	r1, #48	@ 0x30
 8009052:	9b03      	ldr	r3, [sp, #12]
 8009054:	4293      	cmp	r3, r2
 8009056:	d319      	bcc.n	800908c <__cvt+0xa0>
 8009058:	9b03      	ldr	r3, [sp, #12]
 800905a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800905c:	1a1b      	subs	r3, r3, r0
 800905e:	6013      	str	r3, [r2, #0]
 8009060:	b005      	add	sp, #20
 8009062:	ecbd 8b02 	vpop	{d8}
 8009066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009068:	2d46      	cmp	r5, #70	@ 0x46
 800906a:	eb00 0204 	add.w	r2, r0, r4
 800906e:	d1e9      	bne.n	8009044 <__cvt+0x58>
 8009070:	7803      	ldrb	r3, [r0, #0]
 8009072:	2b30      	cmp	r3, #48	@ 0x30
 8009074:	d107      	bne.n	8009086 <__cvt+0x9a>
 8009076:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800907a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800907e:	bf1c      	itt	ne
 8009080:	f1c4 0401 	rsbne	r4, r4, #1
 8009084:	6034      	strne	r4, [r6, #0]
 8009086:	6833      	ldr	r3, [r6, #0]
 8009088:	441a      	add	r2, r3
 800908a:	e7db      	b.n	8009044 <__cvt+0x58>
 800908c:	1c5c      	adds	r4, r3, #1
 800908e:	9403      	str	r4, [sp, #12]
 8009090:	7019      	strb	r1, [r3, #0]
 8009092:	e7de      	b.n	8009052 <__cvt+0x66>

08009094 <__exponent>:
 8009094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009096:	2900      	cmp	r1, #0
 8009098:	bfba      	itte	lt
 800909a:	4249      	neglt	r1, r1
 800909c:	232d      	movlt	r3, #45	@ 0x2d
 800909e:	232b      	movge	r3, #43	@ 0x2b
 80090a0:	2909      	cmp	r1, #9
 80090a2:	7002      	strb	r2, [r0, #0]
 80090a4:	7043      	strb	r3, [r0, #1]
 80090a6:	dd29      	ble.n	80090fc <__exponent+0x68>
 80090a8:	f10d 0307 	add.w	r3, sp, #7
 80090ac:	461d      	mov	r5, r3
 80090ae:	270a      	movs	r7, #10
 80090b0:	461a      	mov	r2, r3
 80090b2:	fbb1 f6f7 	udiv	r6, r1, r7
 80090b6:	fb07 1416 	mls	r4, r7, r6, r1
 80090ba:	3430      	adds	r4, #48	@ 0x30
 80090bc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80090c0:	460c      	mov	r4, r1
 80090c2:	2c63      	cmp	r4, #99	@ 0x63
 80090c4:	f103 33ff 	add.w	r3, r3, #4294967295
 80090c8:	4631      	mov	r1, r6
 80090ca:	dcf1      	bgt.n	80090b0 <__exponent+0x1c>
 80090cc:	3130      	adds	r1, #48	@ 0x30
 80090ce:	1e94      	subs	r4, r2, #2
 80090d0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80090d4:	1c41      	adds	r1, r0, #1
 80090d6:	4623      	mov	r3, r4
 80090d8:	42ab      	cmp	r3, r5
 80090da:	d30a      	bcc.n	80090f2 <__exponent+0x5e>
 80090dc:	f10d 0309 	add.w	r3, sp, #9
 80090e0:	1a9b      	subs	r3, r3, r2
 80090e2:	42ac      	cmp	r4, r5
 80090e4:	bf88      	it	hi
 80090e6:	2300      	movhi	r3, #0
 80090e8:	3302      	adds	r3, #2
 80090ea:	4403      	add	r3, r0
 80090ec:	1a18      	subs	r0, r3, r0
 80090ee:	b003      	add	sp, #12
 80090f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090f2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80090f6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80090fa:	e7ed      	b.n	80090d8 <__exponent+0x44>
 80090fc:	2330      	movs	r3, #48	@ 0x30
 80090fe:	3130      	adds	r1, #48	@ 0x30
 8009100:	7083      	strb	r3, [r0, #2]
 8009102:	70c1      	strb	r1, [r0, #3]
 8009104:	1d03      	adds	r3, r0, #4
 8009106:	e7f1      	b.n	80090ec <__exponent+0x58>

08009108 <_printf_float>:
 8009108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800910c:	b08d      	sub	sp, #52	@ 0x34
 800910e:	460c      	mov	r4, r1
 8009110:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009114:	4616      	mov	r6, r2
 8009116:	461f      	mov	r7, r3
 8009118:	4605      	mov	r5, r0
 800911a:	f000 fed7 	bl	8009ecc <_localeconv_r>
 800911e:	f8d0 b000 	ldr.w	fp, [r0]
 8009122:	4658      	mov	r0, fp
 8009124:	f7f7 f92c 	bl	8000380 <strlen>
 8009128:	2300      	movs	r3, #0
 800912a:	930a      	str	r3, [sp, #40]	@ 0x28
 800912c:	f8d8 3000 	ldr.w	r3, [r8]
 8009130:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009134:	6822      	ldr	r2, [r4, #0]
 8009136:	9005      	str	r0, [sp, #20]
 8009138:	3307      	adds	r3, #7
 800913a:	f023 0307 	bic.w	r3, r3, #7
 800913e:	f103 0108 	add.w	r1, r3, #8
 8009142:	f8c8 1000 	str.w	r1, [r8]
 8009146:	ed93 0b00 	vldr	d0, [r3]
 800914a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80093a8 <_printf_float+0x2a0>
 800914e:	eeb0 7bc0 	vabs.f64	d7, d0
 8009152:	eeb4 7b46 	vcmp.f64	d7, d6
 8009156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800915a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800915e:	dd24      	ble.n	80091aa <_printf_float+0xa2>
 8009160:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009168:	d502      	bpl.n	8009170 <_printf_float+0x68>
 800916a:	232d      	movs	r3, #45	@ 0x2d
 800916c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009170:	498f      	ldr	r1, [pc, #572]	@ (80093b0 <_printf_float+0x2a8>)
 8009172:	4b90      	ldr	r3, [pc, #576]	@ (80093b4 <_printf_float+0x2ac>)
 8009174:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8009178:	bf94      	ite	ls
 800917a:	4688      	movls	r8, r1
 800917c:	4698      	movhi	r8, r3
 800917e:	f022 0204 	bic.w	r2, r2, #4
 8009182:	2303      	movs	r3, #3
 8009184:	6123      	str	r3, [r4, #16]
 8009186:	6022      	str	r2, [r4, #0]
 8009188:	f04f 0a00 	mov.w	sl, #0
 800918c:	9700      	str	r7, [sp, #0]
 800918e:	4633      	mov	r3, r6
 8009190:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009192:	4621      	mov	r1, r4
 8009194:	4628      	mov	r0, r5
 8009196:	f000 f9d1 	bl	800953c <_printf_common>
 800919a:	3001      	adds	r0, #1
 800919c:	f040 8089 	bne.w	80092b2 <_printf_float+0x1aa>
 80091a0:	f04f 30ff 	mov.w	r0, #4294967295
 80091a4:	b00d      	add	sp, #52	@ 0x34
 80091a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091aa:	eeb4 0b40 	vcmp.f64	d0, d0
 80091ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091b2:	d709      	bvc.n	80091c8 <_printf_float+0xc0>
 80091b4:	ee10 3a90 	vmov	r3, s1
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	bfbc      	itt	lt
 80091bc:	232d      	movlt	r3, #45	@ 0x2d
 80091be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80091c2:	497d      	ldr	r1, [pc, #500]	@ (80093b8 <_printf_float+0x2b0>)
 80091c4:	4b7d      	ldr	r3, [pc, #500]	@ (80093bc <_printf_float+0x2b4>)
 80091c6:	e7d5      	b.n	8009174 <_printf_float+0x6c>
 80091c8:	6863      	ldr	r3, [r4, #4]
 80091ca:	1c59      	adds	r1, r3, #1
 80091cc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80091d0:	d139      	bne.n	8009246 <_printf_float+0x13e>
 80091d2:	2306      	movs	r3, #6
 80091d4:	6063      	str	r3, [r4, #4]
 80091d6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80091da:	2300      	movs	r3, #0
 80091dc:	6022      	str	r2, [r4, #0]
 80091de:	9303      	str	r3, [sp, #12]
 80091e0:	ab0a      	add	r3, sp, #40	@ 0x28
 80091e2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80091e6:	ab09      	add	r3, sp, #36	@ 0x24
 80091e8:	9300      	str	r3, [sp, #0]
 80091ea:	6861      	ldr	r1, [r4, #4]
 80091ec:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80091f0:	4628      	mov	r0, r5
 80091f2:	f7ff fefb 	bl	8008fec <__cvt>
 80091f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80091fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80091fc:	4680      	mov	r8, r0
 80091fe:	d129      	bne.n	8009254 <_printf_float+0x14c>
 8009200:	1cc8      	adds	r0, r1, #3
 8009202:	db02      	blt.n	800920a <_printf_float+0x102>
 8009204:	6863      	ldr	r3, [r4, #4]
 8009206:	4299      	cmp	r1, r3
 8009208:	dd41      	ble.n	800928e <_printf_float+0x186>
 800920a:	f1a9 0902 	sub.w	r9, r9, #2
 800920e:	fa5f f989 	uxtb.w	r9, r9
 8009212:	3901      	subs	r1, #1
 8009214:	464a      	mov	r2, r9
 8009216:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800921a:	9109      	str	r1, [sp, #36]	@ 0x24
 800921c:	f7ff ff3a 	bl	8009094 <__exponent>
 8009220:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009222:	1813      	adds	r3, r2, r0
 8009224:	2a01      	cmp	r2, #1
 8009226:	4682      	mov	sl, r0
 8009228:	6123      	str	r3, [r4, #16]
 800922a:	dc02      	bgt.n	8009232 <_printf_float+0x12a>
 800922c:	6822      	ldr	r2, [r4, #0]
 800922e:	07d2      	lsls	r2, r2, #31
 8009230:	d501      	bpl.n	8009236 <_printf_float+0x12e>
 8009232:	3301      	adds	r3, #1
 8009234:	6123      	str	r3, [r4, #16]
 8009236:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800923a:	2b00      	cmp	r3, #0
 800923c:	d0a6      	beq.n	800918c <_printf_float+0x84>
 800923e:	232d      	movs	r3, #45	@ 0x2d
 8009240:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009244:	e7a2      	b.n	800918c <_printf_float+0x84>
 8009246:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800924a:	d1c4      	bne.n	80091d6 <_printf_float+0xce>
 800924c:	2b00      	cmp	r3, #0
 800924e:	d1c2      	bne.n	80091d6 <_printf_float+0xce>
 8009250:	2301      	movs	r3, #1
 8009252:	e7bf      	b.n	80091d4 <_printf_float+0xcc>
 8009254:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009258:	d9db      	bls.n	8009212 <_printf_float+0x10a>
 800925a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800925e:	d118      	bne.n	8009292 <_printf_float+0x18a>
 8009260:	2900      	cmp	r1, #0
 8009262:	6863      	ldr	r3, [r4, #4]
 8009264:	dd0b      	ble.n	800927e <_printf_float+0x176>
 8009266:	6121      	str	r1, [r4, #16]
 8009268:	b913      	cbnz	r3, 8009270 <_printf_float+0x168>
 800926a:	6822      	ldr	r2, [r4, #0]
 800926c:	07d0      	lsls	r0, r2, #31
 800926e:	d502      	bpl.n	8009276 <_printf_float+0x16e>
 8009270:	3301      	adds	r3, #1
 8009272:	440b      	add	r3, r1
 8009274:	6123      	str	r3, [r4, #16]
 8009276:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009278:	f04f 0a00 	mov.w	sl, #0
 800927c:	e7db      	b.n	8009236 <_printf_float+0x12e>
 800927e:	b913      	cbnz	r3, 8009286 <_printf_float+0x17e>
 8009280:	6822      	ldr	r2, [r4, #0]
 8009282:	07d2      	lsls	r2, r2, #31
 8009284:	d501      	bpl.n	800928a <_printf_float+0x182>
 8009286:	3302      	adds	r3, #2
 8009288:	e7f4      	b.n	8009274 <_printf_float+0x16c>
 800928a:	2301      	movs	r3, #1
 800928c:	e7f2      	b.n	8009274 <_printf_float+0x16c>
 800928e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8009292:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009294:	4299      	cmp	r1, r3
 8009296:	db05      	blt.n	80092a4 <_printf_float+0x19c>
 8009298:	6823      	ldr	r3, [r4, #0]
 800929a:	6121      	str	r1, [r4, #16]
 800929c:	07d8      	lsls	r0, r3, #31
 800929e:	d5ea      	bpl.n	8009276 <_printf_float+0x16e>
 80092a0:	1c4b      	adds	r3, r1, #1
 80092a2:	e7e7      	b.n	8009274 <_printf_float+0x16c>
 80092a4:	2900      	cmp	r1, #0
 80092a6:	bfd4      	ite	le
 80092a8:	f1c1 0202 	rsble	r2, r1, #2
 80092ac:	2201      	movgt	r2, #1
 80092ae:	4413      	add	r3, r2
 80092b0:	e7e0      	b.n	8009274 <_printf_float+0x16c>
 80092b2:	6823      	ldr	r3, [r4, #0]
 80092b4:	055a      	lsls	r2, r3, #21
 80092b6:	d407      	bmi.n	80092c8 <_printf_float+0x1c0>
 80092b8:	6923      	ldr	r3, [r4, #16]
 80092ba:	4642      	mov	r2, r8
 80092bc:	4631      	mov	r1, r6
 80092be:	4628      	mov	r0, r5
 80092c0:	47b8      	blx	r7
 80092c2:	3001      	adds	r0, #1
 80092c4:	d12a      	bne.n	800931c <_printf_float+0x214>
 80092c6:	e76b      	b.n	80091a0 <_printf_float+0x98>
 80092c8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80092cc:	f240 80e0 	bls.w	8009490 <_printf_float+0x388>
 80092d0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80092d4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80092d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092dc:	d133      	bne.n	8009346 <_printf_float+0x23e>
 80092de:	4a38      	ldr	r2, [pc, #224]	@ (80093c0 <_printf_float+0x2b8>)
 80092e0:	2301      	movs	r3, #1
 80092e2:	4631      	mov	r1, r6
 80092e4:	4628      	mov	r0, r5
 80092e6:	47b8      	blx	r7
 80092e8:	3001      	adds	r0, #1
 80092ea:	f43f af59 	beq.w	80091a0 <_printf_float+0x98>
 80092ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80092f2:	4543      	cmp	r3, r8
 80092f4:	db02      	blt.n	80092fc <_printf_float+0x1f4>
 80092f6:	6823      	ldr	r3, [r4, #0]
 80092f8:	07d8      	lsls	r0, r3, #31
 80092fa:	d50f      	bpl.n	800931c <_printf_float+0x214>
 80092fc:	9b05      	ldr	r3, [sp, #20]
 80092fe:	465a      	mov	r2, fp
 8009300:	4631      	mov	r1, r6
 8009302:	4628      	mov	r0, r5
 8009304:	47b8      	blx	r7
 8009306:	3001      	adds	r0, #1
 8009308:	f43f af4a 	beq.w	80091a0 <_printf_float+0x98>
 800930c:	f04f 0900 	mov.w	r9, #0
 8009310:	f108 38ff 	add.w	r8, r8, #4294967295
 8009314:	f104 0a1a 	add.w	sl, r4, #26
 8009318:	45c8      	cmp	r8, r9
 800931a:	dc09      	bgt.n	8009330 <_printf_float+0x228>
 800931c:	6823      	ldr	r3, [r4, #0]
 800931e:	079b      	lsls	r3, r3, #30
 8009320:	f100 8107 	bmi.w	8009532 <_printf_float+0x42a>
 8009324:	68e0      	ldr	r0, [r4, #12]
 8009326:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009328:	4298      	cmp	r0, r3
 800932a:	bfb8      	it	lt
 800932c:	4618      	movlt	r0, r3
 800932e:	e739      	b.n	80091a4 <_printf_float+0x9c>
 8009330:	2301      	movs	r3, #1
 8009332:	4652      	mov	r2, sl
 8009334:	4631      	mov	r1, r6
 8009336:	4628      	mov	r0, r5
 8009338:	47b8      	blx	r7
 800933a:	3001      	adds	r0, #1
 800933c:	f43f af30 	beq.w	80091a0 <_printf_float+0x98>
 8009340:	f109 0901 	add.w	r9, r9, #1
 8009344:	e7e8      	b.n	8009318 <_printf_float+0x210>
 8009346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009348:	2b00      	cmp	r3, #0
 800934a:	dc3b      	bgt.n	80093c4 <_printf_float+0x2bc>
 800934c:	4a1c      	ldr	r2, [pc, #112]	@ (80093c0 <_printf_float+0x2b8>)
 800934e:	2301      	movs	r3, #1
 8009350:	4631      	mov	r1, r6
 8009352:	4628      	mov	r0, r5
 8009354:	47b8      	blx	r7
 8009356:	3001      	adds	r0, #1
 8009358:	f43f af22 	beq.w	80091a0 <_printf_float+0x98>
 800935c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009360:	ea59 0303 	orrs.w	r3, r9, r3
 8009364:	d102      	bne.n	800936c <_printf_float+0x264>
 8009366:	6823      	ldr	r3, [r4, #0]
 8009368:	07d9      	lsls	r1, r3, #31
 800936a:	d5d7      	bpl.n	800931c <_printf_float+0x214>
 800936c:	9b05      	ldr	r3, [sp, #20]
 800936e:	465a      	mov	r2, fp
 8009370:	4631      	mov	r1, r6
 8009372:	4628      	mov	r0, r5
 8009374:	47b8      	blx	r7
 8009376:	3001      	adds	r0, #1
 8009378:	f43f af12 	beq.w	80091a0 <_printf_float+0x98>
 800937c:	f04f 0a00 	mov.w	sl, #0
 8009380:	f104 0b1a 	add.w	fp, r4, #26
 8009384:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009386:	425b      	negs	r3, r3
 8009388:	4553      	cmp	r3, sl
 800938a:	dc01      	bgt.n	8009390 <_printf_float+0x288>
 800938c:	464b      	mov	r3, r9
 800938e:	e794      	b.n	80092ba <_printf_float+0x1b2>
 8009390:	2301      	movs	r3, #1
 8009392:	465a      	mov	r2, fp
 8009394:	4631      	mov	r1, r6
 8009396:	4628      	mov	r0, r5
 8009398:	47b8      	blx	r7
 800939a:	3001      	adds	r0, #1
 800939c:	f43f af00 	beq.w	80091a0 <_printf_float+0x98>
 80093a0:	f10a 0a01 	add.w	sl, sl, #1
 80093a4:	e7ee      	b.n	8009384 <_printf_float+0x27c>
 80093a6:	bf00      	nop
 80093a8:	ffffffff 	.word	0xffffffff
 80093ac:	7fefffff 	.word	0x7fefffff
 80093b0:	0800d538 	.word	0x0800d538
 80093b4:	0800d53c 	.word	0x0800d53c
 80093b8:	0800d540 	.word	0x0800d540
 80093bc:	0800d544 	.word	0x0800d544
 80093c0:	0800d548 	.word	0x0800d548
 80093c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80093c6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80093ca:	4553      	cmp	r3, sl
 80093cc:	bfa8      	it	ge
 80093ce:	4653      	movge	r3, sl
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	4699      	mov	r9, r3
 80093d4:	dc37      	bgt.n	8009446 <_printf_float+0x33e>
 80093d6:	2300      	movs	r3, #0
 80093d8:	9307      	str	r3, [sp, #28]
 80093da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093de:	f104 021a 	add.w	r2, r4, #26
 80093e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80093e4:	9907      	ldr	r1, [sp, #28]
 80093e6:	9306      	str	r3, [sp, #24]
 80093e8:	eba3 0309 	sub.w	r3, r3, r9
 80093ec:	428b      	cmp	r3, r1
 80093ee:	dc31      	bgt.n	8009454 <_printf_float+0x34c>
 80093f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093f2:	459a      	cmp	sl, r3
 80093f4:	dc3b      	bgt.n	800946e <_printf_float+0x366>
 80093f6:	6823      	ldr	r3, [r4, #0]
 80093f8:	07da      	lsls	r2, r3, #31
 80093fa:	d438      	bmi.n	800946e <_printf_float+0x366>
 80093fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093fe:	ebaa 0903 	sub.w	r9, sl, r3
 8009402:	9b06      	ldr	r3, [sp, #24]
 8009404:	ebaa 0303 	sub.w	r3, sl, r3
 8009408:	4599      	cmp	r9, r3
 800940a:	bfa8      	it	ge
 800940c:	4699      	movge	r9, r3
 800940e:	f1b9 0f00 	cmp.w	r9, #0
 8009412:	dc34      	bgt.n	800947e <_printf_float+0x376>
 8009414:	f04f 0800 	mov.w	r8, #0
 8009418:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800941c:	f104 0b1a 	add.w	fp, r4, #26
 8009420:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009422:	ebaa 0303 	sub.w	r3, sl, r3
 8009426:	eba3 0309 	sub.w	r3, r3, r9
 800942a:	4543      	cmp	r3, r8
 800942c:	f77f af76 	ble.w	800931c <_printf_float+0x214>
 8009430:	2301      	movs	r3, #1
 8009432:	465a      	mov	r2, fp
 8009434:	4631      	mov	r1, r6
 8009436:	4628      	mov	r0, r5
 8009438:	47b8      	blx	r7
 800943a:	3001      	adds	r0, #1
 800943c:	f43f aeb0 	beq.w	80091a0 <_printf_float+0x98>
 8009440:	f108 0801 	add.w	r8, r8, #1
 8009444:	e7ec      	b.n	8009420 <_printf_float+0x318>
 8009446:	4642      	mov	r2, r8
 8009448:	4631      	mov	r1, r6
 800944a:	4628      	mov	r0, r5
 800944c:	47b8      	blx	r7
 800944e:	3001      	adds	r0, #1
 8009450:	d1c1      	bne.n	80093d6 <_printf_float+0x2ce>
 8009452:	e6a5      	b.n	80091a0 <_printf_float+0x98>
 8009454:	2301      	movs	r3, #1
 8009456:	4631      	mov	r1, r6
 8009458:	4628      	mov	r0, r5
 800945a:	9206      	str	r2, [sp, #24]
 800945c:	47b8      	blx	r7
 800945e:	3001      	adds	r0, #1
 8009460:	f43f ae9e 	beq.w	80091a0 <_printf_float+0x98>
 8009464:	9b07      	ldr	r3, [sp, #28]
 8009466:	9a06      	ldr	r2, [sp, #24]
 8009468:	3301      	adds	r3, #1
 800946a:	9307      	str	r3, [sp, #28]
 800946c:	e7b9      	b.n	80093e2 <_printf_float+0x2da>
 800946e:	9b05      	ldr	r3, [sp, #20]
 8009470:	465a      	mov	r2, fp
 8009472:	4631      	mov	r1, r6
 8009474:	4628      	mov	r0, r5
 8009476:	47b8      	blx	r7
 8009478:	3001      	adds	r0, #1
 800947a:	d1bf      	bne.n	80093fc <_printf_float+0x2f4>
 800947c:	e690      	b.n	80091a0 <_printf_float+0x98>
 800947e:	9a06      	ldr	r2, [sp, #24]
 8009480:	464b      	mov	r3, r9
 8009482:	4442      	add	r2, r8
 8009484:	4631      	mov	r1, r6
 8009486:	4628      	mov	r0, r5
 8009488:	47b8      	blx	r7
 800948a:	3001      	adds	r0, #1
 800948c:	d1c2      	bne.n	8009414 <_printf_float+0x30c>
 800948e:	e687      	b.n	80091a0 <_printf_float+0x98>
 8009490:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8009494:	f1b9 0f01 	cmp.w	r9, #1
 8009498:	dc01      	bgt.n	800949e <_printf_float+0x396>
 800949a:	07db      	lsls	r3, r3, #31
 800949c:	d536      	bpl.n	800950c <_printf_float+0x404>
 800949e:	2301      	movs	r3, #1
 80094a0:	4642      	mov	r2, r8
 80094a2:	4631      	mov	r1, r6
 80094a4:	4628      	mov	r0, r5
 80094a6:	47b8      	blx	r7
 80094a8:	3001      	adds	r0, #1
 80094aa:	f43f ae79 	beq.w	80091a0 <_printf_float+0x98>
 80094ae:	9b05      	ldr	r3, [sp, #20]
 80094b0:	465a      	mov	r2, fp
 80094b2:	4631      	mov	r1, r6
 80094b4:	4628      	mov	r0, r5
 80094b6:	47b8      	blx	r7
 80094b8:	3001      	adds	r0, #1
 80094ba:	f43f ae71 	beq.w	80091a0 <_printf_float+0x98>
 80094be:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80094c2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80094c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094ca:	f109 39ff 	add.w	r9, r9, #4294967295
 80094ce:	d018      	beq.n	8009502 <_printf_float+0x3fa>
 80094d0:	464b      	mov	r3, r9
 80094d2:	f108 0201 	add.w	r2, r8, #1
 80094d6:	4631      	mov	r1, r6
 80094d8:	4628      	mov	r0, r5
 80094da:	47b8      	blx	r7
 80094dc:	3001      	adds	r0, #1
 80094de:	d10c      	bne.n	80094fa <_printf_float+0x3f2>
 80094e0:	e65e      	b.n	80091a0 <_printf_float+0x98>
 80094e2:	2301      	movs	r3, #1
 80094e4:	465a      	mov	r2, fp
 80094e6:	4631      	mov	r1, r6
 80094e8:	4628      	mov	r0, r5
 80094ea:	47b8      	blx	r7
 80094ec:	3001      	adds	r0, #1
 80094ee:	f43f ae57 	beq.w	80091a0 <_printf_float+0x98>
 80094f2:	f108 0801 	add.w	r8, r8, #1
 80094f6:	45c8      	cmp	r8, r9
 80094f8:	dbf3      	blt.n	80094e2 <_printf_float+0x3da>
 80094fa:	4653      	mov	r3, sl
 80094fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009500:	e6dc      	b.n	80092bc <_printf_float+0x1b4>
 8009502:	f04f 0800 	mov.w	r8, #0
 8009506:	f104 0b1a 	add.w	fp, r4, #26
 800950a:	e7f4      	b.n	80094f6 <_printf_float+0x3ee>
 800950c:	2301      	movs	r3, #1
 800950e:	4642      	mov	r2, r8
 8009510:	e7e1      	b.n	80094d6 <_printf_float+0x3ce>
 8009512:	2301      	movs	r3, #1
 8009514:	464a      	mov	r2, r9
 8009516:	4631      	mov	r1, r6
 8009518:	4628      	mov	r0, r5
 800951a:	47b8      	blx	r7
 800951c:	3001      	adds	r0, #1
 800951e:	f43f ae3f 	beq.w	80091a0 <_printf_float+0x98>
 8009522:	f108 0801 	add.w	r8, r8, #1
 8009526:	68e3      	ldr	r3, [r4, #12]
 8009528:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800952a:	1a5b      	subs	r3, r3, r1
 800952c:	4543      	cmp	r3, r8
 800952e:	dcf0      	bgt.n	8009512 <_printf_float+0x40a>
 8009530:	e6f8      	b.n	8009324 <_printf_float+0x21c>
 8009532:	f04f 0800 	mov.w	r8, #0
 8009536:	f104 0919 	add.w	r9, r4, #25
 800953a:	e7f4      	b.n	8009526 <_printf_float+0x41e>

0800953c <_printf_common>:
 800953c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009540:	4616      	mov	r6, r2
 8009542:	4698      	mov	r8, r3
 8009544:	688a      	ldr	r2, [r1, #8]
 8009546:	690b      	ldr	r3, [r1, #16]
 8009548:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800954c:	4293      	cmp	r3, r2
 800954e:	bfb8      	it	lt
 8009550:	4613      	movlt	r3, r2
 8009552:	6033      	str	r3, [r6, #0]
 8009554:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009558:	4607      	mov	r7, r0
 800955a:	460c      	mov	r4, r1
 800955c:	b10a      	cbz	r2, 8009562 <_printf_common+0x26>
 800955e:	3301      	adds	r3, #1
 8009560:	6033      	str	r3, [r6, #0]
 8009562:	6823      	ldr	r3, [r4, #0]
 8009564:	0699      	lsls	r1, r3, #26
 8009566:	bf42      	ittt	mi
 8009568:	6833      	ldrmi	r3, [r6, #0]
 800956a:	3302      	addmi	r3, #2
 800956c:	6033      	strmi	r3, [r6, #0]
 800956e:	6825      	ldr	r5, [r4, #0]
 8009570:	f015 0506 	ands.w	r5, r5, #6
 8009574:	d106      	bne.n	8009584 <_printf_common+0x48>
 8009576:	f104 0a19 	add.w	sl, r4, #25
 800957a:	68e3      	ldr	r3, [r4, #12]
 800957c:	6832      	ldr	r2, [r6, #0]
 800957e:	1a9b      	subs	r3, r3, r2
 8009580:	42ab      	cmp	r3, r5
 8009582:	dc26      	bgt.n	80095d2 <_printf_common+0x96>
 8009584:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009588:	6822      	ldr	r2, [r4, #0]
 800958a:	3b00      	subs	r3, #0
 800958c:	bf18      	it	ne
 800958e:	2301      	movne	r3, #1
 8009590:	0692      	lsls	r2, r2, #26
 8009592:	d42b      	bmi.n	80095ec <_printf_common+0xb0>
 8009594:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009598:	4641      	mov	r1, r8
 800959a:	4638      	mov	r0, r7
 800959c:	47c8      	blx	r9
 800959e:	3001      	adds	r0, #1
 80095a0:	d01e      	beq.n	80095e0 <_printf_common+0xa4>
 80095a2:	6823      	ldr	r3, [r4, #0]
 80095a4:	6922      	ldr	r2, [r4, #16]
 80095a6:	f003 0306 	and.w	r3, r3, #6
 80095aa:	2b04      	cmp	r3, #4
 80095ac:	bf02      	ittt	eq
 80095ae:	68e5      	ldreq	r5, [r4, #12]
 80095b0:	6833      	ldreq	r3, [r6, #0]
 80095b2:	1aed      	subeq	r5, r5, r3
 80095b4:	68a3      	ldr	r3, [r4, #8]
 80095b6:	bf0c      	ite	eq
 80095b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095bc:	2500      	movne	r5, #0
 80095be:	4293      	cmp	r3, r2
 80095c0:	bfc4      	itt	gt
 80095c2:	1a9b      	subgt	r3, r3, r2
 80095c4:	18ed      	addgt	r5, r5, r3
 80095c6:	2600      	movs	r6, #0
 80095c8:	341a      	adds	r4, #26
 80095ca:	42b5      	cmp	r5, r6
 80095cc:	d11a      	bne.n	8009604 <_printf_common+0xc8>
 80095ce:	2000      	movs	r0, #0
 80095d0:	e008      	b.n	80095e4 <_printf_common+0xa8>
 80095d2:	2301      	movs	r3, #1
 80095d4:	4652      	mov	r2, sl
 80095d6:	4641      	mov	r1, r8
 80095d8:	4638      	mov	r0, r7
 80095da:	47c8      	blx	r9
 80095dc:	3001      	adds	r0, #1
 80095de:	d103      	bne.n	80095e8 <_printf_common+0xac>
 80095e0:	f04f 30ff 	mov.w	r0, #4294967295
 80095e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095e8:	3501      	adds	r5, #1
 80095ea:	e7c6      	b.n	800957a <_printf_common+0x3e>
 80095ec:	18e1      	adds	r1, r4, r3
 80095ee:	1c5a      	adds	r2, r3, #1
 80095f0:	2030      	movs	r0, #48	@ 0x30
 80095f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80095f6:	4422      	add	r2, r4
 80095f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80095fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009600:	3302      	adds	r3, #2
 8009602:	e7c7      	b.n	8009594 <_printf_common+0x58>
 8009604:	2301      	movs	r3, #1
 8009606:	4622      	mov	r2, r4
 8009608:	4641      	mov	r1, r8
 800960a:	4638      	mov	r0, r7
 800960c:	47c8      	blx	r9
 800960e:	3001      	adds	r0, #1
 8009610:	d0e6      	beq.n	80095e0 <_printf_common+0xa4>
 8009612:	3601      	adds	r6, #1
 8009614:	e7d9      	b.n	80095ca <_printf_common+0x8e>
	...

08009618 <_printf_i>:
 8009618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800961c:	7e0f      	ldrb	r7, [r1, #24]
 800961e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009620:	2f78      	cmp	r7, #120	@ 0x78
 8009622:	4691      	mov	r9, r2
 8009624:	4680      	mov	r8, r0
 8009626:	460c      	mov	r4, r1
 8009628:	469a      	mov	sl, r3
 800962a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800962e:	d807      	bhi.n	8009640 <_printf_i+0x28>
 8009630:	2f62      	cmp	r7, #98	@ 0x62
 8009632:	d80a      	bhi.n	800964a <_printf_i+0x32>
 8009634:	2f00      	cmp	r7, #0
 8009636:	f000 80d2 	beq.w	80097de <_printf_i+0x1c6>
 800963a:	2f58      	cmp	r7, #88	@ 0x58
 800963c:	f000 80b9 	beq.w	80097b2 <_printf_i+0x19a>
 8009640:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009644:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009648:	e03a      	b.n	80096c0 <_printf_i+0xa8>
 800964a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800964e:	2b15      	cmp	r3, #21
 8009650:	d8f6      	bhi.n	8009640 <_printf_i+0x28>
 8009652:	a101      	add	r1, pc, #4	@ (adr r1, 8009658 <_printf_i+0x40>)
 8009654:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009658:	080096b1 	.word	0x080096b1
 800965c:	080096c5 	.word	0x080096c5
 8009660:	08009641 	.word	0x08009641
 8009664:	08009641 	.word	0x08009641
 8009668:	08009641 	.word	0x08009641
 800966c:	08009641 	.word	0x08009641
 8009670:	080096c5 	.word	0x080096c5
 8009674:	08009641 	.word	0x08009641
 8009678:	08009641 	.word	0x08009641
 800967c:	08009641 	.word	0x08009641
 8009680:	08009641 	.word	0x08009641
 8009684:	080097c5 	.word	0x080097c5
 8009688:	080096ef 	.word	0x080096ef
 800968c:	0800977f 	.word	0x0800977f
 8009690:	08009641 	.word	0x08009641
 8009694:	08009641 	.word	0x08009641
 8009698:	080097e7 	.word	0x080097e7
 800969c:	08009641 	.word	0x08009641
 80096a0:	080096ef 	.word	0x080096ef
 80096a4:	08009641 	.word	0x08009641
 80096a8:	08009641 	.word	0x08009641
 80096ac:	08009787 	.word	0x08009787
 80096b0:	6833      	ldr	r3, [r6, #0]
 80096b2:	1d1a      	adds	r2, r3, #4
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	6032      	str	r2, [r6, #0]
 80096b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80096bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80096c0:	2301      	movs	r3, #1
 80096c2:	e09d      	b.n	8009800 <_printf_i+0x1e8>
 80096c4:	6833      	ldr	r3, [r6, #0]
 80096c6:	6820      	ldr	r0, [r4, #0]
 80096c8:	1d19      	adds	r1, r3, #4
 80096ca:	6031      	str	r1, [r6, #0]
 80096cc:	0606      	lsls	r6, r0, #24
 80096ce:	d501      	bpl.n	80096d4 <_printf_i+0xbc>
 80096d0:	681d      	ldr	r5, [r3, #0]
 80096d2:	e003      	b.n	80096dc <_printf_i+0xc4>
 80096d4:	0645      	lsls	r5, r0, #25
 80096d6:	d5fb      	bpl.n	80096d0 <_printf_i+0xb8>
 80096d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80096dc:	2d00      	cmp	r5, #0
 80096de:	da03      	bge.n	80096e8 <_printf_i+0xd0>
 80096e0:	232d      	movs	r3, #45	@ 0x2d
 80096e2:	426d      	negs	r5, r5
 80096e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096e8:	4859      	ldr	r0, [pc, #356]	@ (8009850 <_printf_i+0x238>)
 80096ea:	230a      	movs	r3, #10
 80096ec:	e011      	b.n	8009712 <_printf_i+0xfa>
 80096ee:	6821      	ldr	r1, [r4, #0]
 80096f0:	6833      	ldr	r3, [r6, #0]
 80096f2:	0608      	lsls	r0, r1, #24
 80096f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80096f8:	d402      	bmi.n	8009700 <_printf_i+0xe8>
 80096fa:	0649      	lsls	r1, r1, #25
 80096fc:	bf48      	it	mi
 80096fe:	b2ad      	uxthmi	r5, r5
 8009700:	2f6f      	cmp	r7, #111	@ 0x6f
 8009702:	4853      	ldr	r0, [pc, #332]	@ (8009850 <_printf_i+0x238>)
 8009704:	6033      	str	r3, [r6, #0]
 8009706:	bf14      	ite	ne
 8009708:	230a      	movne	r3, #10
 800970a:	2308      	moveq	r3, #8
 800970c:	2100      	movs	r1, #0
 800970e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009712:	6866      	ldr	r6, [r4, #4]
 8009714:	60a6      	str	r6, [r4, #8]
 8009716:	2e00      	cmp	r6, #0
 8009718:	bfa2      	ittt	ge
 800971a:	6821      	ldrge	r1, [r4, #0]
 800971c:	f021 0104 	bicge.w	r1, r1, #4
 8009720:	6021      	strge	r1, [r4, #0]
 8009722:	b90d      	cbnz	r5, 8009728 <_printf_i+0x110>
 8009724:	2e00      	cmp	r6, #0
 8009726:	d04b      	beq.n	80097c0 <_printf_i+0x1a8>
 8009728:	4616      	mov	r6, r2
 800972a:	fbb5 f1f3 	udiv	r1, r5, r3
 800972e:	fb03 5711 	mls	r7, r3, r1, r5
 8009732:	5dc7      	ldrb	r7, [r0, r7]
 8009734:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009738:	462f      	mov	r7, r5
 800973a:	42bb      	cmp	r3, r7
 800973c:	460d      	mov	r5, r1
 800973e:	d9f4      	bls.n	800972a <_printf_i+0x112>
 8009740:	2b08      	cmp	r3, #8
 8009742:	d10b      	bne.n	800975c <_printf_i+0x144>
 8009744:	6823      	ldr	r3, [r4, #0]
 8009746:	07df      	lsls	r7, r3, #31
 8009748:	d508      	bpl.n	800975c <_printf_i+0x144>
 800974a:	6923      	ldr	r3, [r4, #16]
 800974c:	6861      	ldr	r1, [r4, #4]
 800974e:	4299      	cmp	r1, r3
 8009750:	bfde      	ittt	le
 8009752:	2330      	movle	r3, #48	@ 0x30
 8009754:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009758:	f106 36ff 	addle.w	r6, r6, #4294967295
 800975c:	1b92      	subs	r2, r2, r6
 800975e:	6122      	str	r2, [r4, #16]
 8009760:	f8cd a000 	str.w	sl, [sp]
 8009764:	464b      	mov	r3, r9
 8009766:	aa03      	add	r2, sp, #12
 8009768:	4621      	mov	r1, r4
 800976a:	4640      	mov	r0, r8
 800976c:	f7ff fee6 	bl	800953c <_printf_common>
 8009770:	3001      	adds	r0, #1
 8009772:	d14a      	bne.n	800980a <_printf_i+0x1f2>
 8009774:	f04f 30ff 	mov.w	r0, #4294967295
 8009778:	b004      	add	sp, #16
 800977a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800977e:	6823      	ldr	r3, [r4, #0]
 8009780:	f043 0320 	orr.w	r3, r3, #32
 8009784:	6023      	str	r3, [r4, #0]
 8009786:	4833      	ldr	r0, [pc, #204]	@ (8009854 <_printf_i+0x23c>)
 8009788:	2778      	movs	r7, #120	@ 0x78
 800978a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800978e:	6823      	ldr	r3, [r4, #0]
 8009790:	6831      	ldr	r1, [r6, #0]
 8009792:	061f      	lsls	r7, r3, #24
 8009794:	f851 5b04 	ldr.w	r5, [r1], #4
 8009798:	d402      	bmi.n	80097a0 <_printf_i+0x188>
 800979a:	065f      	lsls	r7, r3, #25
 800979c:	bf48      	it	mi
 800979e:	b2ad      	uxthmi	r5, r5
 80097a0:	6031      	str	r1, [r6, #0]
 80097a2:	07d9      	lsls	r1, r3, #31
 80097a4:	bf44      	itt	mi
 80097a6:	f043 0320 	orrmi.w	r3, r3, #32
 80097aa:	6023      	strmi	r3, [r4, #0]
 80097ac:	b11d      	cbz	r5, 80097b6 <_printf_i+0x19e>
 80097ae:	2310      	movs	r3, #16
 80097b0:	e7ac      	b.n	800970c <_printf_i+0xf4>
 80097b2:	4827      	ldr	r0, [pc, #156]	@ (8009850 <_printf_i+0x238>)
 80097b4:	e7e9      	b.n	800978a <_printf_i+0x172>
 80097b6:	6823      	ldr	r3, [r4, #0]
 80097b8:	f023 0320 	bic.w	r3, r3, #32
 80097bc:	6023      	str	r3, [r4, #0]
 80097be:	e7f6      	b.n	80097ae <_printf_i+0x196>
 80097c0:	4616      	mov	r6, r2
 80097c2:	e7bd      	b.n	8009740 <_printf_i+0x128>
 80097c4:	6833      	ldr	r3, [r6, #0]
 80097c6:	6825      	ldr	r5, [r4, #0]
 80097c8:	6961      	ldr	r1, [r4, #20]
 80097ca:	1d18      	adds	r0, r3, #4
 80097cc:	6030      	str	r0, [r6, #0]
 80097ce:	062e      	lsls	r6, r5, #24
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	d501      	bpl.n	80097d8 <_printf_i+0x1c0>
 80097d4:	6019      	str	r1, [r3, #0]
 80097d6:	e002      	b.n	80097de <_printf_i+0x1c6>
 80097d8:	0668      	lsls	r0, r5, #25
 80097da:	d5fb      	bpl.n	80097d4 <_printf_i+0x1bc>
 80097dc:	8019      	strh	r1, [r3, #0]
 80097de:	2300      	movs	r3, #0
 80097e0:	6123      	str	r3, [r4, #16]
 80097e2:	4616      	mov	r6, r2
 80097e4:	e7bc      	b.n	8009760 <_printf_i+0x148>
 80097e6:	6833      	ldr	r3, [r6, #0]
 80097e8:	1d1a      	adds	r2, r3, #4
 80097ea:	6032      	str	r2, [r6, #0]
 80097ec:	681e      	ldr	r6, [r3, #0]
 80097ee:	6862      	ldr	r2, [r4, #4]
 80097f0:	2100      	movs	r1, #0
 80097f2:	4630      	mov	r0, r6
 80097f4:	f7f6 fd74 	bl	80002e0 <memchr>
 80097f8:	b108      	cbz	r0, 80097fe <_printf_i+0x1e6>
 80097fa:	1b80      	subs	r0, r0, r6
 80097fc:	6060      	str	r0, [r4, #4]
 80097fe:	6863      	ldr	r3, [r4, #4]
 8009800:	6123      	str	r3, [r4, #16]
 8009802:	2300      	movs	r3, #0
 8009804:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009808:	e7aa      	b.n	8009760 <_printf_i+0x148>
 800980a:	6923      	ldr	r3, [r4, #16]
 800980c:	4632      	mov	r2, r6
 800980e:	4649      	mov	r1, r9
 8009810:	4640      	mov	r0, r8
 8009812:	47d0      	blx	sl
 8009814:	3001      	adds	r0, #1
 8009816:	d0ad      	beq.n	8009774 <_printf_i+0x15c>
 8009818:	6823      	ldr	r3, [r4, #0]
 800981a:	079b      	lsls	r3, r3, #30
 800981c:	d413      	bmi.n	8009846 <_printf_i+0x22e>
 800981e:	68e0      	ldr	r0, [r4, #12]
 8009820:	9b03      	ldr	r3, [sp, #12]
 8009822:	4298      	cmp	r0, r3
 8009824:	bfb8      	it	lt
 8009826:	4618      	movlt	r0, r3
 8009828:	e7a6      	b.n	8009778 <_printf_i+0x160>
 800982a:	2301      	movs	r3, #1
 800982c:	4632      	mov	r2, r6
 800982e:	4649      	mov	r1, r9
 8009830:	4640      	mov	r0, r8
 8009832:	47d0      	blx	sl
 8009834:	3001      	adds	r0, #1
 8009836:	d09d      	beq.n	8009774 <_printf_i+0x15c>
 8009838:	3501      	adds	r5, #1
 800983a:	68e3      	ldr	r3, [r4, #12]
 800983c:	9903      	ldr	r1, [sp, #12]
 800983e:	1a5b      	subs	r3, r3, r1
 8009840:	42ab      	cmp	r3, r5
 8009842:	dcf2      	bgt.n	800982a <_printf_i+0x212>
 8009844:	e7eb      	b.n	800981e <_printf_i+0x206>
 8009846:	2500      	movs	r5, #0
 8009848:	f104 0619 	add.w	r6, r4, #25
 800984c:	e7f5      	b.n	800983a <_printf_i+0x222>
 800984e:	bf00      	nop
 8009850:	0800d54a 	.word	0x0800d54a
 8009854:	0800d55b 	.word	0x0800d55b

08009858 <_scanf_float>:
 8009858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800985c:	b087      	sub	sp, #28
 800985e:	4617      	mov	r7, r2
 8009860:	9303      	str	r3, [sp, #12]
 8009862:	688b      	ldr	r3, [r1, #8]
 8009864:	1e5a      	subs	r2, r3, #1
 8009866:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800986a:	bf81      	itttt	hi
 800986c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009870:	eb03 0b05 	addhi.w	fp, r3, r5
 8009874:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009878:	608b      	strhi	r3, [r1, #8]
 800987a:	680b      	ldr	r3, [r1, #0]
 800987c:	460a      	mov	r2, r1
 800987e:	f04f 0500 	mov.w	r5, #0
 8009882:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009886:	f842 3b1c 	str.w	r3, [r2], #28
 800988a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800988e:	4680      	mov	r8, r0
 8009890:	460c      	mov	r4, r1
 8009892:	bf98      	it	ls
 8009894:	f04f 0b00 	movls.w	fp, #0
 8009898:	9201      	str	r2, [sp, #4]
 800989a:	4616      	mov	r6, r2
 800989c:	46aa      	mov	sl, r5
 800989e:	46a9      	mov	r9, r5
 80098a0:	9502      	str	r5, [sp, #8]
 80098a2:	68a2      	ldr	r2, [r4, #8]
 80098a4:	b152      	cbz	r2, 80098bc <_scanf_float+0x64>
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	2b4e      	cmp	r3, #78	@ 0x4e
 80098ac:	d864      	bhi.n	8009978 <_scanf_float+0x120>
 80098ae:	2b40      	cmp	r3, #64	@ 0x40
 80098b0:	d83c      	bhi.n	800992c <_scanf_float+0xd4>
 80098b2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80098b6:	b2c8      	uxtb	r0, r1
 80098b8:	280e      	cmp	r0, #14
 80098ba:	d93a      	bls.n	8009932 <_scanf_float+0xda>
 80098bc:	f1b9 0f00 	cmp.w	r9, #0
 80098c0:	d003      	beq.n	80098ca <_scanf_float+0x72>
 80098c2:	6823      	ldr	r3, [r4, #0]
 80098c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098c8:	6023      	str	r3, [r4, #0]
 80098ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80098ce:	f1ba 0f01 	cmp.w	sl, #1
 80098d2:	f200 8117 	bhi.w	8009b04 <_scanf_float+0x2ac>
 80098d6:	9b01      	ldr	r3, [sp, #4]
 80098d8:	429e      	cmp	r6, r3
 80098da:	f200 8108 	bhi.w	8009aee <_scanf_float+0x296>
 80098de:	2001      	movs	r0, #1
 80098e0:	b007      	add	sp, #28
 80098e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098e6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80098ea:	2a0d      	cmp	r2, #13
 80098ec:	d8e6      	bhi.n	80098bc <_scanf_float+0x64>
 80098ee:	a101      	add	r1, pc, #4	@ (adr r1, 80098f4 <_scanf_float+0x9c>)
 80098f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80098f4:	08009a3b 	.word	0x08009a3b
 80098f8:	080098bd 	.word	0x080098bd
 80098fc:	080098bd 	.word	0x080098bd
 8009900:	080098bd 	.word	0x080098bd
 8009904:	08009a9b 	.word	0x08009a9b
 8009908:	08009a73 	.word	0x08009a73
 800990c:	080098bd 	.word	0x080098bd
 8009910:	080098bd 	.word	0x080098bd
 8009914:	08009a49 	.word	0x08009a49
 8009918:	080098bd 	.word	0x080098bd
 800991c:	080098bd 	.word	0x080098bd
 8009920:	080098bd 	.word	0x080098bd
 8009924:	080098bd 	.word	0x080098bd
 8009928:	08009a01 	.word	0x08009a01
 800992c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009930:	e7db      	b.n	80098ea <_scanf_float+0x92>
 8009932:	290e      	cmp	r1, #14
 8009934:	d8c2      	bhi.n	80098bc <_scanf_float+0x64>
 8009936:	a001      	add	r0, pc, #4	@ (adr r0, 800993c <_scanf_float+0xe4>)
 8009938:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800993c:	080099f1 	.word	0x080099f1
 8009940:	080098bd 	.word	0x080098bd
 8009944:	080099f1 	.word	0x080099f1
 8009948:	08009a87 	.word	0x08009a87
 800994c:	080098bd 	.word	0x080098bd
 8009950:	08009999 	.word	0x08009999
 8009954:	080099d7 	.word	0x080099d7
 8009958:	080099d7 	.word	0x080099d7
 800995c:	080099d7 	.word	0x080099d7
 8009960:	080099d7 	.word	0x080099d7
 8009964:	080099d7 	.word	0x080099d7
 8009968:	080099d7 	.word	0x080099d7
 800996c:	080099d7 	.word	0x080099d7
 8009970:	080099d7 	.word	0x080099d7
 8009974:	080099d7 	.word	0x080099d7
 8009978:	2b6e      	cmp	r3, #110	@ 0x6e
 800997a:	d809      	bhi.n	8009990 <_scanf_float+0x138>
 800997c:	2b60      	cmp	r3, #96	@ 0x60
 800997e:	d8b2      	bhi.n	80098e6 <_scanf_float+0x8e>
 8009980:	2b54      	cmp	r3, #84	@ 0x54
 8009982:	d07b      	beq.n	8009a7c <_scanf_float+0x224>
 8009984:	2b59      	cmp	r3, #89	@ 0x59
 8009986:	d199      	bne.n	80098bc <_scanf_float+0x64>
 8009988:	2d07      	cmp	r5, #7
 800998a:	d197      	bne.n	80098bc <_scanf_float+0x64>
 800998c:	2508      	movs	r5, #8
 800998e:	e02c      	b.n	80099ea <_scanf_float+0x192>
 8009990:	2b74      	cmp	r3, #116	@ 0x74
 8009992:	d073      	beq.n	8009a7c <_scanf_float+0x224>
 8009994:	2b79      	cmp	r3, #121	@ 0x79
 8009996:	e7f6      	b.n	8009986 <_scanf_float+0x12e>
 8009998:	6821      	ldr	r1, [r4, #0]
 800999a:	05c8      	lsls	r0, r1, #23
 800999c:	d51b      	bpl.n	80099d6 <_scanf_float+0x17e>
 800999e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80099a2:	6021      	str	r1, [r4, #0]
 80099a4:	f109 0901 	add.w	r9, r9, #1
 80099a8:	f1bb 0f00 	cmp.w	fp, #0
 80099ac:	d003      	beq.n	80099b6 <_scanf_float+0x15e>
 80099ae:	3201      	adds	r2, #1
 80099b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80099b4:	60a2      	str	r2, [r4, #8]
 80099b6:	68a3      	ldr	r3, [r4, #8]
 80099b8:	3b01      	subs	r3, #1
 80099ba:	60a3      	str	r3, [r4, #8]
 80099bc:	6923      	ldr	r3, [r4, #16]
 80099be:	3301      	adds	r3, #1
 80099c0:	6123      	str	r3, [r4, #16]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	3b01      	subs	r3, #1
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	607b      	str	r3, [r7, #4]
 80099ca:	f340 8087 	ble.w	8009adc <_scanf_float+0x284>
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	3301      	adds	r3, #1
 80099d2:	603b      	str	r3, [r7, #0]
 80099d4:	e765      	b.n	80098a2 <_scanf_float+0x4a>
 80099d6:	eb1a 0105 	adds.w	r1, sl, r5
 80099da:	f47f af6f 	bne.w	80098bc <_scanf_float+0x64>
 80099de:	6822      	ldr	r2, [r4, #0]
 80099e0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80099e4:	6022      	str	r2, [r4, #0]
 80099e6:	460d      	mov	r5, r1
 80099e8:	468a      	mov	sl, r1
 80099ea:	f806 3b01 	strb.w	r3, [r6], #1
 80099ee:	e7e2      	b.n	80099b6 <_scanf_float+0x15e>
 80099f0:	6822      	ldr	r2, [r4, #0]
 80099f2:	0610      	lsls	r0, r2, #24
 80099f4:	f57f af62 	bpl.w	80098bc <_scanf_float+0x64>
 80099f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80099fc:	6022      	str	r2, [r4, #0]
 80099fe:	e7f4      	b.n	80099ea <_scanf_float+0x192>
 8009a00:	f1ba 0f00 	cmp.w	sl, #0
 8009a04:	d10e      	bne.n	8009a24 <_scanf_float+0x1cc>
 8009a06:	f1b9 0f00 	cmp.w	r9, #0
 8009a0a:	d10e      	bne.n	8009a2a <_scanf_float+0x1d2>
 8009a0c:	6822      	ldr	r2, [r4, #0]
 8009a0e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009a12:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009a16:	d108      	bne.n	8009a2a <_scanf_float+0x1d2>
 8009a18:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009a1c:	6022      	str	r2, [r4, #0]
 8009a1e:	f04f 0a01 	mov.w	sl, #1
 8009a22:	e7e2      	b.n	80099ea <_scanf_float+0x192>
 8009a24:	f1ba 0f02 	cmp.w	sl, #2
 8009a28:	d055      	beq.n	8009ad6 <_scanf_float+0x27e>
 8009a2a:	2d01      	cmp	r5, #1
 8009a2c:	d002      	beq.n	8009a34 <_scanf_float+0x1dc>
 8009a2e:	2d04      	cmp	r5, #4
 8009a30:	f47f af44 	bne.w	80098bc <_scanf_float+0x64>
 8009a34:	3501      	adds	r5, #1
 8009a36:	b2ed      	uxtb	r5, r5
 8009a38:	e7d7      	b.n	80099ea <_scanf_float+0x192>
 8009a3a:	f1ba 0f01 	cmp.w	sl, #1
 8009a3e:	f47f af3d 	bne.w	80098bc <_scanf_float+0x64>
 8009a42:	f04f 0a02 	mov.w	sl, #2
 8009a46:	e7d0      	b.n	80099ea <_scanf_float+0x192>
 8009a48:	b97d      	cbnz	r5, 8009a6a <_scanf_float+0x212>
 8009a4a:	f1b9 0f00 	cmp.w	r9, #0
 8009a4e:	f47f af38 	bne.w	80098c2 <_scanf_float+0x6a>
 8009a52:	6822      	ldr	r2, [r4, #0]
 8009a54:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009a58:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009a5c:	f040 8101 	bne.w	8009c62 <_scanf_float+0x40a>
 8009a60:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009a64:	6022      	str	r2, [r4, #0]
 8009a66:	2501      	movs	r5, #1
 8009a68:	e7bf      	b.n	80099ea <_scanf_float+0x192>
 8009a6a:	2d03      	cmp	r5, #3
 8009a6c:	d0e2      	beq.n	8009a34 <_scanf_float+0x1dc>
 8009a6e:	2d05      	cmp	r5, #5
 8009a70:	e7de      	b.n	8009a30 <_scanf_float+0x1d8>
 8009a72:	2d02      	cmp	r5, #2
 8009a74:	f47f af22 	bne.w	80098bc <_scanf_float+0x64>
 8009a78:	2503      	movs	r5, #3
 8009a7a:	e7b6      	b.n	80099ea <_scanf_float+0x192>
 8009a7c:	2d06      	cmp	r5, #6
 8009a7e:	f47f af1d 	bne.w	80098bc <_scanf_float+0x64>
 8009a82:	2507      	movs	r5, #7
 8009a84:	e7b1      	b.n	80099ea <_scanf_float+0x192>
 8009a86:	6822      	ldr	r2, [r4, #0]
 8009a88:	0591      	lsls	r1, r2, #22
 8009a8a:	f57f af17 	bpl.w	80098bc <_scanf_float+0x64>
 8009a8e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009a92:	6022      	str	r2, [r4, #0]
 8009a94:	f8cd 9008 	str.w	r9, [sp, #8]
 8009a98:	e7a7      	b.n	80099ea <_scanf_float+0x192>
 8009a9a:	6822      	ldr	r2, [r4, #0]
 8009a9c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009aa0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009aa4:	d006      	beq.n	8009ab4 <_scanf_float+0x25c>
 8009aa6:	0550      	lsls	r0, r2, #21
 8009aa8:	f57f af08 	bpl.w	80098bc <_scanf_float+0x64>
 8009aac:	f1b9 0f00 	cmp.w	r9, #0
 8009ab0:	f000 80d7 	beq.w	8009c62 <_scanf_float+0x40a>
 8009ab4:	0591      	lsls	r1, r2, #22
 8009ab6:	bf58      	it	pl
 8009ab8:	9902      	ldrpl	r1, [sp, #8]
 8009aba:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009abe:	bf58      	it	pl
 8009ac0:	eba9 0101 	subpl.w	r1, r9, r1
 8009ac4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009ac8:	bf58      	it	pl
 8009aca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009ace:	6022      	str	r2, [r4, #0]
 8009ad0:	f04f 0900 	mov.w	r9, #0
 8009ad4:	e789      	b.n	80099ea <_scanf_float+0x192>
 8009ad6:	f04f 0a03 	mov.w	sl, #3
 8009ada:	e786      	b.n	80099ea <_scanf_float+0x192>
 8009adc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009ae0:	4639      	mov	r1, r7
 8009ae2:	4640      	mov	r0, r8
 8009ae4:	4798      	blx	r3
 8009ae6:	2800      	cmp	r0, #0
 8009ae8:	f43f aedb 	beq.w	80098a2 <_scanf_float+0x4a>
 8009aec:	e6e6      	b.n	80098bc <_scanf_float+0x64>
 8009aee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009af2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009af6:	463a      	mov	r2, r7
 8009af8:	4640      	mov	r0, r8
 8009afa:	4798      	blx	r3
 8009afc:	6923      	ldr	r3, [r4, #16]
 8009afe:	3b01      	subs	r3, #1
 8009b00:	6123      	str	r3, [r4, #16]
 8009b02:	e6e8      	b.n	80098d6 <_scanf_float+0x7e>
 8009b04:	1e6b      	subs	r3, r5, #1
 8009b06:	2b06      	cmp	r3, #6
 8009b08:	d824      	bhi.n	8009b54 <_scanf_float+0x2fc>
 8009b0a:	2d02      	cmp	r5, #2
 8009b0c:	d836      	bhi.n	8009b7c <_scanf_float+0x324>
 8009b0e:	9b01      	ldr	r3, [sp, #4]
 8009b10:	429e      	cmp	r6, r3
 8009b12:	f67f aee4 	bls.w	80098de <_scanf_float+0x86>
 8009b16:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b1e:	463a      	mov	r2, r7
 8009b20:	4640      	mov	r0, r8
 8009b22:	4798      	blx	r3
 8009b24:	6923      	ldr	r3, [r4, #16]
 8009b26:	3b01      	subs	r3, #1
 8009b28:	6123      	str	r3, [r4, #16]
 8009b2a:	e7f0      	b.n	8009b0e <_scanf_float+0x2b6>
 8009b2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b30:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009b34:	463a      	mov	r2, r7
 8009b36:	4640      	mov	r0, r8
 8009b38:	4798      	blx	r3
 8009b3a:	6923      	ldr	r3, [r4, #16]
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	6123      	str	r3, [r4, #16]
 8009b40:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009b44:	fa5f fa8a 	uxtb.w	sl, sl
 8009b48:	f1ba 0f02 	cmp.w	sl, #2
 8009b4c:	d1ee      	bne.n	8009b2c <_scanf_float+0x2d4>
 8009b4e:	3d03      	subs	r5, #3
 8009b50:	b2ed      	uxtb	r5, r5
 8009b52:	1b76      	subs	r6, r6, r5
 8009b54:	6823      	ldr	r3, [r4, #0]
 8009b56:	05da      	lsls	r2, r3, #23
 8009b58:	d530      	bpl.n	8009bbc <_scanf_float+0x364>
 8009b5a:	055b      	lsls	r3, r3, #21
 8009b5c:	d511      	bpl.n	8009b82 <_scanf_float+0x32a>
 8009b5e:	9b01      	ldr	r3, [sp, #4]
 8009b60:	429e      	cmp	r6, r3
 8009b62:	f67f aebc 	bls.w	80098de <_scanf_float+0x86>
 8009b66:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b6e:	463a      	mov	r2, r7
 8009b70:	4640      	mov	r0, r8
 8009b72:	4798      	blx	r3
 8009b74:	6923      	ldr	r3, [r4, #16]
 8009b76:	3b01      	subs	r3, #1
 8009b78:	6123      	str	r3, [r4, #16]
 8009b7a:	e7f0      	b.n	8009b5e <_scanf_float+0x306>
 8009b7c:	46aa      	mov	sl, r5
 8009b7e:	46b3      	mov	fp, r6
 8009b80:	e7de      	b.n	8009b40 <_scanf_float+0x2e8>
 8009b82:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009b86:	6923      	ldr	r3, [r4, #16]
 8009b88:	2965      	cmp	r1, #101	@ 0x65
 8009b8a:	f103 33ff 	add.w	r3, r3, #4294967295
 8009b8e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009b92:	6123      	str	r3, [r4, #16]
 8009b94:	d00c      	beq.n	8009bb0 <_scanf_float+0x358>
 8009b96:	2945      	cmp	r1, #69	@ 0x45
 8009b98:	d00a      	beq.n	8009bb0 <_scanf_float+0x358>
 8009b9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b9e:	463a      	mov	r2, r7
 8009ba0:	4640      	mov	r0, r8
 8009ba2:	4798      	blx	r3
 8009ba4:	6923      	ldr	r3, [r4, #16]
 8009ba6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009baa:	3b01      	subs	r3, #1
 8009bac:	1eb5      	subs	r5, r6, #2
 8009bae:	6123      	str	r3, [r4, #16]
 8009bb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009bb4:	463a      	mov	r2, r7
 8009bb6:	4640      	mov	r0, r8
 8009bb8:	4798      	blx	r3
 8009bba:	462e      	mov	r6, r5
 8009bbc:	6822      	ldr	r2, [r4, #0]
 8009bbe:	f012 0210 	ands.w	r2, r2, #16
 8009bc2:	d001      	beq.n	8009bc8 <_scanf_float+0x370>
 8009bc4:	2000      	movs	r0, #0
 8009bc6:	e68b      	b.n	80098e0 <_scanf_float+0x88>
 8009bc8:	7032      	strb	r2, [r6, #0]
 8009bca:	6823      	ldr	r3, [r4, #0]
 8009bcc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009bd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bd4:	d11a      	bne.n	8009c0c <_scanf_float+0x3b4>
 8009bd6:	9b02      	ldr	r3, [sp, #8]
 8009bd8:	454b      	cmp	r3, r9
 8009bda:	eba3 0209 	sub.w	r2, r3, r9
 8009bde:	d121      	bne.n	8009c24 <_scanf_float+0x3cc>
 8009be0:	9901      	ldr	r1, [sp, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	4640      	mov	r0, r8
 8009be6:	f002 fb2d 	bl	800c244 <_strtod_r>
 8009bea:	9b03      	ldr	r3, [sp, #12]
 8009bec:	6821      	ldr	r1, [r4, #0]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f011 0f02 	tst.w	r1, #2
 8009bf4:	f103 0204 	add.w	r2, r3, #4
 8009bf8:	d01f      	beq.n	8009c3a <_scanf_float+0x3e2>
 8009bfa:	9903      	ldr	r1, [sp, #12]
 8009bfc:	600a      	str	r2, [r1, #0]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	ed83 0b00 	vstr	d0, [r3]
 8009c04:	68e3      	ldr	r3, [r4, #12]
 8009c06:	3301      	adds	r3, #1
 8009c08:	60e3      	str	r3, [r4, #12]
 8009c0a:	e7db      	b.n	8009bc4 <_scanf_float+0x36c>
 8009c0c:	9b04      	ldr	r3, [sp, #16]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d0e6      	beq.n	8009be0 <_scanf_float+0x388>
 8009c12:	9905      	ldr	r1, [sp, #20]
 8009c14:	230a      	movs	r3, #10
 8009c16:	3101      	adds	r1, #1
 8009c18:	4640      	mov	r0, r8
 8009c1a:	f002 fb93 	bl	800c344 <_strtol_r>
 8009c1e:	9b04      	ldr	r3, [sp, #16]
 8009c20:	9e05      	ldr	r6, [sp, #20]
 8009c22:	1ac2      	subs	r2, r0, r3
 8009c24:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009c28:	429e      	cmp	r6, r3
 8009c2a:	bf28      	it	cs
 8009c2c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009c30:	490d      	ldr	r1, [pc, #52]	@ (8009c68 <_scanf_float+0x410>)
 8009c32:	4630      	mov	r0, r6
 8009c34:	f000 f8de 	bl	8009df4 <siprintf>
 8009c38:	e7d2      	b.n	8009be0 <_scanf_float+0x388>
 8009c3a:	f011 0f04 	tst.w	r1, #4
 8009c3e:	9903      	ldr	r1, [sp, #12]
 8009c40:	600a      	str	r2, [r1, #0]
 8009c42:	d1dc      	bne.n	8009bfe <_scanf_float+0x3a6>
 8009c44:	eeb4 0b40 	vcmp.f64	d0, d0
 8009c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c4c:	681d      	ldr	r5, [r3, #0]
 8009c4e:	d705      	bvc.n	8009c5c <_scanf_float+0x404>
 8009c50:	4806      	ldr	r0, [pc, #24]	@ (8009c6c <_scanf_float+0x414>)
 8009c52:	f000 f9b3 	bl	8009fbc <nanf>
 8009c56:	ed85 0a00 	vstr	s0, [r5]
 8009c5a:	e7d3      	b.n	8009c04 <_scanf_float+0x3ac>
 8009c5c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8009c60:	e7f9      	b.n	8009c56 <_scanf_float+0x3fe>
 8009c62:	f04f 0900 	mov.w	r9, #0
 8009c66:	e630      	b.n	80098ca <_scanf_float+0x72>
 8009c68:	0800d56c 	.word	0x0800d56c
 8009c6c:	0800d905 	.word	0x0800d905

08009c70 <std>:
 8009c70:	2300      	movs	r3, #0
 8009c72:	b510      	push	{r4, lr}
 8009c74:	4604      	mov	r4, r0
 8009c76:	e9c0 3300 	strd	r3, r3, [r0]
 8009c7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c7e:	6083      	str	r3, [r0, #8]
 8009c80:	8181      	strh	r1, [r0, #12]
 8009c82:	6643      	str	r3, [r0, #100]	@ 0x64
 8009c84:	81c2      	strh	r2, [r0, #14]
 8009c86:	6183      	str	r3, [r0, #24]
 8009c88:	4619      	mov	r1, r3
 8009c8a:	2208      	movs	r2, #8
 8009c8c:	305c      	adds	r0, #92	@ 0x5c
 8009c8e:	f000 f914 	bl	8009eba <memset>
 8009c92:	4b0d      	ldr	r3, [pc, #52]	@ (8009cc8 <std+0x58>)
 8009c94:	6263      	str	r3, [r4, #36]	@ 0x24
 8009c96:	4b0d      	ldr	r3, [pc, #52]	@ (8009ccc <std+0x5c>)
 8009c98:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8009cd0 <std+0x60>)
 8009c9c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8009cd4 <std+0x64>)
 8009ca0:	6323      	str	r3, [r4, #48]	@ 0x30
 8009ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8009cd8 <std+0x68>)
 8009ca4:	6224      	str	r4, [r4, #32]
 8009ca6:	429c      	cmp	r4, r3
 8009ca8:	d006      	beq.n	8009cb8 <std+0x48>
 8009caa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009cae:	4294      	cmp	r4, r2
 8009cb0:	d002      	beq.n	8009cb8 <std+0x48>
 8009cb2:	33d0      	adds	r3, #208	@ 0xd0
 8009cb4:	429c      	cmp	r4, r3
 8009cb6:	d105      	bne.n	8009cc4 <std+0x54>
 8009cb8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cc0:	f000 b978 	b.w	8009fb4 <__retarget_lock_init_recursive>
 8009cc4:	bd10      	pop	{r4, pc}
 8009cc6:	bf00      	nop
 8009cc8:	08009e35 	.word	0x08009e35
 8009ccc:	08009e57 	.word	0x08009e57
 8009cd0:	08009e8f 	.word	0x08009e8f
 8009cd4:	08009eb3 	.word	0x08009eb3
 8009cd8:	240002e0 	.word	0x240002e0

08009cdc <stdio_exit_handler>:
 8009cdc:	4a02      	ldr	r2, [pc, #8]	@ (8009ce8 <stdio_exit_handler+0xc>)
 8009cde:	4903      	ldr	r1, [pc, #12]	@ (8009cec <stdio_exit_handler+0x10>)
 8009ce0:	4803      	ldr	r0, [pc, #12]	@ (8009cf0 <stdio_exit_handler+0x14>)
 8009ce2:	f000 b869 	b.w	8009db8 <_fwalk_sglue>
 8009ce6:	bf00      	nop
 8009ce8:	24000010 	.word	0x24000010
 8009cec:	0800c701 	.word	0x0800c701
 8009cf0:	24000020 	.word	0x24000020

08009cf4 <cleanup_stdio>:
 8009cf4:	6841      	ldr	r1, [r0, #4]
 8009cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8009d28 <cleanup_stdio+0x34>)
 8009cf8:	4299      	cmp	r1, r3
 8009cfa:	b510      	push	{r4, lr}
 8009cfc:	4604      	mov	r4, r0
 8009cfe:	d001      	beq.n	8009d04 <cleanup_stdio+0x10>
 8009d00:	f002 fcfe 	bl	800c700 <_fflush_r>
 8009d04:	68a1      	ldr	r1, [r4, #8]
 8009d06:	4b09      	ldr	r3, [pc, #36]	@ (8009d2c <cleanup_stdio+0x38>)
 8009d08:	4299      	cmp	r1, r3
 8009d0a:	d002      	beq.n	8009d12 <cleanup_stdio+0x1e>
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	f002 fcf7 	bl	800c700 <_fflush_r>
 8009d12:	68e1      	ldr	r1, [r4, #12]
 8009d14:	4b06      	ldr	r3, [pc, #24]	@ (8009d30 <cleanup_stdio+0x3c>)
 8009d16:	4299      	cmp	r1, r3
 8009d18:	d004      	beq.n	8009d24 <cleanup_stdio+0x30>
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d20:	f002 bcee 	b.w	800c700 <_fflush_r>
 8009d24:	bd10      	pop	{r4, pc}
 8009d26:	bf00      	nop
 8009d28:	240002e0 	.word	0x240002e0
 8009d2c:	24000348 	.word	0x24000348
 8009d30:	240003b0 	.word	0x240003b0

08009d34 <global_stdio_init.part.0>:
 8009d34:	b510      	push	{r4, lr}
 8009d36:	4b0b      	ldr	r3, [pc, #44]	@ (8009d64 <global_stdio_init.part.0+0x30>)
 8009d38:	4c0b      	ldr	r4, [pc, #44]	@ (8009d68 <global_stdio_init.part.0+0x34>)
 8009d3a:	4a0c      	ldr	r2, [pc, #48]	@ (8009d6c <global_stdio_init.part.0+0x38>)
 8009d3c:	601a      	str	r2, [r3, #0]
 8009d3e:	4620      	mov	r0, r4
 8009d40:	2200      	movs	r2, #0
 8009d42:	2104      	movs	r1, #4
 8009d44:	f7ff ff94 	bl	8009c70 <std>
 8009d48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	2109      	movs	r1, #9
 8009d50:	f7ff ff8e 	bl	8009c70 <std>
 8009d54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009d58:	2202      	movs	r2, #2
 8009d5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d5e:	2112      	movs	r1, #18
 8009d60:	f7ff bf86 	b.w	8009c70 <std>
 8009d64:	24000418 	.word	0x24000418
 8009d68:	240002e0 	.word	0x240002e0
 8009d6c:	08009cdd 	.word	0x08009cdd

08009d70 <__sfp_lock_acquire>:
 8009d70:	4801      	ldr	r0, [pc, #4]	@ (8009d78 <__sfp_lock_acquire+0x8>)
 8009d72:	f000 b920 	b.w	8009fb6 <__retarget_lock_acquire_recursive>
 8009d76:	bf00      	nop
 8009d78:	24000421 	.word	0x24000421

08009d7c <__sfp_lock_release>:
 8009d7c:	4801      	ldr	r0, [pc, #4]	@ (8009d84 <__sfp_lock_release+0x8>)
 8009d7e:	f000 b91b 	b.w	8009fb8 <__retarget_lock_release_recursive>
 8009d82:	bf00      	nop
 8009d84:	24000421 	.word	0x24000421

08009d88 <__sinit>:
 8009d88:	b510      	push	{r4, lr}
 8009d8a:	4604      	mov	r4, r0
 8009d8c:	f7ff fff0 	bl	8009d70 <__sfp_lock_acquire>
 8009d90:	6a23      	ldr	r3, [r4, #32]
 8009d92:	b11b      	cbz	r3, 8009d9c <__sinit+0x14>
 8009d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d98:	f7ff bff0 	b.w	8009d7c <__sfp_lock_release>
 8009d9c:	4b04      	ldr	r3, [pc, #16]	@ (8009db0 <__sinit+0x28>)
 8009d9e:	6223      	str	r3, [r4, #32]
 8009da0:	4b04      	ldr	r3, [pc, #16]	@ (8009db4 <__sinit+0x2c>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d1f5      	bne.n	8009d94 <__sinit+0xc>
 8009da8:	f7ff ffc4 	bl	8009d34 <global_stdio_init.part.0>
 8009dac:	e7f2      	b.n	8009d94 <__sinit+0xc>
 8009dae:	bf00      	nop
 8009db0:	08009cf5 	.word	0x08009cf5
 8009db4:	24000418 	.word	0x24000418

08009db8 <_fwalk_sglue>:
 8009db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dbc:	4607      	mov	r7, r0
 8009dbe:	4688      	mov	r8, r1
 8009dc0:	4614      	mov	r4, r2
 8009dc2:	2600      	movs	r6, #0
 8009dc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009dc8:	f1b9 0901 	subs.w	r9, r9, #1
 8009dcc:	d505      	bpl.n	8009dda <_fwalk_sglue+0x22>
 8009dce:	6824      	ldr	r4, [r4, #0]
 8009dd0:	2c00      	cmp	r4, #0
 8009dd2:	d1f7      	bne.n	8009dc4 <_fwalk_sglue+0xc>
 8009dd4:	4630      	mov	r0, r6
 8009dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dda:	89ab      	ldrh	r3, [r5, #12]
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d907      	bls.n	8009df0 <_fwalk_sglue+0x38>
 8009de0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009de4:	3301      	adds	r3, #1
 8009de6:	d003      	beq.n	8009df0 <_fwalk_sglue+0x38>
 8009de8:	4629      	mov	r1, r5
 8009dea:	4638      	mov	r0, r7
 8009dec:	47c0      	blx	r8
 8009dee:	4306      	orrs	r6, r0
 8009df0:	3568      	adds	r5, #104	@ 0x68
 8009df2:	e7e9      	b.n	8009dc8 <_fwalk_sglue+0x10>

08009df4 <siprintf>:
 8009df4:	b40e      	push	{r1, r2, r3}
 8009df6:	b500      	push	{lr}
 8009df8:	b09c      	sub	sp, #112	@ 0x70
 8009dfa:	ab1d      	add	r3, sp, #116	@ 0x74
 8009dfc:	9002      	str	r0, [sp, #8]
 8009dfe:	9006      	str	r0, [sp, #24]
 8009e00:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009e04:	4809      	ldr	r0, [pc, #36]	@ (8009e2c <siprintf+0x38>)
 8009e06:	9107      	str	r1, [sp, #28]
 8009e08:	9104      	str	r1, [sp, #16]
 8009e0a:	4909      	ldr	r1, [pc, #36]	@ (8009e30 <siprintf+0x3c>)
 8009e0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e10:	9105      	str	r1, [sp, #20]
 8009e12:	6800      	ldr	r0, [r0, #0]
 8009e14:	9301      	str	r3, [sp, #4]
 8009e16:	a902      	add	r1, sp, #8
 8009e18:	f002 faf2 	bl	800c400 <_svfiprintf_r>
 8009e1c:	9b02      	ldr	r3, [sp, #8]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	701a      	strb	r2, [r3, #0]
 8009e22:	b01c      	add	sp, #112	@ 0x70
 8009e24:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e28:	b003      	add	sp, #12
 8009e2a:	4770      	bx	lr
 8009e2c:	2400001c 	.word	0x2400001c
 8009e30:	ffff0208 	.word	0xffff0208

08009e34 <__sread>:
 8009e34:	b510      	push	{r4, lr}
 8009e36:	460c      	mov	r4, r1
 8009e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e3c:	f000 f86c 	bl	8009f18 <_read_r>
 8009e40:	2800      	cmp	r0, #0
 8009e42:	bfab      	itete	ge
 8009e44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009e46:	89a3      	ldrhlt	r3, [r4, #12]
 8009e48:	181b      	addge	r3, r3, r0
 8009e4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009e4e:	bfac      	ite	ge
 8009e50:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009e52:	81a3      	strhlt	r3, [r4, #12]
 8009e54:	bd10      	pop	{r4, pc}

08009e56 <__swrite>:
 8009e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e5a:	461f      	mov	r7, r3
 8009e5c:	898b      	ldrh	r3, [r1, #12]
 8009e5e:	05db      	lsls	r3, r3, #23
 8009e60:	4605      	mov	r5, r0
 8009e62:	460c      	mov	r4, r1
 8009e64:	4616      	mov	r6, r2
 8009e66:	d505      	bpl.n	8009e74 <__swrite+0x1e>
 8009e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e6c:	2302      	movs	r3, #2
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f000 f840 	bl	8009ef4 <_lseek_r>
 8009e74:	89a3      	ldrh	r3, [r4, #12]
 8009e76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009e7e:	81a3      	strh	r3, [r4, #12]
 8009e80:	4632      	mov	r2, r6
 8009e82:	463b      	mov	r3, r7
 8009e84:	4628      	mov	r0, r5
 8009e86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e8a:	f000 b857 	b.w	8009f3c <_write_r>

08009e8e <__sseek>:
 8009e8e:	b510      	push	{r4, lr}
 8009e90:	460c      	mov	r4, r1
 8009e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e96:	f000 f82d 	bl	8009ef4 <_lseek_r>
 8009e9a:	1c43      	adds	r3, r0, #1
 8009e9c:	89a3      	ldrh	r3, [r4, #12]
 8009e9e:	bf15      	itete	ne
 8009ea0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009ea2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009ea6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009eaa:	81a3      	strheq	r3, [r4, #12]
 8009eac:	bf18      	it	ne
 8009eae:	81a3      	strhne	r3, [r4, #12]
 8009eb0:	bd10      	pop	{r4, pc}

08009eb2 <__sclose>:
 8009eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eb6:	f000 b80d 	b.w	8009ed4 <_close_r>

08009eba <memset>:
 8009eba:	4402      	add	r2, r0
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d100      	bne.n	8009ec4 <memset+0xa>
 8009ec2:	4770      	bx	lr
 8009ec4:	f803 1b01 	strb.w	r1, [r3], #1
 8009ec8:	e7f9      	b.n	8009ebe <memset+0x4>
	...

08009ecc <_localeconv_r>:
 8009ecc:	4800      	ldr	r0, [pc, #0]	@ (8009ed0 <_localeconv_r+0x4>)
 8009ece:	4770      	bx	lr
 8009ed0:	2400015c 	.word	0x2400015c

08009ed4 <_close_r>:
 8009ed4:	b538      	push	{r3, r4, r5, lr}
 8009ed6:	4d06      	ldr	r5, [pc, #24]	@ (8009ef0 <_close_r+0x1c>)
 8009ed8:	2300      	movs	r3, #0
 8009eda:	4604      	mov	r4, r0
 8009edc:	4608      	mov	r0, r1
 8009ede:	602b      	str	r3, [r5, #0]
 8009ee0:	f7f7 fb3c 	bl	800155c <_close>
 8009ee4:	1c43      	adds	r3, r0, #1
 8009ee6:	d102      	bne.n	8009eee <_close_r+0x1a>
 8009ee8:	682b      	ldr	r3, [r5, #0]
 8009eea:	b103      	cbz	r3, 8009eee <_close_r+0x1a>
 8009eec:	6023      	str	r3, [r4, #0]
 8009eee:	bd38      	pop	{r3, r4, r5, pc}
 8009ef0:	2400041c 	.word	0x2400041c

08009ef4 <_lseek_r>:
 8009ef4:	b538      	push	{r3, r4, r5, lr}
 8009ef6:	4d07      	ldr	r5, [pc, #28]	@ (8009f14 <_lseek_r+0x20>)
 8009ef8:	4604      	mov	r4, r0
 8009efa:	4608      	mov	r0, r1
 8009efc:	4611      	mov	r1, r2
 8009efe:	2200      	movs	r2, #0
 8009f00:	602a      	str	r2, [r5, #0]
 8009f02:	461a      	mov	r2, r3
 8009f04:	f7f7 fb51 	bl	80015aa <_lseek>
 8009f08:	1c43      	adds	r3, r0, #1
 8009f0a:	d102      	bne.n	8009f12 <_lseek_r+0x1e>
 8009f0c:	682b      	ldr	r3, [r5, #0]
 8009f0e:	b103      	cbz	r3, 8009f12 <_lseek_r+0x1e>
 8009f10:	6023      	str	r3, [r4, #0]
 8009f12:	bd38      	pop	{r3, r4, r5, pc}
 8009f14:	2400041c 	.word	0x2400041c

08009f18 <_read_r>:
 8009f18:	b538      	push	{r3, r4, r5, lr}
 8009f1a:	4d07      	ldr	r5, [pc, #28]	@ (8009f38 <_read_r+0x20>)
 8009f1c:	4604      	mov	r4, r0
 8009f1e:	4608      	mov	r0, r1
 8009f20:	4611      	mov	r1, r2
 8009f22:	2200      	movs	r2, #0
 8009f24:	602a      	str	r2, [r5, #0]
 8009f26:	461a      	mov	r2, r3
 8009f28:	f7f7 fadf 	bl	80014ea <_read>
 8009f2c:	1c43      	adds	r3, r0, #1
 8009f2e:	d102      	bne.n	8009f36 <_read_r+0x1e>
 8009f30:	682b      	ldr	r3, [r5, #0]
 8009f32:	b103      	cbz	r3, 8009f36 <_read_r+0x1e>
 8009f34:	6023      	str	r3, [r4, #0]
 8009f36:	bd38      	pop	{r3, r4, r5, pc}
 8009f38:	2400041c 	.word	0x2400041c

08009f3c <_write_r>:
 8009f3c:	b538      	push	{r3, r4, r5, lr}
 8009f3e:	4d07      	ldr	r5, [pc, #28]	@ (8009f5c <_write_r+0x20>)
 8009f40:	4604      	mov	r4, r0
 8009f42:	4608      	mov	r0, r1
 8009f44:	4611      	mov	r1, r2
 8009f46:	2200      	movs	r2, #0
 8009f48:	602a      	str	r2, [r5, #0]
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	f7f7 faea 	bl	8001524 <_write>
 8009f50:	1c43      	adds	r3, r0, #1
 8009f52:	d102      	bne.n	8009f5a <_write_r+0x1e>
 8009f54:	682b      	ldr	r3, [r5, #0]
 8009f56:	b103      	cbz	r3, 8009f5a <_write_r+0x1e>
 8009f58:	6023      	str	r3, [r4, #0]
 8009f5a:	bd38      	pop	{r3, r4, r5, pc}
 8009f5c:	2400041c 	.word	0x2400041c

08009f60 <__errno>:
 8009f60:	4b01      	ldr	r3, [pc, #4]	@ (8009f68 <__errno+0x8>)
 8009f62:	6818      	ldr	r0, [r3, #0]
 8009f64:	4770      	bx	lr
 8009f66:	bf00      	nop
 8009f68:	2400001c 	.word	0x2400001c

08009f6c <__libc_init_array>:
 8009f6c:	b570      	push	{r4, r5, r6, lr}
 8009f6e:	4d0d      	ldr	r5, [pc, #52]	@ (8009fa4 <__libc_init_array+0x38>)
 8009f70:	4c0d      	ldr	r4, [pc, #52]	@ (8009fa8 <__libc_init_array+0x3c>)
 8009f72:	1b64      	subs	r4, r4, r5
 8009f74:	10a4      	asrs	r4, r4, #2
 8009f76:	2600      	movs	r6, #0
 8009f78:	42a6      	cmp	r6, r4
 8009f7a:	d109      	bne.n	8009f90 <__libc_init_array+0x24>
 8009f7c:	4d0b      	ldr	r5, [pc, #44]	@ (8009fac <__libc_init_array+0x40>)
 8009f7e:	4c0c      	ldr	r4, [pc, #48]	@ (8009fb0 <__libc_init_array+0x44>)
 8009f80:	f003 fab0 	bl	800d4e4 <_init>
 8009f84:	1b64      	subs	r4, r4, r5
 8009f86:	10a4      	asrs	r4, r4, #2
 8009f88:	2600      	movs	r6, #0
 8009f8a:	42a6      	cmp	r6, r4
 8009f8c:	d105      	bne.n	8009f9a <__libc_init_array+0x2e>
 8009f8e:	bd70      	pop	{r4, r5, r6, pc}
 8009f90:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f94:	4798      	blx	r3
 8009f96:	3601      	adds	r6, #1
 8009f98:	e7ee      	b.n	8009f78 <__libc_init_array+0xc>
 8009f9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f9e:	4798      	blx	r3
 8009fa0:	3601      	adds	r6, #1
 8009fa2:	e7f2      	b.n	8009f8a <__libc_init_array+0x1e>
 8009fa4:	0800d970 	.word	0x0800d970
 8009fa8:	0800d970 	.word	0x0800d970
 8009fac:	0800d970 	.word	0x0800d970
 8009fb0:	0800d974 	.word	0x0800d974

08009fb4 <__retarget_lock_init_recursive>:
 8009fb4:	4770      	bx	lr

08009fb6 <__retarget_lock_acquire_recursive>:
 8009fb6:	4770      	bx	lr

08009fb8 <__retarget_lock_release_recursive>:
 8009fb8:	4770      	bx	lr
	...

08009fbc <nanf>:
 8009fbc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009fc4 <nanf+0x8>
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop
 8009fc4:	7fc00000 	.word	0x7fc00000

08009fc8 <quorem>:
 8009fc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fcc:	6903      	ldr	r3, [r0, #16]
 8009fce:	690c      	ldr	r4, [r1, #16]
 8009fd0:	42a3      	cmp	r3, r4
 8009fd2:	4607      	mov	r7, r0
 8009fd4:	db7e      	blt.n	800a0d4 <quorem+0x10c>
 8009fd6:	3c01      	subs	r4, #1
 8009fd8:	f101 0814 	add.w	r8, r1, #20
 8009fdc:	00a3      	lsls	r3, r4, #2
 8009fde:	f100 0514 	add.w	r5, r0, #20
 8009fe2:	9300      	str	r3, [sp, #0]
 8009fe4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009fe8:	9301      	str	r3, [sp, #4]
 8009fea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009fee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009ffa:	fbb2 f6f3 	udiv	r6, r2, r3
 8009ffe:	d32e      	bcc.n	800a05e <quorem+0x96>
 800a000:	f04f 0a00 	mov.w	sl, #0
 800a004:	46c4      	mov	ip, r8
 800a006:	46ae      	mov	lr, r5
 800a008:	46d3      	mov	fp, sl
 800a00a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a00e:	b298      	uxth	r0, r3
 800a010:	fb06 a000 	mla	r0, r6, r0, sl
 800a014:	0c02      	lsrs	r2, r0, #16
 800a016:	0c1b      	lsrs	r3, r3, #16
 800a018:	fb06 2303 	mla	r3, r6, r3, r2
 800a01c:	f8de 2000 	ldr.w	r2, [lr]
 800a020:	b280      	uxth	r0, r0
 800a022:	b292      	uxth	r2, r2
 800a024:	1a12      	subs	r2, r2, r0
 800a026:	445a      	add	r2, fp
 800a028:	f8de 0000 	ldr.w	r0, [lr]
 800a02c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a030:	b29b      	uxth	r3, r3
 800a032:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a036:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a03a:	b292      	uxth	r2, r2
 800a03c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a040:	45e1      	cmp	r9, ip
 800a042:	f84e 2b04 	str.w	r2, [lr], #4
 800a046:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a04a:	d2de      	bcs.n	800a00a <quorem+0x42>
 800a04c:	9b00      	ldr	r3, [sp, #0]
 800a04e:	58eb      	ldr	r3, [r5, r3]
 800a050:	b92b      	cbnz	r3, 800a05e <quorem+0x96>
 800a052:	9b01      	ldr	r3, [sp, #4]
 800a054:	3b04      	subs	r3, #4
 800a056:	429d      	cmp	r5, r3
 800a058:	461a      	mov	r2, r3
 800a05a:	d32f      	bcc.n	800a0bc <quorem+0xf4>
 800a05c:	613c      	str	r4, [r7, #16]
 800a05e:	4638      	mov	r0, r7
 800a060:	f001 f954 	bl	800b30c <__mcmp>
 800a064:	2800      	cmp	r0, #0
 800a066:	db25      	blt.n	800a0b4 <quorem+0xec>
 800a068:	4629      	mov	r1, r5
 800a06a:	2000      	movs	r0, #0
 800a06c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a070:	f8d1 c000 	ldr.w	ip, [r1]
 800a074:	fa1f fe82 	uxth.w	lr, r2
 800a078:	fa1f f38c 	uxth.w	r3, ip
 800a07c:	eba3 030e 	sub.w	r3, r3, lr
 800a080:	4403      	add	r3, r0
 800a082:	0c12      	lsrs	r2, r2, #16
 800a084:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a088:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a092:	45c1      	cmp	r9, r8
 800a094:	f841 3b04 	str.w	r3, [r1], #4
 800a098:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a09c:	d2e6      	bcs.n	800a06c <quorem+0xa4>
 800a09e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0a6:	b922      	cbnz	r2, 800a0b2 <quorem+0xea>
 800a0a8:	3b04      	subs	r3, #4
 800a0aa:	429d      	cmp	r5, r3
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	d30b      	bcc.n	800a0c8 <quorem+0x100>
 800a0b0:	613c      	str	r4, [r7, #16]
 800a0b2:	3601      	adds	r6, #1
 800a0b4:	4630      	mov	r0, r6
 800a0b6:	b003      	add	sp, #12
 800a0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0bc:	6812      	ldr	r2, [r2, #0]
 800a0be:	3b04      	subs	r3, #4
 800a0c0:	2a00      	cmp	r2, #0
 800a0c2:	d1cb      	bne.n	800a05c <quorem+0x94>
 800a0c4:	3c01      	subs	r4, #1
 800a0c6:	e7c6      	b.n	800a056 <quorem+0x8e>
 800a0c8:	6812      	ldr	r2, [r2, #0]
 800a0ca:	3b04      	subs	r3, #4
 800a0cc:	2a00      	cmp	r2, #0
 800a0ce:	d1ef      	bne.n	800a0b0 <quorem+0xe8>
 800a0d0:	3c01      	subs	r4, #1
 800a0d2:	e7ea      	b.n	800a0aa <quorem+0xe2>
 800a0d4:	2000      	movs	r0, #0
 800a0d6:	e7ee      	b.n	800a0b6 <quorem+0xee>

0800a0d8 <_dtoa_r>:
 800a0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0dc:	ed2d 8b02 	vpush	{d8}
 800a0e0:	69c7      	ldr	r7, [r0, #28]
 800a0e2:	b091      	sub	sp, #68	@ 0x44
 800a0e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a0e8:	ec55 4b10 	vmov	r4, r5, d0
 800a0ec:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800a0ee:	9107      	str	r1, [sp, #28]
 800a0f0:	4681      	mov	r9, r0
 800a0f2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a0f4:	930d      	str	r3, [sp, #52]	@ 0x34
 800a0f6:	b97f      	cbnz	r7, 800a118 <_dtoa_r+0x40>
 800a0f8:	2010      	movs	r0, #16
 800a0fa:	f000 fd8d 	bl	800ac18 <malloc>
 800a0fe:	4602      	mov	r2, r0
 800a100:	f8c9 001c 	str.w	r0, [r9, #28]
 800a104:	b920      	cbnz	r0, 800a110 <_dtoa_r+0x38>
 800a106:	4ba0      	ldr	r3, [pc, #640]	@ (800a388 <_dtoa_r+0x2b0>)
 800a108:	21ef      	movs	r1, #239	@ 0xef
 800a10a:	48a0      	ldr	r0, [pc, #640]	@ (800a38c <_dtoa_r+0x2b4>)
 800a10c:	f002 fb74 	bl	800c7f8 <__assert_func>
 800a110:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a114:	6007      	str	r7, [r0, #0]
 800a116:	60c7      	str	r7, [r0, #12]
 800a118:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a11c:	6819      	ldr	r1, [r3, #0]
 800a11e:	b159      	cbz	r1, 800a138 <_dtoa_r+0x60>
 800a120:	685a      	ldr	r2, [r3, #4]
 800a122:	604a      	str	r2, [r1, #4]
 800a124:	2301      	movs	r3, #1
 800a126:	4093      	lsls	r3, r2
 800a128:	608b      	str	r3, [r1, #8]
 800a12a:	4648      	mov	r0, r9
 800a12c:	f000 fe6a 	bl	800ae04 <_Bfree>
 800a130:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a134:	2200      	movs	r2, #0
 800a136:	601a      	str	r2, [r3, #0]
 800a138:	1e2b      	subs	r3, r5, #0
 800a13a:	bfbb      	ittet	lt
 800a13c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a140:	9303      	strlt	r3, [sp, #12]
 800a142:	2300      	movge	r3, #0
 800a144:	2201      	movlt	r2, #1
 800a146:	bfac      	ite	ge
 800a148:	6033      	strge	r3, [r6, #0]
 800a14a:	6032      	strlt	r2, [r6, #0]
 800a14c:	4b90      	ldr	r3, [pc, #576]	@ (800a390 <_dtoa_r+0x2b8>)
 800a14e:	9e03      	ldr	r6, [sp, #12]
 800a150:	43b3      	bics	r3, r6
 800a152:	d110      	bne.n	800a176 <_dtoa_r+0x9e>
 800a154:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a156:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a15a:	6013      	str	r3, [r2, #0]
 800a15c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800a160:	4323      	orrs	r3, r4
 800a162:	f000 84de 	beq.w	800ab22 <_dtoa_r+0xa4a>
 800a166:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a168:	4f8a      	ldr	r7, [pc, #552]	@ (800a394 <_dtoa_r+0x2bc>)
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	f000 84e0 	beq.w	800ab30 <_dtoa_r+0xa58>
 800a170:	1cfb      	adds	r3, r7, #3
 800a172:	f000 bcdb 	b.w	800ab2c <_dtoa_r+0xa54>
 800a176:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a17a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a17e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a182:	d10a      	bne.n	800a19a <_dtoa_r+0xc2>
 800a184:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a186:	2301      	movs	r3, #1
 800a188:	6013      	str	r3, [r2, #0]
 800a18a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a18c:	b113      	cbz	r3, 800a194 <_dtoa_r+0xbc>
 800a18e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a190:	4b81      	ldr	r3, [pc, #516]	@ (800a398 <_dtoa_r+0x2c0>)
 800a192:	6013      	str	r3, [r2, #0]
 800a194:	4f81      	ldr	r7, [pc, #516]	@ (800a39c <_dtoa_r+0x2c4>)
 800a196:	f000 bccb 	b.w	800ab30 <_dtoa_r+0xa58>
 800a19a:	aa0e      	add	r2, sp, #56	@ 0x38
 800a19c:	a90f      	add	r1, sp, #60	@ 0x3c
 800a19e:	4648      	mov	r0, r9
 800a1a0:	eeb0 0b48 	vmov.f64	d0, d8
 800a1a4:	f001 f9d2 	bl	800b54c <__d2b>
 800a1a8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800a1ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1ae:	9001      	str	r0, [sp, #4]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d045      	beq.n	800a240 <_dtoa_r+0x168>
 800a1b4:	eeb0 7b48 	vmov.f64	d7, d8
 800a1b8:	ee18 1a90 	vmov	r1, s17
 800a1bc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a1c0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800a1c4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800a1c8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800a1cc:	2500      	movs	r5, #0
 800a1ce:	ee07 1a90 	vmov	s15, r1
 800a1d2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800a1d6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800a370 <_dtoa_r+0x298>
 800a1da:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a1de:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800a378 <_dtoa_r+0x2a0>
 800a1e2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a1e6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800a380 <_dtoa_r+0x2a8>
 800a1ea:	ee07 3a90 	vmov	s15, r3
 800a1ee:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a1f2:	eeb0 7b46 	vmov.f64	d7, d6
 800a1f6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a1fa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a1fe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a206:	ee16 8a90 	vmov	r8, s13
 800a20a:	d508      	bpl.n	800a21e <_dtoa_r+0x146>
 800a20c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a210:	eeb4 6b47 	vcmp.f64	d6, d7
 800a214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a218:	bf18      	it	ne
 800a21a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800a21e:	f1b8 0f16 	cmp.w	r8, #22
 800a222:	d82b      	bhi.n	800a27c <_dtoa_r+0x1a4>
 800a224:	495e      	ldr	r1, [pc, #376]	@ (800a3a0 <_dtoa_r+0x2c8>)
 800a226:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800a22a:	ed91 7b00 	vldr	d7, [r1]
 800a22e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a236:	d501      	bpl.n	800a23c <_dtoa_r+0x164>
 800a238:	f108 38ff 	add.w	r8, r8, #4294967295
 800a23c:	2100      	movs	r1, #0
 800a23e:	e01e      	b.n	800a27e <_dtoa_r+0x1a6>
 800a240:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a242:	4413      	add	r3, r2
 800a244:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800a248:	2920      	cmp	r1, #32
 800a24a:	bfc1      	itttt	gt
 800a24c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800a250:	408e      	lslgt	r6, r1
 800a252:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800a256:	fa24 f101 	lsrgt.w	r1, r4, r1
 800a25a:	bfd6      	itet	le
 800a25c:	f1c1 0120 	rsble	r1, r1, #32
 800a260:	4331      	orrgt	r1, r6
 800a262:	fa04 f101 	lslle.w	r1, r4, r1
 800a266:	ee07 1a90 	vmov	s15, r1
 800a26a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a26e:	3b01      	subs	r3, #1
 800a270:	ee17 1a90 	vmov	r1, s15
 800a274:	2501      	movs	r5, #1
 800a276:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800a27a:	e7a8      	b.n	800a1ce <_dtoa_r+0xf6>
 800a27c:	2101      	movs	r1, #1
 800a27e:	1ad2      	subs	r2, r2, r3
 800a280:	1e53      	subs	r3, r2, #1
 800a282:	9306      	str	r3, [sp, #24]
 800a284:	bf45      	ittet	mi
 800a286:	f1c2 0301 	rsbmi	r3, r2, #1
 800a28a:	9305      	strmi	r3, [sp, #20]
 800a28c:	2300      	movpl	r3, #0
 800a28e:	2300      	movmi	r3, #0
 800a290:	bf4c      	ite	mi
 800a292:	9306      	strmi	r3, [sp, #24]
 800a294:	9305      	strpl	r3, [sp, #20]
 800a296:	f1b8 0f00 	cmp.w	r8, #0
 800a29a:	910c      	str	r1, [sp, #48]	@ 0x30
 800a29c:	db18      	blt.n	800a2d0 <_dtoa_r+0x1f8>
 800a29e:	9b06      	ldr	r3, [sp, #24]
 800a2a0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a2a4:	4443      	add	r3, r8
 800a2a6:	9306      	str	r3, [sp, #24]
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	9a07      	ldr	r2, [sp, #28]
 800a2ac:	2a09      	cmp	r2, #9
 800a2ae:	d849      	bhi.n	800a344 <_dtoa_r+0x26c>
 800a2b0:	2a05      	cmp	r2, #5
 800a2b2:	bfc4      	itt	gt
 800a2b4:	3a04      	subgt	r2, #4
 800a2b6:	9207      	strgt	r2, [sp, #28]
 800a2b8:	9a07      	ldr	r2, [sp, #28]
 800a2ba:	f1a2 0202 	sub.w	r2, r2, #2
 800a2be:	bfcc      	ite	gt
 800a2c0:	2400      	movgt	r4, #0
 800a2c2:	2401      	movle	r4, #1
 800a2c4:	2a03      	cmp	r2, #3
 800a2c6:	d848      	bhi.n	800a35a <_dtoa_r+0x282>
 800a2c8:	e8df f002 	tbb	[pc, r2]
 800a2cc:	3a2c2e0b 	.word	0x3a2c2e0b
 800a2d0:	9b05      	ldr	r3, [sp, #20]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	eba3 0308 	sub.w	r3, r3, r8
 800a2d8:	9305      	str	r3, [sp, #20]
 800a2da:	920a      	str	r2, [sp, #40]	@ 0x28
 800a2dc:	f1c8 0300 	rsb	r3, r8, #0
 800a2e0:	e7e3      	b.n	800a2aa <_dtoa_r+0x1d2>
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	9208      	str	r2, [sp, #32]
 800a2e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2e8:	2a00      	cmp	r2, #0
 800a2ea:	dc39      	bgt.n	800a360 <_dtoa_r+0x288>
 800a2ec:	f04f 0b01 	mov.w	fp, #1
 800a2f0:	46da      	mov	sl, fp
 800a2f2:	465a      	mov	r2, fp
 800a2f4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800a2f8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800a2fc:	2100      	movs	r1, #0
 800a2fe:	2004      	movs	r0, #4
 800a300:	f100 0614 	add.w	r6, r0, #20
 800a304:	4296      	cmp	r6, r2
 800a306:	d930      	bls.n	800a36a <_dtoa_r+0x292>
 800a308:	6079      	str	r1, [r7, #4]
 800a30a:	4648      	mov	r0, r9
 800a30c:	9304      	str	r3, [sp, #16]
 800a30e:	f000 fd39 	bl	800ad84 <_Balloc>
 800a312:	9b04      	ldr	r3, [sp, #16]
 800a314:	4607      	mov	r7, r0
 800a316:	2800      	cmp	r0, #0
 800a318:	d146      	bne.n	800a3a8 <_dtoa_r+0x2d0>
 800a31a:	4b22      	ldr	r3, [pc, #136]	@ (800a3a4 <_dtoa_r+0x2cc>)
 800a31c:	4602      	mov	r2, r0
 800a31e:	f240 11af 	movw	r1, #431	@ 0x1af
 800a322:	e6f2      	b.n	800a10a <_dtoa_r+0x32>
 800a324:	2201      	movs	r2, #1
 800a326:	e7dd      	b.n	800a2e4 <_dtoa_r+0x20c>
 800a328:	2200      	movs	r2, #0
 800a32a:	9208      	str	r2, [sp, #32]
 800a32c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a32e:	eb08 0b02 	add.w	fp, r8, r2
 800a332:	f10b 0a01 	add.w	sl, fp, #1
 800a336:	4652      	mov	r2, sl
 800a338:	2a01      	cmp	r2, #1
 800a33a:	bfb8      	it	lt
 800a33c:	2201      	movlt	r2, #1
 800a33e:	e7db      	b.n	800a2f8 <_dtoa_r+0x220>
 800a340:	2201      	movs	r2, #1
 800a342:	e7f2      	b.n	800a32a <_dtoa_r+0x252>
 800a344:	2401      	movs	r4, #1
 800a346:	2200      	movs	r2, #0
 800a348:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800a34c:	f04f 3bff 	mov.w	fp, #4294967295
 800a350:	2100      	movs	r1, #0
 800a352:	46da      	mov	sl, fp
 800a354:	2212      	movs	r2, #18
 800a356:	9109      	str	r1, [sp, #36]	@ 0x24
 800a358:	e7ce      	b.n	800a2f8 <_dtoa_r+0x220>
 800a35a:	2201      	movs	r2, #1
 800a35c:	9208      	str	r2, [sp, #32]
 800a35e:	e7f5      	b.n	800a34c <_dtoa_r+0x274>
 800a360:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800a364:	46da      	mov	sl, fp
 800a366:	465a      	mov	r2, fp
 800a368:	e7c6      	b.n	800a2f8 <_dtoa_r+0x220>
 800a36a:	3101      	adds	r1, #1
 800a36c:	0040      	lsls	r0, r0, #1
 800a36e:	e7c7      	b.n	800a300 <_dtoa_r+0x228>
 800a370:	636f4361 	.word	0x636f4361
 800a374:	3fd287a7 	.word	0x3fd287a7
 800a378:	8b60c8b3 	.word	0x8b60c8b3
 800a37c:	3fc68a28 	.word	0x3fc68a28
 800a380:	509f79fb 	.word	0x509f79fb
 800a384:	3fd34413 	.word	0x3fd34413
 800a388:	0800d57e 	.word	0x0800d57e
 800a38c:	0800d595 	.word	0x0800d595
 800a390:	7ff00000 	.word	0x7ff00000
 800a394:	0800d57a 	.word	0x0800d57a
 800a398:	0800d549 	.word	0x0800d549
 800a39c:	0800d548 	.word	0x0800d548
 800a3a0:	0800d690 	.word	0x0800d690
 800a3a4:	0800d5ed 	.word	0x0800d5ed
 800a3a8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800a3ac:	f1ba 0f0e 	cmp.w	sl, #14
 800a3b0:	6010      	str	r0, [r2, #0]
 800a3b2:	d86f      	bhi.n	800a494 <_dtoa_r+0x3bc>
 800a3b4:	2c00      	cmp	r4, #0
 800a3b6:	d06d      	beq.n	800a494 <_dtoa_r+0x3bc>
 800a3b8:	f1b8 0f00 	cmp.w	r8, #0
 800a3bc:	f340 80c2 	ble.w	800a544 <_dtoa_r+0x46c>
 800a3c0:	4aca      	ldr	r2, [pc, #808]	@ (800a6ec <_dtoa_r+0x614>)
 800a3c2:	f008 010f 	and.w	r1, r8, #15
 800a3c6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a3ca:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800a3ce:	ed92 7b00 	vldr	d7, [r2]
 800a3d2:	ea4f 1128 	mov.w	r1, r8, asr #4
 800a3d6:	f000 80a9 	beq.w	800a52c <_dtoa_r+0x454>
 800a3da:	4ac5      	ldr	r2, [pc, #788]	@ (800a6f0 <_dtoa_r+0x618>)
 800a3dc:	ed92 6b08 	vldr	d6, [r2, #32]
 800a3e0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a3e4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a3e8:	f001 010f 	and.w	r1, r1, #15
 800a3ec:	2203      	movs	r2, #3
 800a3ee:	48c0      	ldr	r0, [pc, #768]	@ (800a6f0 <_dtoa_r+0x618>)
 800a3f0:	2900      	cmp	r1, #0
 800a3f2:	f040 809d 	bne.w	800a530 <_dtoa_r+0x458>
 800a3f6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a3fa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a3fe:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a402:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a404:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a408:	2900      	cmp	r1, #0
 800a40a:	f000 80c1 	beq.w	800a590 <_dtoa_r+0x4b8>
 800a40e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800a412:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a41a:	f140 80b9 	bpl.w	800a590 <_dtoa_r+0x4b8>
 800a41e:	f1ba 0f00 	cmp.w	sl, #0
 800a422:	f000 80b5 	beq.w	800a590 <_dtoa_r+0x4b8>
 800a426:	f1bb 0f00 	cmp.w	fp, #0
 800a42a:	dd31      	ble.n	800a490 <_dtoa_r+0x3b8>
 800a42c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800a430:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a434:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a438:	f108 31ff 	add.w	r1, r8, #4294967295
 800a43c:	9104      	str	r1, [sp, #16]
 800a43e:	3201      	adds	r2, #1
 800a440:	465c      	mov	r4, fp
 800a442:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a446:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800a44a:	ee07 2a90 	vmov	s15, r2
 800a44e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a452:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a456:	ee15 2a90 	vmov	r2, s11
 800a45a:	ec51 0b15 	vmov	r0, r1, d5
 800a45e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800a462:	2c00      	cmp	r4, #0
 800a464:	f040 8098 	bne.w	800a598 <_dtoa_r+0x4c0>
 800a468:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800a46c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a470:	ec41 0b17 	vmov	d7, r0, r1
 800a474:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a47c:	f300 8261 	bgt.w	800a942 <_dtoa_r+0x86a>
 800a480:	eeb1 7b47 	vneg.f64	d7, d7
 800a484:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a48c:	f100 80f5 	bmi.w	800a67a <_dtoa_r+0x5a2>
 800a490:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a494:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a496:	2a00      	cmp	r2, #0
 800a498:	f2c0 812c 	blt.w	800a6f4 <_dtoa_r+0x61c>
 800a49c:	f1b8 0f0e 	cmp.w	r8, #14
 800a4a0:	f300 8128 	bgt.w	800a6f4 <_dtoa_r+0x61c>
 800a4a4:	4b91      	ldr	r3, [pc, #580]	@ (800a6ec <_dtoa_r+0x614>)
 800a4a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a4aa:	ed93 6b00 	vldr	d6, [r3]
 800a4ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	da03      	bge.n	800a4bc <_dtoa_r+0x3e4>
 800a4b4:	f1ba 0f00 	cmp.w	sl, #0
 800a4b8:	f340 80d2 	ble.w	800a660 <_dtoa_r+0x588>
 800a4bc:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800a4c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a4c4:	463e      	mov	r6, r7
 800a4c6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a4ca:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a4ce:	ee15 3a10 	vmov	r3, s10
 800a4d2:	3330      	adds	r3, #48	@ 0x30
 800a4d4:	f806 3b01 	strb.w	r3, [r6], #1
 800a4d8:	1bf3      	subs	r3, r6, r7
 800a4da:	459a      	cmp	sl, r3
 800a4dc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a4e0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a4e4:	f040 80f8 	bne.w	800a6d8 <_dtoa_r+0x600>
 800a4e8:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a4ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a4f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4f4:	f300 80dd 	bgt.w	800a6b2 <_dtoa_r+0x5da>
 800a4f8:	eeb4 7b46 	vcmp.f64	d7, d6
 800a4fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a500:	d104      	bne.n	800a50c <_dtoa_r+0x434>
 800a502:	ee15 3a10 	vmov	r3, s10
 800a506:	07db      	lsls	r3, r3, #31
 800a508:	f100 80d3 	bmi.w	800a6b2 <_dtoa_r+0x5da>
 800a50c:	9901      	ldr	r1, [sp, #4]
 800a50e:	4648      	mov	r0, r9
 800a510:	f000 fc78 	bl	800ae04 <_Bfree>
 800a514:	2300      	movs	r3, #0
 800a516:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a518:	7033      	strb	r3, [r6, #0]
 800a51a:	f108 0301 	add.w	r3, r8, #1
 800a51e:	6013      	str	r3, [r2, #0]
 800a520:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a522:	2b00      	cmp	r3, #0
 800a524:	f000 8304 	beq.w	800ab30 <_dtoa_r+0xa58>
 800a528:	601e      	str	r6, [r3, #0]
 800a52a:	e301      	b.n	800ab30 <_dtoa_r+0xa58>
 800a52c:	2202      	movs	r2, #2
 800a52e:	e75e      	b.n	800a3ee <_dtoa_r+0x316>
 800a530:	07cc      	lsls	r4, r1, #31
 800a532:	d504      	bpl.n	800a53e <_dtoa_r+0x466>
 800a534:	ed90 6b00 	vldr	d6, [r0]
 800a538:	3201      	adds	r2, #1
 800a53a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a53e:	1049      	asrs	r1, r1, #1
 800a540:	3008      	adds	r0, #8
 800a542:	e755      	b.n	800a3f0 <_dtoa_r+0x318>
 800a544:	d022      	beq.n	800a58c <_dtoa_r+0x4b4>
 800a546:	f1c8 0100 	rsb	r1, r8, #0
 800a54a:	4a68      	ldr	r2, [pc, #416]	@ (800a6ec <_dtoa_r+0x614>)
 800a54c:	f001 000f 	and.w	r0, r1, #15
 800a550:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a554:	ed92 7b00 	vldr	d7, [r2]
 800a558:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a55c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a560:	4863      	ldr	r0, [pc, #396]	@ (800a6f0 <_dtoa_r+0x618>)
 800a562:	1109      	asrs	r1, r1, #4
 800a564:	2400      	movs	r4, #0
 800a566:	2202      	movs	r2, #2
 800a568:	b929      	cbnz	r1, 800a576 <_dtoa_r+0x49e>
 800a56a:	2c00      	cmp	r4, #0
 800a56c:	f43f af49 	beq.w	800a402 <_dtoa_r+0x32a>
 800a570:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a574:	e745      	b.n	800a402 <_dtoa_r+0x32a>
 800a576:	07ce      	lsls	r6, r1, #31
 800a578:	d505      	bpl.n	800a586 <_dtoa_r+0x4ae>
 800a57a:	ed90 6b00 	vldr	d6, [r0]
 800a57e:	3201      	adds	r2, #1
 800a580:	2401      	movs	r4, #1
 800a582:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a586:	1049      	asrs	r1, r1, #1
 800a588:	3008      	adds	r0, #8
 800a58a:	e7ed      	b.n	800a568 <_dtoa_r+0x490>
 800a58c:	2202      	movs	r2, #2
 800a58e:	e738      	b.n	800a402 <_dtoa_r+0x32a>
 800a590:	f8cd 8010 	str.w	r8, [sp, #16]
 800a594:	4654      	mov	r4, sl
 800a596:	e754      	b.n	800a442 <_dtoa_r+0x36a>
 800a598:	4a54      	ldr	r2, [pc, #336]	@ (800a6ec <_dtoa_r+0x614>)
 800a59a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800a59e:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a5a2:	9a08      	ldr	r2, [sp, #32]
 800a5a4:	ec41 0b17 	vmov	d7, r0, r1
 800a5a8:	443c      	add	r4, r7
 800a5aa:	b34a      	cbz	r2, 800a600 <_dtoa_r+0x528>
 800a5ac:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800a5b0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800a5b4:	463e      	mov	r6, r7
 800a5b6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a5ba:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800a5be:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a5c2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a5c6:	ee14 2a90 	vmov	r2, s9
 800a5ca:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a5ce:	3230      	adds	r2, #48	@ 0x30
 800a5d0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a5d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a5d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5dc:	f806 2b01 	strb.w	r2, [r6], #1
 800a5e0:	d438      	bmi.n	800a654 <_dtoa_r+0x57c>
 800a5e2:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a5e6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a5ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5ee:	d462      	bmi.n	800a6b6 <_dtoa_r+0x5de>
 800a5f0:	42a6      	cmp	r6, r4
 800a5f2:	f43f af4d 	beq.w	800a490 <_dtoa_r+0x3b8>
 800a5f6:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a5fa:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a5fe:	e7e0      	b.n	800a5c2 <_dtoa_r+0x4ea>
 800a600:	4621      	mov	r1, r4
 800a602:	463e      	mov	r6, r7
 800a604:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a608:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800a60c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a610:	ee14 2a90 	vmov	r2, s9
 800a614:	3230      	adds	r2, #48	@ 0x30
 800a616:	f806 2b01 	strb.w	r2, [r6], #1
 800a61a:	42a6      	cmp	r6, r4
 800a61c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a620:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a624:	d119      	bne.n	800a65a <_dtoa_r+0x582>
 800a626:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800a62a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a62e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a636:	dc3e      	bgt.n	800a6b6 <_dtoa_r+0x5de>
 800a638:	ee35 5b47 	vsub.f64	d5, d5, d7
 800a63c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800a640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a644:	f57f af24 	bpl.w	800a490 <_dtoa_r+0x3b8>
 800a648:	460e      	mov	r6, r1
 800a64a:	3901      	subs	r1, #1
 800a64c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a650:	2b30      	cmp	r3, #48	@ 0x30
 800a652:	d0f9      	beq.n	800a648 <_dtoa_r+0x570>
 800a654:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a658:	e758      	b.n	800a50c <_dtoa_r+0x434>
 800a65a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a65e:	e7d5      	b.n	800a60c <_dtoa_r+0x534>
 800a660:	d10b      	bne.n	800a67a <_dtoa_r+0x5a2>
 800a662:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800a666:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a66a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a66e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a676:	f2c0 8161 	blt.w	800a93c <_dtoa_r+0x864>
 800a67a:	2400      	movs	r4, #0
 800a67c:	4625      	mov	r5, r4
 800a67e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a680:	43db      	mvns	r3, r3
 800a682:	9304      	str	r3, [sp, #16]
 800a684:	463e      	mov	r6, r7
 800a686:	f04f 0800 	mov.w	r8, #0
 800a68a:	4621      	mov	r1, r4
 800a68c:	4648      	mov	r0, r9
 800a68e:	f000 fbb9 	bl	800ae04 <_Bfree>
 800a692:	2d00      	cmp	r5, #0
 800a694:	d0de      	beq.n	800a654 <_dtoa_r+0x57c>
 800a696:	f1b8 0f00 	cmp.w	r8, #0
 800a69a:	d005      	beq.n	800a6a8 <_dtoa_r+0x5d0>
 800a69c:	45a8      	cmp	r8, r5
 800a69e:	d003      	beq.n	800a6a8 <_dtoa_r+0x5d0>
 800a6a0:	4641      	mov	r1, r8
 800a6a2:	4648      	mov	r0, r9
 800a6a4:	f000 fbae 	bl	800ae04 <_Bfree>
 800a6a8:	4629      	mov	r1, r5
 800a6aa:	4648      	mov	r0, r9
 800a6ac:	f000 fbaa 	bl	800ae04 <_Bfree>
 800a6b0:	e7d0      	b.n	800a654 <_dtoa_r+0x57c>
 800a6b2:	f8cd 8010 	str.w	r8, [sp, #16]
 800a6b6:	4633      	mov	r3, r6
 800a6b8:	461e      	mov	r6, r3
 800a6ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6be:	2a39      	cmp	r2, #57	@ 0x39
 800a6c0:	d106      	bne.n	800a6d0 <_dtoa_r+0x5f8>
 800a6c2:	429f      	cmp	r7, r3
 800a6c4:	d1f8      	bne.n	800a6b8 <_dtoa_r+0x5e0>
 800a6c6:	9a04      	ldr	r2, [sp, #16]
 800a6c8:	3201      	adds	r2, #1
 800a6ca:	9204      	str	r2, [sp, #16]
 800a6cc:	2230      	movs	r2, #48	@ 0x30
 800a6ce:	703a      	strb	r2, [r7, #0]
 800a6d0:	781a      	ldrb	r2, [r3, #0]
 800a6d2:	3201      	adds	r2, #1
 800a6d4:	701a      	strb	r2, [r3, #0]
 800a6d6:	e7bd      	b.n	800a654 <_dtoa_r+0x57c>
 800a6d8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a6dc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a6e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6e4:	f47f aeef 	bne.w	800a4c6 <_dtoa_r+0x3ee>
 800a6e8:	e710      	b.n	800a50c <_dtoa_r+0x434>
 800a6ea:	bf00      	nop
 800a6ec:	0800d690 	.word	0x0800d690
 800a6f0:	0800d668 	.word	0x0800d668
 800a6f4:	9908      	ldr	r1, [sp, #32]
 800a6f6:	2900      	cmp	r1, #0
 800a6f8:	f000 80e3 	beq.w	800a8c2 <_dtoa_r+0x7ea>
 800a6fc:	9907      	ldr	r1, [sp, #28]
 800a6fe:	2901      	cmp	r1, #1
 800a700:	f300 80c8 	bgt.w	800a894 <_dtoa_r+0x7bc>
 800a704:	2d00      	cmp	r5, #0
 800a706:	f000 80c1 	beq.w	800a88c <_dtoa_r+0x7b4>
 800a70a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a70e:	9e05      	ldr	r6, [sp, #20]
 800a710:	461c      	mov	r4, r3
 800a712:	9304      	str	r3, [sp, #16]
 800a714:	9b05      	ldr	r3, [sp, #20]
 800a716:	4413      	add	r3, r2
 800a718:	9305      	str	r3, [sp, #20]
 800a71a:	9b06      	ldr	r3, [sp, #24]
 800a71c:	2101      	movs	r1, #1
 800a71e:	4413      	add	r3, r2
 800a720:	4648      	mov	r0, r9
 800a722:	9306      	str	r3, [sp, #24]
 800a724:	f000 fc6c 	bl	800b000 <__i2b>
 800a728:	9b04      	ldr	r3, [sp, #16]
 800a72a:	4605      	mov	r5, r0
 800a72c:	b166      	cbz	r6, 800a748 <_dtoa_r+0x670>
 800a72e:	9a06      	ldr	r2, [sp, #24]
 800a730:	2a00      	cmp	r2, #0
 800a732:	dd09      	ble.n	800a748 <_dtoa_r+0x670>
 800a734:	42b2      	cmp	r2, r6
 800a736:	9905      	ldr	r1, [sp, #20]
 800a738:	bfa8      	it	ge
 800a73a:	4632      	movge	r2, r6
 800a73c:	1a89      	subs	r1, r1, r2
 800a73e:	9105      	str	r1, [sp, #20]
 800a740:	9906      	ldr	r1, [sp, #24]
 800a742:	1ab6      	subs	r6, r6, r2
 800a744:	1a8a      	subs	r2, r1, r2
 800a746:	9206      	str	r2, [sp, #24]
 800a748:	b1fb      	cbz	r3, 800a78a <_dtoa_r+0x6b2>
 800a74a:	9a08      	ldr	r2, [sp, #32]
 800a74c:	2a00      	cmp	r2, #0
 800a74e:	f000 80bc 	beq.w	800a8ca <_dtoa_r+0x7f2>
 800a752:	b19c      	cbz	r4, 800a77c <_dtoa_r+0x6a4>
 800a754:	4629      	mov	r1, r5
 800a756:	4622      	mov	r2, r4
 800a758:	4648      	mov	r0, r9
 800a75a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a75c:	f000 fd10 	bl	800b180 <__pow5mult>
 800a760:	9a01      	ldr	r2, [sp, #4]
 800a762:	4601      	mov	r1, r0
 800a764:	4605      	mov	r5, r0
 800a766:	4648      	mov	r0, r9
 800a768:	f000 fc60 	bl	800b02c <__multiply>
 800a76c:	9901      	ldr	r1, [sp, #4]
 800a76e:	9004      	str	r0, [sp, #16]
 800a770:	4648      	mov	r0, r9
 800a772:	f000 fb47 	bl	800ae04 <_Bfree>
 800a776:	9a04      	ldr	r2, [sp, #16]
 800a778:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a77a:	9201      	str	r2, [sp, #4]
 800a77c:	1b1a      	subs	r2, r3, r4
 800a77e:	d004      	beq.n	800a78a <_dtoa_r+0x6b2>
 800a780:	9901      	ldr	r1, [sp, #4]
 800a782:	4648      	mov	r0, r9
 800a784:	f000 fcfc 	bl	800b180 <__pow5mult>
 800a788:	9001      	str	r0, [sp, #4]
 800a78a:	2101      	movs	r1, #1
 800a78c:	4648      	mov	r0, r9
 800a78e:	f000 fc37 	bl	800b000 <__i2b>
 800a792:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a794:	4604      	mov	r4, r0
 800a796:	2b00      	cmp	r3, #0
 800a798:	f000 81d0 	beq.w	800ab3c <_dtoa_r+0xa64>
 800a79c:	461a      	mov	r2, r3
 800a79e:	4601      	mov	r1, r0
 800a7a0:	4648      	mov	r0, r9
 800a7a2:	f000 fced 	bl	800b180 <__pow5mult>
 800a7a6:	9b07      	ldr	r3, [sp, #28]
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	4604      	mov	r4, r0
 800a7ac:	f300 8095 	bgt.w	800a8da <_dtoa_r+0x802>
 800a7b0:	9b02      	ldr	r3, [sp, #8]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	f040 808b 	bne.w	800a8ce <_dtoa_r+0x7f6>
 800a7b8:	9b03      	ldr	r3, [sp, #12]
 800a7ba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a7be:	2a00      	cmp	r2, #0
 800a7c0:	f040 8087 	bne.w	800a8d2 <_dtoa_r+0x7fa>
 800a7c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a7c8:	0d12      	lsrs	r2, r2, #20
 800a7ca:	0512      	lsls	r2, r2, #20
 800a7cc:	2a00      	cmp	r2, #0
 800a7ce:	f000 8082 	beq.w	800a8d6 <_dtoa_r+0x7fe>
 800a7d2:	9b05      	ldr	r3, [sp, #20]
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	9305      	str	r3, [sp, #20]
 800a7d8:	9b06      	ldr	r3, [sp, #24]
 800a7da:	3301      	adds	r3, #1
 800a7dc:	9306      	str	r3, [sp, #24]
 800a7de:	2301      	movs	r3, #1
 800a7e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a7e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	f000 81af 	beq.w	800ab48 <_dtoa_r+0xa70>
 800a7ea:	6922      	ldr	r2, [r4, #16]
 800a7ec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a7f0:	6910      	ldr	r0, [r2, #16]
 800a7f2:	f000 fbb9 	bl	800af68 <__hi0bits>
 800a7f6:	f1c0 0020 	rsb	r0, r0, #32
 800a7fa:	9b06      	ldr	r3, [sp, #24]
 800a7fc:	4418      	add	r0, r3
 800a7fe:	f010 001f 	ands.w	r0, r0, #31
 800a802:	d076      	beq.n	800a8f2 <_dtoa_r+0x81a>
 800a804:	f1c0 0220 	rsb	r2, r0, #32
 800a808:	2a04      	cmp	r2, #4
 800a80a:	dd69      	ble.n	800a8e0 <_dtoa_r+0x808>
 800a80c:	9b05      	ldr	r3, [sp, #20]
 800a80e:	f1c0 001c 	rsb	r0, r0, #28
 800a812:	4403      	add	r3, r0
 800a814:	9305      	str	r3, [sp, #20]
 800a816:	9b06      	ldr	r3, [sp, #24]
 800a818:	4406      	add	r6, r0
 800a81a:	4403      	add	r3, r0
 800a81c:	9306      	str	r3, [sp, #24]
 800a81e:	9b05      	ldr	r3, [sp, #20]
 800a820:	2b00      	cmp	r3, #0
 800a822:	dd05      	ble.n	800a830 <_dtoa_r+0x758>
 800a824:	9901      	ldr	r1, [sp, #4]
 800a826:	461a      	mov	r2, r3
 800a828:	4648      	mov	r0, r9
 800a82a:	f000 fd03 	bl	800b234 <__lshift>
 800a82e:	9001      	str	r0, [sp, #4]
 800a830:	9b06      	ldr	r3, [sp, #24]
 800a832:	2b00      	cmp	r3, #0
 800a834:	dd05      	ble.n	800a842 <_dtoa_r+0x76a>
 800a836:	4621      	mov	r1, r4
 800a838:	461a      	mov	r2, r3
 800a83a:	4648      	mov	r0, r9
 800a83c:	f000 fcfa 	bl	800b234 <__lshift>
 800a840:	4604      	mov	r4, r0
 800a842:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a844:	2b00      	cmp	r3, #0
 800a846:	d056      	beq.n	800a8f6 <_dtoa_r+0x81e>
 800a848:	9801      	ldr	r0, [sp, #4]
 800a84a:	4621      	mov	r1, r4
 800a84c:	f000 fd5e 	bl	800b30c <__mcmp>
 800a850:	2800      	cmp	r0, #0
 800a852:	da50      	bge.n	800a8f6 <_dtoa_r+0x81e>
 800a854:	f108 33ff 	add.w	r3, r8, #4294967295
 800a858:	9304      	str	r3, [sp, #16]
 800a85a:	9901      	ldr	r1, [sp, #4]
 800a85c:	2300      	movs	r3, #0
 800a85e:	220a      	movs	r2, #10
 800a860:	4648      	mov	r0, r9
 800a862:	f000 faf1 	bl	800ae48 <__multadd>
 800a866:	9b08      	ldr	r3, [sp, #32]
 800a868:	9001      	str	r0, [sp, #4]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	f000 816e 	beq.w	800ab4c <_dtoa_r+0xa74>
 800a870:	4629      	mov	r1, r5
 800a872:	2300      	movs	r3, #0
 800a874:	220a      	movs	r2, #10
 800a876:	4648      	mov	r0, r9
 800a878:	f000 fae6 	bl	800ae48 <__multadd>
 800a87c:	f1bb 0f00 	cmp.w	fp, #0
 800a880:	4605      	mov	r5, r0
 800a882:	dc64      	bgt.n	800a94e <_dtoa_r+0x876>
 800a884:	9b07      	ldr	r3, [sp, #28]
 800a886:	2b02      	cmp	r3, #2
 800a888:	dc3e      	bgt.n	800a908 <_dtoa_r+0x830>
 800a88a:	e060      	b.n	800a94e <_dtoa_r+0x876>
 800a88c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a88e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a892:	e73c      	b.n	800a70e <_dtoa_r+0x636>
 800a894:	f10a 34ff 	add.w	r4, sl, #4294967295
 800a898:	42a3      	cmp	r3, r4
 800a89a:	bfbf      	itttt	lt
 800a89c:	1ae2      	sublt	r2, r4, r3
 800a89e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a8a0:	189b      	addlt	r3, r3, r2
 800a8a2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800a8a4:	bfae      	itee	ge
 800a8a6:	1b1c      	subge	r4, r3, r4
 800a8a8:	4623      	movlt	r3, r4
 800a8aa:	2400      	movlt	r4, #0
 800a8ac:	f1ba 0f00 	cmp.w	sl, #0
 800a8b0:	bfb5      	itete	lt
 800a8b2:	9a05      	ldrlt	r2, [sp, #20]
 800a8b4:	9e05      	ldrge	r6, [sp, #20]
 800a8b6:	eba2 060a 	sublt.w	r6, r2, sl
 800a8ba:	4652      	movge	r2, sl
 800a8bc:	bfb8      	it	lt
 800a8be:	2200      	movlt	r2, #0
 800a8c0:	e727      	b.n	800a712 <_dtoa_r+0x63a>
 800a8c2:	9e05      	ldr	r6, [sp, #20]
 800a8c4:	9d08      	ldr	r5, [sp, #32]
 800a8c6:	461c      	mov	r4, r3
 800a8c8:	e730      	b.n	800a72c <_dtoa_r+0x654>
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	e758      	b.n	800a780 <_dtoa_r+0x6a8>
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	e786      	b.n	800a7e0 <_dtoa_r+0x708>
 800a8d2:	9b02      	ldr	r3, [sp, #8]
 800a8d4:	e784      	b.n	800a7e0 <_dtoa_r+0x708>
 800a8d6:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a8d8:	e783      	b.n	800a7e2 <_dtoa_r+0x70a>
 800a8da:	2300      	movs	r3, #0
 800a8dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a8de:	e784      	b.n	800a7ea <_dtoa_r+0x712>
 800a8e0:	d09d      	beq.n	800a81e <_dtoa_r+0x746>
 800a8e2:	9b05      	ldr	r3, [sp, #20]
 800a8e4:	321c      	adds	r2, #28
 800a8e6:	4413      	add	r3, r2
 800a8e8:	9305      	str	r3, [sp, #20]
 800a8ea:	9b06      	ldr	r3, [sp, #24]
 800a8ec:	4416      	add	r6, r2
 800a8ee:	4413      	add	r3, r2
 800a8f0:	e794      	b.n	800a81c <_dtoa_r+0x744>
 800a8f2:	4602      	mov	r2, r0
 800a8f4:	e7f5      	b.n	800a8e2 <_dtoa_r+0x80a>
 800a8f6:	f1ba 0f00 	cmp.w	sl, #0
 800a8fa:	f8cd 8010 	str.w	r8, [sp, #16]
 800a8fe:	46d3      	mov	fp, sl
 800a900:	dc21      	bgt.n	800a946 <_dtoa_r+0x86e>
 800a902:	9b07      	ldr	r3, [sp, #28]
 800a904:	2b02      	cmp	r3, #2
 800a906:	dd1e      	ble.n	800a946 <_dtoa_r+0x86e>
 800a908:	f1bb 0f00 	cmp.w	fp, #0
 800a90c:	f47f aeb7 	bne.w	800a67e <_dtoa_r+0x5a6>
 800a910:	4621      	mov	r1, r4
 800a912:	465b      	mov	r3, fp
 800a914:	2205      	movs	r2, #5
 800a916:	4648      	mov	r0, r9
 800a918:	f000 fa96 	bl	800ae48 <__multadd>
 800a91c:	4601      	mov	r1, r0
 800a91e:	4604      	mov	r4, r0
 800a920:	9801      	ldr	r0, [sp, #4]
 800a922:	f000 fcf3 	bl	800b30c <__mcmp>
 800a926:	2800      	cmp	r0, #0
 800a928:	f77f aea9 	ble.w	800a67e <_dtoa_r+0x5a6>
 800a92c:	463e      	mov	r6, r7
 800a92e:	2331      	movs	r3, #49	@ 0x31
 800a930:	f806 3b01 	strb.w	r3, [r6], #1
 800a934:	9b04      	ldr	r3, [sp, #16]
 800a936:	3301      	adds	r3, #1
 800a938:	9304      	str	r3, [sp, #16]
 800a93a:	e6a4      	b.n	800a686 <_dtoa_r+0x5ae>
 800a93c:	f8cd 8010 	str.w	r8, [sp, #16]
 800a940:	4654      	mov	r4, sl
 800a942:	4625      	mov	r5, r4
 800a944:	e7f2      	b.n	800a92c <_dtoa_r+0x854>
 800a946:	9b08      	ldr	r3, [sp, #32]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	f000 8103 	beq.w	800ab54 <_dtoa_r+0xa7c>
 800a94e:	2e00      	cmp	r6, #0
 800a950:	dd05      	ble.n	800a95e <_dtoa_r+0x886>
 800a952:	4629      	mov	r1, r5
 800a954:	4632      	mov	r2, r6
 800a956:	4648      	mov	r0, r9
 800a958:	f000 fc6c 	bl	800b234 <__lshift>
 800a95c:	4605      	mov	r5, r0
 800a95e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a960:	2b00      	cmp	r3, #0
 800a962:	d058      	beq.n	800aa16 <_dtoa_r+0x93e>
 800a964:	6869      	ldr	r1, [r5, #4]
 800a966:	4648      	mov	r0, r9
 800a968:	f000 fa0c 	bl	800ad84 <_Balloc>
 800a96c:	4606      	mov	r6, r0
 800a96e:	b928      	cbnz	r0, 800a97c <_dtoa_r+0x8a4>
 800a970:	4b82      	ldr	r3, [pc, #520]	@ (800ab7c <_dtoa_r+0xaa4>)
 800a972:	4602      	mov	r2, r0
 800a974:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a978:	f7ff bbc7 	b.w	800a10a <_dtoa_r+0x32>
 800a97c:	692a      	ldr	r2, [r5, #16]
 800a97e:	3202      	adds	r2, #2
 800a980:	0092      	lsls	r2, r2, #2
 800a982:	f105 010c 	add.w	r1, r5, #12
 800a986:	300c      	adds	r0, #12
 800a988:	f001 ff1e 	bl	800c7c8 <memcpy>
 800a98c:	2201      	movs	r2, #1
 800a98e:	4631      	mov	r1, r6
 800a990:	4648      	mov	r0, r9
 800a992:	f000 fc4f 	bl	800b234 <__lshift>
 800a996:	1c7b      	adds	r3, r7, #1
 800a998:	9305      	str	r3, [sp, #20]
 800a99a:	eb07 030b 	add.w	r3, r7, fp
 800a99e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9a0:	9b02      	ldr	r3, [sp, #8]
 800a9a2:	f003 0301 	and.w	r3, r3, #1
 800a9a6:	46a8      	mov	r8, r5
 800a9a8:	9308      	str	r3, [sp, #32]
 800a9aa:	4605      	mov	r5, r0
 800a9ac:	9b05      	ldr	r3, [sp, #20]
 800a9ae:	9801      	ldr	r0, [sp, #4]
 800a9b0:	4621      	mov	r1, r4
 800a9b2:	f103 3bff 	add.w	fp, r3, #4294967295
 800a9b6:	f7ff fb07 	bl	8009fc8 <quorem>
 800a9ba:	4641      	mov	r1, r8
 800a9bc:	9002      	str	r0, [sp, #8]
 800a9be:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a9c2:	9801      	ldr	r0, [sp, #4]
 800a9c4:	f000 fca2 	bl	800b30c <__mcmp>
 800a9c8:	462a      	mov	r2, r5
 800a9ca:	9006      	str	r0, [sp, #24]
 800a9cc:	4621      	mov	r1, r4
 800a9ce:	4648      	mov	r0, r9
 800a9d0:	f000 fcb8 	bl	800b344 <__mdiff>
 800a9d4:	68c2      	ldr	r2, [r0, #12]
 800a9d6:	4606      	mov	r6, r0
 800a9d8:	b9fa      	cbnz	r2, 800aa1a <_dtoa_r+0x942>
 800a9da:	4601      	mov	r1, r0
 800a9dc:	9801      	ldr	r0, [sp, #4]
 800a9de:	f000 fc95 	bl	800b30c <__mcmp>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	4631      	mov	r1, r6
 800a9e6:	4648      	mov	r0, r9
 800a9e8:	920a      	str	r2, [sp, #40]	@ 0x28
 800a9ea:	f000 fa0b 	bl	800ae04 <_Bfree>
 800a9ee:	9b07      	ldr	r3, [sp, #28]
 800a9f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a9f2:	9e05      	ldr	r6, [sp, #20]
 800a9f4:	ea43 0102 	orr.w	r1, r3, r2
 800a9f8:	9b08      	ldr	r3, [sp, #32]
 800a9fa:	4319      	orrs	r1, r3
 800a9fc:	d10f      	bne.n	800aa1e <_dtoa_r+0x946>
 800a9fe:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800aa02:	d028      	beq.n	800aa56 <_dtoa_r+0x97e>
 800aa04:	9b06      	ldr	r3, [sp, #24]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	dd02      	ble.n	800aa10 <_dtoa_r+0x938>
 800aa0a:	9b02      	ldr	r3, [sp, #8]
 800aa0c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800aa10:	f88b a000 	strb.w	sl, [fp]
 800aa14:	e639      	b.n	800a68a <_dtoa_r+0x5b2>
 800aa16:	4628      	mov	r0, r5
 800aa18:	e7bd      	b.n	800a996 <_dtoa_r+0x8be>
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	e7e2      	b.n	800a9e4 <_dtoa_r+0x90c>
 800aa1e:	9b06      	ldr	r3, [sp, #24]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	db04      	blt.n	800aa2e <_dtoa_r+0x956>
 800aa24:	9907      	ldr	r1, [sp, #28]
 800aa26:	430b      	orrs	r3, r1
 800aa28:	9908      	ldr	r1, [sp, #32]
 800aa2a:	430b      	orrs	r3, r1
 800aa2c:	d120      	bne.n	800aa70 <_dtoa_r+0x998>
 800aa2e:	2a00      	cmp	r2, #0
 800aa30:	ddee      	ble.n	800aa10 <_dtoa_r+0x938>
 800aa32:	9901      	ldr	r1, [sp, #4]
 800aa34:	2201      	movs	r2, #1
 800aa36:	4648      	mov	r0, r9
 800aa38:	f000 fbfc 	bl	800b234 <__lshift>
 800aa3c:	4621      	mov	r1, r4
 800aa3e:	9001      	str	r0, [sp, #4]
 800aa40:	f000 fc64 	bl	800b30c <__mcmp>
 800aa44:	2800      	cmp	r0, #0
 800aa46:	dc03      	bgt.n	800aa50 <_dtoa_r+0x978>
 800aa48:	d1e2      	bne.n	800aa10 <_dtoa_r+0x938>
 800aa4a:	f01a 0f01 	tst.w	sl, #1
 800aa4e:	d0df      	beq.n	800aa10 <_dtoa_r+0x938>
 800aa50:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800aa54:	d1d9      	bne.n	800aa0a <_dtoa_r+0x932>
 800aa56:	2339      	movs	r3, #57	@ 0x39
 800aa58:	f88b 3000 	strb.w	r3, [fp]
 800aa5c:	4633      	mov	r3, r6
 800aa5e:	461e      	mov	r6, r3
 800aa60:	3b01      	subs	r3, #1
 800aa62:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800aa66:	2a39      	cmp	r2, #57	@ 0x39
 800aa68:	d053      	beq.n	800ab12 <_dtoa_r+0xa3a>
 800aa6a:	3201      	adds	r2, #1
 800aa6c:	701a      	strb	r2, [r3, #0]
 800aa6e:	e60c      	b.n	800a68a <_dtoa_r+0x5b2>
 800aa70:	2a00      	cmp	r2, #0
 800aa72:	dd07      	ble.n	800aa84 <_dtoa_r+0x9ac>
 800aa74:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800aa78:	d0ed      	beq.n	800aa56 <_dtoa_r+0x97e>
 800aa7a:	f10a 0301 	add.w	r3, sl, #1
 800aa7e:	f88b 3000 	strb.w	r3, [fp]
 800aa82:	e602      	b.n	800a68a <_dtoa_r+0x5b2>
 800aa84:	9b05      	ldr	r3, [sp, #20]
 800aa86:	9a05      	ldr	r2, [sp, #20]
 800aa88:	f803 ac01 	strb.w	sl, [r3, #-1]
 800aa8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d029      	beq.n	800aae6 <_dtoa_r+0xa0e>
 800aa92:	9901      	ldr	r1, [sp, #4]
 800aa94:	2300      	movs	r3, #0
 800aa96:	220a      	movs	r2, #10
 800aa98:	4648      	mov	r0, r9
 800aa9a:	f000 f9d5 	bl	800ae48 <__multadd>
 800aa9e:	45a8      	cmp	r8, r5
 800aaa0:	9001      	str	r0, [sp, #4]
 800aaa2:	f04f 0300 	mov.w	r3, #0
 800aaa6:	f04f 020a 	mov.w	r2, #10
 800aaaa:	4641      	mov	r1, r8
 800aaac:	4648      	mov	r0, r9
 800aaae:	d107      	bne.n	800aac0 <_dtoa_r+0x9e8>
 800aab0:	f000 f9ca 	bl	800ae48 <__multadd>
 800aab4:	4680      	mov	r8, r0
 800aab6:	4605      	mov	r5, r0
 800aab8:	9b05      	ldr	r3, [sp, #20]
 800aaba:	3301      	adds	r3, #1
 800aabc:	9305      	str	r3, [sp, #20]
 800aabe:	e775      	b.n	800a9ac <_dtoa_r+0x8d4>
 800aac0:	f000 f9c2 	bl	800ae48 <__multadd>
 800aac4:	4629      	mov	r1, r5
 800aac6:	4680      	mov	r8, r0
 800aac8:	2300      	movs	r3, #0
 800aaca:	220a      	movs	r2, #10
 800aacc:	4648      	mov	r0, r9
 800aace:	f000 f9bb 	bl	800ae48 <__multadd>
 800aad2:	4605      	mov	r5, r0
 800aad4:	e7f0      	b.n	800aab8 <_dtoa_r+0x9e0>
 800aad6:	f1bb 0f00 	cmp.w	fp, #0
 800aada:	bfcc      	ite	gt
 800aadc:	465e      	movgt	r6, fp
 800aade:	2601      	movle	r6, #1
 800aae0:	443e      	add	r6, r7
 800aae2:	f04f 0800 	mov.w	r8, #0
 800aae6:	9901      	ldr	r1, [sp, #4]
 800aae8:	2201      	movs	r2, #1
 800aaea:	4648      	mov	r0, r9
 800aaec:	f000 fba2 	bl	800b234 <__lshift>
 800aaf0:	4621      	mov	r1, r4
 800aaf2:	9001      	str	r0, [sp, #4]
 800aaf4:	f000 fc0a 	bl	800b30c <__mcmp>
 800aaf8:	2800      	cmp	r0, #0
 800aafa:	dcaf      	bgt.n	800aa5c <_dtoa_r+0x984>
 800aafc:	d102      	bne.n	800ab04 <_dtoa_r+0xa2c>
 800aafe:	f01a 0f01 	tst.w	sl, #1
 800ab02:	d1ab      	bne.n	800aa5c <_dtoa_r+0x984>
 800ab04:	4633      	mov	r3, r6
 800ab06:	461e      	mov	r6, r3
 800ab08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab0c:	2a30      	cmp	r2, #48	@ 0x30
 800ab0e:	d0fa      	beq.n	800ab06 <_dtoa_r+0xa2e>
 800ab10:	e5bb      	b.n	800a68a <_dtoa_r+0x5b2>
 800ab12:	429f      	cmp	r7, r3
 800ab14:	d1a3      	bne.n	800aa5e <_dtoa_r+0x986>
 800ab16:	9b04      	ldr	r3, [sp, #16]
 800ab18:	3301      	adds	r3, #1
 800ab1a:	9304      	str	r3, [sp, #16]
 800ab1c:	2331      	movs	r3, #49	@ 0x31
 800ab1e:	703b      	strb	r3, [r7, #0]
 800ab20:	e5b3      	b.n	800a68a <_dtoa_r+0x5b2>
 800ab22:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ab24:	4f16      	ldr	r7, [pc, #88]	@ (800ab80 <_dtoa_r+0xaa8>)
 800ab26:	b11b      	cbz	r3, 800ab30 <_dtoa_r+0xa58>
 800ab28:	f107 0308 	add.w	r3, r7, #8
 800ab2c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800ab2e:	6013      	str	r3, [r2, #0]
 800ab30:	4638      	mov	r0, r7
 800ab32:	b011      	add	sp, #68	@ 0x44
 800ab34:	ecbd 8b02 	vpop	{d8}
 800ab38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab3c:	9b07      	ldr	r3, [sp, #28]
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	f77f ae36 	ble.w	800a7b0 <_dtoa_r+0x6d8>
 800ab44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab46:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab48:	2001      	movs	r0, #1
 800ab4a:	e656      	b.n	800a7fa <_dtoa_r+0x722>
 800ab4c:	f1bb 0f00 	cmp.w	fp, #0
 800ab50:	f77f aed7 	ble.w	800a902 <_dtoa_r+0x82a>
 800ab54:	463e      	mov	r6, r7
 800ab56:	9801      	ldr	r0, [sp, #4]
 800ab58:	4621      	mov	r1, r4
 800ab5a:	f7ff fa35 	bl	8009fc8 <quorem>
 800ab5e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800ab62:	f806 ab01 	strb.w	sl, [r6], #1
 800ab66:	1bf2      	subs	r2, r6, r7
 800ab68:	4593      	cmp	fp, r2
 800ab6a:	ddb4      	ble.n	800aad6 <_dtoa_r+0x9fe>
 800ab6c:	9901      	ldr	r1, [sp, #4]
 800ab6e:	2300      	movs	r3, #0
 800ab70:	220a      	movs	r2, #10
 800ab72:	4648      	mov	r0, r9
 800ab74:	f000 f968 	bl	800ae48 <__multadd>
 800ab78:	9001      	str	r0, [sp, #4]
 800ab7a:	e7ec      	b.n	800ab56 <_dtoa_r+0xa7e>
 800ab7c:	0800d5ed 	.word	0x0800d5ed
 800ab80:	0800d571 	.word	0x0800d571

0800ab84 <_free_r>:
 800ab84:	b538      	push	{r3, r4, r5, lr}
 800ab86:	4605      	mov	r5, r0
 800ab88:	2900      	cmp	r1, #0
 800ab8a:	d041      	beq.n	800ac10 <_free_r+0x8c>
 800ab8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab90:	1f0c      	subs	r4, r1, #4
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	bfb8      	it	lt
 800ab96:	18e4      	addlt	r4, r4, r3
 800ab98:	f000 f8e8 	bl	800ad6c <__malloc_lock>
 800ab9c:	4a1d      	ldr	r2, [pc, #116]	@ (800ac14 <_free_r+0x90>)
 800ab9e:	6813      	ldr	r3, [r2, #0]
 800aba0:	b933      	cbnz	r3, 800abb0 <_free_r+0x2c>
 800aba2:	6063      	str	r3, [r4, #4]
 800aba4:	6014      	str	r4, [r2, #0]
 800aba6:	4628      	mov	r0, r5
 800aba8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abac:	f000 b8e4 	b.w	800ad78 <__malloc_unlock>
 800abb0:	42a3      	cmp	r3, r4
 800abb2:	d908      	bls.n	800abc6 <_free_r+0x42>
 800abb4:	6820      	ldr	r0, [r4, #0]
 800abb6:	1821      	adds	r1, r4, r0
 800abb8:	428b      	cmp	r3, r1
 800abba:	bf01      	itttt	eq
 800abbc:	6819      	ldreq	r1, [r3, #0]
 800abbe:	685b      	ldreq	r3, [r3, #4]
 800abc0:	1809      	addeq	r1, r1, r0
 800abc2:	6021      	streq	r1, [r4, #0]
 800abc4:	e7ed      	b.n	800aba2 <_free_r+0x1e>
 800abc6:	461a      	mov	r2, r3
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	b10b      	cbz	r3, 800abd0 <_free_r+0x4c>
 800abcc:	42a3      	cmp	r3, r4
 800abce:	d9fa      	bls.n	800abc6 <_free_r+0x42>
 800abd0:	6811      	ldr	r1, [r2, #0]
 800abd2:	1850      	adds	r0, r2, r1
 800abd4:	42a0      	cmp	r0, r4
 800abd6:	d10b      	bne.n	800abf0 <_free_r+0x6c>
 800abd8:	6820      	ldr	r0, [r4, #0]
 800abda:	4401      	add	r1, r0
 800abdc:	1850      	adds	r0, r2, r1
 800abde:	4283      	cmp	r3, r0
 800abe0:	6011      	str	r1, [r2, #0]
 800abe2:	d1e0      	bne.n	800aba6 <_free_r+0x22>
 800abe4:	6818      	ldr	r0, [r3, #0]
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	6053      	str	r3, [r2, #4]
 800abea:	4408      	add	r0, r1
 800abec:	6010      	str	r0, [r2, #0]
 800abee:	e7da      	b.n	800aba6 <_free_r+0x22>
 800abf0:	d902      	bls.n	800abf8 <_free_r+0x74>
 800abf2:	230c      	movs	r3, #12
 800abf4:	602b      	str	r3, [r5, #0]
 800abf6:	e7d6      	b.n	800aba6 <_free_r+0x22>
 800abf8:	6820      	ldr	r0, [r4, #0]
 800abfa:	1821      	adds	r1, r4, r0
 800abfc:	428b      	cmp	r3, r1
 800abfe:	bf04      	itt	eq
 800ac00:	6819      	ldreq	r1, [r3, #0]
 800ac02:	685b      	ldreq	r3, [r3, #4]
 800ac04:	6063      	str	r3, [r4, #4]
 800ac06:	bf04      	itt	eq
 800ac08:	1809      	addeq	r1, r1, r0
 800ac0a:	6021      	streq	r1, [r4, #0]
 800ac0c:	6054      	str	r4, [r2, #4]
 800ac0e:	e7ca      	b.n	800aba6 <_free_r+0x22>
 800ac10:	bd38      	pop	{r3, r4, r5, pc}
 800ac12:	bf00      	nop
 800ac14:	24000428 	.word	0x24000428

0800ac18 <malloc>:
 800ac18:	4b02      	ldr	r3, [pc, #8]	@ (800ac24 <malloc+0xc>)
 800ac1a:	4601      	mov	r1, r0
 800ac1c:	6818      	ldr	r0, [r3, #0]
 800ac1e:	f000 b825 	b.w	800ac6c <_malloc_r>
 800ac22:	bf00      	nop
 800ac24:	2400001c 	.word	0x2400001c

0800ac28 <sbrk_aligned>:
 800ac28:	b570      	push	{r4, r5, r6, lr}
 800ac2a:	4e0f      	ldr	r6, [pc, #60]	@ (800ac68 <sbrk_aligned+0x40>)
 800ac2c:	460c      	mov	r4, r1
 800ac2e:	6831      	ldr	r1, [r6, #0]
 800ac30:	4605      	mov	r5, r0
 800ac32:	b911      	cbnz	r1, 800ac3a <sbrk_aligned+0x12>
 800ac34:	f001 fdb8 	bl	800c7a8 <_sbrk_r>
 800ac38:	6030      	str	r0, [r6, #0]
 800ac3a:	4621      	mov	r1, r4
 800ac3c:	4628      	mov	r0, r5
 800ac3e:	f001 fdb3 	bl	800c7a8 <_sbrk_r>
 800ac42:	1c43      	adds	r3, r0, #1
 800ac44:	d103      	bne.n	800ac4e <sbrk_aligned+0x26>
 800ac46:	f04f 34ff 	mov.w	r4, #4294967295
 800ac4a:	4620      	mov	r0, r4
 800ac4c:	bd70      	pop	{r4, r5, r6, pc}
 800ac4e:	1cc4      	adds	r4, r0, #3
 800ac50:	f024 0403 	bic.w	r4, r4, #3
 800ac54:	42a0      	cmp	r0, r4
 800ac56:	d0f8      	beq.n	800ac4a <sbrk_aligned+0x22>
 800ac58:	1a21      	subs	r1, r4, r0
 800ac5a:	4628      	mov	r0, r5
 800ac5c:	f001 fda4 	bl	800c7a8 <_sbrk_r>
 800ac60:	3001      	adds	r0, #1
 800ac62:	d1f2      	bne.n	800ac4a <sbrk_aligned+0x22>
 800ac64:	e7ef      	b.n	800ac46 <sbrk_aligned+0x1e>
 800ac66:	bf00      	nop
 800ac68:	24000424 	.word	0x24000424

0800ac6c <_malloc_r>:
 800ac6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac70:	1ccd      	adds	r5, r1, #3
 800ac72:	f025 0503 	bic.w	r5, r5, #3
 800ac76:	3508      	adds	r5, #8
 800ac78:	2d0c      	cmp	r5, #12
 800ac7a:	bf38      	it	cc
 800ac7c:	250c      	movcc	r5, #12
 800ac7e:	2d00      	cmp	r5, #0
 800ac80:	4606      	mov	r6, r0
 800ac82:	db01      	blt.n	800ac88 <_malloc_r+0x1c>
 800ac84:	42a9      	cmp	r1, r5
 800ac86:	d904      	bls.n	800ac92 <_malloc_r+0x26>
 800ac88:	230c      	movs	r3, #12
 800ac8a:	6033      	str	r3, [r6, #0]
 800ac8c:	2000      	movs	r0, #0
 800ac8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ad68 <_malloc_r+0xfc>
 800ac96:	f000 f869 	bl	800ad6c <__malloc_lock>
 800ac9a:	f8d8 3000 	ldr.w	r3, [r8]
 800ac9e:	461c      	mov	r4, r3
 800aca0:	bb44      	cbnz	r4, 800acf4 <_malloc_r+0x88>
 800aca2:	4629      	mov	r1, r5
 800aca4:	4630      	mov	r0, r6
 800aca6:	f7ff ffbf 	bl	800ac28 <sbrk_aligned>
 800acaa:	1c43      	adds	r3, r0, #1
 800acac:	4604      	mov	r4, r0
 800acae:	d158      	bne.n	800ad62 <_malloc_r+0xf6>
 800acb0:	f8d8 4000 	ldr.w	r4, [r8]
 800acb4:	4627      	mov	r7, r4
 800acb6:	2f00      	cmp	r7, #0
 800acb8:	d143      	bne.n	800ad42 <_malloc_r+0xd6>
 800acba:	2c00      	cmp	r4, #0
 800acbc:	d04b      	beq.n	800ad56 <_malloc_r+0xea>
 800acbe:	6823      	ldr	r3, [r4, #0]
 800acc0:	4639      	mov	r1, r7
 800acc2:	4630      	mov	r0, r6
 800acc4:	eb04 0903 	add.w	r9, r4, r3
 800acc8:	f001 fd6e 	bl	800c7a8 <_sbrk_r>
 800accc:	4581      	cmp	r9, r0
 800acce:	d142      	bne.n	800ad56 <_malloc_r+0xea>
 800acd0:	6821      	ldr	r1, [r4, #0]
 800acd2:	1a6d      	subs	r5, r5, r1
 800acd4:	4629      	mov	r1, r5
 800acd6:	4630      	mov	r0, r6
 800acd8:	f7ff ffa6 	bl	800ac28 <sbrk_aligned>
 800acdc:	3001      	adds	r0, #1
 800acde:	d03a      	beq.n	800ad56 <_malloc_r+0xea>
 800ace0:	6823      	ldr	r3, [r4, #0]
 800ace2:	442b      	add	r3, r5
 800ace4:	6023      	str	r3, [r4, #0]
 800ace6:	f8d8 3000 	ldr.w	r3, [r8]
 800acea:	685a      	ldr	r2, [r3, #4]
 800acec:	bb62      	cbnz	r2, 800ad48 <_malloc_r+0xdc>
 800acee:	f8c8 7000 	str.w	r7, [r8]
 800acf2:	e00f      	b.n	800ad14 <_malloc_r+0xa8>
 800acf4:	6822      	ldr	r2, [r4, #0]
 800acf6:	1b52      	subs	r2, r2, r5
 800acf8:	d420      	bmi.n	800ad3c <_malloc_r+0xd0>
 800acfa:	2a0b      	cmp	r2, #11
 800acfc:	d917      	bls.n	800ad2e <_malloc_r+0xc2>
 800acfe:	1961      	adds	r1, r4, r5
 800ad00:	42a3      	cmp	r3, r4
 800ad02:	6025      	str	r5, [r4, #0]
 800ad04:	bf18      	it	ne
 800ad06:	6059      	strne	r1, [r3, #4]
 800ad08:	6863      	ldr	r3, [r4, #4]
 800ad0a:	bf08      	it	eq
 800ad0c:	f8c8 1000 	streq.w	r1, [r8]
 800ad10:	5162      	str	r2, [r4, r5]
 800ad12:	604b      	str	r3, [r1, #4]
 800ad14:	4630      	mov	r0, r6
 800ad16:	f000 f82f 	bl	800ad78 <__malloc_unlock>
 800ad1a:	f104 000b 	add.w	r0, r4, #11
 800ad1e:	1d23      	adds	r3, r4, #4
 800ad20:	f020 0007 	bic.w	r0, r0, #7
 800ad24:	1ac2      	subs	r2, r0, r3
 800ad26:	bf1c      	itt	ne
 800ad28:	1a1b      	subne	r3, r3, r0
 800ad2a:	50a3      	strne	r3, [r4, r2]
 800ad2c:	e7af      	b.n	800ac8e <_malloc_r+0x22>
 800ad2e:	6862      	ldr	r2, [r4, #4]
 800ad30:	42a3      	cmp	r3, r4
 800ad32:	bf0c      	ite	eq
 800ad34:	f8c8 2000 	streq.w	r2, [r8]
 800ad38:	605a      	strne	r2, [r3, #4]
 800ad3a:	e7eb      	b.n	800ad14 <_malloc_r+0xa8>
 800ad3c:	4623      	mov	r3, r4
 800ad3e:	6864      	ldr	r4, [r4, #4]
 800ad40:	e7ae      	b.n	800aca0 <_malloc_r+0x34>
 800ad42:	463c      	mov	r4, r7
 800ad44:	687f      	ldr	r7, [r7, #4]
 800ad46:	e7b6      	b.n	800acb6 <_malloc_r+0x4a>
 800ad48:	461a      	mov	r2, r3
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	42a3      	cmp	r3, r4
 800ad4e:	d1fb      	bne.n	800ad48 <_malloc_r+0xdc>
 800ad50:	2300      	movs	r3, #0
 800ad52:	6053      	str	r3, [r2, #4]
 800ad54:	e7de      	b.n	800ad14 <_malloc_r+0xa8>
 800ad56:	230c      	movs	r3, #12
 800ad58:	6033      	str	r3, [r6, #0]
 800ad5a:	4630      	mov	r0, r6
 800ad5c:	f000 f80c 	bl	800ad78 <__malloc_unlock>
 800ad60:	e794      	b.n	800ac8c <_malloc_r+0x20>
 800ad62:	6005      	str	r5, [r0, #0]
 800ad64:	e7d6      	b.n	800ad14 <_malloc_r+0xa8>
 800ad66:	bf00      	nop
 800ad68:	24000428 	.word	0x24000428

0800ad6c <__malloc_lock>:
 800ad6c:	4801      	ldr	r0, [pc, #4]	@ (800ad74 <__malloc_lock+0x8>)
 800ad6e:	f7ff b922 	b.w	8009fb6 <__retarget_lock_acquire_recursive>
 800ad72:	bf00      	nop
 800ad74:	24000420 	.word	0x24000420

0800ad78 <__malloc_unlock>:
 800ad78:	4801      	ldr	r0, [pc, #4]	@ (800ad80 <__malloc_unlock+0x8>)
 800ad7a:	f7ff b91d 	b.w	8009fb8 <__retarget_lock_release_recursive>
 800ad7e:	bf00      	nop
 800ad80:	24000420 	.word	0x24000420

0800ad84 <_Balloc>:
 800ad84:	b570      	push	{r4, r5, r6, lr}
 800ad86:	69c6      	ldr	r6, [r0, #28]
 800ad88:	4604      	mov	r4, r0
 800ad8a:	460d      	mov	r5, r1
 800ad8c:	b976      	cbnz	r6, 800adac <_Balloc+0x28>
 800ad8e:	2010      	movs	r0, #16
 800ad90:	f7ff ff42 	bl	800ac18 <malloc>
 800ad94:	4602      	mov	r2, r0
 800ad96:	61e0      	str	r0, [r4, #28]
 800ad98:	b920      	cbnz	r0, 800ada4 <_Balloc+0x20>
 800ad9a:	4b18      	ldr	r3, [pc, #96]	@ (800adfc <_Balloc+0x78>)
 800ad9c:	4818      	ldr	r0, [pc, #96]	@ (800ae00 <_Balloc+0x7c>)
 800ad9e:	216b      	movs	r1, #107	@ 0x6b
 800ada0:	f001 fd2a 	bl	800c7f8 <__assert_func>
 800ada4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ada8:	6006      	str	r6, [r0, #0]
 800adaa:	60c6      	str	r6, [r0, #12]
 800adac:	69e6      	ldr	r6, [r4, #28]
 800adae:	68f3      	ldr	r3, [r6, #12]
 800adb0:	b183      	cbz	r3, 800add4 <_Balloc+0x50>
 800adb2:	69e3      	ldr	r3, [r4, #28]
 800adb4:	68db      	ldr	r3, [r3, #12]
 800adb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800adba:	b9b8      	cbnz	r0, 800adec <_Balloc+0x68>
 800adbc:	2101      	movs	r1, #1
 800adbe:	fa01 f605 	lsl.w	r6, r1, r5
 800adc2:	1d72      	adds	r2, r6, #5
 800adc4:	0092      	lsls	r2, r2, #2
 800adc6:	4620      	mov	r0, r4
 800adc8:	f001 fd34 	bl	800c834 <_calloc_r>
 800adcc:	b160      	cbz	r0, 800ade8 <_Balloc+0x64>
 800adce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800add2:	e00e      	b.n	800adf2 <_Balloc+0x6e>
 800add4:	2221      	movs	r2, #33	@ 0x21
 800add6:	2104      	movs	r1, #4
 800add8:	4620      	mov	r0, r4
 800adda:	f001 fd2b 	bl	800c834 <_calloc_r>
 800adde:	69e3      	ldr	r3, [r4, #28]
 800ade0:	60f0      	str	r0, [r6, #12]
 800ade2:	68db      	ldr	r3, [r3, #12]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d1e4      	bne.n	800adb2 <_Balloc+0x2e>
 800ade8:	2000      	movs	r0, #0
 800adea:	bd70      	pop	{r4, r5, r6, pc}
 800adec:	6802      	ldr	r2, [r0, #0]
 800adee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800adf2:	2300      	movs	r3, #0
 800adf4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800adf8:	e7f7      	b.n	800adea <_Balloc+0x66>
 800adfa:	bf00      	nop
 800adfc:	0800d57e 	.word	0x0800d57e
 800ae00:	0800d5fe 	.word	0x0800d5fe

0800ae04 <_Bfree>:
 800ae04:	b570      	push	{r4, r5, r6, lr}
 800ae06:	69c6      	ldr	r6, [r0, #28]
 800ae08:	4605      	mov	r5, r0
 800ae0a:	460c      	mov	r4, r1
 800ae0c:	b976      	cbnz	r6, 800ae2c <_Bfree+0x28>
 800ae0e:	2010      	movs	r0, #16
 800ae10:	f7ff ff02 	bl	800ac18 <malloc>
 800ae14:	4602      	mov	r2, r0
 800ae16:	61e8      	str	r0, [r5, #28]
 800ae18:	b920      	cbnz	r0, 800ae24 <_Bfree+0x20>
 800ae1a:	4b09      	ldr	r3, [pc, #36]	@ (800ae40 <_Bfree+0x3c>)
 800ae1c:	4809      	ldr	r0, [pc, #36]	@ (800ae44 <_Bfree+0x40>)
 800ae1e:	218f      	movs	r1, #143	@ 0x8f
 800ae20:	f001 fcea 	bl	800c7f8 <__assert_func>
 800ae24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae28:	6006      	str	r6, [r0, #0]
 800ae2a:	60c6      	str	r6, [r0, #12]
 800ae2c:	b13c      	cbz	r4, 800ae3e <_Bfree+0x3a>
 800ae2e:	69eb      	ldr	r3, [r5, #28]
 800ae30:	6862      	ldr	r2, [r4, #4]
 800ae32:	68db      	ldr	r3, [r3, #12]
 800ae34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae38:	6021      	str	r1, [r4, #0]
 800ae3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ae3e:	bd70      	pop	{r4, r5, r6, pc}
 800ae40:	0800d57e 	.word	0x0800d57e
 800ae44:	0800d5fe 	.word	0x0800d5fe

0800ae48 <__multadd>:
 800ae48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae4c:	690d      	ldr	r5, [r1, #16]
 800ae4e:	4607      	mov	r7, r0
 800ae50:	460c      	mov	r4, r1
 800ae52:	461e      	mov	r6, r3
 800ae54:	f101 0c14 	add.w	ip, r1, #20
 800ae58:	2000      	movs	r0, #0
 800ae5a:	f8dc 3000 	ldr.w	r3, [ip]
 800ae5e:	b299      	uxth	r1, r3
 800ae60:	fb02 6101 	mla	r1, r2, r1, r6
 800ae64:	0c1e      	lsrs	r6, r3, #16
 800ae66:	0c0b      	lsrs	r3, r1, #16
 800ae68:	fb02 3306 	mla	r3, r2, r6, r3
 800ae6c:	b289      	uxth	r1, r1
 800ae6e:	3001      	adds	r0, #1
 800ae70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ae74:	4285      	cmp	r5, r0
 800ae76:	f84c 1b04 	str.w	r1, [ip], #4
 800ae7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ae7e:	dcec      	bgt.n	800ae5a <__multadd+0x12>
 800ae80:	b30e      	cbz	r6, 800aec6 <__multadd+0x7e>
 800ae82:	68a3      	ldr	r3, [r4, #8]
 800ae84:	42ab      	cmp	r3, r5
 800ae86:	dc19      	bgt.n	800aebc <__multadd+0x74>
 800ae88:	6861      	ldr	r1, [r4, #4]
 800ae8a:	4638      	mov	r0, r7
 800ae8c:	3101      	adds	r1, #1
 800ae8e:	f7ff ff79 	bl	800ad84 <_Balloc>
 800ae92:	4680      	mov	r8, r0
 800ae94:	b928      	cbnz	r0, 800aea2 <__multadd+0x5a>
 800ae96:	4602      	mov	r2, r0
 800ae98:	4b0c      	ldr	r3, [pc, #48]	@ (800aecc <__multadd+0x84>)
 800ae9a:	480d      	ldr	r0, [pc, #52]	@ (800aed0 <__multadd+0x88>)
 800ae9c:	21ba      	movs	r1, #186	@ 0xba
 800ae9e:	f001 fcab 	bl	800c7f8 <__assert_func>
 800aea2:	6922      	ldr	r2, [r4, #16]
 800aea4:	3202      	adds	r2, #2
 800aea6:	f104 010c 	add.w	r1, r4, #12
 800aeaa:	0092      	lsls	r2, r2, #2
 800aeac:	300c      	adds	r0, #12
 800aeae:	f001 fc8b 	bl	800c7c8 <memcpy>
 800aeb2:	4621      	mov	r1, r4
 800aeb4:	4638      	mov	r0, r7
 800aeb6:	f7ff ffa5 	bl	800ae04 <_Bfree>
 800aeba:	4644      	mov	r4, r8
 800aebc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aec0:	3501      	adds	r5, #1
 800aec2:	615e      	str	r6, [r3, #20]
 800aec4:	6125      	str	r5, [r4, #16]
 800aec6:	4620      	mov	r0, r4
 800aec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aecc:	0800d5ed 	.word	0x0800d5ed
 800aed0:	0800d5fe 	.word	0x0800d5fe

0800aed4 <__s2b>:
 800aed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aed8:	460c      	mov	r4, r1
 800aeda:	4615      	mov	r5, r2
 800aedc:	461f      	mov	r7, r3
 800aede:	2209      	movs	r2, #9
 800aee0:	3308      	adds	r3, #8
 800aee2:	4606      	mov	r6, r0
 800aee4:	fb93 f3f2 	sdiv	r3, r3, r2
 800aee8:	2100      	movs	r1, #0
 800aeea:	2201      	movs	r2, #1
 800aeec:	429a      	cmp	r2, r3
 800aeee:	db09      	blt.n	800af04 <__s2b+0x30>
 800aef0:	4630      	mov	r0, r6
 800aef2:	f7ff ff47 	bl	800ad84 <_Balloc>
 800aef6:	b940      	cbnz	r0, 800af0a <__s2b+0x36>
 800aef8:	4602      	mov	r2, r0
 800aefa:	4b19      	ldr	r3, [pc, #100]	@ (800af60 <__s2b+0x8c>)
 800aefc:	4819      	ldr	r0, [pc, #100]	@ (800af64 <__s2b+0x90>)
 800aefe:	21d3      	movs	r1, #211	@ 0xd3
 800af00:	f001 fc7a 	bl	800c7f8 <__assert_func>
 800af04:	0052      	lsls	r2, r2, #1
 800af06:	3101      	adds	r1, #1
 800af08:	e7f0      	b.n	800aeec <__s2b+0x18>
 800af0a:	9b08      	ldr	r3, [sp, #32]
 800af0c:	6143      	str	r3, [r0, #20]
 800af0e:	2d09      	cmp	r5, #9
 800af10:	f04f 0301 	mov.w	r3, #1
 800af14:	6103      	str	r3, [r0, #16]
 800af16:	dd16      	ble.n	800af46 <__s2b+0x72>
 800af18:	f104 0909 	add.w	r9, r4, #9
 800af1c:	46c8      	mov	r8, r9
 800af1e:	442c      	add	r4, r5
 800af20:	f818 3b01 	ldrb.w	r3, [r8], #1
 800af24:	4601      	mov	r1, r0
 800af26:	3b30      	subs	r3, #48	@ 0x30
 800af28:	220a      	movs	r2, #10
 800af2a:	4630      	mov	r0, r6
 800af2c:	f7ff ff8c 	bl	800ae48 <__multadd>
 800af30:	45a0      	cmp	r8, r4
 800af32:	d1f5      	bne.n	800af20 <__s2b+0x4c>
 800af34:	f1a5 0408 	sub.w	r4, r5, #8
 800af38:	444c      	add	r4, r9
 800af3a:	1b2d      	subs	r5, r5, r4
 800af3c:	1963      	adds	r3, r4, r5
 800af3e:	42bb      	cmp	r3, r7
 800af40:	db04      	blt.n	800af4c <__s2b+0x78>
 800af42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af46:	340a      	adds	r4, #10
 800af48:	2509      	movs	r5, #9
 800af4a:	e7f6      	b.n	800af3a <__s2b+0x66>
 800af4c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800af50:	4601      	mov	r1, r0
 800af52:	3b30      	subs	r3, #48	@ 0x30
 800af54:	220a      	movs	r2, #10
 800af56:	4630      	mov	r0, r6
 800af58:	f7ff ff76 	bl	800ae48 <__multadd>
 800af5c:	e7ee      	b.n	800af3c <__s2b+0x68>
 800af5e:	bf00      	nop
 800af60:	0800d5ed 	.word	0x0800d5ed
 800af64:	0800d5fe 	.word	0x0800d5fe

0800af68 <__hi0bits>:
 800af68:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800af6c:	4603      	mov	r3, r0
 800af6e:	bf36      	itet	cc
 800af70:	0403      	lslcc	r3, r0, #16
 800af72:	2000      	movcs	r0, #0
 800af74:	2010      	movcc	r0, #16
 800af76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800af7a:	bf3c      	itt	cc
 800af7c:	021b      	lslcc	r3, r3, #8
 800af7e:	3008      	addcc	r0, #8
 800af80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af84:	bf3c      	itt	cc
 800af86:	011b      	lslcc	r3, r3, #4
 800af88:	3004      	addcc	r0, #4
 800af8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af8e:	bf3c      	itt	cc
 800af90:	009b      	lslcc	r3, r3, #2
 800af92:	3002      	addcc	r0, #2
 800af94:	2b00      	cmp	r3, #0
 800af96:	db05      	blt.n	800afa4 <__hi0bits+0x3c>
 800af98:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800af9c:	f100 0001 	add.w	r0, r0, #1
 800afa0:	bf08      	it	eq
 800afa2:	2020      	moveq	r0, #32
 800afa4:	4770      	bx	lr

0800afa6 <__lo0bits>:
 800afa6:	6803      	ldr	r3, [r0, #0]
 800afa8:	4602      	mov	r2, r0
 800afaa:	f013 0007 	ands.w	r0, r3, #7
 800afae:	d00b      	beq.n	800afc8 <__lo0bits+0x22>
 800afb0:	07d9      	lsls	r1, r3, #31
 800afb2:	d421      	bmi.n	800aff8 <__lo0bits+0x52>
 800afb4:	0798      	lsls	r0, r3, #30
 800afb6:	bf49      	itett	mi
 800afb8:	085b      	lsrmi	r3, r3, #1
 800afba:	089b      	lsrpl	r3, r3, #2
 800afbc:	2001      	movmi	r0, #1
 800afbe:	6013      	strmi	r3, [r2, #0]
 800afc0:	bf5c      	itt	pl
 800afc2:	6013      	strpl	r3, [r2, #0]
 800afc4:	2002      	movpl	r0, #2
 800afc6:	4770      	bx	lr
 800afc8:	b299      	uxth	r1, r3
 800afca:	b909      	cbnz	r1, 800afd0 <__lo0bits+0x2a>
 800afcc:	0c1b      	lsrs	r3, r3, #16
 800afce:	2010      	movs	r0, #16
 800afd0:	b2d9      	uxtb	r1, r3
 800afd2:	b909      	cbnz	r1, 800afd8 <__lo0bits+0x32>
 800afd4:	3008      	adds	r0, #8
 800afd6:	0a1b      	lsrs	r3, r3, #8
 800afd8:	0719      	lsls	r1, r3, #28
 800afda:	bf04      	itt	eq
 800afdc:	091b      	lsreq	r3, r3, #4
 800afde:	3004      	addeq	r0, #4
 800afe0:	0799      	lsls	r1, r3, #30
 800afe2:	bf04      	itt	eq
 800afe4:	089b      	lsreq	r3, r3, #2
 800afe6:	3002      	addeq	r0, #2
 800afe8:	07d9      	lsls	r1, r3, #31
 800afea:	d403      	bmi.n	800aff4 <__lo0bits+0x4e>
 800afec:	085b      	lsrs	r3, r3, #1
 800afee:	f100 0001 	add.w	r0, r0, #1
 800aff2:	d003      	beq.n	800affc <__lo0bits+0x56>
 800aff4:	6013      	str	r3, [r2, #0]
 800aff6:	4770      	bx	lr
 800aff8:	2000      	movs	r0, #0
 800affa:	4770      	bx	lr
 800affc:	2020      	movs	r0, #32
 800affe:	4770      	bx	lr

0800b000 <__i2b>:
 800b000:	b510      	push	{r4, lr}
 800b002:	460c      	mov	r4, r1
 800b004:	2101      	movs	r1, #1
 800b006:	f7ff febd 	bl	800ad84 <_Balloc>
 800b00a:	4602      	mov	r2, r0
 800b00c:	b928      	cbnz	r0, 800b01a <__i2b+0x1a>
 800b00e:	4b05      	ldr	r3, [pc, #20]	@ (800b024 <__i2b+0x24>)
 800b010:	4805      	ldr	r0, [pc, #20]	@ (800b028 <__i2b+0x28>)
 800b012:	f240 1145 	movw	r1, #325	@ 0x145
 800b016:	f001 fbef 	bl	800c7f8 <__assert_func>
 800b01a:	2301      	movs	r3, #1
 800b01c:	6144      	str	r4, [r0, #20]
 800b01e:	6103      	str	r3, [r0, #16]
 800b020:	bd10      	pop	{r4, pc}
 800b022:	bf00      	nop
 800b024:	0800d5ed 	.word	0x0800d5ed
 800b028:	0800d5fe 	.word	0x0800d5fe

0800b02c <__multiply>:
 800b02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b030:	4614      	mov	r4, r2
 800b032:	690a      	ldr	r2, [r1, #16]
 800b034:	6923      	ldr	r3, [r4, #16]
 800b036:	429a      	cmp	r2, r3
 800b038:	bfa8      	it	ge
 800b03a:	4623      	movge	r3, r4
 800b03c:	460f      	mov	r7, r1
 800b03e:	bfa4      	itt	ge
 800b040:	460c      	movge	r4, r1
 800b042:	461f      	movge	r7, r3
 800b044:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b048:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b04c:	68a3      	ldr	r3, [r4, #8]
 800b04e:	6861      	ldr	r1, [r4, #4]
 800b050:	eb0a 0609 	add.w	r6, sl, r9
 800b054:	42b3      	cmp	r3, r6
 800b056:	b085      	sub	sp, #20
 800b058:	bfb8      	it	lt
 800b05a:	3101      	addlt	r1, #1
 800b05c:	f7ff fe92 	bl	800ad84 <_Balloc>
 800b060:	b930      	cbnz	r0, 800b070 <__multiply+0x44>
 800b062:	4602      	mov	r2, r0
 800b064:	4b44      	ldr	r3, [pc, #272]	@ (800b178 <__multiply+0x14c>)
 800b066:	4845      	ldr	r0, [pc, #276]	@ (800b17c <__multiply+0x150>)
 800b068:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b06c:	f001 fbc4 	bl	800c7f8 <__assert_func>
 800b070:	f100 0514 	add.w	r5, r0, #20
 800b074:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b078:	462b      	mov	r3, r5
 800b07a:	2200      	movs	r2, #0
 800b07c:	4543      	cmp	r3, r8
 800b07e:	d321      	bcc.n	800b0c4 <__multiply+0x98>
 800b080:	f107 0114 	add.w	r1, r7, #20
 800b084:	f104 0214 	add.w	r2, r4, #20
 800b088:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b08c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b090:	9302      	str	r3, [sp, #8]
 800b092:	1b13      	subs	r3, r2, r4
 800b094:	3b15      	subs	r3, #21
 800b096:	f023 0303 	bic.w	r3, r3, #3
 800b09a:	3304      	adds	r3, #4
 800b09c:	f104 0715 	add.w	r7, r4, #21
 800b0a0:	42ba      	cmp	r2, r7
 800b0a2:	bf38      	it	cc
 800b0a4:	2304      	movcc	r3, #4
 800b0a6:	9301      	str	r3, [sp, #4]
 800b0a8:	9b02      	ldr	r3, [sp, #8]
 800b0aa:	9103      	str	r1, [sp, #12]
 800b0ac:	428b      	cmp	r3, r1
 800b0ae:	d80c      	bhi.n	800b0ca <__multiply+0x9e>
 800b0b0:	2e00      	cmp	r6, #0
 800b0b2:	dd03      	ble.n	800b0bc <__multiply+0x90>
 800b0b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d05b      	beq.n	800b174 <__multiply+0x148>
 800b0bc:	6106      	str	r6, [r0, #16]
 800b0be:	b005      	add	sp, #20
 800b0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0c4:	f843 2b04 	str.w	r2, [r3], #4
 800b0c8:	e7d8      	b.n	800b07c <__multiply+0x50>
 800b0ca:	f8b1 a000 	ldrh.w	sl, [r1]
 800b0ce:	f1ba 0f00 	cmp.w	sl, #0
 800b0d2:	d024      	beq.n	800b11e <__multiply+0xf2>
 800b0d4:	f104 0e14 	add.w	lr, r4, #20
 800b0d8:	46a9      	mov	r9, r5
 800b0da:	f04f 0c00 	mov.w	ip, #0
 800b0de:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b0e2:	f8d9 3000 	ldr.w	r3, [r9]
 800b0e6:	fa1f fb87 	uxth.w	fp, r7
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	fb0a 330b 	mla	r3, sl, fp, r3
 800b0f0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b0f4:	f8d9 7000 	ldr.w	r7, [r9]
 800b0f8:	4463      	add	r3, ip
 800b0fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b0fe:	fb0a c70b 	mla	r7, sl, fp, ip
 800b102:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b106:	b29b      	uxth	r3, r3
 800b108:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b10c:	4572      	cmp	r2, lr
 800b10e:	f849 3b04 	str.w	r3, [r9], #4
 800b112:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b116:	d8e2      	bhi.n	800b0de <__multiply+0xb2>
 800b118:	9b01      	ldr	r3, [sp, #4]
 800b11a:	f845 c003 	str.w	ip, [r5, r3]
 800b11e:	9b03      	ldr	r3, [sp, #12]
 800b120:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b124:	3104      	adds	r1, #4
 800b126:	f1b9 0f00 	cmp.w	r9, #0
 800b12a:	d021      	beq.n	800b170 <__multiply+0x144>
 800b12c:	682b      	ldr	r3, [r5, #0]
 800b12e:	f104 0c14 	add.w	ip, r4, #20
 800b132:	46ae      	mov	lr, r5
 800b134:	f04f 0a00 	mov.w	sl, #0
 800b138:	f8bc b000 	ldrh.w	fp, [ip]
 800b13c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b140:	fb09 770b 	mla	r7, r9, fp, r7
 800b144:	4457      	add	r7, sl
 800b146:	b29b      	uxth	r3, r3
 800b148:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b14c:	f84e 3b04 	str.w	r3, [lr], #4
 800b150:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b154:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b158:	f8be 3000 	ldrh.w	r3, [lr]
 800b15c:	fb09 330a 	mla	r3, r9, sl, r3
 800b160:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b164:	4562      	cmp	r2, ip
 800b166:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b16a:	d8e5      	bhi.n	800b138 <__multiply+0x10c>
 800b16c:	9f01      	ldr	r7, [sp, #4]
 800b16e:	51eb      	str	r3, [r5, r7]
 800b170:	3504      	adds	r5, #4
 800b172:	e799      	b.n	800b0a8 <__multiply+0x7c>
 800b174:	3e01      	subs	r6, #1
 800b176:	e79b      	b.n	800b0b0 <__multiply+0x84>
 800b178:	0800d5ed 	.word	0x0800d5ed
 800b17c:	0800d5fe 	.word	0x0800d5fe

0800b180 <__pow5mult>:
 800b180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b184:	4615      	mov	r5, r2
 800b186:	f012 0203 	ands.w	r2, r2, #3
 800b18a:	4607      	mov	r7, r0
 800b18c:	460e      	mov	r6, r1
 800b18e:	d007      	beq.n	800b1a0 <__pow5mult+0x20>
 800b190:	4c25      	ldr	r4, [pc, #148]	@ (800b228 <__pow5mult+0xa8>)
 800b192:	3a01      	subs	r2, #1
 800b194:	2300      	movs	r3, #0
 800b196:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b19a:	f7ff fe55 	bl	800ae48 <__multadd>
 800b19e:	4606      	mov	r6, r0
 800b1a0:	10ad      	asrs	r5, r5, #2
 800b1a2:	d03d      	beq.n	800b220 <__pow5mult+0xa0>
 800b1a4:	69fc      	ldr	r4, [r7, #28]
 800b1a6:	b97c      	cbnz	r4, 800b1c8 <__pow5mult+0x48>
 800b1a8:	2010      	movs	r0, #16
 800b1aa:	f7ff fd35 	bl	800ac18 <malloc>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	61f8      	str	r0, [r7, #28]
 800b1b2:	b928      	cbnz	r0, 800b1c0 <__pow5mult+0x40>
 800b1b4:	4b1d      	ldr	r3, [pc, #116]	@ (800b22c <__pow5mult+0xac>)
 800b1b6:	481e      	ldr	r0, [pc, #120]	@ (800b230 <__pow5mult+0xb0>)
 800b1b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b1bc:	f001 fb1c 	bl	800c7f8 <__assert_func>
 800b1c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b1c4:	6004      	str	r4, [r0, #0]
 800b1c6:	60c4      	str	r4, [r0, #12]
 800b1c8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b1cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b1d0:	b94c      	cbnz	r4, 800b1e6 <__pow5mult+0x66>
 800b1d2:	f240 2171 	movw	r1, #625	@ 0x271
 800b1d6:	4638      	mov	r0, r7
 800b1d8:	f7ff ff12 	bl	800b000 <__i2b>
 800b1dc:	2300      	movs	r3, #0
 800b1de:	f8c8 0008 	str.w	r0, [r8, #8]
 800b1e2:	4604      	mov	r4, r0
 800b1e4:	6003      	str	r3, [r0, #0]
 800b1e6:	f04f 0900 	mov.w	r9, #0
 800b1ea:	07eb      	lsls	r3, r5, #31
 800b1ec:	d50a      	bpl.n	800b204 <__pow5mult+0x84>
 800b1ee:	4631      	mov	r1, r6
 800b1f0:	4622      	mov	r2, r4
 800b1f2:	4638      	mov	r0, r7
 800b1f4:	f7ff ff1a 	bl	800b02c <__multiply>
 800b1f8:	4631      	mov	r1, r6
 800b1fa:	4680      	mov	r8, r0
 800b1fc:	4638      	mov	r0, r7
 800b1fe:	f7ff fe01 	bl	800ae04 <_Bfree>
 800b202:	4646      	mov	r6, r8
 800b204:	106d      	asrs	r5, r5, #1
 800b206:	d00b      	beq.n	800b220 <__pow5mult+0xa0>
 800b208:	6820      	ldr	r0, [r4, #0]
 800b20a:	b938      	cbnz	r0, 800b21c <__pow5mult+0x9c>
 800b20c:	4622      	mov	r2, r4
 800b20e:	4621      	mov	r1, r4
 800b210:	4638      	mov	r0, r7
 800b212:	f7ff ff0b 	bl	800b02c <__multiply>
 800b216:	6020      	str	r0, [r4, #0]
 800b218:	f8c0 9000 	str.w	r9, [r0]
 800b21c:	4604      	mov	r4, r0
 800b21e:	e7e4      	b.n	800b1ea <__pow5mult+0x6a>
 800b220:	4630      	mov	r0, r6
 800b222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b226:	bf00      	nop
 800b228:	0800d658 	.word	0x0800d658
 800b22c:	0800d57e 	.word	0x0800d57e
 800b230:	0800d5fe 	.word	0x0800d5fe

0800b234 <__lshift>:
 800b234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b238:	460c      	mov	r4, r1
 800b23a:	6849      	ldr	r1, [r1, #4]
 800b23c:	6923      	ldr	r3, [r4, #16]
 800b23e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b242:	68a3      	ldr	r3, [r4, #8]
 800b244:	4607      	mov	r7, r0
 800b246:	4691      	mov	r9, r2
 800b248:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b24c:	f108 0601 	add.w	r6, r8, #1
 800b250:	42b3      	cmp	r3, r6
 800b252:	db0b      	blt.n	800b26c <__lshift+0x38>
 800b254:	4638      	mov	r0, r7
 800b256:	f7ff fd95 	bl	800ad84 <_Balloc>
 800b25a:	4605      	mov	r5, r0
 800b25c:	b948      	cbnz	r0, 800b272 <__lshift+0x3e>
 800b25e:	4602      	mov	r2, r0
 800b260:	4b28      	ldr	r3, [pc, #160]	@ (800b304 <__lshift+0xd0>)
 800b262:	4829      	ldr	r0, [pc, #164]	@ (800b308 <__lshift+0xd4>)
 800b264:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b268:	f001 fac6 	bl	800c7f8 <__assert_func>
 800b26c:	3101      	adds	r1, #1
 800b26e:	005b      	lsls	r3, r3, #1
 800b270:	e7ee      	b.n	800b250 <__lshift+0x1c>
 800b272:	2300      	movs	r3, #0
 800b274:	f100 0114 	add.w	r1, r0, #20
 800b278:	f100 0210 	add.w	r2, r0, #16
 800b27c:	4618      	mov	r0, r3
 800b27e:	4553      	cmp	r3, sl
 800b280:	db33      	blt.n	800b2ea <__lshift+0xb6>
 800b282:	6920      	ldr	r0, [r4, #16]
 800b284:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b288:	f104 0314 	add.w	r3, r4, #20
 800b28c:	f019 091f 	ands.w	r9, r9, #31
 800b290:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b294:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b298:	d02b      	beq.n	800b2f2 <__lshift+0xbe>
 800b29a:	f1c9 0e20 	rsb	lr, r9, #32
 800b29e:	468a      	mov	sl, r1
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	6818      	ldr	r0, [r3, #0]
 800b2a4:	fa00 f009 	lsl.w	r0, r0, r9
 800b2a8:	4310      	orrs	r0, r2
 800b2aa:	f84a 0b04 	str.w	r0, [sl], #4
 800b2ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2b2:	459c      	cmp	ip, r3
 800b2b4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b2b8:	d8f3      	bhi.n	800b2a2 <__lshift+0x6e>
 800b2ba:	ebac 0304 	sub.w	r3, ip, r4
 800b2be:	3b15      	subs	r3, #21
 800b2c0:	f023 0303 	bic.w	r3, r3, #3
 800b2c4:	3304      	adds	r3, #4
 800b2c6:	f104 0015 	add.w	r0, r4, #21
 800b2ca:	4584      	cmp	ip, r0
 800b2cc:	bf38      	it	cc
 800b2ce:	2304      	movcc	r3, #4
 800b2d0:	50ca      	str	r2, [r1, r3]
 800b2d2:	b10a      	cbz	r2, 800b2d8 <__lshift+0xa4>
 800b2d4:	f108 0602 	add.w	r6, r8, #2
 800b2d8:	3e01      	subs	r6, #1
 800b2da:	4638      	mov	r0, r7
 800b2dc:	612e      	str	r6, [r5, #16]
 800b2de:	4621      	mov	r1, r4
 800b2e0:	f7ff fd90 	bl	800ae04 <_Bfree>
 800b2e4:	4628      	mov	r0, r5
 800b2e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	e7c5      	b.n	800b27e <__lshift+0x4a>
 800b2f2:	3904      	subs	r1, #4
 800b2f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b2fc:	459c      	cmp	ip, r3
 800b2fe:	d8f9      	bhi.n	800b2f4 <__lshift+0xc0>
 800b300:	e7ea      	b.n	800b2d8 <__lshift+0xa4>
 800b302:	bf00      	nop
 800b304:	0800d5ed 	.word	0x0800d5ed
 800b308:	0800d5fe 	.word	0x0800d5fe

0800b30c <__mcmp>:
 800b30c:	690a      	ldr	r2, [r1, #16]
 800b30e:	4603      	mov	r3, r0
 800b310:	6900      	ldr	r0, [r0, #16]
 800b312:	1a80      	subs	r0, r0, r2
 800b314:	b530      	push	{r4, r5, lr}
 800b316:	d10e      	bne.n	800b336 <__mcmp+0x2a>
 800b318:	3314      	adds	r3, #20
 800b31a:	3114      	adds	r1, #20
 800b31c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b320:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b324:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b328:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b32c:	4295      	cmp	r5, r2
 800b32e:	d003      	beq.n	800b338 <__mcmp+0x2c>
 800b330:	d205      	bcs.n	800b33e <__mcmp+0x32>
 800b332:	f04f 30ff 	mov.w	r0, #4294967295
 800b336:	bd30      	pop	{r4, r5, pc}
 800b338:	42a3      	cmp	r3, r4
 800b33a:	d3f3      	bcc.n	800b324 <__mcmp+0x18>
 800b33c:	e7fb      	b.n	800b336 <__mcmp+0x2a>
 800b33e:	2001      	movs	r0, #1
 800b340:	e7f9      	b.n	800b336 <__mcmp+0x2a>
	...

0800b344 <__mdiff>:
 800b344:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b348:	4689      	mov	r9, r1
 800b34a:	4606      	mov	r6, r0
 800b34c:	4611      	mov	r1, r2
 800b34e:	4648      	mov	r0, r9
 800b350:	4614      	mov	r4, r2
 800b352:	f7ff ffdb 	bl	800b30c <__mcmp>
 800b356:	1e05      	subs	r5, r0, #0
 800b358:	d112      	bne.n	800b380 <__mdiff+0x3c>
 800b35a:	4629      	mov	r1, r5
 800b35c:	4630      	mov	r0, r6
 800b35e:	f7ff fd11 	bl	800ad84 <_Balloc>
 800b362:	4602      	mov	r2, r0
 800b364:	b928      	cbnz	r0, 800b372 <__mdiff+0x2e>
 800b366:	4b3f      	ldr	r3, [pc, #252]	@ (800b464 <__mdiff+0x120>)
 800b368:	f240 2137 	movw	r1, #567	@ 0x237
 800b36c:	483e      	ldr	r0, [pc, #248]	@ (800b468 <__mdiff+0x124>)
 800b36e:	f001 fa43 	bl	800c7f8 <__assert_func>
 800b372:	2301      	movs	r3, #1
 800b374:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b378:	4610      	mov	r0, r2
 800b37a:	b003      	add	sp, #12
 800b37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b380:	bfbc      	itt	lt
 800b382:	464b      	movlt	r3, r9
 800b384:	46a1      	movlt	r9, r4
 800b386:	4630      	mov	r0, r6
 800b388:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b38c:	bfba      	itte	lt
 800b38e:	461c      	movlt	r4, r3
 800b390:	2501      	movlt	r5, #1
 800b392:	2500      	movge	r5, #0
 800b394:	f7ff fcf6 	bl	800ad84 <_Balloc>
 800b398:	4602      	mov	r2, r0
 800b39a:	b918      	cbnz	r0, 800b3a4 <__mdiff+0x60>
 800b39c:	4b31      	ldr	r3, [pc, #196]	@ (800b464 <__mdiff+0x120>)
 800b39e:	f240 2145 	movw	r1, #581	@ 0x245
 800b3a2:	e7e3      	b.n	800b36c <__mdiff+0x28>
 800b3a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b3a8:	6926      	ldr	r6, [r4, #16]
 800b3aa:	60c5      	str	r5, [r0, #12]
 800b3ac:	f109 0310 	add.w	r3, r9, #16
 800b3b0:	f109 0514 	add.w	r5, r9, #20
 800b3b4:	f104 0e14 	add.w	lr, r4, #20
 800b3b8:	f100 0b14 	add.w	fp, r0, #20
 800b3bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b3c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b3c4:	9301      	str	r3, [sp, #4]
 800b3c6:	46d9      	mov	r9, fp
 800b3c8:	f04f 0c00 	mov.w	ip, #0
 800b3cc:	9b01      	ldr	r3, [sp, #4]
 800b3ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b3d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b3d6:	9301      	str	r3, [sp, #4]
 800b3d8:	fa1f f38a 	uxth.w	r3, sl
 800b3dc:	4619      	mov	r1, r3
 800b3de:	b283      	uxth	r3, r0
 800b3e0:	1acb      	subs	r3, r1, r3
 800b3e2:	0c00      	lsrs	r0, r0, #16
 800b3e4:	4463      	add	r3, ip
 800b3e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b3ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b3f4:	4576      	cmp	r6, lr
 800b3f6:	f849 3b04 	str.w	r3, [r9], #4
 800b3fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b3fe:	d8e5      	bhi.n	800b3cc <__mdiff+0x88>
 800b400:	1b33      	subs	r3, r6, r4
 800b402:	3b15      	subs	r3, #21
 800b404:	f023 0303 	bic.w	r3, r3, #3
 800b408:	3415      	adds	r4, #21
 800b40a:	3304      	adds	r3, #4
 800b40c:	42a6      	cmp	r6, r4
 800b40e:	bf38      	it	cc
 800b410:	2304      	movcc	r3, #4
 800b412:	441d      	add	r5, r3
 800b414:	445b      	add	r3, fp
 800b416:	461e      	mov	r6, r3
 800b418:	462c      	mov	r4, r5
 800b41a:	4544      	cmp	r4, r8
 800b41c:	d30e      	bcc.n	800b43c <__mdiff+0xf8>
 800b41e:	f108 0103 	add.w	r1, r8, #3
 800b422:	1b49      	subs	r1, r1, r5
 800b424:	f021 0103 	bic.w	r1, r1, #3
 800b428:	3d03      	subs	r5, #3
 800b42a:	45a8      	cmp	r8, r5
 800b42c:	bf38      	it	cc
 800b42e:	2100      	movcc	r1, #0
 800b430:	440b      	add	r3, r1
 800b432:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b436:	b191      	cbz	r1, 800b45e <__mdiff+0x11a>
 800b438:	6117      	str	r7, [r2, #16]
 800b43a:	e79d      	b.n	800b378 <__mdiff+0x34>
 800b43c:	f854 1b04 	ldr.w	r1, [r4], #4
 800b440:	46e6      	mov	lr, ip
 800b442:	0c08      	lsrs	r0, r1, #16
 800b444:	fa1c fc81 	uxtah	ip, ip, r1
 800b448:	4471      	add	r1, lr
 800b44a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b44e:	b289      	uxth	r1, r1
 800b450:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b454:	f846 1b04 	str.w	r1, [r6], #4
 800b458:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b45c:	e7dd      	b.n	800b41a <__mdiff+0xd6>
 800b45e:	3f01      	subs	r7, #1
 800b460:	e7e7      	b.n	800b432 <__mdiff+0xee>
 800b462:	bf00      	nop
 800b464:	0800d5ed 	.word	0x0800d5ed
 800b468:	0800d5fe 	.word	0x0800d5fe

0800b46c <__ulp>:
 800b46c:	b082      	sub	sp, #8
 800b46e:	ed8d 0b00 	vstr	d0, [sp]
 800b472:	9a01      	ldr	r2, [sp, #4]
 800b474:	4b0f      	ldr	r3, [pc, #60]	@ (800b4b4 <__ulp+0x48>)
 800b476:	4013      	ands	r3, r2
 800b478:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	dc08      	bgt.n	800b492 <__ulp+0x26>
 800b480:	425b      	negs	r3, r3
 800b482:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b486:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b48a:	da04      	bge.n	800b496 <__ulp+0x2a>
 800b48c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b490:	4113      	asrs	r3, r2
 800b492:	2200      	movs	r2, #0
 800b494:	e008      	b.n	800b4a8 <__ulp+0x3c>
 800b496:	f1a2 0314 	sub.w	r3, r2, #20
 800b49a:	2b1e      	cmp	r3, #30
 800b49c:	bfda      	itte	le
 800b49e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b4a2:	40da      	lsrle	r2, r3
 800b4a4:	2201      	movgt	r2, #1
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	4610      	mov	r0, r2
 800b4ac:	ec41 0b10 	vmov	d0, r0, r1
 800b4b0:	b002      	add	sp, #8
 800b4b2:	4770      	bx	lr
 800b4b4:	7ff00000 	.word	0x7ff00000

0800b4b8 <__b2d>:
 800b4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4bc:	6906      	ldr	r6, [r0, #16]
 800b4be:	f100 0814 	add.w	r8, r0, #20
 800b4c2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b4c6:	1f37      	subs	r7, r6, #4
 800b4c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b4cc:	4610      	mov	r0, r2
 800b4ce:	f7ff fd4b 	bl	800af68 <__hi0bits>
 800b4d2:	f1c0 0320 	rsb	r3, r0, #32
 800b4d6:	280a      	cmp	r0, #10
 800b4d8:	600b      	str	r3, [r1, #0]
 800b4da:	491b      	ldr	r1, [pc, #108]	@ (800b548 <__b2d+0x90>)
 800b4dc:	dc15      	bgt.n	800b50a <__b2d+0x52>
 800b4de:	f1c0 0c0b 	rsb	ip, r0, #11
 800b4e2:	fa22 f30c 	lsr.w	r3, r2, ip
 800b4e6:	45b8      	cmp	r8, r7
 800b4e8:	ea43 0501 	orr.w	r5, r3, r1
 800b4ec:	bf34      	ite	cc
 800b4ee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b4f2:	2300      	movcs	r3, #0
 800b4f4:	3015      	adds	r0, #21
 800b4f6:	fa02 f000 	lsl.w	r0, r2, r0
 800b4fa:	fa23 f30c 	lsr.w	r3, r3, ip
 800b4fe:	4303      	orrs	r3, r0
 800b500:	461c      	mov	r4, r3
 800b502:	ec45 4b10 	vmov	d0, r4, r5
 800b506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b50a:	45b8      	cmp	r8, r7
 800b50c:	bf3a      	itte	cc
 800b50e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b512:	f1a6 0708 	subcc.w	r7, r6, #8
 800b516:	2300      	movcs	r3, #0
 800b518:	380b      	subs	r0, #11
 800b51a:	d012      	beq.n	800b542 <__b2d+0x8a>
 800b51c:	f1c0 0120 	rsb	r1, r0, #32
 800b520:	fa23 f401 	lsr.w	r4, r3, r1
 800b524:	4082      	lsls	r2, r0
 800b526:	4322      	orrs	r2, r4
 800b528:	4547      	cmp	r7, r8
 800b52a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b52e:	bf8c      	ite	hi
 800b530:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b534:	2200      	movls	r2, #0
 800b536:	4083      	lsls	r3, r0
 800b538:	40ca      	lsrs	r2, r1
 800b53a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b53e:	4313      	orrs	r3, r2
 800b540:	e7de      	b.n	800b500 <__b2d+0x48>
 800b542:	ea42 0501 	orr.w	r5, r2, r1
 800b546:	e7db      	b.n	800b500 <__b2d+0x48>
 800b548:	3ff00000 	.word	0x3ff00000

0800b54c <__d2b>:
 800b54c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b550:	460f      	mov	r7, r1
 800b552:	2101      	movs	r1, #1
 800b554:	ec59 8b10 	vmov	r8, r9, d0
 800b558:	4616      	mov	r6, r2
 800b55a:	f7ff fc13 	bl	800ad84 <_Balloc>
 800b55e:	4604      	mov	r4, r0
 800b560:	b930      	cbnz	r0, 800b570 <__d2b+0x24>
 800b562:	4602      	mov	r2, r0
 800b564:	4b23      	ldr	r3, [pc, #140]	@ (800b5f4 <__d2b+0xa8>)
 800b566:	4824      	ldr	r0, [pc, #144]	@ (800b5f8 <__d2b+0xac>)
 800b568:	f240 310f 	movw	r1, #783	@ 0x30f
 800b56c:	f001 f944 	bl	800c7f8 <__assert_func>
 800b570:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b574:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b578:	b10d      	cbz	r5, 800b57e <__d2b+0x32>
 800b57a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b57e:	9301      	str	r3, [sp, #4]
 800b580:	f1b8 0300 	subs.w	r3, r8, #0
 800b584:	d023      	beq.n	800b5ce <__d2b+0x82>
 800b586:	4668      	mov	r0, sp
 800b588:	9300      	str	r3, [sp, #0]
 800b58a:	f7ff fd0c 	bl	800afa6 <__lo0bits>
 800b58e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b592:	b1d0      	cbz	r0, 800b5ca <__d2b+0x7e>
 800b594:	f1c0 0320 	rsb	r3, r0, #32
 800b598:	fa02 f303 	lsl.w	r3, r2, r3
 800b59c:	430b      	orrs	r3, r1
 800b59e:	40c2      	lsrs	r2, r0
 800b5a0:	6163      	str	r3, [r4, #20]
 800b5a2:	9201      	str	r2, [sp, #4]
 800b5a4:	9b01      	ldr	r3, [sp, #4]
 800b5a6:	61a3      	str	r3, [r4, #24]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	bf0c      	ite	eq
 800b5ac:	2201      	moveq	r2, #1
 800b5ae:	2202      	movne	r2, #2
 800b5b0:	6122      	str	r2, [r4, #16]
 800b5b2:	b1a5      	cbz	r5, 800b5de <__d2b+0x92>
 800b5b4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b5b8:	4405      	add	r5, r0
 800b5ba:	603d      	str	r5, [r7, #0]
 800b5bc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b5c0:	6030      	str	r0, [r6, #0]
 800b5c2:	4620      	mov	r0, r4
 800b5c4:	b003      	add	sp, #12
 800b5c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5ca:	6161      	str	r1, [r4, #20]
 800b5cc:	e7ea      	b.n	800b5a4 <__d2b+0x58>
 800b5ce:	a801      	add	r0, sp, #4
 800b5d0:	f7ff fce9 	bl	800afa6 <__lo0bits>
 800b5d4:	9b01      	ldr	r3, [sp, #4]
 800b5d6:	6163      	str	r3, [r4, #20]
 800b5d8:	3020      	adds	r0, #32
 800b5da:	2201      	movs	r2, #1
 800b5dc:	e7e8      	b.n	800b5b0 <__d2b+0x64>
 800b5de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b5e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b5e6:	6038      	str	r0, [r7, #0]
 800b5e8:	6918      	ldr	r0, [r3, #16]
 800b5ea:	f7ff fcbd 	bl	800af68 <__hi0bits>
 800b5ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b5f2:	e7e5      	b.n	800b5c0 <__d2b+0x74>
 800b5f4:	0800d5ed 	.word	0x0800d5ed
 800b5f8:	0800d5fe 	.word	0x0800d5fe

0800b5fc <__ratio>:
 800b5fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b600:	4688      	mov	r8, r1
 800b602:	4669      	mov	r1, sp
 800b604:	4681      	mov	r9, r0
 800b606:	f7ff ff57 	bl	800b4b8 <__b2d>
 800b60a:	a901      	add	r1, sp, #4
 800b60c:	4640      	mov	r0, r8
 800b60e:	ec55 4b10 	vmov	r4, r5, d0
 800b612:	f7ff ff51 	bl	800b4b8 <__b2d>
 800b616:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b61a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800b61e:	1ad2      	subs	r2, r2, r3
 800b620:	e9dd 3100 	ldrd	r3, r1, [sp]
 800b624:	1a5b      	subs	r3, r3, r1
 800b626:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800b62a:	ec57 6b10 	vmov	r6, r7, d0
 800b62e:	2b00      	cmp	r3, #0
 800b630:	bfd6      	itet	le
 800b632:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b636:	462a      	movgt	r2, r5
 800b638:	463a      	movle	r2, r7
 800b63a:	46ab      	mov	fp, r5
 800b63c:	46a2      	mov	sl, r4
 800b63e:	bfce      	itee	gt
 800b640:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b644:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800b648:	ee00 3a90 	vmovle	s1, r3
 800b64c:	ec4b ab17 	vmov	d7, sl, fp
 800b650:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800b654:	b003      	add	sp, #12
 800b656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b65a <__copybits>:
 800b65a:	3901      	subs	r1, #1
 800b65c:	b570      	push	{r4, r5, r6, lr}
 800b65e:	1149      	asrs	r1, r1, #5
 800b660:	6914      	ldr	r4, [r2, #16]
 800b662:	3101      	adds	r1, #1
 800b664:	f102 0314 	add.w	r3, r2, #20
 800b668:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b66c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b670:	1f05      	subs	r5, r0, #4
 800b672:	42a3      	cmp	r3, r4
 800b674:	d30c      	bcc.n	800b690 <__copybits+0x36>
 800b676:	1aa3      	subs	r3, r4, r2
 800b678:	3b11      	subs	r3, #17
 800b67a:	f023 0303 	bic.w	r3, r3, #3
 800b67e:	3211      	adds	r2, #17
 800b680:	42a2      	cmp	r2, r4
 800b682:	bf88      	it	hi
 800b684:	2300      	movhi	r3, #0
 800b686:	4418      	add	r0, r3
 800b688:	2300      	movs	r3, #0
 800b68a:	4288      	cmp	r0, r1
 800b68c:	d305      	bcc.n	800b69a <__copybits+0x40>
 800b68e:	bd70      	pop	{r4, r5, r6, pc}
 800b690:	f853 6b04 	ldr.w	r6, [r3], #4
 800b694:	f845 6f04 	str.w	r6, [r5, #4]!
 800b698:	e7eb      	b.n	800b672 <__copybits+0x18>
 800b69a:	f840 3b04 	str.w	r3, [r0], #4
 800b69e:	e7f4      	b.n	800b68a <__copybits+0x30>

0800b6a0 <__any_on>:
 800b6a0:	f100 0214 	add.w	r2, r0, #20
 800b6a4:	6900      	ldr	r0, [r0, #16]
 800b6a6:	114b      	asrs	r3, r1, #5
 800b6a8:	4298      	cmp	r0, r3
 800b6aa:	b510      	push	{r4, lr}
 800b6ac:	db11      	blt.n	800b6d2 <__any_on+0x32>
 800b6ae:	dd0a      	ble.n	800b6c6 <__any_on+0x26>
 800b6b0:	f011 011f 	ands.w	r1, r1, #31
 800b6b4:	d007      	beq.n	800b6c6 <__any_on+0x26>
 800b6b6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b6ba:	fa24 f001 	lsr.w	r0, r4, r1
 800b6be:	fa00 f101 	lsl.w	r1, r0, r1
 800b6c2:	428c      	cmp	r4, r1
 800b6c4:	d10b      	bne.n	800b6de <__any_on+0x3e>
 800b6c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d803      	bhi.n	800b6d6 <__any_on+0x36>
 800b6ce:	2000      	movs	r0, #0
 800b6d0:	bd10      	pop	{r4, pc}
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	e7f7      	b.n	800b6c6 <__any_on+0x26>
 800b6d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b6da:	2900      	cmp	r1, #0
 800b6dc:	d0f5      	beq.n	800b6ca <__any_on+0x2a>
 800b6de:	2001      	movs	r0, #1
 800b6e0:	e7f6      	b.n	800b6d0 <__any_on+0x30>

0800b6e2 <sulp>:
 800b6e2:	b570      	push	{r4, r5, r6, lr}
 800b6e4:	4604      	mov	r4, r0
 800b6e6:	460d      	mov	r5, r1
 800b6e8:	4616      	mov	r6, r2
 800b6ea:	ec45 4b10 	vmov	d0, r4, r5
 800b6ee:	f7ff febd 	bl	800b46c <__ulp>
 800b6f2:	b17e      	cbz	r6, 800b714 <sulp+0x32>
 800b6f4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b6f8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	dd09      	ble.n	800b714 <sulp+0x32>
 800b700:	051b      	lsls	r3, r3, #20
 800b702:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800b706:	2000      	movs	r0, #0
 800b708:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800b70c:	ec41 0b17 	vmov	d7, r0, r1
 800b710:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b714:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b718 <_strtod_l>:
 800b718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b71c:	ed2d 8b0a 	vpush	{d8-d12}
 800b720:	b097      	sub	sp, #92	@ 0x5c
 800b722:	4688      	mov	r8, r1
 800b724:	920e      	str	r2, [sp, #56]	@ 0x38
 800b726:	2200      	movs	r2, #0
 800b728:	9212      	str	r2, [sp, #72]	@ 0x48
 800b72a:	9005      	str	r0, [sp, #20]
 800b72c:	f04f 0a00 	mov.w	sl, #0
 800b730:	f04f 0b00 	mov.w	fp, #0
 800b734:	460a      	mov	r2, r1
 800b736:	9211      	str	r2, [sp, #68]	@ 0x44
 800b738:	7811      	ldrb	r1, [r2, #0]
 800b73a:	292b      	cmp	r1, #43	@ 0x2b
 800b73c:	d04c      	beq.n	800b7d8 <_strtod_l+0xc0>
 800b73e:	d839      	bhi.n	800b7b4 <_strtod_l+0x9c>
 800b740:	290d      	cmp	r1, #13
 800b742:	d833      	bhi.n	800b7ac <_strtod_l+0x94>
 800b744:	2908      	cmp	r1, #8
 800b746:	d833      	bhi.n	800b7b0 <_strtod_l+0x98>
 800b748:	2900      	cmp	r1, #0
 800b74a:	d03c      	beq.n	800b7c6 <_strtod_l+0xae>
 800b74c:	2200      	movs	r2, #0
 800b74e:	9208      	str	r2, [sp, #32]
 800b750:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800b752:	782a      	ldrb	r2, [r5, #0]
 800b754:	2a30      	cmp	r2, #48	@ 0x30
 800b756:	f040 80b5 	bne.w	800b8c4 <_strtod_l+0x1ac>
 800b75a:	786a      	ldrb	r2, [r5, #1]
 800b75c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b760:	2a58      	cmp	r2, #88	@ 0x58
 800b762:	d170      	bne.n	800b846 <_strtod_l+0x12e>
 800b764:	9302      	str	r3, [sp, #8]
 800b766:	9b08      	ldr	r3, [sp, #32]
 800b768:	9301      	str	r3, [sp, #4]
 800b76a:	ab12      	add	r3, sp, #72	@ 0x48
 800b76c:	9300      	str	r3, [sp, #0]
 800b76e:	4a8b      	ldr	r2, [pc, #556]	@ (800b99c <_strtod_l+0x284>)
 800b770:	9805      	ldr	r0, [sp, #20]
 800b772:	ab13      	add	r3, sp, #76	@ 0x4c
 800b774:	a911      	add	r1, sp, #68	@ 0x44
 800b776:	f001 f8d9 	bl	800c92c <__gethex>
 800b77a:	f010 060f 	ands.w	r6, r0, #15
 800b77e:	4604      	mov	r4, r0
 800b780:	d005      	beq.n	800b78e <_strtod_l+0x76>
 800b782:	2e06      	cmp	r6, #6
 800b784:	d12a      	bne.n	800b7dc <_strtod_l+0xc4>
 800b786:	3501      	adds	r5, #1
 800b788:	2300      	movs	r3, #0
 800b78a:	9511      	str	r5, [sp, #68]	@ 0x44
 800b78c:	9308      	str	r3, [sp, #32]
 800b78e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b790:	2b00      	cmp	r3, #0
 800b792:	f040 852f 	bne.w	800c1f4 <_strtod_l+0xadc>
 800b796:	9b08      	ldr	r3, [sp, #32]
 800b798:	ec4b ab10 	vmov	d0, sl, fp
 800b79c:	b1cb      	cbz	r3, 800b7d2 <_strtod_l+0xba>
 800b79e:	eeb1 0b40 	vneg.f64	d0, d0
 800b7a2:	b017      	add	sp, #92	@ 0x5c
 800b7a4:	ecbd 8b0a 	vpop	{d8-d12}
 800b7a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ac:	2920      	cmp	r1, #32
 800b7ae:	d1cd      	bne.n	800b74c <_strtod_l+0x34>
 800b7b0:	3201      	adds	r2, #1
 800b7b2:	e7c0      	b.n	800b736 <_strtod_l+0x1e>
 800b7b4:	292d      	cmp	r1, #45	@ 0x2d
 800b7b6:	d1c9      	bne.n	800b74c <_strtod_l+0x34>
 800b7b8:	2101      	movs	r1, #1
 800b7ba:	9108      	str	r1, [sp, #32]
 800b7bc:	1c51      	adds	r1, r2, #1
 800b7be:	9111      	str	r1, [sp, #68]	@ 0x44
 800b7c0:	7852      	ldrb	r2, [r2, #1]
 800b7c2:	2a00      	cmp	r2, #0
 800b7c4:	d1c4      	bne.n	800b750 <_strtod_l+0x38>
 800b7c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7c8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f040 850f 	bne.w	800c1f0 <_strtod_l+0xad8>
 800b7d2:	ec4b ab10 	vmov	d0, sl, fp
 800b7d6:	e7e4      	b.n	800b7a2 <_strtod_l+0x8a>
 800b7d8:	2100      	movs	r1, #0
 800b7da:	e7ee      	b.n	800b7ba <_strtod_l+0xa2>
 800b7dc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b7de:	b13a      	cbz	r2, 800b7f0 <_strtod_l+0xd8>
 800b7e0:	2135      	movs	r1, #53	@ 0x35
 800b7e2:	a814      	add	r0, sp, #80	@ 0x50
 800b7e4:	f7ff ff39 	bl	800b65a <__copybits>
 800b7e8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b7ea:	9805      	ldr	r0, [sp, #20]
 800b7ec:	f7ff fb0a 	bl	800ae04 <_Bfree>
 800b7f0:	1e73      	subs	r3, r6, #1
 800b7f2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b7f4:	2b04      	cmp	r3, #4
 800b7f6:	d806      	bhi.n	800b806 <_strtod_l+0xee>
 800b7f8:	e8df f003 	tbb	[pc, r3]
 800b7fc:	201d0314 	.word	0x201d0314
 800b800:	14          	.byte	0x14
 800b801:	00          	.byte	0x00
 800b802:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800b806:	05e3      	lsls	r3, r4, #23
 800b808:	bf48      	it	mi
 800b80a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b80e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b812:	0d1b      	lsrs	r3, r3, #20
 800b814:	051b      	lsls	r3, r3, #20
 800b816:	2b00      	cmp	r3, #0
 800b818:	d1b9      	bne.n	800b78e <_strtod_l+0x76>
 800b81a:	f7fe fba1 	bl	8009f60 <__errno>
 800b81e:	2322      	movs	r3, #34	@ 0x22
 800b820:	6003      	str	r3, [r0, #0]
 800b822:	e7b4      	b.n	800b78e <_strtod_l+0x76>
 800b824:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800b828:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b82c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b830:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b834:	e7e7      	b.n	800b806 <_strtod_l+0xee>
 800b836:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800b9a4 <_strtod_l+0x28c>
 800b83a:	e7e4      	b.n	800b806 <_strtod_l+0xee>
 800b83c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b840:	f04f 3aff 	mov.w	sl, #4294967295
 800b844:	e7df      	b.n	800b806 <_strtod_l+0xee>
 800b846:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b848:	1c5a      	adds	r2, r3, #1
 800b84a:	9211      	str	r2, [sp, #68]	@ 0x44
 800b84c:	785b      	ldrb	r3, [r3, #1]
 800b84e:	2b30      	cmp	r3, #48	@ 0x30
 800b850:	d0f9      	beq.n	800b846 <_strtod_l+0x12e>
 800b852:	2b00      	cmp	r3, #0
 800b854:	d09b      	beq.n	800b78e <_strtod_l+0x76>
 800b856:	2301      	movs	r3, #1
 800b858:	2600      	movs	r6, #0
 800b85a:	9307      	str	r3, [sp, #28]
 800b85c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b85e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b860:	46b1      	mov	r9, r6
 800b862:	4635      	mov	r5, r6
 800b864:	220a      	movs	r2, #10
 800b866:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800b868:	7804      	ldrb	r4, [r0, #0]
 800b86a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800b86e:	b2d9      	uxtb	r1, r3
 800b870:	2909      	cmp	r1, #9
 800b872:	d929      	bls.n	800b8c8 <_strtod_l+0x1b0>
 800b874:	494a      	ldr	r1, [pc, #296]	@ (800b9a0 <_strtod_l+0x288>)
 800b876:	2201      	movs	r2, #1
 800b878:	f000 ff84 	bl	800c784 <strncmp>
 800b87c:	b378      	cbz	r0, 800b8de <_strtod_l+0x1c6>
 800b87e:	2000      	movs	r0, #0
 800b880:	4622      	mov	r2, r4
 800b882:	462b      	mov	r3, r5
 800b884:	4607      	mov	r7, r0
 800b886:	9006      	str	r0, [sp, #24]
 800b888:	2a65      	cmp	r2, #101	@ 0x65
 800b88a:	d001      	beq.n	800b890 <_strtod_l+0x178>
 800b88c:	2a45      	cmp	r2, #69	@ 0x45
 800b88e:	d117      	bne.n	800b8c0 <_strtod_l+0x1a8>
 800b890:	b91b      	cbnz	r3, 800b89a <_strtod_l+0x182>
 800b892:	9b07      	ldr	r3, [sp, #28]
 800b894:	4303      	orrs	r3, r0
 800b896:	d096      	beq.n	800b7c6 <_strtod_l+0xae>
 800b898:	2300      	movs	r3, #0
 800b89a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800b89e:	f108 0201 	add.w	r2, r8, #1
 800b8a2:	9211      	str	r2, [sp, #68]	@ 0x44
 800b8a4:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b8a8:	2a2b      	cmp	r2, #43	@ 0x2b
 800b8aa:	d06b      	beq.n	800b984 <_strtod_l+0x26c>
 800b8ac:	2a2d      	cmp	r2, #45	@ 0x2d
 800b8ae:	d071      	beq.n	800b994 <_strtod_l+0x27c>
 800b8b0:	f04f 0e00 	mov.w	lr, #0
 800b8b4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800b8b8:	2c09      	cmp	r4, #9
 800b8ba:	d979      	bls.n	800b9b0 <_strtod_l+0x298>
 800b8bc:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800b8c0:	2400      	movs	r4, #0
 800b8c2:	e094      	b.n	800b9ee <_strtod_l+0x2d6>
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	e7c7      	b.n	800b858 <_strtod_l+0x140>
 800b8c8:	2d08      	cmp	r5, #8
 800b8ca:	f100 0001 	add.w	r0, r0, #1
 800b8ce:	bfd4      	ite	le
 800b8d0:	fb02 3909 	mlale	r9, r2, r9, r3
 800b8d4:	fb02 3606 	mlagt	r6, r2, r6, r3
 800b8d8:	3501      	adds	r5, #1
 800b8da:	9011      	str	r0, [sp, #68]	@ 0x44
 800b8dc:	e7c3      	b.n	800b866 <_strtod_l+0x14e>
 800b8de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b8e0:	1c5a      	adds	r2, r3, #1
 800b8e2:	9211      	str	r2, [sp, #68]	@ 0x44
 800b8e4:	785a      	ldrb	r2, [r3, #1]
 800b8e6:	b375      	cbz	r5, 800b946 <_strtod_l+0x22e>
 800b8e8:	4607      	mov	r7, r0
 800b8ea:	462b      	mov	r3, r5
 800b8ec:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b8f0:	2909      	cmp	r1, #9
 800b8f2:	d913      	bls.n	800b91c <_strtod_l+0x204>
 800b8f4:	2101      	movs	r1, #1
 800b8f6:	9106      	str	r1, [sp, #24]
 800b8f8:	e7c6      	b.n	800b888 <_strtod_l+0x170>
 800b8fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b8fc:	1c5a      	adds	r2, r3, #1
 800b8fe:	9211      	str	r2, [sp, #68]	@ 0x44
 800b900:	785a      	ldrb	r2, [r3, #1]
 800b902:	3001      	adds	r0, #1
 800b904:	2a30      	cmp	r2, #48	@ 0x30
 800b906:	d0f8      	beq.n	800b8fa <_strtod_l+0x1e2>
 800b908:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b90c:	2b08      	cmp	r3, #8
 800b90e:	f200 8476 	bhi.w	800c1fe <_strtod_l+0xae6>
 800b912:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b914:	930a      	str	r3, [sp, #40]	@ 0x28
 800b916:	4607      	mov	r7, r0
 800b918:	2000      	movs	r0, #0
 800b91a:	4603      	mov	r3, r0
 800b91c:	3a30      	subs	r2, #48	@ 0x30
 800b91e:	f100 0101 	add.w	r1, r0, #1
 800b922:	d023      	beq.n	800b96c <_strtod_l+0x254>
 800b924:	440f      	add	r7, r1
 800b926:	eb00 0c03 	add.w	ip, r0, r3
 800b92a:	4619      	mov	r1, r3
 800b92c:	240a      	movs	r4, #10
 800b92e:	4561      	cmp	r1, ip
 800b930:	d10b      	bne.n	800b94a <_strtod_l+0x232>
 800b932:	1c5c      	adds	r4, r3, #1
 800b934:	4403      	add	r3, r0
 800b936:	2b08      	cmp	r3, #8
 800b938:	4404      	add	r4, r0
 800b93a:	dc11      	bgt.n	800b960 <_strtod_l+0x248>
 800b93c:	230a      	movs	r3, #10
 800b93e:	fb03 2909 	mla	r9, r3, r9, r2
 800b942:	2100      	movs	r1, #0
 800b944:	e013      	b.n	800b96e <_strtod_l+0x256>
 800b946:	4628      	mov	r0, r5
 800b948:	e7dc      	b.n	800b904 <_strtod_l+0x1ec>
 800b94a:	2908      	cmp	r1, #8
 800b94c:	f101 0101 	add.w	r1, r1, #1
 800b950:	dc02      	bgt.n	800b958 <_strtod_l+0x240>
 800b952:	fb04 f909 	mul.w	r9, r4, r9
 800b956:	e7ea      	b.n	800b92e <_strtod_l+0x216>
 800b958:	2910      	cmp	r1, #16
 800b95a:	bfd8      	it	le
 800b95c:	4366      	mulle	r6, r4
 800b95e:	e7e6      	b.n	800b92e <_strtod_l+0x216>
 800b960:	2b0f      	cmp	r3, #15
 800b962:	dcee      	bgt.n	800b942 <_strtod_l+0x22a>
 800b964:	230a      	movs	r3, #10
 800b966:	fb03 2606 	mla	r6, r3, r6, r2
 800b96a:	e7ea      	b.n	800b942 <_strtod_l+0x22a>
 800b96c:	461c      	mov	r4, r3
 800b96e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b970:	1c5a      	adds	r2, r3, #1
 800b972:	9211      	str	r2, [sp, #68]	@ 0x44
 800b974:	785a      	ldrb	r2, [r3, #1]
 800b976:	4608      	mov	r0, r1
 800b978:	4623      	mov	r3, r4
 800b97a:	e7b7      	b.n	800b8ec <_strtod_l+0x1d4>
 800b97c:	2301      	movs	r3, #1
 800b97e:	2700      	movs	r7, #0
 800b980:	9306      	str	r3, [sp, #24]
 800b982:	e786      	b.n	800b892 <_strtod_l+0x17a>
 800b984:	f04f 0e00 	mov.w	lr, #0
 800b988:	f108 0202 	add.w	r2, r8, #2
 800b98c:	9211      	str	r2, [sp, #68]	@ 0x44
 800b98e:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b992:	e78f      	b.n	800b8b4 <_strtod_l+0x19c>
 800b994:	f04f 0e01 	mov.w	lr, #1
 800b998:	e7f6      	b.n	800b988 <_strtod_l+0x270>
 800b99a:	bf00      	nop
 800b99c:	0800d770 	.word	0x0800d770
 800b9a0:	0800d758 	.word	0x0800d758
 800b9a4:	7ff00000 	.word	0x7ff00000
 800b9a8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b9aa:	1c54      	adds	r4, r2, #1
 800b9ac:	9411      	str	r4, [sp, #68]	@ 0x44
 800b9ae:	7852      	ldrb	r2, [r2, #1]
 800b9b0:	2a30      	cmp	r2, #48	@ 0x30
 800b9b2:	d0f9      	beq.n	800b9a8 <_strtod_l+0x290>
 800b9b4:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800b9b8:	2c08      	cmp	r4, #8
 800b9ba:	d881      	bhi.n	800b8c0 <_strtod_l+0x1a8>
 800b9bc:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800b9c0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b9c2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b9c4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b9c6:	1c51      	adds	r1, r2, #1
 800b9c8:	9111      	str	r1, [sp, #68]	@ 0x44
 800b9ca:	7852      	ldrb	r2, [r2, #1]
 800b9cc:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800b9d0:	2c09      	cmp	r4, #9
 800b9d2:	d938      	bls.n	800ba46 <_strtod_l+0x32e>
 800b9d4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800b9d6:	1b0c      	subs	r4, r1, r4
 800b9d8:	2c08      	cmp	r4, #8
 800b9da:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800b9de:	dc02      	bgt.n	800b9e6 <_strtod_l+0x2ce>
 800b9e0:	4564      	cmp	r4, ip
 800b9e2:	bfa8      	it	ge
 800b9e4:	4664      	movge	r4, ip
 800b9e6:	f1be 0f00 	cmp.w	lr, #0
 800b9ea:	d000      	beq.n	800b9ee <_strtod_l+0x2d6>
 800b9ec:	4264      	negs	r4, r4
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d14e      	bne.n	800ba90 <_strtod_l+0x378>
 800b9f2:	9b07      	ldr	r3, [sp, #28]
 800b9f4:	4318      	orrs	r0, r3
 800b9f6:	f47f aeca 	bne.w	800b78e <_strtod_l+0x76>
 800b9fa:	9b06      	ldr	r3, [sp, #24]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	f47f aee2 	bne.w	800b7c6 <_strtod_l+0xae>
 800ba02:	2a69      	cmp	r2, #105	@ 0x69
 800ba04:	d027      	beq.n	800ba56 <_strtod_l+0x33e>
 800ba06:	dc24      	bgt.n	800ba52 <_strtod_l+0x33a>
 800ba08:	2a49      	cmp	r2, #73	@ 0x49
 800ba0a:	d024      	beq.n	800ba56 <_strtod_l+0x33e>
 800ba0c:	2a4e      	cmp	r2, #78	@ 0x4e
 800ba0e:	f47f aeda 	bne.w	800b7c6 <_strtod_l+0xae>
 800ba12:	4997      	ldr	r1, [pc, #604]	@ (800bc70 <_strtod_l+0x558>)
 800ba14:	a811      	add	r0, sp, #68	@ 0x44
 800ba16:	f001 f9ab 	bl	800cd70 <__match>
 800ba1a:	2800      	cmp	r0, #0
 800ba1c:	f43f aed3 	beq.w	800b7c6 <_strtod_l+0xae>
 800ba20:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ba22:	781b      	ldrb	r3, [r3, #0]
 800ba24:	2b28      	cmp	r3, #40	@ 0x28
 800ba26:	d12d      	bne.n	800ba84 <_strtod_l+0x36c>
 800ba28:	4992      	ldr	r1, [pc, #584]	@ (800bc74 <_strtod_l+0x55c>)
 800ba2a:	aa14      	add	r2, sp, #80	@ 0x50
 800ba2c:	a811      	add	r0, sp, #68	@ 0x44
 800ba2e:	f001 f9b3 	bl	800cd98 <__hexnan>
 800ba32:	2805      	cmp	r0, #5
 800ba34:	d126      	bne.n	800ba84 <_strtod_l+0x36c>
 800ba36:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ba38:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800ba3c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ba40:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ba44:	e6a3      	b.n	800b78e <_strtod_l+0x76>
 800ba46:	240a      	movs	r4, #10
 800ba48:	fb04 2c0c 	mla	ip, r4, ip, r2
 800ba4c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800ba50:	e7b8      	b.n	800b9c4 <_strtod_l+0x2ac>
 800ba52:	2a6e      	cmp	r2, #110	@ 0x6e
 800ba54:	e7db      	b.n	800ba0e <_strtod_l+0x2f6>
 800ba56:	4988      	ldr	r1, [pc, #544]	@ (800bc78 <_strtod_l+0x560>)
 800ba58:	a811      	add	r0, sp, #68	@ 0x44
 800ba5a:	f001 f989 	bl	800cd70 <__match>
 800ba5e:	2800      	cmp	r0, #0
 800ba60:	f43f aeb1 	beq.w	800b7c6 <_strtod_l+0xae>
 800ba64:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ba66:	4985      	ldr	r1, [pc, #532]	@ (800bc7c <_strtod_l+0x564>)
 800ba68:	3b01      	subs	r3, #1
 800ba6a:	a811      	add	r0, sp, #68	@ 0x44
 800ba6c:	9311      	str	r3, [sp, #68]	@ 0x44
 800ba6e:	f001 f97f 	bl	800cd70 <__match>
 800ba72:	b910      	cbnz	r0, 800ba7a <_strtod_l+0x362>
 800ba74:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ba76:	3301      	adds	r3, #1
 800ba78:	9311      	str	r3, [sp, #68]	@ 0x44
 800ba7a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800bc90 <_strtod_l+0x578>
 800ba7e:	f04f 0a00 	mov.w	sl, #0
 800ba82:	e684      	b.n	800b78e <_strtod_l+0x76>
 800ba84:	487e      	ldr	r0, [pc, #504]	@ (800bc80 <_strtod_l+0x568>)
 800ba86:	f000 feaf 	bl	800c7e8 <nan>
 800ba8a:	ec5b ab10 	vmov	sl, fp, d0
 800ba8e:	e67e      	b.n	800b78e <_strtod_l+0x76>
 800ba90:	ee07 9a90 	vmov	s15, r9
 800ba94:	1be2      	subs	r2, r4, r7
 800ba96:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ba9a:	2d00      	cmp	r5, #0
 800ba9c:	bf08      	it	eq
 800ba9e:	461d      	moveq	r5, r3
 800baa0:	2b10      	cmp	r3, #16
 800baa2:	9209      	str	r2, [sp, #36]	@ 0x24
 800baa4:	461a      	mov	r2, r3
 800baa6:	bfa8      	it	ge
 800baa8:	2210      	movge	r2, #16
 800baaa:	2b09      	cmp	r3, #9
 800baac:	ec5b ab17 	vmov	sl, fp, d7
 800bab0:	dc15      	bgt.n	800bade <_strtod_l+0x3c6>
 800bab2:	1be1      	subs	r1, r4, r7
 800bab4:	2900      	cmp	r1, #0
 800bab6:	f43f ae6a 	beq.w	800b78e <_strtod_l+0x76>
 800baba:	eba4 0107 	sub.w	r1, r4, r7
 800babe:	dd72      	ble.n	800bba6 <_strtod_l+0x48e>
 800bac0:	2916      	cmp	r1, #22
 800bac2:	dc59      	bgt.n	800bb78 <_strtod_l+0x460>
 800bac4:	4b6f      	ldr	r3, [pc, #444]	@ (800bc84 <_strtod_l+0x56c>)
 800bac6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bac8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bacc:	ed93 7b00 	vldr	d7, [r3]
 800bad0:	ec4b ab16 	vmov	d6, sl, fp
 800bad4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bad8:	ec5b ab17 	vmov	sl, fp, d7
 800badc:	e657      	b.n	800b78e <_strtod_l+0x76>
 800bade:	4969      	ldr	r1, [pc, #420]	@ (800bc84 <_strtod_l+0x56c>)
 800bae0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800bae4:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800bae8:	ee06 6a90 	vmov	s13, r6
 800baec:	2b0f      	cmp	r3, #15
 800baee:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800baf2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800baf6:	ec5b ab16 	vmov	sl, fp, d6
 800bafa:	ddda      	ble.n	800bab2 <_strtod_l+0x39a>
 800bafc:	1a9a      	subs	r2, r3, r2
 800bafe:	1be1      	subs	r1, r4, r7
 800bb00:	440a      	add	r2, r1
 800bb02:	2a00      	cmp	r2, #0
 800bb04:	f340 8094 	ble.w	800bc30 <_strtod_l+0x518>
 800bb08:	f012 000f 	ands.w	r0, r2, #15
 800bb0c:	d00a      	beq.n	800bb24 <_strtod_l+0x40c>
 800bb0e:	495d      	ldr	r1, [pc, #372]	@ (800bc84 <_strtod_l+0x56c>)
 800bb10:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800bb14:	ed91 7b00 	vldr	d7, [r1]
 800bb18:	ec4b ab16 	vmov	d6, sl, fp
 800bb1c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bb20:	ec5b ab17 	vmov	sl, fp, d7
 800bb24:	f032 020f 	bics.w	r2, r2, #15
 800bb28:	d073      	beq.n	800bc12 <_strtod_l+0x4fa>
 800bb2a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800bb2e:	dd47      	ble.n	800bbc0 <_strtod_l+0x4a8>
 800bb30:	2400      	movs	r4, #0
 800bb32:	4625      	mov	r5, r4
 800bb34:	9407      	str	r4, [sp, #28]
 800bb36:	4626      	mov	r6, r4
 800bb38:	9a05      	ldr	r2, [sp, #20]
 800bb3a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800bc90 <_strtod_l+0x578>
 800bb3e:	2322      	movs	r3, #34	@ 0x22
 800bb40:	6013      	str	r3, [r2, #0]
 800bb42:	f04f 0a00 	mov.w	sl, #0
 800bb46:	9b07      	ldr	r3, [sp, #28]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	f43f ae20 	beq.w	800b78e <_strtod_l+0x76>
 800bb4e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800bb50:	9805      	ldr	r0, [sp, #20]
 800bb52:	f7ff f957 	bl	800ae04 <_Bfree>
 800bb56:	9805      	ldr	r0, [sp, #20]
 800bb58:	4631      	mov	r1, r6
 800bb5a:	f7ff f953 	bl	800ae04 <_Bfree>
 800bb5e:	9805      	ldr	r0, [sp, #20]
 800bb60:	4629      	mov	r1, r5
 800bb62:	f7ff f94f 	bl	800ae04 <_Bfree>
 800bb66:	9907      	ldr	r1, [sp, #28]
 800bb68:	9805      	ldr	r0, [sp, #20]
 800bb6a:	f7ff f94b 	bl	800ae04 <_Bfree>
 800bb6e:	9805      	ldr	r0, [sp, #20]
 800bb70:	4621      	mov	r1, r4
 800bb72:	f7ff f947 	bl	800ae04 <_Bfree>
 800bb76:	e60a      	b.n	800b78e <_strtod_l+0x76>
 800bb78:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800bb7c:	1be0      	subs	r0, r4, r7
 800bb7e:	4281      	cmp	r1, r0
 800bb80:	dbbc      	blt.n	800bafc <_strtod_l+0x3e4>
 800bb82:	4a40      	ldr	r2, [pc, #256]	@ (800bc84 <_strtod_l+0x56c>)
 800bb84:	f1c3 030f 	rsb	r3, r3, #15
 800bb88:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800bb8c:	ed91 7b00 	vldr	d7, [r1]
 800bb90:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bb92:	ec4b ab16 	vmov	d6, sl, fp
 800bb96:	1acb      	subs	r3, r1, r3
 800bb98:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800bb9c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bba0:	ed92 6b00 	vldr	d6, [r2]
 800bba4:	e796      	b.n	800bad4 <_strtod_l+0x3bc>
 800bba6:	3116      	adds	r1, #22
 800bba8:	dba8      	blt.n	800bafc <_strtod_l+0x3e4>
 800bbaa:	4b36      	ldr	r3, [pc, #216]	@ (800bc84 <_strtod_l+0x56c>)
 800bbac:	1b3c      	subs	r4, r7, r4
 800bbae:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800bbb2:	ed94 7b00 	vldr	d7, [r4]
 800bbb6:	ec4b ab16 	vmov	d6, sl, fp
 800bbba:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800bbbe:	e78b      	b.n	800bad8 <_strtod_l+0x3c0>
 800bbc0:	2000      	movs	r0, #0
 800bbc2:	ec4b ab17 	vmov	d7, sl, fp
 800bbc6:	4e30      	ldr	r6, [pc, #192]	@ (800bc88 <_strtod_l+0x570>)
 800bbc8:	1112      	asrs	r2, r2, #4
 800bbca:	4601      	mov	r1, r0
 800bbcc:	2a01      	cmp	r2, #1
 800bbce:	dc23      	bgt.n	800bc18 <_strtod_l+0x500>
 800bbd0:	b108      	cbz	r0, 800bbd6 <_strtod_l+0x4be>
 800bbd2:	ec5b ab17 	vmov	sl, fp, d7
 800bbd6:	4a2c      	ldr	r2, [pc, #176]	@ (800bc88 <_strtod_l+0x570>)
 800bbd8:	482c      	ldr	r0, [pc, #176]	@ (800bc8c <_strtod_l+0x574>)
 800bbda:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800bbde:	ed92 7b00 	vldr	d7, [r2]
 800bbe2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800bbe6:	ec4b ab16 	vmov	d6, sl, fp
 800bbea:	4a29      	ldr	r2, [pc, #164]	@ (800bc90 <_strtod_l+0x578>)
 800bbec:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bbf0:	ee17 1a90 	vmov	r1, s15
 800bbf4:	400a      	ands	r2, r1
 800bbf6:	4282      	cmp	r2, r0
 800bbf8:	ec5b ab17 	vmov	sl, fp, d7
 800bbfc:	d898      	bhi.n	800bb30 <_strtod_l+0x418>
 800bbfe:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800bc02:	4282      	cmp	r2, r0
 800bc04:	bf86      	itte	hi
 800bc06:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800bc94 <_strtod_l+0x57c>
 800bc0a:	f04f 3aff 	movhi.w	sl, #4294967295
 800bc0e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800bc12:	2200      	movs	r2, #0
 800bc14:	9206      	str	r2, [sp, #24]
 800bc16:	e076      	b.n	800bd06 <_strtod_l+0x5ee>
 800bc18:	f012 0f01 	tst.w	r2, #1
 800bc1c:	d004      	beq.n	800bc28 <_strtod_l+0x510>
 800bc1e:	ed96 6b00 	vldr	d6, [r6]
 800bc22:	2001      	movs	r0, #1
 800bc24:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bc28:	3101      	adds	r1, #1
 800bc2a:	1052      	asrs	r2, r2, #1
 800bc2c:	3608      	adds	r6, #8
 800bc2e:	e7cd      	b.n	800bbcc <_strtod_l+0x4b4>
 800bc30:	d0ef      	beq.n	800bc12 <_strtod_l+0x4fa>
 800bc32:	4252      	negs	r2, r2
 800bc34:	f012 000f 	ands.w	r0, r2, #15
 800bc38:	d00a      	beq.n	800bc50 <_strtod_l+0x538>
 800bc3a:	4912      	ldr	r1, [pc, #72]	@ (800bc84 <_strtod_l+0x56c>)
 800bc3c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800bc40:	ed91 7b00 	vldr	d7, [r1]
 800bc44:	ec4b ab16 	vmov	d6, sl, fp
 800bc48:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800bc4c:	ec5b ab17 	vmov	sl, fp, d7
 800bc50:	1112      	asrs	r2, r2, #4
 800bc52:	d0de      	beq.n	800bc12 <_strtod_l+0x4fa>
 800bc54:	2a1f      	cmp	r2, #31
 800bc56:	dd1f      	ble.n	800bc98 <_strtod_l+0x580>
 800bc58:	2400      	movs	r4, #0
 800bc5a:	4625      	mov	r5, r4
 800bc5c:	9407      	str	r4, [sp, #28]
 800bc5e:	4626      	mov	r6, r4
 800bc60:	9a05      	ldr	r2, [sp, #20]
 800bc62:	2322      	movs	r3, #34	@ 0x22
 800bc64:	f04f 0a00 	mov.w	sl, #0
 800bc68:	f04f 0b00 	mov.w	fp, #0
 800bc6c:	6013      	str	r3, [r2, #0]
 800bc6e:	e76a      	b.n	800bb46 <_strtod_l+0x42e>
 800bc70:	0800d545 	.word	0x0800d545
 800bc74:	0800d75c 	.word	0x0800d75c
 800bc78:	0800d53d 	.word	0x0800d53d
 800bc7c:	0800d574 	.word	0x0800d574
 800bc80:	0800d905 	.word	0x0800d905
 800bc84:	0800d690 	.word	0x0800d690
 800bc88:	0800d668 	.word	0x0800d668
 800bc8c:	7ca00000 	.word	0x7ca00000
 800bc90:	7ff00000 	.word	0x7ff00000
 800bc94:	7fefffff 	.word	0x7fefffff
 800bc98:	f012 0110 	ands.w	r1, r2, #16
 800bc9c:	bf18      	it	ne
 800bc9e:	216a      	movne	r1, #106	@ 0x6a
 800bca0:	9106      	str	r1, [sp, #24]
 800bca2:	ec4b ab17 	vmov	d7, sl, fp
 800bca6:	49b0      	ldr	r1, [pc, #704]	@ (800bf68 <_strtod_l+0x850>)
 800bca8:	2000      	movs	r0, #0
 800bcaa:	07d6      	lsls	r6, r2, #31
 800bcac:	d504      	bpl.n	800bcb8 <_strtod_l+0x5a0>
 800bcae:	ed91 6b00 	vldr	d6, [r1]
 800bcb2:	2001      	movs	r0, #1
 800bcb4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bcb8:	1052      	asrs	r2, r2, #1
 800bcba:	f101 0108 	add.w	r1, r1, #8
 800bcbe:	d1f4      	bne.n	800bcaa <_strtod_l+0x592>
 800bcc0:	b108      	cbz	r0, 800bcc6 <_strtod_l+0x5ae>
 800bcc2:	ec5b ab17 	vmov	sl, fp, d7
 800bcc6:	9a06      	ldr	r2, [sp, #24]
 800bcc8:	b1b2      	cbz	r2, 800bcf8 <_strtod_l+0x5e0>
 800bcca:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800bcce:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800bcd2:	2a00      	cmp	r2, #0
 800bcd4:	4658      	mov	r0, fp
 800bcd6:	dd0f      	ble.n	800bcf8 <_strtod_l+0x5e0>
 800bcd8:	2a1f      	cmp	r2, #31
 800bcda:	dd55      	ble.n	800bd88 <_strtod_l+0x670>
 800bcdc:	2a34      	cmp	r2, #52	@ 0x34
 800bcde:	bfde      	ittt	le
 800bce0:	f04f 32ff 	movle.w	r2, #4294967295
 800bce4:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800bce8:	408a      	lslle	r2, r1
 800bcea:	f04f 0a00 	mov.w	sl, #0
 800bcee:	bfcc      	ite	gt
 800bcf0:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bcf4:	ea02 0b00 	andle.w	fp, r2, r0
 800bcf8:	ec4b ab17 	vmov	d7, sl, fp
 800bcfc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bd00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd04:	d0a8      	beq.n	800bc58 <_strtod_l+0x540>
 800bd06:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bd08:	9805      	ldr	r0, [sp, #20]
 800bd0a:	f8cd 9000 	str.w	r9, [sp]
 800bd0e:	462a      	mov	r2, r5
 800bd10:	f7ff f8e0 	bl	800aed4 <__s2b>
 800bd14:	9007      	str	r0, [sp, #28]
 800bd16:	2800      	cmp	r0, #0
 800bd18:	f43f af0a 	beq.w	800bb30 <_strtod_l+0x418>
 800bd1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd1e:	1b3f      	subs	r7, r7, r4
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	bfb4      	ite	lt
 800bd24:	463b      	movlt	r3, r7
 800bd26:	2300      	movge	r3, #0
 800bd28:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd2c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800bf58 <_strtod_l+0x840>
 800bd30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bd34:	2400      	movs	r4, #0
 800bd36:	930d      	str	r3, [sp, #52]	@ 0x34
 800bd38:	4625      	mov	r5, r4
 800bd3a:	9b07      	ldr	r3, [sp, #28]
 800bd3c:	9805      	ldr	r0, [sp, #20]
 800bd3e:	6859      	ldr	r1, [r3, #4]
 800bd40:	f7ff f820 	bl	800ad84 <_Balloc>
 800bd44:	4606      	mov	r6, r0
 800bd46:	2800      	cmp	r0, #0
 800bd48:	f43f aef6 	beq.w	800bb38 <_strtod_l+0x420>
 800bd4c:	9b07      	ldr	r3, [sp, #28]
 800bd4e:	691a      	ldr	r2, [r3, #16]
 800bd50:	ec4b ab19 	vmov	d9, sl, fp
 800bd54:	3202      	adds	r2, #2
 800bd56:	f103 010c 	add.w	r1, r3, #12
 800bd5a:	0092      	lsls	r2, r2, #2
 800bd5c:	300c      	adds	r0, #12
 800bd5e:	f000 fd33 	bl	800c7c8 <memcpy>
 800bd62:	eeb0 0b49 	vmov.f64	d0, d9
 800bd66:	9805      	ldr	r0, [sp, #20]
 800bd68:	aa14      	add	r2, sp, #80	@ 0x50
 800bd6a:	a913      	add	r1, sp, #76	@ 0x4c
 800bd6c:	f7ff fbee 	bl	800b54c <__d2b>
 800bd70:	9012      	str	r0, [sp, #72]	@ 0x48
 800bd72:	2800      	cmp	r0, #0
 800bd74:	f43f aee0 	beq.w	800bb38 <_strtod_l+0x420>
 800bd78:	9805      	ldr	r0, [sp, #20]
 800bd7a:	2101      	movs	r1, #1
 800bd7c:	f7ff f940 	bl	800b000 <__i2b>
 800bd80:	4605      	mov	r5, r0
 800bd82:	b940      	cbnz	r0, 800bd96 <_strtod_l+0x67e>
 800bd84:	2500      	movs	r5, #0
 800bd86:	e6d7      	b.n	800bb38 <_strtod_l+0x420>
 800bd88:	f04f 31ff 	mov.w	r1, #4294967295
 800bd8c:	fa01 f202 	lsl.w	r2, r1, r2
 800bd90:	ea02 0a0a 	and.w	sl, r2, sl
 800bd94:	e7b0      	b.n	800bcf8 <_strtod_l+0x5e0>
 800bd96:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800bd98:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bd9a:	2f00      	cmp	r7, #0
 800bd9c:	bfab      	itete	ge
 800bd9e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800bda0:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800bda2:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800bda6:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800bdaa:	bfac      	ite	ge
 800bdac:	eb07 0903 	addge.w	r9, r7, r3
 800bdb0:	eba3 0807 	sublt.w	r8, r3, r7
 800bdb4:	9b06      	ldr	r3, [sp, #24]
 800bdb6:	1aff      	subs	r7, r7, r3
 800bdb8:	4417      	add	r7, r2
 800bdba:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800bdbe:	4a6b      	ldr	r2, [pc, #428]	@ (800bf6c <_strtod_l+0x854>)
 800bdc0:	3f01      	subs	r7, #1
 800bdc2:	4297      	cmp	r7, r2
 800bdc4:	da51      	bge.n	800be6a <_strtod_l+0x752>
 800bdc6:	1bd1      	subs	r1, r2, r7
 800bdc8:	291f      	cmp	r1, #31
 800bdca:	eba3 0301 	sub.w	r3, r3, r1
 800bdce:	f04f 0201 	mov.w	r2, #1
 800bdd2:	dc3e      	bgt.n	800be52 <_strtod_l+0x73a>
 800bdd4:	408a      	lsls	r2, r1
 800bdd6:	920c      	str	r2, [sp, #48]	@ 0x30
 800bdd8:	2200      	movs	r2, #0
 800bdda:	920b      	str	r2, [sp, #44]	@ 0x2c
 800bddc:	eb09 0703 	add.w	r7, r9, r3
 800bde0:	4498      	add	r8, r3
 800bde2:	9b06      	ldr	r3, [sp, #24]
 800bde4:	45b9      	cmp	r9, r7
 800bde6:	4498      	add	r8, r3
 800bde8:	464b      	mov	r3, r9
 800bdea:	bfa8      	it	ge
 800bdec:	463b      	movge	r3, r7
 800bdee:	4543      	cmp	r3, r8
 800bdf0:	bfa8      	it	ge
 800bdf2:	4643      	movge	r3, r8
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	bfc2      	ittt	gt
 800bdf8:	1aff      	subgt	r7, r7, r3
 800bdfa:	eba8 0803 	subgt.w	r8, r8, r3
 800bdfe:	eba9 0903 	subgt.w	r9, r9, r3
 800be02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be04:	2b00      	cmp	r3, #0
 800be06:	dd16      	ble.n	800be36 <_strtod_l+0x71e>
 800be08:	4629      	mov	r1, r5
 800be0a:	9805      	ldr	r0, [sp, #20]
 800be0c:	461a      	mov	r2, r3
 800be0e:	f7ff f9b7 	bl	800b180 <__pow5mult>
 800be12:	4605      	mov	r5, r0
 800be14:	2800      	cmp	r0, #0
 800be16:	d0b5      	beq.n	800bd84 <_strtod_l+0x66c>
 800be18:	4601      	mov	r1, r0
 800be1a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800be1c:	9805      	ldr	r0, [sp, #20]
 800be1e:	f7ff f905 	bl	800b02c <__multiply>
 800be22:	900f      	str	r0, [sp, #60]	@ 0x3c
 800be24:	2800      	cmp	r0, #0
 800be26:	f43f ae87 	beq.w	800bb38 <_strtod_l+0x420>
 800be2a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800be2c:	9805      	ldr	r0, [sp, #20]
 800be2e:	f7fe ffe9 	bl	800ae04 <_Bfree>
 800be32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be34:	9312      	str	r3, [sp, #72]	@ 0x48
 800be36:	2f00      	cmp	r7, #0
 800be38:	dc1b      	bgt.n	800be72 <_strtod_l+0x75a>
 800be3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	dd21      	ble.n	800be84 <_strtod_l+0x76c>
 800be40:	4631      	mov	r1, r6
 800be42:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800be44:	9805      	ldr	r0, [sp, #20]
 800be46:	f7ff f99b 	bl	800b180 <__pow5mult>
 800be4a:	4606      	mov	r6, r0
 800be4c:	b9d0      	cbnz	r0, 800be84 <_strtod_l+0x76c>
 800be4e:	2600      	movs	r6, #0
 800be50:	e672      	b.n	800bb38 <_strtod_l+0x420>
 800be52:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800be56:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800be5a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800be5e:	37e2      	adds	r7, #226	@ 0xe2
 800be60:	fa02 f107 	lsl.w	r1, r2, r7
 800be64:	910b      	str	r1, [sp, #44]	@ 0x2c
 800be66:	920c      	str	r2, [sp, #48]	@ 0x30
 800be68:	e7b8      	b.n	800bddc <_strtod_l+0x6c4>
 800be6a:	2200      	movs	r2, #0
 800be6c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800be6e:	2201      	movs	r2, #1
 800be70:	e7f9      	b.n	800be66 <_strtod_l+0x74e>
 800be72:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800be74:	9805      	ldr	r0, [sp, #20]
 800be76:	463a      	mov	r2, r7
 800be78:	f7ff f9dc 	bl	800b234 <__lshift>
 800be7c:	9012      	str	r0, [sp, #72]	@ 0x48
 800be7e:	2800      	cmp	r0, #0
 800be80:	d1db      	bne.n	800be3a <_strtod_l+0x722>
 800be82:	e659      	b.n	800bb38 <_strtod_l+0x420>
 800be84:	f1b8 0f00 	cmp.w	r8, #0
 800be88:	dd07      	ble.n	800be9a <_strtod_l+0x782>
 800be8a:	4631      	mov	r1, r6
 800be8c:	9805      	ldr	r0, [sp, #20]
 800be8e:	4642      	mov	r2, r8
 800be90:	f7ff f9d0 	bl	800b234 <__lshift>
 800be94:	4606      	mov	r6, r0
 800be96:	2800      	cmp	r0, #0
 800be98:	d0d9      	beq.n	800be4e <_strtod_l+0x736>
 800be9a:	f1b9 0f00 	cmp.w	r9, #0
 800be9e:	dd08      	ble.n	800beb2 <_strtod_l+0x79a>
 800bea0:	4629      	mov	r1, r5
 800bea2:	9805      	ldr	r0, [sp, #20]
 800bea4:	464a      	mov	r2, r9
 800bea6:	f7ff f9c5 	bl	800b234 <__lshift>
 800beaa:	4605      	mov	r5, r0
 800beac:	2800      	cmp	r0, #0
 800beae:	f43f ae43 	beq.w	800bb38 <_strtod_l+0x420>
 800beb2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800beb4:	9805      	ldr	r0, [sp, #20]
 800beb6:	4632      	mov	r2, r6
 800beb8:	f7ff fa44 	bl	800b344 <__mdiff>
 800bebc:	4604      	mov	r4, r0
 800bebe:	2800      	cmp	r0, #0
 800bec0:	f43f ae3a 	beq.w	800bb38 <_strtod_l+0x420>
 800bec4:	2300      	movs	r3, #0
 800bec6:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800beca:	60c3      	str	r3, [r0, #12]
 800becc:	4629      	mov	r1, r5
 800bece:	f7ff fa1d 	bl	800b30c <__mcmp>
 800bed2:	2800      	cmp	r0, #0
 800bed4:	da4e      	bge.n	800bf74 <_strtod_l+0x85c>
 800bed6:	ea58 080a 	orrs.w	r8, r8, sl
 800beda:	d174      	bne.n	800bfc6 <_strtod_l+0x8ae>
 800bedc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d170      	bne.n	800bfc6 <_strtod_l+0x8ae>
 800bee4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bee8:	0d1b      	lsrs	r3, r3, #20
 800beea:	051b      	lsls	r3, r3, #20
 800beec:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bef0:	d969      	bls.n	800bfc6 <_strtod_l+0x8ae>
 800bef2:	6963      	ldr	r3, [r4, #20]
 800bef4:	b913      	cbnz	r3, 800befc <_strtod_l+0x7e4>
 800bef6:	6923      	ldr	r3, [r4, #16]
 800bef8:	2b01      	cmp	r3, #1
 800befa:	dd64      	ble.n	800bfc6 <_strtod_l+0x8ae>
 800befc:	4621      	mov	r1, r4
 800befe:	2201      	movs	r2, #1
 800bf00:	9805      	ldr	r0, [sp, #20]
 800bf02:	f7ff f997 	bl	800b234 <__lshift>
 800bf06:	4629      	mov	r1, r5
 800bf08:	4604      	mov	r4, r0
 800bf0a:	f7ff f9ff 	bl	800b30c <__mcmp>
 800bf0e:	2800      	cmp	r0, #0
 800bf10:	dd59      	ble.n	800bfc6 <_strtod_l+0x8ae>
 800bf12:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bf16:	9a06      	ldr	r2, [sp, #24]
 800bf18:	0d1b      	lsrs	r3, r3, #20
 800bf1a:	051b      	lsls	r3, r3, #20
 800bf1c:	2a00      	cmp	r2, #0
 800bf1e:	d070      	beq.n	800c002 <_strtod_l+0x8ea>
 800bf20:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bf24:	d86d      	bhi.n	800c002 <_strtod_l+0x8ea>
 800bf26:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bf2a:	f67f ae99 	bls.w	800bc60 <_strtod_l+0x548>
 800bf2e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800bf60 <_strtod_l+0x848>
 800bf32:	ec4b ab16 	vmov	d6, sl, fp
 800bf36:	4b0e      	ldr	r3, [pc, #56]	@ (800bf70 <_strtod_l+0x858>)
 800bf38:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bf3c:	ee17 2a90 	vmov	r2, s15
 800bf40:	4013      	ands	r3, r2
 800bf42:	ec5b ab17 	vmov	sl, fp, d7
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	f47f ae01 	bne.w	800bb4e <_strtod_l+0x436>
 800bf4c:	9a05      	ldr	r2, [sp, #20]
 800bf4e:	2322      	movs	r3, #34	@ 0x22
 800bf50:	6013      	str	r3, [r2, #0]
 800bf52:	e5fc      	b.n	800bb4e <_strtod_l+0x436>
 800bf54:	f3af 8000 	nop.w
 800bf58:	ffc00000 	.word	0xffc00000
 800bf5c:	41dfffff 	.word	0x41dfffff
 800bf60:	00000000 	.word	0x00000000
 800bf64:	39500000 	.word	0x39500000
 800bf68:	0800d788 	.word	0x0800d788
 800bf6c:	fffffc02 	.word	0xfffffc02
 800bf70:	7ff00000 	.word	0x7ff00000
 800bf74:	46d9      	mov	r9, fp
 800bf76:	d15d      	bne.n	800c034 <_strtod_l+0x91c>
 800bf78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bf7c:	f1b8 0f00 	cmp.w	r8, #0
 800bf80:	d02a      	beq.n	800bfd8 <_strtod_l+0x8c0>
 800bf82:	4aab      	ldr	r2, [pc, #684]	@ (800c230 <_strtod_l+0xb18>)
 800bf84:	4293      	cmp	r3, r2
 800bf86:	d12a      	bne.n	800bfde <_strtod_l+0x8c6>
 800bf88:	9b06      	ldr	r3, [sp, #24]
 800bf8a:	4652      	mov	r2, sl
 800bf8c:	b1fb      	cbz	r3, 800bfce <_strtod_l+0x8b6>
 800bf8e:	4ba9      	ldr	r3, [pc, #676]	@ (800c234 <_strtod_l+0xb1c>)
 800bf90:	ea0b 0303 	and.w	r3, fp, r3
 800bf94:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bf98:	f04f 31ff 	mov.w	r1, #4294967295
 800bf9c:	d81a      	bhi.n	800bfd4 <_strtod_l+0x8bc>
 800bf9e:	0d1b      	lsrs	r3, r3, #20
 800bfa0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bfa4:	fa01 f303 	lsl.w	r3, r1, r3
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d118      	bne.n	800bfde <_strtod_l+0x8c6>
 800bfac:	4ba2      	ldr	r3, [pc, #648]	@ (800c238 <_strtod_l+0xb20>)
 800bfae:	4599      	cmp	r9, r3
 800bfb0:	d102      	bne.n	800bfb8 <_strtod_l+0x8a0>
 800bfb2:	3201      	adds	r2, #1
 800bfb4:	f43f adc0 	beq.w	800bb38 <_strtod_l+0x420>
 800bfb8:	4b9e      	ldr	r3, [pc, #632]	@ (800c234 <_strtod_l+0xb1c>)
 800bfba:	ea09 0303 	and.w	r3, r9, r3
 800bfbe:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800bfc2:	f04f 0a00 	mov.w	sl, #0
 800bfc6:	9b06      	ldr	r3, [sp, #24]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d1b0      	bne.n	800bf2e <_strtod_l+0x816>
 800bfcc:	e5bf      	b.n	800bb4e <_strtod_l+0x436>
 800bfce:	f04f 33ff 	mov.w	r3, #4294967295
 800bfd2:	e7e9      	b.n	800bfa8 <_strtod_l+0x890>
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	e7e7      	b.n	800bfa8 <_strtod_l+0x890>
 800bfd8:	ea53 030a 	orrs.w	r3, r3, sl
 800bfdc:	d099      	beq.n	800bf12 <_strtod_l+0x7fa>
 800bfde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfe0:	b1c3      	cbz	r3, 800c014 <_strtod_l+0x8fc>
 800bfe2:	ea13 0f09 	tst.w	r3, r9
 800bfe6:	d0ee      	beq.n	800bfc6 <_strtod_l+0x8ae>
 800bfe8:	9a06      	ldr	r2, [sp, #24]
 800bfea:	4650      	mov	r0, sl
 800bfec:	4659      	mov	r1, fp
 800bfee:	f1b8 0f00 	cmp.w	r8, #0
 800bff2:	d013      	beq.n	800c01c <_strtod_l+0x904>
 800bff4:	f7ff fb75 	bl	800b6e2 <sulp>
 800bff8:	ee39 7b00 	vadd.f64	d7, d9, d0
 800bffc:	ec5b ab17 	vmov	sl, fp, d7
 800c000:	e7e1      	b.n	800bfc6 <_strtod_l+0x8ae>
 800c002:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c006:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c00a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c00e:	f04f 3aff 	mov.w	sl, #4294967295
 800c012:	e7d8      	b.n	800bfc6 <_strtod_l+0x8ae>
 800c014:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c016:	ea13 0f0a 	tst.w	r3, sl
 800c01a:	e7e4      	b.n	800bfe6 <_strtod_l+0x8ce>
 800c01c:	f7ff fb61 	bl	800b6e2 <sulp>
 800c020:	ee39 0b40 	vsub.f64	d0, d9, d0
 800c024:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800c028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c02c:	ec5b ab10 	vmov	sl, fp, d0
 800c030:	d1c9      	bne.n	800bfc6 <_strtod_l+0x8ae>
 800c032:	e615      	b.n	800bc60 <_strtod_l+0x548>
 800c034:	4629      	mov	r1, r5
 800c036:	4620      	mov	r0, r4
 800c038:	f7ff fae0 	bl	800b5fc <__ratio>
 800c03c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800c040:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c048:	d85d      	bhi.n	800c106 <_strtod_l+0x9ee>
 800c04a:	f1b8 0f00 	cmp.w	r8, #0
 800c04e:	d164      	bne.n	800c11a <_strtod_l+0xa02>
 800c050:	f1ba 0f00 	cmp.w	sl, #0
 800c054:	d14b      	bne.n	800c0ee <_strtod_l+0x9d6>
 800c056:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c05a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d160      	bne.n	800c124 <_strtod_l+0xa0c>
 800c062:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800c066:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800c06a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c06e:	d401      	bmi.n	800c074 <_strtod_l+0x95c>
 800c070:	ee20 8b08 	vmul.f64	d8, d0, d8
 800c074:	eeb1 ab48 	vneg.f64	d10, d8
 800c078:	486e      	ldr	r0, [pc, #440]	@ (800c234 <_strtod_l+0xb1c>)
 800c07a:	4970      	ldr	r1, [pc, #448]	@ (800c23c <_strtod_l+0xb24>)
 800c07c:	ea09 0700 	and.w	r7, r9, r0
 800c080:	428f      	cmp	r7, r1
 800c082:	ec53 2b1a 	vmov	r2, r3, d10
 800c086:	d17d      	bne.n	800c184 <_strtod_l+0xa6c>
 800c088:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800c08c:	ec4b ab1c 	vmov	d12, sl, fp
 800c090:	eeb0 0b4c 	vmov.f64	d0, d12
 800c094:	f7ff f9ea 	bl	800b46c <__ulp>
 800c098:	4866      	ldr	r0, [pc, #408]	@ (800c234 <_strtod_l+0xb1c>)
 800c09a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800c09e:	ee1c 3a90 	vmov	r3, s25
 800c0a2:	4a67      	ldr	r2, [pc, #412]	@ (800c240 <_strtod_l+0xb28>)
 800c0a4:	ea03 0100 	and.w	r1, r3, r0
 800c0a8:	4291      	cmp	r1, r2
 800c0aa:	ec5b ab1c 	vmov	sl, fp, d12
 800c0ae:	d93c      	bls.n	800c12a <_strtod_l+0xa12>
 800c0b0:	ee19 2a90 	vmov	r2, s19
 800c0b4:	4b60      	ldr	r3, [pc, #384]	@ (800c238 <_strtod_l+0xb20>)
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	d104      	bne.n	800c0c4 <_strtod_l+0x9ac>
 800c0ba:	ee19 3a10 	vmov	r3, s18
 800c0be:	3301      	adds	r3, #1
 800c0c0:	f43f ad3a 	beq.w	800bb38 <_strtod_l+0x420>
 800c0c4:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800c238 <_strtod_l+0xb20>
 800c0c8:	f04f 3aff 	mov.w	sl, #4294967295
 800c0cc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c0ce:	9805      	ldr	r0, [sp, #20]
 800c0d0:	f7fe fe98 	bl	800ae04 <_Bfree>
 800c0d4:	9805      	ldr	r0, [sp, #20]
 800c0d6:	4631      	mov	r1, r6
 800c0d8:	f7fe fe94 	bl	800ae04 <_Bfree>
 800c0dc:	9805      	ldr	r0, [sp, #20]
 800c0de:	4629      	mov	r1, r5
 800c0e0:	f7fe fe90 	bl	800ae04 <_Bfree>
 800c0e4:	9805      	ldr	r0, [sp, #20]
 800c0e6:	4621      	mov	r1, r4
 800c0e8:	f7fe fe8c 	bl	800ae04 <_Bfree>
 800c0ec:	e625      	b.n	800bd3a <_strtod_l+0x622>
 800c0ee:	f1ba 0f01 	cmp.w	sl, #1
 800c0f2:	d103      	bne.n	800c0fc <_strtod_l+0x9e4>
 800c0f4:	f1bb 0f00 	cmp.w	fp, #0
 800c0f8:	f43f adb2 	beq.w	800bc60 <_strtod_l+0x548>
 800c0fc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800c100:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800c104:	e7b8      	b.n	800c078 <_strtod_l+0x960>
 800c106:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800c10a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800c10e:	f1b8 0f00 	cmp.w	r8, #0
 800c112:	d0af      	beq.n	800c074 <_strtod_l+0x95c>
 800c114:	eeb0 ab48 	vmov.f64	d10, d8
 800c118:	e7ae      	b.n	800c078 <_strtod_l+0x960>
 800c11a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800c11e:	eeb0 8b4a 	vmov.f64	d8, d10
 800c122:	e7a9      	b.n	800c078 <_strtod_l+0x960>
 800c124:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800c128:	e7a6      	b.n	800c078 <_strtod_l+0x960>
 800c12a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c12e:	9b06      	ldr	r3, [sp, #24]
 800c130:	46d9      	mov	r9, fp
 800c132:	2b00      	cmp	r3, #0
 800c134:	d1ca      	bne.n	800c0cc <_strtod_l+0x9b4>
 800c136:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c13a:	0d1b      	lsrs	r3, r3, #20
 800c13c:	051b      	lsls	r3, r3, #20
 800c13e:	429f      	cmp	r7, r3
 800c140:	d1c4      	bne.n	800c0cc <_strtod_l+0x9b4>
 800c142:	ec51 0b18 	vmov	r0, r1, d8
 800c146:	f7f4 faf7 	bl	8000738 <__aeabi_d2lz>
 800c14a:	f7f4 faaf 	bl	80006ac <__aeabi_l2d>
 800c14e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800c152:	ec41 0b17 	vmov	d7, r0, r1
 800c156:	ea49 090a 	orr.w	r9, r9, sl
 800c15a:	ea59 0908 	orrs.w	r9, r9, r8
 800c15e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800c162:	d03c      	beq.n	800c1de <_strtod_l+0xac6>
 800c164:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800c218 <_strtod_l+0xb00>
 800c168:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c16c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c170:	f53f aced 	bmi.w	800bb4e <_strtod_l+0x436>
 800c174:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800c220 <_strtod_l+0xb08>
 800c178:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c17c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c180:	dda4      	ble.n	800c0cc <_strtod_l+0x9b4>
 800c182:	e4e4      	b.n	800bb4e <_strtod_l+0x436>
 800c184:	9906      	ldr	r1, [sp, #24]
 800c186:	b1e1      	cbz	r1, 800c1c2 <_strtod_l+0xaaa>
 800c188:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800c18c:	d819      	bhi.n	800c1c2 <_strtod_l+0xaaa>
 800c18e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800c192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c196:	d811      	bhi.n	800c1bc <_strtod_l+0xaa4>
 800c198:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800c19c:	ee18 3a10 	vmov	r3, s16
 800c1a0:	2b01      	cmp	r3, #1
 800c1a2:	bf38      	it	cc
 800c1a4:	2301      	movcc	r3, #1
 800c1a6:	ee08 3a10 	vmov	s16, r3
 800c1aa:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800c1ae:	f1b8 0f00 	cmp.w	r8, #0
 800c1b2:	d111      	bne.n	800c1d8 <_strtod_l+0xac0>
 800c1b4:	eeb1 7b48 	vneg.f64	d7, d8
 800c1b8:	ec53 2b17 	vmov	r2, r3, d7
 800c1bc:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800c1c0:	1bcb      	subs	r3, r1, r7
 800c1c2:	eeb0 0b49 	vmov.f64	d0, d9
 800c1c6:	ec43 2b1a 	vmov	d10, r2, r3
 800c1ca:	f7ff f94f 	bl	800b46c <__ulp>
 800c1ce:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800c1d2:	ec5b ab19 	vmov	sl, fp, d9
 800c1d6:	e7aa      	b.n	800c12e <_strtod_l+0xa16>
 800c1d8:	eeb0 7b48 	vmov.f64	d7, d8
 800c1dc:	e7ec      	b.n	800c1b8 <_strtod_l+0xaa0>
 800c1de:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800c228 <_strtod_l+0xb10>
 800c1e2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c1e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1ea:	f57f af6f 	bpl.w	800c0cc <_strtod_l+0x9b4>
 800c1ee:	e4ae      	b.n	800bb4e <_strtod_l+0x436>
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	9308      	str	r3, [sp, #32]
 800c1f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c1f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c1f8:	6013      	str	r3, [r2, #0]
 800c1fa:	f7ff bacc 	b.w	800b796 <_strtod_l+0x7e>
 800c1fe:	2a65      	cmp	r2, #101	@ 0x65
 800c200:	f43f abbc 	beq.w	800b97c <_strtod_l+0x264>
 800c204:	2a45      	cmp	r2, #69	@ 0x45
 800c206:	f43f abb9 	beq.w	800b97c <_strtod_l+0x264>
 800c20a:	2301      	movs	r3, #1
 800c20c:	9306      	str	r3, [sp, #24]
 800c20e:	f7ff bbf0 	b.w	800b9f2 <_strtod_l+0x2da>
 800c212:	bf00      	nop
 800c214:	f3af 8000 	nop.w
 800c218:	94a03595 	.word	0x94a03595
 800c21c:	3fdfffff 	.word	0x3fdfffff
 800c220:	35afe535 	.word	0x35afe535
 800c224:	3fe00000 	.word	0x3fe00000
 800c228:	94a03595 	.word	0x94a03595
 800c22c:	3fcfffff 	.word	0x3fcfffff
 800c230:	000fffff 	.word	0x000fffff
 800c234:	7ff00000 	.word	0x7ff00000
 800c238:	7fefffff 	.word	0x7fefffff
 800c23c:	7fe00000 	.word	0x7fe00000
 800c240:	7c9fffff 	.word	0x7c9fffff

0800c244 <_strtod_r>:
 800c244:	4b01      	ldr	r3, [pc, #4]	@ (800c24c <_strtod_r+0x8>)
 800c246:	f7ff ba67 	b.w	800b718 <_strtod_l>
 800c24a:	bf00      	nop
 800c24c:	2400006c 	.word	0x2400006c

0800c250 <_strtol_l.constprop.0>:
 800c250:	2b24      	cmp	r3, #36	@ 0x24
 800c252:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c256:	4686      	mov	lr, r0
 800c258:	4690      	mov	r8, r2
 800c25a:	d801      	bhi.n	800c260 <_strtol_l.constprop.0+0x10>
 800c25c:	2b01      	cmp	r3, #1
 800c25e:	d106      	bne.n	800c26e <_strtol_l.constprop.0+0x1e>
 800c260:	f7fd fe7e 	bl	8009f60 <__errno>
 800c264:	2316      	movs	r3, #22
 800c266:	6003      	str	r3, [r0, #0]
 800c268:	2000      	movs	r0, #0
 800c26a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c26e:	4834      	ldr	r0, [pc, #208]	@ (800c340 <_strtol_l.constprop.0+0xf0>)
 800c270:	460d      	mov	r5, r1
 800c272:	462a      	mov	r2, r5
 800c274:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c278:	5d06      	ldrb	r6, [r0, r4]
 800c27a:	f016 0608 	ands.w	r6, r6, #8
 800c27e:	d1f8      	bne.n	800c272 <_strtol_l.constprop.0+0x22>
 800c280:	2c2d      	cmp	r4, #45	@ 0x2d
 800c282:	d12d      	bne.n	800c2e0 <_strtol_l.constprop.0+0x90>
 800c284:	782c      	ldrb	r4, [r5, #0]
 800c286:	2601      	movs	r6, #1
 800c288:	1c95      	adds	r5, r2, #2
 800c28a:	f033 0210 	bics.w	r2, r3, #16
 800c28e:	d109      	bne.n	800c2a4 <_strtol_l.constprop.0+0x54>
 800c290:	2c30      	cmp	r4, #48	@ 0x30
 800c292:	d12a      	bne.n	800c2ea <_strtol_l.constprop.0+0x9a>
 800c294:	782a      	ldrb	r2, [r5, #0]
 800c296:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c29a:	2a58      	cmp	r2, #88	@ 0x58
 800c29c:	d125      	bne.n	800c2ea <_strtol_l.constprop.0+0x9a>
 800c29e:	786c      	ldrb	r4, [r5, #1]
 800c2a0:	2310      	movs	r3, #16
 800c2a2:	3502      	adds	r5, #2
 800c2a4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c2a8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	fbbc f9f3 	udiv	r9, ip, r3
 800c2b2:	4610      	mov	r0, r2
 800c2b4:	fb03 ca19 	mls	sl, r3, r9, ip
 800c2b8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c2bc:	2f09      	cmp	r7, #9
 800c2be:	d81b      	bhi.n	800c2f8 <_strtol_l.constprop.0+0xa8>
 800c2c0:	463c      	mov	r4, r7
 800c2c2:	42a3      	cmp	r3, r4
 800c2c4:	dd27      	ble.n	800c316 <_strtol_l.constprop.0+0xc6>
 800c2c6:	1c57      	adds	r7, r2, #1
 800c2c8:	d007      	beq.n	800c2da <_strtol_l.constprop.0+0x8a>
 800c2ca:	4581      	cmp	r9, r0
 800c2cc:	d320      	bcc.n	800c310 <_strtol_l.constprop.0+0xc0>
 800c2ce:	d101      	bne.n	800c2d4 <_strtol_l.constprop.0+0x84>
 800c2d0:	45a2      	cmp	sl, r4
 800c2d2:	db1d      	blt.n	800c310 <_strtol_l.constprop.0+0xc0>
 800c2d4:	fb00 4003 	mla	r0, r0, r3, r4
 800c2d8:	2201      	movs	r2, #1
 800c2da:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c2de:	e7eb      	b.n	800c2b8 <_strtol_l.constprop.0+0x68>
 800c2e0:	2c2b      	cmp	r4, #43	@ 0x2b
 800c2e2:	bf04      	itt	eq
 800c2e4:	782c      	ldrbeq	r4, [r5, #0]
 800c2e6:	1c95      	addeq	r5, r2, #2
 800c2e8:	e7cf      	b.n	800c28a <_strtol_l.constprop.0+0x3a>
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d1da      	bne.n	800c2a4 <_strtol_l.constprop.0+0x54>
 800c2ee:	2c30      	cmp	r4, #48	@ 0x30
 800c2f0:	bf0c      	ite	eq
 800c2f2:	2308      	moveq	r3, #8
 800c2f4:	230a      	movne	r3, #10
 800c2f6:	e7d5      	b.n	800c2a4 <_strtol_l.constprop.0+0x54>
 800c2f8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c2fc:	2f19      	cmp	r7, #25
 800c2fe:	d801      	bhi.n	800c304 <_strtol_l.constprop.0+0xb4>
 800c300:	3c37      	subs	r4, #55	@ 0x37
 800c302:	e7de      	b.n	800c2c2 <_strtol_l.constprop.0+0x72>
 800c304:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c308:	2f19      	cmp	r7, #25
 800c30a:	d804      	bhi.n	800c316 <_strtol_l.constprop.0+0xc6>
 800c30c:	3c57      	subs	r4, #87	@ 0x57
 800c30e:	e7d8      	b.n	800c2c2 <_strtol_l.constprop.0+0x72>
 800c310:	f04f 32ff 	mov.w	r2, #4294967295
 800c314:	e7e1      	b.n	800c2da <_strtol_l.constprop.0+0x8a>
 800c316:	1c53      	adds	r3, r2, #1
 800c318:	d108      	bne.n	800c32c <_strtol_l.constprop.0+0xdc>
 800c31a:	2322      	movs	r3, #34	@ 0x22
 800c31c:	f8ce 3000 	str.w	r3, [lr]
 800c320:	4660      	mov	r0, ip
 800c322:	f1b8 0f00 	cmp.w	r8, #0
 800c326:	d0a0      	beq.n	800c26a <_strtol_l.constprop.0+0x1a>
 800c328:	1e69      	subs	r1, r5, #1
 800c32a:	e006      	b.n	800c33a <_strtol_l.constprop.0+0xea>
 800c32c:	b106      	cbz	r6, 800c330 <_strtol_l.constprop.0+0xe0>
 800c32e:	4240      	negs	r0, r0
 800c330:	f1b8 0f00 	cmp.w	r8, #0
 800c334:	d099      	beq.n	800c26a <_strtol_l.constprop.0+0x1a>
 800c336:	2a00      	cmp	r2, #0
 800c338:	d1f6      	bne.n	800c328 <_strtol_l.constprop.0+0xd8>
 800c33a:	f8c8 1000 	str.w	r1, [r8]
 800c33e:	e794      	b.n	800c26a <_strtol_l.constprop.0+0x1a>
 800c340:	0800d7b1 	.word	0x0800d7b1

0800c344 <_strtol_r>:
 800c344:	f7ff bf84 	b.w	800c250 <_strtol_l.constprop.0>

0800c348 <__ssputs_r>:
 800c348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c34c:	688e      	ldr	r6, [r1, #8]
 800c34e:	461f      	mov	r7, r3
 800c350:	42be      	cmp	r6, r7
 800c352:	680b      	ldr	r3, [r1, #0]
 800c354:	4682      	mov	sl, r0
 800c356:	460c      	mov	r4, r1
 800c358:	4690      	mov	r8, r2
 800c35a:	d82d      	bhi.n	800c3b8 <__ssputs_r+0x70>
 800c35c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c360:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c364:	d026      	beq.n	800c3b4 <__ssputs_r+0x6c>
 800c366:	6965      	ldr	r5, [r4, #20]
 800c368:	6909      	ldr	r1, [r1, #16]
 800c36a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c36e:	eba3 0901 	sub.w	r9, r3, r1
 800c372:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c376:	1c7b      	adds	r3, r7, #1
 800c378:	444b      	add	r3, r9
 800c37a:	106d      	asrs	r5, r5, #1
 800c37c:	429d      	cmp	r5, r3
 800c37e:	bf38      	it	cc
 800c380:	461d      	movcc	r5, r3
 800c382:	0553      	lsls	r3, r2, #21
 800c384:	d527      	bpl.n	800c3d6 <__ssputs_r+0x8e>
 800c386:	4629      	mov	r1, r5
 800c388:	f7fe fc70 	bl	800ac6c <_malloc_r>
 800c38c:	4606      	mov	r6, r0
 800c38e:	b360      	cbz	r0, 800c3ea <__ssputs_r+0xa2>
 800c390:	6921      	ldr	r1, [r4, #16]
 800c392:	464a      	mov	r2, r9
 800c394:	f000 fa18 	bl	800c7c8 <memcpy>
 800c398:	89a3      	ldrh	r3, [r4, #12]
 800c39a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c39e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3a2:	81a3      	strh	r3, [r4, #12]
 800c3a4:	6126      	str	r6, [r4, #16]
 800c3a6:	6165      	str	r5, [r4, #20]
 800c3a8:	444e      	add	r6, r9
 800c3aa:	eba5 0509 	sub.w	r5, r5, r9
 800c3ae:	6026      	str	r6, [r4, #0]
 800c3b0:	60a5      	str	r5, [r4, #8]
 800c3b2:	463e      	mov	r6, r7
 800c3b4:	42be      	cmp	r6, r7
 800c3b6:	d900      	bls.n	800c3ba <__ssputs_r+0x72>
 800c3b8:	463e      	mov	r6, r7
 800c3ba:	6820      	ldr	r0, [r4, #0]
 800c3bc:	4632      	mov	r2, r6
 800c3be:	4641      	mov	r1, r8
 800c3c0:	f000 f9c6 	bl	800c750 <memmove>
 800c3c4:	68a3      	ldr	r3, [r4, #8]
 800c3c6:	1b9b      	subs	r3, r3, r6
 800c3c8:	60a3      	str	r3, [r4, #8]
 800c3ca:	6823      	ldr	r3, [r4, #0]
 800c3cc:	4433      	add	r3, r6
 800c3ce:	6023      	str	r3, [r4, #0]
 800c3d0:	2000      	movs	r0, #0
 800c3d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3d6:	462a      	mov	r2, r5
 800c3d8:	f000 fd8b 	bl	800cef2 <_realloc_r>
 800c3dc:	4606      	mov	r6, r0
 800c3de:	2800      	cmp	r0, #0
 800c3e0:	d1e0      	bne.n	800c3a4 <__ssputs_r+0x5c>
 800c3e2:	6921      	ldr	r1, [r4, #16]
 800c3e4:	4650      	mov	r0, sl
 800c3e6:	f7fe fbcd 	bl	800ab84 <_free_r>
 800c3ea:	230c      	movs	r3, #12
 800c3ec:	f8ca 3000 	str.w	r3, [sl]
 800c3f0:	89a3      	ldrh	r3, [r4, #12]
 800c3f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3f6:	81a3      	strh	r3, [r4, #12]
 800c3f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3fc:	e7e9      	b.n	800c3d2 <__ssputs_r+0x8a>
	...

0800c400 <_svfiprintf_r>:
 800c400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c404:	4698      	mov	r8, r3
 800c406:	898b      	ldrh	r3, [r1, #12]
 800c408:	061b      	lsls	r3, r3, #24
 800c40a:	b09d      	sub	sp, #116	@ 0x74
 800c40c:	4607      	mov	r7, r0
 800c40e:	460d      	mov	r5, r1
 800c410:	4614      	mov	r4, r2
 800c412:	d510      	bpl.n	800c436 <_svfiprintf_r+0x36>
 800c414:	690b      	ldr	r3, [r1, #16]
 800c416:	b973      	cbnz	r3, 800c436 <_svfiprintf_r+0x36>
 800c418:	2140      	movs	r1, #64	@ 0x40
 800c41a:	f7fe fc27 	bl	800ac6c <_malloc_r>
 800c41e:	6028      	str	r0, [r5, #0]
 800c420:	6128      	str	r0, [r5, #16]
 800c422:	b930      	cbnz	r0, 800c432 <_svfiprintf_r+0x32>
 800c424:	230c      	movs	r3, #12
 800c426:	603b      	str	r3, [r7, #0]
 800c428:	f04f 30ff 	mov.w	r0, #4294967295
 800c42c:	b01d      	add	sp, #116	@ 0x74
 800c42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c432:	2340      	movs	r3, #64	@ 0x40
 800c434:	616b      	str	r3, [r5, #20]
 800c436:	2300      	movs	r3, #0
 800c438:	9309      	str	r3, [sp, #36]	@ 0x24
 800c43a:	2320      	movs	r3, #32
 800c43c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c440:	f8cd 800c 	str.w	r8, [sp, #12]
 800c444:	2330      	movs	r3, #48	@ 0x30
 800c446:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c5e4 <_svfiprintf_r+0x1e4>
 800c44a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c44e:	f04f 0901 	mov.w	r9, #1
 800c452:	4623      	mov	r3, r4
 800c454:	469a      	mov	sl, r3
 800c456:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c45a:	b10a      	cbz	r2, 800c460 <_svfiprintf_r+0x60>
 800c45c:	2a25      	cmp	r2, #37	@ 0x25
 800c45e:	d1f9      	bne.n	800c454 <_svfiprintf_r+0x54>
 800c460:	ebba 0b04 	subs.w	fp, sl, r4
 800c464:	d00b      	beq.n	800c47e <_svfiprintf_r+0x7e>
 800c466:	465b      	mov	r3, fp
 800c468:	4622      	mov	r2, r4
 800c46a:	4629      	mov	r1, r5
 800c46c:	4638      	mov	r0, r7
 800c46e:	f7ff ff6b 	bl	800c348 <__ssputs_r>
 800c472:	3001      	adds	r0, #1
 800c474:	f000 80a7 	beq.w	800c5c6 <_svfiprintf_r+0x1c6>
 800c478:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c47a:	445a      	add	r2, fp
 800c47c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c47e:	f89a 3000 	ldrb.w	r3, [sl]
 800c482:	2b00      	cmp	r3, #0
 800c484:	f000 809f 	beq.w	800c5c6 <_svfiprintf_r+0x1c6>
 800c488:	2300      	movs	r3, #0
 800c48a:	f04f 32ff 	mov.w	r2, #4294967295
 800c48e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c492:	f10a 0a01 	add.w	sl, sl, #1
 800c496:	9304      	str	r3, [sp, #16]
 800c498:	9307      	str	r3, [sp, #28]
 800c49a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c49e:	931a      	str	r3, [sp, #104]	@ 0x68
 800c4a0:	4654      	mov	r4, sl
 800c4a2:	2205      	movs	r2, #5
 800c4a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4a8:	484e      	ldr	r0, [pc, #312]	@ (800c5e4 <_svfiprintf_r+0x1e4>)
 800c4aa:	f7f3 ff19 	bl	80002e0 <memchr>
 800c4ae:	9a04      	ldr	r2, [sp, #16]
 800c4b0:	b9d8      	cbnz	r0, 800c4ea <_svfiprintf_r+0xea>
 800c4b2:	06d0      	lsls	r0, r2, #27
 800c4b4:	bf44      	itt	mi
 800c4b6:	2320      	movmi	r3, #32
 800c4b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c4bc:	0711      	lsls	r1, r2, #28
 800c4be:	bf44      	itt	mi
 800c4c0:	232b      	movmi	r3, #43	@ 0x2b
 800c4c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c4c6:	f89a 3000 	ldrb.w	r3, [sl]
 800c4ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800c4cc:	d015      	beq.n	800c4fa <_svfiprintf_r+0xfa>
 800c4ce:	9a07      	ldr	r2, [sp, #28]
 800c4d0:	4654      	mov	r4, sl
 800c4d2:	2000      	movs	r0, #0
 800c4d4:	f04f 0c0a 	mov.w	ip, #10
 800c4d8:	4621      	mov	r1, r4
 800c4da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4de:	3b30      	subs	r3, #48	@ 0x30
 800c4e0:	2b09      	cmp	r3, #9
 800c4e2:	d94b      	bls.n	800c57c <_svfiprintf_r+0x17c>
 800c4e4:	b1b0      	cbz	r0, 800c514 <_svfiprintf_r+0x114>
 800c4e6:	9207      	str	r2, [sp, #28]
 800c4e8:	e014      	b.n	800c514 <_svfiprintf_r+0x114>
 800c4ea:	eba0 0308 	sub.w	r3, r0, r8
 800c4ee:	fa09 f303 	lsl.w	r3, r9, r3
 800c4f2:	4313      	orrs	r3, r2
 800c4f4:	9304      	str	r3, [sp, #16]
 800c4f6:	46a2      	mov	sl, r4
 800c4f8:	e7d2      	b.n	800c4a0 <_svfiprintf_r+0xa0>
 800c4fa:	9b03      	ldr	r3, [sp, #12]
 800c4fc:	1d19      	adds	r1, r3, #4
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	9103      	str	r1, [sp, #12]
 800c502:	2b00      	cmp	r3, #0
 800c504:	bfbb      	ittet	lt
 800c506:	425b      	neglt	r3, r3
 800c508:	f042 0202 	orrlt.w	r2, r2, #2
 800c50c:	9307      	strge	r3, [sp, #28]
 800c50e:	9307      	strlt	r3, [sp, #28]
 800c510:	bfb8      	it	lt
 800c512:	9204      	strlt	r2, [sp, #16]
 800c514:	7823      	ldrb	r3, [r4, #0]
 800c516:	2b2e      	cmp	r3, #46	@ 0x2e
 800c518:	d10a      	bne.n	800c530 <_svfiprintf_r+0x130>
 800c51a:	7863      	ldrb	r3, [r4, #1]
 800c51c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c51e:	d132      	bne.n	800c586 <_svfiprintf_r+0x186>
 800c520:	9b03      	ldr	r3, [sp, #12]
 800c522:	1d1a      	adds	r2, r3, #4
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	9203      	str	r2, [sp, #12]
 800c528:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c52c:	3402      	adds	r4, #2
 800c52e:	9305      	str	r3, [sp, #20]
 800c530:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c5f4 <_svfiprintf_r+0x1f4>
 800c534:	7821      	ldrb	r1, [r4, #0]
 800c536:	2203      	movs	r2, #3
 800c538:	4650      	mov	r0, sl
 800c53a:	f7f3 fed1 	bl	80002e0 <memchr>
 800c53e:	b138      	cbz	r0, 800c550 <_svfiprintf_r+0x150>
 800c540:	9b04      	ldr	r3, [sp, #16]
 800c542:	eba0 000a 	sub.w	r0, r0, sl
 800c546:	2240      	movs	r2, #64	@ 0x40
 800c548:	4082      	lsls	r2, r0
 800c54a:	4313      	orrs	r3, r2
 800c54c:	3401      	adds	r4, #1
 800c54e:	9304      	str	r3, [sp, #16]
 800c550:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c554:	4824      	ldr	r0, [pc, #144]	@ (800c5e8 <_svfiprintf_r+0x1e8>)
 800c556:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c55a:	2206      	movs	r2, #6
 800c55c:	f7f3 fec0 	bl	80002e0 <memchr>
 800c560:	2800      	cmp	r0, #0
 800c562:	d036      	beq.n	800c5d2 <_svfiprintf_r+0x1d2>
 800c564:	4b21      	ldr	r3, [pc, #132]	@ (800c5ec <_svfiprintf_r+0x1ec>)
 800c566:	bb1b      	cbnz	r3, 800c5b0 <_svfiprintf_r+0x1b0>
 800c568:	9b03      	ldr	r3, [sp, #12]
 800c56a:	3307      	adds	r3, #7
 800c56c:	f023 0307 	bic.w	r3, r3, #7
 800c570:	3308      	adds	r3, #8
 800c572:	9303      	str	r3, [sp, #12]
 800c574:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c576:	4433      	add	r3, r6
 800c578:	9309      	str	r3, [sp, #36]	@ 0x24
 800c57a:	e76a      	b.n	800c452 <_svfiprintf_r+0x52>
 800c57c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c580:	460c      	mov	r4, r1
 800c582:	2001      	movs	r0, #1
 800c584:	e7a8      	b.n	800c4d8 <_svfiprintf_r+0xd8>
 800c586:	2300      	movs	r3, #0
 800c588:	3401      	adds	r4, #1
 800c58a:	9305      	str	r3, [sp, #20]
 800c58c:	4619      	mov	r1, r3
 800c58e:	f04f 0c0a 	mov.w	ip, #10
 800c592:	4620      	mov	r0, r4
 800c594:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c598:	3a30      	subs	r2, #48	@ 0x30
 800c59a:	2a09      	cmp	r2, #9
 800c59c:	d903      	bls.n	800c5a6 <_svfiprintf_r+0x1a6>
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d0c6      	beq.n	800c530 <_svfiprintf_r+0x130>
 800c5a2:	9105      	str	r1, [sp, #20]
 800c5a4:	e7c4      	b.n	800c530 <_svfiprintf_r+0x130>
 800c5a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5aa:	4604      	mov	r4, r0
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	e7f0      	b.n	800c592 <_svfiprintf_r+0x192>
 800c5b0:	ab03      	add	r3, sp, #12
 800c5b2:	9300      	str	r3, [sp, #0]
 800c5b4:	462a      	mov	r2, r5
 800c5b6:	4b0e      	ldr	r3, [pc, #56]	@ (800c5f0 <_svfiprintf_r+0x1f0>)
 800c5b8:	a904      	add	r1, sp, #16
 800c5ba:	4638      	mov	r0, r7
 800c5bc:	f7fc fda4 	bl	8009108 <_printf_float>
 800c5c0:	1c42      	adds	r2, r0, #1
 800c5c2:	4606      	mov	r6, r0
 800c5c4:	d1d6      	bne.n	800c574 <_svfiprintf_r+0x174>
 800c5c6:	89ab      	ldrh	r3, [r5, #12]
 800c5c8:	065b      	lsls	r3, r3, #25
 800c5ca:	f53f af2d 	bmi.w	800c428 <_svfiprintf_r+0x28>
 800c5ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c5d0:	e72c      	b.n	800c42c <_svfiprintf_r+0x2c>
 800c5d2:	ab03      	add	r3, sp, #12
 800c5d4:	9300      	str	r3, [sp, #0]
 800c5d6:	462a      	mov	r2, r5
 800c5d8:	4b05      	ldr	r3, [pc, #20]	@ (800c5f0 <_svfiprintf_r+0x1f0>)
 800c5da:	a904      	add	r1, sp, #16
 800c5dc:	4638      	mov	r0, r7
 800c5de:	f7fd f81b 	bl	8009618 <_printf_i>
 800c5e2:	e7ed      	b.n	800c5c0 <_svfiprintf_r+0x1c0>
 800c5e4:	0800d8b1 	.word	0x0800d8b1
 800c5e8:	0800d8bb 	.word	0x0800d8bb
 800c5ec:	08009109 	.word	0x08009109
 800c5f0:	0800c349 	.word	0x0800c349
 800c5f4:	0800d8b7 	.word	0x0800d8b7

0800c5f8 <__sflush_r>:
 800c5f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c600:	0716      	lsls	r6, r2, #28
 800c602:	4605      	mov	r5, r0
 800c604:	460c      	mov	r4, r1
 800c606:	d454      	bmi.n	800c6b2 <__sflush_r+0xba>
 800c608:	684b      	ldr	r3, [r1, #4]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	dc02      	bgt.n	800c614 <__sflush_r+0x1c>
 800c60e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c610:	2b00      	cmp	r3, #0
 800c612:	dd48      	ble.n	800c6a6 <__sflush_r+0xae>
 800c614:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c616:	2e00      	cmp	r6, #0
 800c618:	d045      	beq.n	800c6a6 <__sflush_r+0xae>
 800c61a:	2300      	movs	r3, #0
 800c61c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c620:	682f      	ldr	r7, [r5, #0]
 800c622:	6a21      	ldr	r1, [r4, #32]
 800c624:	602b      	str	r3, [r5, #0]
 800c626:	d030      	beq.n	800c68a <__sflush_r+0x92>
 800c628:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c62a:	89a3      	ldrh	r3, [r4, #12]
 800c62c:	0759      	lsls	r1, r3, #29
 800c62e:	d505      	bpl.n	800c63c <__sflush_r+0x44>
 800c630:	6863      	ldr	r3, [r4, #4]
 800c632:	1ad2      	subs	r2, r2, r3
 800c634:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c636:	b10b      	cbz	r3, 800c63c <__sflush_r+0x44>
 800c638:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c63a:	1ad2      	subs	r2, r2, r3
 800c63c:	2300      	movs	r3, #0
 800c63e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c640:	6a21      	ldr	r1, [r4, #32]
 800c642:	4628      	mov	r0, r5
 800c644:	47b0      	blx	r6
 800c646:	1c43      	adds	r3, r0, #1
 800c648:	89a3      	ldrh	r3, [r4, #12]
 800c64a:	d106      	bne.n	800c65a <__sflush_r+0x62>
 800c64c:	6829      	ldr	r1, [r5, #0]
 800c64e:	291d      	cmp	r1, #29
 800c650:	d82b      	bhi.n	800c6aa <__sflush_r+0xb2>
 800c652:	4a2a      	ldr	r2, [pc, #168]	@ (800c6fc <__sflush_r+0x104>)
 800c654:	410a      	asrs	r2, r1
 800c656:	07d6      	lsls	r6, r2, #31
 800c658:	d427      	bmi.n	800c6aa <__sflush_r+0xb2>
 800c65a:	2200      	movs	r2, #0
 800c65c:	6062      	str	r2, [r4, #4]
 800c65e:	04d9      	lsls	r1, r3, #19
 800c660:	6922      	ldr	r2, [r4, #16]
 800c662:	6022      	str	r2, [r4, #0]
 800c664:	d504      	bpl.n	800c670 <__sflush_r+0x78>
 800c666:	1c42      	adds	r2, r0, #1
 800c668:	d101      	bne.n	800c66e <__sflush_r+0x76>
 800c66a:	682b      	ldr	r3, [r5, #0]
 800c66c:	b903      	cbnz	r3, 800c670 <__sflush_r+0x78>
 800c66e:	6560      	str	r0, [r4, #84]	@ 0x54
 800c670:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c672:	602f      	str	r7, [r5, #0]
 800c674:	b1b9      	cbz	r1, 800c6a6 <__sflush_r+0xae>
 800c676:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c67a:	4299      	cmp	r1, r3
 800c67c:	d002      	beq.n	800c684 <__sflush_r+0x8c>
 800c67e:	4628      	mov	r0, r5
 800c680:	f7fe fa80 	bl	800ab84 <_free_r>
 800c684:	2300      	movs	r3, #0
 800c686:	6363      	str	r3, [r4, #52]	@ 0x34
 800c688:	e00d      	b.n	800c6a6 <__sflush_r+0xae>
 800c68a:	2301      	movs	r3, #1
 800c68c:	4628      	mov	r0, r5
 800c68e:	47b0      	blx	r6
 800c690:	4602      	mov	r2, r0
 800c692:	1c50      	adds	r0, r2, #1
 800c694:	d1c9      	bne.n	800c62a <__sflush_r+0x32>
 800c696:	682b      	ldr	r3, [r5, #0]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d0c6      	beq.n	800c62a <__sflush_r+0x32>
 800c69c:	2b1d      	cmp	r3, #29
 800c69e:	d001      	beq.n	800c6a4 <__sflush_r+0xac>
 800c6a0:	2b16      	cmp	r3, #22
 800c6a2:	d11e      	bne.n	800c6e2 <__sflush_r+0xea>
 800c6a4:	602f      	str	r7, [r5, #0]
 800c6a6:	2000      	movs	r0, #0
 800c6a8:	e022      	b.n	800c6f0 <__sflush_r+0xf8>
 800c6aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c6ae:	b21b      	sxth	r3, r3
 800c6b0:	e01b      	b.n	800c6ea <__sflush_r+0xf2>
 800c6b2:	690f      	ldr	r7, [r1, #16]
 800c6b4:	2f00      	cmp	r7, #0
 800c6b6:	d0f6      	beq.n	800c6a6 <__sflush_r+0xae>
 800c6b8:	0793      	lsls	r3, r2, #30
 800c6ba:	680e      	ldr	r6, [r1, #0]
 800c6bc:	bf08      	it	eq
 800c6be:	694b      	ldreq	r3, [r1, #20]
 800c6c0:	600f      	str	r7, [r1, #0]
 800c6c2:	bf18      	it	ne
 800c6c4:	2300      	movne	r3, #0
 800c6c6:	eba6 0807 	sub.w	r8, r6, r7
 800c6ca:	608b      	str	r3, [r1, #8]
 800c6cc:	f1b8 0f00 	cmp.w	r8, #0
 800c6d0:	dde9      	ble.n	800c6a6 <__sflush_r+0xae>
 800c6d2:	6a21      	ldr	r1, [r4, #32]
 800c6d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c6d6:	4643      	mov	r3, r8
 800c6d8:	463a      	mov	r2, r7
 800c6da:	4628      	mov	r0, r5
 800c6dc:	47b0      	blx	r6
 800c6de:	2800      	cmp	r0, #0
 800c6e0:	dc08      	bgt.n	800c6f4 <__sflush_r+0xfc>
 800c6e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c6ea:	81a3      	strh	r3, [r4, #12]
 800c6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c6f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6f4:	4407      	add	r7, r0
 800c6f6:	eba8 0800 	sub.w	r8, r8, r0
 800c6fa:	e7e7      	b.n	800c6cc <__sflush_r+0xd4>
 800c6fc:	dfbffffe 	.word	0xdfbffffe

0800c700 <_fflush_r>:
 800c700:	b538      	push	{r3, r4, r5, lr}
 800c702:	690b      	ldr	r3, [r1, #16]
 800c704:	4605      	mov	r5, r0
 800c706:	460c      	mov	r4, r1
 800c708:	b913      	cbnz	r3, 800c710 <_fflush_r+0x10>
 800c70a:	2500      	movs	r5, #0
 800c70c:	4628      	mov	r0, r5
 800c70e:	bd38      	pop	{r3, r4, r5, pc}
 800c710:	b118      	cbz	r0, 800c71a <_fflush_r+0x1a>
 800c712:	6a03      	ldr	r3, [r0, #32]
 800c714:	b90b      	cbnz	r3, 800c71a <_fflush_r+0x1a>
 800c716:	f7fd fb37 	bl	8009d88 <__sinit>
 800c71a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d0f3      	beq.n	800c70a <_fflush_r+0xa>
 800c722:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c724:	07d0      	lsls	r0, r2, #31
 800c726:	d404      	bmi.n	800c732 <_fflush_r+0x32>
 800c728:	0599      	lsls	r1, r3, #22
 800c72a:	d402      	bmi.n	800c732 <_fflush_r+0x32>
 800c72c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c72e:	f7fd fc42 	bl	8009fb6 <__retarget_lock_acquire_recursive>
 800c732:	4628      	mov	r0, r5
 800c734:	4621      	mov	r1, r4
 800c736:	f7ff ff5f 	bl	800c5f8 <__sflush_r>
 800c73a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c73c:	07da      	lsls	r2, r3, #31
 800c73e:	4605      	mov	r5, r0
 800c740:	d4e4      	bmi.n	800c70c <_fflush_r+0xc>
 800c742:	89a3      	ldrh	r3, [r4, #12]
 800c744:	059b      	lsls	r3, r3, #22
 800c746:	d4e1      	bmi.n	800c70c <_fflush_r+0xc>
 800c748:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c74a:	f7fd fc35 	bl	8009fb8 <__retarget_lock_release_recursive>
 800c74e:	e7dd      	b.n	800c70c <_fflush_r+0xc>

0800c750 <memmove>:
 800c750:	4288      	cmp	r0, r1
 800c752:	b510      	push	{r4, lr}
 800c754:	eb01 0402 	add.w	r4, r1, r2
 800c758:	d902      	bls.n	800c760 <memmove+0x10>
 800c75a:	4284      	cmp	r4, r0
 800c75c:	4623      	mov	r3, r4
 800c75e:	d807      	bhi.n	800c770 <memmove+0x20>
 800c760:	1e43      	subs	r3, r0, #1
 800c762:	42a1      	cmp	r1, r4
 800c764:	d008      	beq.n	800c778 <memmove+0x28>
 800c766:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c76a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c76e:	e7f8      	b.n	800c762 <memmove+0x12>
 800c770:	4402      	add	r2, r0
 800c772:	4601      	mov	r1, r0
 800c774:	428a      	cmp	r2, r1
 800c776:	d100      	bne.n	800c77a <memmove+0x2a>
 800c778:	bd10      	pop	{r4, pc}
 800c77a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c77e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c782:	e7f7      	b.n	800c774 <memmove+0x24>

0800c784 <strncmp>:
 800c784:	b510      	push	{r4, lr}
 800c786:	b16a      	cbz	r2, 800c7a4 <strncmp+0x20>
 800c788:	3901      	subs	r1, #1
 800c78a:	1884      	adds	r4, r0, r2
 800c78c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c790:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c794:	429a      	cmp	r2, r3
 800c796:	d103      	bne.n	800c7a0 <strncmp+0x1c>
 800c798:	42a0      	cmp	r0, r4
 800c79a:	d001      	beq.n	800c7a0 <strncmp+0x1c>
 800c79c:	2a00      	cmp	r2, #0
 800c79e:	d1f5      	bne.n	800c78c <strncmp+0x8>
 800c7a0:	1ad0      	subs	r0, r2, r3
 800c7a2:	bd10      	pop	{r4, pc}
 800c7a4:	4610      	mov	r0, r2
 800c7a6:	e7fc      	b.n	800c7a2 <strncmp+0x1e>

0800c7a8 <_sbrk_r>:
 800c7a8:	b538      	push	{r3, r4, r5, lr}
 800c7aa:	4d06      	ldr	r5, [pc, #24]	@ (800c7c4 <_sbrk_r+0x1c>)
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	4604      	mov	r4, r0
 800c7b0:	4608      	mov	r0, r1
 800c7b2:	602b      	str	r3, [r5, #0]
 800c7b4:	f7f4 ff06 	bl	80015c4 <_sbrk>
 800c7b8:	1c43      	adds	r3, r0, #1
 800c7ba:	d102      	bne.n	800c7c2 <_sbrk_r+0x1a>
 800c7bc:	682b      	ldr	r3, [r5, #0]
 800c7be:	b103      	cbz	r3, 800c7c2 <_sbrk_r+0x1a>
 800c7c0:	6023      	str	r3, [r4, #0]
 800c7c2:	bd38      	pop	{r3, r4, r5, pc}
 800c7c4:	2400041c 	.word	0x2400041c

0800c7c8 <memcpy>:
 800c7c8:	440a      	add	r2, r1
 800c7ca:	4291      	cmp	r1, r2
 800c7cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800c7d0:	d100      	bne.n	800c7d4 <memcpy+0xc>
 800c7d2:	4770      	bx	lr
 800c7d4:	b510      	push	{r4, lr}
 800c7d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c7de:	4291      	cmp	r1, r2
 800c7e0:	d1f9      	bne.n	800c7d6 <memcpy+0xe>
 800c7e2:	bd10      	pop	{r4, pc}
 800c7e4:	0000      	movs	r0, r0
	...

0800c7e8 <nan>:
 800c7e8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c7f0 <nan+0x8>
 800c7ec:	4770      	bx	lr
 800c7ee:	bf00      	nop
 800c7f0:	00000000 	.word	0x00000000
 800c7f4:	7ff80000 	.word	0x7ff80000

0800c7f8 <__assert_func>:
 800c7f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c7fa:	4614      	mov	r4, r2
 800c7fc:	461a      	mov	r2, r3
 800c7fe:	4b09      	ldr	r3, [pc, #36]	@ (800c824 <__assert_func+0x2c>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	4605      	mov	r5, r0
 800c804:	68d8      	ldr	r0, [r3, #12]
 800c806:	b954      	cbnz	r4, 800c81e <__assert_func+0x26>
 800c808:	4b07      	ldr	r3, [pc, #28]	@ (800c828 <__assert_func+0x30>)
 800c80a:	461c      	mov	r4, r3
 800c80c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c810:	9100      	str	r1, [sp, #0]
 800c812:	462b      	mov	r3, r5
 800c814:	4905      	ldr	r1, [pc, #20]	@ (800c82c <__assert_func+0x34>)
 800c816:	f000 fba7 	bl	800cf68 <fiprintf>
 800c81a:	f000 fbb7 	bl	800cf8c <abort>
 800c81e:	4b04      	ldr	r3, [pc, #16]	@ (800c830 <__assert_func+0x38>)
 800c820:	e7f4      	b.n	800c80c <__assert_func+0x14>
 800c822:	bf00      	nop
 800c824:	2400001c 	.word	0x2400001c
 800c828:	0800d905 	.word	0x0800d905
 800c82c:	0800d8d7 	.word	0x0800d8d7
 800c830:	0800d8ca 	.word	0x0800d8ca

0800c834 <_calloc_r>:
 800c834:	b570      	push	{r4, r5, r6, lr}
 800c836:	fba1 5402 	umull	r5, r4, r1, r2
 800c83a:	b93c      	cbnz	r4, 800c84c <_calloc_r+0x18>
 800c83c:	4629      	mov	r1, r5
 800c83e:	f7fe fa15 	bl	800ac6c <_malloc_r>
 800c842:	4606      	mov	r6, r0
 800c844:	b928      	cbnz	r0, 800c852 <_calloc_r+0x1e>
 800c846:	2600      	movs	r6, #0
 800c848:	4630      	mov	r0, r6
 800c84a:	bd70      	pop	{r4, r5, r6, pc}
 800c84c:	220c      	movs	r2, #12
 800c84e:	6002      	str	r2, [r0, #0]
 800c850:	e7f9      	b.n	800c846 <_calloc_r+0x12>
 800c852:	462a      	mov	r2, r5
 800c854:	4621      	mov	r1, r4
 800c856:	f7fd fb30 	bl	8009eba <memset>
 800c85a:	e7f5      	b.n	800c848 <_calloc_r+0x14>

0800c85c <rshift>:
 800c85c:	6903      	ldr	r3, [r0, #16]
 800c85e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c862:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c866:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c86a:	f100 0414 	add.w	r4, r0, #20
 800c86e:	dd45      	ble.n	800c8fc <rshift+0xa0>
 800c870:	f011 011f 	ands.w	r1, r1, #31
 800c874:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c878:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c87c:	d10c      	bne.n	800c898 <rshift+0x3c>
 800c87e:	f100 0710 	add.w	r7, r0, #16
 800c882:	4629      	mov	r1, r5
 800c884:	42b1      	cmp	r1, r6
 800c886:	d334      	bcc.n	800c8f2 <rshift+0x96>
 800c888:	1a9b      	subs	r3, r3, r2
 800c88a:	009b      	lsls	r3, r3, #2
 800c88c:	1eea      	subs	r2, r5, #3
 800c88e:	4296      	cmp	r6, r2
 800c890:	bf38      	it	cc
 800c892:	2300      	movcc	r3, #0
 800c894:	4423      	add	r3, r4
 800c896:	e015      	b.n	800c8c4 <rshift+0x68>
 800c898:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c89c:	f1c1 0820 	rsb	r8, r1, #32
 800c8a0:	40cf      	lsrs	r7, r1
 800c8a2:	f105 0e04 	add.w	lr, r5, #4
 800c8a6:	46a1      	mov	r9, r4
 800c8a8:	4576      	cmp	r6, lr
 800c8aa:	46f4      	mov	ip, lr
 800c8ac:	d815      	bhi.n	800c8da <rshift+0x7e>
 800c8ae:	1a9a      	subs	r2, r3, r2
 800c8b0:	0092      	lsls	r2, r2, #2
 800c8b2:	3a04      	subs	r2, #4
 800c8b4:	3501      	adds	r5, #1
 800c8b6:	42ae      	cmp	r6, r5
 800c8b8:	bf38      	it	cc
 800c8ba:	2200      	movcc	r2, #0
 800c8bc:	18a3      	adds	r3, r4, r2
 800c8be:	50a7      	str	r7, [r4, r2]
 800c8c0:	b107      	cbz	r7, 800c8c4 <rshift+0x68>
 800c8c2:	3304      	adds	r3, #4
 800c8c4:	1b1a      	subs	r2, r3, r4
 800c8c6:	42a3      	cmp	r3, r4
 800c8c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c8cc:	bf08      	it	eq
 800c8ce:	2300      	moveq	r3, #0
 800c8d0:	6102      	str	r2, [r0, #16]
 800c8d2:	bf08      	it	eq
 800c8d4:	6143      	streq	r3, [r0, #20]
 800c8d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8da:	f8dc c000 	ldr.w	ip, [ip]
 800c8de:	fa0c fc08 	lsl.w	ip, ip, r8
 800c8e2:	ea4c 0707 	orr.w	r7, ip, r7
 800c8e6:	f849 7b04 	str.w	r7, [r9], #4
 800c8ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c8ee:	40cf      	lsrs	r7, r1
 800c8f0:	e7da      	b.n	800c8a8 <rshift+0x4c>
 800c8f2:	f851 cb04 	ldr.w	ip, [r1], #4
 800c8f6:	f847 cf04 	str.w	ip, [r7, #4]!
 800c8fa:	e7c3      	b.n	800c884 <rshift+0x28>
 800c8fc:	4623      	mov	r3, r4
 800c8fe:	e7e1      	b.n	800c8c4 <rshift+0x68>

0800c900 <__hexdig_fun>:
 800c900:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c904:	2b09      	cmp	r3, #9
 800c906:	d802      	bhi.n	800c90e <__hexdig_fun+0xe>
 800c908:	3820      	subs	r0, #32
 800c90a:	b2c0      	uxtb	r0, r0
 800c90c:	4770      	bx	lr
 800c90e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c912:	2b05      	cmp	r3, #5
 800c914:	d801      	bhi.n	800c91a <__hexdig_fun+0x1a>
 800c916:	3847      	subs	r0, #71	@ 0x47
 800c918:	e7f7      	b.n	800c90a <__hexdig_fun+0xa>
 800c91a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c91e:	2b05      	cmp	r3, #5
 800c920:	d801      	bhi.n	800c926 <__hexdig_fun+0x26>
 800c922:	3827      	subs	r0, #39	@ 0x27
 800c924:	e7f1      	b.n	800c90a <__hexdig_fun+0xa>
 800c926:	2000      	movs	r0, #0
 800c928:	4770      	bx	lr
	...

0800c92c <__gethex>:
 800c92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c930:	b085      	sub	sp, #20
 800c932:	468a      	mov	sl, r1
 800c934:	9302      	str	r3, [sp, #8]
 800c936:	680b      	ldr	r3, [r1, #0]
 800c938:	9001      	str	r0, [sp, #4]
 800c93a:	4690      	mov	r8, r2
 800c93c:	1c9c      	adds	r4, r3, #2
 800c93e:	46a1      	mov	r9, r4
 800c940:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c944:	2830      	cmp	r0, #48	@ 0x30
 800c946:	d0fa      	beq.n	800c93e <__gethex+0x12>
 800c948:	eba9 0303 	sub.w	r3, r9, r3
 800c94c:	f1a3 0b02 	sub.w	fp, r3, #2
 800c950:	f7ff ffd6 	bl	800c900 <__hexdig_fun>
 800c954:	4605      	mov	r5, r0
 800c956:	2800      	cmp	r0, #0
 800c958:	d168      	bne.n	800ca2c <__gethex+0x100>
 800c95a:	49a0      	ldr	r1, [pc, #640]	@ (800cbdc <__gethex+0x2b0>)
 800c95c:	2201      	movs	r2, #1
 800c95e:	4648      	mov	r0, r9
 800c960:	f7ff ff10 	bl	800c784 <strncmp>
 800c964:	4607      	mov	r7, r0
 800c966:	2800      	cmp	r0, #0
 800c968:	d167      	bne.n	800ca3a <__gethex+0x10e>
 800c96a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c96e:	4626      	mov	r6, r4
 800c970:	f7ff ffc6 	bl	800c900 <__hexdig_fun>
 800c974:	2800      	cmp	r0, #0
 800c976:	d062      	beq.n	800ca3e <__gethex+0x112>
 800c978:	4623      	mov	r3, r4
 800c97a:	7818      	ldrb	r0, [r3, #0]
 800c97c:	2830      	cmp	r0, #48	@ 0x30
 800c97e:	4699      	mov	r9, r3
 800c980:	f103 0301 	add.w	r3, r3, #1
 800c984:	d0f9      	beq.n	800c97a <__gethex+0x4e>
 800c986:	f7ff ffbb 	bl	800c900 <__hexdig_fun>
 800c98a:	fab0 f580 	clz	r5, r0
 800c98e:	096d      	lsrs	r5, r5, #5
 800c990:	f04f 0b01 	mov.w	fp, #1
 800c994:	464a      	mov	r2, r9
 800c996:	4616      	mov	r6, r2
 800c998:	3201      	adds	r2, #1
 800c99a:	7830      	ldrb	r0, [r6, #0]
 800c99c:	f7ff ffb0 	bl	800c900 <__hexdig_fun>
 800c9a0:	2800      	cmp	r0, #0
 800c9a2:	d1f8      	bne.n	800c996 <__gethex+0x6a>
 800c9a4:	498d      	ldr	r1, [pc, #564]	@ (800cbdc <__gethex+0x2b0>)
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	4630      	mov	r0, r6
 800c9aa:	f7ff feeb 	bl	800c784 <strncmp>
 800c9ae:	2800      	cmp	r0, #0
 800c9b0:	d13f      	bne.n	800ca32 <__gethex+0x106>
 800c9b2:	b944      	cbnz	r4, 800c9c6 <__gethex+0x9a>
 800c9b4:	1c74      	adds	r4, r6, #1
 800c9b6:	4622      	mov	r2, r4
 800c9b8:	4616      	mov	r6, r2
 800c9ba:	3201      	adds	r2, #1
 800c9bc:	7830      	ldrb	r0, [r6, #0]
 800c9be:	f7ff ff9f 	bl	800c900 <__hexdig_fun>
 800c9c2:	2800      	cmp	r0, #0
 800c9c4:	d1f8      	bne.n	800c9b8 <__gethex+0x8c>
 800c9c6:	1ba4      	subs	r4, r4, r6
 800c9c8:	00a7      	lsls	r7, r4, #2
 800c9ca:	7833      	ldrb	r3, [r6, #0]
 800c9cc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c9d0:	2b50      	cmp	r3, #80	@ 0x50
 800c9d2:	d13e      	bne.n	800ca52 <__gethex+0x126>
 800c9d4:	7873      	ldrb	r3, [r6, #1]
 800c9d6:	2b2b      	cmp	r3, #43	@ 0x2b
 800c9d8:	d033      	beq.n	800ca42 <__gethex+0x116>
 800c9da:	2b2d      	cmp	r3, #45	@ 0x2d
 800c9dc:	d034      	beq.n	800ca48 <__gethex+0x11c>
 800c9de:	1c71      	adds	r1, r6, #1
 800c9e0:	2400      	movs	r4, #0
 800c9e2:	7808      	ldrb	r0, [r1, #0]
 800c9e4:	f7ff ff8c 	bl	800c900 <__hexdig_fun>
 800c9e8:	1e43      	subs	r3, r0, #1
 800c9ea:	b2db      	uxtb	r3, r3
 800c9ec:	2b18      	cmp	r3, #24
 800c9ee:	d830      	bhi.n	800ca52 <__gethex+0x126>
 800c9f0:	f1a0 0210 	sub.w	r2, r0, #16
 800c9f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c9f8:	f7ff ff82 	bl	800c900 <__hexdig_fun>
 800c9fc:	f100 3cff 	add.w	ip, r0, #4294967295
 800ca00:	fa5f fc8c 	uxtb.w	ip, ip
 800ca04:	f1bc 0f18 	cmp.w	ip, #24
 800ca08:	f04f 030a 	mov.w	r3, #10
 800ca0c:	d91e      	bls.n	800ca4c <__gethex+0x120>
 800ca0e:	b104      	cbz	r4, 800ca12 <__gethex+0xe6>
 800ca10:	4252      	negs	r2, r2
 800ca12:	4417      	add	r7, r2
 800ca14:	f8ca 1000 	str.w	r1, [sl]
 800ca18:	b1ed      	cbz	r5, 800ca56 <__gethex+0x12a>
 800ca1a:	f1bb 0f00 	cmp.w	fp, #0
 800ca1e:	bf0c      	ite	eq
 800ca20:	2506      	moveq	r5, #6
 800ca22:	2500      	movne	r5, #0
 800ca24:	4628      	mov	r0, r5
 800ca26:	b005      	add	sp, #20
 800ca28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca2c:	2500      	movs	r5, #0
 800ca2e:	462c      	mov	r4, r5
 800ca30:	e7b0      	b.n	800c994 <__gethex+0x68>
 800ca32:	2c00      	cmp	r4, #0
 800ca34:	d1c7      	bne.n	800c9c6 <__gethex+0x9a>
 800ca36:	4627      	mov	r7, r4
 800ca38:	e7c7      	b.n	800c9ca <__gethex+0x9e>
 800ca3a:	464e      	mov	r6, r9
 800ca3c:	462f      	mov	r7, r5
 800ca3e:	2501      	movs	r5, #1
 800ca40:	e7c3      	b.n	800c9ca <__gethex+0x9e>
 800ca42:	2400      	movs	r4, #0
 800ca44:	1cb1      	adds	r1, r6, #2
 800ca46:	e7cc      	b.n	800c9e2 <__gethex+0xb6>
 800ca48:	2401      	movs	r4, #1
 800ca4a:	e7fb      	b.n	800ca44 <__gethex+0x118>
 800ca4c:	fb03 0002 	mla	r0, r3, r2, r0
 800ca50:	e7ce      	b.n	800c9f0 <__gethex+0xc4>
 800ca52:	4631      	mov	r1, r6
 800ca54:	e7de      	b.n	800ca14 <__gethex+0xe8>
 800ca56:	eba6 0309 	sub.w	r3, r6, r9
 800ca5a:	3b01      	subs	r3, #1
 800ca5c:	4629      	mov	r1, r5
 800ca5e:	2b07      	cmp	r3, #7
 800ca60:	dc0a      	bgt.n	800ca78 <__gethex+0x14c>
 800ca62:	9801      	ldr	r0, [sp, #4]
 800ca64:	f7fe f98e 	bl	800ad84 <_Balloc>
 800ca68:	4604      	mov	r4, r0
 800ca6a:	b940      	cbnz	r0, 800ca7e <__gethex+0x152>
 800ca6c:	4b5c      	ldr	r3, [pc, #368]	@ (800cbe0 <__gethex+0x2b4>)
 800ca6e:	4602      	mov	r2, r0
 800ca70:	21e4      	movs	r1, #228	@ 0xe4
 800ca72:	485c      	ldr	r0, [pc, #368]	@ (800cbe4 <__gethex+0x2b8>)
 800ca74:	f7ff fec0 	bl	800c7f8 <__assert_func>
 800ca78:	3101      	adds	r1, #1
 800ca7a:	105b      	asrs	r3, r3, #1
 800ca7c:	e7ef      	b.n	800ca5e <__gethex+0x132>
 800ca7e:	f100 0a14 	add.w	sl, r0, #20
 800ca82:	2300      	movs	r3, #0
 800ca84:	4655      	mov	r5, sl
 800ca86:	469b      	mov	fp, r3
 800ca88:	45b1      	cmp	r9, r6
 800ca8a:	d337      	bcc.n	800cafc <__gethex+0x1d0>
 800ca8c:	f845 bb04 	str.w	fp, [r5], #4
 800ca90:	eba5 050a 	sub.w	r5, r5, sl
 800ca94:	10ad      	asrs	r5, r5, #2
 800ca96:	6125      	str	r5, [r4, #16]
 800ca98:	4658      	mov	r0, fp
 800ca9a:	f7fe fa65 	bl	800af68 <__hi0bits>
 800ca9e:	016d      	lsls	r5, r5, #5
 800caa0:	f8d8 6000 	ldr.w	r6, [r8]
 800caa4:	1a2d      	subs	r5, r5, r0
 800caa6:	42b5      	cmp	r5, r6
 800caa8:	dd54      	ble.n	800cb54 <__gethex+0x228>
 800caaa:	1bad      	subs	r5, r5, r6
 800caac:	4629      	mov	r1, r5
 800caae:	4620      	mov	r0, r4
 800cab0:	f7fe fdf6 	bl	800b6a0 <__any_on>
 800cab4:	4681      	mov	r9, r0
 800cab6:	b178      	cbz	r0, 800cad8 <__gethex+0x1ac>
 800cab8:	1e6b      	subs	r3, r5, #1
 800caba:	1159      	asrs	r1, r3, #5
 800cabc:	f003 021f 	and.w	r2, r3, #31
 800cac0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cac4:	f04f 0901 	mov.w	r9, #1
 800cac8:	fa09 f202 	lsl.w	r2, r9, r2
 800cacc:	420a      	tst	r2, r1
 800cace:	d003      	beq.n	800cad8 <__gethex+0x1ac>
 800cad0:	454b      	cmp	r3, r9
 800cad2:	dc36      	bgt.n	800cb42 <__gethex+0x216>
 800cad4:	f04f 0902 	mov.w	r9, #2
 800cad8:	4629      	mov	r1, r5
 800cada:	4620      	mov	r0, r4
 800cadc:	f7ff febe 	bl	800c85c <rshift>
 800cae0:	442f      	add	r7, r5
 800cae2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cae6:	42bb      	cmp	r3, r7
 800cae8:	da42      	bge.n	800cb70 <__gethex+0x244>
 800caea:	9801      	ldr	r0, [sp, #4]
 800caec:	4621      	mov	r1, r4
 800caee:	f7fe f989 	bl	800ae04 <_Bfree>
 800caf2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800caf4:	2300      	movs	r3, #0
 800caf6:	6013      	str	r3, [r2, #0]
 800caf8:	25a3      	movs	r5, #163	@ 0xa3
 800cafa:	e793      	b.n	800ca24 <__gethex+0xf8>
 800cafc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800cb00:	2a2e      	cmp	r2, #46	@ 0x2e
 800cb02:	d012      	beq.n	800cb2a <__gethex+0x1fe>
 800cb04:	2b20      	cmp	r3, #32
 800cb06:	d104      	bne.n	800cb12 <__gethex+0x1e6>
 800cb08:	f845 bb04 	str.w	fp, [r5], #4
 800cb0c:	f04f 0b00 	mov.w	fp, #0
 800cb10:	465b      	mov	r3, fp
 800cb12:	7830      	ldrb	r0, [r6, #0]
 800cb14:	9303      	str	r3, [sp, #12]
 800cb16:	f7ff fef3 	bl	800c900 <__hexdig_fun>
 800cb1a:	9b03      	ldr	r3, [sp, #12]
 800cb1c:	f000 000f 	and.w	r0, r0, #15
 800cb20:	4098      	lsls	r0, r3
 800cb22:	ea4b 0b00 	orr.w	fp, fp, r0
 800cb26:	3304      	adds	r3, #4
 800cb28:	e7ae      	b.n	800ca88 <__gethex+0x15c>
 800cb2a:	45b1      	cmp	r9, r6
 800cb2c:	d8ea      	bhi.n	800cb04 <__gethex+0x1d8>
 800cb2e:	492b      	ldr	r1, [pc, #172]	@ (800cbdc <__gethex+0x2b0>)
 800cb30:	9303      	str	r3, [sp, #12]
 800cb32:	2201      	movs	r2, #1
 800cb34:	4630      	mov	r0, r6
 800cb36:	f7ff fe25 	bl	800c784 <strncmp>
 800cb3a:	9b03      	ldr	r3, [sp, #12]
 800cb3c:	2800      	cmp	r0, #0
 800cb3e:	d1e1      	bne.n	800cb04 <__gethex+0x1d8>
 800cb40:	e7a2      	b.n	800ca88 <__gethex+0x15c>
 800cb42:	1ea9      	subs	r1, r5, #2
 800cb44:	4620      	mov	r0, r4
 800cb46:	f7fe fdab 	bl	800b6a0 <__any_on>
 800cb4a:	2800      	cmp	r0, #0
 800cb4c:	d0c2      	beq.n	800cad4 <__gethex+0x1a8>
 800cb4e:	f04f 0903 	mov.w	r9, #3
 800cb52:	e7c1      	b.n	800cad8 <__gethex+0x1ac>
 800cb54:	da09      	bge.n	800cb6a <__gethex+0x23e>
 800cb56:	1b75      	subs	r5, r6, r5
 800cb58:	4621      	mov	r1, r4
 800cb5a:	9801      	ldr	r0, [sp, #4]
 800cb5c:	462a      	mov	r2, r5
 800cb5e:	f7fe fb69 	bl	800b234 <__lshift>
 800cb62:	1b7f      	subs	r7, r7, r5
 800cb64:	4604      	mov	r4, r0
 800cb66:	f100 0a14 	add.w	sl, r0, #20
 800cb6a:	f04f 0900 	mov.w	r9, #0
 800cb6e:	e7b8      	b.n	800cae2 <__gethex+0x1b6>
 800cb70:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cb74:	42bd      	cmp	r5, r7
 800cb76:	dd6f      	ble.n	800cc58 <__gethex+0x32c>
 800cb78:	1bed      	subs	r5, r5, r7
 800cb7a:	42ae      	cmp	r6, r5
 800cb7c:	dc34      	bgt.n	800cbe8 <__gethex+0x2bc>
 800cb7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cb82:	2b02      	cmp	r3, #2
 800cb84:	d022      	beq.n	800cbcc <__gethex+0x2a0>
 800cb86:	2b03      	cmp	r3, #3
 800cb88:	d024      	beq.n	800cbd4 <__gethex+0x2a8>
 800cb8a:	2b01      	cmp	r3, #1
 800cb8c:	d115      	bne.n	800cbba <__gethex+0x28e>
 800cb8e:	42ae      	cmp	r6, r5
 800cb90:	d113      	bne.n	800cbba <__gethex+0x28e>
 800cb92:	2e01      	cmp	r6, #1
 800cb94:	d10b      	bne.n	800cbae <__gethex+0x282>
 800cb96:	9a02      	ldr	r2, [sp, #8]
 800cb98:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cb9c:	6013      	str	r3, [r2, #0]
 800cb9e:	2301      	movs	r3, #1
 800cba0:	6123      	str	r3, [r4, #16]
 800cba2:	f8ca 3000 	str.w	r3, [sl]
 800cba6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cba8:	2562      	movs	r5, #98	@ 0x62
 800cbaa:	601c      	str	r4, [r3, #0]
 800cbac:	e73a      	b.n	800ca24 <__gethex+0xf8>
 800cbae:	1e71      	subs	r1, r6, #1
 800cbb0:	4620      	mov	r0, r4
 800cbb2:	f7fe fd75 	bl	800b6a0 <__any_on>
 800cbb6:	2800      	cmp	r0, #0
 800cbb8:	d1ed      	bne.n	800cb96 <__gethex+0x26a>
 800cbba:	9801      	ldr	r0, [sp, #4]
 800cbbc:	4621      	mov	r1, r4
 800cbbe:	f7fe f921 	bl	800ae04 <_Bfree>
 800cbc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	6013      	str	r3, [r2, #0]
 800cbc8:	2550      	movs	r5, #80	@ 0x50
 800cbca:	e72b      	b.n	800ca24 <__gethex+0xf8>
 800cbcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d1f3      	bne.n	800cbba <__gethex+0x28e>
 800cbd2:	e7e0      	b.n	800cb96 <__gethex+0x26a>
 800cbd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d1dd      	bne.n	800cb96 <__gethex+0x26a>
 800cbda:	e7ee      	b.n	800cbba <__gethex+0x28e>
 800cbdc:	0800d758 	.word	0x0800d758
 800cbe0:	0800d5ed 	.word	0x0800d5ed
 800cbe4:	0800d906 	.word	0x0800d906
 800cbe8:	1e6f      	subs	r7, r5, #1
 800cbea:	f1b9 0f00 	cmp.w	r9, #0
 800cbee:	d130      	bne.n	800cc52 <__gethex+0x326>
 800cbf0:	b127      	cbz	r7, 800cbfc <__gethex+0x2d0>
 800cbf2:	4639      	mov	r1, r7
 800cbf4:	4620      	mov	r0, r4
 800cbf6:	f7fe fd53 	bl	800b6a0 <__any_on>
 800cbfa:	4681      	mov	r9, r0
 800cbfc:	117a      	asrs	r2, r7, #5
 800cbfe:	2301      	movs	r3, #1
 800cc00:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cc04:	f007 071f 	and.w	r7, r7, #31
 800cc08:	40bb      	lsls	r3, r7
 800cc0a:	4213      	tst	r3, r2
 800cc0c:	4629      	mov	r1, r5
 800cc0e:	4620      	mov	r0, r4
 800cc10:	bf18      	it	ne
 800cc12:	f049 0902 	orrne.w	r9, r9, #2
 800cc16:	f7ff fe21 	bl	800c85c <rshift>
 800cc1a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800cc1e:	1b76      	subs	r6, r6, r5
 800cc20:	2502      	movs	r5, #2
 800cc22:	f1b9 0f00 	cmp.w	r9, #0
 800cc26:	d047      	beq.n	800ccb8 <__gethex+0x38c>
 800cc28:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cc2c:	2b02      	cmp	r3, #2
 800cc2e:	d015      	beq.n	800cc5c <__gethex+0x330>
 800cc30:	2b03      	cmp	r3, #3
 800cc32:	d017      	beq.n	800cc64 <__gethex+0x338>
 800cc34:	2b01      	cmp	r3, #1
 800cc36:	d109      	bne.n	800cc4c <__gethex+0x320>
 800cc38:	f019 0f02 	tst.w	r9, #2
 800cc3c:	d006      	beq.n	800cc4c <__gethex+0x320>
 800cc3e:	f8da 3000 	ldr.w	r3, [sl]
 800cc42:	ea49 0903 	orr.w	r9, r9, r3
 800cc46:	f019 0f01 	tst.w	r9, #1
 800cc4a:	d10e      	bne.n	800cc6a <__gethex+0x33e>
 800cc4c:	f045 0510 	orr.w	r5, r5, #16
 800cc50:	e032      	b.n	800ccb8 <__gethex+0x38c>
 800cc52:	f04f 0901 	mov.w	r9, #1
 800cc56:	e7d1      	b.n	800cbfc <__gethex+0x2d0>
 800cc58:	2501      	movs	r5, #1
 800cc5a:	e7e2      	b.n	800cc22 <__gethex+0x2f6>
 800cc5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc5e:	f1c3 0301 	rsb	r3, r3, #1
 800cc62:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cc64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d0f0      	beq.n	800cc4c <__gethex+0x320>
 800cc6a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cc6e:	f104 0314 	add.w	r3, r4, #20
 800cc72:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cc76:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cc7a:	f04f 0c00 	mov.w	ip, #0
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc84:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cc88:	d01b      	beq.n	800ccc2 <__gethex+0x396>
 800cc8a:	3201      	adds	r2, #1
 800cc8c:	6002      	str	r2, [r0, #0]
 800cc8e:	2d02      	cmp	r5, #2
 800cc90:	f104 0314 	add.w	r3, r4, #20
 800cc94:	d13c      	bne.n	800cd10 <__gethex+0x3e4>
 800cc96:	f8d8 2000 	ldr.w	r2, [r8]
 800cc9a:	3a01      	subs	r2, #1
 800cc9c:	42b2      	cmp	r2, r6
 800cc9e:	d109      	bne.n	800ccb4 <__gethex+0x388>
 800cca0:	1171      	asrs	r1, r6, #5
 800cca2:	2201      	movs	r2, #1
 800cca4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cca8:	f006 061f 	and.w	r6, r6, #31
 800ccac:	fa02 f606 	lsl.w	r6, r2, r6
 800ccb0:	421e      	tst	r6, r3
 800ccb2:	d13a      	bne.n	800cd2a <__gethex+0x3fe>
 800ccb4:	f045 0520 	orr.w	r5, r5, #32
 800ccb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ccba:	601c      	str	r4, [r3, #0]
 800ccbc:	9b02      	ldr	r3, [sp, #8]
 800ccbe:	601f      	str	r7, [r3, #0]
 800ccc0:	e6b0      	b.n	800ca24 <__gethex+0xf8>
 800ccc2:	4299      	cmp	r1, r3
 800ccc4:	f843 cc04 	str.w	ip, [r3, #-4]
 800ccc8:	d8d9      	bhi.n	800cc7e <__gethex+0x352>
 800ccca:	68a3      	ldr	r3, [r4, #8]
 800cccc:	459b      	cmp	fp, r3
 800ccce:	db17      	blt.n	800cd00 <__gethex+0x3d4>
 800ccd0:	6861      	ldr	r1, [r4, #4]
 800ccd2:	9801      	ldr	r0, [sp, #4]
 800ccd4:	3101      	adds	r1, #1
 800ccd6:	f7fe f855 	bl	800ad84 <_Balloc>
 800ccda:	4681      	mov	r9, r0
 800ccdc:	b918      	cbnz	r0, 800cce6 <__gethex+0x3ba>
 800ccde:	4b1a      	ldr	r3, [pc, #104]	@ (800cd48 <__gethex+0x41c>)
 800cce0:	4602      	mov	r2, r0
 800cce2:	2184      	movs	r1, #132	@ 0x84
 800cce4:	e6c5      	b.n	800ca72 <__gethex+0x146>
 800cce6:	6922      	ldr	r2, [r4, #16]
 800cce8:	3202      	adds	r2, #2
 800ccea:	f104 010c 	add.w	r1, r4, #12
 800ccee:	0092      	lsls	r2, r2, #2
 800ccf0:	300c      	adds	r0, #12
 800ccf2:	f7ff fd69 	bl	800c7c8 <memcpy>
 800ccf6:	4621      	mov	r1, r4
 800ccf8:	9801      	ldr	r0, [sp, #4]
 800ccfa:	f7fe f883 	bl	800ae04 <_Bfree>
 800ccfe:	464c      	mov	r4, r9
 800cd00:	6923      	ldr	r3, [r4, #16]
 800cd02:	1c5a      	adds	r2, r3, #1
 800cd04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cd08:	6122      	str	r2, [r4, #16]
 800cd0a:	2201      	movs	r2, #1
 800cd0c:	615a      	str	r2, [r3, #20]
 800cd0e:	e7be      	b.n	800cc8e <__gethex+0x362>
 800cd10:	6922      	ldr	r2, [r4, #16]
 800cd12:	455a      	cmp	r2, fp
 800cd14:	dd0b      	ble.n	800cd2e <__gethex+0x402>
 800cd16:	2101      	movs	r1, #1
 800cd18:	4620      	mov	r0, r4
 800cd1a:	f7ff fd9f 	bl	800c85c <rshift>
 800cd1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cd22:	3701      	adds	r7, #1
 800cd24:	42bb      	cmp	r3, r7
 800cd26:	f6ff aee0 	blt.w	800caea <__gethex+0x1be>
 800cd2a:	2501      	movs	r5, #1
 800cd2c:	e7c2      	b.n	800ccb4 <__gethex+0x388>
 800cd2e:	f016 061f 	ands.w	r6, r6, #31
 800cd32:	d0fa      	beq.n	800cd2a <__gethex+0x3fe>
 800cd34:	4453      	add	r3, sl
 800cd36:	f1c6 0620 	rsb	r6, r6, #32
 800cd3a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cd3e:	f7fe f913 	bl	800af68 <__hi0bits>
 800cd42:	42b0      	cmp	r0, r6
 800cd44:	dbe7      	blt.n	800cd16 <__gethex+0x3ea>
 800cd46:	e7f0      	b.n	800cd2a <__gethex+0x3fe>
 800cd48:	0800d5ed 	.word	0x0800d5ed

0800cd4c <L_shift>:
 800cd4c:	f1c2 0208 	rsb	r2, r2, #8
 800cd50:	0092      	lsls	r2, r2, #2
 800cd52:	b570      	push	{r4, r5, r6, lr}
 800cd54:	f1c2 0620 	rsb	r6, r2, #32
 800cd58:	6843      	ldr	r3, [r0, #4]
 800cd5a:	6804      	ldr	r4, [r0, #0]
 800cd5c:	fa03 f506 	lsl.w	r5, r3, r6
 800cd60:	432c      	orrs	r4, r5
 800cd62:	40d3      	lsrs	r3, r2
 800cd64:	6004      	str	r4, [r0, #0]
 800cd66:	f840 3f04 	str.w	r3, [r0, #4]!
 800cd6a:	4288      	cmp	r0, r1
 800cd6c:	d3f4      	bcc.n	800cd58 <L_shift+0xc>
 800cd6e:	bd70      	pop	{r4, r5, r6, pc}

0800cd70 <__match>:
 800cd70:	b530      	push	{r4, r5, lr}
 800cd72:	6803      	ldr	r3, [r0, #0]
 800cd74:	3301      	adds	r3, #1
 800cd76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd7a:	b914      	cbnz	r4, 800cd82 <__match+0x12>
 800cd7c:	6003      	str	r3, [r0, #0]
 800cd7e:	2001      	movs	r0, #1
 800cd80:	bd30      	pop	{r4, r5, pc}
 800cd82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd86:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800cd8a:	2d19      	cmp	r5, #25
 800cd8c:	bf98      	it	ls
 800cd8e:	3220      	addls	r2, #32
 800cd90:	42a2      	cmp	r2, r4
 800cd92:	d0f0      	beq.n	800cd76 <__match+0x6>
 800cd94:	2000      	movs	r0, #0
 800cd96:	e7f3      	b.n	800cd80 <__match+0x10>

0800cd98 <__hexnan>:
 800cd98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd9c:	680b      	ldr	r3, [r1, #0]
 800cd9e:	6801      	ldr	r1, [r0, #0]
 800cda0:	115e      	asrs	r6, r3, #5
 800cda2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cda6:	f013 031f 	ands.w	r3, r3, #31
 800cdaa:	b087      	sub	sp, #28
 800cdac:	bf18      	it	ne
 800cdae:	3604      	addne	r6, #4
 800cdb0:	2500      	movs	r5, #0
 800cdb2:	1f37      	subs	r7, r6, #4
 800cdb4:	4682      	mov	sl, r0
 800cdb6:	4690      	mov	r8, r2
 800cdb8:	9301      	str	r3, [sp, #4]
 800cdba:	f846 5c04 	str.w	r5, [r6, #-4]
 800cdbe:	46b9      	mov	r9, r7
 800cdc0:	463c      	mov	r4, r7
 800cdc2:	9502      	str	r5, [sp, #8]
 800cdc4:	46ab      	mov	fp, r5
 800cdc6:	784a      	ldrb	r2, [r1, #1]
 800cdc8:	1c4b      	adds	r3, r1, #1
 800cdca:	9303      	str	r3, [sp, #12]
 800cdcc:	b342      	cbz	r2, 800ce20 <__hexnan+0x88>
 800cdce:	4610      	mov	r0, r2
 800cdd0:	9105      	str	r1, [sp, #20]
 800cdd2:	9204      	str	r2, [sp, #16]
 800cdd4:	f7ff fd94 	bl	800c900 <__hexdig_fun>
 800cdd8:	2800      	cmp	r0, #0
 800cdda:	d151      	bne.n	800ce80 <__hexnan+0xe8>
 800cddc:	9a04      	ldr	r2, [sp, #16]
 800cdde:	9905      	ldr	r1, [sp, #20]
 800cde0:	2a20      	cmp	r2, #32
 800cde2:	d818      	bhi.n	800ce16 <__hexnan+0x7e>
 800cde4:	9b02      	ldr	r3, [sp, #8]
 800cde6:	459b      	cmp	fp, r3
 800cde8:	dd13      	ble.n	800ce12 <__hexnan+0x7a>
 800cdea:	454c      	cmp	r4, r9
 800cdec:	d206      	bcs.n	800cdfc <__hexnan+0x64>
 800cdee:	2d07      	cmp	r5, #7
 800cdf0:	dc04      	bgt.n	800cdfc <__hexnan+0x64>
 800cdf2:	462a      	mov	r2, r5
 800cdf4:	4649      	mov	r1, r9
 800cdf6:	4620      	mov	r0, r4
 800cdf8:	f7ff ffa8 	bl	800cd4c <L_shift>
 800cdfc:	4544      	cmp	r4, r8
 800cdfe:	d952      	bls.n	800cea6 <__hexnan+0x10e>
 800ce00:	2300      	movs	r3, #0
 800ce02:	f1a4 0904 	sub.w	r9, r4, #4
 800ce06:	f844 3c04 	str.w	r3, [r4, #-4]
 800ce0a:	f8cd b008 	str.w	fp, [sp, #8]
 800ce0e:	464c      	mov	r4, r9
 800ce10:	461d      	mov	r5, r3
 800ce12:	9903      	ldr	r1, [sp, #12]
 800ce14:	e7d7      	b.n	800cdc6 <__hexnan+0x2e>
 800ce16:	2a29      	cmp	r2, #41	@ 0x29
 800ce18:	d157      	bne.n	800ceca <__hexnan+0x132>
 800ce1a:	3102      	adds	r1, #2
 800ce1c:	f8ca 1000 	str.w	r1, [sl]
 800ce20:	f1bb 0f00 	cmp.w	fp, #0
 800ce24:	d051      	beq.n	800ceca <__hexnan+0x132>
 800ce26:	454c      	cmp	r4, r9
 800ce28:	d206      	bcs.n	800ce38 <__hexnan+0xa0>
 800ce2a:	2d07      	cmp	r5, #7
 800ce2c:	dc04      	bgt.n	800ce38 <__hexnan+0xa0>
 800ce2e:	462a      	mov	r2, r5
 800ce30:	4649      	mov	r1, r9
 800ce32:	4620      	mov	r0, r4
 800ce34:	f7ff ff8a 	bl	800cd4c <L_shift>
 800ce38:	4544      	cmp	r4, r8
 800ce3a:	d936      	bls.n	800ceaa <__hexnan+0x112>
 800ce3c:	f1a8 0204 	sub.w	r2, r8, #4
 800ce40:	4623      	mov	r3, r4
 800ce42:	f853 1b04 	ldr.w	r1, [r3], #4
 800ce46:	f842 1f04 	str.w	r1, [r2, #4]!
 800ce4a:	429f      	cmp	r7, r3
 800ce4c:	d2f9      	bcs.n	800ce42 <__hexnan+0xaa>
 800ce4e:	1b3b      	subs	r3, r7, r4
 800ce50:	f023 0303 	bic.w	r3, r3, #3
 800ce54:	3304      	adds	r3, #4
 800ce56:	3401      	adds	r4, #1
 800ce58:	3e03      	subs	r6, #3
 800ce5a:	42b4      	cmp	r4, r6
 800ce5c:	bf88      	it	hi
 800ce5e:	2304      	movhi	r3, #4
 800ce60:	4443      	add	r3, r8
 800ce62:	2200      	movs	r2, #0
 800ce64:	f843 2b04 	str.w	r2, [r3], #4
 800ce68:	429f      	cmp	r7, r3
 800ce6a:	d2fb      	bcs.n	800ce64 <__hexnan+0xcc>
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	b91b      	cbnz	r3, 800ce78 <__hexnan+0xe0>
 800ce70:	4547      	cmp	r7, r8
 800ce72:	d128      	bne.n	800cec6 <__hexnan+0x12e>
 800ce74:	2301      	movs	r3, #1
 800ce76:	603b      	str	r3, [r7, #0]
 800ce78:	2005      	movs	r0, #5
 800ce7a:	b007      	add	sp, #28
 800ce7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce80:	3501      	adds	r5, #1
 800ce82:	2d08      	cmp	r5, #8
 800ce84:	f10b 0b01 	add.w	fp, fp, #1
 800ce88:	dd06      	ble.n	800ce98 <__hexnan+0x100>
 800ce8a:	4544      	cmp	r4, r8
 800ce8c:	d9c1      	bls.n	800ce12 <__hexnan+0x7a>
 800ce8e:	2300      	movs	r3, #0
 800ce90:	f844 3c04 	str.w	r3, [r4, #-4]
 800ce94:	2501      	movs	r5, #1
 800ce96:	3c04      	subs	r4, #4
 800ce98:	6822      	ldr	r2, [r4, #0]
 800ce9a:	f000 000f 	and.w	r0, r0, #15
 800ce9e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cea2:	6020      	str	r0, [r4, #0]
 800cea4:	e7b5      	b.n	800ce12 <__hexnan+0x7a>
 800cea6:	2508      	movs	r5, #8
 800cea8:	e7b3      	b.n	800ce12 <__hexnan+0x7a>
 800ceaa:	9b01      	ldr	r3, [sp, #4]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d0dd      	beq.n	800ce6c <__hexnan+0xd4>
 800ceb0:	f1c3 0320 	rsb	r3, r3, #32
 800ceb4:	f04f 32ff 	mov.w	r2, #4294967295
 800ceb8:	40da      	lsrs	r2, r3
 800ceba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cebe:	4013      	ands	r3, r2
 800cec0:	f846 3c04 	str.w	r3, [r6, #-4]
 800cec4:	e7d2      	b.n	800ce6c <__hexnan+0xd4>
 800cec6:	3f04      	subs	r7, #4
 800cec8:	e7d0      	b.n	800ce6c <__hexnan+0xd4>
 800ceca:	2004      	movs	r0, #4
 800cecc:	e7d5      	b.n	800ce7a <__hexnan+0xe2>

0800cece <__ascii_mbtowc>:
 800cece:	b082      	sub	sp, #8
 800ced0:	b901      	cbnz	r1, 800ced4 <__ascii_mbtowc+0x6>
 800ced2:	a901      	add	r1, sp, #4
 800ced4:	b142      	cbz	r2, 800cee8 <__ascii_mbtowc+0x1a>
 800ced6:	b14b      	cbz	r3, 800ceec <__ascii_mbtowc+0x1e>
 800ced8:	7813      	ldrb	r3, [r2, #0]
 800ceda:	600b      	str	r3, [r1, #0]
 800cedc:	7812      	ldrb	r2, [r2, #0]
 800cede:	1e10      	subs	r0, r2, #0
 800cee0:	bf18      	it	ne
 800cee2:	2001      	movne	r0, #1
 800cee4:	b002      	add	sp, #8
 800cee6:	4770      	bx	lr
 800cee8:	4610      	mov	r0, r2
 800ceea:	e7fb      	b.n	800cee4 <__ascii_mbtowc+0x16>
 800ceec:	f06f 0001 	mvn.w	r0, #1
 800cef0:	e7f8      	b.n	800cee4 <__ascii_mbtowc+0x16>

0800cef2 <_realloc_r>:
 800cef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cef6:	4680      	mov	r8, r0
 800cef8:	4615      	mov	r5, r2
 800cefa:	460c      	mov	r4, r1
 800cefc:	b921      	cbnz	r1, 800cf08 <_realloc_r+0x16>
 800cefe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf02:	4611      	mov	r1, r2
 800cf04:	f7fd beb2 	b.w	800ac6c <_malloc_r>
 800cf08:	b92a      	cbnz	r2, 800cf16 <_realloc_r+0x24>
 800cf0a:	f7fd fe3b 	bl	800ab84 <_free_r>
 800cf0e:	2400      	movs	r4, #0
 800cf10:	4620      	mov	r0, r4
 800cf12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf16:	f000 f840 	bl	800cf9a <_malloc_usable_size_r>
 800cf1a:	4285      	cmp	r5, r0
 800cf1c:	4606      	mov	r6, r0
 800cf1e:	d802      	bhi.n	800cf26 <_realloc_r+0x34>
 800cf20:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cf24:	d8f4      	bhi.n	800cf10 <_realloc_r+0x1e>
 800cf26:	4629      	mov	r1, r5
 800cf28:	4640      	mov	r0, r8
 800cf2a:	f7fd fe9f 	bl	800ac6c <_malloc_r>
 800cf2e:	4607      	mov	r7, r0
 800cf30:	2800      	cmp	r0, #0
 800cf32:	d0ec      	beq.n	800cf0e <_realloc_r+0x1c>
 800cf34:	42b5      	cmp	r5, r6
 800cf36:	462a      	mov	r2, r5
 800cf38:	4621      	mov	r1, r4
 800cf3a:	bf28      	it	cs
 800cf3c:	4632      	movcs	r2, r6
 800cf3e:	f7ff fc43 	bl	800c7c8 <memcpy>
 800cf42:	4621      	mov	r1, r4
 800cf44:	4640      	mov	r0, r8
 800cf46:	f7fd fe1d 	bl	800ab84 <_free_r>
 800cf4a:	463c      	mov	r4, r7
 800cf4c:	e7e0      	b.n	800cf10 <_realloc_r+0x1e>

0800cf4e <__ascii_wctomb>:
 800cf4e:	4603      	mov	r3, r0
 800cf50:	4608      	mov	r0, r1
 800cf52:	b141      	cbz	r1, 800cf66 <__ascii_wctomb+0x18>
 800cf54:	2aff      	cmp	r2, #255	@ 0xff
 800cf56:	d904      	bls.n	800cf62 <__ascii_wctomb+0x14>
 800cf58:	228a      	movs	r2, #138	@ 0x8a
 800cf5a:	601a      	str	r2, [r3, #0]
 800cf5c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf60:	4770      	bx	lr
 800cf62:	700a      	strb	r2, [r1, #0]
 800cf64:	2001      	movs	r0, #1
 800cf66:	4770      	bx	lr

0800cf68 <fiprintf>:
 800cf68:	b40e      	push	{r1, r2, r3}
 800cf6a:	b503      	push	{r0, r1, lr}
 800cf6c:	4601      	mov	r1, r0
 800cf6e:	ab03      	add	r3, sp, #12
 800cf70:	4805      	ldr	r0, [pc, #20]	@ (800cf88 <fiprintf+0x20>)
 800cf72:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf76:	6800      	ldr	r0, [r0, #0]
 800cf78:	9301      	str	r3, [sp, #4]
 800cf7a:	f000 f83f 	bl	800cffc <_vfiprintf_r>
 800cf7e:	b002      	add	sp, #8
 800cf80:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf84:	b003      	add	sp, #12
 800cf86:	4770      	bx	lr
 800cf88:	2400001c 	.word	0x2400001c

0800cf8c <abort>:
 800cf8c:	b508      	push	{r3, lr}
 800cf8e:	2006      	movs	r0, #6
 800cf90:	f000 fa08 	bl	800d3a4 <raise>
 800cf94:	2001      	movs	r0, #1
 800cf96:	f7f4 fa9d 	bl	80014d4 <_exit>

0800cf9a <_malloc_usable_size_r>:
 800cf9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf9e:	1f18      	subs	r0, r3, #4
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	bfbc      	itt	lt
 800cfa4:	580b      	ldrlt	r3, [r1, r0]
 800cfa6:	18c0      	addlt	r0, r0, r3
 800cfa8:	4770      	bx	lr

0800cfaa <__sfputc_r>:
 800cfaa:	6893      	ldr	r3, [r2, #8]
 800cfac:	3b01      	subs	r3, #1
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	b410      	push	{r4}
 800cfb2:	6093      	str	r3, [r2, #8]
 800cfb4:	da08      	bge.n	800cfc8 <__sfputc_r+0x1e>
 800cfb6:	6994      	ldr	r4, [r2, #24]
 800cfb8:	42a3      	cmp	r3, r4
 800cfba:	db01      	blt.n	800cfc0 <__sfputc_r+0x16>
 800cfbc:	290a      	cmp	r1, #10
 800cfbe:	d103      	bne.n	800cfc8 <__sfputc_r+0x1e>
 800cfc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cfc4:	f000 b932 	b.w	800d22c <__swbuf_r>
 800cfc8:	6813      	ldr	r3, [r2, #0]
 800cfca:	1c58      	adds	r0, r3, #1
 800cfcc:	6010      	str	r0, [r2, #0]
 800cfce:	7019      	strb	r1, [r3, #0]
 800cfd0:	4608      	mov	r0, r1
 800cfd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cfd6:	4770      	bx	lr

0800cfd8 <__sfputs_r>:
 800cfd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfda:	4606      	mov	r6, r0
 800cfdc:	460f      	mov	r7, r1
 800cfde:	4614      	mov	r4, r2
 800cfe0:	18d5      	adds	r5, r2, r3
 800cfe2:	42ac      	cmp	r4, r5
 800cfe4:	d101      	bne.n	800cfea <__sfputs_r+0x12>
 800cfe6:	2000      	movs	r0, #0
 800cfe8:	e007      	b.n	800cffa <__sfputs_r+0x22>
 800cfea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfee:	463a      	mov	r2, r7
 800cff0:	4630      	mov	r0, r6
 800cff2:	f7ff ffda 	bl	800cfaa <__sfputc_r>
 800cff6:	1c43      	adds	r3, r0, #1
 800cff8:	d1f3      	bne.n	800cfe2 <__sfputs_r+0xa>
 800cffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cffc <_vfiprintf_r>:
 800cffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d000:	460d      	mov	r5, r1
 800d002:	b09d      	sub	sp, #116	@ 0x74
 800d004:	4614      	mov	r4, r2
 800d006:	4698      	mov	r8, r3
 800d008:	4606      	mov	r6, r0
 800d00a:	b118      	cbz	r0, 800d014 <_vfiprintf_r+0x18>
 800d00c:	6a03      	ldr	r3, [r0, #32]
 800d00e:	b90b      	cbnz	r3, 800d014 <_vfiprintf_r+0x18>
 800d010:	f7fc feba 	bl	8009d88 <__sinit>
 800d014:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d016:	07d9      	lsls	r1, r3, #31
 800d018:	d405      	bmi.n	800d026 <_vfiprintf_r+0x2a>
 800d01a:	89ab      	ldrh	r3, [r5, #12]
 800d01c:	059a      	lsls	r2, r3, #22
 800d01e:	d402      	bmi.n	800d026 <_vfiprintf_r+0x2a>
 800d020:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d022:	f7fc ffc8 	bl	8009fb6 <__retarget_lock_acquire_recursive>
 800d026:	89ab      	ldrh	r3, [r5, #12]
 800d028:	071b      	lsls	r3, r3, #28
 800d02a:	d501      	bpl.n	800d030 <_vfiprintf_r+0x34>
 800d02c:	692b      	ldr	r3, [r5, #16]
 800d02e:	b99b      	cbnz	r3, 800d058 <_vfiprintf_r+0x5c>
 800d030:	4629      	mov	r1, r5
 800d032:	4630      	mov	r0, r6
 800d034:	f000 f938 	bl	800d2a8 <__swsetup_r>
 800d038:	b170      	cbz	r0, 800d058 <_vfiprintf_r+0x5c>
 800d03a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d03c:	07dc      	lsls	r4, r3, #31
 800d03e:	d504      	bpl.n	800d04a <_vfiprintf_r+0x4e>
 800d040:	f04f 30ff 	mov.w	r0, #4294967295
 800d044:	b01d      	add	sp, #116	@ 0x74
 800d046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d04a:	89ab      	ldrh	r3, [r5, #12]
 800d04c:	0598      	lsls	r0, r3, #22
 800d04e:	d4f7      	bmi.n	800d040 <_vfiprintf_r+0x44>
 800d050:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d052:	f7fc ffb1 	bl	8009fb8 <__retarget_lock_release_recursive>
 800d056:	e7f3      	b.n	800d040 <_vfiprintf_r+0x44>
 800d058:	2300      	movs	r3, #0
 800d05a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d05c:	2320      	movs	r3, #32
 800d05e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d062:	f8cd 800c 	str.w	r8, [sp, #12]
 800d066:	2330      	movs	r3, #48	@ 0x30
 800d068:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d218 <_vfiprintf_r+0x21c>
 800d06c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d070:	f04f 0901 	mov.w	r9, #1
 800d074:	4623      	mov	r3, r4
 800d076:	469a      	mov	sl, r3
 800d078:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d07c:	b10a      	cbz	r2, 800d082 <_vfiprintf_r+0x86>
 800d07e:	2a25      	cmp	r2, #37	@ 0x25
 800d080:	d1f9      	bne.n	800d076 <_vfiprintf_r+0x7a>
 800d082:	ebba 0b04 	subs.w	fp, sl, r4
 800d086:	d00b      	beq.n	800d0a0 <_vfiprintf_r+0xa4>
 800d088:	465b      	mov	r3, fp
 800d08a:	4622      	mov	r2, r4
 800d08c:	4629      	mov	r1, r5
 800d08e:	4630      	mov	r0, r6
 800d090:	f7ff ffa2 	bl	800cfd8 <__sfputs_r>
 800d094:	3001      	adds	r0, #1
 800d096:	f000 80a7 	beq.w	800d1e8 <_vfiprintf_r+0x1ec>
 800d09a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d09c:	445a      	add	r2, fp
 800d09e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d0a0:	f89a 3000 	ldrb.w	r3, [sl]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	f000 809f 	beq.w	800d1e8 <_vfiprintf_r+0x1ec>
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	f04f 32ff 	mov.w	r2, #4294967295
 800d0b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0b4:	f10a 0a01 	add.w	sl, sl, #1
 800d0b8:	9304      	str	r3, [sp, #16]
 800d0ba:	9307      	str	r3, [sp, #28]
 800d0bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d0c0:	931a      	str	r3, [sp, #104]	@ 0x68
 800d0c2:	4654      	mov	r4, sl
 800d0c4:	2205      	movs	r2, #5
 800d0c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0ca:	4853      	ldr	r0, [pc, #332]	@ (800d218 <_vfiprintf_r+0x21c>)
 800d0cc:	f7f3 f908 	bl	80002e0 <memchr>
 800d0d0:	9a04      	ldr	r2, [sp, #16]
 800d0d2:	b9d8      	cbnz	r0, 800d10c <_vfiprintf_r+0x110>
 800d0d4:	06d1      	lsls	r1, r2, #27
 800d0d6:	bf44      	itt	mi
 800d0d8:	2320      	movmi	r3, #32
 800d0da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d0de:	0713      	lsls	r3, r2, #28
 800d0e0:	bf44      	itt	mi
 800d0e2:	232b      	movmi	r3, #43	@ 0x2b
 800d0e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d0e8:	f89a 3000 	ldrb.w	r3, [sl]
 800d0ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0ee:	d015      	beq.n	800d11c <_vfiprintf_r+0x120>
 800d0f0:	9a07      	ldr	r2, [sp, #28]
 800d0f2:	4654      	mov	r4, sl
 800d0f4:	2000      	movs	r0, #0
 800d0f6:	f04f 0c0a 	mov.w	ip, #10
 800d0fa:	4621      	mov	r1, r4
 800d0fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d100:	3b30      	subs	r3, #48	@ 0x30
 800d102:	2b09      	cmp	r3, #9
 800d104:	d94b      	bls.n	800d19e <_vfiprintf_r+0x1a2>
 800d106:	b1b0      	cbz	r0, 800d136 <_vfiprintf_r+0x13a>
 800d108:	9207      	str	r2, [sp, #28]
 800d10a:	e014      	b.n	800d136 <_vfiprintf_r+0x13a>
 800d10c:	eba0 0308 	sub.w	r3, r0, r8
 800d110:	fa09 f303 	lsl.w	r3, r9, r3
 800d114:	4313      	orrs	r3, r2
 800d116:	9304      	str	r3, [sp, #16]
 800d118:	46a2      	mov	sl, r4
 800d11a:	e7d2      	b.n	800d0c2 <_vfiprintf_r+0xc6>
 800d11c:	9b03      	ldr	r3, [sp, #12]
 800d11e:	1d19      	adds	r1, r3, #4
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	9103      	str	r1, [sp, #12]
 800d124:	2b00      	cmp	r3, #0
 800d126:	bfbb      	ittet	lt
 800d128:	425b      	neglt	r3, r3
 800d12a:	f042 0202 	orrlt.w	r2, r2, #2
 800d12e:	9307      	strge	r3, [sp, #28]
 800d130:	9307      	strlt	r3, [sp, #28]
 800d132:	bfb8      	it	lt
 800d134:	9204      	strlt	r2, [sp, #16]
 800d136:	7823      	ldrb	r3, [r4, #0]
 800d138:	2b2e      	cmp	r3, #46	@ 0x2e
 800d13a:	d10a      	bne.n	800d152 <_vfiprintf_r+0x156>
 800d13c:	7863      	ldrb	r3, [r4, #1]
 800d13e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d140:	d132      	bne.n	800d1a8 <_vfiprintf_r+0x1ac>
 800d142:	9b03      	ldr	r3, [sp, #12]
 800d144:	1d1a      	adds	r2, r3, #4
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	9203      	str	r2, [sp, #12]
 800d14a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d14e:	3402      	adds	r4, #2
 800d150:	9305      	str	r3, [sp, #20]
 800d152:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d228 <_vfiprintf_r+0x22c>
 800d156:	7821      	ldrb	r1, [r4, #0]
 800d158:	2203      	movs	r2, #3
 800d15a:	4650      	mov	r0, sl
 800d15c:	f7f3 f8c0 	bl	80002e0 <memchr>
 800d160:	b138      	cbz	r0, 800d172 <_vfiprintf_r+0x176>
 800d162:	9b04      	ldr	r3, [sp, #16]
 800d164:	eba0 000a 	sub.w	r0, r0, sl
 800d168:	2240      	movs	r2, #64	@ 0x40
 800d16a:	4082      	lsls	r2, r0
 800d16c:	4313      	orrs	r3, r2
 800d16e:	3401      	adds	r4, #1
 800d170:	9304      	str	r3, [sp, #16]
 800d172:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d176:	4829      	ldr	r0, [pc, #164]	@ (800d21c <_vfiprintf_r+0x220>)
 800d178:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d17c:	2206      	movs	r2, #6
 800d17e:	f7f3 f8af 	bl	80002e0 <memchr>
 800d182:	2800      	cmp	r0, #0
 800d184:	d03f      	beq.n	800d206 <_vfiprintf_r+0x20a>
 800d186:	4b26      	ldr	r3, [pc, #152]	@ (800d220 <_vfiprintf_r+0x224>)
 800d188:	bb1b      	cbnz	r3, 800d1d2 <_vfiprintf_r+0x1d6>
 800d18a:	9b03      	ldr	r3, [sp, #12]
 800d18c:	3307      	adds	r3, #7
 800d18e:	f023 0307 	bic.w	r3, r3, #7
 800d192:	3308      	adds	r3, #8
 800d194:	9303      	str	r3, [sp, #12]
 800d196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d198:	443b      	add	r3, r7
 800d19a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d19c:	e76a      	b.n	800d074 <_vfiprintf_r+0x78>
 800d19e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d1a2:	460c      	mov	r4, r1
 800d1a4:	2001      	movs	r0, #1
 800d1a6:	e7a8      	b.n	800d0fa <_vfiprintf_r+0xfe>
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	3401      	adds	r4, #1
 800d1ac:	9305      	str	r3, [sp, #20]
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	f04f 0c0a 	mov.w	ip, #10
 800d1b4:	4620      	mov	r0, r4
 800d1b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1ba:	3a30      	subs	r2, #48	@ 0x30
 800d1bc:	2a09      	cmp	r2, #9
 800d1be:	d903      	bls.n	800d1c8 <_vfiprintf_r+0x1cc>
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d0c6      	beq.n	800d152 <_vfiprintf_r+0x156>
 800d1c4:	9105      	str	r1, [sp, #20]
 800d1c6:	e7c4      	b.n	800d152 <_vfiprintf_r+0x156>
 800d1c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1cc:	4604      	mov	r4, r0
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	e7f0      	b.n	800d1b4 <_vfiprintf_r+0x1b8>
 800d1d2:	ab03      	add	r3, sp, #12
 800d1d4:	9300      	str	r3, [sp, #0]
 800d1d6:	462a      	mov	r2, r5
 800d1d8:	4b12      	ldr	r3, [pc, #72]	@ (800d224 <_vfiprintf_r+0x228>)
 800d1da:	a904      	add	r1, sp, #16
 800d1dc:	4630      	mov	r0, r6
 800d1de:	f7fb ff93 	bl	8009108 <_printf_float>
 800d1e2:	4607      	mov	r7, r0
 800d1e4:	1c78      	adds	r0, r7, #1
 800d1e6:	d1d6      	bne.n	800d196 <_vfiprintf_r+0x19a>
 800d1e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d1ea:	07d9      	lsls	r1, r3, #31
 800d1ec:	d405      	bmi.n	800d1fa <_vfiprintf_r+0x1fe>
 800d1ee:	89ab      	ldrh	r3, [r5, #12]
 800d1f0:	059a      	lsls	r2, r3, #22
 800d1f2:	d402      	bmi.n	800d1fa <_vfiprintf_r+0x1fe>
 800d1f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d1f6:	f7fc fedf 	bl	8009fb8 <__retarget_lock_release_recursive>
 800d1fa:	89ab      	ldrh	r3, [r5, #12]
 800d1fc:	065b      	lsls	r3, r3, #25
 800d1fe:	f53f af1f 	bmi.w	800d040 <_vfiprintf_r+0x44>
 800d202:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d204:	e71e      	b.n	800d044 <_vfiprintf_r+0x48>
 800d206:	ab03      	add	r3, sp, #12
 800d208:	9300      	str	r3, [sp, #0]
 800d20a:	462a      	mov	r2, r5
 800d20c:	4b05      	ldr	r3, [pc, #20]	@ (800d224 <_vfiprintf_r+0x228>)
 800d20e:	a904      	add	r1, sp, #16
 800d210:	4630      	mov	r0, r6
 800d212:	f7fc fa01 	bl	8009618 <_printf_i>
 800d216:	e7e4      	b.n	800d1e2 <_vfiprintf_r+0x1e6>
 800d218:	0800d8b1 	.word	0x0800d8b1
 800d21c:	0800d8bb 	.word	0x0800d8bb
 800d220:	08009109 	.word	0x08009109
 800d224:	0800cfd9 	.word	0x0800cfd9
 800d228:	0800d8b7 	.word	0x0800d8b7

0800d22c <__swbuf_r>:
 800d22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d22e:	460e      	mov	r6, r1
 800d230:	4614      	mov	r4, r2
 800d232:	4605      	mov	r5, r0
 800d234:	b118      	cbz	r0, 800d23e <__swbuf_r+0x12>
 800d236:	6a03      	ldr	r3, [r0, #32]
 800d238:	b90b      	cbnz	r3, 800d23e <__swbuf_r+0x12>
 800d23a:	f7fc fda5 	bl	8009d88 <__sinit>
 800d23e:	69a3      	ldr	r3, [r4, #24]
 800d240:	60a3      	str	r3, [r4, #8]
 800d242:	89a3      	ldrh	r3, [r4, #12]
 800d244:	071a      	lsls	r2, r3, #28
 800d246:	d501      	bpl.n	800d24c <__swbuf_r+0x20>
 800d248:	6923      	ldr	r3, [r4, #16]
 800d24a:	b943      	cbnz	r3, 800d25e <__swbuf_r+0x32>
 800d24c:	4621      	mov	r1, r4
 800d24e:	4628      	mov	r0, r5
 800d250:	f000 f82a 	bl	800d2a8 <__swsetup_r>
 800d254:	b118      	cbz	r0, 800d25e <__swbuf_r+0x32>
 800d256:	f04f 37ff 	mov.w	r7, #4294967295
 800d25a:	4638      	mov	r0, r7
 800d25c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d25e:	6823      	ldr	r3, [r4, #0]
 800d260:	6922      	ldr	r2, [r4, #16]
 800d262:	1a98      	subs	r0, r3, r2
 800d264:	6963      	ldr	r3, [r4, #20]
 800d266:	b2f6      	uxtb	r6, r6
 800d268:	4283      	cmp	r3, r0
 800d26a:	4637      	mov	r7, r6
 800d26c:	dc05      	bgt.n	800d27a <__swbuf_r+0x4e>
 800d26e:	4621      	mov	r1, r4
 800d270:	4628      	mov	r0, r5
 800d272:	f7ff fa45 	bl	800c700 <_fflush_r>
 800d276:	2800      	cmp	r0, #0
 800d278:	d1ed      	bne.n	800d256 <__swbuf_r+0x2a>
 800d27a:	68a3      	ldr	r3, [r4, #8]
 800d27c:	3b01      	subs	r3, #1
 800d27e:	60a3      	str	r3, [r4, #8]
 800d280:	6823      	ldr	r3, [r4, #0]
 800d282:	1c5a      	adds	r2, r3, #1
 800d284:	6022      	str	r2, [r4, #0]
 800d286:	701e      	strb	r6, [r3, #0]
 800d288:	6962      	ldr	r2, [r4, #20]
 800d28a:	1c43      	adds	r3, r0, #1
 800d28c:	429a      	cmp	r2, r3
 800d28e:	d004      	beq.n	800d29a <__swbuf_r+0x6e>
 800d290:	89a3      	ldrh	r3, [r4, #12]
 800d292:	07db      	lsls	r3, r3, #31
 800d294:	d5e1      	bpl.n	800d25a <__swbuf_r+0x2e>
 800d296:	2e0a      	cmp	r6, #10
 800d298:	d1df      	bne.n	800d25a <__swbuf_r+0x2e>
 800d29a:	4621      	mov	r1, r4
 800d29c:	4628      	mov	r0, r5
 800d29e:	f7ff fa2f 	bl	800c700 <_fflush_r>
 800d2a2:	2800      	cmp	r0, #0
 800d2a4:	d0d9      	beq.n	800d25a <__swbuf_r+0x2e>
 800d2a6:	e7d6      	b.n	800d256 <__swbuf_r+0x2a>

0800d2a8 <__swsetup_r>:
 800d2a8:	b538      	push	{r3, r4, r5, lr}
 800d2aa:	4b29      	ldr	r3, [pc, #164]	@ (800d350 <__swsetup_r+0xa8>)
 800d2ac:	4605      	mov	r5, r0
 800d2ae:	6818      	ldr	r0, [r3, #0]
 800d2b0:	460c      	mov	r4, r1
 800d2b2:	b118      	cbz	r0, 800d2bc <__swsetup_r+0x14>
 800d2b4:	6a03      	ldr	r3, [r0, #32]
 800d2b6:	b90b      	cbnz	r3, 800d2bc <__swsetup_r+0x14>
 800d2b8:	f7fc fd66 	bl	8009d88 <__sinit>
 800d2bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2c0:	0719      	lsls	r1, r3, #28
 800d2c2:	d422      	bmi.n	800d30a <__swsetup_r+0x62>
 800d2c4:	06da      	lsls	r2, r3, #27
 800d2c6:	d407      	bmi.n	800d2d8 <__swsetup_r+0x30>
 800d2c8:	2209      	movs	r2, #9
 800d2ca:	602a      	str	r2, [r5, #0]
 800d2cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d2d0:	81a3      	strh	r3, [r4, #12]
 800d2d2:	f04f 30ff 	mov.w	r0, #4294967295
 800d2d6:	e033      	b.n	800d340 <__swsetup_r+0x98>
 800d2d8:	0758      	lsls	r0, r3, #29
 800d2da:	d512      	bpl.n	800d302 <__swsetup_r+0x5a>
 800d2dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d2de:	b141      	cbz	r1, 800d2f2 <__swsetup_r+0x4a>
 800d2e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d2e4:	4299      	cmp	r1, r3
 800d2e6:	d002      	beq.n	800d2ee <__swsetup_r+0x46>
 800d2e8:	4628      	mov	r0, r5
 800d2ea:	f7fd fc4b 	bl	800ab84 <_free_r>
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	6363      	str	r3, [r4, #52]	@ 0x34
 800d2f2:	89a3      	ldrh	r3, [r4, #12]
 800d2f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d2f8:	81a3      	strh	r3, [r4, #12]
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	6063      	str	r3, [r4, #4]
 800d2fe:	6923      	ldr	r3, [r4, #16]
 800d300:	6023      	str	r3, [r4, #0]
 800d302:	89a3      	ldrh	r3, [r4, #12]
 800d304:	f043 0308 	orr.w	r3, r3, #8
 800d308:	81a3      	strh	r3, [r4, #12]
 800d30a:	6923      	ldr	r3, [r4, #16]
 800d30c:	b94b      	cbnz	r3, 800d322 <__swsetup_r+0x7a>
 800d30e:	89a3      	ldrh	r3, [r4, #12]
 800d310:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d314:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d318:	d003      	beq.n	800d322 <__swsetup_r+0x7a>
 800d31a:	4621      	mov	r1, r4
 800d31c:	4628      	mov	r0, r5
 800d31e:	f000 f883 	bl	800d428 <__smakebuf_r>
 800d322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d326:	f013 0201 	ands.w	r2, r3, #1
 800d32a:	d00a      	beq.n	800d342 <__swsetup_r+0x9a>
 800d32c:	2200      	movs	r2, #0
 800d32e:	60a2      	str	r2, [r4, #8]
 800d330:	6962      	ldr	r2, [r4, #20]
 800d332:	4252      	negs	r2, r2
 800d334:	61a2      	str	r2, [r4, #24]
 800d336:	6922      	ldr	r2, [r4, #16]
 800d338:	b942      	cbnz	r2, 800d34c <__swsetup_r+0xa4>
 800d33a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d33e:	d1c5      	bne.n	800d2cc <__swsetup_r+0x24>
 800d340:	bd38      	pop	{r3, r4, r5, pc}
 800d342:	0799      	lsls	r1, r3, #30
 800d344:	bf58      	it	pl
 800d346:	6962      	ldrpl	r2, [r4, #20]
 800d348:	60a2      	str	r2, [r4, #8]
 800d34a:	e7f4      	b.n	800d336 <__swsetup_r+0x8e>
 800d34c:	2000      	movs	r0, #0
 800d34e:	e7f7      	b.n	800d340 <__swsetup_r+0x98>
 800d350:	2400001c 	.word	0x2400001c

0800d354 <_raise_r>:
 800d354:	291f      	cmp	r1, #31
 800d356:	b538      	push	{r3, r4, r5, lr}
 800d358:	4605      	mov	r5, r0
 800d35a:	460c      	mov	r4, r1
 800d35c:	d904      	bls.n	800d368 <_raise_r+0x14>
 800d35e:	2316      	movs	r3, #22
 800d360:	6003      	str	r3, [r0, #0]
 800d362:	f04f 30ff 	mov.w	r0, #4294967295
 800d366:	bd38      	pop	{r3, r4, r5, pc}
 800d368:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d36a:	b112      	cbz	r2, 800d372 <_raise_r+0x1e>
 800d36c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d370:	b94b      	cbnz	r3, 800d386 <_raise_r+0x32>
 800d372:	4628      	mov	r0, r5
 800d374:	f000 f830 	bl	800d3d8 <_getpid_r>
 800d378:	4622      	mov	r2, r4
 800d37a:	4601      	mov	r1, r0
 800d37c:	4628      	mov	r0, r5
 800d37e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d382:	f000 b817 	b.w	800d3b4 <_kill_r>
 800d386:	2b01      	cmp	r3, #1
 800d388:	d00a      	beq.n	800d3a0 <_raise_r+0x4c>
 800d38a:	1c59      	adds	r1, r3, #1
 800d38c:	d103      	bne.n	800d396 <_raise_r+0x42>
 800d38e:	2316      	movs	r3, #22
 800d390:	6003      	str	r3, [r0, #0]
 800d392:	2001      	movs	r0, #1
 800d394:	e7e7      	b.n	800d366 <_raise_r+0x12>
 800d396:	2100      	movs	r1, #0
 800d398:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d39c:	4620      	mov	r0, r4
 800d39e:	4798      	blx	r3
 800d3a0:	2000      	movs	r0, #0
 800d3a2:	e7e0      	b.n	800d366 <_raise_r+0x12>

0800d3a4 <raise>:
 800d3a4:	4b02      	ldr	r3, [pc, #8]	@ (800d3b0 <raise+0xc>)
 800d3a6:	4601      	mov	r1, r0
 800d3a8:	6818      	ldr	r0, [r3, #0]
 800d3aa:	f7ff bfd3 	b.w	800d354 <_raise_r>
 800d3ae:	bf00      	nop
 800d3b0:	2400001c 	.word	0x2400001c

0800d3b4 <_kill_r>:
 800d3b4:	b538      	push	{r3, r4, r5, lr}
 800d3b6:	4d07      	ldr	r5, [pc, #28]	@ (800d3d4 <_kill_r+0x20>)
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	4604      	mov	r4, r0
 800d3bc:	4608      	mov	r0, r1
 800d3be:	4611      	mov	r1, r2
 800d3c0:	602b      	str	r3, [r5, #0]
 800d3c2:	f7f4 f877 	bl	80014b4 <_kill>
 800d3c6:	1c43      	adds	r3, r0, #1
 800d3c8:	d102      	bne.n	800d3d0 <_kill_r+0x1c>
 800d3ca:	682b      	ldr	r3, [r5, #0]
 800d3cc:	b103      	cbz	r3, 800d3d0 <_kill_r+0x1c>
 800d3ce:	6023      	str	r3, [r4, #0]
 800d3d0:	bd38      	pop	{r3, r4, r5, pc}
 800d3d2:	bf00      	nop
 800d3d4:	2400041c 	.word	0x2400041c

0800d3d8 <_getpid_r>:
 800d3d8:	f7f4 b864 	b.w	80014a4 <_getpid>

0800d3dc <__swhatbuf_r>:
 800d3dc:	b570      	push	{r4, r5, r6, lr}
 800d3de:	460c      	mov	r4, r1
 800d3e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3e4:	2900      	cmp	r1, #0
 800d3e6:	b096      	sub	sp, #88	@ 0x58
 800d3e8:	4615      	mov	r5, r2
 800d3ea:	461e      	mov	r6, r3
 800d3ec:	da0d      	bge.n	800d40a <__swhatbuf_r+0x2e>
 800d3ee:	89a3      	ldrh	r3, [r4, #12]
 800d3f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d3f4:	f04f 0100 	mov.w	r1, #0
 800d3f8:	bf14      	ite	ne
 800d3fa:	2340      	movne	r3, #64	@ 0x40
 800d3fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d400:	2000      	movs	r0, #0
 800d402:	6031      	str	r1, [r6, #0]
 800d404:	602b      	str	r3, [r5, #0]
 800d406:	b016      	add	sp, #88	@ 0x58
 800d408:	bd70      	pop	{r4, r5, r6, pc}
 800d40a:	466a      	mov	r2, sp
 800d40c:	f000 f848 	bl	800d4a0 <_fstat_r>
 800d410:	2800      	cmp	r0, #0
 800d412:	dbec      	blt.n	800d3ee <__swhatbuf_r+0x12>
 800d414:	9901      	ldr	r1, [sp, #4]
 800d416:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d41a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d41e:	4259      	negs	r1, r3
 800d420:	4159      	adcs	r1, r3
 800d422:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d426:	e7eb      	b.n	800d400 <__swhatbuf_r+0x24>

0800d428 <__smakebuf_r>:
 800d428:	898b      	ldrh	r3, [r1, #12]
 800d42a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d42c:	079d      	lsls	r5, r3, #30
 800d42e:	4606      	mov	r6, r0
 800d430:	460c      	mov	r4, r1
 800d432:	d507      	bpl.n	800d444 <__smakebuf_r+0x1c>
 800d434:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d438:	6023      	str	r3, [r4, #0]
 800d43a:	6123      	str	r3, [r4, #16]
 800d43c:	2301      	movs	r3, #1
 800d43e:	6163      	str	r3, [r4, #20]
 800d440:	b003      	add	sp, #12
 800d442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d444:	ab01      	add	r3, sp, #4
 800d446:	466a      	mov	r2, sp
 800d448:	f7ff ffc8 	bl	800d3dc <__swhatbuf_r>
 800d44c:	9f00      	ldr	r7, [sp, #0]
 800d44e:	4605      	mov	r5, r0
 800d450:	4639      	mov	r1, r7
 800d452:	4630      	mov	r0, r6
 800d454:	f7fd fc0a 	bl	800ac6c <_malloc_r>
 800d458:	b948      	cbnz	r0, 800d46e <__smakebuf_r+0x46>
 800d45a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d45e:	059a      	lsls	r2, r3, #22
 800d460:	d4ee      	bmi.n	800d440 <__smakebuf_r+0x18>
 800d462:	f023 0303 	bic.w	r3, r3, #3
 800d466:	f043 0302 	orr.w	r3, r3, #2
 800d46a:	81a3      	strh	r3, [r4, #12]
 800d46c:	e7e2      	b.n	800d434 <__smakebuf_r+0xc>
 800d46e:	89a3      	ldrh	r3, [r4, #12]
 800d470:	6020      	str	r0, [r4, #0]
 800d472:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d476:	81a3      	strh	r3, [r4, #12]
 800d478:	9b01      	ldr	r3, [sp, #4]
 800d47a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d47e:	b15b      	cbz	r3, 800d498 <__smakebuf_r+0x70>
 800d480:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d484:	4630      	mov	r0, r6
 800d486:	f000 f81d 	bl	800d4c4 <_isatty_r>
 800d48a:	b128      	cbz	r0, 800d498 <__smakebuf_r+0x70>
 800d48c:	89a3      	ldrh	r3, [r4, #12]
 800d48e:	f023 0303 	bic.w	r3, r3, #3
 800d492:	f043 0301 	orr.w	r3, r3, #1
 800d496:	81a3      	strh	r3, [r4, #12]
 800d498:	89a3      	ldrh	r3, [r4, #12]
 800d49a:	431d      	orrs	r5, r3
 800d49c:	81a5      	strh	r5, [r4, #12]
 800d49e:	e7cf      	b.n	800d440 <__smakebuf_r+0x18>

0800d4a0 <_fstat_r>:
 800d4a0:	b538      	push	{r3, r4, r5, lr}
 800d4a2:	4d07      	ldr	r5, [pc, #28]	@ (800d4c0 <_fstat_r+0x20>)
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	4604      	mov	r4, r0
 800d4a8:	4608      	mov	r0, r1
 800d4aa:	4611      	mov	r1, r2
 800d4ac:	602b      	str	r3, [r5, #0]
 800d4ae:	f7f4 f861 	bl	8001574 <_fstat>
 800d4b2:	1c43      	adds	r3, r0, #1
 800d4b4:	d102      	bne.n	800d4bc <_fstat_r+0x1c>
 800d4b6:	682b      	ldr	r3, [r5, #0]
 800d4b8:	b103      	cbz	r3, 800d4bc <_fstat_r+0x1c>
 800d4ba:	6023      	str	r3, [r4, #0]
 800d4bc:	bd38      	pop	{r3, r4, r5, pc}
 800d4be:	bf00      	nop
 800d4c0:	2400041c 	.word	0x2400041c

0800d4c4 <_isatty_r>:
 800d4c4:	b538      	push	{r3, r4, r5, lr}
 800d4c6:	4d06      	ldr	r5, [pc, #24]	@ (800d4e0 <_isatty_r+0x1c>)
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	4604      	mov	r4, r0
 800d4cc:	4608      	mov	r0, r1
 800d4ce:	602b      	str	r3, [r5, #0]
 800d4d0:	f7f4 f860 	bl	8001594 <_isatty>
 800d4d4:	1c43      	adds	r3, r0, #1
 800d4d6:	d102      	bne.n	800d4de <_isatty_r+0x1a>
 800d4d8:	682b      	ldr	r3, [r5, #0]
 800d4da:	b103      	cbz	r3, 800d4de <_isatty_r+0x1a>
 800d4dc:	6023      	str	r3, [r4, #0]
 800d4de:	bd38      	pop	{r3, r4, r5, pc}
 800d4e0:	2400041c 	.word	0x2400041c

0800d4e4 <_init>:
 800d4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4e6:	bf00      	nop
 800d4e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4ea:	bc08      	pop	{r3}
 800d4ec:	469e      	mov	lr, r3
 800d4ee:	4770      	bx	lr

0800d4f0 <_fini>:
 800d4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4f2:	bf00      	nop
 800d4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4f6:	bc08      	pop	{r3}
 800d4f8:	469e      	mov	lr, r3
 800d4fa:	4770      	bx	lr
