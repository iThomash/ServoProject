
projekt_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de1c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  0800e0c0  0800e0c0  0000f0c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e538  0800e538  000101d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e538  0800e538  0000f538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e540  0800e540  000101d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e540  0800e540  0000f540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e544  0800e544  0000f544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  24000000  0800e548  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  240001d8  0800e720  000101d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240004a4  0800e720  000104a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000101d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c464  00000000  00000000  00010206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036b2  00000000  00000000  0002c66a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c0  00000000  00000000  0002fd20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010fa  00000000  00000000  000312e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003cc2e  00000000  00000000  000323da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020232  00000000  00000000  0006f008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018a1a7  00000000  00000000  0008f23a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002193e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f04  00000000  00000000  00219424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00220328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e0a4 	.word	0x0800e0a4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800e0a4 	.word	0x0800e0a4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a6c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b64 <SystemInit+0xfc>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a72:	4a3c      	ldr	r2, [pc, #240]	@ (8000b64 <SystemInit+0xfc>)
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a7c:	4b39      	ldr	r3, [pc, #228]	@ (8000b64 <SystemInit+0xfc>)
 8000a7e:	691b      	ldr	r3, [r3, #16]
 8000a80:	4a38      	ldr	r2, [pc, #224]	@ (8000b64 <SystemInit+0xfc>)
 8000a82:	f043 0310 	orr.w	r3, r3, #16
 8000a86:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a88:	4b37      	ldr	r3, [pc, #220]	@ (8000b68 <SystemInit+0x100>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f003 030f 	and.w	r3, r3, #15
 8000a90:	2b06      	cmp	r3, #6
 8000a92:	d807      	bhi.n	8000aa4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a94:	4b34      	ldr	r3, [pc, #208]	@ (8000b68 <SystemInit+0x100>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f023 030f 	bic.w	r3, r3, #15
 8000a9c:	4a32      	ldr	r2, [pc, #200]	@ (8000b68 <SystemInit+0x100>)
 8000a9e:	f043 0307 	orr.w	r3, r3, #7
 8000aa2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aa4:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <SystemInit+0x104>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a30      	ldr	r2, [pc, #192]	@ (8000b6c <SystemInit+0x104>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <SystemInit+0x104>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b6c <SystemInit+0x104>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	492c      	ldr	r1, [pc, #176]	@ (8000b6c <SystemInit+0x104>)
 8000abc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b70 <SystemInit+0x108>)
 8000abe:	4013      	ands	r3, r2
 8000ac0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ac2:	4b29      	ldr	r3, [pc, #164]	@ (8000b68 <SystemInit+0x100>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f003 0308 	and.w	r3, r3, #8
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d007      	beq.n	8000ade <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ace:	4b26      	ldr	r3, [pc, #152]	@ (8000b68 <SystemInit+0x100>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f023 030f 	bic.w	r3, r3, #15
 8000ad6:	4a24      	ldr	r2, [pc, #144]	@ (8000b68 <SystemInit+0x100>)
 8000ad8:	f043 0307 	orr.w	r3, r3, #7
 8000adc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ade:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <SystemInit+0x104>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <SystemInit+0x104>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000aea:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <SystemInit+0x104>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000af0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b6c <SystemInit+0x104>)
 8000af2:	4a20      	ldr	r2, [pc, #128]	@ (8000b74 <SystemInit+0x10c>)
 8000af4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000af6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <SystemInit+0x104>)
 8000af8:	4a1f      	ldr	r2, [pc, #124]	@ (8000b78 <SystemInit+0x110>)
 8000afa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <SystemInit+0x104>)
 8000afe:	4a1f      	ldr	r2, [pc, #124]	@ (8000b7c <SystemInit+0x114>)
 8000b00:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <SystemInit+0x104>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b08:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <SystemInit+0x104>)
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b7c <SystemInit+0x114>)
 8000b0c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b0e:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <SystemInit+0x104>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b14:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <SystemInit+0x104>)
 8000b16:	4a19      	ldr	r2, [pc, #100]	@ (8000b7c <SystemInit+0x114>)
 8000b18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <SystemInit+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <SystemInit+0x104>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a11      	ldr	r2, [pc, #68]	@ (8000b6c <SystemInit+0x104>)
 8000b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <SystemInit+0x104>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <SystemInit+0x118>)
 8000b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b36:	4a12      	ldr	r2, [pc, #72]	@ (8000b80 <SystemInit+0x118>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <SystemInit+0x11c>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <SystemInit+0x120>)
 8000b44:	4013      	ands	r3, r2
 8000b46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b4a:	d202      	bcs.n	8000b52 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <SystemInit+0x124>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b52:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <SystemInit+0x128>)
 8000b54:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b58:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00
 8000b68:	52002000 	.word	0x52002000
 8000b6c:	58024400 	.word	0x58024400
 8000b70:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b74:	02020200 	.word	0x02020200
 8000b78:	01ff0000 	.word	0x01ff0000
 8000b7c:	01010280 	.word	0x01010280
 8000b80:	580000c0 	.word	0x580000c0
 8000b84:	5c001000 	.word	0x5c001000
 8000b88:	ffff0000 	.word	0xffff0000
 8000b8c:	51008108 	.word	0x51008108
 8000b90:	52004000 	.word	0x52004000

08000b94 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	@ 0x30
 8000b98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9a:	f107 031c 	add.w	r3, r7, #28
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
 8000ba8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000baa:	4b73      	ldr	r3, [pc, #460]	@ (8000d78 <MX_GPIO_Init+0x1e4>)
 8000bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb0:	4a71      	ldr	r2, [pc, #452]	@ (8000d78 <MX_GPIO_Init+0x1e4>)
 8000bb2:	f043 0304 	orr.w	r3, r3, #4
 8000bb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bba:	4b6f      	ldr	r3, [pc, #444]	@ (8000d78 <MX_GPIO_Init+0x1e4>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc0:	f003 0304 	and.w	r3, r3, #4
 8000bc4:	61bb      	str	r3, [r7, #24]
 8000bc6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc8:	4b6b      	ldr	r3, [pc, #428]	@ (8000d78 <MX_GPIO_Init+0x1e4>)
 8000bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bce:	4a6a      	ldr	r2, [pc, #424]	@ (8000d78 <MX_GPIO_Init+0x1e4>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bd8:	4b67      	ldr	r3, [pc, #412]	@ (8000d78 <MX_GPIO_Init+0x1e4>)
 8000bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be6:	4b64      	ldr	r3, [pc, #400]	@ (8000d78 <MX_GPIO_Init+0x1e4>)
 8000be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bec:	4a62      	ldr	r2, [pc, #392]	@ (8000d78 <MX_GPIO_Init+0x1e4>)
 8000bee:	f043 0302 	orr.w	r3, r3, #2
 8000bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bf6:	4b60      	ldr	r3, [pc, #384]	@ (8000d78 <MX_GPIO_Init+0x1e4>)
 8000bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bfc:	f003 0302 	and.w	r3, r3, #2
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c04:	4b5c      	ldr	r3, [pc, #368]	@ (8000d78 <MX_GPIO_Init+0x1e4>)
 8000c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c0a:	4a5b      	ldr	r2, [pc, #364]	@ (8000d78 <MX_GPIO_Init+0x1e4>)
 8000c0c:	f043 0308 	orr.w	r3, r3, #8
 8000c10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c14:	4b58      	ldr	r3, [pc, #352]	@ (8000d78 <MX_GPIO_Init+0x1e4>)
 8000c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c1a:	f003 0308 	and.w	r3, r3, #8
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c22:	4b55      	ldr	r3, [pc, #340]	@ (8000d78 <MX_GPIO_Init+0x1e4>)
 8000c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c28:	4a53      	ldr	r2, [pc, #332]	@ (8000d78 <MX_GPIO_Init+0x1e4>)
 8000c2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c32:	4b51      	ldr	r3, [pc, #324]	@ (8000d78 <MX_GPIO_Init+0x1e4>)
 8000c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c40:	4b4d      	ldr	r3, [pc, #308]	@ (8000d78 <MX_GPIO_Init+0x1e4>)
 8000c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c46:	4a4c      	ldr	r2, [pc, #304]	@ (8000d78 <MX_GPIO_Init+0x1e4>)
 8000c48:	f043 0310 	orr.w	r3, r3, #16
 8000c4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c50:	4b49      	ldr	r3, [pc, #292]	@ (8000d78 <MX_GPIO_Init+0x1e4>)
 8000c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c56:	f003 0310 	and.w	r3, r3, #16
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000c64:	4845      	ldr	r0, [pc, #276]	@ (8000d7c <MX_GPIO_Init+0x1e8>)
 8000c66:	f001 ff6b 	bl	8002b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2102      	movs	r1, #2
 8000c6e:	4844      	ldr	r0, [pc, #272]	@ (8000d80 <MX_GPIO_Init+0x1ec>)
 8000c70:	f001 ff66 	bl	8002b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000c74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	4619      	mov	r1, r3
 8000c88:	483e      	ldr	r0, [pc, #248]	@ (8000d84 <MX_GPIO_Init+0x1f0>)
 8000c8a:	f001 fda9 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c8e:	2332      	movs	r3, #50	@ 0x32
 8000c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c9e:	230b      	movs	r3, #11
 8000ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca2:	f107 031c 	add.w	r3, r7, #28
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4836      	ldr	r0, [pc, #216]	@ (8000d84 <MX_GPIO_Init+0x1f0>)
 8000caa:	f001 fd99 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000cae:	2386      	movs	r3, #134	@ 0x86
 8000cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cbe:	230b      	movs	r3, #11
 8000cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc2:	f107 031c 	add.w	r3, r7, #28
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	482f      	ldr	r0, [pc, #188]	@ (8000d88 <MX_GPIO_Init+0x1f4>)
 8000cca:	f001 fd89 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin;
 8000cce:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000cd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4825      	ldr	r0, [pc, #148]	@ (8000d7c <MX_GPIO_Init+0x1e8>)
 8000ce8:	f001 fd7a 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cfe:	230b      	movs	r3, #11
 8000d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	4619      	mov	r1, r3
 8000d08:	481c      	ldr	r0, [pc, #112]	@ (8000d7c <MX_GPIO_Init+0x1e8>)
 8000d0a:	f001 fd69 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000d0e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000d12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000d20:	230a      	movs	r3, #10
 8000d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d24:	f107 031c 	add.w	r3, r7, #28
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4817      	ldr	r0, [pc, #92]	@ (8000d88 <MX_GPIO_Init+0x1f4>)
 8000d2c:	f001 fd58 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000d30:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d42:	230b      	movs	r3, #11
 8000d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	480f      	ldr	r0, [pc, #60]	@ (8000d8c <MX_GPIO_Init+0x1f8>)
 8000d4e:	f001 fd47 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000d52:	2302      	movs	r3, #2
 8000d54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d56:	2301      	movs	r3, #1
 8000d58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000d62:	f107 031c 	add.w	r3, r7, #28
 8000d66:	4619      	mov	r1, r3
 8000d68:	4805      	ldr	r0, [pc, #20]	@ (8000d80 <MX_GPIO_Init+0x1ec>)
 8000d6a:	f001 fd39 	bl	80027e0 <HAL_GPIO_Init>

}
 8000d6e:	bf00      	nop
 8000d70:	3730      	adds	r7, #48	@ 0x30
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	58024400 	.word	0x58024400
 8000d7c:	58020400 	.word	0x58020400
 8000d80:	58021000 	.word	0x58021000
 8000d84:	58020800 	.word	0x58020800
 8000d88:	58020000 	.word	0x58020000
 8000d8c:	58021800 	.word	0x58021800

08000d90 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d94:	4b1b      	ldr	r3, [pc, #108]	@ (8000e04 <MX_I2C2_Init+0x74>)
 8000d96:	4a1c      	ldr	r2, [pc, #112]	@ (8000e08 <MX_I2C2_Init+0x78>)
 8000d98:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8000d9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e04 <MX_I2C2_Init+0x74>)
 8000d9c:	4a1b      	ldr	r2, [pc, #108]	@ (8000e0c <MX_I2C2_Init+0x7c>)
 8000d9e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000da0:	4b18      	ldr	r3, [pc, #96]	@ (8000e04 <MX_I2C2_Init+0x74>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000da6:	4b17      	ldr	r3, [pc, #92]	@ (8000e04 <MX_I2C2_Init+0x74>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dac:	4b15      	ldr	r3, [pc, #84]	@ (8000e04 <MX_I2C2_Init+0x74>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000db2:	4b14      	ldr	r3, [pc, #80]	@ (8000e04 <MX_I2C2_Init+0x74>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000db8:	4b12      	ldr	r3, [pc, #72]	@ (8000e04 <MX_I2C2_Init+0x74>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dbe:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <MX_I2C2_Init+0x74>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e04 <MX_I2C2_Init+0x74>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000dca:	480e      	ldr	r0, [pc, #56]	@ (8000e04 <MX_I2C2_Init+0x74>)
 8000dcc:	f001 ff00 	bl	8002bd0 <HAL_I2C_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000dd6:	f000 fac9 	bl	800136c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4809      	ldr	r0, [pc, #36]	@ (8000e04 <MX_I2C2_Init+0x74>)
 8000dde:	f002 fac5 	bl	800336c <HAL_I2CEx_ConfigAnalogFilter>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000de8:	f000 fac0 	bl	800136c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000dec:	2100      	movs	r1, #0
 8000dee:	4805      	ldr	r0, [pc, #20]	@ (8000e04 <MX_I2C2_Init+0x74>)
 8000df0:	f002 fb07 	bl	8003402 <HAL_I2CEx_ConfigDigitalFilter>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000dfa:	f000 fab7 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	240001f4 	.word	0x240001f4
 8000e08:	40005800 	.word	0x40005800
 8000e0c:	00707cbb 	.word	0x00707cbb

08000e10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b0ba      	sub	sp, #232	@ 0xe8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e28:	f107 0310 	add.w	r3, r7, #16
 8000e2c:	22c0      	movs	r2, #192	@ 0xc0
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f009 fe22 	bl	800aa7a <memset>
  if(i2cHandle->Instance==I2C2)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a27      	ldr	r2, [pc, #156]	@ (8000ed8 <HAL_I2C_MspInit+0xc8>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d146      	bne.n	8000ece <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e40:	f04f 0208 	mov.w	r2, #8
 8000e44:	f04f 0300 	mov.w	r3, #0
 8000e48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e52:	f107 0310 	add.w	r3, r7, #16
 8000e56:	4618      	mov	r0, r3
 8000e58:	f003 fb60 	bl	800451c <HAL_RCCEx_PeriphCLKConfig>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000e62:	f000 fa83 	bl	800136c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e66:	4b1d      	ldr	r3, [pc, #116]	@ (8000edc <HAL_I2C_MspInit+0xcc>)
 8000e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000edc <HAL_I2C_MspInit+0xcc>)
 8000e6e:	f043 0302 	orr.w	r3, r3, #2
 8000e72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e76:	4b19      	ldr	r3, [pc, #100]	@ (8000edc <HAL_I2C_MspInit+0xcc>)
 8000e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e7c:	f003 0302 	and.w	r3, r3, #2
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e84:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e88:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e8c:	2312      	movs	r3, #18
 8000e8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e9e:	2304      	movs	r3, #4
 8000ea0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	480d      	ldr	r0, [pc, #52]	@ (8000ee0 <HAL_I2C_MspInit+0xd0>)
 8000eac:	f001 fc98 	bl	80027e0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000edc <HAL_I2C_MspInit+0xcc>)
 8000eb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000eb6:	4a09      	ldr	r2, [pc, #36]	@ (8000edc <HAL_I2C_MspInit+0xcc>)
 8000eb8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ebc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ec0:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <HAL_I2C_MspInit+0xcc>)
 8000ec2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ec6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000ece:	bf00      	nop
 8000ed0:	37e8      	adds	r7, #232	@ 0xe8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40005800 	.word	0x40005800
 8000edc:	58024400 	.word	0x58024400
 8000ee0:	58020400 	.word	0x58020400

08000ee4 <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 8000efa:	2308      	movs	r3, #8
 8000efc:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 8000efe:	2028      	movs	r0, #40	@ 0x28
 8000f00:	f000 fdca 	bl	8001a98 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	7bfa      	ldrb	r2, [r7, #15]
 8000f0a:	2130      	movs	r1, #48	@ 0x30
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 f829 	bl	8000f64 <lcd_write>
	HAL_Delay(5);
 8000f12:	2005      	movs	r0, #5
 8000f14:	f000 fdc0 	bl	8001a98 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	7bfa      	ldrb	r2, [r7, #15]
 8000f1e:	2130      	movs	r1, #48	@ 0x30
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 f81f 	bl	8000f64 <lcd_write>
	HAL_Delay(1);
 8000f26:	2001      	movs	r0, #1
 8000f28:	f000 fdb6 	bl	8001a98 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	7bfa      	ldrb	r2, [r7, #15]
 8000f32:	2130      	movs	r1, #48	@ 0x30
 8000f34:	4618      	mov	r0, r3
 8000f36:	f000 f815 	bl	8000f64 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	7bfa      	ldrb	r2, [r7, #15]
 8000f40:	2102      	movs	r1, #2
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 f80e 	bl	8000f64 <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	7bfa      	ldrb	r2, [r7, #15]
 8000f4e:	210c      	movs	r1, #12
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 f807 	bl	8000f64 <lcd_write>

	/* clear */
	lcd_clear(lcd);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f000 f89f 	bl	800109a <lcd_clear>

}
 8000f5c:	bf00      	nop
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af02      	add	r7, sp, #8
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
 8000f6e:	460b      	mov	r3, r1
 8000f70:	71bb      	strb	r3, [r7, #6]
 8000f72:	4613      	mov	r3, r2
 8000f74:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 8000f76:	79bb      	ldrb	r3, [r7, #6]
 8000f78:	f023 030f 	bic.w	r3, r3, #15
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	797b      	ldrb	r3, [r7, #5]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	f043 0304 	orr.w	r3, r3, #4
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 8000f8c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f90:	f023 030f 	bic.w	r3, r3, #15
 8000f94:	b25a      	sxtb	r2, r3
 8000f96:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	b25b      	sxtb	r3, r3
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 8000fa2:	79bb      	ldrb	r3, [r7, #6]
 8000fa4:	011b      	lsls	r3, r3, #4
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	797b      	ldrb	r3, [r7, #5]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	f043 0304 	orr.w	r3, r3, #4
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 8000fb6:	79bb      	ldrb	r3, [r7, #6]
 8000fb8:	011b      	lsls	r3, r3, #4
 8000fba:	b25a      	sxtb	r2, r3
 8000fbc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	b25b      	sxtb	r3, r3
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	b299      	uxth	r1, r3
 8000fcc:	f107 020c 	add.w	r2, r7, #12
 8000fd0:	2364      	movs	r3, #100	@ 0x64
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	4805      	ldr	r0, [pc, #20]	@ (8000fec <lcd_write+0x88>)
 8000fd8:	f001 fe96 	bl	8002d08 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8000fdc:	2005      	movs	r0, #5
 8000fde:	f000 fd5b 	bl	8001a98 <HAL_Delay>
}
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	240001f4 	.word	0x240001f4

08000ff0 <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	73fb      	strb	r3, [r7, #15]
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 800100a:	2308      	movs	r3, #8
 800100c:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 f843 	bl	800109a <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	7bfa      	ldrb	r2, [r7, #15]
 800101a:	2180      	movs	r1, #128	@ 0x80
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ffa1 	bl	8000f64 <lcd_write>
	while(lcd->f_line[i])
 8001022:	e00f      	b.n	8001044 <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	7818      	ldrb	r0, [r3, #0]
 8001028:	7bbb      	ldrb	r3, [r7, #14]
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	7859      	ldrb	r1, [r3, #1]
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	f043 0301 	orr.w	r3, r3, #1
 8001036:	b2db      	uxtb	r3, r3
 8001038:	461a      	mov	r2, r3
 800103a:	f7ff ff93 	bl	8000f64 <lcd_write>
		i++;
 800103e:	7bbb      	ldrb	r3, [r7, #14]
 8001040:	3301      	adds	r3, #1
 8001042:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 8001044:	7bbb      	ldrb	r3, [r7, #14]
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	785b      	ldrb	r3, [r3, #1]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d1e9      	bne.n	8001024 <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	7bfa      	ldrb	r2, [r7, #15]
 800105a:	21c0      	movs	r1, #192	@ 0xc0
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff81 	bl	8000f64 <lcd_write>
	while(lcd->s_line[i])
 8001062:	e00f      	b.n	8001084 <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	7818      	ldrb	r0, [r3, #0]
 8001068:	7bbb      	ldrb	r3, [r7, #14]
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	7c99      	ldrb	r1, [r3, #18]
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	b2db      	uxtb	r3, r3
 8001078:	461a      	mov	r2, r3
 800107a:	f7ff ff73 	bl	8000f64 <lcd_write>
		i++;
 800107e:	7bbb      	ldrb	r3, [r7, #14]
 8001080:	3301      	adds	r3, #1
 8001082:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 8001084:	7bbb      	ldrb	r3, [r7, #14]
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	7c9b      	ldrb	r3, [r3, #18]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d1e9      	bne.n	8001064 <lcd_display+0x74>
	}
}
 8001090:	bf00      	nop
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b084      	sub	sp, #16
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 80010b0:	2308      	movs	r3, #8
 80010b2:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	7bfa      	ldrb	r2, [r7, #15]
 80010ba:	2101      	movs	r1, #1
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff51 	bl	8000f64 <lcd_write>
}
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <SendDebugMessage>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void SendDebugMessage(const char* message) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff f953 	bl	8000380 <strlen>
 80010da:	4603      	mov	r3, r0
 80010dc:	b29a      	uxth	r2, r3
 80010de:	f04f 33ff 	mov.w	r3, #4294967295
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	4803      	ldr	r0, [pc, #12]	@ (80010f4 <SendDebugMessage+0x28>)
 80010e6:	f006 f981 	bl	80073ec <HAL_UART_Transmit>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	240002c0 	.word	0x240002c0

080010f8 <HAL_UART_RxCpltCallback>:
    snprintf(buffer, sizeof(buffer), "%.2f", value);
    SendDebugMessage(buffer);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	SendDebugMessage(rx_data);
 8001100:	4811      	ldr	r0, [pc, #68]	@ (8001148 <HAL_UART_RxCpltCallback+0x50>)
 8001102:	f7ff ffe3 	bl	80010cc <SendDebugMessage>
	int rx_data_int = 100*(rx_data[0]-'0') + 10*(rx_data[1]-'0') + (rx_data[2]-'0');
 8001106:	4b10      	ldr	r3, [pc, #64]	@ (8001148 <HAL_UART_RxCpltCallback+0x50>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	3b30      	subs	r3, #48	@ 0x30
 800110c:	2264      	movs	r2, #100	@ 0x64
 800110e:	fb02 f103 	mul.w	r1, r2, r3
 8001112:	4b0d      	ldr	r3, [pc, #52]	@ (8001148 <HAL_UART_RxCpltCallback+0x50>)
 8001114:	785b      	ldrb	r3, [r3, #1]
 8001116:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 800111a:	4613      	mov	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4413      	add	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	18ca      	adds	r2, r1, r3
 8001124:	4b08      	ldr	r3, [pc, #32]	@ (8001148 <HAL_UART_RxCpltCallback+0x50>)
 8001126:	789b      	ldrb	r3, [r3, #2]
 8001128:	3b30      	subs	r3, #48	@ 0x30
 800112a:	4413      	add	r3, r2
 800112c:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, rx_data_int);
 800112e:	4b07      	ldr	r3, [pc, #28]	@ (800114c <HAL_UART_RxCpltCallback+0x54>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_UART_Receive_IT(&huart3, &rx_data, 3);
 8001136:	2203      	movs	r2, #3
 8001138:	4903      	ldr	r1, [pc, #12]	@ (8001148 <HAL_UART_RxCpltCallback+0x50>)
 800113a:	4805      	ldr	r0, [pc, #20]	@ (8001150 <HAL_UART_RxCpltCallback+0x58>)
 800113c:	f006 f9e4 	bl	8007508 <HAL_UART_Receive_IT>
}
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	24000248 	.word	0x24000248
 800114c:	24000274 	.word	0x24000274
 8001150:	240002c0 	.word	0x240002c0

08001154 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800115a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800115e:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001160:	bf00      	nop
 8001162:	4b44      	ldr	r3, [pc, #272]	@ (8001274 <main+0x120>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d004      	beq.n	8001178 <main+0x24>
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	1e5a      	subs	r2, r3, #1
 8001172:	60fa      	str	r2, [r7, #12]
 8001174:	2b00      	cmp	r3, #0
 8001176:	dcf4      	bgt.n	8001162 <main+0xe>
  if ( timeout < 0 )
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2b00      	cmp	r3, #0
 800117c:	da01      	bge.n	8001182 <main+0x2e>
  {
  Error_Handler();
 800117e:	f000 f8f5 	bl	800136c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001182:	f000 fbf7 	bl	8001974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001186:	f000 f887 	bl	8001298 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800118a:	4b3a      	ldr	r3, [pc, #232]	@ (8001274 <main+0x120>)
 800118c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001190:	4a38      	ldr	r2, [pc, #224]	@ (8001274 <main+0x120>)
 8001192:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001196:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800119a:	4b36      	ldr	r3, [pc, #216]	@ (8001274 <main+0x120>)
 800119c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80011a8:	2000      	movs	r0, #0
 80011aa:	f001 fce3 	bl	8002b74 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80011ae:	2100      	movs	r1, #0
 80011b0:	2000      	movs	r0, #0
 80011b2:	f001 fcf9 	bl	8002ba8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80011b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011ba:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80011bc:	bf00      	nop
 80011be:	4b2d      	ldr	r3, [pc, #180]	@ (8001274 <main+0x120>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d104      	bne.n	80011d4 <main+0x80>
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	1e5a      	subs	r2, r3, #1
 80011ce:	60fa      	str	r2, [r7, #12]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	dcf4      	bgt.n	80011be <main+0x6a>
if ( timeout < 0 )
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	da01      	bge.n	80011de <main+0x8a>
{
Error_Handler();
 80011da:	f000 f8c7 	bl	800136c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011de:	f7ff fcd9 	bl	8000b94 <MX_GPIO_Init>
  MX_TIM2_Init();
 80011e2:	f000 f9e3 	bl	80015ac <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80011e6:	f000 fadd 	bl	80017a4 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 80011ea:	f7ff fdd1 	bl	8000d90 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
	disp.addr = (0x27 << 1);
 80011ee:	4b22      	ldr	r3, [pc, #136]	@ (8001278 <main+0x124>)
 80011f0:	224e      	movs	r2, #78	@ 0x4e
 80011f2:	701a      	strb	r2, [r3, #0]
	disp.bl = true;
 80011f4:	4b20      	ldr	r3, [pc, #128]	@ (8001278 <main+0x124>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	lcd_init(&disp);
 80011fc:	481e      	ldr	r0, [pc, #120]	@ (8001278 <main+0x124>)
 80011fe:	f7ff fe71 	bl	8000ee4 <lcd_init>
	sprintf((char *)disp.f_line, "n");
 8001202:	491e      	ldr	r1, [pc, #120]	@ (800127c <main+0x128>)
 8001204:	481e      	ldr	r0, [pc, #120]	@ (8001280 <main+0x12c>)
 8001206:	f009 fbd5 	bl	800a9b4 <siprintf>
	sprintf((char *)disp.s_line, "n");
 800120a:	491c      	ldr	r1, [pc, #112]	@ (800127c <main+0x128>)
 800120c:	481d      	ldr	r0, [pc, #116]	@ (8001284 <main+0x130>)
 800120e:	f009 fbd1 	bl	800a9b4 <siprintf>
	lcd_display(&disp);
 8001212:	4819      	ldr	r0, [pc, #100]	@ (8001278 <main+0x124>)
 8001214:	f7ff feec 	bl	8000ff0 <lcd_display>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  TIM2->CCR1 = 50;
 8001218:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800121c:	2232      	movs	r2, #50	@ 0x32
 800121e:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2->CCR2 = 50;
 8001220:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001224:	2232      	movs	r2, #50	@ 0x32
 8001226:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8001228:	2100      	movs	r1, #0
 800122a:	4817      	ldr	r0, [pc, #92]	@ (8001288 <main+0x134>)
 800122c:	f005 f85a 	bl	80062e4 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 8001230:	2104      	movs	r1, #4
 8001232:	4815      	ldr	r0, [pc, #84]	@ (8001288 <main+0x134>)
 8001234:	f005 f856 	bl	80062e4 <HAL_TIM_PWM_Start_IT>
  HAL_UART_Receive_IT(&huart3, &rx_data, 3);
 8001238:	2203      	movs	r2, #3
 800123a:	4914      	ldr	r1, [pc, #80]	@ (800128c <main+0x138>)
 800123c:	4814      	ldr	r0, [pc, #80]	@ (8001290 <main+0x13c>)
 800123e:	f006 f963 	bl	8007508 <HAL_UART_Receive_IT>
  int i = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]
  while (1)
  {
	sprintf((char *)disp.f_line, "%d", i);
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	4912      	ldr	r1, [pc, #72]	@ (8001294 <main+0x140>)
 800124a:	480d      	ldr	r0, [pc, #52]	@ (8001280 <main+0x12c>)
 800124c:	f009 fbb2 	bl	800a9b4 <siprintf>
	sprintf((char *)disp.s_line, "%d", i);
 8001250:	68ba      	ldr	r2, [r7, #8]
 8001252:	4910      	ldr	r1, [pc, #64]	@ (8001294 <main+0x140>)
 8001254:	480b      	ldr	r0, [pc, #44]	@ (8001284 <main+0x130>)
 8001256:	f009 fbad 	bl	800a9b4 <siprintf>
	HAL_Delay(500);
 800125a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800125e:	f000 fc1b 	bl	8001a98 <HAL_Delay>
	lcd_display(&disp);
 8001262:	4805      	ldr	r0, [pc, #20]	@ (8001278 <main+0x124>)
 8001264:	f7ff fec4 	bl	8000ff0 <lcd_display>
	i+=1;
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	3301      	adds	r3, #1
 800126c:	60bb      	str	r3, [r7, #8]
	sprintf((char *)disp.f_line, "%d", i);
 800126e:	bf00      	nop
 8001270:	e7e9      	b.n	8001246 <main+0xf2>
 8001272:	bf00      	nop
 8001274:	58024400 	.word	0x58024400
 8001278:	2400024c 	.word	0x2400024c
 800127c:	0800e0cc 	.word	0x0800e0cc
 8001280:	2400024d 	.word	0x2400024d
 8001284:	2400025e 	.word	0x2400025e
 8001288:	24000274 	.word	0x24000274
 800128c:	24000248 	.word	0x24000248
 8001290:	240002c0 	.word	0x240002c0
 8001294:	0800e0c0 	.word	0x0800e0c0

08001298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b09c      	sub	sp, #112	@ 0x70
 800129c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800129e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012a2:	224c      	movs	r2, #76	@ 0x4c
 80012a4:	2100      	movs	r1, #0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f009 fbe7 	bl	800aa7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	2220      	movs	r2, #32
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f009 fbe1 	bl	800aa7a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80012b8:	2004      	movs	r0, #4
 80012ba:	f002 f8ef 	bl	800349c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012be:	2300      	movs	r3, #0
 80012c0:	603b      	str	r3, [r7, #0]
 80012c2:	4b28      	ldr	r3, [pc, #160]	@ (8001364 <SystemClock_Config+0xcc>)
 80012c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c6:	4a27      	ldr	r2, [pc, #156]	@ (8001364 <SystemClock_Config+0xcc>)
 80012c8:	f023 0301 	bic.w	r3, r3, #1
 80012cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80012ce:	4b25      	ldr	r3, [pc, #148]	@ (8001364 <SystemClock_Config+0xcc>)
 80012d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	4b23      	ldr	r3, [pc, #140]	@ (8001368 <SystemClock_Config+0xd0>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012e0:	4a21      	ldr	r2, [pc, #132]	@ (8001368 <SystemClock_Config+0xd0>)
 80012e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012e6:	6193      	str	r3, [r2, #24]
 80012e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001368 <SystemClock_Config+0xd0>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012f0:	603b      	str	r3, [r7, #0]
 80012f2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80012f4:	bf00      	nop
 80012f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001368 <SystemClock_Config+0xd0>)
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001302:	d1f8      	bne.n	80012f6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001304:	2302      	movs	r3, #2
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001308:	2301      	movs	r3, #1
 800130a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800130c:	2340      	movs	r3, #64	@ 0x40
 800130e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001310:	2300      	movs	r3, #0
 8001312:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001314:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001318:	4618      	mov	r0, r3
 800131a:	f002 f919 	bl	8003550 <HAL_RCC_OscConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001324:	f000 f822 	bl	800136c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001328:	233f      	movs	r3, #63	@ 0x3f
 800132a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800132c:	2300      	movs	r3, #0
 800132e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001334:	2300      	movs	r3, #0
 8001336:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800133c:	2340      	movs	r3, #64	@ 0x40
 800133e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	2101      	movs	r1, #1
 800134c:	4618      	mov	r0, r3
 800134e:	f002 fd59 	bl	8003e04 <HAL_RCC_ClockConfig>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001358:	f000 f808 	bl	800136c <Error_Handler>
  }
}
 800135c:	bf00      	nop
 800135e:	3770      	adds	r7, #112	@ 0x70
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	58000400 	.word	0x58000400
 8001368:	58024800 	.word	0x58024800

0800136c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001370:	b672      	cpsid	i
}
 8001372:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <Error_Handler+0x8>

08001378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137e:	4b0a      	ldr	r3, [pc, #40]	@ (80013a8 <HAL_MspInit+0x30>)
 8001380:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001384:	4a08      	ldr	r2, [pc, #32]	@ (80013a8 <HAL_MspInit+0x30>)
 8001386:	f043 0302 	orr.w	r3, r3, #2
 800138a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800138e:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <HAL_MspInit+0x30>)
 8001390:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	58024400 	.word	0x58024400

080013ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013b0:	bf00      	nop
 80013b2:	e7fd      	b.n	80013b0 <NMI_Handler+0x4>

080013b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b8:	bf00      	nop
 80013ba:	e7fd      	b.n	80013b8 <HardFault_Handler+0x4>

080013bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c0:	bf00      	nop
 80013c2:	e7fd      	b.n	80013c0 <MemManage_Handler+0x4>

080013c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <BusFault_Handler+0x4>

080013cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <UsageFault_Handler+0x4>

080013d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001402:	f000 fb29 	bl	8001a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001410:	4802      	ldr	r0, [pc, #8]	@ (800141c <USART3_IRQHandler+0x10>)
 8001412:	f006 f8c5 	bl	80075a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	240002c0 	.word	0x240002c0

08001420 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return 1;
 8001424:	2301      	movs	r3, #1
}
 8001426:	4618      	mov	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_kill>:

int _kill(int pid, int sig)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800143a:	f009 fb71 	bl	800ab20 <__errno>
 800143e:	4603      	mov	r3, r0
 8001440:	2216      	movs	r2, #22
 8001442:	601a      	str	r2, [r3, #0]
  return -1;
 8001444:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <_exit>:

void _exit (int status)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001458:	f04f 31ff 	mov.w	r1, #4294967295
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff ffe7 	bl	8001430 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001462:	bf00      	nop
 8001464:	e7fd      	b.n	8001462 <_exit+0x12>

08001466 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b086      	sub	sp, #24
 800146a:	af00      	add	r7, sp, #0
 800146c:	60f8      	str	r0, [r7, #12]
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	e00a      	b.n	800148e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001478:	f3af 8000 	nop.w
 800147c:	4601      	mov	r1, r0
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	1c5a      	adds	r2, r3, #1
 8001482:	60ba      	str	r2, [r7, #8]
 8001484:	b2ca      	uxtb	r2, r1
 8001486:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	3301      	adds	r3, #1
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	429a      	cmp	r2, r3
 8001494:	dbf0      	blt.n	8001478 <_read+0x12>
  }

  return len;
 8001496:	687b      	ldr	r3, [r7, #4]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	e009      	b.n	80014c6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	1c5a      	adds	r2, r3, #1
 80014b6:	60ba      	str	r2, [r7, #8]
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	3301      	adds	r3, #1
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	dbf1      	blt.n	80014b2 <_write+0x12>
  }
  return len;
 80014ce:	687b      	ldr	r3, [r7, #4]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <_close>:

int _close(int file)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001500:	605a      	str	r2, [r3, #4]
  return 0;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <_isatty>:

int _isatty(int file)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001518:	2301      	movs	r3, #1
}
 800151a:	4618      	mov	r0, r3
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001526:	b480      	push	{r7}
 8001528:	b085      	sub	sp, #20
 800152a:	af00      	add	r7, sp, #0
 800152c:	60f8      	str	r0, [r7, #12]
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001548:	4a14      	ldr	r2, [pc, #80]	@ (800159c <_sbrk+0x5c>)
 800154a:	4b15      	ldr	r3, [pc, #84]	@ (80015a0 <_sbrk+0x60>)
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001554:	4b13      	ldr	r3, [pc, #76]	@ (80015a4 <_sbrk+0x64>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d102      	bne.n	8001562 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800155c:	4b11      	ldr	r3, [pc, #68]	@ (80015a4 <_sbrk+0x64>)
 800155e:	4a12      	ldr	r2, [pc, #72]	@ (80015a8 <_sbrk+0x68>)
 8001560:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001562:	4b10      	ldr	r3, [pc, #64]	@ (80015a4 <_sbrk+0x64>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4413      	add	r3, r2
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	429a      	cmp	r2, r3
 800156e:	d207      	bcs.n	8001580 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001570:	f009 fad6 	bl	800ab20 <__errno>
 8001574:	4603      	mov	r3, r0
 8001576:	220c      	movs	r2, #12
 8001578:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800157a:	f04f 33ff 	mov.w	r3, #4294967295
 800157e:	e009      	b.n	8001594 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001580:	4b08      	ldr	r3, [pc, #32]	@ (80015a4 <_sbrk+0x64>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001586:	4b07      	ldr	r3, [pc, #28]	@ (80015a4 <_sbrk+0x64>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	4a05      	ldr	r2, [pc, #20]	@ (80015a4 <_sbrk+0x64>)
 8001590:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001592:	68fb      	ldr	r3, [r7, #12]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	24080000 	.word	0x24080000
 80015a0:	00000400 	.word	0x00000400
 80015a4:	24000270 	.word	0x24000270
 80015a8:	240004a8 	.word	0x240004a8

080015ac <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08e      	sub	sp, #56	@ 0x38
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c0:	f107 031c 	add.w	r3, r7, #28
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015cc:	463b      	mov	r3, r7
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
 80015d8:	611a      	str	r2, [r3, #16]
 80015da:	615a      	str	r2, [r3, #20]
 80015dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015de:	4b33      	ldr	r3, [pc, #204]	@ (80016ac <MX_TIM2_Init+0x100>)
 80015e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1280;
 80015e6:	4b31      	ldr	r3, [pc, #196]	@ (80016ac <MX_TIM2_Init+0x100>)
 80015e8:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 80015ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ee:	4b2f      	ldr	r3, [pc, #188]	@ (80016ac <MX_TIM2_Init+0x100>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80015f4:	4b2d      	ldr	r3, [pc, #180]	@ (80016ac <MX_TIM2_Init+0x100>)
 80015f6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fc:	4b2b      	ldr	r3, [pc, #172]	@ (80016ac <MX_TIM2_Init+0x100>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001602:	4b2a      	ldr	r3, [pc, #168]	@ (80016ac <MX_TIM2_Init+0x100>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001608:	4828      	ldr	r0, [pc, #160]	@ (80016ac <MX_TIM2_Init+0x100>)
 800160a:	f004 fdb3 	bl	8006174 <HAL_TIM_Base_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001614:	f7ff feaa 	bl	800136c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001618:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800161c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800161e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001622:	4619      	mov	r1, r3
 8001624:	4821      	ldr	r0, [pc, #132]	@ (80016ac <MX_TIM2_Init+0x100>)
 8001626:	f005 f8cb 	bl	80067c0 <HAL_TIM_ConfigClockSource>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001630:	f7ff fe9c 	bl	800136c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001634:	481d      	ldr	r0, [pc, #116]	@ (80016ac <MX_TIM2_Init+0x100>)
 8001636:	f004 fdf4 	bl	8006222 <HAL_TIM_PWM_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001640:	f7ff fe94 	bl	800136c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001644:	2300      	movs	r3, #0
 8001646:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001648:	2300      	movs	r3, #0
 800164a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800164c:	f107 031c 	add.w	r3, r7, #28
 8001650:	4619      	mov	r1, r3
 8001652:	4816      	ldr	r0, [pc, #88]	@ (80016ac <MX_TIM2_Init+0x100>)
 8001654:	f005 fdec 	bl	8007230 <HAL_TIMEx_MasterConfigSynchronization>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800165e:	f7ff fe85 	bl	800136c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001662:	2360      	movs	r3, #96	@ 0x60
 8001664:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001672:	463b      	mov	r3, r7
 8001674:	2200      	movs	r2, #0
 8001676:	4619      	mov	r1, r3
 8001678:	480c      	ldr	r0, [pc, #48]	@ (80016ac <MX_TIM2_Init+0x100>)
 800167a:	f004 ff8d 	bl	8006598 <HAL_TIM_PWM_ConfigChannel>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001684:	f7ff fe72 	bl	800136c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001688:	463b      	mov	r3, r7
 800168a:	2204      	movs	r2, #4
 800168c:	4619      	mov	r1, r3
 800168e:	4807      	ldr	r0, [pc, #28]	@ (80016ac <MX_TIM2_Init+0x100>)
 8001690:	f004 ff82 	bl	8006598 <HAL_TIM_PWM_ConfigChannel>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 800169a:	f7ff fe67 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800169e:	4803      	ldr	r0, [pc, #12]	@ (80016ac <MX_TIM2_Init+0x100>)
 80016a0:	f000 f826 	bl	80016f0 <HAL_TIM_MspPostInit>

}
 80016a4:	bf00      	nop
 80016a6:	3738      	adds	r7, #56	@ 0x38
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	24000274 	.word	0x24000274

080016b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016c0:	d10e      	bne.n	80016e0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016c2:	4b0a      	ldr	r3, [pc, #40]	@ (80016ec <HAL_TIM_Base_MspInit+0x3c>)
 80016c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016c8:	4a08      	ldr	r2, [pc, #32]	@ (80016ec <HAL_TIM_Base_MspInit+0x3c>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80016d2:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <HAL_TIM_Base_MspInit+0x3c>)
 80016d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	58024400 	.word	0x58024400

080016f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	@ 0x28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001710:	d13d      	bne.n	800178e <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001712:	4b21      	ldr	r3, [pc, #132]	@ (8001798 <HAL_TIM_MspPostInit+0xa8>)
 8001714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001718:	4a1f      	ldr	r2, [pc, #124]	@ (8001798 <HAL_TIM_MspPostInit+0xa8>)
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001722:	4b1d      	ldr	r3, [pc, #116]	@ (8001798 <HAL_TIM_MspPostInit+0xa8>)
 8001724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001730:	4b19      	ldr	r3, [pc, #100]	@ (8001798 <HAL_TIM_MspPostInit+0xa8>)
 8001732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001736:	4a18      	ldr	r2, [pc, #96]	@ (8001798 <HAL_TIM_MspPostInit+0xa8>)
 8001738:	f043 0302 	orr.w	r3, r3, #2
 800173c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001740:	4b15      	ldr	r3, [pc, #84]	@ (8001798 <HAL_TIM_MspPostInit+0xa8>)
 8001742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800174e:	2301      	movs	r3, #1
 8001750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800175e:	2301      	movs	r3, #1
 8001760:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	480c      	ldr	r0, [pc, #48]	@ (800179c <HAL_TIM_MspPostInit+0xac>)
 800176a:	f001 f839 	bl	80027e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800176e:	2308      	movs	r3, #8
 8001770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800177e:	2301      	movs	r3, #1
 8001780:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	4619      	mov	r1, r3
 8001788:	4805      	ldr	r0, [pc, #20]	@ (80017a0 <HAL_TIM_MspPostInit+0xb0>)
 800178a:	f001 f829 	bl	80027e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800178e:	bf00      	nop
 8001790:	3728      	adds	r7, #40	@ 0x28
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	58024400 	.word	0x58024400
 800179c:	58020000 	.word	0x58020000
 80017a0:	58020400 	.word	0x58020400

080017a4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017a8:	4b22      	ldr	r3, [pc, #136]	@ (8001834 <MX_USART3_UART_Init+0x90>)
 80017aa:	4a23      	ldr	r2, [pc, #140]	@ (8001838 <MX_USART3_UART_Init+0x94>)
 80017ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80017ae:	4b21      	ldr	r3, [pc, #132]	@ (8001834 <MX_USART3_UART_Init+0x90>)
 80017b0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80017b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001834 <MX_USART3_UART_Init+0x90>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001834 <MX_USART3_UART_Init+0x90>)
 80017be:	2200      	movs	r2, #0
 80017c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001834 <MX_USART3_UART_Init+0x90>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001834 <MX_USART3_UART_Init+0x90>)
 80017ca:	220c      	movs	r2, #12
 80017cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ce:	4b19      	ldr	r3, [pc, #100]	@ (8001834 <MX_USART3_UART_Init+0x90>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d4:	4b17      	ldr	r3, [pc, #92]	@ (8001834 <MX_USART3_UART_Init+0x90>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017da:	4b16      	ldr	r3, [pc, #88]	@ (8001834 <MX_USART3_UART_Init+0x90>)
 80017dc:	2200      	movs	r2, #0
 80017de:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017e0:	4b14      	ldr	r3, [pc, #80]	@ (8001834 <MX_USART3_UART_Init+0x90>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017e6:	4b13      	ldr	r3, [pc, #76]	@ (8001834 <MX_USART3_UART_Init+0x90>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017ec:	4811      	ldr	r0, [pc, #68]	@ (8001834 <MX_USART3_UART_Init+0x90>)
 80017ee:	f005 fdad 	bl	800734c <HAL_UART_Init>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80017f8:	f7ff fdb8 	bl	800136c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017fc:	2100      	movs	r1, #0
 80017fe:	480d      	ldr	r0, [pc, #52]	@ (8001834 <MX_USART3_UART_Init+0x90>)
 8001800:	f008 f907 	bl	8009a12 <HAL_UARTEx_SetTxFifoThreshold>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800180a:	f7ff fdaf 	bl	800136c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800180e:	2100      	movs	r1, #0
 8001810:	4808      	ldr	r0, [pc, #32]	@ (8001834 <MX_USART3_UART_Init+0x90>)
 8001812:	f008 f93c 	bl	8009a8e <HAL_UARTEx_SetRxFifoThreshold>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800181c:	f7ff fda6 	bl	800136c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001820:	4804      	ldr	r0, [pc, #16]	@ (8001834 <MX_USART3_UART_Init+0x90>)
 8001822:	f008 f8bd 	bl	80099a0 <HAL_UARTEx_DisableFifoMode>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800182c:	f7ff fd9e 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}
 8001834:	240002c0 	.word	0x240002c0
 8001838:	40004800 	.word	0x40004800

0800183c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b0ba      	sub	sp, #232	@ 0xe8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001854:	f107 0310 	add.w	r3, r7, #16
 8001858:	22c0      	movs	r2, #192	@ 0xc0
 800185a:	2100      	movs	r1, #0
 800185c:	4618      	mov	r0, r3
 800185e:	f009 f90c 	bl	800aa7a <memset>
  if(uartHandle->Instance==USART3)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a2b      	ldr	r2, [pc, #172]	@ (8001914 <HAL_UART_MspInit+0xd8>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d14e      	bne.n	800190a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800186c:	f04f 0202 	mov.w	r2, #2
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001878:	2300      	movs	r3, #0
 800187a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800187e:	f107 0310 	add.w	r3, r7, #16
 8001882:	4618      	mov	r0, r3
 8001884:	f002 fe4a 	bl	800451c <HAL_RCCEx_PeriphCLKConfig>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800188e:	f7ff fd6d 	bl	800136c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001892:	4b21      	ldr	r3, [pc, #132]	@ (8001918 <HAL_UART_MspInit+0xdc>)
 8001894:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001898:	4a1f      	ldr	r2, [pc, #124]	@ (8001918 <HAL_UART_MspInit+0xdc>)
 800189a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800189e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80018a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001918 <HAL_UART_MspInit+0xdc>)
 80018a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b0:	4b19      	ldr	r3, [pc, #100]	@ (8001918 <HAL_UART_MspInit+0xdc>)
 80018b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018b6:	4a18      	ldr	r2, [pc, #96]	@ (8001918 <HAL_UART_MspInit+0xdc>)
 80018b8:	f043 0308 	orr.w	r3, r3, #8
 80018bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018c0:	4b15      	ldr	r3, [pc, #84]	@ (8001918 <HAL_UART_MspInit+0xdc>)
 80018c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018c6:	f003 0308 	and.w	r3, r3, #8
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018ce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2302      	movs	r3, #2
 80018d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018e8:	2307      	movs	r3, #7
 80018ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ee:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80018f2:	4619      	mov	r1, r3
 80018f4:	4809      	ldr	r0, [pc, #36]	@ (800191c <HAL_UART_MspInit+0xe0>)
 80018f6:	f000 ff73 	bl	80027e0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2100      	movs	r1, #0
 80018fe:	2027      	movs	r0, #39	@ 0x27
 8001900:	f000 f9d5 	bl	8001cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001904:	2027      	movs	r0, #39	@ 0x27
 8001906:	f000 f9ec 	bl	8001ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800190a:	bf00      	nop
 800190c:	37e8      	adds	r7, #232	@ 0xe8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40004800 	.word	0x40004800
 8001918:	58024400 	.word	0x58024400
 800191c:	58020c00 	.word	0x58020c00

08001920 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001920:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001958 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001924:	f7ff f8a0 	bl	8000a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001928:	480c      	ldr	r0, [pc, #48]	@ (800195c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800192a:	490d      	ldr	r1, [pc, #52]	@ (8001960 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800192c:	4a0d      	ldr	r2, [pc, #52]	@ (8001964 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800192e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001930:	e002      	b.n	8001938 <LoopCopyDataInit>

08001932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001936:	3304      	adds	r3, #4

08001938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800193c:	d3f9      	bcc.n	8001932 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800193e:	4a0a      	ldr	r2, [pc, #40]	@ (8001968 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001940:	4c0a      	ldr	r4, [pc, #40]	@ (800196c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001944:	e001      	b.n	800194a <LoopFillZerobss>

08001946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001948:	3204      	adds	r2, #4

0800194a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800194c:	d3fb      	bcc.n	8001946 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800194e:	f009 f8ed 	bl	800ab2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001952:	f7ff fbff 	bl	8001154 <main>
  bx  lr
 8001956:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001958:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800195c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001960:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001964:	0800e548 	.word	0x0800e548
  ldr r2, =_sbss
 8001968:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 800196c:	240004a4 	.word	0x240004a4

08001970 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001970:	e7fe      	b.n	8001970 <ADC3_IRQHandler>
	...

08001974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800197a:	2003      	movs	r0, #3
 800197c:	f000 f98c 	bl	8001c98 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001980:	f002 fbf6 	bl	8004170 <HAL_RCC_GetSysClockFreq>
 8001984:	4602      	mov	r2, r0
 8001986:	4b15      	ldr	r3, [pc, #84]	@ (80019dc <HAL_Init+0x68>)
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	0a1b      	lsrs	r3, r3, #8
 800198c:	f003 030f 	and.w	r3, r3, #15
 8001990:	4913      	ldr	r1, [pc, #76]	@ (80019e0 <HAL_Init+0x6c>)
 8001992:	5ccb      	ldrb	r3, [r1, r3]
 8001994:	f003 031f 	and.w	r3, r3, #31
 8001998:	fa22 f303 	lsr.w	r3, r2, r3
 800199c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800199e:	4b0f      	ldr	r3, [pc, #60]	@ (80019dc <HAL_Init+0x68>)
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	4a0e      	ldr	r2, [pc, #56]	@ (80019e0 <HAL_Init+0x6c>)
 80019a8:	5cd3      	ldrb	r3, [r2, r3]
 80019aa:	f003 031f 	and.w	r3, r3, #31
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	fa22 f303 	lsr.w	r3, r2, r3
 80019b4:	4a0b      	ldr	r2, [pc, #44]	@ (80019e4 <HAL_Init+0x70>)
 80019b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80019b8:	4a0b      	ldr	r2, [pc, #44]	@ (80019e8 <HAL_Init+0x74>)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019be:	2000      	movs	r0, #0
 80019c0:	f000 f814 	bl	80019ec <HAL_InitTick>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e002      	b.n	80019d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019ce:	f7ff fcd3 	bl	8001378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	58024400 	.word	0x58024400
 80019e0:	0800e0d0 	.word	0x0800e0d0
 80019e4:	24000004 	.word	0x24000004
 80019e8:	24000000 	.word	0x24000000

080019ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80019f4:	4b15      	ldr	r3, [pc, #84]	@ (8001a4c <HAL_InitTick+0x60>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e021      	b.n	8001a44 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a00:	4b13      	ldr	r3, [pc, #76]	@ (8001a50 <HAL_InitTick+0x64>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b11      	ldr	r3, [pc, #68]	@ (8001a4c <HAL_InitTick+0x60>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a16:	4618      	mov	r0, r3
 8001a18:	f000 f971 	bl	8001cfe <HAL_SYSTICK_Config>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e00e      	b.n	8001a44 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b0f      	cmp	r3, #15
 8001a2a:	d80a      	bhi.n	8001a42 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	f04f 30ff 	mov.w	r0, #4294967295
 8001a34:	f000 f93b 	bl	8001cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a38:	4a06      	ldr	r2, [pc, #24]	@ (8001a54 <HAL_InitTick+0x68>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	e000      	b.n	8001a44 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	2400000c 	.word	0x2400000c
 8001a50:	24000000 	.word	0x24000000
 8001a54:	24000008 	.word	0x24000008

08001a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a5c:	4b06      	ldr	r3, [pc, #24]	@ (8001a78 <HAL_IncTick+0x20>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <HAL_IncTick+0x24>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4413      	add	r3, r2
 8001a68:	4a04      	ldr	r2, [pc, #16]	@ (8001a7c <HAL_IncTick+0x24>)
 8001a6a:	6013      	str	r3, [r2, #0]
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	2400000c 	.word	0x2400000c
 8001a7c:	24000354 	.word	0x24000354

08001a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return uwTick;
 8001a84:	4b03      	ldr	r3, [pc, #12]	@ (8001a94 <HAL_GetTick+0x14>)
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	24000354 	.word	0x24000354

08001a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa0:	f7ff ffee 	bl	8001a80 <HAL_GetTick>
 8001aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab0:	d005      	beq.n	8001abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8001adc <HAL_Delay+0x44>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4413      	add	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001abe:	bf00      	nop
 8001ac0:	f7ff ffde 	bl	8001a80 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d8f7      	bhi.n	8001ac0 <HAL_Delay+0x28>
  {
  }
}
 8001ad0:	bf00      	nop
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	2400000c 	.word	0x2400000c

08001ae0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ae4:	4b03      	ldr	r3, [pc, #12]	@ (8001af4 <HAL_GetREVID+0x14>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	0c1b      	lsrs	r3, r3, #16
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	5c001000 	.word	0x5c001000

08001af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b08:	4b0b      	ldr	r3, [pc, #44]	@ (8001b38 <__NVIC_SetPriorityGrouping+0x40>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b14:	4013      	ands	r3, r2
 8001b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b20:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <__NVIC_SetPriorityGrouping+0x44>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b26:	4a04      	ldr	r2, [pc, #16]	@ (8001b38 <__NVIC_SetPriorityGrouping+0x40>)
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	60d3      	str	r3, [r2, #12]
}
 8001b2c:	bf00      	nop
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000ed00 	.word	0xe000ed00
 8001b3c:	05fa0000 	.word	0x05fa0000

08001b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b44:	4b04      	ldr	r3, [pc, #16]	@ (8001b58 <__NVIC_GetPriorityGrouping+0x18>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	0a1b      	lsrs	r3, r3, #8
 8001b4a:	f003 0307 	and.w	r3, r3, #7
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	db0b      	blt.n	8001b86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b6e:	88fb      	ldrh	r3, [r7, #6]
 8001b70:	f003 021f 	and.w	r2, r3, #31
 8001b74:	4907      	ldr	r1, [pc, #28]	@ (8001b94 <__NVIC_EnableIRQ+0x38>)
 8001b76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b7a:	095b      	lsrs	r3, r3, #5
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000e100 	.word	0xe000e100

08001b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	6039      	str	r1, [r7, #0]
 8001ba2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ba4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	db0a      	blt.n	8001bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	490c      	ldr	r1, [pc, #48]	@ (8001be4 <__NVIC_SetPriority+0x4c>)
 8001bb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bb6:	0112      	lsls	r2, r2, #4
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	440b      	add	r3, r1
 8001bbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc0:	e00a      	b.n	8001bd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	4908      	ldr	r1, [pc, #32]	@ (8001be8 <__NVIC_SetPriority+0x50>)
 8001bc8:	88fb      	ldrh	r3, [r7, #6]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	3b04      	subs	r3, #4
 8001bd0:	0112      	lsls	r2, r2, #4
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	761a      	strb	r2, [r3, #24]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000e100 	.word	0xe000e100
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b089      	sub	sp, #36	@ 0x24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f1c3 0307 	rsb	r3, r3, #7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	bf28      	it	cs
 8001c0a:	2304      	movcs	r3, #4
 8001c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3304      	adds	r3, #4
 8001c12:	2b06      	cmp	r3, #6
 8001c14:	d902      	bls.n	8001c1c <NVIC_EncodePriority+0x30>
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3b03      	subs	r3, #3
 8001c1a:	e000      	b.n	8001c1e <NVIC_EncodePriority+0x32>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	f04f 32ff 	mov.w	r2, #4294967295
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	401a      	ands	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c34:	f04f 31ff 	mov.w	r1, #4294967295
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	43d9      	mvns	r1, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c44:	4313      	orrs	r3, r2
         );
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3724      	adds	r7, #36	@ 0x24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c64:	d301      	bcc.n	8001c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00f      	b.n	8001c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c94 <SysTick_Config+0x40>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c72:	210f      	movs	r1, #15
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295
 8001c78:	f7ff ff8e 	bl	8001b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c7c:	4b05      	ldr	r3, [pc, #20]	@ (8001c94 <SysTick_Config+0x40>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c82:	4b04      	ldr	r3, [pc, #16]	@ (8001c94 <SysTick_Config+0x40>)
 8001c84:	2207      	movs	r2, #7
 8001c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	e000e010 	.word	0xe000e010

08001c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ff29 	bl	8001af8 <__NVIC_SetPriorityGrouping>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b086      	sub	sp, #24
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cbc:	f7ff ff40 	bl	8001b40 <__NVIC_GetPriorityGrouping>
 8001cc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	6978      	ldr	r0, [r7, #20]
 8001cc8:	f7ff ff90 	bl	8001bec <NVIC_EncodePriority>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff5f 	bl	8001b98 <__NVIC_SetPriority>
}
 8001cda:	bf00      	nop
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	4603      	mov	r3, r0
 8001cea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff33 	bl	8001b5c <__NVIC_EnableIRQ>
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff ffa4 	bl	8001c54 <SysTick_Config>
 8001d0c:	4603      	mov	r3, r0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001d20:	f7ff feae 	bl	8001a80 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e2dc      	b.n	80022ea <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d008      	beq.n	8001d4e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2280      	movs	r2, #128	@ 0x80
 8001d40:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e2cd      	b.n	80022ea <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a76      	ldr	r2, [pc, #472]	@ (8001f2c <HAL_DMA_Abort+0x214>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d04a      	beq.n	8001dee <HAL_DMA_Abort+0xd6>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a74      	ldr	r2, [pc, #464]	@ (8001f30 <HAL_DMA_Abort+0x218>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d045      	beq.n	8001dee <HAL_DMA_Abort+0xd6>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a73      	ldr	r2, [pc, #460]	@ (8001f34 <HAL_DMA_Abort+0x21c>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d040      	beq.n	8001dee <HAL_DMA_Abort+0xd6>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a71      	ldr	r2, [pc, #452]	@ (8001f38 <HAL_DMA_Abort+0x220>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d03b      	beq.n	8001dee <HAL_DMA_Abort+0xd6>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a70      	ldr	r2, [pc, #448]	@ (8001f3c <HAL_DMA_Abort+0x224>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d036      	beq.n	8001dee <HAL_DMA_Abort+0xd6>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a6e      	ldr	r2, [pc, #440]	@ (8001f40 <HAL_DMA_Abort+0x228>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d031      	beq.n	8001dee <HAL_DMA_Abort+0xd6>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a6d      	ldr	r2, [pc, #436]	@ (8001f44 <HAL_DMA_Abort+0x22c>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d02c      	beq.n	8001dee <HAL_DMA_Abort+0xd6>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a6b      	ldr	r2, [pc, #428]	@ (8001f48 <HAL_DMA_Abort+0x230>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d027      	beq.n	8001dee <HAL_DMA_Abort+0xd6>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a6a      	ldr	r2, [pc, #424]	@ (8001f4c <HAL_DMA_Abort+0x234>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d022      	beq.n	8001dee <HAL_DMA_Abort+0xd6>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a68      	ldr	r2, [pc, #416]	@ (8001f50 <HAL_DMA_Abort+0x238>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d01d      	beq.n	8001dee <HAL_DMA_Abort+0xd6>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a67      	ldr	r2, [pc, #412]	@ (8001f54 <HAL_DMA_Abort+0x23c>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d018      	beq.n	8001dee <HAL_DMA_Abort+0xd6>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a65      	ldr	r2, [pc, #404]	@ (8001f58 <HAL_DMA_Abort+0x240>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d013      	beq.n	8001dee <HAL_DMA_Abort+0xd6>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a64      	ldr	r2, [pc, #400]	@ (8001f5c <HAL_DMA_Abort+0x244>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d00e      	beq.n	8001dee <HAL_DMA_Abort+0xd6>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a62      	ldr	r2, [pc, #392]	@ (8001f60 <HAL_DMA_Abort+0x248>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d009      	beq.n	8001dee <HAL_DMA_Abort+0xd6>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a61      	ldr	r2, [pc, #388]	@ (8001f64 <HAL_DMA_Abort+0x24c>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d004      	beq.n	8001dee <HAL_DMA_Abort+0xd6>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a5f      	ldr	r2, [pc, #380]	@ (8001f68 <HAL_DMA_Abort+0x250>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d101      	bne.n	8001df2 <HAL_DMA_Abort+0xda>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <HAL_DMA_Abort+0xdc>
 8001df2:	2300      	movs	r3, #0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d013      	beq.n	8001e20 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 021e 	bic.w	r2, r2, #30
 8001e06:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	695a      	ldr	r2, [r3, #20]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e16:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	e00a      	b.n	8001e36 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 020e 	bic.w	r2, r2, #14
 8001e2e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a3c      	ldr	r2, [pc, #240]	@ (8001f2c <HAL_DMA_Abort+0x214>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d072      	beq.n	8001f26 <HAL_DMA_Abort+0x20e>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a3a      	ldr	r2, [pc, #232]	@ (8001f30 <HAL_DMA_Abort+0x218>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d06d      	beq.n	8001f26 <HAL_DMA_Abort+0x20e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a39      	ldr	r2, [pc, #228]	@ (8001f34 <HAL_DMA_Abort+0x21c>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d068      	beq.n	8001f26 <HAL_DMA_Abort+0x20e>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a37      	ldr	r2, [pc, #220]	@ (8001f38 <HAL_DMA_Abort+0x220>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d063      	beq.n	8001f26 <HAL_DMA_Abort+0x20e>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a36      	ldr	r2, [pc, #216]	@ (8001f3c <HAL_DMA_Abort+0x224>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d05e      	beq.n	8001f26 <HAL_DMA_Abort+0x20e>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a34      	ldr	r2, [pc, #208]	@ (8001f40 <HAL_DMA_Abort+0x228>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d059      	beq.n	8001f26 <HAL_DMA_Abort+0x20e>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a33      	ldr	r2, [pc, #204]	@ (8001f44 <HAL_DMA_Abort+0x22c>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d054      	beq.n	8001f26 <HAL_DMA_Abort+0x20e>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a31      	ldr	r2, [pc, #196]	@ (8001f48 <HAL_DMA_Abort+0x230>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d04f      	beq.n	8001f26 <HAL_DMA_Abort+0x20e>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a30      	ldr	r2, [pc, #192]	@ (8001f4c <HAL_DMA_Abort+0x234>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d04a      	beq.n	8001f26 <HAL_DMA_Abort+0x20e>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a2e      	ldr	r2, [pc, #184]	@ (8001f50 <HAL_DMA_Abort+0x238>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d045      	beq.n	8001f26 <HAL_DMA_Abort+0x20e>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a2d      	ldr	r2, [pc, #180]	@ (8001f54 <HAL_DMA_Abort+0x23c>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d040      	beq.n	8001f26 <HAL_DMA_Abort+0x20e>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a2b      	ldr	r2, [pc, #172]	@ (8001f58 <HAL_DMA_Abort+0x240>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d03b      	beq.n	8001f26 <HAL_DMA_Abort+0x20e>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a2a      	ldr	r2, [pc, #168]	@ (8001f5c <HAL_DMA_Abort+0x244>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d036      	beq.n	8001f26 <HAL_DMA_Abort+0x20e>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a28      	ldr	r2, [pc, #160]	@ (8001f60 <HAL_DMA_Abort+0x248>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d031      	beq.n	8001f26 <HAL_DMA_Abort+0x20e>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a27      	ldr	r2, [pc, #156]	@ (8001f64 <HAL_DMA_Abort+0x24c>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d02c      	beq.n	8001f26 <HAL_DMA_Abort+0x20e>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a25      	ldr	r2, [pc, #148]	@ (8001f68 <HAL_DMA_Abort+0x250>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d027      	beq.n	8001f26 <HAL_DMA_Abort+0x20e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a24      	ldr	r2, [pc, #144]	@ (8001f6c <HAL_DMA_Abort+0x254>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d022      	beq.n	8001f26 <HAL_DMA_Abort+0x20e>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a22      	ldr	r2, [pc, #136]	@ (8001f70 <HAL_DMA_Abort+0x258>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d01d      	beq.n	8001f26 <HAL_DMA_Abort+0x20e>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a21      	ldr	r2, [pc, #132]	@ (8001f74 <HAL_DMA_Abort+0x25c>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d018      	beq.n	8001f26 <HAL_DMA_Abort+0x20e>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a1f      	ldr	r2, [pc, #124]	@ (8001f78 <HAL_DMA_Abort+0x260>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d013      	beq.n	8001f26 <HAL_DMA_Abort+0x20e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a1e      	ldr	r2, [pc, #120]	@ (8001f7c <HAL_DMA_Abort+0x264>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d00e      	beq.n	8001f26 <HAL_DMA_Abort+0x20e>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a1c      	ldr	r2, [pc, #112]	@ (8001f80 <HAL_DMA_Abort+0x268>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d009      	beq.n	8001f26 <HAL_DMA_Abort+0x20e>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a1b      	ldr	r2, [pc, #108]	@ (8001f84 <HAL_DMA_Abort+0x26c>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d004      	beq.n	8001f26 <HAL_DMA_Abort+0x20e>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a19      	ldr	r2, [pc, #100]	@ (8001f88 <HAL_DMA_Abort+0x270>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d132      	bne.n	8001f8c <HAL_DMA_Abort+0x274>
 8001f26:	2301      	movs	r3, #1
 8001f28:	e031      	b.n	8001f8e <HAL_DMA_Abort+0x276>
 8001f2a:	bf00      	nop
 8001f2c:	40020010 	.word	0x40020010
 8001f30:	40020028 	.word	0x40020028
 8001f34:	40020040 	.word	0x40020040
 8001f38:	40020058 	.word	0x40020058
 8001f3c:	40020070 	.word	0x40020070
 8001f40:	40020088 	.word	0x40020088
 8001f44:	400200a0 	.word	0x400200a0
 8001f48:	400200b8 	.word	0x400200b8
 8001f4c:	40020410 	.word	0x40020410
 8001f50:	40020428 	.word	0x40020428
 8001f54:	40020440 	.word	0x40020440
 8001f58:	40020458 	.word	0x40020458
 8001f5c:	40020470 	.word	0x40020470
 8001f60:	40020488 	.word	0x40020488
 8001f64:	400204a0 	.word	0x400204a0
 8001f68:	400204b8 	.word	0x400204b8
 8001f6c:	58025408 	.word	0x58025408
 8001f70:	5802541c 	.word	0x5802541c
 8001f74:	58025430 	.word	0x58025430
 8001f78:	58025444 	.word	0x58025444
 8001f7c:	58025458 	.word	0x58025458
 8001f80:	5802546c 	.word	0x5802546c
 8001f84:	58025480 	.word	0x58025480
 8001f88:	58025494 	.word	0x58025494
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d007      	beq.n	8001fa2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fa0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a6d      	ldr	r2, [pc, #436]	@ (800215c <HAL_DMA_Abort+0x444>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d04a      	beq.n	8002042 <HAL_DMA_Abort+0x32a>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a6b      	ldr	r2, [pc, #428]	@ (8002160 <HAL_DMA_Abort+0x448>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d045      	beq.n	8002042 <HAL_DMA_Abort+0x32a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a6a      	ldr	r2, [pc, #424]	@ (8002164 <HAL_DMA_Abort+0x44c>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d040      	beq.n	8002042 <HAL_DMA_Abort+0x32a>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a68      	ldr	r2, [pc, #416]	@ (8002168 <HAL_DMA_Abort+0x450>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d03b      	beq.n	8002042 <HAL_DMA_Abort+0x32a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a67      	ldr	r2, [pc, #412]	@ (800216c <HAL_DMA_Abort+0x454>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d036      	beq.n	8002042 <HAL_DMA_Abort+0x32a>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a65      	ldr	r2, [pc, #404]	@ (8002170 <HAL_DMA_Abort+0x458>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d031      	beq.n	8002042 <HAL_DMA_Abort+0x32a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a64      	ldr	r2, [pc, #400]	@ (8002174 <HAL_DMA_Abort+0x45c>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d02c      	beq.n	8002042 <HAL_DMA_Abort+0x32a>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a62      	ldr	r2, [pc, #392]	@ (8002178 <HAL_DMA_Abort+0x460>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d027      	beq.n	8002042 <HAL_DMA_Abort+0x32a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a61      	ldr	r2, [pc, #388]	@ (800217c <HAL_DMA_Abort+0x464>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d022      	beq.n	8002042 <HAL_DMA_Abort+0x32a>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a5f      	ldr	r2, [pc, #380]	@ (8002180 <HAL_DMA_Abort+0x468>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d01d      	beq.n	8002042 <HAL_DMA_Abort+0x32a>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a5e      	ldr	r2, [pc, #376]	@ (8002184 <HAL_DMA_Abort+0x46c>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d018      	beq.n	8002042 <HAL_DMA_Abort+0x32a>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a5c      	ldr	r2, [pc, #368]	@ (8002188 <HAL_DMA_Abort+0x470>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d013      	beq.n	8002042 <HAL_DMA_Abort+0x32a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a5b      	ldr	r2, [pc, #364]	@ (800218c <HAL_DMA_Abort+0x474>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d00e      	beq.n	8002042 <HAL_DMA_Abort+0x32a>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a59      	ldr	r2, [pc, #356]	@ (8002190 <HAL_DMA_Abort+0x478>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d009      	beq.n	8002042 <HAL_DMA_Abort+0x32a>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a58      	ldr	r2, [pc, #352]	@ (8002194 <HAL_DMA_Abort+0x47c>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d004      	beq.n	8002042 <HAL_DMA_Abort+0x32a>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a56      	ldr	r2, [pc, #344]	@ (8002198 <HAL_DMA_Abort+0x480>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d108      	bne.n	8002054 <HAL_DMA_Abort+0x33c>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 0201 	bic.w	r2, r2, #1
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	e007      	b.n	8002064 <HAL_DMA_Abort+0x34c>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0201 	bic.w	r2, r2, #1
 8002062:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002064:	e013      	b.n	800208e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002066:	f7ff fd0b 	bl	8001a80 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b05      	cmp	r3, #5
 8002072:	d90c      	bls.n	800208e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2220      	movs	r2, #32
 8002078:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2203      	movs	r2, #3
 800207e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e12d      	b.n	80022ea <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1e5      	bne.n	8002066 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a2f      	ldr	r2, [pc, #188]	@ (800215c <HAL_DMA_Abort+0x444>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d04a      	beq.n	800213a <HAL_DMA_Abort+0x422>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a2d      	ldr	r2, [pc, #180]	@ (8002160 <HAL_DMA_Abort+0x448>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d045      	beq.n	800213a <HAL_DMA_Abort+0x422>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a2c      	ldr	r2, [pc, #176]	@ (8002164 <HAL_DMA_Abort+0x44c>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d040      	beq.n	800213a <HAL_DMA_Abort+0x422>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a2a      	ldr	r2, [pc, #168]	@ (8002168 <HAL_DMA_Abort+0x450>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d03b      	beq.n	800213a <HAL_DMA_Abort+0x422>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a29      	ldr	r2, [pc, #164]	@ (800216c <HAL_DMA_Abort+0x454>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d036      	beq.n	800213a <HAL_DMA_Abort+0x422>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a27      	ldr	r2, [pc, #156]	@ (8002170 <HAL_DMA_Abort+0x458>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d031      	beq.n	800213a <HAL_DMA_Abort+0x422>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a26      	ldr	r2, [pc, #152]	@ (8002174 <HAL_DMA_Abort+0x45c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d02c      	beq.n	800213a <HAL_DMA_Abort+0x422>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a24      	ldr	r2, [pc, #144]	@ (8002178 <HAL_DMA_Abort+0x460>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d027      	beq.n	800213a <HAL_DMA_Abort+0x422>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a23      	ldr	r2, [pc, #140]	@ (800217c <HAL_DMA_Abort+0x464>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d022      	beq.n	800213a <HAL_DMA_Abort+0x422>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a21      	ldr	r2, [pc, #132]	@ (8002180 <HAL_DMA_Abort+0x468>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d01d      	beq.n	800213a <HAL_DMA_Abort+0x422>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a20      	ldr	r2, [pc, #128]	@ (8002184 <HAL_DMA_Abort+0x46c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d018      	beq.n	800213a <HAL_DMA_Abort+0x422>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a1e      	ldr	r2, [pc, #120]	@ (8002188 <HAL_DMA_Abort+0x470>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d013      	beq.n	800213a <HAL_DMA_Abort+0x422>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a1d      	ldr	r2, [pc, #116]	@ (800218c <HAL_DMA_Abort+0x474>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d00e      	beq.n	800213a <HAL_DMA_Abort+0x422>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a1b      	ldr	r2, [pc, #108]	@ (8002190 <HAL_DMA_Abort+0x478>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d009      	beq.n	800213a <HAL_DMA_Abort+0x422>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a1a      	ldr	r2, [pc, #104]	@ (8002194 <HAL_DMA_Abort+0x47c>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d004      	beq.n	800213a <HAL_DMA_Abort+0x422>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a18      	ldr	r2, [pc, #96]	@ (8002198 <HAL_DMA_Abort+0x480>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d101      	bne.n	800213e <HAL_DMA_Abort+0x426>
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <HAL_DMA_Abort+0x428>
 800213e:	2300      	movs	r3, #0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d02b      	beq.n	800219c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002148:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800214e:	f003 031f 	and.w	r3, r3, #31
 8002152:	223f      	movs	r2, #63	@ 0x3f
 8002154:	409a      	lsls	r2, r3
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	609a      	str	r2, [r3, #8]
 800215a:	e02a      	b.n	80021b2 <HAL_DMA_Abort+0x49a>
 800215c:	40020010 	.word	0x40020010
 8002160:	40020028 	.word	0x40020028
 8002164:	40020040 	.word	0x40020040
 8002168:	40020058 	.word	0x40020058
 800216c:	40020070 	.word	0x40020070
 8002170:	40020088 	.word	0x40020088
 8002174:	400200a0 	.word	0x400200a0
 8002178:	400200b8 	.word	0x400200b8
 800217c:	40020410 	.word	0x40020410
 8002180:	40020428 	.word	0x40020428
 8002184:	40020440 	.word	0x40020440
 8002188:	40020458 	.word	0x40020458
 800218c:	40020470 	.word	0x40020470
 8002190:	40020488 	.word	0x40020488
 8002194:	400204a0 	.word	0x400204a0
 8002198:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a6:	f003 031f 	and.w	r3, r3, #31
 80021aa:	2201      	movs	r2, #1
 80021ac:	409a      	lsls	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a4f      	ldr	r2, [pc, #316]	@ (80022f4 <HAL_DMA_Abort+0x5dc>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d072      	beq.n	80022a2 <HAL_DMA_Abort+0x58a>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a4d      	ldr	r2, [pc, #308]	@ (80022f8 <HAL_DMA_Abort+0x5e0>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d06d      	beq.n	80022a2 <HAL_DMA_Abort+0x58a>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a4c      	ldr	r2, [pc, #304]	@ (80022fc <HAL_DMA_Abort+0x5e4>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d068      	beq.n	80022a2 <HAL_DMA_Abort+0x58a>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a4a      	ldr	r2, [pc, #296]	@ (8002300 <HAL_DMA_Abort+0x5e8>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d063      	beq.n	80022a2 <HAL_DMA_Abort+0x58a>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a49      	ldr	r2, [pc, #292]	@ (8002304 <HAL_DMA_Abort+0x5ec>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d05e      	beq.n	80022a2 <HAL_DMA_Abort+0x58a>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a47      	ldr	r2, [pc, #284]	@ (8002308 <HAL_DMA_Abort+0x5f0>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d059      	beq.n	80022a2 <HAL_DMA_Abort+0x58a>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a46      	ldr	r2, [pc, #280]	@ (800230c <HAL_DMA_Abort+0x5f4>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d054      	beq.n	80022a2 <HAL_DMA_Abort+0x58a>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a44      	ldr	r2, [pc, #272]	@ (8002310 <HAL_DMA_Abort+0x5f8>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d04f      	beq.n	80022a2 <HAL_DMA_Abort+0x58a>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a43      	ldr	r2, [pc, #268]	@ (8002314 <HAL_DMA_Abort+0x5fc>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d04a      	beq.n	80022a2 <HAL_DMA_Abort+0x58a>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a41      	ldr	r2, [pc, #260]	@ (8002318 <HAL_DMA_Abort+0x600>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d045      	beq.n	80022a2 <HAL_DMA_Abort+0x58a>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a40      	ldr	r2, [pc, #256]	@ (800231c <HAL_DMA_Abort+0x604>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d040      	beq.n	80022a2 <HAL_DMA_Abort+0x58a>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a3e      	ldr	r2, [pc, #248]	@ (8002320 <HAL_DMA_Abort+0x608>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d03b      	beq.n	80022a2 <HAL_DMA_Abort+0x58a>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a3d      	ldr	r2, [pc, #244]	@ (8002324 <HAL_DMA_Abort+0x60c>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d036      	beq.n	80022a2 <HAL_DMA_Abort+0x58a>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a3b      	ldr	r2, [pc, #236]	@ (8002328 <HAL_DMA_Abort+0x610>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d031      	beq.n	80022a2 <HAL_DMA_Abort+0x58a>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a3a      	ldr	r2, [pc, #232]	@ (800232c <HAL_DMA_Abort+0x614>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d02c      	beq.n	80022a2 <HAL_DMA_Abort+0x58a>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a38      	ldr	r2, [pc, #224]	@ (8002330 <HAL_DMA_Abort+0x618>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d027      	beq.n	80022a2 <HAL_DMA_Abort+0x58a>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a37      	ldr	r2, [pc, #220]	@ (8002334 <HAL_DMA_Abort+0x61c>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d022      	beq.n	80022a2 <HAL_DMA_Abort+0x58a>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a35      	ldr	r2, [pc, #212]	@ (8002338 <HAL_DMA_Abort+0x620>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d01d      	beq.n	80022a2 <HAL_DMA_Abort+0x58a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a34      	ldr	r2, [pc, #208]	@ (800233c <HAL_DMA_Abort+0x624>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d018      	beq.n	80022a2 <HAL_DMA_Abort+0x58a>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a32      	ldr	r2, [pc, #200]	@ (8002340 <HAL_DMA_Abort+0x628>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d013      	beq.n	80022a2 <HAL_DMA_Abort+0x58a>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a31      	ldr	r2, [pc, #196]	@ (8002344 <HAL_DMA_Abort+0x62c>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d00e      	beq.n	80022a2 <HAL_DMA_Abort+0x58a>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a2f      	ldr	r2, [pc, #188]	@ (8002348 <HAL_DMA_Abort+0x630>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d009      	beq.n	80022a2 <HAL_DMA_Abort+0x58a>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a2e      	ldr	r2, [pc, #184]	@ (800234c <HAL_DMA_Abort+0x634>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d004      	beq.n	80022a2 <HAL_DMA_Abort+0x58a>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a2c      	ldr	r2, [pc, #176]	@ (8002350 <HAL_DMA_Abort+0x638>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d101      	bne.n	80022a6 <HAL_DMA_Abort+0x58e>
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <HAL_DMA_Abort+0x590>
 80022a6:	2300      	movs	r3, #0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d015      	beq.n	80022d8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80022b4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00c      	beq.n	80022d8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022cc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80022d6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40020010 	.word	0x40020010
 80022f8:	40020028 	.word	0x40020028
 80022fc:	40020040 	.word	0x40020040
 8002300:	40020058 	.word	0x40020058
 8002304:	40020070 	.word	0x40020070
 8002308:	40020088 	.word	0x40020088
 800230c:	400200a0 	.word	0x400200a0
 8002310:	400200b8 	.word	0x400200b8
 8002314:	40020410 	.word	0x40020410
 8002318:	40020428 	.word	0x40020428
 800231c:	40020440 	.word	0x40020440
 8002320:	40020458 	.word	0x40020458
 8002324:	40020470 	.word	0x40020470
 8002328:	40020488 	.word	0x40020488
 800232c:	400204a0 	.word	0x400204a0
 8002330:	400204b8 	.word	0x400204b8
 8002334:	58025408 	.word	0x58025408
 8002338:	5802541c 	.word	0x5802541c
 800233c:	58025430 	.word	0x58025430
 8002340:	58025444 	.word	0x58025444
 8002344:	58025458 	.word	0x58025458
 8002348:	5802546c 	.word	0x5802546c
 800234c:	58025480 	.word	0x58025480
 8002350:	58025494 	.word	0x58025494

08002354 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e237      	b.n	80027d6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d004      	beq.n	800237c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2280      	movs	r2, #128	@ 0x80
 8002376:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e22c      	b.n	80027d6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a5c      	ldr	r2, [pc, #368]	@ (80024f4 <HAL_DMA_Abort_IT+0x1a0>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d04a      	beq.n	800241c <HAL_DMA_Abort_IT+0xc8>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a5b      	ldr	r2, [pc, #364]	@ (80024f8 <HAL_DMA_Abort_IT+0x1a4>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d045      	beq.n	800241c <HAL_DMA_Abort_IT+0xc8>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a59      	ldr	r2, [pc, #356]	@ (80024fc <HAL_DMA_Abort_IT+0x1a8>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d040      	beq.n	800241c <HAL_DMA_Abort_IT+0xc8>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a58      	ldr	r2, [pc, #352]	@ (8002500 <HAL_DMA_Abort_IT+0x1ac>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d03b      	beq.n	800241c <HAL_DMA_Abort_IT+0xc8>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a56      	ldr	r2, [pc, #344]	@ (8002504 <HAL_DMA_Abort_IT+0x1b0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d036      	beq.n	800241c <HAL_DMA_Abort_IT+0xc8>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a55      	ldr	r2, [pc, #340]	@ (8002508 <HAL_DMA_Abort_IT+0x1b4>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d031      	beq.n	800241c <HAL_DMA_Abort_IT+0xc8>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a53      	ldr	r2, [pc, #332]	@ (800250c <HAL_DMA_Abort_IT+0x1b8>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d02c      	beq.n	800241c <HAL_DMA_Abort_IT+0xc8>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a52      	ldr	r2, [pc, #328]	@ (8002510 <HAL_DMA_Abort_IT+0x1bc>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d027      	beq.n	800241c <HAL_DMA_Abort_IT+0xc8>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a50      	ldr	r2, [pc, #320]	@ (8002514 <HAL_DMA_Abort_IT+0x1c0>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d022      	beq.n	800241c <HAL_DMA_Abort_IT+0xc8>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a4f      	ldr	r2, [pc, #316]	@ (8002518 <HAL_DMA_Abort_IT+0x1c4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d01d      	beq.n	800241c <HAL_DMA_Abort_IT+0xc8>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a4d      	ldr	r2, [pc, #308]	@ (800251c <HAL_DMA_Abort_IT+0x1c8>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d018      	beq.n	800241c <HAL_DMA_Abort_IT+0xc8>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a4c      	ldr	r2, [pc, #304]	@ (8002520 <HAL_DMA_Abort_IT+0x1cc>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d013      	beq.n	800241c <HAL_DMA_Abort_IT+0xc8>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a4a      	ldr	r2, [pc, #296]	@ (8002524 <HAL_DMA_Abort_IT+0x1d0>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d00e      	beq.n	800241c <HAL_DMA_Abort_IT+0xc8>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a49      	ldr	r2, [pc, #292]	@ (8002528 <HAL_DMA_Abort_IT+0x1d4>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d009      	beq.n	800241c <HAL_DMA_Abort_IT+0xc8>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a47      	ldr	r2, [pc, #284]	@ (800252c <HAL_DMA_Abort_IT+0x1d8>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d004      	beq.n	800241c <HAL_DMA_Abort_IT+0xc8>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a46      	ldr	r2, [pc, #280]	@ (8002530 <HAL_DMA_Abort_IT+0x1dc>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d101      	bne.n	8002420 <HAL_DMA_Abort_IT+0xcc>
 800241c:	2301      	movs	r3, #1
 800241e:	e000      	b.n	8002422 <HAL_DMA_Abort_IT+0xce>
 8002420:	2300      	movs	r3, #0
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 8086 	beq.w	8002534 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2204      	movs	r2, #4
 800242c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a2f      	ldr	r2, [pc, #188]	@ (80024f4 <HAL_DMA_Abort_IT+0x1a0>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d04a      	beq.n	80024d0 <HAL_DMA_Abort_IT+0x17c>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a2e      	ldr	r2, [pc, #184]	@ (80024f8 <HAL_DMA_Abort_IT+0x1a4>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d045      	beq.n	80024d0 <HAL_DMA_Abort_IT+0x17c>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a2c      	ldr	r2, [pc, #176]	@ (80024fc <HAL_DMA_Abort_IT+0x1a8>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d040      	beq.n	80024d0 <HAL_DMA_Abort_IT+0x17c>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a2b      	ldr	r2, [pc, #172]	@ (8002500 <HAL_DMA_Abort_IT+0x1ac>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d03b      	beq.n	80024d0 <HAL_DMA_Abort_IT+0x17c>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a29      	ldr	r2, [pc, #164]	@ (8002504 <HAL_DMA_Abort_IT+0x1b0>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d036      	beq.n	80024d0 <HAL_DMA_Abort_IT+0x17c>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a28      	ldr	r2, [pc, #160]	@ (8002508 <HAL_DMA_Abort_IT+0x1b4>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d031      	beq.n	80024d0 <HAL_DMA_Abort_IT+0x17c>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a26      	ldr	r2, [pc, #152]	@ (800250c <HAL_DMA_Abort_IT+0x1b8>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d02c      	beq.n	80024d0 <HAL_DMA_Abort_IT+0x17c>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a25      	ldr	r2, [pc, #148]	@ (8002510 <HAL_DMA_Abort_IT+0x1bc>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d027      	beq.n	80024d0 <HAL_DMA_Abort_IT+0x17c>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a23      	ldr	r2, [pc, #140]	@ (8002514 <HAL_DMA_Abort_IT+0x1c0>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d022      	beq.n	80024d0 <HAL_DMA_Abort_IT+0x17c>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a22      	ldr	r2, [pc, #136]	@ (8002518 <HAL_DMA_Abort_IT+0x1c4>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d01d      	beq.n	80024d0 <HAL_DMA_Abort_IT+0x17c>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a20      	ldr	r2, [pc, #128]	@ (800251c <HAL_DMA_Abort_IT+0x1c8>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d018      	beq.n	80024d0 <HAL_DMA_Abort_IT+0x17c>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002520 <HAL_DMA_Abort_IT+0x1cc>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d013      	beq.n	80024d0 <HAL_DMA_Abort_IT+0x17c>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002524 <HAL_DMA_Abort_IT+0x1d0>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d00e      	beq.n	80024d0 <HAL_DMA_Abort_IT+0x17c>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002528 <HAL_DMA_Abort_IT+0x1d4>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d009      	beq.n	80024d0 <HAL_DMA_Abort_IT+0x17c>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a1a      	ldr	r2, [pc, #104]	@ (800252c <HAL_DMA_Abort_IT+0x1d8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d004      	beq.n	80024d0 <HAL_DMA_Abort_IT+0x17c>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a19      	ldr	r2, [pc, #100]	@ (8002530 <HAL_DMA_Abort_IT+0x1dc>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d108      	bne.n	80024e2 <HAL_DMA_Abort_IT+0x18e>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0201 	bic.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	e178      	b.n	80027d4 <HAL_DMA_Abort_IT+0x480>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0201 	bic.w	r2, r2, #1
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	e16f      	b.n	80027d4 <HAL_DMA_Abort_IT+0x480>
 80024f4:	40020010 	.word	0x40020010
 80024f8:	40020028 	.word	0x40020028
 80024fc:	40020040 	.word	0x40020040
 8002500:	40020058 	.word	0x40020058
 8002504:	40020070 	.word	0x40020070
 8002508:	40020088 	.word	0x40020088
 800250c:	400200a0 	.word	0x400200a0
 8002510:	400200b8 	.word	0x400200b8
 8002514:	40020410 	.word	0x40020410
 8002518:	40020428 	.word	0x40020428
 800251c:	40020440 	.word	0x40020440
 8002520:	40020458 	.word	0x40020458
 8002524:	40020470 	.word	0x40020470
 8002528:	40020488 	.word	0x40020488
 800252c:	400204a0 	.word	0x400204a0
 8002530:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 020e 	bic.w	r2, r2, #14
 8002542:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a6c      	ldr	r2, [pc, #432]	@ (80026fc <HAL_DMA_Abort_IT+0x3a8>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d04a      	beq.n	80025e4 <HAL_DMA_Abort_IT+0x290>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a6b      	ldr	r2, [pc, #428]	@ (8002700 <HAL_DMA_Abort_IT+0x3ac>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d045      	beq.n	80025e4 <HAL_DMA_Abort_IT+0x290>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a69      	ldr	r2, [pc, #420]	@ (8002704 <HAL_DMA_Abort_IT+0x3b0>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d040      	beq.n	80025e4 <HAL_DMA_Abort_IT+0x290>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a68      	ldr	r2, [pc, #416]	@ (8002708 <HAL_DMA_Abort_IT+0x3b4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d03b      	beq.n	80025e4 <HAL_DMA_Abort_IT+0x290>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a66      	ldr	r2, [pc, #408]	@ (800270c <HAL_DMA_Abort_IT+0x3b8>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d036      	beq.n	80025e4 <HAL_DMA_Abort_IT+0x290>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a65      	ldr	r2, [pc, #404]	@ (8002710 <HAL_DMA_Abort_IT+0x3bc>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d031      	beq.n	80025e4 <HAL_DMA_Abort_IT+0x290>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a63      	ldr	r2, [pc, #396]	@ (8002714 <HAL_DMA_Abort_IT+0x3c0>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d02c      	beq.n	80025e4 <HAL_DMA_Abort_IT+0x290>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a62      	ldr	r2, [pc, #392]	@ (8002718 <HAL_DMA_Abort_IT+0x3c4>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d027      	beq.n	80025e4 <HAL_DMA_Abort_IT+0x290>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a60      	ldr	r2, [pc, #384]	@ (800271c <HAL_DMA_Abort_IT+0x3c8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d022      	beq.n	80025e4 <HAL_DMA_Abort_IT+0x290>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a5f      	ldr	r2, [pc, #380]	@ (8002720 <HAL_DMA_Abort_IT+0x3cc>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d01d      	beq.n	80025e4 <HAL_DMA_Abort_IT+0x290>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a5d      	ldr	r2, [pc, #372]	@ (8002724 <HAL_DMA_Abort_IT+0x3d0>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d018      	beq.n	80025e4 <HAL_DMA_Abort_IT+0x290>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a5c      	ldr	r2, [pc, #368]	@ (8002728 <HAL_DMA_Abort_IT+0x3d4>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d013      	beq.n	80025e4 <HAL_DMA_Abort_IT+0x290>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a5a      	ldr	r2, [pc, #360]	@ (800272c <HAL_DMA_Abort_IT+0x3d8>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d00e      	beq.n	80025e4 <HAL_DMA_Abort_IT+0x290>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a59      	ldr	r2, [pc, #356]	@ (8002730 <HAL_DMA_Abort_IT+0x3dc>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d009      	beq.n	80025e4 <HAL_DMA_Abort_IT+0x290>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a57      	ldr	r2, [pc, #348]	@ (8002734 <HAL_DMA_Abort_IT+0x3e0>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d004      	beq.n	80025e4 <HAL_DMA_Abort_IT+0x290>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a56      	ldr	r2, [pc, #344]	@ (8002738 <HAL_DMA_Abort_IT+0x3e4>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d108      	bne.n	80025f6 <HAL_DMA_Abort_IT+0x2a2>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0201 	bic.w	r2, r2, #1
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	e007      	b.n	8002606 <HAL_DMA_Abort_IT+0x2b2>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0201 	bic.w	r2, r2, #1
 8002604:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a3c      	ldr	r2, [pc, #240]	@ (80026fc <HAL_DMA_Abort_IT+0x3a8>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d072      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x3a2>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a3a      	ldr	r2, [pc, #232]	@ (8002700 <HAL_DMA_Abort_IT+0x3ac>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d06d      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x3a2>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a39      	ldr	r2, [pc, #228]	@ (8002704 <HAL_DMA_Abort_IT+0x3b0>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d068      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x3a2>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a37      	ldr	r2, [pc, #220]	@ (8002708 <HAL_DMA_Abort_IT+0x3b4>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d063      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x3a2>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a36      	ldr	r2, [pc, #216]	@ (800270c <HAL_DMA_Abort_IT+0x3b8>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d05e      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x3a2>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a34      	ldr	r2, [pc, #208]	@ (8002710 <HAL_DMA_Abort_IT+0x3bc>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d059      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x3a2>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a33      	ldr	r2, [pc, #204]	@ (8002714 <HAL_DMA_Abort_IT+0x3c0>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d054      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x3a2>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a31      	ldr	r2, [pc, #196]	@ (8002718 <HAL_DMA_Abort_IT+0x3c4>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d04f      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x3a2>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a30      	ldr	r2, [pc, #192]	@ (800271c <HAL_DMA_Abort_IT+0x3c8>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d04a      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x3a2>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a2e      	ldr	r2, [pc, #184]	@ (8002720 <HAL_DMA_Abort_IT+0x3cc>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d045      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x3a2>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a2d      	ldr	r2, [pc, #180]	@ (8002724 <HAL_DMA_Abort_IT+0x3d0>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d040      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x3a2>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a2b      	ldr	r2, [pc, #172]	@ (8002728 <HAL_DMA_Abort_IT+0x3d4>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d03b      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x3a2>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a2a      	ldr	r2, [pc, #168]	@ (800272c <HAL_DMA_Abort_IT+0x3d8>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d036      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x3a2>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a28      	ldr	r2, [pc, #160]	@ (8002730 <HAL_DMA_Abort_IT+0x3dc>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d031      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x3a2>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a27      	ldr	r2, [pc, #156]	@ (8002734 <HAL_DMA_Abort_IT+0x3e0>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d02c      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x3a2>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a25      	ldr	r2, [pc, #148]	@ (8002738 <HAL_DMA_Abort_IT+0x3e4>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d027      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x3a2>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a24      	ldr	r2, [pc, #144]	@ (800273c <HAL_DMA_Abort_IT+0x3e8>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d022      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x3a2>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a22      	ldr	r2, [pc, #136]	@ (8002740 <HAL_DMA_Abort_IT+0x3ec>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d01d      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x3a2>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a21      	ldr	r2, [pc, #132]	@ (8002744 <HAL_DMA_Abort_IT+0x3f0>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d018      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x3a2>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a1f      	ldr	r2, [pc, #124]	@ (8002748 <HAL_DMA_Abort_IT+0x3f4>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d013      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x3a2>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a1e      	ldr	r2, [pc, #120]	@ (800274c <HAL_DMA_Abort_IT+0x3f8>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d00e      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x3a2>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002750 <HAL_DMA_Abort_IT+0x3fc>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d009      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x3a2>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a1b      	ldr	r2, [pc, #108]	@ (8002754 <HAL_DMA_Abort_IT+0x400>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d004      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x3a2>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a19      	ldr	r2, [pc, #100]	@ (8002758 <HAL_DMA_Abort_IT+0x404>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d132      	bne.n	800275c <HAL_DMA_Abort_IT+0x408>
 80026f6:	2301      	movs	r3, #1
 80026f8:	e031      	b.n	800275e <HAL_DMA_Abort_IT+0x40a>
 80026fa:	bf00      	nop
 80026fc:	40020010 	.word	0x40020010
 8002700:	40020028 	.word	0x40020028
 8002704:	40020040 	.word	0x40020040
 8002708:	40020058 	.word	0x40020058
 800270c:	40020070 	.word	0x40020070
 8002710:	40020088 	.word	0x40020088
 8002714:	400200a0 	.word	0x400200a0
 8002718:	400200b8 	.word	0x400200b8
 800271c:	40020410 	.word	0x40020410
 8002720:	40020428 	.word	0x40020428
 8002724:	40020440 	.word	0x40020440
 8002728:	40020458 	.word	0x40020458
 800272c:	40020470 	.word	0x40020470
 8002730:	40020488 	.word	0x40020488
 8002734:	400204a0 	.word	0x400204a0
 8002738:	400204b8 	.word	0x400204b8
 800273c:	58025408 	.word	0x58025408
 8002740:	5802541c 	.word	0x5802541c
 8002744:	58025430 	.word	0x58025430
 8002748:	58025444 	.word	0x58025444
 800274c:	58025458 	.word	0x58025458
 8002750:	5802546c 	.word	0x5802546c
 8002754:	58025480 	.word	0x58025480
 8002758:	58025494 	.word	0x58025494
 800275c:	2300      	movs	r3, #0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d028      	beq.n	80027b4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800276c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002770:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002776:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800277c:	f003 031f 	and.w	r3, r3, #31
 8002780:	2201      	movs	r2, #1
 8002782:	409a      	lsls	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002790:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00c      	beq.n	80027b4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027a8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80027b2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop

080027e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b089      	sub	sp, #36	@ 0x24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80027ee:	4b89      	ldr	r3, [pc, #548]	@ (8002a14 <HAL_GPIO_Init+0x234>)
 80027f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80027f2:	e194      	b.n	8002b1e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	2101      	movs	r1, #1
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002800:	4013      	ands	r3, r2
 8002802:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 8186 	beq.w	8002b18 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 0303 	and.w	r3, r3, #3
 8002814:	2b01      	cmp	r3, #1
 8002816:	d005      	beq.n	8002824 <HAL_GPIO_Init+0x44>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d130      	bne.n	8002886 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	2203      	movs	r2, #3
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800285a:	2201      	movs	r2, #1
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43db      	mvns	r3, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4013      	ands	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	091b      	lsrs	r3, r3, #4
 8002870:	f003 0201 	and.w	r2, r3, #1
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	2b03      	cmp	r3, #3
 8002890:	d017      	beq.n	80028c2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	2203      	movs	r2, #3
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43db      	mvns	r3, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4013      	ands	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d123      	bne.n	8002916 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	08da      	lsrs	r2, r3, #3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3208      	adds	r2, #8
 80028d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	220f      	movs	r2, #15
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43db      	mvns	r3, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4013      	ands	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	691a      	ldr	r2, [r3, #16]
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4313      	orrs	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	08da      	lsrs	r2, r3, #3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3208      	adds	r2, #8
 8002910:	69b9      	ldr	r1, [r7, #24]
 8002912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	2203      	movs	r2, #3
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43db      	mvns	r3, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4013      	ands	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f003 0203 	and.w	r2, r3, #3
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4313      	orrs	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 80e0 	beq.w	8002b18 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002958:	4b2f      	ldr	r3, [pc, #188]	@ (8002a18 <HAL_GPIO_Init+0x238>)
 800295a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800295e:	4a2e      	ldr	r2, [pc, #184]	@ (8002a18 <HAL_GPIO_Init+0x238>)
 8002960:	f043 0302 	orr.w	r3, r3, #2
 8002964:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002968:	4b2b      	ldr	r3, [pc, #172]	@ (8002a18 <HAL_GPIO_Init+0x238>)
 800296a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002976:	4a29      	ldr	r2, [pc, #164]	@ (8002a1c <HAL_GPIO_Init+0x23c>)
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	089b      	lsrs	r3, r3, #2
 800297c:	3302      	adds	r3, #2
 800297e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002982:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	220f      	movs	r2, #15
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43db      	mvns	r3, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4013      	ands	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a20      	ldr	r2, [pc, #128]	@ (8002a20 <HAL_GPIO_Init+0x240>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d052      	beq.n	8002a48 <HAL_GPIO_Init+0x268>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a1f      	ldr	r2, [pc, #124]	@ (8002a24 <HAL_GPIO_Init+0x244>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d031      	beq.n	8002a0e <HAL_GPIO_Init+0x22e>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a1e      	ldr	r2, [pc, #120]	@ (8002a28 <HAL_GPIO_Init+0x248>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d02b      	beq.n	8002a0a <HAL_GPIO_Init+0x22a>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a1d      	ldr	r2, [pc, #116]	@ (8002a2c <HAL_GPIO_Init+0x24c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d025      	beq.n	8002a06 <HAL_GPIO_Init+0x226>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a1c      	ldr	r2, [pc, #112]	@ (8002a30 <HAL_GPIO_Init+0x250>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d01f      	beq.n	8002a02 <HAL_GPIO_Init+0x222>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a1b      	ldr	r2, [pc, #108]	@ (8002a34 <HAL_GPIO_Init+0x254>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d019      	beq.n	80029fe <HAL_GPIO_Init+0x21e>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a1a      	ldr	r2, [pc, #104]	@ (8002a38 <HAL_GPIO_Init+0x258>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d013      	beq.n	80029fa <HAL_GPIO_Init+0x21a>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a19      	ldr	r2, [pc, #100]	@ (8002a3c <HAL_GPIO_Init+0x25c>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d00d      	beq.n	80029f6 <HAL_GPIO_Init+0x216>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a18      	ldr	r2, [pc, #96]	@ (8002a40 <HAL_GPIO_Init+0x260>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d007      	beq.n	80029f2 <HAL_GPIO_Init+0x212>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a17      	ldr	r2, [pc, #92]	@ (8002a44 <HAL_GPIO_Init+0x264>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d101      	bne.n	80029ee <HAL_GPIO_Init+0x20e>
 80029ea:	2309      	movs	r3, #9
 80029ec:	e02d      	b.n	8002a4a <HAL_GPIO_Init+0x26a>
 80029ee:	230a      	movs	r3, #10
 80029f0:	e02b      	b.n	8002a4a <HAL_GPIO_Init+0x26a>
 80029f2:	2308      	movs	r3, #8
 80029f4:	e029      	b.n	8002a4a <HAL_GPIO_Init+0x26a>
 80029f6:	2307      	movs	r3, #7
 80029f8:	e027      	b.n	8002a4a <HAL_GPIO_Init+0x26a>
 80029fa:	2306      	movs	r3, #6
 80029fc:	e025      	b.n	8002a4a <HAL_GPIO_Init+0x26a>
 80029fe:	2305      	movs	r3, #5
 8002a00:	e023      	b.n	8002a4a <HAL_GPIO_Init+0x26a>
 8002a02:	2304      	movs	r3, #4
 8002a04:	e021      	b.n	8002a4a <HAL_GPIO_Init+0x26a>
 8002a06:	2303      	movs	r3, #3
 8002a08:	e01f      	b.n	8002a4a <HAL_GPIO_Init+0x26a>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e01d      	b.n	8002a4a <HAL_GPIO_Init+0x26a>
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e01b      	b.n	8002a4a <HAL_GPIO_Init+0x26a>
 8002a12:	bf00      	nop
 8002a14:	58000080 	.word	0x58000080
 8002a18:	58024400 	.word	0x58024400
 8002a1c:	58000400 	.word	0x58000400
 8002a20:	58020000 	.word	0x58020000
 8002a24:	58020400 	.word	0x58020400
 8002a28:	58020800 	.word	0x58020800
 8002a2c:	58020c00 	.word	0x58020c00
 8002a30:	58021000 	.word	0x58021000
 8002a34:	58021400 	.word	0x58021400
 8002a38:	58021800 	.word	0x58021800
 8002a3c:	58021c00 	.word	0x58021c00
 8002a40:	58022000 	.word	0x58022000
 8002a44:	58022400 	.word	0x58022400
 8002a48:	2300      	movs	r3, #0
 8002a4a:	69fa      	ldr	r2, [r7, #28]
 8002a4c:	f002 0203 	and.w	r2, r2, #3
 8002a50:	0092      	lsls	r2, r2, #2
 8002a52:	4093      	lsls	r3, r2
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a5a:	4938      	ldr	r1, [pc, #224]	@ (8002b3c <HAL_GPIO_Init+0x35c>)
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	089b      	lsrs	r3, r3, #2
 8002a60:	3302      	adds	r3, #2
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	43db      	mvns	r3, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4013      	ands	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002a8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002abc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	43db      	mvns	r3, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	43db      	mvns	r3, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4013      	ands	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	fa22 f303 	lsr.w	r3, r2, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f47f ae63 	bne.w	80027f4 <HAL_GPIO_Init+0x14>
  }
}
 8002b2e:	bf00      	nop
 8002b30:	bf00      	nop
 8002b32:	3724      	adds	r7, #36	@ 0x24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	58000400 	.word	0x58000400

08002b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	807b      	strh	r3, [r7, #2]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b50:	787b      	ldrb	r3, [r7, #1]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b56:	887a      	ldrh	r2, [r7, #2]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002b5c:	e003      	b.n	8002b66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b5e:	887b      	ldrh	r3, [r7, #2]
 8002b60:	041a      	lsls	r2, r3, #16
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	619a      	str	r2, [r3, #24]
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
	...

08002b74 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002b7c:	4a08      	ldr	r2, [pc, #32]	@ (8002ba0 <HAL_HSEM_FastTake+0x2c>)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	3320      	adds	r3, #32
 8002b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b86:	4a07      	ldr	r2, [pc, #28]	@ (8002ba4 <HAL_HSEM_FastTake+0x30>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d101      	bne.n	8002b90 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	e000      	b.n	8002b92 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	58026400 	.word	0x58026400
 8002ba4:	80000300 	.word	0x80000300

08002ba8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002bb2:	4906      	ldr	r1, [pc, #24]	@ (8002bcc <HAL_HSEM_Release+0x24>)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	58026400 	.word	0x58026400

08002bd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e08b      	b.n	8002cfa <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d106      	bne.n	8002bfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7fe f90a 	bl	8000e10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2224      	movs	r2, #36	@ 0x24
 8002c00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0201 	bic.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c20:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c30:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d107      	bne.n	8002c4a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	e006      	b.n	8002c58 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002c56:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d108      	bne.n	8002c72 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c6e:	605a      	str	r2, [r3, #4]
 8002c70:	e007      	b.n	8002c82 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6859      	ldr	r1, [r3, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002d04 <HAL_I2C_Init+0x134>)
 8002c8e:	430b      	orrs	r3, r1
 8002c90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68da      	ldr	r2, [r3, #12]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ca0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	691a      	ldr	r2, [r3, #16]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	69d9      	ldr	r1, [r3, #28]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a1a      	ldr	r2, [r3, #32]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f042 0201 	orr.w	r2, r2, #1
 8002cda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	02008000 	.word	0x02008000

08002d08 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	607a      	str	r2, [r7, #4]
 8002d12:	461a      	mov	r2, r3
 8002d14:	460b      	mov	r3, r1
 8002d16:	817b      	strh	r3, [r7, #10]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b20      	cmp	r3, #32
 8002d26:	f040 80fd 	bne.w	8002f24 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d101      	bne.n	8002d38 <HAL_I2C_Master_Transmit+0x30>
 8002d34:	2302      	movs	r3, #2
 8002d36:	e0f6      	b.n	8002f26 <HAL_I2C_Master_Transmit+0x21e>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d40:	f7fe fe9e 	bl	8001a80 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	2319      	movs	r3, #25
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 f914 	bl	8002f80 <I2C_WaitOnFlagUntilTimeout>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e0e1      	b.n	8002f26 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2221      	movs	r2, #33	@ 0x21
 8002d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2210      	movs	r2, #16
 8002d6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	893a      	ldrh	r2, [r7, #8]
 8002d82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	2bff      	cmp	r3, #255	@ 0xff
 8002d92:	d906      	bls.n	8002da2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	22ff      	movs	r2, #255	@ 0xff
 8002d98:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002d9a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	e007      	b.n	8002db2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002dac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002db0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d024      	beq.n	8002e04 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbe:	781a      	ldrb	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dca:	1c5a      	adds	r2, r3, #1
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	3301      	adds	r3, #1
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	8979      	ldrh	r1, [r7, #10]
 8002df6:	4b4e      	ldr	r3, [pc, #312]	@ (8002f30 <HAL_I2C_Master_Transmit+0x228>)
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 fa83 	bl	8003308 <I2C_TransferConfig>
 8002e02:	e066      	b.n	8002ed2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	8979      	ldrh	r1, [r7, #10]
 8002e0c:	4b48      	ldr	r3, [pc, #288]	@ (8002f30 <HAL_I2C_Master_Transmit+0x228>)
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 fa78 	bl	8003308 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002e18:	e05b      	b.n	8002ed2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	6a39      	ldr	r1, [r7, #32]
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 f907 	bl	8003032 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e07b      	b.n	8002f26 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e32:	781a      	ldrb	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e56:	3b01      	subs	r3, #1
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d034      	beq.n	8002ed2 <HAL_I2C_Master_Transmit+0x1ca>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d130      	bne.n	8002ed2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	6a3b      	ldr	r3, [r7, #32]
 8002e76:	2200      	movs	r2, #0
 8002e78:	2180      	movs	r1, #128	@ 0x80
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 f880 	bl	8002f80 <I2C_WaitOnFlagUntilTimeout>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e04d      	b.n	8002f26 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	2bff      	cmp	r3, #255	@ 0xff
 8002e92:	d90e      	bls.n	8002eb2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	22ff      	movs	r2, #255	@ 0xff
 8002e98:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	8979      	ldrh	r1, [r7, #10]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 fa2c 	bl	8003308 <I2C_TransferConfig>
 8002eb0:	e00f      	b.n	8002ed2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	8979      	ldrh	r1, [r7, #10]
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 fa1b 	bl	8003308 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d19e      	bne.n	8002e1a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	6a39      	ldr	r1, [r7, #32]
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 f8ed 	bl	80030c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e01a      	b.n	8002f26 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6859      	ldr	r1, [r3, #4]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	4b0c      	ldr	r3, [pc, #48]	@ (8002f34 <HAL_I2C_Master_Transmit+0x22c>)
 8002f04:	400b      	ands	r3, r1
 8002f06:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	e000      	b.n	8002f26 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002f24:	2302      	movs	r3, #2
  }
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	80002000 	.word	0x80002000
 8002f34:	fe00e800 	.word	0xfe00e800

08002f38 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d103      	bne.n	8002f56 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2200      	movs	r2, #0
 8002f54:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d007      	beq.n	8002f74 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699a      	ldr	r2, [r3, #24]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0201 	orr.w	r2, r2, #1
 8002f72:	619a      	str	r2, [r3, #24]
  }
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	603b      	str	r3, [r7, #0]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f90:	e03b      	b.n	800300a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	6839      	ldr	r1, [r7, #0]
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 f8d6 	bl	8003148 <I2C_IsErrorOccurred>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e041      	b.n	800302a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fac:	d02d      	beq.n	800300a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fae:	f7fe fd67 	bl	8001a80 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d302      	bcc.n	8002fc4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d122      	bne.n	800300a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	699a      	ldr	r2, [r3, #24]
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	bf0c      	ite	eq
 8002fd4:	2301      	moveq	r3, #1
 8002fd6:	2300      	movne	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	461a      	mov	r2, r3
 8002fdc:	79fb      	ldrb	r3, [r7, #7]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d113      	bne.n	800300a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe6:	f043 0220 	orr.w	r2, r3, #32
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e00f      	b.n	800302a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	699a      	ldr	r2, [r3, #24]
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	4013      	ands	r3, r2
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	429a      	cmp	r2, r3
 8003018:	bf0c      	ite	eq
 800301a:	2301      	moveq	r3, #1
 800301c:	2300      	movne	r3, #0
 800301e:	b2db      	uxtb	r3, r3
 8003020:	461a      	mov	r2, r3
 8003022:	79fb      	ldrb	r3, [r7, #7]
 8003024:	429a      	cmp	r2, r3
 8003026:	d0b4      	beq.n	8002f92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b084      	sub	sp, #16
 8003036:	af00      	add	r7, sp, #0
 8003038:	60f8      	str	r0, [r7, #12]
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800303e:	e033      	b.n	80030a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	68b9      	ldr	r1, [r7, #8]
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f000 f87f 	bl	8003148 <I2C_IsErrorOccurred>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e031      	b.n	80030b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305a:	d025      	beq.n	80030a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800305c:	f7fe fd10 	bl	8001a80 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	429a      	cmp	r2, r3
 800306a:	d302      	bcc.n	8003072 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d11a      	bne.n	80030a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b02      	cmp	r3, #2
 800307e:	d013      	beq.n	80030a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003084:	f043 0220 	orr.w	r2, r3, #32
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2220      	movs	r2, #32
 8003090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e007      	b.n	80030b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d1c4      	bne.n	8003040 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030cc:	e02f      	b.n	800312e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 f838 	bl	8003148 <I2C_IsErrorOccurred>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e02d      	b.n	800313e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e2:	f7fe fccd 	bl	8001a80 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d302      	bcc.n	80030f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d11a      	bne.n	800312e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	f003 0320 	and.w	r3, r3, #32
 8003102:	2b20      	cmp	r3, #32
 8003104:	d013      	beq.n	800312e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310a:	f043 0220 	orr.w	r2, r3, #32
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2220      	movs	r2, #32
 8003116:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e007      	b.n	800313e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	f003 0320 	and.w	r3, r3, #32
 8003138:	2b20      	cmp	r3, #32
 800313a:	d1c8      	bne.n	80030ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
	...

08003148 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b08a      	sub	sp, #40	@ 0x28
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003154:	2300      	movs	r3, #0
 8003156:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003162:	2300      	movs	r3, #0
 8003164:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	f003 0310 	and.w	r3, r3, #16
 8003170:	2b00      	cmp	r3, #0
 8003172:	d068      	beq.n	8003246 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2210      	movs	r2, #16
 800317a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800317c:	e049      	b.n	8003212 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003184:	d045      	beq.n	8003212 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003186:	f7fe fc7b 	bl	8001a80 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	429a      	cmp	r2, r3
 8003194:	d302      	bcc.n	800319c <I2C_IsErrorOccurred+0x54>
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d13a      	bne.n	8003212 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031be:	d121      	bne.n	8003204 <I2C_IsErrorOccurred+0xbc>
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031c6:	d01d      	beq.n	8003204 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80031c8:	7cfb      	ldrb	r3, [r7, #19]
 80031ca:	2b20      	cmp	r3, #32
 80031cc:	d01a      	beq.n	8003204 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031dc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80031de:	f7fe fc4f 	bl	8001a80 <HAL_GetTick>
 80031e2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031e4:	e00e      	b.n	8003204 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80031e6:	f7fe fc4b 	bl	8001a80 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b19      	cmp	r3, #25
 80031f2:	d907      	bls.n	8003204 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	f043 0320 	orr.w	r3, r3, #32
 80031fa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003202:	e006      	b.n	8003212 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	f003 0320 	and.w	r3, r3, #32
 800320e:	2b20      	cmp	r3, #32
 8003210:	d1e9      	bne.n	80031e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	f003 0320 	and.w	r3, r3, #32
 800321c:	2b20      	cmp	r3, #32
 800321e:	d003      	beq.n	8003228 <I2C_IsErrorOccurred+0xe0>
 8003220:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0aa      	beq.n	800317e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003228:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800322c:	2b00      	cmp	r3, #0
 800322e:	d103      	bne.n	8003238 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2220      	movs	r2, #32
 8003236:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	f043 0304 	orr.w	r3, r3, #4
 800323e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00b      	beq.n	8003270 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	f043 0301 	orr.w	r3, r3, #1
 800325e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003268:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00b      	beq.n	8003292 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800327a:	6a3b      	ldr	r3, [r7, #32]
 800327c:	f043 0308 	orr.w	r3, r3, #8
 8003280:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800328a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00b      	beq.n	80032b4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	f043 0302 	orr.w	r3, r3, #2
 80032a2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80032b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d01c      	beq.n	80032f6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f7ff fe3b 	bl	8002f38 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6859      	ldr	r1, [r3, #4]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	4b0d      	ldr	r3, [pc, #52]	@ (8003304 <I2C_IsErrorOccurred+0x1bc>)
 80032ce:	400b      	ands	r3, r1
 80032d0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	431a      	orrs	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2220      	movs	r2, #32
 80032e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80032f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3728      	adds	r7, #40	@ 0x28
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	fe00e800 	.word	0xfe00e800

08003308 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003308:	b480      	push	{r7}
 800330a:	b087      	sub	sp, #28
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	607b      	str	r3, [r7, #4]
 8003312:	460b      	mov	r3, r1
 8003314:	817b      	strh	r3, [r7, #10]
 8003316:	4613      	mov	r3, r2
 8003318:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800331a:	897b      	ldrh	r3, [r7, #10]
 800331c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003320:	7a7b      	ldrb	r3, [r7, #9]
 8003322:	041b      	lsls	r3, r3, #16
 8003324:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003328:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	4313      	orrs	r3, r2
 8003332:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003336:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	6a3b      	ldr	r3, [r7, #32]
 8003340:	0d5b      	lsrs	r3, r3, #21
 8003342:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003346:	4b08      	ldr	r3, [pc, #32]	@ (8003368 <I2C_TransferConfig+0x60>)
 8003348:	430b      	orrs	r3, r1
 800334a:	43db      	mvns	r3, r3
 800334c:	ea02 0103 	and.w	r1, r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	430a      	orrs	r2, r1
 8003358:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800335a:	bf00      	nop
 800335c:	371c      	adds	r7, #28
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	03ff63ff 	.word	0x03ff63ff

0800336c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b20      	cmp	r3, #32
 8003380:	d138      	bne.n	80033f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800338c:	2302      	movs	r3, #2
 800338e:	e032      	b.n	80033f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2224      	movs	r2, #36	@ 0x24
 800339c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0201 	bic.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80033be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6819      	ldr	r1, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	e000      	b.n	80033f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033f4:	2302      	movs	r3, #2
  }
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003402:	b480      	push	{r7}
 8003404:	b085      	sub	sp, #20
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
 800340a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b20      	cmp	r3, #32
 8003416:	d139      	bne.n	800348c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003422:	2302      	movs	r3, #2
 8003424:	e033      	b.n	800348e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2224      	movs	r2, #36	@ 0x24
 8003432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 0201 	bic.w	r2, r2, #1
 8003444:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003454:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	021b      	lsls	r3, r3, #8
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	4313      	orrs	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0201 	orr.w	r2, r2, #1
 8003476:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2220      	movs	r2, #32
 800347c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003488:	2300      	movs	r3, #0
 800348a:	e000      	b.n	800348e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800348c:	2302      	movs	r3, #2
  }
}
 800348e:	4618      	mov	r0, r3
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
	...

0800349c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80034a4:	4b29      	ldr	r3, [pc, #164]	@ (800354c <HAL_PWREx_ConfigSupply+0xb0>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	2b06      	cmp	r3, #6
 80034ae:	d00a      	beq.n	80034c6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80034b0:	4b26      	ldr	r3, [pc, #152]	@ (800354c <HAL_PWREx_ConfigSupply+0xb0>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d001      	beq.n	80034c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e040      	b.n	8003544 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80034c2:	2300      	movs	r3, #0
 80034c4:	e03e      	b.n	8003544 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80034c6:	4b21      	ldr	r3, [pc, #132]	@ (800354c <HAL_PWREx_ConfigSupply+0xb0>)
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80034ce:	491f      	ldr	r1, [pc, #124]	@ (800354c <HAL_PWREx_ConfigSupply+0xb0>)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80034d6:	f7fe fad3 	bl	8001a80 <HAL_GetTick>
 80034da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80034dc:	e009      	b.n	80034f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80034de:	f7fe facf 	bl	8001a80 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80034ec:	d901      	bls.n	80034f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e028      	b.n	8003544 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80034f2:	4b16      	ldr	r3, [pc, #88]	@ (800354c <HAL_PWREx_ConfigSupply+0xb0>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034fe:	d1ee      	bne.n	80034de <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b1e      	cmp	r3, #30
 8003504:	d008      	beq.n	8003518 <HAL_PWREx_ConfigSupply+0x7c>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b2e      	cmp	r3, #46	@ 0x2e
 800350a:	d005      	beq.n	8003518 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b1d      	cmp	r3, #29
 8003510:	d002      	beq.n	8003518 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b2d      	cmp	r3, #45	@ 0x2d
 8003516:	d114      	bne.n	8003542 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003518:	f7fe fab2 	bl	8001a80 <HAL_GetTick>
 800351c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800351e:	e009      	b.n	8003534 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003520:	f7fe faae 	bl	8001a80 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800352e:	d901      	bls.n	8003534 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e007      	b.n	8003544 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003534:	4b05      	ldr	r3, [pc, #20]	@ (800354c <HAL_PWREx_ConfigSupply+0xb0>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800353c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003540:	d1ee      	bne.n	8003520 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	58024800 	.word	0x58024800

08003550 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08c      	sub	sp, #48	@ 0x30
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d102      	bne.n	8003564 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	f000 bc48 	b.w	8003df4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 8088 	beq.w	8003682 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003572:	4b99      	ldr	r3, [pc, #612]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800357a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800357c:	4b96      	ldr	r3, [pc, #600]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 800357e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003580:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003584:	2b10      	cmp	r3, #16
 8003586:	d007      	beq.n	8003598 <HAL_RCC_OscConfig+0x48>
 8003588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800358a:	2b18      	cmp	r3, #24
 800358c:	d111      	bne.n	80035b2 <HAL_RCC_OscConfig+0x62>
 800358e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003590:	f003 0303 	and.w	r3, r3, #3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d10c      	bne.n	80035b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003598:	4b8f      	ldr	r3, [pc, #572]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d06d      	beq.n	8003680 <HAL_RCC_OscConfig+0x130>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d169      	bne.n	8003680 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	f000 bc21 	b.w	8003df4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035ba:	d106      	bne.n	80035ca <HAL_RCC_OscConfig+0x7a>
 80035bc:	4b86      	ldr	r3, [pc, #536]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a85      	ldr	r2, [pc, #532]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 80035c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035c6:	6013      	str	r3, [r2, #0]
 80035c8:	e02e      	b.n	8003628 <HAL_RCC_OscConfig+0xd8>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10c      	bne.n	80035ec <HAL_RCC_OscConfig+0x9c>
 80035d2:	4b81      	ldr	r3, [pc, #516]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a80      	ldr	r2, [pc, #512]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 80035d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	4b7e      	ldr	r3, [pc, #504]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a7d      	ldr	r2, [pc, #500]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 80035e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	e01d      	b.n	8003628 <HAL_RCC_OscConfig+0xd8>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035f4:	d10c      	bne.n	8003610 <HAL_RCC_OscConfig+0xc0>
 80035f6:	4b78      	ldr	r3, [pc, #480]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a77      	ldr	r2, [pc, #476]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 80035fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003600:	6013      	str	r3, [r2, #0]
 8003602:	4b75      	ldr	r3, [pc, #468]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a74      	ldr	r2, [pc, #464]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 8003608:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	e00b      	b.n	8003628 <HAL_RCC_OscConfig+0xd8>
 8003610:	4b71      	ldr	r3, [pc, #452]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a70      	ldr	r2, [pc, #448]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 8003616:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800361a:	6013      	str	r3, [r2, #0]
 800361c:	4b6e      	ldr	r3, [pc, #440]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a6d      	ldr	r2, [pc, #436]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 8003622:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d013      	beq.n	8003658 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003630:	f7fe fa26 	bl	8001a80 <HAL_GetTick>
 8003634:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003638:	f7fe fa22 	bl	8001a80 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b64      	cmp	r3, #100	@ 0x64
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e3d4      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800364a:	4b63      	ldr	r3, [pc, #396]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0f0      	beq.n	8003638 <HAL_RCC_OscConfig+0xe8>
 8003656:	e014      	b.n	8003682 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003658:	f7fe fa12 	bl	8001a80 <HAL_GetTick>
 800365c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003660:	f7fe fa0e 	bl	8001a80 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b64      	cmp	r3, #100	@ 0x64
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e3c0      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003672:	4b59      	ldr	r3, [pc, #356]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1f0      	bne.n	8003660 <HAL_RCC_OscConfig+0x110>
 800367e:	e000      	b.n	8003682 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 80ca 	beq.w	8003824 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003690:	4b51      	ldr	r3, [pc, #324]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003698:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800369a:	4b4f      	ldr	r3, [pc, #316]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 800369c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800369e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d007      	beq.n	80036b6 <HAL_RCC_OscConfig+0x166>
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	2b18      	cmp	r3, #24
 80036aa:	d156      	bne.n	800375a <HAL_RCC_OscConfig+0x20a>
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d151      	bne.n	800375a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036b6:	4b48      	ldr	r3, [pc, #288]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d005      	beq.n	80036ce <HAL_RCC_OscConfig+0x17e>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e392      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80036ce:	4b42      	ldr	r3, [pc, #264]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f023 0219 	bic.w	r2, r3, #25
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	493f      	ldr	r1, [pc, #252]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e0:	f7fe f9ce 	bl	8001a80 <HAL_GetTick>
 80036e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036e8:	f7fe f9ca 	bl	8001a80 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e37c      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036fa:	4b37      	ldr	r3, [pc, #220]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0304 	and.w	r3, r3, #4
 8003702:	2b00      	cmp	r3, #0
 8003704:	d0f0      	beq.n	80036e8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003706:	f7fe f9eb 	bl	8001ae0 <HAL_GetREVID>
 800370a:	4603      	mov	r3, r0
 800370c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003710:	4293      	cmp	r3, r2
 8003712:	d817      	bhi.n	8003744 <HAL_RCC_OscConfig+0x1f4>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	2b40      	cmp	r3, #64	@ 0x40
 800371a:	d108      	bne.n	800372e <HAL_RCC_OscConfig+0x1de>
 800371c:	4b2e      	ldr	r3, [pc, #184]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003724:	4a2c      	ldr	r2, [pc, #176]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 8003726:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800372a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800372c:	e07a      	b.n	8003824 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800372e:	4b2a      	ldr	r3, [pc, #168]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	031b      	lsls	r3, r3, #12
 800373c:	4926      	ldr	r1, [pc, #152]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 800373e:	4313      	orrs	r3, r2
 8003740:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003742:	e06f      	b.n	8003824 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003744:	4b24      	ldr	r3, [pc, #144]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	061b      	lsls	r3, r3, #24
 8003752:	4921      	ldr	r1, [pc, #132]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 8003754:	4313      	orrs	r3, r2
 8003756:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003758:	e064      	b.n	8003824 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d047      	beq.n	80037f2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003762:	4b1d      	ldr	r3, [pc, #116]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f023 0219 	bic.w	r2, r3, #25
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	491a      	ldr	r1, [pc, #104]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 8003770:	4313      	orrs	r3, r2
 8003772:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003774:	f7fe f984 	bl	8001a80 <HAL_GetTick>
 8003778:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800377c:	f7fe f980 	bl	8001a80 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e332      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800378e:	4b12      	ldr	r3, [pc, #72]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0304 	and.w	r3, r3, #4
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800379a:	f7fe f9a1 	bl	8001ae0 <HAL_GetREVID>
 800379e:	4603      	mov	r3, r0
 80037a0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d819      	bhi.n	80037dc <HAL_RCC_OscConfig+0x28c>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	2b40      	cmp	r3, #64	@ 0x40
 80037ae:	d108      	bne.n	80037c2 <HAL_RCC_OscConfig+0x272>
 80037b0:	4b09      	ldr	r3, [pc, #36]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80037b8:	4a07      	ldr	r2, [pc, #28]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 80037ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037be:	6053      	str	r3, [r2, #4]
 80037c0:	e030      	b.n	8003824 <HAL_RCC_OscConfig+0x2d4>
 80037c2:	4b05      	ldr	r3, [pc, #20]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	031b      	lsls	r3, r3, #12
 80037d0:	4901      	ldr	r1, [pc, #4]	@ (80037d8 <HAL_RCC_OscConfig+0x288>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	604b      	str	r3, [r1, #4]
 80037d6:	e025      	b.n	8003824 <HAL_RCC_OscConfig+0x2d4>
 80037d8:	58024400 	.word	0x58024400
 80037dc:	4b9a      	ldr	r3, [pc, #616]	@ (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	061b      	lsls	r3, r3, #24
 80037ea:	4997      	ldr	r1, [pc, #604]	@ (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	604b      	str	r3, [r1, #4]
 80037f0:	e018      	b.n	8003824 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037f2:	4b95      	ldr	r3, [pc, #596]	@ (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a94      	ldr	r2, [pc, #592]	@ (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 80037f8:	f023 0301 	bic.w	r3, r3, #1
 80037fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fe:	f7fe f93f 	bl	8001a80 <HAL_GetTick>
 8003802:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003804:	e008      	b.n	8003818 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003806:	f7fe f93b 	bl	8001a80 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e2ed      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003818:	4b8b      	ldr	r3, [pc, #556]	@ (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1f0      	bne.n	8003806 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0310 	and.w	r3, r3, #16
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 80a9 	beq.w	8003984 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003832:	4b85      	ldr	r3, [pc, #532]	@ (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800383a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800383c:	4b82      	ldr	r3, [pc, #520]	@ (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 800383e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003840:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	2b08      	cmp	r3, #8
 8003846:	d007      	beq.n	8003858 <HAL_RCC_OscConfig+0x308>
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	2b18      	cmp	r3, #24
 800384c:	d13a      	bne.n	80038c4 <HAL_RCC_OscConfig+0x374>
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f003 0303 	and.w	r3, r3, #3
 8003854:	2b01      	cmp	r3, #1
 8003856:	d135      	bne.n	80038c4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003858:	4b7b      	ldr	r3, [pc, #492]	@ (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003860:	2b00      	cmp	r3, #0
 8003862:	d005      	beq.n	8003870 <HAL_RCC_OscConfig+0x320>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	2b80      	cmp	r3, #128	@ 0x80
 800386a:	d001      	beq.n	8003870 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e2c1      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003870:	f7fe f936 	bl	8001ae0 <HAL_GetREVID>
 8003874:	4603      	mov	r3, r0
 8003876:	f241 0203 	movw	r2, #4099	@ 0x1003
 800387a:	4293      	cmp	r3, r2
 800387c:	d817      	bhi.n	80038ae <HAL_RCC_OscConfig+0x35e>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	2b20      	cmp	r3, #32
 8003884:	d108      	bne.n	8003898 <HAL_RCC_OscConfig+0x348>
 8003886:	4b70      	ldr	r3, [pc, #448]	@ (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800388e:	4a6e      	ldr	r2, [pc, #440]	@ (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 8003890:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003894:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003896:	e075      	b.n	8003984 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003898:	4b6b      	ldr	r3, [pc, #428]	@ (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	069b      	lsls	r3, r3, #26
 80038a6:	4968      	ldr	r1, [pc, #416]	@ (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038ac:	e06a      	b.n	8003984 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038ae:	4b66      	ldr	r3, [pc, #408]	@ (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	061b      	lsls	r3, r3, #24
 80038bc:	4962      	ldr	r1, [pc, #392]	@ (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038c2:	e05f      	b.n	8003984 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d042      	beq.n	8003952 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80038cc:	4b5e      	ldr	r3, [pc, #376]	@ (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a5d      	ldr	r2, [pc, #372]	@ (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 80038d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d8:	f7fe f8d2 	bl	8001a80 <HAL_GetTick>
 80038dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80038e0:	f7fe f8ce 	bl	8001a80 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e280      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038f2:	4b55      	ldr	r3, [pc, #340]	@ (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038fe:	f7fe f8ef 	bl	8001ae0 <HAL_GetREVID>
 8003902:	4603      	mov	r3, r0
 8003904:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003908:	4293      	cmp	r3, r2
 800390a:	d817      	bhi.n	800393c <HAL_RCC_OscConfig+0x3ec>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	2b20      	cmp	r3, #32
 8003912:	d108      	bne.n	8003926 <HAL_RCC_OscConfig+0x3d6>
 8003914:	4b4c      	ldr	r3, [pc, #304]	@ (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800391c:	4a4a      	ldr	r2, [pc, #296]	@ (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 800391e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003922:	6053      	str	r3, [r2, #4]
 8003924:	e02e      	b.n	8003984 <HAL_RCC_OscConfig+0x434>
 8003926:	4b48      	ldr	r3, [pc, #288]	@ (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	069b      	lsls	r3, r3, #26
 8003934:	4944      	ldr	r1, [pc, #272]	@ (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 8003936:	4313      	orrs	r3, r2
 8003938:	604b      	str	r3, [r1, #4]
 800393a:	e023      	b.n	8003984 <HAL_RCC_OscConfig+0x434>
 800393c:	4b42      	ldr	r3, [pc, #264]	@ (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	061b      	lsls	r3, r3, #24
 800394a:	493f      	ldr	r1, [pc, #252]	@ (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 800394c:	4313      	orrs	r3, r2
 800394e:	60cb      	str	r3, [r1, #12]
 8003950:	e018      	b.n	8003984 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003952:	4b3d      	ldr	r3, [pc, #244]	@ (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a3c      	ldr	r2, [pc, #240]	@ (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 8003958:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800395c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395e:	f7fe f88f 	bl	8001a80 <HAL_GetTick>
 8003962:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003964:	e008      	b.n	8003978 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003966:	f7fe f88b 	bl	8001a80 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e23d      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003978:	4b33      	ldr	r3, [pc, #204]	@ (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1f0      	bne.n	8003966 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0308 	and.w	r3, r3, #8
 800398c:	2b00      	cmp	r3, #0
 800398e:	d036      	beq.n	80039fe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d019      	beq.n	80039cc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003998:	4b2b      	ldr	r3, [pc, #172]	@ (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 800399a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800399c:	4a2a      	ldr	r2, [pc, #168]	@ (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 800399e:	f043 0301 	orr.w	r3, r3, #1
 80039a2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a4:	f7fe f86c 	bl	8001a80 <HAL_GetTick>
 80039a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ac:	f7fe f868 	bl	8001a80 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e21a      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039be:	4b22      	ldr	r3, [pc, #136]	@ (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 80039c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0f0      	beq.n	80039ac <HAL_RCC_OscConfig+0x45c>
 80039ca:	e018      	b.n	80039fe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039cc:	4b1e      	ldr	r3, [pc, #120]	@ (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 80039ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039d0:	4a1d      	ldr	r2, [pc, #116]	@ (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 80039d2:	f023 0301 	bic.w	r3, r3, #1
 80039d6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d8:	f7fe f852 	bl	8001a80 <HAL_GetTick>
 80039dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e0:	f7fe f84e 	bl	8001a80 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e200      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039f2:	4b15      	ldr	r3, [pc, #84]	@ (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 80039f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1f0      	bne.n	80039e0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0320 	and.w	r3, r3, #32
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d039      	beq.n	8003a7e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d01c      	beq.n	8003a4c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a12:	4b0d      	ldr	r3, [pc, #52]	@ (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a0c      	ldr	r2, [pc, #48]	@ (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 8003a18:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003a1c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a1e:	f7fe f82f 	bl	8001a80 <HAL_GetTick>
 8003a22:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a24:	e008      	b.n	8003a38 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a26:	f7fe f82b 	bl	8001a80 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e1dd      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a38:	4b03      	ldr	r3, [pc, #12]	@ (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d0f0      	beq.n	8003a26 <HAL_RCC_OscConfig+0x4d6>
 8003a44:	e01b      	b.n	8003a7e <HAL_RCC_OscConfig+0x52e>
 8003a46:	bf00      	nop
 8003a48:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a4c:	4b9b      	ldr	r3, [pc, #620]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a9a      	ldr	r2, [pc, #616]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003a52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a56:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a58:	f7fe f812 	bl	8001a80 <HAL_GetTick>
 8003a5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a60:	f7fe f80e 	bl	8001a80 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e1c0      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a72:	4b92      	ldr	r3, [pc, #584]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1f0      	bne.n	8003a60 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0304 	and.w	r3, r3, #4
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 8081 	beq.w	8003b8e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a8c:	4b8c      	ldr	r3, [pc, #560]	@ (8003cc0 <HAL_RCC_OscConfig+0x770>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a8b      	ldr	r2, [pc, #556]	@ (8003cc0 <HAL_RCC_OscConfig+0x770>)
 8003a92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a98:	f7fd fff2 	bl	8001a80 <HAL_GetTick>
 8003a9c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa0:	f7fd ffee 	bl	8001a80 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b64      	cmp	r3, #100	@ 0x64
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e1a0      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ab2:	4b83      	ldr	r3, [pc, #524]	@ (8003cc0 <HAL_RCC_OscConfig+0x770>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0f0      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d106      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x584>
 8003ac6:	4b7d      	ldr	r3, [pc, #500]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aca:	4a7c      	ldr	r2, [pc, #496]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ad2:	e02d      	b.n	8003b30 <HAL_RCC_OscConfig+0x5e0>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10c      	bne.n	8003af6 <HAL_RCC_OscConfig+0x5a6>
 8003adc:	4b77      	ldr	r3, [pc, #476]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae0:	4a76      	ldr	r2, [pc, #472]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003ae2:	f023 0301 	bic.w	r3, r3, #1
 8003ae6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ae8:	4b74      	ldr	r3, [pc, #464]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aec:	4a73      	ldr	r2, [pc, #460]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003aee:	f023 0304 	bic.w	r3, r3, #4
 8003af2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003af4:	e01c      	b.n	8003b30 <HAL_RCC_OscConfig+0x5e0>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	2b05      	cmp	r3, #5
 8003afc:	d10c      	bne.n	8003b18 <HAL_RCC_OscConfig+0x5c8>
 8003afe:	4b6f      	ldr	r3, [pc, #444]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b02:	4a6e      	ldr	r2, [pc, #440]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003b04:	f043 0304 	orr.w	r3, r3, #4
 8003b08:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b0a:	4b6c      	ldr	r3, [pc, #432]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b0e:	4a6b      	ldr	r2, [pc, #428]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003b10:	f043 0301 	orr.w	r3, r3, #1
 8003b14:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b16:	e00b      	b.n	8003b30 <HAL_RCC_OscConfig+0x5e0>
 8003b18:	4b68      	ldr	r3, [pc, #416]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003b1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b1c:	4a67      	ldr	r2, [pc, #412]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003b1e:	f023 0301 	bic.w	r3, r3, #1
 8003b22:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b24:	4b65      	ldr	r3, [pc, #404]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b28:	4a64      	ldr	r2, [pc, #400]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003b2a:	f023 0304 	bic.w	r3, r3, #4
 8003b2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d015      	beq.n	8003b64 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b38:	f7fd ffa2 	bl	8001a80 <HAL_GetTick>
 8003b3c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b3e:	e00a      	b.n	8003b56 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b40:	f7fd ff9e 	bl	8001a80 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e14e      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b56:	4b59      	ldr	r3, [pc, #356]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0ee      	beq.n	8003b40 <HAL_RCC_OscConfig+0x5f0>
 8003b62:	e014      	b.n	8003b8e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b64:	f7fd ff8c 	bl	8001a80 <HAL_GetTick>
 8003b68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b6a:	e00a      	b.n	8003b82 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b6c:	f7fd ff88 	bl	8001a80 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e138      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b82:	4b4e      	ldr	r3, [pc, #312]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1ee      	bne.n	8003b6c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 812d 	beq.w	8003df2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003b98:	4b48      	ldr	r3, [pc, #288]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ba0:	2b18      	cmp	r3, #24
 8003ba2:	f000 80bd 	beq.w	8003d20 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	f040 809e 	bne.w	8003cec <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb0:	4b42      	ldr	r3, [pc, #264]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a41      	ldr	r2, [pc, #260]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003bb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbc:	f7fd ff60 	bl	8001a80 <HAL_GetTick>
 8003bc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bc4:	f7fd ff5c 	bl	8001a80 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e10e      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bd6:	4b39      	ldr	r3, [pc, #228]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f0      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003be2:	4b36      	ldr	r3, [pc, #216]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003be4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003be6:	4b37      	ldr	r3, [pc, #220]	@ (8003cc4 <HAL_RCC_OscConfig+0x774>)
 8003be8:	4013      	ands	r3, r2
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003bf2:	0112      	lsls	r2, r2, #4
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	4931      	ldr	r1, [pc, #196]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	628b      	str	r3, [r1, #40]	@ 0x28
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c00:	3b01      	subs	r3, #1
 8003c02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	025b      	lsls	r3, r3, #9
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	431a      	orrs	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c16:	3b01      	subs	r3, #1
 8003c18:	041b      	lsls	r3, r3, #16
 8003c1a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c24:	3b01      	subs	r3, #1
 8003c26:	061b      	lsls	r3, r3, #24
 8003c28:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003c2c:	4923      	ldr	r1, [pc, #140]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003c32:	4b22      	ldr	r3, [pc, #136]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c36:	4a21      	ldr	r2, [pc, #132]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003c38:	f023 0301 	bic.w	r3, r3, #1
 8003c3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003c3e:	4b1f      	ldr	r3, [pc, #124]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003c40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c42:	4b21      	ldr	r3, [pc, #132]	@ (8003cc8 <HAL_RCC_OscConfig+0x778>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003c4a:	00d2      	lsls	r2, r2, #3
 8003c4c:	491b      	ldr	r1, [pc, #108]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003c52:	4b1a      	ldr	r3, [pc, #104]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c56:	f023 020c 	bic.w	r2, r3, #12
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5e:	4917      	ldr	r1, [pc, #92]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003c64:	4b15      	ldr	r3, [pc, #84]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c68:	f023 0202 	bic.w	r2, r3, #2
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c70:	4912      	ldr	r1, [pc, #72]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c76:	4b11      	ldr	r3, [pc, #68]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c7a:	4a10      	ldr	r2, [pc, #64]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003c7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c82:	4b0e      	ldr	r3, [pc, #56]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c86:	4a0d      	ldr	r2, [pc, #52]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003c88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c92:	4a0a      	ldr	r2, [pc, #40]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003c94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003c9a:	4b08      	ldr	r3, [pc, #32]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9e:	4a07      	ldr	r2, [pc, #28]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003ca0:	f043 0301 	orr.w	r3, r3, #1
 8003ca4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ca6:	4b05      	ldr	r3, [pc, #20]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a04      	ldr	r2, [pc, #16]	@ (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003cac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb2:	f7fd fee5 	bl	8001a80 <HAL_GetTick>
 8003cb6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cb8:	e011      	b.n	8003cde <HAL_RCC_OscConfig+0x78e>
 8003cba:	bf00      	nop
 8003cbc:	58024400 	.word	0x58024400
 8003cc0:	58024800 	.word	0x58024800
 8003cc4:	fffffc0c 	.word	0xfffffc0c
 8003cc8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ccc:	f7fd fed8 	bl	8001a80 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e08a      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cde:	4b47      	ldr	r3, [pc, #284]	@ (8003dfc <HAL_RCC_OscConfig+0x8ac>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0f0      	beq.n	8003ccc <HAL_RCC_OscConfig+0x77c>
 8003cea:	e082      	b.n	8003df2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cec:	4b43      	ldr	r3, [pc, #268]	@ (8003dfc <HAL_RCC_OscConfig+0x8ac>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a42      	ldr	r2, [pc, #264]	@ (8003dfc <HAL_RCC_OscConfig+0x8ac>)
 8003cf2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf8:	f7fd fec2 	bl	8001a80 <HAL_GetTick>
 8003cfc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d00:	f7fd febe 	bl	8001a80 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e070      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d12:	4b3a      	ldr	r3, [pc, #232]	@ (8003dfc <HAL_RCC_OscConfig+0x8ac>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f0      	bne.n	8003d00 <HAL_RCC_OscConfig+0x7b0>
 8003d1e:	e068      	b.n	8003df2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003d20:	4b36      	ldr	r3, [pc, #216]	@ (8003dfc <HAL_RCC_OscConfig+0x8ac>)
 8003d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d24:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003d26:	4b35      	ldr	r3, [pc, #212]	@ (8003dfc <HAL_RCC_OscConfig+0x8ac>)
 8003d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d031      	beq.n	8003d98 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	f003 0203 	and.w	r2, r3, #3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d12a      	bne.n	8003d98 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	091b      	lsrs	r3, r3, #4
 8003d46:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d122      	bne.n	8003d98 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d11a      	bne.n	8003d98 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	0a5b      	lsrs	r3, r3, #9
 8003d66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d6e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d111      	bne.n	8003d98 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	0c1b      	lsrs	r3, r3, #16
 8003d78:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d80:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d108      	bne.n	8003d98 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	0e1b      	lsrs	r3, r3, #24
 8003d8a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d92:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d001      	beq.n	8003d9c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e02b      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003d9c:	4b17      	ldr	r3, [pc, #92]	@ (8003dfc <HAL_RCC_OscConfig+0x8ac>)
 8003d9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003da0:	08db      	lsrs	r3, r3, #3
 8003da2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003da6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d01f      	beq.n	8003df2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003db2:	4b12      	ldr	r3, [pc, #72]	@ (8003dfc <HAL_RCC_OscConfig+0x8ac>)
 8003db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db6:	4a11      	ldr	r2, [pc, #68]	@ (8003dfc <HAL_RCC_OscConfig+0x8ac>)
 8003db8:	f023 0301 	bic.w	r3, r3, #1
 8003dbc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003dbe:	f7fd fe5f 	bl	8001a80 <HAL_GetTick>
 8003dc2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003dc4:	bf00      	nop
 8003dc6:	f7fd fe5b 	bl	8001a80 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d0f9      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8003dfc <HAL_RCC_OscConfig+0x8ac>)
 8003dd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8003e00 <HAL_RCC_OscConfig+0x8b0>)
 8003dd8:	4013      	ands	r3, r2
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003dde:	00d2      	lsls	r2, r2, #3
 8003de0:	4906      	ldr	r1, [pc, #24]	@ (8003dfc <HAL_RCC_OscConfig+0x8ac>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003de6:	4b05      	ldr	r3, [pc, #20]	@ (8003dfc <HAL_RCC_OscConfig+0x8ac>)
 8003de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dea:	4a04      	ldr	r2, [pc, #16]	@ (8003dfc <HAL_RCC_OscConfig+0x8ac>)
 8003dec:	f043 0301 	orr.w	r3, r3, #1
 8003df0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3730      	adds	r7, #48	@ 0x30
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	58024400 	.word	0x58024400
 8003e00:	ffff0007 	.word	0xffff0007

08003e04 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e19c      	b.n	8004152 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e18:	4b8a      	ldr	r3, [pc, #552]	@ (8004044 <HAL_RCC_ClockConfig+0x240>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 030f 	and.w	r3, r3, #15
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d910      	bls.n	8003e48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e26:	4b87      	ldr	r3, [pc, #540]	@ (8004044 <HAL_RCC_ClockConfig+0x240>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f023 020f 	bic.w	r2, r3, #15
 8003e2e:	4985      	ldr	r1, [pc, #532]	@ (8004044 <HAL_RCC_ClockConfig+0x240>)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e36:	4b83      	ldr	r3, [pc, #524]	@ (8004044 <HAL_RCC_ClockConfig+0x240>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d001      	beq.n	8003e48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e184      	b.n	8004152 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d010      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691a      	ldr	r2, [r3, #16]
 8003e58:	4b7b      	ldr	r3, [pc, #492]	@ (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d908      	bls.n	8003e76 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e64:	4b78      	ldr	r3, [pc, #480]	@ (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	4975      	ldr	r1, [pc, #468]	@ (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d010      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	695a      	ldr	r2, [r3, #20]
 8003e86:	4b70      	ldr	r3, [pc, #448]	@ (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d908      	bls.n	8003ea4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e92:	4b6d      	ldr	r3, [pc, #436]	@ (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	496a      	ldr	r1, [pc, #424]	@ (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d010      	beq.n	8003ed2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	699a      	ldr	r2, [r3, #24]
 8003eb4:	4b64      	ldr	r3, [pc, #400]	@ (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d908      	bls.n	8003ed2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ec0:	4b61      	ldr	r3, [pc, #388]	@ (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003ec2:	69db      	ldr	r3, [r3, #28]
 8003ec4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	495e      	ldr	r1, [pc, #376]	@ (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0320 	and.w	r3, r3, #32
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d010      	beq.n	8003f00 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	69da      	ldr	r2, [r3, #28]
 8003ee2:	4b59      	ldr	r3, [pc, #356]	@ (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d908      	bls.n	8003f00 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003eee:	4b56      	ldr	r3, [pc, #344]	@ (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	4953      	ldr	r1, [pc, #332]	@ (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d010      	beq.n	8003f2e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68da      	ldr	r2, [r3, #12]
 8003f10:	4b4d      	ldr	r3, [pc, #308]	@ (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	f003 030f 	and.w	r3, r3, #15
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d908      	bls.n	8003f2e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f1c:	4b4a      	ldr	r3, [pc, #296]	@ (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	f023 020f 	bic.w	r2, r3, #15
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	4947      	ldr	r1, [pc, #284]	@ (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d055      	beq.n	8003fe6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003f3a:	4b43      	ldr	r3, [pc, #268]	@ (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	4940      	ldr	r1, [pc, #256]	@ (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d107      	bne.n	8003f64 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f54:	4b3c      	ldr	r3, [pc, #240]	@ (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d121      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e0f6      	b.n	8004152 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	2b03      	cmp	r3, #3
 8003f6a:	d107      	bne.n	8003f7c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f6c:	4b36      	ldr	r3, [pc, #216]	@ (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d115      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e0ea      	b.n	8004152 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d107      	bne.n	8003f94 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f84:	4b30      	ldr	r3, [pc, #192]	@ (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d109      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e0de      	b.n	8004152 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f94:	4b2c      	ldr	r3, [pc, #176]	@ (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e0d6      	b.n	8004152 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fa4:	4b28      	ldr	r3, [pc, #160]	@ (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	f023 0207 	bic.w	r2, r3, #7
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	4925      	ldr	r1, [pc, #148]	@ (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fb6:	f7fd fd63 	bl	8001a80 <HAL_GetTick>
 8003fba:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fbc:	e00a      	b.n	8003fd4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fbe:	f7fd fd5f 	bl	8001a80 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e0be      	b.n	8004152 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd4:	4b1c      	ldr	r3, [pc, #112]	@ (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d1eb      	bne.n	8003fbe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d010      	beq.n	8004014 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	4b14      	ldr	r3, [pc, #80]	@ (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d208      	bcs.n	8004014 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004002:	4b11      	ldr	r3, [pc, #68]	@ (8004048 <HAL_RCC_ClockConfig+0x244>)
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	f023 020f 	bic.w	r2, r3, #15
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	490e      	ldr	r1, [pc, #56]	@ (8004048 <HAL_RCC_ClockConfig+0x244>)
 8004010:	4313      	orrs	r3, r2
 8004012:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004014:	4b0b      	ldr	r3, [pc, #44]	@ (8004044 <HAL_RCC_ClockConfig+0x240>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 030f 	and.w	r3, r3, #15
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d214      	bcs.n	800404c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004022:	4b08      	ldr	r3, [pc, #32]	@ (8004044 <HAL_RCC_ClockConfig+0x240>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f023 020f 	bic.w	r2, r3, #15
 800402a:	4906      	ldr	r1, [pc, #24]	@ (8004044 <HAL_RCC_ClockConfig+0x240>)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	4313      	orrs	r3, r2
 8004030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004032:	4b04      	ldr	r3, [pc, #16]	@ (8004044 <HAL_RCC_ClockConfig+0x240>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	429a      	cmp	r2, r3
 800403e:	d005      	beq.n	800404c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e086      	b.n	8004152 <HAL_RCC_ClockConfig+0x34e>
 8004044:	52002000 	.word	0x52002000
 8004048:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	2b00      	cmp	r3, #0
 8004056:	d010      	beq.n	800407a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691a      	ldr	r2, [r3, #16]
 800405c:	4b3f      	ldr	r3, [pc, #252]	@ (800415c <HAL_RCC_ClockConfig+0x358>)
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004064:	429a      	cmp	r2, r3
 8004066:	d208      	bcs.n	800407a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004068:	4b3c      	ldr	r3, [pc, #240]	@ (800415c <HAL_RCC_ClockConfig+0x358>)
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	4939      	ldr	r1, [pc, #228]	@ (800415c <HAL_RCC_ClockConfig+0x358>)
 8004076:	4313      	orrs	r3, r2
 8004078:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0308 	and.w	r3, r3, #8
 8004082:	2b00      	cmp	r3, #0
 8004084:	d010      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	695a      	ldr	r2, [r3, #20]
 800408a:	4b34      	ldr	r3, [pc, #208]	@ (800415c <HAL_RCC_ClockConfig+0x358>)
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004092:	429a      	cmp	r2, r3
 8004094:	d208      	bcs.n	80040a8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004096:	4b31      	ldr	r3, [pc, #196]	@ (800415c <HAL_RCC_ClockConfig+0x358>)
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	492e      	ldr	r1, [pc, #184]	@ (800415c <HAL_RCC_ClockConfig+0x358>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0310 	and.w	r3, r3, #16
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d010      	beq.n	80040d6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	699a      	ldr	r2, [r3, #24]
 80040b8:	4b28      	ldr	r3, [pc, #160]	@ (800415c <HAL_RCC_ClockConfig+0x358>)
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d208      	bcs.n	80040d6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80040c4:	4b25      	ldr	r3, [pc, #148]	@ (800415c <HAL_RCC_ClockConfig+0x358>)
 80040c6:	69db      	ldr	r3, [r3, #28]
 80040c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	4922      	ldr	r1, [pc, #136]	@ (800415c <HAL_RCC_ClockConfig+0x358>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0320 	and.w	r3, r3, #32
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d010      	beq.n	8004104 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69da      	ldr	r2, [r3, #28]
 80040e6:	4b1d      	ldr	r3, [pc, #116]	@ (800415c <HAL_RCC_ClockConfig+0x358>)
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d208      	bcs.n	8004104 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80040f2:	4b1a      	ldr	r3, [pc, #104]	@ (800415c <HAL_RCC_ClockConfig+0x358>)
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	4917      	ldr	r1, [pc, #92]	@ (800415c <HAL_RCC_ClockConfig+0x358>)
 8004100:	4313      	orrs	r3, r2
 8004102:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004104:	f000 f834 	bl	8004170 <HAL_RCC_GetSysClockFreq>
 8004108:	4602      	mov	r2, r0
 800410a:	4b14      	ldr	r3, [pc, #80]	@ (800415c <HAL_RCC_ClockConfig+0x358>)
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	0a1b      	lsrs	r3, r3, #8
 8004110:	f003 030f 	and.w	r3, r3, #15
 8004114:	4912      	ldr	r1, [pc, #72]	@ (8004160 <HAL_RCC_ClockConfig+0x35c>)
 8004116:	5ccb      	ldrb	r3, [r1, r3]
 8004118:	f003 031f 	and.w	r3, r3, #31
 800411c:	fa22 f303 	lsr.w	r3, r2, r3
 8004120:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004122:	4b0e      	ldr	r3, [pc, #56]	@ (800415c <HAL_RCC_ClockConfig+0x358>)
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	f003 030f 	and.w	r3, r3, #15
 800412a:	4a0d      	ldr	r2, [pc, #52]	@ (8004160 <HAL_RCC_ClockConfig+0x35c>)
 800412c:	5cd3      	ldrb	r3, [r2, r3]
 800412e:	f003 031f 	and.w	r3, r3, #31
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	fa22 f303 	lsr.w	r3, r2, r3
 8004138:	4a0a      	ldr	r2, [pc, #40]	@ (8004164 <HAL_RCC_ClockConfig+0x360>)
 800413a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800413c:	4a0a      	ldr	r2, [pc, #40]	@ (8004168 <HAL_RCC_ClockConfig+0x364>)
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004142:	4b0a      	ldr	r3, [pc, #40]	@ (800416c <HAL_RCC_ClockConfig+0x368>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4618      	mov	r0, r3
 8004148:	f7fd fc50 	bl	80019ec <HAL_InitTick>
 800414c:	4603      	mov	r3, r0
 800414e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004150:	7bfb      	ldrb	r3, [r7, #15]
}
 8004152:	4618      	mov	r0, r3
 8004154:	3718      	adds	r7, #24
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	58024400 	.word	0x58024400
 8004160:	0800e0d0 	.word	0x0800e0d0
 8004164:	24000004 	.word	0x24000004
 8004168:	24000000 	.word	0x24000000
 800416c:	24000008 	.word	0x24000008

08004170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004170:	b480      	push	{r7}
 8004172:	b089      	sub	sp, #36	@ 0x24
 8004174:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004176:	4bb3      	ldr	r3, [pc, #716]	@ (8004444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800417e:	2b18      	cmp	r3, #24
 8004180:	f200 8155 	bhi.w	800442e <HAL_RCC_GetSysClockFreq+0x2be>
 8004184:	a201      	add	r2, pc, #4	@ (adr r2, 800418c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418a:	bf00      	nop
 800418c:	080041f1 	.word	0x080041f1
 8004190:	0800442f 	.word	0x0800442f
 8004194:	0800442f 	.word	0x0800442f
 8004198:	0800442f 	.word	0x0800442f
 800419c:	0800442f 	.word	0x0800442f
 80041a0:	0800442f 	.word	0x0800442f
 80041a4:	0800442f 	.word	0x0800442f
 80041a8:	0800442f 	.word	0x0800442f
 80041ac:	08004217 	.word	0x08004217
 80041b0:	0800442f 	.word	0x0800442f
 80041b4:	0800442f 	.word	0x0800442f
 80041b8:	0800442f 	.word	0x0800442f
 80041bc:	0800442f 	.word	0x0800442f
 80041c0:	0800442f 	.word	0x0800442f
 80041c4:	0800442f 	.word	0x0800442f
 80041c8:	0800442f 	.word	0x0800442f
 80041cc:	0800421d 	.word	0x0800421d
 80041d0:	0800442f 	.word	0x0800442f
 80041d4:	0800442f 	.word	0x0800442f
 80041d8:	0800442f 	.word	0x0800442f
 80041dc:	0800442f 	.word	0x0800442f
 80041e0:	0800442f 	.word	0x0800442f
 80041e4:	0800442f 	.word	0x0800442f
 80041e8:	0800442f 	.word	0x0800442f
 80041ec:	08004223 	.word	0x08004223
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041f0:	4b94      	ldr	r3, [pc, #592]	@ (8004444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0320 	and.w	r3, r3, #32
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d009      	beq.n	8004210 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80041fc:	4b91      	ldr	r3, [pc, #580]	@ (8004444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	08db      	lsrs	r3, r3, #3
 8004202:	f003 0303 	and.w	r3, r3, #3
 8004206:	4a90      	ldr	r2, [pc, #576]	@ (8004448 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004208:	fa22 f303 	lsr.w	r3, r2, r3
 800420c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800420e:	e111      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004210:	4b8d      	ldr	r3, [pc, #564]	@ (8004448 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004212:	61bb      	str	r3, [r7, #24]
      break;
 8004214:	e10e      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004216:	4b8d      	ldr	r3, [pc, #564]	@ (800444c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004218:	61bb      	str	r3, [r7, #24]
      break;
 800421a:	e10b      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800421c:	4b8c      	ldr	r3, [pc, #560]	@ (8004450 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800421e:	61bb      	str	r3, [r7, #24]
      break;
 8004220:	e108      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004222:	4b88      	ldr	r3, [pc, #544]	@ (8004444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004226:	f003 0303 	and.w	r3, r3, #3
 800422a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800422c:	4b85      	ldr	r3, [pc, #532]	@ (8004444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800422e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004230:	091b      	lsrs	r3, r3, #4
 8004232:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004236:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004238:	4b82      	ldr	r3, [pc, #520]	@ (8004444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800423a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004242:	4b80      	ldr	r3, [pc, #512]	@ (8004444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004246:	08db      	lsrs	r3, r3, #3
 8004248:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	fb02 f303 	mul.w	r3, r2, r3
 8004252:	ee07 3a90 	vmov	s15, r3
 8004256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800425a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 80e1 	beq.w	8004428 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2b02      	cmp	r3, #2
 800426a:	f000 8083 	beq.w	8004374 <HAL_RCC_GetSysClockFreq+0x204>
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2b02      	cmp	r3, #2
 8004272:	f200 80a1 	bhi.w	80043b8 <HAL_RCC_GetSysClockFreq+0x248>
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <HAL_RCC_GetSysClockFreq+0x114>
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d056      	beq.n	8004330 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004282:	e099      	b.n	80043b8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004284:	4b6f      	ldr	r3, [pc, #444]	@ (8004444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0320 	and.w	r3, r3, #32
 800428c:	2b00      	cmp	r3, #0
 800428e:	d02d      	beq.n	80042ec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004290:	4b6c      	ldr	r3, [pc, #432]	@ (8004444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	08db      	lsrs	r3, r3, #3
 8004296:	f003 0303 	and.w	r3, r3, #3
 800429a:	4a6b      	ldr	r2, [pc, #428]	@ (8004448 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800429c:	fa22 f303 	lsr.w	r3, r2, r3
 80042a0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	ee07 3a90 	vmov	s15, r3
 80042a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	ee07 3a90 	vmov	s15, r3
 80042b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ba:	4b62      	ldr	r3, [pc, #392]	@ (8004444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c2:	ee07 3a90 	vmov	s15, r3
 80042c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80042ce:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004454 <HAL_RCC_GetSysClockFreq+0x2e4>
 80042d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042e6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80042ea:	e087      	b.n	80043fc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	ee07 3a90 	vmov	s15, r3
 80042f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004458 <HAL_RCC_GetSysClockFreq+0x2e8>
 80042fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042fe:	4b51      	ldr	r3, [pc, #324]	@ (8004444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004306:	ee07 3a90 	vmov	s15, r3
 800430a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800430e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004312:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004454 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800431a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800431e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800432a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800432e:	e065      	b.n	80043fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	ee07 3a90 	vmov	s15, r3
 8004336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800433a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800445c <HAL_RCC_GetSysClockFreq+0x2ec>
 800433e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004342:	4b40      	ldr	r3, [pc, #256]	@ (8004444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800434a:	ee07 3a90 	vmov	s15, r3
 800434e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004352:	ed97 6a02 	vldr	s12, [r7, #8]
 8004356:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004454 <HAL_RCC_GetSysClockFreq+0x2e4>
 800435a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800435e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004362:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800436a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800436e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004372:	e043      	b.n	80043fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	ee07 3a90 	vmov	s15, r3
 800437a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800437e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004460 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004386:	4b2f      	ldr	r3, [pc, #188]	@ (8004444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800438e:	ee07 3a90 	vmov	s15, r3
 8004392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004396:	ed97 6a02 	vldr	s12, [r7, #8]
 800439a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004454 <HAL_RCC_GetSysClockFreq+0x2e4>
 800439e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043b6:	e021      	b.n	80043fc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	ee07 3a90 	vmov	s15, r3
 80043be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043c2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800445c <HAL_RCC_GetSysClockFreq+0x2ec>
 80043c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ca:	4b1e      	ldr	r3, [pc, #120]	@ (8004444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d2:	ee07 3a90 	vmov	s15, r3
 80043d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043da:	ed97 6a02 	vldr	s12, [r7, #8]
 80043de:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004454 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043fa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80043fc:	4b11      	ldr	r3, [pc, #68]	@ (8004444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004400:	0a5b      	lsrs	r3, r3, #9
 8004402:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004406:	3301      	adds	r3, #1
 8004408:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	ee07 3a90 	vmov	s15, r3
 8004410:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004414:	edd7 6a07 	vldr	s13, [r7, #28]
 8004418:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800441c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004420:	ee17 3a90 	vmov	r3, s15
 8004424:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004426:	e005      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004428:	2300      	movs	r3, #0
 800442a:	61bb      	str	r3, [r7, #24]
      break;
 800442c:	e002      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800442e:	4b07      	ldr	r3, [pc, #28]	@ (800444c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004430:	61bb      	str	r3, [r7, #24]
      break;
 8004432:	bf00      	nop
  }

  return sysclockfreq;
 8004434:	69bb      	ldr	r3, [r7, #24]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3724      	adds	r7, #36	@ 0x24
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	58024400 	.word	0x58024400
 8004448:	03d09000 	.word	0x03d09000
 800444c:	003d0900 	.word	0x003d0900
 8004450:	017d7840 	.word	0x017d7840
 8004454:	46000000 	.word	0x46000000
 8004458:	4c742400 	.word	0x4c742400
 800445c:	4a742400 	.word	0x4a742400
 8004460:	4bbebc20 	.word	0x4bbebc20

08004464 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800446a:	f7ff fe81 	bl	8004170 <HAL_RCC_GetSysClockFreq>
 800446e:	4602      	mov	r2, r0
 8004470:	4b10      	ldr	r3, [pc, #64]	@ (80044b4 <HAL_RCC_GetHCLKFreq+0x50>)
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	0a1b      	lsrs	r3, r3, #8
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	490f      	ldr	r1, [pc, #60]	@ (80044b8 <HAL_RCC_GetHCLKFreq+0x54>)
 800447c:	5ccb      	ldrb	r3, [r1, r3]
 800447e:	f003 031f 	and.w	r3, r3, #31
 8004482:	fa22 f303 	lsr.w	r3, r2, r3
 8004486:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004488:	4b0a      	ldr	r3, [pc, #40]	@ (80044b4 <HAL_RCC_GetHCLKFreq+0x50>)
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	f003 030f 	and.w	r3, r3, #15
 8004490:	4a09      	ldr	r2, [pc, #36]	@ (80044b8 <HAL_RCC_GetHCLKFreq+0x54>)
 8004492:	5cd3      	ldrb	r3, [r2, r3]
 8004494:	f003 031f 	and.w	r3, r3, #31
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	fa22 f303 	lsr.w	r3, r2, r3
 800449e:	4a07      	ldr	r2, [pc, #28]	@ (80044bc <HAL_RCC_GetHCLKFreq+0x58>)
 80044a0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80044a2:	4a07      	ldr	r2, [pc, #28]	@ (80044c0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80044a8:	4b04      	ldr	r3, [pc, #16]	@ (80044bc <HAL_RCC_GetHCLKFreq+0x58>)
 80044aa:	681b      	ldr	r3, [r3, #0]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	58024400 	.word	0x58024400
 80044b8:	0800e0d0 	.word	0x0800e0d0
 80044bc:	24000004 	.word	0x24000004
 80044c0:	24000000 	.word	0x24000000

080044c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80044c8:	f7ff ffcc 	bl	8004464 <HAL_RCC_GetHCLKFreq>
 80044cc:	4602      	mov	r2, r0
 80044ce:	4b06      	ldr	r3, [pc, #24]	@ (80044e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	091b      	lsrs	r3, r3, #4
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	4904      	ldr	r1, [pc, #16]	@ (80044ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80044da:	5ccb      	ldrb	r3, [r1, r3]
 80044dc:	f003 031f 	and.w	r3, r3, #31
 80044e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	58024400 	.word	0x58024400
 80044ec:	0800e0d0 	.word	0x0800e0d0

080044f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80044f4:	f7ff ffb6 	bl	8004464 <HAL_RCC_GetHCLKFreq>
 80044f8:	4602      	mov	r2, r0
 80044fa:	4b06      	ldr	r3, [pc, #24]	@ (8004514 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	0a1b      	lsrs	r3, r3, #8
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	4904      	ldr	r1, [pc, #16]	@ (8004518 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004506:	5ccb      	ldrb	r3, [r1, r3]
 8004508:	f003 031f 	and.w	r3, r3, #31
 800450c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004510:	4618      	mov	r0, r3
 8004512:	bd80      	pop	{r7, pc}
 8004514:	58024400 	.word	0x58024400
 8004518:	0800e0d0 	.word	0x0800e0d0

0800451c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800451c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004520:	b0ca      	sub	sp, #296	@ 0x128
 8004522:	af00      	add	r7, sp, #0
 8004524:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004528:	2300      	movs	r3, #0
 800452a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800452e:	2300      	movs	r3, #0
 8004530:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004540:	2500      	movs	r5, #0
 8004542:	ea54 0305 	orrs.w	r3, r4, r5
 8004546:	d049      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800454e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004552:	d02f      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004554:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004558:	d828      	bhi.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 800455a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800455e:	d01a      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004560:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004564:	d822      	bhi.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800456a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800456e:	d007      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004570:	e01c      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004572:	4bb8      	ldr	r3, [pc, #736]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004576:	4ab7      	ldr	r2, [pc, #732]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004578:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800457c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800457e:	e01a      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004584:	3308      	adds	r3, #8
 8004586:	2102      	movs	r1, #2
 8004588:	4618      	mov	r0, r3
 800458a:	f001 fc8f 	bl	8005eac <RCCEx_PLL2_Config>
 800458e:	4603      	mov	r3, r0
 8004590:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004594:	e00f      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800459a:	3328      	adds	r3, #40	@ 0x28
 800459c:	2102      	movs	r1, #2
 800459e:	4618      	mov	r0, r3
 80045a0:	f001 fd36 	bl	8006010 <RCCEx_PLL3_Config>
 80045a4:	4603      	mov	r3, r0
 80045a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80045aa:	e004      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045b2:	e000      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80045b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10a      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80045be:	4ba5      	ldr	r3, [pc, #660]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045c2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80045c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045cc:	4aa1      	ldr	r2, [pc, #644]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045ce:	430b      	orrs	r3, r1
 80045d0:	6513      	str	r3, [r2, #80]	@ 0x50
 80045d2:	e003      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80045dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80045e8:	f04f 0900 	mov.w	r9, #0
 80045ec:	ea58 0309 	orrs.w	r3, r8, r9
 80045f0:	d047      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80045f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045f8:	2b04      	cmp	r3, #4
 80045fa:	d82a      	bhi.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80045fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004604 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80045fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004602:	bf00      	nop
 8004604:	08004619 	.word	0x08004619
 8004608:	08004627 	.word	0x08004627
 800460c:	0800463d 	.word	0x0800463d
 8004610:	0800465b 	.word	0x0800465b
 8004614:	0800465b 	.word	0x0800465b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004618:	4b8e      	ldr	r3, [pc, #568]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800461a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461c:	4a8d      	ldr	r2, [pc, #564]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800461e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004622:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004624:	e01a      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800462a:	3308      	adds	r3, #8
 800462c:	2100      	movs	r1, #0
 800462e:	4618      	mov	r0, r3
 8004630:	f001 fc3c 	bl	8005eac <RCCEx_PLL2_Config>
 8004634:	4603      	mov	r3, r0
 8004636:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800463a:	e00f      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800463c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004640:	3328      	adds	r3, #40	@ 0x28
 8004642:	2100      	movs	r1, #0
 8004644:	4618      	mov	r0, r3
 8004646:	f001 fce3 	bl	8006010 <RCCEx_PLL3_Config>
 800464a:	4603      	mov	r3, r0
 800464c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004650:	e004      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004658:	e000      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800465a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800465c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10a      	bne.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004664:	4b7b      	ldr	r3, [pc, #492]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004666:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004668:	f023 0107 	bic.w	r1, r3, #7
 800466c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004672:	4a78      	ldr	r2, [pc, #480]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004674:	430b      	orrs	r3, r1
 8004676:	6513      	str	r3, [r2, #80]	@ 0x50
 8004678:	e003      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800467a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800467e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800468e:	f04f 0b00 	mov.w	fp, #0
 8004692:	ea5a 030b 	orrs.w	r3, sl, fp
 8004696:	d04c      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800469c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800469e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046a2:	d030      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80046a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046a8:	d829      	bhi.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80046aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80046ac:	d02d      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80046ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80046b0:	d825      	bhi.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80046b2:	2b80      	cmp	r3, #128	@ 0x80
 80046b4:	d018      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80046b6:	2b80      	cmp	r3, #128	@ 0x80
 80046b8:	d821      	bhi.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d002      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80046be:	2b40      	cmp	r3, #64	@ 0x40
 80046c0:	d007      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80046c2:	e01c      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046c4:	4b63      	ldr	r3, [pc, #396]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c8:	4a62      	ldr	r2, [pc, #392]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80046d0:	e01c      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d6:	3308      	adds	r3, #8
 80046d8:	2100      	movs	r1, #0
 80046da:	4618      	mov	r0, r3
 80046dc:	f001 fbe6 	bl	8005eac <RCCEx_PLL2_Config>
 80046e0:	4603      	mov	r3, r0
 80046e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80046e6:	e011      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ec:	3328      	adds	r3, #40	@ 0x28
 80046ee:	2100      	movs	r1, #0
 80046f0:	4618      	mov	r0, r3
 80046f2:	f001 fc8d 	bl	8006010 <RCCEx_PLL3_Config>
 80046f6:	4603      	mov	r3, r0
 80046f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80046fc:	e006      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004704:	e002      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004706:	bf00      	nop
 8004708:	e000      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800470a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800470c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10a      	bne.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004714:	4b4f      	ldr	r3, [pc, #316]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004718:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800471c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004722:	4a4c      	ldr	r2, [pc, #304]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004724:	430b      	orrs	r3, r1
 8004726:	6513      	str	r3, [r2, #80]	@ 0x50
 8004728:	e003      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800472a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800472e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800473e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004742:	2300      	movs	r3, #0
 8004744:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004748:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800474c:	460b      	mov	r3, r1
 800474e:	4313      	orrs	r3, r2
 8004750:	d053      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004756:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800475a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800475e:	d035      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004760:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004764:	d82e      	bhi.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004766:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800476a:	d031      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800476c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004770:	d828      	bhi.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004772:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004776:	d01a      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004778:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800477c:	d822      	bhi.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004782:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004786:	d007      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004788:	e01c      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800478a:	4b32      	ldr	r3, [pc, #200]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800478c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800478e:	4a31      	ldr	r2, [pc, #196]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004790:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004794:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004796:	e01c      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800479c:	3308      	adds	r3, #8
 800479e:	2100      	movs	r1, #0
 80047a0:	4618      	mov	r0, r3
 80047a2:	f001 fb83 	bl	8005eac <RCCEx_PLL2_Config>
 80047a6:	4603      	mov	r3, r0
 80047a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80047ac:	e011      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b2:	3328      	adds	r3, #40	@ 0x28
 80047b4:	2100      	movs	r1, #0
 80047b6:	4618      	mov	r0, r3
 80047b8:	f001 fc2a 	bl	8006010 <RCCEx_PLL3_Config>
 80047bc:	4603      	mov	r3, r0
 80047be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047c2:	e006      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047ca:	e002      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80047cc:	bf00      	nop
 80047ce:	e000      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80047d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10b      	bne.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80047da:	4b1e      	ldr	r3, [pc, #120]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047de:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80047e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80047ea:	4a1a      	ldr	r2, [pc, #104]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047ec:	430b      	orrs	r3, r1
 80047ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80047f0:	e003      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80047fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004802:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004806:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800480a:	2300      	movs	r3, #0
 800480c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004810:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004814:	460b      	mov	r3, r1
 8004816:	4313      	orrs	r3, r2
 8004818:	d056      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800481a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800481e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004822:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004826:	d038      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004828:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800482c:	d831      	bhi.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800482e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004832:	d034      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004834:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004838:	d82b      	bhi.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800483a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800483e:	d01d      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004840:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004844:	d825      	bhi.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004846:	2b00      	cmp	r3, #0
 8004848:	d006      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800484a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800484e:	d00a      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004850:	e01f      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004852:	bf00      	nop
 8004854:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004858:	4ba2      	ldr	r3, [pc, #648]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800485a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485c:	4aa1      	ldr	r2, [pc, #644]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800485e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004862:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004864:	e01c      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800486a:	3308      	adds	r3, #8
 800486c:	2100      	movs	r1, #0
 800486e:	4618      	mov	r0, r3
 8004870:	f001 fb1c 	bl	8005eac <RCCEx_PLL2_Config>
 8004874:	4603      	mov	r3, r0
 8004876:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800487a:	e011      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800487c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004880:	3328      	adds	r3, #40	@ 0x28
 8004882:	2100      	movs	r1, #0
 8004884:	4618      	mov	r0, r3
 8004886:	f001 fbc3 	bl	8006010 <RCCEx_PLL3_Config>
 800488a:	4603      	mov	r3, r0
 800488c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004890:	e006      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004898:	e002      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800489a:	bf00      	nop
 800489c:	e000      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800489e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10b      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80048a8:	4b8e      	ldr	r3, [pc, #568]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ac:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80048b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80048b8:	4a8a      	ldr	r2, [pc, #552]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048ba:	430b      	orrs	r3, r1
 80048bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80048be:	e003      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80048c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80048d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80048d8:	2300      	movs	r3, #0
 80048da:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80048de:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80048e2:	460b      	mov	r3, r1
 80048e4:	4313      	orrs	r3, r2
 80048e6:	d03a      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80048e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ee:	2b30      	cmp	r3, #48	@ 0x30
 80048f0:	d01f      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80048f2:	2b30      	cmp	r3, #48	@ 0x30
 80048f4:	d819      	bhi.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80048f6:	2b20      	cmp	r3, #32
 80048f8:	d00c      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80048fa:	2b20      	cmp	r3, #32
 80048fc:	d815      	bhi.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d019      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004902:	2b10      	cmp	r3, #16
 8004904:	d111      	bne.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004906:	4b77      	ldr	r3, [pc, #476]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800490a:	4a76      	ldr	r2, [pc, #472]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800490c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004910:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004912:	e011      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004918:	3308      	adds	r3, #8
 800491a:	2102      	movs	r1, #2
 800491c:	4618      	mov	r0, r3
 800491e:	f001 fac5 	bl	8005eac <RCCEx_PLL2_Config>
 8004922:	4603      	mov	r3, r0
 8004924:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004928:	e006      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004930:	e002      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004932:	bf00      	nop
 8004934:	e000      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004936:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004938:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10a      	bne.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004940:	4b68      	ldr	r3, [pc, #416]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004942:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004944:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800494c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800494e:	4a65      	ldr	r2, [pc, #404]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004950:	430b      	orrs	r3, r1
 8004952:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004954:	e003      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004956:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800495a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800495e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004966:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800496a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800496e:	2300      	movs	r3, #0
 8004970:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004974:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004978:	460b      	mov	r3, r1
 800497a:	4313      	orrs	r3, r2
 800497c:	d051      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800497e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004982:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004984:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004988:	d035      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800498a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800498e:	d82e      	bhi.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004990:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004994:	d031      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004996:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800499a:	d828      	bhi.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800499c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049a0:	d01a      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80049a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049a6:	d822      	bhi.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d003      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80049ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049b0:	d007      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80049b2:	e01c      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049b4:	4b4b      	ldr	r3, [pc, #300]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b8:	4a4a      	ldr	r2, [pc, #296]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80049c0:	e01c      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c6:	3308      	adds	r3, #8
 80049c8:	2100      	movs	r1, #0
 80049ca:	4618      	mov	r0, r3
 80049cc:	f001 fa6e 	bl	8005eac <RCCEx_PLL2_Config>
 80049d0:	4603      	mov	r3, r0
 80049d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80049d6:	e011      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049dc:	3328      	adds	r3, #40	@ 0x28
 80049de:	2100      	movs	r1, #0
 80049e0:	4618      	mov	r0, r3
 80049e2:	f001 fb15 	bl	8006010 <RCCEx_PLL3_Config>
 80049e6:	4603      	mov	r3, r0
 80049e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80049ec:	e006      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049f4:	e002      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80049f6:	bf00      	nop
 80049f8:	e000      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80049fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10a      	bne.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004a04:	4b37      	ldr	r3, [pc, #220]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a08:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a12:	4a34      	ldr	r2, [pc, #208]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a14:	430b      	orrs	r3, r1
 8004a16:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a18:	e003      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004a2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a32:	2300      	movs	r3, #0
 8004a34:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004a38:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	d056      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a4c:	d033      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004a4e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a52:	d82c      	bhi.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004a54:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a58:	d02f      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004a5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a5e:	d826      	bhi.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004a60:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004a64:	d02b      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004a66:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004a6a:	d820      	bhi.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004a6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a70:	d012      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004a72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a76:	d81a      	bhi.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d022      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004a7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a80:	d115      	bne.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a86:	3308      	adds	r3, #8
 8004a88:	2101      	movs	r1, #1
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f001 fa0e 	bl	8005eac <RCCEx_PLL2_Config>
 8004a90:	4603      	mov	r3, r0
 8004a92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004a96:	e015      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a9c:	3328      	adds	r3, #40	@ 0x28
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f001 fab5 	bl	8006010 <RCCEx_PLL3_Config>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004aac:	e00a      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ab4:	e006      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004ab6:	bf00      	nop
 8004ab8:	e004      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004aba:	bf00      	nop
 8004abc:	e002      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004abe:	bf00      	nop
 8004ac0:	e000      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004ac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ac4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10d      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004acc:	4b05      	ldr	r3, [pc, #20]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ad0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ad8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ada:	4a02      	ldr	r2, [pc, #8]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004adc:	430b      	orrs	r3, r1
 8004ade:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ae0:	e006      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004ae2:	bf00      	nop
 8004ae4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004afc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004b00:	2300      	movs	r3, #0
 8004b02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004b06:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	d055      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004b18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b1c:	d033      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004b1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b22:	d82c      	bhi.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004b24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b28:	d02f      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b2e:	d826      	bhi.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004b30:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004b34:	d02b      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004b36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004b3a:	d820      	bhi.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004b3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b40:	d012      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004b42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b46:	d81a      	bhi.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d022      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004b4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b50:	d115      	bne.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b56:	3308      	adds	r3, #8
 8004b58:	2101      	movs	r1, #1
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f001 f9a6 	bl	8005eac <RCCEx_PLL2_Config>
 8004b60:	4603      	mov	r3, r0
 8004b62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004b66:	e015      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b6c:	3328      	adds	r3, #40	@ 0x28
 8004b6e:	2101      	movs	r1, #1
 8004b70:	4618      	mov	r0, r3
 8004b72:	f001 fa4d 	bl	8006010 <RCCEx_PLL3_Config>
 8004b76:	4603      	mov	r3, r0
 8004b78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004b7c:	e00a      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b84:	e006      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004b86:	bf00      	nop
 8004b88:	e004      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004b8a:	bf00      	nop
 8004b8c:	e002      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004b8e:	bf00      	nop
 8004b90:	e000      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004b92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10b      	bne.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004b9c:	4ba3      	ldr	r3, [pc, #652]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ba0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ba8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004bac:	4a9f      	ldr	r2, [pc, #636]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bae:	430b      	orrs	r3, r1
 8004bb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bb2:	e003      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004bc8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004bcc:	2300      	movs	r3, #0
 8004bce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004bd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	d037      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004be6:	d00e      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004be8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bec:	d816      	bhi.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d018      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004bf2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bf6:	d111      	bne.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bf8:	4b8c      	ldr	r3, [pc, #560]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bfc:	4a8b      	ldr	r2, [pc, #556]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004c04:	e00f      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c0a:	3308      	adds	r3, #8
 8004c0c:	2101      	movs	r1, #1
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f001 f94c 	bl	8005eac <RCCEx_PLL2_Config>
 8004c14:	4603      	mov	r3, r0
 8004c16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004c1a:	e004      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c22:	e000      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004c24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10a      	bne.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c2e:	4b7f      	ldr	r3, [pc, #508]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c32:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c3c:	4a7b      	ldr	r2, [pc, #492]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c3e:	430b      	orrs	r3, r1
 8004c40:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c42:	e003      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c54:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004c58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004c62:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004c66:	460b      	mov	r3, r1
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	d039      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c72:	2b03      	cmp	r3, #3
 8004c74:	d81c      	bhi.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004c76:	a201      	add	r2, pc, #4	@ (adr r2, 8004c7c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7c:	08004cb9 	.word	0x08004cb9
 8004c80:	08004c8d 	.word	0x08004c8d
 8004c84:	08004c9b 	.word	0x08004c9b
 8004c88:	08004cb9 	.word	0x08004cb9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c8c:	4b67      	ldr	r3, [pc, #412]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c90:	4a66      	ldr	r2, [pc, #408]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004c98:	e00f      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c9e:	3308      	adds	r3, #8
 8004ca0:	2102      	movs	r1, #2
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f001 f902 	bl	8005eac <RCCEx_PLL2_Config>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004cae:	e004      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cb6:	e000      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004cb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10a      	bne.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004cc2:	4b5a      	ldr	r3, [pc, #360]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cc6:	f023 0103 	bic.w	r1, r3, #3
 8004cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cd0:	4a56      	ldr	r2, [pc, #344]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cd2:	430b      	orrs	r3, r1
 8004cd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004cd6:	e003      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cdc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004cec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004cf6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	f000 809f 	beq.w	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d02:	4b4b      	ldr	r3, [pc, #300]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a4a      	ldr	r2, [pc, #296]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004d08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d0e:	f7fc feb7 	bl	8001a80 <HAL_GetTick>
 8004d12:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d16:	e00b      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d18:	f7fc feb2 	bl	8001a80 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b64      	cmp	r3, #100	@ 0x64
 8004d26:	d903      	bls.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d2e:	e005      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d30:	4b3f      	ldr	r3, [pc, #252]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0ed      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004d3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d179      	bne.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004d44:	4b39      	ldr	r3, [pc, #228]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d46:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004d50:	4053      	eors	r3, r2
 8004d52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d015      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d5a:	4b34      	ldr	r3, [pc, #208]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d62:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d66:	4b31      	ldr	r3, [pc, #196]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d6a:	4a30      	ldr	r2, [pc, #192]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d70:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d72:	4b2e      	ldr	r3, [pc, #184]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d76:	4a2d      	ldr	r2, [pc, #180]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d7c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004d7e:	4a2b      	ldr	r2, [pc, #172]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d84:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004d8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d92:	d118      	bne.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d94:	f7fc fe74 	bl	8001a80 <HAL_GetTick>
 8004d98:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d9c:	e00d      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d9e:	f7fc fe6f 	bl	8001a80 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004da8:	1ad2      	subs	r2, r2, r3
 8004daa:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d903      	bls.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004db8:	e005      	b.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004dba:	4b1c      	ldr	r3, [pc, #112]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d0eb      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d129      	bne.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004dd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dde:	d10e      	bne.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004de0:	4b12      	ldr	r3, [pc, #72]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004df0:	091a      	lsrs	r2, r3, #4
 8004df2:	4b10      	ldr	r3, [pc, #64]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004df4:	4013      	ands	r3, r2
 8004df6:	4a0d      	ldr	r2, [pc, #52]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004df8:	430b      	orrs	r3, r1
 8004dfa:	6113      	str	r3, [r2, #16]
 8004dfc:	e005      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	4a0a      	ldr	r2, [pc, #40]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e04:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004e08:	6113      	str	r3, [r2, #16]
 8004e0a:	4b08      	ldr	r3, [pc, #32]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e0c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e1a:	4a04      	ldr	r2, [pc, #16]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e1c:	430b      	orrs	r3, r1
 8004e1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e20:	e00e      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004e2a:	e009      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004e2c:	58024400 	.word	0x58024400
 8004e30:	58024800 	.word	0x58024800
 8004e34:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e48:	f002 0301 	and.w	r3, r2, #1
 8004e4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e50:	2300      	movs	r3, #0
 8004e52:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004e56:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	f000 8089 	beq.w	8004f74 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e68:	2b28      	cmp	r3, #40	@ 0x28
 8004e6a:	d86b      	bhi.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e74 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e72:	bf00      	nop
 8004e74:	08004f4d 	.word	0x08004f4d
 8004e78:	08004f45 	.word	0x08004f45
 8004e7c:	08004f45 	.word	0x08004f45
 8004e80:	08004f45 	.word	0x08004f45
 8004e84:	08004f45 	.word	0x08004f45
 8004e88:	08004f45 	.word	0x08004f45
 8004e8c:	08004f45 	.word	0x08004f45
 8004e90:	08004f45 	.word	0x08004f45
 8004e94:	08004f19 	.word	0x08004f19
 8004e98:	08004f45 	.word	0x08004f45
 8004e9c:	08004f45 	.word	0x08004f45
 8004ea0:	08004f45 	.word	0x08004f45
 8004ea4:	08004f45 	.word	0x08004f45
 8004ea8:	08004f45 	.word	0x08004f45
 8004eac:	08004f45 	.word	0x08004f45
 8004eb0:	08004f45 	.word	0x08004f45
 8004eb4:	08004f2f 	.word	0x08004f2f
 8004eb8:	08004f45 	.word	0x08004f45
 8004ebc:	08004f45 	.word	0x08004f45
 8004ec0:	08004f45 	.word	0x08004f45
 8004ec4:	08004f45 	.word	0x08004f45
 8004ec8:	08004f45 	.word	0x08004f45
 8004ecc:	08004f45 	.word	0x08004f45
 8004ed0:	08004f45 	.word	0x08004f45
 8004ed4:	08004f4d 	.word	0x08004f4d
 8004ed8:	08004f45 	.word	0x08004f45
 8004edc:	08004f45 	.word	0x08004f45
 8004ee0:	08004f45 	.word	0x08004f45
 8004ee4:	08004f45 	.word	0x08004f45
 8004ee8:	08004f45 	.word	0x08004f45
 8004eec:	08004f45 	.word	0x08004f45
 8004ef0:	08004f45 	.word	0x08004f45
 8004ef4:	08004f4d 	.word	0x08004f4d
 8004ef8:	08004f45 	.word	0x08004f45
 8004efc:	08004f45 	.word	0x08004f45
 8004f00:	08004f45 	.word	0x08004f45
 8004f04:	08004f45 	.word	0x08004f45
 8004f08:	08004f45 	.word	0x08004f45
 8004f0c:	08004f45 	.word	0x08004f45
 8004f10:	08004f45 	.word	0x08004f45
 8004f14:	08004f4d 	.word	0x08004f4d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f1c:	3308      	adds	r3, #8
 8004f1e:	2101      	movs	r1, #1
 8004f20:	4618      	mov	r0, r3
 8004f22:	f000 ffc3 	bl	8005eac <RCCEx_PLL2_Config>
 8004f26:	4603      	mov	r3, r0
 8004f28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004f2c:	e00f      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f32:	3328      	adds	r3, #40	@ 0x28
 8004f34:	2101      	movs	r1, #1
 8004f36:	4618      	mov	r0, r3
 8004f38:	f001 f86a 	bl	8006010 <RCCEx_PLL3_Config>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004f42:	e004      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f4a:	e000      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004f4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10a      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004f56:	4bbf      	ldr	r3, [pc, #764]	@ (8005254 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f5a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f64:	4abb      	ldr	r2, [pc, #748]	@ (8005254 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f66:	430b      	orrs	r3, r1
 8004f68:	6553      	str	r3, [r2, #84]	@ 0x54
 8004f6a:	e003      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7c:	f002 0302 	and.w	r3, r2, #2
 8004f80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f84:	2300      	movs	r3, #0
 8004f86:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004f8a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4313      	orrs	r3, r2
 8004f92:	d041      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f9a:	2b05      	cmp	r3, #5
 8004f9c:	d824      	bhi.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa4:	08004ff1 	.word	0x08004ff1
 8004fa8:	08004fbd 	.word	0x08004fbd
 8004fac:	08004fd3 	.word	0x08004fd3
 8004fb0:	08004ff1 	.word	0x08004ff1
 8004fb4:	08004ff1 	.word	0x08004ff1
 8004fb8:	08004ff1 	.word	0x08004ff1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fc0:	3308      	adds	r3, #8
 8004fc2:	2101      	movs	r1, #1
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f000 ff71 	bl	8005eac <RCCEx_PLL2_Config>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004fd0:	e00f      	b.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fd6:	3328      	adds	r3, #40	@ 0x28
 8004fd8:	2101      	movs	r1, #1
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f001 f818 	bl	8006010 <RCCEx_PLL3_Config>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004fe6:	e004      	b.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fee:	e000      	b.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004ff0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d10a      	bne.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004ffa:	4b96      	ldr	r3, [pc, #600]	@ (8005254 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ffe:	f023 0107 	bic.w	r1, r3, #7
 8005002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005006:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005008:	4a92      	ldr	r2, [pc, #584]	@ (8005254 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800500a:	430b      	orrs	r3, r1
 800500c:	6553      	str	r3, [r2, #84]	@ 0x54
 800500e:	e003      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005010:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005014:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800501c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005020:	f002 0304 	and.w	r3, r2, #4
 8005024:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005028:	2300      	movs	r3, #0
 800502a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800502e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005032:	460b      	mov	r3, r1
 8005034:	4313      	orrs	r3, r2
 8005036:	d044      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800503c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005040:	2b05      	cmp	r3, #5
 8005042:	d825      	bhi.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005044:	a201      	add	r2, pc, #4	@ (adr r2, 800504c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504a:	bf00      	nop
 800504c:	08005099 	.word	0x08005099
 8005050:	08005065 	.word	0x08005065
 8005054:	0800507b 	.word	0x0800507b
 8005058:	08005099 	.word	0x08005099
 800505c:	08005099 	.word	0x08005099
 8005060:	08005099 	.word	0x08005099
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005068:	3308      	adds	r3, #8
 800506a:	2101      	movs	r1, #1
 800506c:	4618      	mov	r0, r3
 800506e:	f000 ff1d 	bl	8005eac <RCCEx_PLL2_Config>
 8005072:	4603      	mov	r3, r0
 8005074:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005078:	e00f      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800507a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800507e:	3328      	adds	r3, #40	@ 0x28
 8005080:	2101      	movs	r1, #1
 8005082:	4618      	mov	r0, r3
 8005084:	f000 ffc4 	bl	8006010 <RCCEx_PLL3_Config>
 8005088:	4603      	mov	r3, r0
 800508a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800508e:	e004      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005096:	e000      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800509a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10b      	bne.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050a2:	4b6c      	ldr	r3, [pc, #432]	@ (8005254 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80050a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050a6:	f023 0107 	bic.w	r1, r3, #7
 80050aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050b2:	4a68      	ldr	r2, [pc, #416]	@ (8005254 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80050b4:	430b      	orrs	r3, r1
 80050b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80050b8:	e003      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ca:	f002 0320 	and.w	r3, r2, #32
 80050ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80050d2:	2300      	movs	r3, #0
 80050d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80050d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80050dc:	460b      	mov	r3, r1
 80050de:	4313      	orrs	r3, r2
 80050e0:	d055      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80050e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050ee:	d033      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80050f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050f4:	d82c      	bhi.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80050f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050fa:	d02f      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80050fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005100:	d826      	bhi.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005102:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005106:	d02b      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005108:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800510c:	d820      	bhi.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800510e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005112:	d012      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005114:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005118:	d81a      	bhi.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800511a:	2b00      	cmp	r3, #0
 800511c:	d022      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800511e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005122:	d115      	bne.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005128:	3308      	adds	r3, #8
 800512a:	2100      	movs	r1, #0
 800512c:	4618      	mov	r0, r3
 800512e:	f000 febd 	bl	8005eac <RCCEx_PLL2_Config>
 8005132:	4603      	mov	r3, r0
 8005134:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005138:	e015      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800513a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800513e:	3328      	adds	r3, #40	@ 0x28
 8005140:	2102      	movs	r1, #2
 8005142:	4618      	mov	r0, r3
 8005144:	f000 ff64 	bl	8006010 <RCCEx_PLL3_Config>
 8005148:	4603      	mov	r3, r0
 800514a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800514e:	e00a      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005156:	e006      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005158:	bf00      	nop
 800515a:	e004      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800515c:	bf00      	nop
 800515e:	e002      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005160:	bf00      	nop
 8005162:	e000      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005164:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005166:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10b      	bne.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800516e:	4b39      	ldr	r3, [pc, #228]	@ (8005254 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005172:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800517a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800517e:	4a35      	ldr	r2, [pc, #212]	@ (8005254 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005180:	430b      	orrs	r3, r1
 8005182:	6553      	str	r3, [r2, #84]	@ 0x54
 8005184:	e003      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005186:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800518a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800518e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005196:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800519a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800519e:	2300      	movs	r3, #0
 80051a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80051a4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80051a8:	460b      	mov	r3, r1
 80051aa:	4313      	orrs	r3, r2
 80051ac:	d058      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80051ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051b6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80051ba:	d033      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80051bc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80051c0:	d82c      	bhi.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80051c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051c6:	d02f      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80051c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051cc:	d826      	bhi.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80051ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80051d2:	d02b      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80051d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80051d8:	d820      	bhi.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80051da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051de:	d012      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80051e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051e4:	d81a      	bhi.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d022      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80051ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051ee:	d115      	bne.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051f4:	3308      	adds	r3, #8
 80051f6:	2100      	movs	r1, #0
 80051f8:	4618      	mov	r0, r3
 80051fa:	f000 fe57 	bl	8005eac <RCCEx_PLL2_Config>
 80051fe:	4603      	mov	r3, r0
 8005200:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005204:	e015      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800520a:	3328      	adds	r3, #40	@ 0x28
 800520c:	2102      	movs	r1, #2
 800520e:	4618      	mov	r0, r3
 8005210:	f000 fefe 	bl	8006010 <RCCEx_PLL3_Config>
 8005214:	4603      	mov	r3, r0
 8005216:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800521a:	e00a      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005222:	e006      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005224:	bf00      	nop
 8005226:	e004      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005228:	bf00      	nop
 800522a:	e002      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800522c:	bf00      	nop
 800522e:	e000      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005230:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005232:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10e      	bne.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800523a:	4b06      	ldr	r3, [pc, #24]	@ (8005254 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800523c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800523e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005246:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800524a:	4a02      	ldr	r2, [pc, #8]	@ (8005254 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800524c:	430b      	orrs	r3, r1
 800524e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005250:	e006      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005252:	bf00      	nop
 8005254:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005258:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800525c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005268:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800526c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005270:	2300      	movs	r3, #0
 8005272:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005276:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800527a:	460b      	mov	r3, r1
 800527c:	4313      	orrs	r3, r2
 800527e:	d055      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005284:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005288:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800528c:	d033      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800528e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005292:	d82c      	bhi.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005294:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005298:	d02f      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800529a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800529e:	d826      	bhi.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80052a0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80052a4:	d02b      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80052a6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80052aa:	d820      	bhi.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80052ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052b0:	d012      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80052b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052b6:	d81a      	bhi.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d022      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80052bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052c0:	d115      	bne.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052c6:	3308      	adds	r3, #8
 80052c8:	2100      	movs	r1, #0
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 fdee 	bl	8005eac <RCCEx_PLL2_Config>
 80052d0:	4603      	mov	r3, r0
 80052d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80052d6:	e015      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052dc:	3328      	adds	r3, #40	@ 0x28
 80052de:	2102      	movs	r1, #2
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 fe95 	bl	8006010 <RCCEx_PLL3_Config>
 80052e6:	4603      	mov	r3, r0
 80052e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80052ec:	e00a      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052f4:	e006      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80052f6:	bf00      	nop
 80052f8:	e004      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80052fa:	bf00      	nop
 80052fc:	e002      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80052fe:	bf00      	nop
 8005300:	e000      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005302:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005304:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10b      	bne.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800530c:	4ba1      	ldr	r3, [pc, #644]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800530e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005310:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005318:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800531c:	4a9d      	ldr	r2, [pc, #628]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800531e:	430b      	orrs	r3, r1
 8005320:	6593      	str	r3, [r2, #88]	@ 0x58
 8005322:	e003      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005324:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005328:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800532c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005334:	f002 0308 	and.w	r3, r2, #8
 8005338:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800533c:	2300      	movs	r3, #0
 800533e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005342:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005346:	460b      	mov	r3, r1
 8005348:	4313      	orrs	r3, r2
 800534a:	d01e      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800534c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005350:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005354:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005358:	d10c      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800535a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800535e:	3328      	adds	r3, #40	@ 0x28
 8005360:	2102      	movs	r1, #2
 8005362:	4618      	mov	r0, r3
 8005364:	f000 fe54 	bl	8006010 <RCCEx_PLL3_Config>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d002      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005374:	4b87      	ldr	r3, [pc, #540]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005378:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800537c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005380:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005384:	4a83      	ldr	r2, [pc, #524]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005386:	430b      	orrs	r3, r1
 8005388:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800538a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800538e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005392:	f002 0310 	and.w	r3, r2, #16
 8005396:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800539a:	2300      	movs	r3, #0
 800539c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80053a0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80053a4:	460b      	mov	r3, r1
 80053a6:	4313      	orrs	r3, r2
 80053a8:	d01e      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80053aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053b6:	d10c      	bne.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80053b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053bc:	3328      	adds	r3, #40	@ 0x28
 80053be:	2102      	movs	r1, #2
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 fe25 	bl	8006010 <RCCEx_PLL3_Config>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d002      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053d2:	4b70      	ldr	r3, [pc, #448]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80053da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053e2:	4a6c      	ldr	r2, [pc, #432]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053e4:	430b      	orrs	r3, r1
 80053e6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80053f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053f8:	2300      	movs	r3, #0
 80053fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053fe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005402:	460b      	mov	r3, r1
 8005404:	4313      	orrs	r3, r2
 8005406:	d03e      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800540c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005410:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005414:	d022      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005416:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800541a:	d81b      	bhi.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800541c:	2b00      	cmp	r3, #0
 800541e:	d003      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005424:	d00b      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005426:	e015      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800542c:	3308      	adds	r3, #8
 800542e:	2100      	movs	r1, #0
 8005430:	4618      	mov	r0, r3
 8005432:	f000 fd3b 	bl	8005eac <RCCEx_PLL2_Config>
 8005436:	4603      	mov	r3, r0
 8005438:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800543c:	e00f      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800543e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005442:	3328      	adds	r3, #40	@ 0x28
 8005444:	2102      	movs	r1, #2
 8005446:	4618      	mov	r0, r3
 8005448:	f000 fde2 	bl	8006010 <RCCEx_PLL3_Config>
 800544c:	4603      	mov	r3, r0
 800544e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005452:	e004      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800545a:	e000      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800545c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800545e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10b      	bne.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005466:	4b4b      	ldr	r3, [pc, #300]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800546a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800546e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005472:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005476:	4a47      	ldr	r2, [pc, #284]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005478:	430b      	orrs	r3, r1
 800547a:	6593      	str	r3, [r2, #88]	@ 0x58
 800547c:	e003      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800547e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005482:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800548a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005492:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005494:	2300      	movs	r3, #0
 8005496:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005498:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800549c:	460b      	mov	r3, r1
 800549e:	4313      	orrs	r3, r2
 80054a0:	d03b      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80054a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80054ae:	d01f      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80054b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80054b4:	d818      	bhi.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80054b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054ba:	d003      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80054bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054c0:	d007      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80054c2:	e011      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054c4:	4b33      	ldr	r3, [pc, #204]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c8:	4a32      	ldr	r2, [pc, #200]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80054d0:	e00f      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054d6:	3328      	adds	r3, #40	@ 0x28
 80054d8:	2101      	movs	r1, #1
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 fd98 	bl	8006010 <RCCEx_PLL3_Config>
 80054e0:	4603      	mov	r3, r0
 80054e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80054e6:	e004      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054ee:	e000      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80054f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10b      	bne.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054fa:	4b26      	ldr	r3, [pc, #152]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054fe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800550a:	4a22      	ldr	r2, [pc, #136]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800550c:	430b      	orrs	r3, r1
 800550e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005510:	e003      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005512:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005516:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800551a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800551e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005522:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005526:	673b      	str	r3, [r7, #112]	@ 0x70
 8005528:	2300      	movs	r3, #0
 800552a:	677b      	str	r3, [r7, #116]	@ 0x74
 800552c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005530:	460b      	mov	r3, r1
 8005532:	4313      	orrs	r3, r2
 8005534:	d034      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800553a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800553c:	2b00      	cmp	r3, #0
 800553e:	d003      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005544:	d007      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005546:	e011      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005548:	4b12      	ldr	r3, [pc, #72]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800554a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554c:	4a11      	ldr	r2, [pc, #68]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800554e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005552:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005554:	e00e      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800555a:	3308      	adds	r3, #8
 800555c:	2102      	movs	r1, #2
 800555e:	4618      	mov	r0, r3
 8005560:	f000 fca4 	bl	8005eac <RCCEx_PLL2_Config>
 8005564:	4603      	mov	r3, r0
 8005566:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800556a:	e003      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005572:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005574:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10d      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800557c:	4b05      	ldr	r3, [pc, #20]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800557e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005580:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800558a:	4a02      	ldr	r2, [pc, #8]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800558c:	430b      	orrs	r3, r1
 800558e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005590:	e006      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005592:	bf00      	nop
 8005594:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005598:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800559c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80055a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80055ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055ae:	2300      	movs	r3, #0
 80055b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80055b2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80055b6:	460b      	mov	r3, r1
 80055b8:	4313      	orrs	r3, r2
 80055ba:	d00c      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80055bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055c0:	3328      	adds	r3, #40	@ 0x28
 80055c2:	2102      	movs	r1, #2
 80055c4:	4618      	mov	r0, r3
 80055c6:	f000 fd23 	bl	8006010 <RCCEx_PLL3_Config>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d002      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80055d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055de:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80055e2:	663b      	str	r3, [r7, #96]	@ 0x60
 80055e4:	2300      	movs	r3, #0
 80055e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80055e8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80055ec:	460b      	mov	r3, r1
 80055ee:	4313      	orrs	r3, r2
 80055f0:	d038      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80055f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055fe:	d018      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005600:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005604:	d811      	bhi.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005606:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800560a:	d014      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800560c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005610:	d80b      	bhi.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005612:	2b00      	cmp	r3, #0
 8005614:	d011      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005616:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800561a:	d106      	bne.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800561c:	4bc3      	ldr	r3, [pc, #780]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800561e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005620:	4ac2      	ldr	r2, [pc, #776]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005622:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005626:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005628:	e008      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005630:	e004      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005632:	bf00      	nop
 8005634:	e002      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005636:	bf00      	nop
 8005638:	e000      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800563a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800563c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10b      	bne.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005644:	4bb9      	ldr	r3, [pc, #740]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005648:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800564c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005650:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005654:	4ab5      	ldr	r2, [pc, #724]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005656:	430b      	orrs	r3, r1
 8005658:	6553      	str	r3, [r2, #84]	@ 0x54
 800565a:	e003      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800565c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005660:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005670:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005672:	2300      	movs	r3, #0
 8005674:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005676:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800567a:	460b      	mov	r3, r1
 800567c:	4313      	orrs	r3, r2
 800567e:	d009      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005680:	4baa      	ldr	r3, [pc, #680]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005682:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005684:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800568c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800568e:	4aa7      	ldr	r2, [pc, #668]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005690:	430b      	orrs	r3, r1
 8005692:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80056a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80056a2:	2300      	movs	r3, #0
 80056a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80056a6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80056aa:	460b      	mov	r3, r1
 80056ac:	4313      	orrs	r3, r2
 80056ae:	d00a      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80056b0:	4b9e      	ldr	r3, [pc, #632]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80056b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80056c0:	4a9a      	ldr	r2, [pc, #616]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056c2:	430b      	orrs	r3, r1
 80056c4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ce:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80056d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056d4:	2300      	movs	r3, #0
 80056d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056d8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80056dc:	460b      	mov	r3, r1
 80056de:	4313      	orrs	r3, r2
 80056e0:	d009      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056e2:	4b92      	ldr	r3, [pc, #584]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056e6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80056ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056f0:	4a8e      	ldr	r2, [pc, #568]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056f2:	430b      	orrs	r3, r1
 80056f4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80056f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fe:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005702:	643b      	str	r3, [r7, #64]	@ 0x40
 8005704:	2300      	movs	r3, #0
 8005706:	647b      	str	r3, [r7, #68]	@ 0x44
 8005708:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800570c:	460b      	mov	r3, r1
 800570e:	4313      	orrs	r3, r2
 8005710:	d00e      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005712:	4b86      	ldr	r3, [pc, #536]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	4a85      	ldr	r2, [pc, #532]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005718:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800571c:	6113      	str	r3, [r2, #16]
 800571e:	4b83      	ldr	r3, [pc, #524]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005720:	6919      	ldr	r1, [r3, #16]
 8005722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005726:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800572a:	4a80      	ldr	r2, [pc, #512]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800572c:	430b      	orrs	r3, r1
 800572e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005738:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800573c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800573e:	2300      	movs	r3, #0
 8005740:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005742:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005746:	460b      	mov	r3, r1
 8005748:	4313      	orrs	r3, r2
 800574a:	d009      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800574c:	4b77      	ldr	r3, [pc, #476]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800574e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005750:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800575a:	4a74      	ldr	r2, [pc, #464]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800575c:	430b      	orrs	r3, r1
 800575e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005768:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800576c:	633b      	str	r3, [r7, #48]	@ 0x30
 800576e:	2300      	movs	r3, #0
 8005770:	637b      	str	r3, [r7, #52]	@ 0x34
 8005772:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005776:	460b      	mov	r3, r1
 8005778:	4313      	orrs	r3, r2
 800577a:	d00a      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800577c:	4b6b      	ldr	r3, [pc, #428]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800577e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005780:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005788:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800578c:	4a67      	ldr	r2, [pc, #412]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800578e:	430b      	orrs	r3, r1
 8005790:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579a:	2100      	movs	r1, #0
 800579c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057a4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80057a8:	460b      	mov	r3, r1
 80057aa:	4313      	orrs	r3, r2
 80057ac:	d011      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057b2:	3308      	adds	r3, #8
 80057b4:	2100      	movs	r1, #0
 80057b6:	4618      	mov	r0, r3
 80057b8:	f000 fb78 	bl	8005eac <RCCEx_PLL2_Config>
 80057bc:	4603      	mov	r3, r0
 80057be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80057c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d003      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80057d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057da:	2100      	movs	r1, #0
 80057dc:	6239      	str	r1, [r7, #32]
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80057e4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80057e8:	460b      	mov	r3, r1
 80057ea:	4313      	orrs	r3, r2
 80057ec:	d011      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057f2:	3308      	adds	r3, #8
 80057f4:	2101      	movs	r1, #1
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 fb58 	bl	8005eac <RCCEx_PLL2_Config>
 80057fc:	4603      	mov	r3, r0
 80057fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005802:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800580a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800580e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581a:	2100      	movs	r1, #0
 800581c:	61b9      	str	r1, [r7, #24]
 800581e:	f003 0304 	and.w	r3, r3, #4
 8005822:	61fb      	str	r3, [r7, #28]
 8005824:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005828:	460b      	mov	r3, r1
 800582a:	4313      	orrs	r3, r2
 800582c:	d011      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800582e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005832:	3308      	adds	r3, #8
 8005834:	2102      	movs	r1, #2
 8005836:	4618      	mov	r0, r3
 8005838:	f000 fb38 	bl	8005eac <RCCEx_PLL2_Config>
 800583c:	4603      	mov	r3, r0
 800583e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005842:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005846:	2b00      	cmp	r3, #0
 8005848:	d003      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800584a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800584e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585a:	2100      	movs	r1, #0
 800585c:	6139      	str	r1, [r7, #16]
 800585e:	f003 0308 	and.w	r3, r3, #8
 8005862:	617b      	str	r3, [r7, #20]
 8005864:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005868:	460b      	mov	r3, r1
 800586a:	4313      	orrs	r3, r2
 800586c:	d011      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800586e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005872:	3328      	adds	r3, #40	@ 0x28
 8005874:	2100      	movs	r1, #0
 8005876:	4618      	mov	r0, r3
 8005878:	f000 fbca 	bl	8006010 <RCCEx_PLL3_Config>
 800587c:	4603      	mov	r3, r0
 800587e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005882:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005886:	2b00      	cmp	r3, #0
 8005888:	d003      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800588a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800588e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589a:	2100      	movs	r1, #0
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	f003 0310 	and.w	r3, r3, #16
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80058a8:	460b      	mov	r3, r1
 80058aa:	4313      	orrs	r3, r2
 80058ac:	d011      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058b2:	3328      	adds	r3, #40	@ 0x28
 80058b4:	2101      	movs	r1, #1
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 fbaa 	bl	8006010 <RCCEx_PLL3_Config>
 80058bc:	4603      	mov	r3, r0
 80058be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80058c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80058d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058da:	2100      	movs	r1, #0
 80058dc:	6039      	str	r1, [r7, #0]
 80058de:	f003 0320 	and.w	r3, r3, #32
 80058e2:	607b      	str	r3, [r7, #4]
 80058e4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80058e8:	460b      	mov	r3, r1
 80058ea:	4313      	orrs	r3, r2
 80058ec:	d011      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80058ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058f2:	3328      	adds	r3, #40	@ 0x28
 80058f4:	2102      	movs	r1, #2
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 fb8a 	bl	8006010 <RCCEx_PLL3_Config>
 80058fc:	4603      	mov	r3, r0
 80058fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005902:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005906:	2b00      	cmp	r3, #0
 8005908:	d003      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800590a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800590e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005912:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800591a:	2300      	movs	r3, #0
 800591c:	e000      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
}
 8005920:	4618      	mov	r0, r3
 8005922:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005926:	46bd      	mov	sp, r7
 8005928:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800592c:	58024400 	.word	0x58024400

08005930 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005934:	f7fe fd96 	bl	8004464 <HAL_RCC_GetHCLKFreq>
 8005938:	4602      	mov	r2, r0
 800593a:	4b06      	ldr	r3, [pc, #24]	@ (8005954 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	091b      	lsrs	r3, r3, #4
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	4904      	ldr	r1, [pc, #16]	@ (8005958 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005946:	5ccb      	ldrb	r3, [r1, r3]
 8005948:	f003 031f 	and.w	r3, r3, #31
 800594c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005950:	4618      	mov	r0, r3
 8005952:	bd80      	pop	{r7, pc}
 8005954:	58024400 	.word	0x58024400
 8005958:	0800e0d0 	.word	0x0800e0d0

0800595c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800595c:	b480      	push	{r7}
 800595e:	b089      	sub	sp, #36	@ 0x24
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005964:	4ba1      	ldr	r3, [pc, #644]	@ (8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005968:	f003 0303 	and.w	r3, r3, #3
 800596c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800596e:	4b9f      	ldr	r3, [pc, #636]	@ (8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005972:	0b1b      	lsrs	r3, r3, #12
 8005974:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005978:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800597a:	4b9c      	ldr	r3, [pc, #624]	@ (8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800597c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800597e:	091b      	lsrs	r3, r3, #4
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005986:	4b99      	ldr	r3, [pc, #612]	@ (8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800598a:	08db      	lsrs	r3, r3, #3
 800598c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	fb02 f303 	mul.w	r3, r2, r3
 8005996:	ee07 3a90 	vmov	s15, r3
 800599a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800599e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 8111 	beq.w	8005bcc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	f000 8083 	beq.w	8005ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	f200 80a1 	bhi.w	8005afc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d056      	beq.n	8005a74 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80059c6:	e099      	b.n	8005afc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059c8:	4b88      	ldr	r3, [pc, #544]	@ (8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0320 	and.w	r3, r3, #32
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d02d      	beq.n	8005a30 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059d4:	4b85      	ldr	r3, [pc, #532]	@ (8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	08db      	lsrs	r3, r3, #3
 80059da:	f003 0303 	and.w	r3, r3, #3
 80059de:	4a84      	ldr	r2, [pc, #528]	@ (8005bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80059e0:	fa22 f303 	lsr.w	r3, r2, r3
 80059e4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	ee07 3a90 	vmov	s15, r3
 80059ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	ee07 3a90 	vmov	s15, r3
 80059f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059fe:	4b7b      	ldr	r3, [pc, #492]	@ (8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a06:	ee07 3a90 	vmov	s15, r3
 8005a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a12:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005a2e:	e087      	b.n	8005b40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	ee07 3a90 	vmov	s15, r3
 8005a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a3a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a42:	4b6a      	ldr	r3, [pc, #424]	@ (8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a4a:	ee07 3a90 	vmov	s15, r3
 8005a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a52:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a56:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a72:	e065      	b.n	8005b40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	ee07 3a90 	vmov	s15, r3
 8005a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a7e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005bfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a86:	4b59      	ldr	r3, [pc, #356]	@ (8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a8e:	ee07 3a90 	vmov	s15, r3
 8005a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a96:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a9a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ab2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ab6:	e043      	b.n	8005b40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	ee07 3a90 	vmov	s15, r3
 8005abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ac2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005c00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aca:	4b48      	ldr	r3, [pc, #288]	@ (8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ad2:	ee07 3a90 	vmov	s15, r3
 8005ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ada:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ade:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005af6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005afa:	e021      	b.n	8005b40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	ee07 3a90 	vmov	s15, r3
 8005b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b06:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005bfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b0e:	4b37      	ldr	r3, [pc, #220]	@ (8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b16:	ee07 3a90 	vmov	s15, r3
 8005b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b22:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b3e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005b40:	4b2a      	ldr	r3, [pc, #168]	@ (8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b44:	0a5b      	lsrs	r3, r3, #9
 8005b46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b4a:	ee07 3a90 	vmov	s15, r3
 8005b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b66:	ee17 2a90 	vmov	r2, s15
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005b6e:	4b1f      	ldr	r3, [pc, #124]	@ (8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b72:	0c1b      	lsrs	r3, r3, #16
 8005b74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b78:	ee07 3a90 	vmov	s15, r3
 8005b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b88:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b94:	ee17 2a90 	vmov	r2, s15
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005b9c:	4b13      	ldr	r3, [pc, #76]	@ (8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba0:	0e1b      	lsrs	r3, r3, #24
 8005ba2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ba6:	ee07 3a90 	vmov	s15, r3
 8005baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005bb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bc2:	ee17 2a90 	vmov	r2, s15
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005bca:	e008      	b.n	8005bde <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	609a      	str	r2, [r3, #8]
}
 8005bde:	bf00      	nop
 8005be0:	3724      	adds	r7, #36	@ 0x24
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	58024400 	.word	0x58024400
 8005bf0:	03d09000 	.word	0x03d09000
 8005bf4:	46000000 	.word	0x46000000
 8005bf8:	4c742400 	.word	0x4c742400
 8005bfc:	4a742400 	.word	0x4a742400
 8005c00:	4bbebc20 	.word	0x4bbebc20

08005c04 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b089      	sub	sp, #36	@ 0x24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c0c:	4ba1      	ldr	r3, [pc, #644]	@ (8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c10:	f003 0303 	and.w	r3, r3, #3
 8005c14:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005c16:	4b9f      	ldr	r3, [pc, #636]	@ (8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c1a:	0d1b      	lsrs	r3, r3, #20
 8005c1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c20:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005c22:	4b9c      	ldr	r3, [pc, #624]	@ (8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c26:	0a1b      	lsrs	r3, r3, #8
 8005c28:	f003 0301 	and.w	r3, r3, #1
 8005c2c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005c2e:	4b99      	ldr	r3, [pc, #612]	@ (8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c32:	08db      	lsrs	r3, r3, #3
 8005c34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	fb02 f303 	mul.w	r3, r2, r3
 8005c3e:	ee07 3a90 	vmov	s15, r3
 8005c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 8111 	beq.w	8005e74 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	f000 8083 	beq.w	8005d60 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	f200 80a1 	bhi.w	8005da4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d056      	beq.n	8005d1c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005c6e:	e099      	b.n	8005da4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c70:	4b88      	ldr	r3, [pc, #544]	@ (8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0320 	and.w	r3, r3, #32
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d02d      	beq.n	8005cd8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c7c:	4b85      	ldr	r3, [pc, #532]	@ (8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	08db      	lsrs	r3, r3, #3
 8005c82:	f003 0303 	and.w	r3, r3, #3
 8005c86:	4a84      	ldr	r2, [pc, #528]	@ (8005e98 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005c88:	fa22 f303 	lsr.w	r3, r2, r3
 8005c8c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	ee07 3a90 	vmov	s15, r3
 8005c94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	ee07 3a90 	vmov	s15, r3
 8005c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ca6:	4b7b      	ldr	r3, [pc, #492]	@ (8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cae:	ee07 3a90 	vmov	s15, r3
 8005cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005e9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cd2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005cd6:	e087      	b.n	8005de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	ee07 3a90 	vmov	s15, r3
 8005cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ce2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cea:	4b6a      	ldr	r3, [pc, #424]	@ (8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cf2:	ee07 3a90 	vmov	s15, r3
 8005cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cfe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005e9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d1a:	e065      	b.n	8005de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	ee07 3a90 	vmov	s15, r3
 8005d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d26:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d2e:	4b59      	ldr	r3, [pc, #356]	@ (8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d36:	ee07 3a90 	vmov	s15, r3
 8005d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d42:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005e9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d5e:	e043      	b.n	8005de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	ee07 3a90 	vmov	s15, r3
 8005d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d6a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d72:	4b48      	ldr	r3, [pc, #288]	@ (8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d7a:	ee07 3a90 	vmov	s15, r3
 8005d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d82:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d86:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005e9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005da2:	e021      	b.n	8005de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	ee07 3a90 	vmov	s15, r3
 8005daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005db6:	4b37      	ldr	r3, [pc, #220]	@ (8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dbe:	ee07 3a90 	vmov	s15, r3
 8005dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005e9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005de2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005de6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005de8:	4b2a      	ldr	r3, [pc, #168]	@ (8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dec:	0a5b      	lsrs	r3, r3, #9
 8005dee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005df2:	ee07 3a90 	vmov	s15, r3
 8005df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dfa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005dfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e02:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e0e:	ee17 2a90 	vmov	r2, s15
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005e16:	4b1f      	ldr	r3, [pc, #124]	@ (8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e1a:	0c1b      	lsrs	r3, r3, #16
 8005e1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e20:	ee07 3a90 	vmov	s15, r3
 8005e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e30:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e3c:	ee17 2a90 	vmov	r2, s15
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005e44:	4b13      	ldr	r3, [pc, #76]	@ (8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e48:	0e1b      	lsrs	r3, r3, #24
 8005e4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e4e:	ee07 3a90 	vmov	s15, r3
 8005e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e6a:	ee17 2a90 	vmov	r2, s15
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005e72:	e008      	b.n	8005e86 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	609a      	str	r2, [r3, #8]
}
 8005e86:	bf00      	nop
 8005e88:	3724      	adds	r7, #36	@ 0x24
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	58024400 	.word	0x58024400
 8005e98:	03d09000 	.word	0x03d09000
 8005e9c:	46000000 	.word	0x46000000
 8005ea0:	4c742400 	.word	0x4c742400
 8005ea4:	4a742400 	.word	0x4a742400
 8005ea8:	4bbebc20 	.word	0x4bbebc20

08005eac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005eba:	4b53      	ldr	r3, [pc, #332]	@ (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ebe:	f003 0303 	and.w	r3, r3, #3
 8005ec2:	2b03      	cmp	r3, #3
 8005ec4:	d101      	bne.n	8005eca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e099      	b.n	8005ffe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005eca:	4b4f      	ldr	r3, [pc, #316]	@ (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a4e      	ldr	r2, [pc, #312]	@ (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005ed0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005ed4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ed6:	f7fb fdd3 	bl	8001a80 <HAL_GetTick>
 8005eda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005edc:	e008      	b.n	8005ef0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005ede:	f7fb fdcf 	bl	8001a80 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d901      	bls.n	8005ef0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e086      	b.n	8005ffe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ef0:	4b45      	ldr	r3, [pc, #276]	@ (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1f0      	bne.n	8005ede <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005efc:	4b42      	ldr	r3, [pc, #264]	@ (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f00:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	031b      	lsls	r3, r3, #12
 8005f0a:	493f      	ldr	r1, [pc, #252]	@ (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	3b01      	subs	r3, #1
 8005f16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	025b      	lsls	r3, r3, #9
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	431a      	orrs	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	041b      	lsls	r3, r3, #16
 8005f2e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005f32:	431a      	orrs	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	061b      	lsls	r3, r3, #24
 8005f3c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005f40:	4931      	ldr	r1, [pc, #196]	@ (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005f46:	4b30      	ldr	r3, [pc, #192]	@ (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f4a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	492d      	ldr	r1, [pc, #180]	@ (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f54:	4313      	orrs	r3, r2
 8005f56:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005f58:	4b2b      	ldr	r3, [pc, #172]	@ (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f5c:	f023 0220 	bic.w	r2, r3, #32
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	4928      	ldr	r1, [pc, #160]	@ (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005f6a:	4b27      	ldr	r3, [pc, #156]	@ (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f6e:	4a26      	ldr	r2, [pc, #152]	@ (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f70:	f023 0310 	bic.w	r3, r3, #16
 8005f74:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005f76:	4b24      	ldr	r3, [pc, #144]	@ (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f7a:	4b24      	ldr	r3, [pc, #144]	@ (800600c <RCCEx_PLL2_Config+0x160>)
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	69d2      	ldr	r2, [r2, #28]
 8005f82:	00d2      	lsls	r2, r2, #3
 8005f84:	4920      	ldr	r1, [pc, #128]	@ (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005f8a:	4b1f      	ldr	r3, [pc, #124]	@ (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f8e:	4a1e      	ldr	r2, [pc, #120]	@ (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f90:	f043 0310 	orr.w	r3, r3, #16
 8005f94:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d106      	bne.n	8005faa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa0:	4a19      	ldr	r2, [pc, #100]	@ (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005fa2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005fa6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005fa8:	e00f      	b.n	8005fca <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d106      	bne.n	8005fbe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005fb0:	4b15      	ldr	r3, [pc, #84]	@ (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb4:	4a14      	ldr	r2, [pc, #80]	@ (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005fb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005fbc:	e005      	b.n	8005fca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005fbe:	4b12      	ldr	r3, [pc, #72]	@ (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc2:	4a11      	ldr	r2, [pc, #68]	@ (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005fc4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005fc8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005fca:	4b0f      	ldr	r3, [pc, #60]	@ (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a0e      	ldr	r2, [pc, #56]	@ (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005fd0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005fd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fd6:	f7fb fd53 	bl	8001a80 <HAL_GetTick>
 8005fda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005fdc:	e008      	b.n	8005ff0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005fde:	f7fb fd4f 	bl	8001a80 <HAL_GetTick>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d901      	bls.n	8005ff0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e006      	b.n	8005ffe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ff0:	4b05      	ldr	r3, [pc, #20]	@ (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d0f0      	beq.n	8005fde <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	58024400 	.word	0x58024400
 800600c:	ffff0007 	.word	0xffff0007

08006010 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800601a:	2300      	movs	r3, #0
 800601c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800601e:	4b53      	ldr	r3, [pc, #332]	@ (800616c <RCCEx_PLL3_Config+0x15c>)
 8006020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006022:	f003 0303 	and.w	r3, r3, #3
 8006026:	2b03      	cmp	r3, #3
 8006028:	d101      	bne.n	800602e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e099      	b.n	8006162 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800602e:	4b4f      	ldr	r3, [pc, #316]	@ (800616c <RCCEx_PLL3_Config+0x15c>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a4e      	ldr	r2, [pc, #312]	@ (800616c <RCCEx_PLL3_Config+0x15c>)
 8006034:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006038:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800603a:	f7fb fd21 	bl	8001a80 <HAL_GetTick>
 800603e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006040:	e008      	b.n	8006054 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006042:	f7fb fd1d 	bl	8001a80 <HAL_GetTick>
 8006046:	4602      	mov	r2, r0
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	2b02      	cmp	r3, #2
 800604e:	d901      	bls.n	8006054 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e086      	b.n	8006162 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006054:	4b45      	ldr	r3, [pc, #276]	@ (800616c <RCCEx_PLL3_Config+0x15c>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1f0      	bne.n	8006042 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006060:	4b42      	ldr	r3, [pc, #264]	@ (800616c <RCCEx_PLL3_Config+0x15c>)
 8006062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006064:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	051b      	lsls	r3, r3, #20
 800606e:	493f      	ldr	r1, [pc, #252]	@ (800616c <RCCEx_PLL3_Config+0x15c>)
 8006070:	4313      	orrs	r3, r2
 8006072:	628b      	str	r3, [r1, #40]	@ 0x28
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	3b01      	subs	r3, #1
 800607a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	3b01      	subs	r3, #1
 8006084:	025b      	lsls	r3, r3, #9
 8006086:	b29b      	uxth	r3, r3
 8006088:	431a      	orrs	r2, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	3b01      	subs	r3, #1
 8006090:	041b      	lsls	r3, r3, #16
 8006092:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006096:	431a      	orrs	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	3b01      	subs	r3, #1
 800609e:	061b      	lsls	r3, r3, #24
 80060a0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80060a4:	4931      	ldr	r1, [pc, #196]	@ (800616c <RCCEx_PLL3_Config+0x15c>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80060aa:	4b30      	ldr	r3, [pc, #192]	@ (800616c <RCCEx_PLL3_Config+0x15c>)
 80060ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	492d      	ldr	r1, [pc, #180]	@ (800616c <RCCEx_PLL3_Config+0x15c>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80060bc:	4b2b      	ldr	r3, [pc, #172]	@ (800616c <RCCEx_PLL3_Config+0x15c>)
 80060be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	4928      	ldr	r1, [pc, #160]	@ (800616c <RCCEx_PLL3_Config+0x15c>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80060ce:	4b27      	ldr	r3, [pc, #156]	@ (800616c <RCCEx_PLL3_Config+0x15c>)
 80060d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d2:	4a26      	ldr	r2, [pc, #152]	@ (800616c <RCCEx_PLL3_Config+0x15c>)
 80060d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80060da:	4b24      	ldr	r3, [pc, #144]	@ (800616c <RCCEx_PLL3_Config+0x15c>)
 80060dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060de:	4b24      	ldr	r3, [pc, #144]	@ (8006170 <RCCEx_PLL3_Config+0x160>)
 80060e0:	4013      	ands	r3, r2
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	69d2      	ldr	r2, [r2, #28]
 80060e6:	00d2      	lsls	r2, r2, #3
 80060e8:	4920      	ldr	r1, [pc, #128]	@ (800616c <RCCEx_PLL3_Config+0x15c>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80060ee:	4b1f      	ldr	r3, [pc, #124]	@ (800616c <RCCEx_PLL3_Config+0x15c>)
 80060f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f2:	4a1e      	ldr	r2, [pc, #120]	@ (800616c <RCCEx_PLL3_Config+0x15c>)
 80060f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d106      	bne.n	800610e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006100:	4b1a      	ldr	r3, [pc, #104]	@ (800616c <RCCEx_PLL3_Config+0x15c>)
 8006102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006104:	4a19      	ldr	r2, [pc, #100]	@ (800616c <RCCEx_PLL3_Config+0x15c>)
 8006106:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800610a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800610c:	e00f      	b.n	800612e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d106      	bne.n	8006122 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006114:	4b15      	ldr	r3, [pc, #84]	@ (800616c <RCCEx_PLL3_Config+0x15c>)
 8006116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006118:	4a14      	ldr	r2, [pc, #80]	@ (800616c <RCCEx_PLL3_Config+0x15c>)
 800611a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800611e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006120:	e005      	b.n	800612e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006122:	4b12      	ldr	r3, [pc, #72]	@ (800616c <RCCEx_PLL3_Config+0x15c>)
 8006124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006126:	4a11      	ldr	r2, [pc, #68]	@ (800616c <RCCEx_PLL3_Config+0x15c>)
 8006128:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800612c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800612e:	4b0f      	ldr	r3, [pc, #60]	@ (800616c <RCCEx_PLL3_Config+0x15c>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a0e      	ldr	r2, [pc, #56]	@ (800616c <RCCEx_PLL3_Config+0x15c>)
 8006134:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006138:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800613a:	f7fb fca1 	bl	8001a80 <HAL_GetTick>
 800613e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006140:	e008      	b.n	8006154 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006142:	f7fb fc9d 	bl	8001a80 <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	2b02      	cmp	r3, #2
 800614e:	d901      	bls.n	8006154 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e006      	b.n	8006162 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006154:	4b05      	ldr	r3, [pc, #20]	@ (800616c <RCCEx_PLL3_Config+0x15c>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d0f0      	beq.n	8006142 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006160:	7bfb      	ldrb	r3, [r7, #15]
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	58024400 	.word	0x58024400
 8006170:	ffff0007 	.word	0xffff0007

08006174 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e049      	b.n	800621a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d106      	bne.n	80061a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7fb fa88 	bl	80016b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2202      	movs	r2, #2
 80061a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	3304      	adds	r3, #4
 80061b0:	4619      	mov	r1, r3
 80061b2:	4610      	mov	r0, r2
 80061b4:	f000 fbfc 	bl	80069b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b082      	sub	sp, #8
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d101      	bne.n	8006234 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e049      	b.n	80062c8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b00      	cmp	r3, #0
 800623e:	d106      	bne.n	800624e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f841 	bl	80062d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2202      	movs	r2, #2
 8006252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	3304      	adds	r3, #4
 800625e:	4619      	mov	r1, r3
 8006260:	4610      	mov	r0, r2
 8006262:	f000 fba5 	bl	80069b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2201      	movs	r2, #1
 800626a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3708      	adds	r7, #8
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062ee:	2300      	movs	r3, #0
 80062f0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d109      	bne.n	800630c <HAL_TIM_PWM_Start_IT+0x28>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b01      	cmp	r3, #1
 8006302:	bf14      	ite	ne
 8006304:	2301      	movne	r3, #1
 8006306:	2300      	moveq	r3, #0
 8006308:	b2db      	uxtb	r3, r3
 800630a:	e03c      	b.n	8006386 <HAL_TIM_PWM_Start_IT+0xa2>
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	2b04      	cmp	r3, #4
 8006310:	d109      	bne.n	8006326 <HAL_TIM_PWM_Start_IT+0x42>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b01      	cmp	r3, #1
 800631c:	bf14      	ite	ne
 800631e:	2301      	movne	r3, #1
 8006320:	2300      	moveq	r3, #0
 8006322:	b2db      	uxtb	r3, r3
 8006324:	e02f      	b.n	8006386 <HAL_TIM_PWM_Start_IT+0xa2>
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	2b08      	cmp	r3, #8
 800632a:	d109      	bne.n	8006340 <HAL_TIM_PWM_Start_IT+0x5c>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006332:	b2db      	uxtb	r3, r3
 8006334:	2b01      	cmp	r3, #1
 8006336:	bf14      	ite	ne
 8006338:	2301      	movne	r3, #1
 800633a:	2300      	moveq	r3, #0
 800633c:	b2db      	uxtb	r3, r3
 800633e:	e022      	b.n	8006386 <HAL_TIM_PWM_Start_IT+0xa2>
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	2b0c      	cmp	r3, #12
 8006344:	d109      	bne.n	800635a <HAL_TIM_PWM_Start_IT+0x76>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b01      	cmp	r3, #1
 8006350:	bf14      	ite	ne
 8006352:	2301      	movne	r3, #1
 8006354:	2300      	moveq	r3, #0
 8006356:	b2db      	uxtb	r3, r3
 8006358:	e015      	b.n	8006386 <HAL_TIM_PWM_Start_IT+0xa2>
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	2b10      	cmp	r3, #16
 800635e:	d109      	bne.n	8006374 <HAL_TIM_PWM_Start_IT+0x90>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006366:	b2db      	uxtb	r3, r3
 8006368:	2b01      	cmp	r3, #1
 800636a:	bf14      	ite	ne
 800636c:	2301      	movne	r3, #1
 800636e:	2300      	moveq	r3, #0
 8006370:	b2db      	uxtb	r3, r3
 8006372:	e008      	b.n	8006386 <HAL_TIM_PWM_Start_IT+0xa2>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b01      	cmp	r3, #1
 800637e:	bf14      	ite	ne
 8006380:	2301      	movne	r3, #1
 8006382:	2300      	moveq	r3, #0
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e0ec      	b.n	8006568 <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d104      	bne.n	800639e <HAL_TIM_PWM_Start_IT+0xba>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2202      	movs	r2, #2
 8006398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800639c:	e023      	b.n	80063e6 <HAL_TIM_PWM_Start_IT+0x102>
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2b04      	cmp	r3, #4
 80063a2:	d104      	bne.n	80063ae <HAL_TIM_PWM_Start_IT+0xca>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2202      	movs	r2, #2
 80063a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063ac:	e01b      	b.n	80063e6 <HAL_TIM_PWM_Start_IT+0x102>
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	2b08      	cmp	r3, #8
 80063b2:	d104      	bne.n	80063be <HAL_TIM_PWM_Start_IT+0xda>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2202      	movs	r2, #2
 80063b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063bc:	e013      	b.n	80063e6 <HAL_TIM_PWM_Start_IT+0x102>
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b0c      	cmp	r3, #12
 80063c2:	d104      	bne.n	80063ce <HAL_TIM_PWM_Start_IT+0xea>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2202      	movs	r2, #2
 80063c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80063cc:	e00b      	b.n	80063e6 <HAL_TIM_PWM_Start_IT+0x102>
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	2b10      	cmp	r3, #16
 80063d2:	d104      	bne.n	80063de <HAL_TIM_PWM_Start_IT+0xfa>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2202      	movs	r2, #2
 80063d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063dc:	e003      	b.n	80063e6 <HAL_TIM_PWM_Start_IT+0x102>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2202      	movs	r2, #2
 80063e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b0c      	cmp	r3, #12
 80063ea:	d841      	bhi.n	8006470 <HAL_TIM_PWM_Start_IT+0x18c>
 80063ec:	a201      	add	r2, pc, #4	@ (adr r2, 80063f4 <HAL_TIM_PWM_Start_IT+0x110>)
 80063ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f2:	bf00      	nop
 80063f4:	08006429 	.word	0x08006429
 80063f8:	08006471 	.word	0x08006471
 80063fc:	08006471 	.word	0x08006471
 8006400:	08006471 	.word	0x08006471
 8006404:	0800643b 	.word	0x0800643b
 8006408:	08006471 	.word	0x08006471
 800640c:	08006471 	.word	0x08006471
 8006410:	08006471 	.word	0x08006471
 8006414:	0800644d 	.word	0x0800644d
 8006418:	08006471 	.word	0x08006471
 800641c:	08006471 	.word	0x08006471
 8006420:	08006471 	.word	0x08006471
 8006424:	0800645f 	.word	0x0800645f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68da      	ldr	r2, [r3, #12]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f042 0202 	orr.w	r2, r2, #2
 8006436:	60da      	str	r2, [r3, #12]
      break;
 8006438:	e01d      	b.n	8006476 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68da      	ldr	r2, [r3, #12]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f042 0204 	orr.w	r2, r2, #4
 8006448:	60da      	str	r2, [r3, #12]
      break;
 800644a:	e014      	b.n	8006476 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68da      	ldr	r2, [r3, #12]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f042 0208 	orr.w	r2, r2, #8
 800645a:	60da      	str	r2, [r3, #12]
      break;
 800645c:	e00b      	b.n	8006476 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68da      	ldr	r2, [r3, #12]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f042 0210 	orr.w	r2, r2, #16
 800646c:	60da      	str	r2, [r3, #12]
      break;
 800646e:	e002      	b.n	8006476 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	73fb      	strb	r3, [r7, #15]
      break;
 8006474:	bf00      	nop
  }

  if (status == HAL_OK)
 8006476:	7bfb      	ldrb	r3, [r7, #15]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d174      	bne.n	8006566 <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2201      	movs	r2, #1
 8006482:	6839      	ldr	r1, [r7, #0]
 8006484:	4618      	mov	r0, r3
 8006486:	f000 fead 	bl	80071e4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a38      	ldr	r2, [pc, #224]	@ (8006570 <HAL_TIM_PWM_Start_IT+0x28c>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d013      	beq.n	80064bc <HAL_TIM_PWM_Start_IT+0x1d8>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a36      	ldr	r2, [pc, #216]	@ (8006574 <HAL_TIM_PWM_Start_IT+0x290>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d00e      	beq.n	80064bc <HAL_TIM_PWM_Start_IT+0x1d8>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a35      	ldr	r2, [pc, #212]	@ (8006578 <HAL_TIM_PWM_Start_IT+0x294>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d009      	beq.n	80064bc <HAL_TIM_PWM_Start_IT+0x1d8>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a33      	ldr	r2, [pc, #204]	@ (800657c <HAL_TIM_PWM_Start_IT+0x298>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d004      	beq.n	80064bc <HAL_TIM_PWM_Start_IT+0x1d8>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a32      	ldr	r2, [pc, #200]	@ (8006580 <HAL_TIM_PWM_Start_IT+0x29c>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d101      	bne.n	80064c0 <HAL_TIM_PWM_Start_IT+0x1dc>
 80064bc:	2301      	movs	r3, #1
 80064be:	e000      	b.n	80064c2 <HAL_TIM_PWM_Start_IT+0x1de>
 80064c0:	2300      	movs	r3, #0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d007      	beq.n	80064d6 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80064d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a25      	ldr	r2, [pc, #148]	@ (8006570 <HAL_TIM_PWM_Start_IT+0x28c>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d022      	beq.n	8006526 <HAL_TIM_PWM_Start_IT+0x242>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064e8:	d01d      	beq.n	8006526 <HAL_TIM_PWM_Start_IT+0x242>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a25      	ldr	r2, [pc, #148]	@ (8006584 <HAL_TIM_PWM_Start_IT+0x2a0>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d018      	beq.n	8006526 <HAL_TIM_PWM_Start_IT+0x242>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a23      	ldr	r2, [pc, #140]	@ (8006588 <HAL_TIM_PWM_Start_IT+0x2a4>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d013      	beq.n	8006526 <HAL_TIM_PWM_Start_IT+0x242>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a22      	ldr	r2, [pc, #136]	@ (800658c <HAL_TIM_PWM_Start_IT+0x2a8>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d00e      	beq.n	8006526 <HAL_TIM_PWM_Start_IT+0x242>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a19      	ldr	r2, [pc, #100]	@ (8006574 <HAL_TIM_PWM_Start_IT+0x290>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d009      	beq.n	8006526 <HAL_TIM_PWM_Start_IT+0x242>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a1e      	ldr	r2, [pc, #120]	@ (8006590 <HAL_TIM_PWM_Start_IT+0x2ac>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d004      	beq.n	8006526 <HAL_TIM_PWM_Start_IT+0x242>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a15      	ldr	r2, [pc, #84]	@ (8006578 <HAL_TIM_PWM_Start_IT+0x294>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d115      	bne.n	8006552 <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	689a      	ldr	r2, [r3, #8]
 800652c:	4b19      	ldr	r3, [pc, #100]	@ (8006594 <HAL_TIM_PWM_Start_IT+0x2b0>)
 800652e:	4013      	ands	r3, r2
 8006530:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	2b06      	cmp	r3, #6
 8006536:	d015      	beq.n	8006564 <HAL_TIM_PWM_Start_IT+0x280>
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800653e:	d011      	beq.n	8006564 <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f042 0201 	orr.w	r2, r2, #1
 800654e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006550:	e008      	b.n	8006564 <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f042 0201 	orr.w	r2, r2, #1
 8006560:	601a      	str	r2, [r3, #0]
 8006562:	e000      	b.n	8006566 <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006564:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006566:	7bfb      	ldrb	r3, [r7, #15]
}
 8006568:	4618      	mov	r0, r3
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	40010000 	.word	0x40010000
 8006574:	40010400 	.word	0x40010400
 8006578:	40014000 	.word	0x40014000
 800657c:	40014400 	.word	0x40014400
 8006580:	40014800 	.word	0x40014800
 8006584:	40000400 	.word	0x40000400
 8006588:	40000800 	.word	0x40000800
 800658c:	40000c00 	.word	0x40000c00
 8006590:	40001800 	.word	0x40001800
 8006594:	00010007 	.word	0x00010007

08006598 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065a4:	2300      	movs	r3, #0
 80065a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d101      	bne.n	80065b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80065b2:	2302      	movs	r3, #2
 80065b4:	e0ff      	b.n	80067b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2b14      	cmp	r3, #20
 80065c2:	f200 80f0 	bhi.w	80067a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80065c6:	a201      	add	r2, pc, #4	@ (adr r2, 80065cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80065c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065cc:	08006621 	.word	0x08006621
 80065d0:	080067a7 	.word	0x080067a7
 80065d4:	080067a7 	.word	0x080067a7
 80065d8:	080067a7 	.word	0x080067a7
 80065dc:	08006661 	.word	0x08006661
 80065e0:	080067a7 	.word	0x080067a7
 80065e4:	080067a7 	.word	0x080067a7
 80065e8:	080067a7 	.word	0x080067a7
 80065ec:	080066a3 	.word	0x080066a3
 80065f0:	080067a7 	.word	0x080067a7
 80065f4:	080067a7 	.word	0x080067a7
 80065f8:	080067a7 	.word	0x080067a7
 80065fc:	080066e3 	.word	0x080066e3
 8006600:	080067a7 	.word	0x080067a7
 8006604:	080067a7 	.word	0x080067a7
 8006608:	080067a7 	.word	0x080067a7
 800660c:	08006725 	.word	0x08006725
 8006610:	080067a7 	.word	0x080067a7
 8006614:	080067a7 	.word	0x080067a7
 8006618:	080067a7 	.word	0x080067a7
 800661c:	08006765 	.word	0x08006765
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68b9      	ldr	r1, [r7, #8]
 8006626:	4618      	mov	r0, r3
 8006628:	f000 fa68 	bl	8006afc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	699a      	ldr	r2, [r3, #24]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f042 0208 	orr.w	r2, r2, #8
 800663a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	699a      	ldr	r2, [r3, #24]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f022 0204 	bic.w	r2, r2, #4
 800664a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6999      	ldr	r1, [r3, #24]
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	691a      	ldr	r2, [r3, #16]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	430a      	orrs	r2, r1
 800665c:	619a      	str	r2, [r3, #24]
      break;
 800665e:	e0a5      	b.n	80067ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68b9      	ldr	r1, [r7, #8]
 8006666:	4618      	mov	r0, r3
 8006668:	f000 fad8 	bl	8006c1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	699a      	ldr	r2, [r3, #24]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800667a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	699a      	ldr	r2, [r3, #24]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800668a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6999      	ldr	r1, [r3, #24]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	021a      	lsls	r2, r3, #8
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	430a      	orrs	r2, r1
 800669e:	619a      	str	r2, [r3, #24]
      break;
 80066a0:	e084      	b.n	80067ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68b9      	ldr	r1, [r7, #8]
 80066a8:	4618      	mov	r0, r3
 80066aa:	f000 fb41 	bl	8006d30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	69da      	ldr	r2, [r3, #28]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f042 0208 	orr.w	r2, r2, #8
 80066bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	69da      	ldr	r2, [r3, #28]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f022 0204 	bic.w	r2, r2, #4
 80066cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	69d9      	ldr	r1, [r3, #28]
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	691a      	ldr	r2, [r3, #16]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	430a      	orrs	r2, r1
 80066de:	61da      	str	r2, [r3, #28]
      break;
 80066e0:	e064      	b.n	80067ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68b9      	ldr	r1, [r7, #8]
 80066e8:	4618      	mov	r0, r3
 80066ea:	f000 fba9 	bl	8006e40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	69da      	ldr	r2, [r3, #28]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	69da      	ldr	r2, [r3, #28]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800670c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	69d9      	ldr	r1, [r3, #28]
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	021a      	lsls	r2, r3, #8
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	430a      	orrs	r2, r1
 8006720:	61da      	str	r2, [r3, #28]
      break;
 8006722:	e043      	b.n	80067ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68b9      	ldr	r1, [r7, #8]
 800672a:	4618      	mov	r0, r3
 800672c:	f000 fbf2 	bl	8006f14 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f042 0208 	orr.w	r2, r2, #8
 800673e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f022 0204 	bic.w	r2, r2, #4
 800674e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	691a      	ldr	r2, [r3, #16]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	430a      	orrs	r2, r1
 8006760:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006762:	e023      	b.n	80067ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68b9      	ldr	r1, [r7, #8]
 800676a:	4618      	mov	r0, r3
 800676c:	f000 fc36 	bl	8006fdc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800677e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800678e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	021a      	lsls	r2, r3, #8
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	430a      	orrs	r2, r1
 80067a2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80067a4:	e002      	b.n	80067ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	75fb      	strb	r3, [r7, #23]
      break;
 80067aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80067b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3718      	adds	r7, #24
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop

080067c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067ca:	2300      	movs	r3, #0
 80067cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d101      	bne.n	80067dc <HAL_TIM_ConfigClockSource+0x1c>
 80067d8:	2302      	movs	r3, #2
 80067da:	e0dc      	b.n	8006996 <HAL_TIM_ConfigClockSource+0x1d6>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2202      	movs	r2, #2
 80067e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	4b6a      	ldr	r3, [pc, #424]	@ (80069a0 <HAL_TIM_ConfigClockSource+0x1e0>)
 80067f8:	4013      	ands	r3, r2
 80067fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006802:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a64      	ldr	r2, [pc, #400]	@ (80069a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006812:	4293      	cmp	r3, r2
 8006814:	f000 80a9 	beq.w	800696a <HAL_TIM_ConfigClockSource+0x1aa>
 8006818:	4a62      	ldr	r2, [pc, #392]	@ (80069a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800681a:	4293      	cmp	r3, r2
 800681c:	f200 80ae 	bhi.w	800697c <HAL_TIM_ConfigClockSource+0x1bc>
 8006820:	4a61      	ldr	r2, [pc, #388]	@ (80069a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006822:	4293      	cmp	r3, r2
 8006824:	f000 80a1 	beq.w	800696a <HAL_TIM_ConfigClockSource+0x1aa>
 8006828:	4a5f      	ldr	r2, [pc, #380]	@ (80069a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800682a:	4293      	cmp	r3, r2
 800682c:	f200 80a6 	bhi.w	800697c <HAL_TIM_ConfigClockSource+0x1bc>
 8006830:	4a5e      	ldr	r2, [pc, #376]	@ (80069ac <HAL_TIM_ConfigClockSource+0x1ec>)
 8006832:	4293      	cmp	r3, r2
 8006834:	f000 8099 	beq.w	800696a <HAL_TIM_ConfigClockSource+0x1aa>
 8006838:	4a5c      	ldr	r2, [pc, #368]	@ (80069ac <HAL_TIM_ConfigClockSource+0x1ec>)
 800683a:	4293      	cmp	r3, r2
 800683c:	f200 809e 	bhi.w	800697c <HAL_TIM_ConfigClockSource+0x1bc>
 8006840:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006844:	f000 8091 	beq.w	800696a <HAL_TIM_ConfigClockSource+0x1aa>
 8006848:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800684c:	f200 8096 	bhi.w	800697c <HAL_TIM_ConfigClockSource+0x1bc>
 8006850:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006854:	f000 8089 	beq.w	800696a <HAL_TIM_ConfigClockSource+0x1aa>
 8006858:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800685c:	f200 808e 	bhi.w	800697c <HAL_TIM_ConfigClockSource+0x1bc>
 8006860:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006864:	d03e      	beq.n	80068e4 <HAL_TIM_ConfigClockSource+0x124>
 8006866:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800686a:	f200 8087 	bhi.w	800697c <HAL_TIM_ConfigClockSource+0x1bc>
 800686e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006872:	f000 8086 	beq.w	8006982 <HAL_TIM_ConfigClockSource+0x1c2>
 8006876:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800687a:	d87f      	bhi.n	800697c <HAL_TIM_ConfigClockSource+0x1bc>
 800687c:	2b70      	cmp	r3, #112	@ 0x70
 800687e:	d01a      	beq.n	80068b6 <HAL_TIM_ConfigClockSource+0xf6>
 8006880:	2b70      	cmp	r3, #112	@ 0x70
 8006882:	d87b      	bhi.n	800697c <HAL_TIM_ConfigClockSource+0x1bc>
 8006884:	2b60      	cmp	r3, #96	@ 0x60
 8006886:	d050      	beq.n	800692a <HAL_TIM_ConfigClockSource+0x16a>
 8006888:	2b60      	cmp	r3, #96	@ 0x60
 800688a:	d877      	bhi.n	800697c <HAL_TIM_ConfigClockSource+0x1bc>
 800688c:	2b50      	cmp	r3, #80	@ 0x50
 800688e:	d03c      	beq.n	800690a <HAL_TIM_ConfigClockSource+0x14a>
 8006890:	2b50      	cmp	r3, #80	@ 0x50
 8006892:	d873      	bhi.n	800697c <HAL_TIM_ConfigClockSource+0x1bc>
 8006894:	2b40      	cmp	r3, #64	@ 0x40
 8006896:	d058      	beq.n	800694a <HAL_TIM_ConfigClockSource+0x18a>
 8006898:	2b40      	cmp	r3, #64	@ 0x40
 800689a:	d86f      	bhi.n	800697c <HAL_TIM_ConfigClockSource+0x1bc>
 800689c:	2b30      	cmp	r3, #48	@ 0x30
 800689e:	d064      	beq.n	800696a <HAL_TIM_ConfigClockSource+0x1aa>
 80068a0:	2b30      	cmp	r3, #48	@ 0x30
 80068a2:	d86b      	bhi.n	800697c <HAL_TIM_ConfigClockSource+0x1bc>
 80068a4:	2b20      	cmp	r3, #32
 80068a6:	d060      	beq.n	800696a <HAL_TIM_ConfigClockSource+0x1aa>
 80068a8:	2b20      	cmp	r3, #32
 80068aa:	d867      	bhi.n	800697c <HAL_TIM_ConfigClockSource+0x1bc>
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d05c      	beq.n	800696a <HAL_TIM_ConfigClockSource+0x1aa>
 80068b0:	2b10      	cmp	r3, #16
 80068b2:	d05a      	beq.n	800696a <HAL_TIM_ConfigClockSource+0x1aa>
 80068b4:	e062      	b.n	800697c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068c6:	f000 fc6d 	bl	80071a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80068d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	609a      	str	r2, [r3, #8]
      break;
 80068e2:	e04f      	b.n	8006984 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068f4:	f000 fc56 	bl	80071a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	689a      	ldr	r2, [r3, #8]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006906:	609a      	str	r2, [r3, #8]
      break;
 8006908:	e03c      	b.n	8006984 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006916:	461a      	mov	r2, r3
 8006918:	f000 fbc6 	bl	80070a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2150      	movs	r1, #80	@ 0x50
 8006922:	4618      	mov	r0, r3
 8006924:	f000 fc20 	bl	8007168 <TIM_ITRx_SetConfig>
      break;
 8006928:	e02c      	b.n	8006984 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006936:	461a      	mov	r2, r3
 8006938:	f000 fbe5 	bl	8007106 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2160      	movs	r1, #96	@ 0x60
 8006942:	4618      	mov	r0, r3
 8006944:	f000 fc10 	bl	8007168 <TIM_ITRx_SetConfig>
      break;
 8006948:	e01c      	b.n	8006984 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006956:	461a      	mov	r2, r3
 8006958:	f000 fba6 	bl	80070a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2140      	movs	r1, #64	@ 0x40
 8006962:	4618      	mov	r0, r3
 8006964:	f000 fc00 	bl	8007168 <TIM_ITRx_SetConfig>
      break;
 8006968:	e00c      	b.n	8006984 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4619      	mov	r1, r3
 8006974:	4610      	mov	r0, r2
 8006976:	f000 fbf7 	bl	8007168 <TIM_ITRx_SetConfig>
      break;
 800697a:	e003      	b.n	8006984 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	73fb      	strb	r3, [r7, #15]
      break;
 8006980:	e000      	b.n	8006984 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006982:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006994:	7bfb      	ldrb	r3, [r7, #15]
}
 8006996:	4618      	mov	r0, r3
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	ffceff88 	.word	0xffceff88
 80069a4:	00100040 	.word	0x00100040
 80069a8:	00100030 	.word	0x00100030
 80069ac:	00100020 	.word	0x00100020

080069b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a46      	ldr	r2, [pc, #280]	@ (8006adc <TIM_Base_SetConfig+0x12c>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d013      	beq.n	80069f0 <TIM_Base_SetConfig+0x40>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069ce:	d00f      	beq.n	80069f0 <TIM_Base_SetConfig+0x40>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a43      	ldr	r2, [pc, #268]	@ (8006ae0 <TIM_Base_SetConfig+0x130>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d00b      	beq.n	80069f0 <TIM_Base_SetConfig+0x40>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a42      	ldr	r2, [pc, #264]	@ (8006ae4 <TIM_Base_SetConfig+0x134>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d007      	beq.n	80069f0 <TIM_Base_SetConfig+0x40>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a41      	ldr	r2, [pc, #260]	@ (8006ae8 <TIM_Base_SetConfig+0x138>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d003      	beq.n	80069f0 <TIM_Base_SetConfig+0x40>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a40      	ldr	r2, [pc, #256]	@ (8006aec <TIM_Base_SetConfig+0x13c>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d108      	bne.n	8006a02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a35      	ldr	r2, [pc, #212]	@ (8006adc <TIM_Base_SetConfig+0x12c>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d01f      	beq.n	8006a4a <TIM_Base_SetConfig+0x9a>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a10:	d01b      	beq.n	8006a4a <TIM_Base_SetConfig+0x9a>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a32      	ldr	r2, [pc, #200]	@ (8006ae0 <TIM_Base_SetConfig+0x130>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d017      	beq.n	8006a4a <TIM_Base_SetConfig+0x9a>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a31      	ldr	r2, [pc, #196]	@ (8006ae4 <TIM_Base_SetConfig+0x134>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d013      	beq.n	8006a4a <TIM_Base_SetConfig+0x9a>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a30      	ldr	r2, [pc, #192]	@ (8006ae8 <TIM_Base_SetConfig+0x138>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d00f      	beq.n	8006a4a <TIM_Base_SetConfig+0x9a>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a2f      	ldr	r2, [pc, #188]	@ (8006aec <TIM_Base_SetConfig+0x13c>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d00b      	beq.n	8006a4a <TIM_Base_SetConfig+0x9a>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a2e      	ldr	r2, [pc, #184]	@ (8006af0 <TIM_Base_SetConfig+0x140>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d007      	beq.n	8006a4a <TIM_Base_SetConfig+0x9a>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a2d      	ldr	r2, [pc, #180]	@ (8006af4 <TIM_Base_SetConfig+0x144>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d003      	beq.n	8006a4a <TIM_Base_SetConfig+0x9a>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a2c      	ldr	r2, [pc, #176]	@ (8006af8 <TIM_Base_SetConfig+0x148>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d108      	bne.n	8006a5c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	689a      	ldr	r2, [r3, #8]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a16      	ldr	r2, [pc, #88]	@ (8006adc <TIM_Base_SetConfig+0x12c>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d00f      	beq.n	8006aa8 <TIM_Base_SetConfig+0xf8>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a18      	ldr	r2, [pc, #96]	@ (8006aec <TIM_Base_SetConfig+0x13c>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d00b      	beq.n	8006aa8 <TIM_Base_SetConfig+0xf8>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a17      	ldr	r2, [pc, #92]	@ (8006af0 <TIM_Base_SetConfig+0x140>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d007      	beq.n	8006aa8 <TIM_Base_SetConfig+0xf8>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a16      	ldr	r2, [pc, #88]	@ (8006af4 <TIM_Base_SetConfig+0x144>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d003      	beq.n	8006aa8 <TIM_Base_SetConfig+0xf8>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a15      	ldr	r2, [pc, #84]	@ (8006af8 <TIM_Base_SetConfig+0x148>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d103      	bne.n	8006ab0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	691a      	ldr	r2, [r3, #16]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	f003 0301 	and.w	r3, r3, #1
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d105      	bne.n	8006ace <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	f023 0201 	bic.w	r2, r3, #1
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	611a      	str	r2, [r3, #16]
  }
}
 8006ace:	bf00      	nop
 8006ad0:	3714      	adds	r7, #20
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	40010000 	.word	0x40010000
 8006ae0:	40000400 	.word	0x40000400
 8006ae4:	40000800 	.word	0x40000800
 8006ae8:	40000c00 	.word	0x40000c00
 8006aec:	40010400 	.word	0x40010400
 8006af0:	40014000 	.word	0x40014000
 8006af4:	40014400 	.word	0x40014400
 8006af8:	40014800 	.word	0x40014800

08006afc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b087      	sub	sp, #28
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	f023 0201 	bic.w	r2, r3, #1
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	4b37      	ldr	r3, [pc, #220]	@ (8006c04 <TIM_OC1_SetConfig+0x108>)
 8006b28:	4013      	ands	r3, r2
 8006b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f023 0303 	bic.w	r3, r3, #3
 8006b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	f023 0302 	bic.w	r3, r3, #2
 8006b44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a2d      	ldr	r2, [pc, #180]	@ (8006c08 <TIM_OC1_SetConfig+0x10c>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d00f      	beq.n	8006b78 <TIM_OC1_SetConfig+0x7c>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a2c      	ldr	r2, [pc, #176]	@ (8006c0c <TIM_OC1_SetConfig+0x110>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d00b      	beq.n	8006b78 <TIM_OC1_SetConfig+0x7c>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a2b      	ldr	r2, [pc, #172]	@ (8006c10 <TIM_OC1_SetConfig+0x114>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d007      	beq.n	8006b78 <TIM_OC1_SetConfig+0x7c>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a2a      	ldr	r2, [pc, #168]	@ (8006c14 <TIM_OC1_SetConfig+0x118>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d003      	beq.n	8006b78 <TIM_OC1_SetConfig+0x7c>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a29      	ldr	r2, [pc, #164]	@ (8006c18 <TIM_OC1_SetConfig+0x11c>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d10c      	bne.n	8006b92 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	f023 0308 	bic.w	r3, r3, #8
 8006b7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	697a      	ldr	r2, [r7, #20]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f023 0304 	bic.w	r3, r3, #4
 8006b90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a1c      	ldr	r2, [pc, #112]	@ (8006c08 <TIM_OC1_SetConfig+0x10c>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d00f      	beq.n	8006bba <TIM_OC1_SetConfig+0xbe>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a1b      	ldr	r2, [pc, #108]	@ (8006c0c <TIM_OC1_SetConfig+0x110>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d00b      	beq.n	8006bba <TIM_OC1_SetConfig+0xbe>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a1a      	ldr	r2, [pc, #104]	@ (8006c10 <TIM_OC1_SetConfig+0x114>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d007      	beq.n	8006bba <TIM_OC1_SetConfig+0xbe>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a19      	ldr	r2, [pc, #100]	@ (8006c14 <TIM_OC1_SetConfig+0x118>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d003      	beq.n	8006bba <TIM_OC1_SetConfig+0xbe>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a18      	ldr	r2, [pc, #96]	@ (8006c18 <TIM_OC1_SetConfig+0x11c>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d111      	bne.n	8006bde <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	699b      	ldr	r3, [r3, #24]
 8006bd8:	693a      	ldr	r2, [r7, #16]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	685a      	ldr	r2, [r3, #4]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	621a      	str	r2, [r3, #32]
}
 8006bf8:	bf00      	nop
 8006bfa:	371c      	adds	r7, #28
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr
 8006c04:	fffeff8f 	.word	0xfffeff8f
 8006c08:	40010000 	.word	0x40010000
 8006c0c:	40010400 	.word	0x40010400
 8006c10:	40014000 	.word	0x40014000
 8006c14:	40014400 	.word	0x40014400
 8006c18:	40014800 	.word	0x40014800

08006c1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b087      	sub	sp, #28
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a1b      	ldr	r3, [r3, #32]
 8006c30:	f023 0210 	bic.w	r2, r3, #16
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	4b34      	ldr	r3, [pc, #208]	@ (8006d18 <TIM_OC2_SetConfig+0xfc>)
 8006c48:	4013      	ands	r3, r2
 8006c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	021b      	lsls	r3, r3, #8
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	f023 0320 	bic.w	r3, r3, #32
 8006c66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	011b      	lsls	r3, r3, #4
 8006c6e:	697a      	ldr	r2, [r7, #20]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a29      	ldr	r2, [pc, #164]	@ (8006d1c <TIM_OC2_SetConfig+0x100>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d003      	beq.n	8006c84 <TIM_OC2_SetConfig+0x68>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a28      	ldr	r2, [pc, #160]	@ (8006d20 <TIM_OC2_SetConfig+0x104>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d10d      	bne.n	8006ca0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	011b      	lsls	r3, r3, #4
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a1e      	ldr	r2, [pc, #120]	@ (8006d1c <TIM_OC2_SetConfig+0x100>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d00f      	beq.n	8006cc8 <TIM_OC2_SetConfig+0xac>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a1d      	ldr	r2, [pc, #116]	@ (8006d20 <TIM_OC2_SetConfig+0x104>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d00b      	beq.n	8006cc8 <TIM_OC2_SetConfig+0xac>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a1c      	ldr	r2, [pc, #112]	@ (8006d24 <TIM_OC2_SetConfig+0x108>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d007      	beq.n	8006cc8 <TIM_OC2_SetConfig+0xac>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a1b      	ldr	r2, [pc, #108]	@ (8006d28 <TIM_OC2_SetConfig+0x10c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d003      	beq.n	8006cc8 <TIM_OC2_SetConfig+0xac>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a1a      	ldr	r2, [pc, #104]	@ (8006d2c <TIM_OC2_SetConfig+0x110>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d113      	bne.n	8006cf0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006cce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	693a      	ldr	r2, [r7, #16]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	685a      	ldr	r2, [r3, #4]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	621a      	str	r2, [r3, #32]
}
 8006d0a:	bf00      	nop
 8006d0c:	371c      	adds	r7, #28
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	feff8fff 	.word	0xfeff8fff
 8006d1c:	40010000 	.word	0x40010000
 8006d20:	40010400 	.word	0x40010400
 8006d24:	40014000 	.word	0x40014000
 8006d28:	40014400 	.word	0x40014400
 8006d2c:	40014800 	.word	0x40014800

08006d30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b087      	sub	sp, #28
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a1b      	ldr	r3, [r3, #32]
 8006d44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	4b33      	ldr	r3, [pc, #204]	@ (8006e28 <TIM_OC3_SetConfig+0xf8>)
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f023 0303 	bic.w	r3, r3, #3
 8006d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	021b      	lsls	r3, r3, #8
 8006d80:	697a      	ldr	r2, [r7, #20]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a28      	ldr	r2, [pc, #160]	@ (8006e2c <TIM_OC3_SetConfig+0xfc>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d003      	beq.n	8006d96 <TIM_OC3_SetConfig+0x66>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a27      	ldr	r2, [pc, #156]	@ (8006e30 <TIM_OC3_SetConfig+0x100>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d10d      	bne.n	8006db2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	021b      	lsls	r3, r3, #8
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006db0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a1d      	ldr	r2, [pc, #116]	@ (8006e2c <TIM_OC3_SetConfig+0xfc>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d00f      	beq.n	8006dda <TIM_OC3_SetConfig+0xaa>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a1c      	ldr	r2, [pc, #112]	@ (8006e30 <TIM_OC3_SetConfig+0x100>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d00b      	beq.n	8006dda <TIM_OC3_SetConfig+0xaa>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a1b      	ldr	r2, [pc, #108]	@ (8006e34 <TIM_OC3_SetConfig+0x104>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d007      	beq.n	8006dda <TIM_OC3_SetConfig+0xaa>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a1a      	ldr	r2, [pc, #104]	@ (8006e38 <TIM_OC3_SetConfig+0x108>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d003      	beq.n	8006dda <TIM_OC3_SetConfig+0xaa>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a19      	ldr	r2, [pc, #100]	@ (8006e3c <TIM_OC3_SetConfig+0x10c>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d113      	bne.n	8006e02 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006de0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006de8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	011b      	lsls	r3, r3, #4
 8006df0:	693a      	ldr	r2, [r7, #16]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	699b      	ldr	r3, [r3, #24]
 8006dfa:	011b      	lsls	r3, r3, #4
 8006dfc:	693a      	ldr	r2, [r7, #16]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	685a      	ldr	r2, [r3, #4]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	697a      	ldr	r2, [r7, #20]
 8006e1a:	621a      	str	r2, [r3, #32]
}
 8006e1c:	bf00      	nop
 8006e1e:	371c      	adds	r7, #28
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr
 8006e28:	fffeff8f 	.word	0xfffeff8f
 8006e2c:	40010000 	.word	0x40010000
 8006e30:	40010400 	.word	0x40010400
 8006e34:	40014000 	.word	0x40014000
 8006e38:	40014400 	.word	0x40014400
 8006e3c:	40014800 	.word	0x40014800

08006e40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b087      	sub	sp, #28
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a1b      	ldr	r3, [r3, #32]
 8006e4e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a1b      	ldr	r3, [r3, #32]
 8006e54:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	69db      	ldr	r3, [r3, #28]
 8006e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	4b24      	ldr	r3, [pc, #144]	@ (8006efc <TIM_OC4_SetConfig+0xbc>)
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	021b      	lsls	r3, r3, #8
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	031b      	lsls	r3, r3, #12
 8006e92:	693a      	ldr	r2, [r7, #16]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a19      	ldr	r2, [pc, #100]	@ (8006f00 <TIM_OC4_SetConfig+0xc0>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d00f      	beq.n	8006ec0 <TIM_OC4_SetConfig+0x80>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a18      	ldr	r2, [pc, #96]	@ (8006f04 <TIM_OC4_SetConfig+0xc4>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d00b      	beq.n	8006ec0 <TIM_OC4_SetConfig+0x80>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a17      	ldr	r2, [pc, #92]	@ (8006f08 <TIM_OC4_SetConfig+0xc8>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d007      	beq.n	8006ec0 <TIM_OC4_SetConfig+0x80>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a16      	ldr	r2, [pc, #88]	@ (8006f0c <TIM_OC4_SetConfig+0xcc>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d003      	beq.n	8006ec0 <TIM_OC4_SetConfig+0x80>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a15      	ldr	r2, [pc, #84]	@ (8006f10 <TIM_OC4_SetConfig+0xd0>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d109      	bne.n	8006ed4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ec6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	695b      	ldr	r3, [r3, #20]
 8006ecc:	019b      	lsls	r3, r3, #6
 8006ece:	697a      	ldr	r2, [r7, #20]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	685a      	ldr	r2, [r3, #4]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	693a      	ldr	r2, [r7, #16]
 8006eec:	621a      	str	r2, [r3, #32]
}
 8006eee:	bf00      	nop
 8006ef0:	371c      	adds	r7, #28
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	feff8fff 	.word	0xfeff8fff
 8006f00:	40010000 	.word	0x40010000
 8006f04:	40010400 	.word	0x40010400
 8006f08:	40014000 	.word	0x40014000
 8006f0c:	40014400 	.word	0x40014400
 8006f10:	40014800 	.word	0x40014800

08006f14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b087      	sub	sp, #28
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6a1b      	ldr	r3, [r3, #32]
 8006f28:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	4b21      	ldr	r3, [pc, #132]	@ (8006fc4 <TIM_OC5_SetConfig+0xb0>)
 8006f40:	4013      	ands	r3, r2
 8006f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006f54:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	041b      	lsls	r3, r3, #16
 8006f5c:	693a      	ldr	r2, [r7, #16]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a18      	ldr	r2, [pc, #96]	@ (8006fc8 <TIM_OC5_SetConfig+0xb4>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d00f      	beq.n	8006f8a <TIM_OC5_SetConfig+0x76>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a17      	ldr	r2, [pc, #92]	@ (8006fcc <TIM_OC5_SetConfig+0xb8>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d00b      	beq.n	8006f8a <TIM_OC5_SetConfig+0x76>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a16      	ldr	r2, [pc, #88]	@ (8006fd0 <TIM_OC5_SetConfig+0xbc>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d007      	beq.n	8006f8a <TIM_OC5_SetConfig+0x76>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a15      	ldr	r2, [pc, #84]	@ (8006fd4 <TIM_OC5_SetConfig+0xc0>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d003      	beq.n	8006f8a <TIM_OC5_SetConfig+0x76>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a14      	ldr	r2, [pc, #80]	@ (8006fd8 <TIM_OC5_SetConfig+0xc4>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d109      	bne.n	8006f9e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	695b      	ldr	r3, [r3, #20]
 8006f96:	021b      	lsls	r3, r3, #8
 8006f98:	697a      	ldr	r2, [r7, #20]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	697a      	ldr	r2, [r7, #20]
 8006fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	685a      	ldr	r2, [r3, #4]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	621a      	str	r2, [r3, #32]
}
 8006fb8:	bf00      	nop
 8006fba:	371c      	adds	r7, #28
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr
 8006fc4:	fffeff8f 	.word	0xfffeff8f
 8006fc8:	40010000 	.word	0x40010000
 8006fcc:	40010400 	.word	0x40010400
 8006fd0:	40014000 	.word	0x40014000
 8006fd4:	40014400 	.word	0x40014400
 8006fd8:	40014800 	.word	0x40014800

08006fdc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b087      	sub	sp, #28
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6a1b      	ldr	r3, [r3, #32]
 8006ff0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	4b22      	ldr	r3, [pc, #136]	@ (8007090 <TIM_OC6_SetConfig+0xb4>)
 8007008:	4013      	ands	r3, r2
 800700a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	021b      	lsls	r3, r3, #8
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	4313      	orrs	r3, r2
 8007016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800701e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	051b      	lsls	r3, r3, #20
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	4313      	orrs	r3, r2
 800702a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a19      	ldr	r2, [pc, #100]	@ (8007094 <TIM_OC6_SetConfig+0xb8>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d00f      	beq.n	8007054 <TIM_OC6_SetConfig+0x78>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a18      	ldr	r2, [pc, #96]	@ (8007098 <TIM_OC6_SetConfig+0xbc>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d00b      	beq.n	8007054 <TIM_OC6_SetConfig+0x78>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a17      	ldr	r2, [pc, #92]	@ (800709c <TIM_OC6_SetConfig+0xc0>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d007      	beq.n	8007054 <TIM_OC6_SetConfig+0x78>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a16      	ldr	r2, [pc, #88]	@ (80070a0 <TIM_OC6_SetConfig+0xc4>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d003      	beq.n	8007054 <TIM_OC6_SetConfig+0x78>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a15      	ldr	r2, [pc, #84]	@ (80070a4 <TIM_OC6_SetConfig+0xc8>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d109      	bne.n	8007068 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800705a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	695b      	ldr	r3, [r3, #20]
 8007060:	029b      	lsls	r3, r3, #10
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	4313      	orrs	r3, r2
 8007066:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	685a      	ldr	r2, [r3, #4]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	621a      	str	r2, [r3, #32]
}
 8007082:	bf00      	nop
 8007084:	371c      	adds	r7, #28
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	feff8fff 	.word	0xfeff8fff
 8007094:	40010000 	.word	0x40010000
 8007098:	40010400 	.word	0x40010400
 800709c:	40014000 	.word	0x40014000
 80070a0:	40014400 	.word	0x40014400
 80070a4:	40014800 	.word	0x40014800

080070a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b087      	sub	sp, #28
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6a1b      	ldr	r3, [r3, #32]
 80070b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	f023 0201 	bic.w	r2, r3, #1
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	699b      	ldr	r3, [r3, #24]
 80070ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80070d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	011b      	lsls	r3, r3, #4
 80070d8:	693a      	ldr	r2, [r7, #16]
 80070da:	4313      	orrs	r3, r2
 80070dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f023 030a 	bic.w	r3, r3, #10
 80070e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070e6:	697a      	ldr	r2, [r7, #20]
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	697a      	ldr	r2, [r7, #20]
 80070f8:	621a      	str	r2, [r3, #32]
}
 80070fa:	bf00      	nop
 80070fc:	371c      	adds	r7, #28
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007106:	b480      	push	{r7}
 8007108:	b087      	sub	sp, #28
 800710a:	af00      	add	r7, sp, #0
 800710c:	60f8      	str	r0, [r7, #12]
 800710e:	60b9      	str	r1, [r7, #8]
 8007110:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6a1b      	ldr	r3, [r3, #32]
 800711c:	f023 0210 	bic.w	r2, r3, #16
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007130:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	031b      	lsls	r3, r3, #12
 8007136:	693a      	ldr	r2, [r7, #16]
 8007138:	4313      	orrs	r3, r2
 800713a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007142:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	011b      	lsls	r3, r3, #4
 8007148:	697a      	ldr	r2, [r7, #20]
 800714a:	4313      	orrs	r3, r2
 800714c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	693a      	ldr	r2, [r7, #16]
 8007152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	621a      	str	r2, [r3, #32]
}
 800715a:	bf00      	nop
 800715c:	371c      	adds	r7, #28
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
	...

08007168 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	4b09      	ldr	r3, [pc, #36]	@ (80071a0 <TIM_ITRx_SetConfig+0x38>)
 800717c:	4013      	ands	r3, r2
 800717e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007180:	683a      	ldr	r2, [r7, #0]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	4313      	orrs	r3, r2
 8007186:	f043 0307 	orr.w	r3, r3, #7
 800718a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	609a      	str	r2, [r3, #8]
}
 8007192:	bf00      	nop
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	ffcfff8f 	.word	0xffcfff8f

080071a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b087      	sub	sp, #28
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
 80071b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80071be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	021a      	lsls	r2, r3, #8
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	431a      	orrs	r2, r3
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	697a      	ldr	r2, [r7, #20]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	609a      	str	r2, [r3, #8]
}
 80071d8:	bf00      	nop
 80071da:	371c      	adds	r7, #28
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b087      	sub	sp, #28
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	f003 031f 	and.w	r3, r3, #31
 80071f6:	2201      	movs	r2, #1
 80071f8:	fa02 f303 	lsl.w	r3, r2, r3
 80071fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6a1a      	ldr	r2, [r3, #32]
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	43db      	mvns	r3, r3
 8007206:	401a      	ands	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6a1a      	ldr	r2, [r3, #32]
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	f003 031f 	and.w	r3, r3, #31
 8007216:	6879      	ldr	r1, [r7, #4]
 8007218:	fa01 f303 	lsl.w	r3, r1, r3
 800721c:	431a      	orrs	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	621a      	str	r2, [r3, #32]
}
 8007222:	bf00      	nop
 8007224:	371c      	adds	r7, #28
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr
	...

08007230 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007240:	2b01      	cmp	r3, #1
 8007242:	d101      	bne.n	8007248 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007244:	2302      	movs	r3, #2
 8007246:	e06d      	b.n	8007324 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2202      	movs	r2, #2
 8007254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a30      	ldr	r2, [pc, #192]	@ (8007330 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d004      	beq.n	800727c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a2f      	ldr	r2, [pc, #188]	@ (8007334 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d108      	bne.n	800728e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007282:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	4313      	orrs	r3, r2
 800728c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007294:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	4313      	orrs	r3, r2
 800729e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a20      	ldr	r2, [pc, #128]	@ (8007330 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d022      	beq.n	80072f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072ba:	d01d      	beq.n	80072f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a1d      	ldr	r2, [pc, #116]	@ (8007338 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d018      	beq.n	80072f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a1c      	ldr	r2, [pc, #112]	@ (800733c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d013      	beq.n	80072f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a1a      	ldr	r2, [pc, #104]	@ (8007340 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d00e      	beq.n	80072f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a15      	ldr	r2, [pc, #84]	@ (8007334 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d009      	beq.n	80072f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a16      	ldr	r2, [pc, #88]	@ (8007344 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d004      	beq.n	80072f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a15      	ldr	r2, [pc, #84]	@ (8007348 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d10c      	bne.n	8007312 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	68ba      	ldr	r2, [r7, #8]
 8007306:	4313      	orrs	r3, r2
 8007308:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68ba      	ldr	r2, [r7, #8]
 8007310:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2201      	movs	r2, #1
 8007316:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3714      	adds	r7, #20
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr
 8007330:	40010000 	.word	0x40010000
 8007334:	40010400 	.word	0x40010400
 8007338:	40000400 	.word	0x40000400
 800733c:	40000800 	.word	0x40000800
 8007340:	40000c00 	.word	0x40000c00
 8007344:	40001800 	.word	0x40001800
 8007348:	40014000 	.word	0x40014000

0800734c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d101      	bne.n	800735e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e042      	b.n	80073e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007364:	2b00      	cmp	r3, #0
 8007366:	d106      	bne.n	8007376 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f7fa fa63 	bl	800183c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2224      	movs	r2, #36	@ 0x24
 800737a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f022 0201 	bic.w	r2, r2, #1
 800738c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007392:	2b00      	cmp	r3, #0
 8007394:	d002      	beq.n	800739c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f001 fa44 	bl	8008824 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 fcd9 	bl	8007d54 <UART_SetConfig>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d101      	bne.n	80073ac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e01b      	b.n	80073e4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	685a      	ldr	r2, [r3, #4]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80073ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	689a      	ldr	r2, [r3, #8]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80073ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f042 0201 	orr.w	r2, r2, #1
 80073da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f001 fac3 	bl	8008968 <UART_CheckIdleState>
 80073e2:	4603      	mov	r3, r0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3708      	adds	r7, #8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b08a      	sub	sp, #40	@ 0x28
 80073f0:	af02      	add	r7, sp, #8
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	603b      	str	r3, [r7, #0]
 80073f8:	4613      	mov	r3, r2
 80073fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007402:	2b20      	cmp	r3, #32
 8007404:	d17b      	bne.n	80074fe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d002      	beq.n	8007412 <HAL_UART_Transmit+0x26>
 800740c:	88fb      	ldrh	r3, [r7, #6]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d101      	bne.n	8007416 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e074      	b.n	8007500 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2221      	movs	r2, #33	@ 0x21
 8007422:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007426:	f7fa fb2b 	bl	8001a80 <HAL_GetTick>
 800742a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	88fa      	ldrh	r2, [r7, #6]
 8007430:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	88fa      	ldrh	r2, [r7, #6]
 8007438:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007444:	d108      	bne.n	8007458 <HAL_UART_Transmit+0x6c>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d104      	bne.n	8007458 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800744e:	2300      	movs	r3, #0
 8007450:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	61bb      	str	r3, [r7, #24]
 8007456:	e003      	b.n	8007460 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800745c:	2300      	movs	r3, #0
 800745e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007460:	e030      	b.n	80074c4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	2200      	movs	r2, #0
 800746a:	2180      	movs	r1, #128	@ 0x80
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f001 fb25 	bl	8008abc <UART_WaitOnFlagUntilTimeout>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d005      	beq.n	8007484 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2220      	movs	r2, #32
 800747c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	e03d      	b.n	8007500 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10b      	bne.n	80074a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	881b      	ldrh	r3, [r3, #0]
 800748e:	461a      	mov	r2, r3
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007498:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	3302      	adds	r3, #2
 800749e:	61bb      	str	r3, [r7, #24]
 80074a0:	e007      	b.n	80074b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	781a      	ldrb	r2, [r3, #0]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	3301      	adds	r3, #1
 80074b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	3b01      	subs	r3, #1
 80074bc:	b29a      	uxth	r2, r3
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d1c8      	bne.n	8007462 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	9300      	str	r3, [sp, #0]
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	2200      	movs	r2, #0
 80074d8:	2140      	movs	r1, #64	@ 0x40
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f001 faee 	bl	8008abc <UART_WaitOnFlagUntilTimeout>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d005      	beq.n	80074f2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2220      	movs	r2, #32
 80074ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e006      	b.n	8007500 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2220      	movs	r2, #32
 80074f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80074fa:	2300      	movs	r3, #0
 80074fc:	e000      	b.n	8007500 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80074fe:	2302      	movs	r3, #2
  }
}
 8007500:	4618      	mov	r0, r3
 8007502:	3720      	adds	r7, #32
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b08a      	sub	sp, #40	@ 0x28
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	4613      	mov	r3, r2
 8007514:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800751c:	2b20      	cmp	r3, #32
 800751e:	d137      	bne.n	8007590 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d002      	beq.n	800752c <HAL_UART_Receive_IT+0x24>
 8007526:	88fb      	ldrh	r3, [r7, #6]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d101      	bne.n	8007530 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e030      	b.n	8007592 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a18      	ldr	r2, [pc, #96]	@ (800759c <HAL_UART_Receive_IT+0x94>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d01f      	beq.n	8007580 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800754a:	2b00      	cmp	r3, #0
 800754c:	d018      	beq.n	8007580 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	e853 3f00 	ldrex	r3, [r3]
 800755a:	613b      	str	r3, [r7, #16]
   return(result);
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007562:	627b      	str	r3, [r7, #36]	@ 0x24
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	461a      	mov	r2, r3
 800756a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800756c:	623b      	str	r3, [r7, #32]
 800756e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007570:	69f9      	ldr	r1, [r7, #28]
 8007572:	6a3a      	ldr	r2, [r7, #32]
 8007574:	e841 2300 	strex	r3, r2, [r1]
 8007578:	61bb      	str	r3, [r7, #24]
   return(result);
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1e6      	bne.n	800754e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007580:	88fb      	ldrh	r3, [r7, #6]
 8007582:	461a      	mov	r2, r3
 8007584:	68b9      	ldr	r1, [r7, #8]
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f001 fb06 	bl	8008b98 <UART_Start_Receive_IT>
 800758c:	4603      	mov	r3, r0
 800758e:	e000      	b.n	8007592 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007590:	2302      	movs	r3, #2
  }
}
 8007592:	4618      	mov	r0, r3
 8007594:	3728      	adds	r7, #40	@ 0x28
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	58000c00 	.word	0x58000c00

080075a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b0ba      	sub	sp, #232	@ 0xe8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	69db      	ldr	r3, [r3, #28]
 80075ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80075c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80075ca:	f640 030f 	movw	r3, #2063	@ 0x80f
 80075ce:	4013      	ands	r3, r2
 80075d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80075d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d11b      	bne.n	8007614 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80075dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075e0:	f003 0320 	and.w	r3, r3, #32
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d015      	beq.n	8007614 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80075e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075ec:	f003 0320 	and.w	r3, r3, #32
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d105      	bne.n	8007600 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80075f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d009      	beq.n	8007614 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007604:	2b00      	cmp	r3, #0
 8007606:	f000 8377 	beq.w	8007cf8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	4798      	blx	r3
      }
      return;
 8007612:	e371      	b.n	8007cf8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007614:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007618:	2b00      	cmp	r3, #0
 800761a:	f000 8123 	beq.w	8007864 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800761e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007622:	4b8d      	ldr	r3, [pc, #564]	@ (8007858 <HAL_UART_IRQHandler+0x2b8>)
 8007624:	4013      	ands	r3, r2
 8007626:	2b00      	cmp	r3, #0
 8007628:	d106      	bne.n	8007638 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800762a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800762e:	4b8b      	ldr	r3, [pc, #556]	@ (800785c <HAL_UART_IRQHandler+0x2bc>)
 8007630:	4013      	ands	r3, r2
 8007632:	2b00      	cmp	r3, #0
 8007634:	f000 8116 	beq.w	8007864 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	2b00      	cmp	r3, #0
 8007642:	d011      	beq.n	8007668 <HAL_UART_IRQHandler+0xc8>
 8007644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00b      	beq.n	8007668 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2201      	movs	r2, #1
 8007656:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800765e:	f043 0201 	orr.w	r2, r3, #1
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800766c:	f003 0302 	and.w	r3, r3, #2
 8007670:	2b00      	cmp	r3, #0
 8007672:	d011      	beq.n	8007698 <HAL_UART_IRQHandler+0xf8>
 8007674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007678:	f003 0301 	and.w	r3, r3, #1
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00b      	beq.n	8007698 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2202      	movs	r2, #2
 8007686:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800768e:	f043 0204 	orr.w	r2, r3, #4
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800769c:	f003 0304 	and.w	r3, r3, #4
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d011      	beq.n	80076c8 <HAL_UART_IRQHandler+0x128>
 80076a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076a8:	f003 0301 	and.w	r3, r3, #1
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00b      	beq.n	80076c8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2204      	movs	r2, #4
 80076b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076be:	f043 0202 	orr.w	r2, r3, #2
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80076c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076cc:	f003 0308 	and.w	r3, r3, #8
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d017      	beq.n	8007704 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80076d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076d8:	f003 0320 	and.w	r3, r3, #32
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d105      	bne.n	80076ec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80076e0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80076e4:	4b5c      	ldr	r3, [pc, #368]	@ (8007858 <HAL_UART_IRQHandler+0x2b8>)
 80076e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00b      	beq.n	8007704 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2208      	movs	r2, #8
 80076f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076fa:	f043 0208 	orr.w	r2, r3, #8
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007708:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800770c:	2b00      	cmp	r3, #0
 800770e:	d012      	beq.n	8007736 <HAL_UART_IRQHandler+0x196>
 8007710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007714:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00c      	beq.n	8007736 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007724:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800772c:	f043 0220 	orr.w	r2, r3, #32
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800773c:	2b00      	cmp	r3, #0
 800773e:	f000 82dd 	beq.w	8007cfc <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007746:	f003 0320 	and.w	r3, r3, #32
 800774a:	2b00      	cmp	r3, #0
 800774c:	d013      	beq.n	8007776 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800774e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007752:	f003 0320 	and.w	r3, r3, #32
 8007756:	2b00      	cmp	r3, #0
 8007758:	d105      	bne.n	8007766 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800775a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800775e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007762:	2b00      	cmp	r3, #0
 8007764:	d007      	beq.n	8007776 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800776a:	2b00      	cmp	r3, #0
 800776c:	d003      	beq.n	8007776 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800777c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800778a:	2b40      	cmp	r3, #64	@ 0x40
 800778c:	d005      	beq.n	800779a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800778e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007792:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007796:	2b00      	cmp	r3, #0
 8007798:	d054      	beq.n	8007844 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f001 fb1e 	bl	8008ddc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077aa:	2b40      	cmp	r3, #64	@ 0x40
 80077ac:	d146      	bne.n	800783c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	3308      	adds	r3, #8
 80077b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80077bc:	e853 3f00 	ldrex	r3, [r3]
 80077c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80077c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80077c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	3308      	adds	r3, #8
 80077d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80077da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80077de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80077e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80077ea:	e841 2300 	strex	r3, r2, [r1]
 80077ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80077f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1d9      	bne.n	80077ae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007800:	2b00      	cmp	r3, #0
 8007802:	d017      	beq.n	8007834 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800780a:	4a15      	ldr	r2, [pc, #84]	@ (8007860 <HAL_UART_IRQHandler+0x2c0>)
 800780c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007814:	4618      	mov	r0, r3
 8007816:	f7fa fd9d 	bl	8002354 <HAL_DMA_Abort_IT>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d019      	beq.n	8007854 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800782e:	4610      	mov	r0, r2
 8007830:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007832:	e00f      	b.n	8007854 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fa77 	bl	8007d28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800783a:	e00b      	b.n	8007854 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fa73 	bl	8007d28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007842:	e007      	b.n	8007854 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fa6f 	bl	8007d28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007852:	e253      	b.n	8007cfc <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007854:	bf00      	nop
    return;
 8007856:	e251      	b.n	8007cfc <HAL_UART_IRQHandler+0x75c>
 8007858:	10000001 	.word	0x10000001
 800785c:	04000120 	.word	0x04000120
 8007860:	08008ea9 	.word	0x08008ea9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007868:	2b01      	cmp	r3, #1
 800786a:	f040 81e7 	bne.w	8007c3c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800786e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007872:	f003 0310 	and.w	r3, r3, #16
 8007876:	2b00      	cmp	r3, #0
 8007878:	f000 81e0 	beq.w	8007c3c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800787c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007880:	f003 0310 	and.w	r3, r3, #16
 8007884:	2b00      	cmp	r3, #0
 8007886:	f000 81d9 	beq.w	8007c3c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2210      	movs	r2, #16
 8007890:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800789c:	2b40      	cmp	r3, #64	@ 0x40
 800789e:	f040 8151 	bne.w	8007b44 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a96      	ldr	r2, [pc, #600]	@ (8007b04 <HAL_UART_IRQHandler+0x564>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d068      	beq.n	8007982 <HAL_UART_IRQHandler+0x3e2>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a93      	ldr	r2, [pc, #588]	@ (8007b08 <HAL_UART_IRQHandler+0x568>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d061      	beq.n	8007982 <HAL_UART_IRQHandler+0x3e2>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a91      	ldr	r2, [pc, #580]	@ (8007b0c <HAL_UART_IRQHandler+0x56c>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d05a      	beq.n	8007982 <HAL_UART_IRQHandler+0x3e2>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a8e      	ldr	r2, [pc, #568]	@ (8007b10 <HAL_UART_IRQHandler+0x570>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d053      	beq.n	8007982 <HAL_UART_IRQHandler+0x3e2>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a8c      	ldr	r2, [pc, #560]	@ (8007b14 <HAL_UART_IRQHandler+0x574>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d04c      	beq.n	8007982 <HAL_UART_IRQHandler+0x3e2>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a89      	ldr	r2, [pc, #548]	@ (8007b18 <HAL_UART_IRQHandler+0x578>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d045      	beq.n	8007982 <HAL_UART_IRQHandler+0x3e2>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a87      	ldr	r2, [pc, #540]	@ (8007b1c <HAL_UART_IRQHandler+0x57c>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d03e      	beq.n	8007982 <HAL_UART_IRQHandler+0x3e2>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a84      	ldr	r2, [pc, #528]	@ (8007b20 <HAL_UART_IRQHandler+0x580>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d037      	beq.n	8007982 <HAL_UART_IRQHandler+0x3e2>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a82      	ldr	r2, [pc, #520]	@ (8007b24 <HAL_UART_IRQHandler+0x584>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d030      	beq.n	8007982 <HAL_UART_IRQHandler+0x3e2>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a7f      	ldr	r2, [pc, #508]	@ (8007b28 <HAL_UART_IRQHandler+0x588>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d029      	beq.n	8007982 <HAL_UART_IRQHandler+0x3e2>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a7d      	ldr	r2, [pc, #500]	@ (8007b2c <HAL_UART_IRQHandler+0x58c>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d022      	beq.n	8007982 <HAL_UART_IRQHandler+0x3e2>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a7a      	ldr	r2, [pc, #488]	@ (8007b30 <HAL_UART_IRQHandler+0x590>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d01b      	beq.n	8007982 <HAL_UART_IRQHandler+0x3e2>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a78      	ldr	r2, [pc, #480]	@ (8007b34 <HAL_UART_IRQHandler+0x594>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d014      	beq.n	8007982 <HAL_UART_IRQHandler+0x3e2>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a75      	ldr	r2, [pc, #468]	@ (8007b38 <HAL_UART_IRQHandler+0x598>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d00d      	beq.n	8007982 <HAL_UART_IRQHandler+0x3e2>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a73      	ldr	r2, [pc, #460]	@ (8007b3c <HAL_UART_IRQHandler+0x59c>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d006      	beq.n	8007982 <HAL_UART_IRQHandler+0x3e2>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a70      	ldr	r2, [pc, #448]	@ (8007b40 <HAL_UART_IRQHandler+0x5a0>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d106      	bne.n	8007990 <HAL_UART_IRQHandler+0x3f0>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	b29b      	uxth	r3, r3
 800798e:	e005      	b.n	800799c <HAL_UART_IRQHandler+0x3fc>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	b29b      	uxth	r3, r3
 800799c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80079a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f000 81ab 	beq.w	8007d00 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80079b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80079b4:	429a      	cmp	r2, r3
 80079b6:	f080 81a3 	bcs.w	8007d00 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80079c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079ca:	69db      	ldr	r3, [r3, #28]
 80079cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079d0:	f000 8087 	beq.w	8007ae2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80079e0:	e853 3f00 	ldrex	r3, [r3]
 80079e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80079e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80079ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	461a      	mov	r2, r3
 80079fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80079fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007a02:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a06:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007a0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007a0e:	e841 2300 	strex	r3, r2, [r1]
 8007a12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007a16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1da      	bne.n	80079d4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	3308      	adds	r3, #8
 8007a24:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a28:	e853 3f00 	ldrex	r3, [r3]
 8007a2c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007a2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a30:	f023 0301 	bic.w	r3, r3, #1
 8007a34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	3308      	adds	r3, #8
 8007a3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007a42:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007a46:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a48:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007a4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007a4e:	e841 2300 	strex	r3, r2, [r1]
 8007a52:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007a54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1e1      	bne.n	8007a1e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	3308      	adds	r3, #8
 8007a60:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a64:	e853 3f00 	ldrex	r3, [r3]
 8007a68:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007a6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	3308      	adds	r3, #8
 8007a7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007a7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007a80:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a82:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007a84:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007a86:	e841 2300 	strex	r3, r2, [r1]
 8007a8a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007a8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d1e3      	bne.n	8007a5a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2220      	movs	r2, #32
 8007a96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007aa8:	e853 3f00 	ldrex	r3, [r3]
 8007aac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007aae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ab0:	f023 0310 	bic.w	r3, r3, #16
 8007ab4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	461a      	mov	r2, r3
 8007abe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ac2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ac4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ac8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007aca:	e841 2300 	strex	r3, r2, [r1]
 8007ace:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ad0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1e4      	bne.n	8007aa0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7fa f91b 	bl	8001d18 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2202      	movs	r2, #2
 8007ae6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	1ad3      	subs	r3, r2, r3
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	4619      	mov	r1, r3
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 f91d 	bl	8007d3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b02:	e0fd      	b.n	8007d00 <HAL_UART_IRQHandler+0x760>
 8007b04:	40020010 	.word	0x40020010
 8007b08:	40020028 	.word	0x40020028
 8007b0c:	40020040 	.word	0x40020040
 8007b10:	40020058 	.word	0x40020058
 8007b14:	40020070 	.word	0x40020070
 8007b18:	40020088 	.word	0x40020088
 8007b1c:	400200a0 	.word	0x400200a0
 8007b20:	400200b8 	.word	0x400200b8
 8007b24:	40020410 	.word	0x40020410
 8007b28:	40020428 	.word	0x40020428
 8007b2c:	40020440 	.word	0x40020440
 8007b30:	40020458 	.word	0x40020458
 8007b34:	40020470 	.word	0x40020470
 8007b38:	40020488 	.word	0x40020488
 8007b3c:	400204a0 	.word	0x400204a0
 8007b40:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f000 80cf 	beq.w	8007d04 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8007b66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f000 80ca 	beq.w	8007d04 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b78:	e853 3f00 	ldrex	r3, [r3]
 8007b7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007b92:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b94:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b96:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b9a:	e841 2300 	strex	r3, r2, [r1]
 8007b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ba0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d1e4      	bne.n	8007b70 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	3308      	adds	r3, #8
 8007bac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb0:	e853 3f00 	ldrex	r3, [r3]
 8007bb4:	623b      	str	r3, [r7, #32]
   return(result);
 8007bb6:	6a3a      	ldr	r2, [r7, #32]
 8007bb8:	4b55      	ldr	r3, [pc, #340]	@ (8007d10 <HAL_UART_IRQHandler+0x770>)
 8007bba:	4013      	ands	r3, r2
 8007bbc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	3308      	adds	r3, #8
 8007bc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007bca:	633a      	str	r2, [r7, #48]	@ 0x30
 8007bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bd2:	e841 2300 	strex	r3, r2, [r1]
 8007bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d1e3      	bne.n	8007ba6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2220      	movs	r2, #32
 8007be2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	e853 3f00 	ldrex	r3, [r3]
 8007bfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f023 0310 	bic.w	r3, r3, #16
 8007c06:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	461a      	mov	r2, r3
 8007c10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007c14:	61fb      	str	r3, [r7, #28]
 8007c16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c18:	69b9      	ldr	r1, [r7, #24]
 8007c1a:	69fa      	ldr	r2, [r7, #28]
 8007c1c:	e841 2300 	strex	r3, r2, [r1]
 8007c20:	617b      	str	r3, [r7, #20]
   return(result);
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d1e4      	bne.n	8007bf2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c32:	4619      	mov	r1, r3
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 f881 	bl	8007d3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c3a:	e063      	b.n	8007d04 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00e      	beq.n	8007c66 <HAL_UART_IRQHandler+0x6c6>
 8007c48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d008      	beq.n	8007c66 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007c5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f001 fe80 	bl	8009964 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c64:	e051      	b.n	8007d0a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d014      	beq.n	8007c9c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007c72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d105      	bne.n	8007c8a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007c7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d008      	beq.n	8007c9c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d03a      	beq.n	8007d08 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	4798      	blx	r3
    }
    return;
 8007c9a:	e035      	b.n	8007d08 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d009      	beq.n	8007cbc <HAL_UART_IRQHandler+0x71c>
 8007ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d003      	beq.n	8007cbc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f001 f90d 	bl	8008ed4 <UART_EndTransmit_IT>
    return;
 8007cba:	e026      	b.n	8007d0a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cc0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d009      	beq.n	8007cdc <HAL_UART_IRQHandler+0x73c>
 8007cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ccc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d003      	beq.n	8007cdc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f001 fe59 	bl	800998c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007cda:	e016      	b.n	8007d0a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ce0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d010      	beq.n	8007d0a <HAL_UART_IRQHandler+0x76a>
 8007ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	da0c      	bge.n	8007d0a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f001 fe41 	bl	8009978 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007cf6:	e008      	b.n	8007d0a <HAL_UART_IRQHandler+0x76a>
      return;
 8007cf8:	bf00      	nop
 8007cfa:	e006      	b.n	8007d0a <HAL_UART_IRQHandler+0x76a>
    return;
 8007cfc:	bf00      	nop
 8007cfe:	e004      	b.n	8007d0a <HAL_UART_IRQHandler+0x76a>
      return;
 8007d00:	bf00      	nop
 8007d02:	e002      	b.n	8007d0a <HAL_UART_IRQHandler+0x76a>
      return;
 8007d04:	bf00      	nop
 8007d06:	e000      	b.n	8007d0a <HAL_UART_IRQHandler+0x76a>
    return;
 8007d08:	bf00      	nop
  }
}
 8007d0a:	37e8      	adds	r7, #232	@ 0xe8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	effffffe 	.word	0xeffffffe

08007d14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007d1c:	bf00      	nop
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007d30:	bf00      	nop
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	460b      	mov	r3, r1
 8007d46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d48:	bf00      	nop
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d58:	b092      	sub	sp, #72	@ 0x48
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	689a      	ldr	r2, [r3, #8]
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	431a      	orrs	r2, r3
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	695b      	ldr	r3, [r3, #20]
 8007d72:	431a      	orrs	r2, r3
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	69db      	ldr	r3, [r3, #28]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	4bbe      	ldr	r3, [pc, #760]	@ (800807c <UART_SetConfig+0x328>)
 8007d84:	4013      	ands	r3, r2
 8007d86:	697a      	ldr	r2, [r7, #20]
 8007d88:	6812      	ldr	r2, [r2, #0]
 8007d8a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007d8c:	430b      	orrs	r3, r1
 8007d8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	68da      	ldr	r2, [r3, #12]
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	430a      	orrs	r2, r1
 8007da4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	699b      	ldr	r3, [r3, #24]
 8007daa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4ab3      	ldr	r2, [pc, #716]	@ (8008080 <UART_SetConfig+0x32c>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d004      	beq.n	8007dc0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	6a1b      	ldr	r3, [r3, #32]
 8007dba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	689a      	ldr	r2, [r3, #8]
 8007dc6:	4baf      	ldr	r3, [pc, #700]	@ (8008084 <UART_SetConfig+0x330>)
 8007dc8:	4013      	ands	r3, r2
 8007dca:	697a      	ldr	r2, [r7, #20]
 8007dcc:	6812      	ldr	r2, [r2, #0]
 8007dce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007dd0:	430b      	orrs	r3, r1
 8007dd2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dda:	f023 010f 	bic.w	r1, r3, #15
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	430a      	orrs	r2, r1
 8007de8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4aa6      	ldr	r2, [pc, #664]	@ (8008088 <UART_SetConfig+0x334>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d177      	bne.n	8007ee4 <UART_SetConfig+0x190>
 8007df4:	4ba5      	ldr	r3, [pc, #660]	@ (800808c <UART_SetConfig+0x338>)
 8007df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007df8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007dfc:	2b28      	cmp	r3, #40	@ 0x28
 8007dfe:	d86d      	bhi.n	8007edc <UART_SetConfig+0x188>
 8007e00:	a201      	add	r2, pc, #4	@ (adr r2, 8007e08 <UART_SetConfig+0xb4>)
 8007e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e06:	bf00      	nop
 8007e08:	08007ead 	.word	0x08007ead
 8007e0c:	08007edd 	.word	0x08007edd
 8007e10:	08007edd 	.word	0x08007edd
 8007e14:	08007edd 	.word	0x08007edd
 8007e18:	08007edd 	.word	0x08007edd
 8007e1c:	08007edd 	.word	0x08007edd
 8007e20:	08007edd 	.word	0x08007edd
 8007e24:	08007edd 	.word	0x08007edd
 8007e28:	08007eb5 	.word	0x08007eb5
 8007e2c:	08007edd 	.word	0x08007edd
 8007e30:	08007edd 	.word	0x08007edd
 8007e34:	08007edd 	.word	0x08007edd
 8007e38:	08007edd 	.word	0x08007edd
 8007e3c:	08007edd 	.word	0x08007edd
 8007e40:	08007edd 	.word	0x08007edd
 8007e44:	08007edd 	.word	0x08007edd
 8007e48:	08007ebd 	.word	0x08007ebd
 8007e4c:	08007edd 	.word	0x08007edd
 8007e50:	08007edd 	.word	0x08007edd
 8007e54:	08007edd 	.word	0x08007edd
 8007e58:	08007edd 	.word	0x08007edd
 8007e5c:	08007edd 	.word	0x08007edd
 8007e60:	08007edd 	.word	0x08007edd
 8007e64:	08007edd 	.word	0x08007edd
 8007e68:	08007ec5 	.word	0x08007ec5
 8007e6c:	08007edd 	.word	0x08007edd
 8007e70:	08007edd 	.word	0x08007edd
 8007e74:	08007edd 	.word	0x08007edd
 8007e78:	08007edd 	.word	0x08007edd
 8007e7c:	08007edd 	.word	0x08007edd
 8007e80:	08007edd 	.word	0x08007edd
 8007e84:	08007edd 	.word	0x08007edd
 8007e88:	08007ecd 	.word	0x08007ecd
 8007e8c:	08007edd 	.word	0x08007edd
 8007e90:	08007edd 	.word	0x08007edd
 8007e94:	08007edd 	.word	0x08007edd
 8007e98:	08007edd 	.word	0x08007edd
 8007e9c:	08007edd 	.word	0x08007edd
 8007ea0:	08007edd 	.word	0x08007edd
 8007ea4:	08007edd 	.word	0x08007edd
 8007ea8:	08007ed5 	.word	0x08007ed5
 8007eac:	2301      	movs	r3, #1
 8007eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eb2:	e222      	b.n	80082fa <UART_SetConfig+0x5a6>
 8007eb4:	2304      	movs	r3, #4
 8007eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eba:	e21e      	b.n	80082fa <UART_SetConfig+0x5a6>
 8007ebc:	2308      	movs	r3, #8
 8007ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ec2:	e21a      	b.n	80082fa <UART_SetConfig+0x5a6>
 8007ec4:	2310      	movs	r3, #16
 8007ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eca:	e216      	b.n	80082fa <UART_SetConfig+0x5a6>
 8007ecc:	2320      	movs	r3, #32
 8007ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ed2:	e212      	b.n	80082fa <UART_SetConfig+0x5a6>
 8007ed4:	2340      	movs	r3, #64	@ 0x40
 8007ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eda:	e20e      	b.n	80082fa <UART_SetConfig+0x5a6>
 8007edc:	2380      	movs	r3, #128	@ 0x80
 8007ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ee2:	e20a      	b.n	80082fa <UART_SetConfig+0x5a6>
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a69      	ldr	r2, [pc, #420]	@ (8008090 <UART_SetConfig+0x33c>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d130      	bne.n	8007f50 <UART_SetConfig+0x1fc>
 8007eee:	4b67      	ldr	r3, [pc, #412]	@ (800808c <UART_SetConfig+0x338>)
 8007ef0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ef2:	f003 0307 	and.w	r3, r3, #7
 8007ef6:	2b05      	cmp	r3, #5
 8007ef8:	d826      	bhi.n	8007f48 <UART_SetConfig+0x1f4>
 8007efa:	a201      	add	r2, pc, #4	@ (adr r2, 8007f00 <UART_SetConfig+0x1ac>)
 8007efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f00:	08007f19 	.word	0x08007f19
 8007f04:	08007f21 	.word	0x08007f21
 8007f08:	08007f29 	.word	0x08007f29
 8007f0c:	08007f31 	.word	0x08007f31
 8007f10:	08007f39 	.word	0x08007f39
 8007f14:	08007f41 	.word	0x08007f41
 8007f18:	2300      	movs	r3, #0
 8007f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f1e:	e1ec      	b.n	80082fa <UART_SetConfig+0x5a6>
 8007f20:	2304      	movs	r3, #4
 8007f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f26:	e1e8      	b.n	80082fa <UART_SetConfig+0x5a6>
 8007f28:	2308      	movs	r3, #8
 8007f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f2e:	e1e4      	b.n	80082fa <UART_SetConfig+0x5a6>
 8007f30:	2310      	movs	r3, #16
 8007f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f36:	e1e0      	b.n	80082fa <UART_SetConfig+0x5a6>
 8007f38:	2320      	movs	r3, #32
 8007f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f3e:	e1dc      	b.n	80082fa <UART_SetConfig+0x5a6>
 8007f40:	2340      	movs	r3, #64	@ 0x40
 8007f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f46:	e1d8      	b.n	80082fa <UART_SetConfig+0x5a6>
 8007f48:	2380      	movs	r3, #128	@ 0x80
 8007f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f4e:	e1d4      	b.n	80082fa <UART_SetConfig+0x5a6>
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a4f      	ldr	r2, [pc, #316]	@ (8008094 <UART_SetConfig+0x340>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d130      	bne.n	8007fbc <UART_SetConfig+0x268>
 8007f5a:	4b4c      	ldr	r3, [pc, #304]	@ (800808c <UART_SetConfig+0x338>)
 8007f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f5e:	f003 0307 	and.w	r3, r3, #7
 8007f62:	2b05      	cmp	r3, #5
 8007f64:	d826      	bhi.n	8007fb4 <UART_SetConfig+0x260>
 8007f66:	a201      	add	r2, pc, #4	@ (adr r2, 8007f6c <UART_SetConfig+0x218>)
 8007f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f6c:	08007f85 	.word	0x08007f85
 8007f70:	08007f8d 	.word	0x08007f8d
 8007f74:	08007f95 	.word	0x08007f95
 8007f78:	08007f9d 	.word	0x08007f9d
 8007f7c:	08007fa5 	.word	0x08007fa5
 8007f80:	08007fad 	.word	0x08007fad
 8007f84:	2300      	movs	r3, #0
 8007f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f8a:	e1b6      	b.n	80082fa <UART_SetConfig+0x5a6>
 8007f8c:	2304      	movs	r3, #4
 8007f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f92:	e1b2      	b.n	80082fa <UART_SetConfig+0x5a6>
 8007f94:	2308      	movs	r3, #8
 8007f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f9a:	e1ae      	b.n	80082fa <UART_SetConfig+0x5a6>
 8007f9c:	2310      	movs	r3, #16
 8007f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fa2:	e1aa      	b.n	80082fa <UART_SetConfig+0x5a6>
 8007fa4:	2320      	movs	r3, #32
 8007fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007faa:	e1a6      	b.n	80082fa <UART_SetConfig+0x5a6>
 8007fac:	2340      	movs	r3, #64	@ 0x40
 8007fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fb2:	e1a2      	b.n	80082fa <UART_SetConfig+0x5a6>
 8007fb4:	2380      	movs	r3, #128	@ 0x80
 8007fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fba:	e19e      	b.n	80082fa <UART_SetConfig+0x5a6>
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a35      	ldr	r2, [pc, #212]	@ (8008098 <UART_SetConfig+0x344>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d130      	bne.n	8008028 <UART_SetConfig+0x2d4>
 8007fc6:	4b31      	ldr	r3, [pc, #196]	@ (800808c <UART_SetConfig+0x338>)
 8007fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fca:	f003 0307 	and.w	r3, r3, #7
 8007fce:	2b05      	cmp	r3, #5
 8007fd0:	d826      	bhi.n	8008020 <UART_SetConfig+0x2cc>
 8007fd2:	a201      	add	r2, pc, #4	@ (adr r2, 8007fd8 <UART_SetConfig+0x284>)
 8007fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd8:	08007ff1 	.word	0x08007ff1
 8007fdc:	08007ff9 	.word	0x08007ff9
 8007fe0:	08008001 	.word	0x08008001
 8007fe4:	08008009 	.word	0x08008009
 8007fe8:	08008011 	.word	0x08008011
 8007fec:	08008019 	.word	0x08008019
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ff6:	e180      	b.n	80082fa <UART_SetConfig+0x5a6>
 8007ff8:	2304      	movs	r3, #4
 8007ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ffe:	e17c      	b.n	80082fa <UART_SetConfig+0x5a6>
 8008000:	2308      	movs	r3, #8
 8008002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008006:	e178      	b.n	80082fa <UART_SetConfig+0x5a6>
 8008008:	2310      	movs	r3, #16
 800800a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800800e:	e174      	b.n	80082fa <UART_SetConfig+0x5a6>
 8008010:	2320      	movs	r3, #32
 8008012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008016:	e170      	b.n	80082fa <UART_SetConfig+0x5a6>
 8008018:	2340      	movs	r3, #64	@ 0x40
 800801a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800801e:	e16c      	b.n	80082fa <UART_SetConfig+0x5a6>
 8008020:	2380      	movs	r3, #128	@ 0x80
 8008022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008026:	e168      	b.n	80082fa <UART_SetConfig+0x5a6>
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a1b      	ldr	r2, [pc, #108]	@ (800809c <UART_SetConfig+0x348>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d142      	bne.n	80080b8 <UART_SetConfig+0x364>
 8008032:	4b16      	ldr	r3, [pc, #88]	@ (800808c <UART_SetConfig+0x338>)
 8008034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008036:	f003 0307 	and.w	r3, r3, #7
 800803a:	2b05      	cmp	r3, #5
 800803c:	d838      	bhi.n	80080b0 <UART_SetConfig+0x35c>
 800803e:	a201      	add	r2, pc, #4	@ (adr r2, 8008044 <UART_SetConfig+0x2f0>)
 8008040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008044:	0800805d 	.word	0x0800805d
 8008048:	08008065 	.word	0x08008065
 800804c:	0800806d 	.word	0x0800806d
 8008050:	08008075 	.word	0x08008075
 8008054:	080080a1 	.word	0x080080a1
 8008058:	080080a9 	.word	0x080080a9
 800805c:	2300      	movs	r3, #0
 800805e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008062:	e14a      	b.n	80082fa <UART_SetConfig+0x5a6>
 8008064:	2304      	movs	r3, #4
 8008066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800806a:	e146      	b.n	80082fa <UART_SetConfig+0x5a6>
 800806c:	2308      	movs	r3, #8
 800806e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008072:	e142      	b.n	80082fa <UART_SetConfig+0x5a6>
 8008074:	2310      	movs	r3, #16
 8008076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800807a:	e13e      	b.n	80082fa <UART_SetConfig+0x5a6>
 800807c:	cfff69f3 	.word	0xcfff69f3
 8008080:	58000c00 	.word	0x58000c00
 8008084:	11fff4ff 	.word	0x11fff4ff
 8008088:	40011000 	.word	0x40011000
 800808c:	58024400 	.word	0x58024400
 8008090:	40004400 	.word	0x40004400
 8008094:	40004800 	.word	0x40004800
 8008098:	40004c00 	.word	0x40004c00
 800809c:	40005000 	.word	0x40005000
 80080a0:	2320      	movs	r3, #32
 80080a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080a6:	e128      	b.n	80082fa <UART_SetConfig+0x5a6>
 80080a8:	2340      	movs	r3, #64	@ 0x40
 80080aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ae:	e124      	b.n	80082fa <UART_SetConfig+0x5a6>
 80080b0:	2380      	movs	r3, #128	@ 0x80
 80080b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080b6:	e120      	b.n	80082fa <UART_SetConfig+0x5a6>
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4acb      	ldr	r2, [pc, #812]	@ (80083ec <UART_SetConfig+0x698>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d176      	bne.n	80081b0 <UART_SetConfig+0x45c>
 80080c2:	4bcb      	ldr	r3, [pc, #812]	@ (80083f0 <UART_SetConfig+0x69c>)
 80080c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80080ca:	2b28      	cmp	r3, #40	@ 0x28
 80080cc:	d86c      	bhi.n	80081a8 <UART_SetConfig+0x454>
 80080ce:	a201      	add	r2, pc, #4	@ (adr r2, 80080d4 <UART_SetConfig+0x380>)
 80080d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d4:	08008179 	.word	0x08008179
 80080d8:	080081a9 	.word	0x080081a9
 80080dc:	080081a9 	.word	0x080081a9
 80080e0:	080081a9 	.word	0x080081a9
 80080e4:	080081a9 	.word	0x080081a9
 80080e8:	080081a9 	.word	0x080081a9
 80080ec:	080081a9 	.word	0x080081a9
 80080f0:	080081a9 	.word	0x080081a9
 80080f4:	08008181 	.word	0x08008181
 80080f8:	080081a9 	.word	0x080081a9
 80080fc:	080081a9 	.word	0x080081a9
 8008100:	080081a9 	.word	0x080081a9
 8008104:	080081a9 	.word	0x080081a9
 8008108:	080081a9 	.word	0x080081a9
 800810c:	080081a9 	.word	0x080081a9
 8008110:	080081a9 	.word	0x080081a9
 8008114:	08008189 	.word	0x08008189
 8008118:	080081a9 	.word	0x080081a9
 800811c:	080081a9 	.word	0x080081a9
 8008120:	080081a9 	.word	0x080081a9
 8008124:	080081a9 	.word	0x080081a9
 8008128:	080081a9 	.word	0x080081a9
 800812c:	080081a9 	.word	0x080081a9
 8008130:	080081a9 	.word	0x080081a9
 8008134:	08008191 	.word	0x08008191
 8008138:	080081a9 	.word	0x080081a9
 800813c:	080081a9 	.word	0x080081a9
 8008140:	080081a9 	.word	0x080081a9
 8008144:	080081a9 	.word	0x080081a9
 8008148:	080081a9 	.word	0x080081a9
 800814c:	080081a9 	.word	0x080081a9
 8008150:	080081a9 	.word	0x080081a9
 8008154:	08008199 	.word	0x08008199
 8008158:	080081a9 	.word	0x080081a9
 800815c:	080081a9 	.word	0x080081a9
 8008160:	080081a9 	.word	0x080081a9
 8008164:	080081a9 	.word	0x080081a9
 8008168:	080081a9 	.word	0x080081a9
 800816c:	080081a9 	.word	0x080081a9
 8008170:	080081a9 	.word	0x080081a9
 8008174:	080081a1 	.word	0x080081a1
 8008178:	2301      	movs	r3, #1
 800817a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800817e:	e0bc      	b.n	80082fa <UART_SetConfig+0x5a6>
 8008180:	2304      	movs	r3, #4
 8008182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008186:	e0b8      	b.n	80082fa <UART_SetConfig+0x5a6>
 8008188:	2308      	movs	r3, #8
 800818a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800818e:	e0b4      	b.n	80082fa <UART_SetConfig+0x5a6>
 8008190:	2310      	movs	r3, #16
 8008192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008196:	e0b0      	b.n	80082fa <UART_SetConfig+0x5a6>
 8008198:	2320      	movs	r3, #32
 800819a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800819e:	e0ac      	b.n	80082fa <UART_SetConfig+0x5a6>
 80081a0:	2340      	movs	r3, #64	@ 0x40
 80081a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081a6:	e0a8      	b.n	80082fa <UART_SetConfig+0x5a6>
 80081a8:	2380      	movs	r3, #128	@ 0x80
 80081aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081ae:	e0a4      	b.n	80082fa <UART_SetConfig+0x5a6>
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a8f      	ldr	r2, [pc, #572]	@ (80083f4 <UART_SetConfig+0x6a0>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d130      	bne.n	800821c <UART_SetConfig+0x4c8>
 80081ba:	4b8d      	ldr	r3, [pc, #564]	@ (80083f0 <UART_SetConfig+0x69c>)
 80081bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081be:	f003 0307 	and.w	r3, r3, #7
 80081c2:	2b05      	cmp	r3, #5
 80081c4:	d826      	bhi.n	8008214 <UART_SetConfig+0x4c0>
 80081c6:	a201      	add	r2, pc, #4	@ (adr r2, 80081cc <UART_SetConfig+0x478>)
 80081c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081cc:	080081e5 	.word	0x080081e5
 80081d0:	080081ed 	.word	0x080081ed
 80081d4:	080081f5 	.word	0x080081f5
 80081d8:	080081fd 	.word	0x080081fd
 80081dc:	08008205 	.word	0x08008205
 80081e0:	0800820d 	.word	0x0800820d
 80081e4:	2300      	movs	r3, #0
 80081e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081ea:	e086      	b.n	80082fa <UART_SetConfig+0x5a6>
 80081ec:	2304      	movs	r3, #4
 80081ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081f2:	e082      	b.n	80082fa <UART_SetConfig+0x5a6>
 80081f4:	2308      	movs	r3, #8
 80081f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081fa:	e07e      	b.n	80082fa <UART_SetConfig+0x5a6>
 80081fc:	2310      	movs	r3, #16
 80081fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008202:	e07a      	b.n	80082fa <UART_SetConfig+0x5a6>
 8008204:	2320      	movs	r3, #32
 8008206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800820a:	e076      	b.n	80082fa <UART_SetConfig+0x5a6>
 800820c:	2340      	movs	r3, #64	@ 0x40
 800820e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008212:	e072      	b.n	80082fa <UART_SetConfig+0x5a6>
 8008214:	2380      	movs	r3, #128	@ 0x80
 8008216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800821a:	e06e      	b.n	80082fa <UART_SetConfig+0x5a6>
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a75      	ldr	r2, [pc, #468]	@ (80083f8 <UART_SetConfig+0x6a4>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d130      	bne.n	8008288 <UART_SetConfig+0x534>
 8008226:	4b72      	ldr	r3, [pc, #456]	@ (80083f0 <UART_SetConfig+0x69c>)
 8008228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800822a:	f003 0307 	and.w	r3, r3, #7
 800822e:	2b05      	cmp	r3, #5
 8008230:	d826      	bhi.n	8008280 <UART_SetConfig+0x52c>
 8008232:	a201      	add	r2, pc, #4	@ (adr r2, 8008238 <UART_SetConfig+0x4e4>)
 8008234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008238:	08008251 	.word	0x08008251
 800823c:	08008259 	.word	0x08008259
 8008240:	08008261 	.word	0x08008261
 8008244:	08008269 	.word	0x08008269
 8008248:	08008271 	.word	0x08008271
 800824c:	08008279 	.word	0x08008279
 8008250:	2300      	movs	r3, #0
 8008252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008256:	e050      	b.n	80082fa <UART_SetConfig+0x5a6>
 8008258:	2304      	movs	r3, #4
 800825a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800825e:	e04c      	b.n	80082fa <UART_SetConfig+0x5a6>
 8008260:	2308      	movs	r3, #8
 8008262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008266:	e048      	b.n	80082fa <UART_SetConfig+0x5a6>
 8008268:	2310      	movs	r3, #16
 800826a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800826e:	e044      	b.n	80082fa <UART_SetConfig+0x5a6>
 8008270:	2320      	movs	r3, #32
 8008272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008276:	e040      	b.n	80082fa <UART_SetConfig+0x5a6>
 8008278:	2340      	movs	r3, #64	@ 0x40
 800827a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800827e:	e03c      	b.n	80082fa <UART_SetConfig+0x5a6>
 8008280:	2380      	movs	r3, #128	@ 0x80
 8008282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008286:	e038      	b.n	80082fa <UART_SetConfig+0x5a6>
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a5b      	ldr	r2, [pc, #364]	@ (80083fc <UART_SetConfig+0x6a8>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d130      	bne.n	80082f4 <UART_SetConfig+0x5a0>
 8008292:	4b57      	ldr	r3, [pc, #348]	@ (80083f0 <UART_SetConfig+0x69c>)
 8008294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008296:	f003 0307 	and.w	r3, r3, #7
 800829a:	2b05      	cmp	r3, #5
 800829c:	d826      	bhi.n	80082ec <UART_SetConfig+0x598>
 800829e:	a201      	add	r2, pc, #4	@ (adr r2, 80082a4 <UART_SetConfig+0x550>)
 80082a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a4:	080082bd 	.word	0x080082bd
 80082a8:	080082c5 	.word	0x080082c5
 80082ac:	080082cd 	.word	0x080082cd
 80082b0:	080082d5 	.word	0x080082d5
 80082b4:	080082dd 	.word	0x080082dd
 80082b8:	080082e5 	.word	0x080082e5
 80082bc:	2302      	movs	r3, #2
 80082be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082c2:	e01a      	b.n	80082fa <UART_SetConfig+0x5a6>
 80082c4:	2304      	movs	r3, #4
 80082c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ca:	e016      	b.n	80082fa <UART_SetConfig+0x5a6>
 80082cc:	2308      	movs	r3, #8
 80082ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082d2:	e012      	b.n	80082fa <UART_SetConfig+0x5a6>
 80082d4:	2310      	movs	r3, #16
 80082d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082da:	e00e      	b.n	80082fa <UART_SetConfig+0x5a6>
 80082dc:	2320      	movs	r3, #32
 80082de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082e2:	e00a      	b.n	80082fa <UART_SetConfig+0x5a6>
 80082e4:	2340      	movs	r3, #64	@ 0x40
 80082e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ea:	e006      	b.n	80082fa <UART_SetConfig+0x5a6>
 80082ec:	2380      	movs	r3, #128	@ 0x80
 80082ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082f2:	e002      	b.n	80082fa <UART_SetConfig+0x5a6>
 80082f4:	2380      	movs	r3, #128	@ 0x80
 80082f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a3f      	ldr	r2, [pc, #252]	@ (80083fc <UART_SetConfig+0x6a8>)
 8008300:	4293      	cmp	r3, r2
 8008302:	f040 80f8 	bne.w	80084f6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008306:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800830a:	2b20      	cmp	r3, #32
 800830c:	dc46      	bgt.n	800839c <UART_SetConfig+0x648>
 800830e:	2b02      	cmp	r3, #2
 8008310:	f2c0 8082 	blt.w	8008418 <UART_SetConfig+0x6c4>
 8008314:	3b02      	subs	r3, #2
 8008316:	2b1e      	cmp	r3, #30
 8008318:	d87e      	bhi.n	8008418 <UART_SetConfig+0x6c4>
 800831a:	a201      	add	r2, pc, #4	@ (adr r2, 8008320 <UART_SetConfig+0x5cc>)
 800831c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008320:	080083a3 	.word	0x080083a3
 8008324:	08008419 	.word	0x08008419
 8008328:	080083ab 	.word	0x080083ab
 800832c:	08008419 	.word	0x08008419
 8008330:	08008419 	.word	0x08008419
 8008334:	08008419 	.word	0x08008419
 8008338:	080083bb 	.word	0x080083bb
 800833c:	08008419 	.word	0x08008419
 8008340:	08008419 	.word	0x08008419
 8008344:	08008419 	.word	0x08008419
 8008348:	08008419 	.word	0x08008419
 800834c:	08008419 	.word	0x08008419
 8008350:	08008419 	.word	0x08008419
 8008354:	08008419 	.word	0x08008419
 8008358:	080083cb 	.word	0x080083cb
 800835c:	08008419 	.word	0x08008419
 8008360:	08008419 	.word	0x08008419
 8008364:	08008419 	.word	0x08008419
 8008368:	08008419 	.word	0x08008419
 800836c:	08008419 	.word	0x08008419
 8008370:	08008419 	.word	0x08008419
 8008374:	08008419 	.word	0x08008419
 8008378:	08008419 	.word	0x08008419
 800837c:	08008419 	.word	0x08008419
 8008380:	08008419 	.word	0x08008419
 8008384:	08008419 	.word	0x08008419
 8008388:	08008419 	.word	0x08008419
 800838c:	08008419 	.word	0x08008419
 8008390:	08008419 	.word	0x08008419
 8008394:	08008419 	.word	0x08008419
 8008398:	0800840b 	.word	0x0800840b
 800839c:	2b40      	cmp	r3, #64	@ 0x40
 800839e:	d037      	beq.n	8008410 <UART_SetConfig+0x6bc>
 80083a0:	e03a      	b.n	8008418 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80083a2:	f7fd fac5 	bl	8005930 <HAL_RCCEx_GetD3PCLK1Freq>
 80083a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80083a8:	e03c      	b.n	8008424 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7fd fad4 	bl	800595c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80083b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083b8:	e034      	b.n	8008424 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083ba:	f107 0318 	add.w	r3, r7, #24
 80083be:	4618      	mov	r0, r3
 80083c0:	f7fd fc20 	bl	8005c04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083c8:	e02c      	b.n	8008424 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083ca:	4b09      	ldr	r3, [pc, #36]	@ (80083f0 <UART_SetConfig+0x69c>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f003 0320 	and.w	r3, r3, #32
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d016      	beq.n	8008404 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80083d6:	4b06      	ldr	r3, [pc, #24]	@ (80083f0 <UART_SetConfig+0x69c>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	08db      	lsrs	r3, r3, #3
 80083dc:	f003 0303 	and.w	r3, r3, #3
 80083e0:	4a07      	ldr	r2, [pc, #28]	@ (8008400 <UART_SetConfig+0x6ac>)
 80083e2:	fa22 f303 	lsr.w	r3, r2, r3
 80083e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80083e8:	e01c      	b.n	8008424 <UART_SetConfig+0x6d0>
 80083ea:	bf00      	nop
 80083ec:	40011400 	.word	0x40011400
 80083f0:	58024400 	.word	0x58024400
 80083f4:	40007800 	.word	0x40007800
 80083f8:	40007c00 	.word	0x40007c00
 80083fc:	58000c00 	.word	0x58000c00
 8008400:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008404:	4b9d      	ldr	r3, [pc, #628]	@ (800867c <UART_SetConfig+0x928>)
 8008406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008408:	e00c      	b.n	8008424 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800840a:	4b9d      	ldr	r3, [pc, #628]	@ (8008680 <UART_SetConfig+0x92c>)
 800840c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800840e:	e009      	b.n	8008424 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008410:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008416:	e005      	b.n	8008424 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008418:	2300      	movs	r3, #0
 800841a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008422:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008424:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008426:	2b00      	cmp	r3, #0
 8008428:	f000 81de 	beq.w	80087e8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008430:	4a94      	ldr	r2, [pc, #592]	@ (8008684 <UART_SetConfig+0x930>)
 8008432:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008436:	461a      	mov	r2, r3
 8008438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800843a:	fbb3 f3f2 	udiv	r3, r3, r2
 800843e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	685a      	ldr	r2, [r3, #4]
 8008444:	4613      	mov	r3, r2
 8008446:	005b      	lsls	r3, r3, #1
 8008448:	4413      	add	r3, r2
 800844a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800844c:	429a      	cmp	r2, r3
 800844e:	d305      	bcc.n	800845c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008456:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008458:	429a      	cmp	r2, r3
 800845a:	d903      	bls.n	8008464 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008462:	e1c1      	b.n	80087e8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008464:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008466:	2200      	movs	r2, #0
 8008468:	60bb      	str	r3, [r7, #8]
 800846a:	60fa      	str	r2, [r7, #12]
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008470:	4a84      	ldr	r2, [pc, #528]	@ (8008684 <UART_SetConfig+0x930>)
 8008472:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008476:	b29b      	uxth	r3, r3
 8008478:	2200      	movs	r2, #0
 800847a:	603b      	str	r3, [r7, #0]
 800847c:	607a      	str	r2, [r7, #4]
 800847e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008482:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008486:	f7f8 f93f 	bl	8000708 <__aeabi_uldivmod>
 800848a:	4602      	mov	r2, r0
 800848c:	460b      	mov	r3, r1
 800848e:	4610      	mov	r0, r2
 8008490:	4619      	mov	r1, r3
 8008492:	f04f 0200 	mov.w	r2, #0
 8008496:	f04f 0300 	mov.w	r3, #0
 800849a:	020b      	lsls	r3, r1, #8
 800849c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80084a0:	0202      	lsls	r2, r0, #8
 80084a2:	6979      	ldr	r1, [r7, #20]
 80084a4:	6849      	ldr	r1, [r1, #4]
 80084a6:	0849      	lsrs	r1, r1, #1
 80084a8:	2000      	movs	r0, #0
 80084aa:	460c      	mov	r4, r1
 80084ac:	4605      	mov	r5, r0
 80084ae:	eb12 0804 	adds.w	r8, r2, r4
 80084b2:	eb43 0905 	adc.w	r9, r3, r5
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	469a      	mov	sl, r3
 80084be:	4693      	mov	fp, r2
 80084c0:	4652      	mov	r2, sl
 80084c2:	465b      	mov	r3, fp
 80084c4:	4640      	mov	r0, r8
 80084c6:	4649      	mov	r1, r9
 80084c8:	f7f8 f91e 	bl	8000708 <__aeabi_uldivmod>
 80084cc:	4602      	mov	r2, r0
 80084ce:	460b      	mov	r3, r1
 80084d0:	4613      	mov	r3, r2
 80084d2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80084d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80084da:	d308      	bcc.n	80084ee <UART_SetConfig+0x79a>
 80084dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084e2:	d204      	bcs.n	80084ee <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80084ea:	60da      	str	r2, [r3, #12]
 80084ec:	e17c      	b.n	80087e8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80084f4:	e178      	b.n	80087e8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	69db      	ldr	r3, [r3, #28]
 80084fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084fe:	f040 80c5 	bne.w	800868c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008502:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008506:	2b20      	cmp	r3, #32
 8008508:	dc48      	bgt.n	800859c <UART_SetConfig+0x848>
 800850a:	2b00      	cmp	r3, #0
 800850c:	db7b      	blt.n	8008606 <UART_SetConfig+0x8b2>
 800850e:	2b20      	cmp	r3, #32
 8008510:	d879      	bhi.n	8008606 <UART_SetConfig+0x8b2>
 8008512:	a201      	add	r2, pc, #4	@ (adr r2, 8008518 <UART_SetConfig+0x7c4>)
 8008514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008518:	080085a3 	.word	0x080085a3
 800851c:	080085ab 	.word	0x080085ab
 8008520:	08008607 	.word	0x08008607
 8008524:	08008607 	.word	0x08008607
 8008528:	080085b3 	.word	0x080085b3
 800852c:	08008607 	.word	0x08008607
 8008530:	08008607 	.word	0x08008607
 8008534:	08008607 	.word	0x08008607
 8008538:	080085c3 	.word	0x080085c3
 800853c:	08008607 	.word	0x08008607
 8008540:	08008607 	.word	0x08008607
 8008544:	08008607 	.word	0x08008607
 8008548:	08008607 	.word	0x08008607
 800854c:	08008607 	.word	0x08008607
 8008550:	08008607 	.word	0x08008607
 8008554:	08008607 	.word	0x08008607
 8008558:	080085d3 	.word	0x080085d3
 800855c:	08008607 	.word	0x08008607
 8008560:	08008607 	.word	0x08008607
 8008564:	08008607 	.word	0x08008607
 8008568:	08008607 	.word	0x08008607
 800856c:	08008607 	.word	0x08008607
 8008570:	08008607 	.word	0x08008607
 8008574:	08008607 	.word	0x08008607
 8008578:	08008607 	.word	0x08008607
 800857c:	08008607 	.word	0x08008607
 8008580:	08008607 	.word	0x08008607
 8008584:	08008607 	.word	0x08008607
 8008588:	08008607 	.word	0x08008607
 800858c:	08008607 	.word	0x08008607
 8008590:	08008607 	.word	0x08008607
 8008594:	08008607 	.word	0x08008607
 8008598:	080085f9 	.word	0x080085f9
 800859c:	2b40      	cmp	r3, #64	@ 0x40
 800859e:	d02e      	beq.n	80085fe <UART_SetConfig+0x8aa>
 80085a0:	e031      	b.n	8008606 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085a2:	f7fb ff8f 	bl	80044c4 <HAL_RCC_GetPCLK1Freq>
 80085a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80085a8:	e033      	b.n	8008612 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085aa:	f7fb ffa1 	bl	80044f0 <HAL_RCC_GetPCLK2Freq>
 80085ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80085b0:	e02f      	b.n	8008612 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7fd f9d0 	bl	800595c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80085bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085c0:	e027      	b.n	8008612 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085c2:	f107 0318 	add.w	r3, r7, #24
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7fd fb1c 	bl	8005c04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085d0:	e01f      	b.n	8008612 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085d2:	4b2d      	ldr	r3, [pc, #180]	@ (8008688 <UART_SetConfig+0x934>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f003 0320 	and.w	r3, r3, #32
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d009      	beq.n	80085f2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80085de:	4b2a      	ldr	r3, [pc, #168]	@ (8008688 <UART_SetConfig+0x934>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	08db      	lsrs	r3, r3, #3
 80085e4:	f003 0303 	and.w	r3, r3, #3
 80085e8:	4a24      	ldr	r2, [pc, #144]	@ (800867c <UART_SetConfig+0x928>)
 80085ea:	fa22 f303 	lsr.w	r3, r2, r3
 80085ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80085f0:	e00f      	b.n	8008612 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80085f2:	4b22      	ldr	r3, [pc, #136]	@ (800867c <UART_SetConfig+0x928>)
 80085f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085f6:	e00c      	b.n	8008612 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80085f8:	4b21      	ldr	r3, [pc, #132]	@ (8008680 <UART_SetConfig+0x92c>)
 80085fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085fc:	e009      	b.n	8008612 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008604:	e005      	b.n	8008612 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008606:	2300      	movs	r3, #0
 8008608:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008610:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008614:	2b00      	cmp	r3, #0
 8008616:	f000 80e7 	beq.w	80087e8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800861e:	4a19      	ldr	r2, [pc, #100]	@ (8008684 <UART_SetConfig+0x930>)
 8008620:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008624:	461a      	mov	r2, r3
 8008626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008628:	fbb3 f3f2 	udiv	r3, r3, r2
 800862c:	005a      	lsls	r2, r3, #1
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	085b      	lsrs	r3, r3, #1
 8008634:	441a      	add	r2, r3
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	fbb2 f3f3 	udiv	r3, r2, r3
 800863e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008642:	2b0f      	cmp	r3, #15
 8008644:	d916      	bls.n	8008674 <UART_SetConfig+0x920>
 8008646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008648:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800864c:	d212      	bcs.n	8008674 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800864e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008650:	b29b      	uxth	r3, r3
 8008652:	f023 030f 	bic.w	r3, r3, #15
 8008656:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800865a:	085b      	lsrs	r3, r3, #1
 800865c:	b29b      	uxth	r3, r3
 800865e:	f003 0307 	and.w	r3, r3, #7
 8008662:	b29a      	uxth	r2, r3
 8008664:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008666:	4313      	orrs	r3, r2
 8008668:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008670:	60da      	str	r2, [r3, #12]
 8008672:	e0b9      	b.n	80087e8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800867a:	e0b5      	b.n	80087e8 <UART_SetConfig+0xa94>
 800867c:	03d09000 	.word	0x03d09000
 8008680:	003d0900 	.word	0x003d0900
 8008684:	0800e0e0 	.word	0x0800e0e0
 8008688:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800868c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008690:	2b20      	cmp	r3, #32
 8008692:	dc49      	bgt.n	8008728 <UART_SetConfig+0x9d4>
 8008694:	2b00      	cmp	r3, #0
 8008696:	db7c      	blt.n	8008792 <UART_SetConfig+0xa3e>
 8008698:	2b20      	cmp	r3, #32
 800869a:	d87a      	bhi.n	8008792 <UART_SetConfig+0xa3e>
 800869c:	a201      	add	r2, pc, #4	@ (adr r2, 80086a4 <UART_SetConfig+0x950>)
 800869e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a2:	bf00      	nop
 80086a4:	0800872f 	.word	0x0800872f
 80086a8:	08008737 	.word	0x08008737
 80086ac:	08008793 	.word	0x08008793
 80086b0:	08008793 	.word	0x08008793
 80086b4:	0800873f 	.word	0x0800873f
 80086b8:	08008793 	.word	0x08008793
 80086bc:	08008793 	.word	0x08008793
 80086c0:	08008793 	.word	0x08008793
 80086c4:	0800874f 	.word	0x0800874f
 80086c8:	08008793 	.word	0x08008793
 80086cc:	08008793 	.word	0x08008793
 80086d0:	08008793 	.word	0x08008793
 80086d4:	08008793 	.word	0x08008793
 80086d8:	08008793 	.word	0x08008793
 80086dc:	08008793 	.word	0x08008793
 80086e0:	08008793 	.word	0x08008793
 80086e4:	0800875f 	.word	0x0800875f
 80086e8:	08008793 	.word	0x08008793
 80086ec:	08008793 	.word	0x08008793
 80086f0:	08008793 	.word	0x08008793
 80086f4:	08008793 	.word	0x08008793
 80086f8:	08008793 	.word	0x08008793
 80086fc:	08008793 	.word	0x08008793
 8008700:	08008793 	.word	0x08008793
 8008704:	08008793 	.word	0x08008793
 8008708:	08008793 	.word	0x08008793
 800870c:	08008793 	.word	0x08008793
 8008710:	08008793 	.word	0x08008793
 8008714:	08008793 	.word	0x08008793
 8008718:	08008793 	.word	0x08008793
 800871c:	08008793 	.word	0x08008793
 8008720:	08008793 	.word	0x08008793
 8008724:	08008785 	.word	0x08008785
 8008728:	2b40      	cmp	r3, #64	@ 0x40
 800872a:	d02e      	beq.n	800878a <UART_SetConfig+0xa36>
 800872c:	e031      	b.n	8008792 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800872e:	f7fb fec9 	bl	80044c4 <HAL_RCC_GetPCLK1Freq>
 8008732:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008734:	e033      	b.n	800879e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008736:	f7fb fedb 	bl	80044f0 <HAL_RCC_GetPCLK2Freq>
 800873a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800873c:	e02f      	b.n	800879e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800873e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008742:	4618      	mov	r0, r3
 8008744:	f7fd f90a 	bl	800595c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800874a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800874c:	e027      	b.n	800879e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800874e:	f107 0318 	add.w	r3, r7, #24
 8008752:	4618      	mov	r0, r3
 8008754:	f7fd fa56 	bl	8005c04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800875c:	e01f      	b.n	800879e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800875e:	4b2d      	ldr	r3, [pc, #180]	@ (8008814 <UART_SetConfig+0xac0>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f003 0320 	and.w	r3, r3, #32
 8008766:	2b00      	cmp	r3, #0
 8008768:	d009      	beq.n	800877e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800876a:	4b2a      	ldr	r3, [pc, #168]	@ (8008814 <UART_SetConfig+0xac0>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	08db      	lsrs	r3, r3, #3
 8008770:	f003 0303 	and.w	r3, r3, #3
 8008774:	4a28      	ldr	r2, [pc, #160]	@ (8008818 <UART_SetConfig+0xac4>)
 8008776:	fa22 f303 	lsr.w	r3, r2, r3
 800877a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800877c:	e00f      	b.n	800879e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800877e:	4b26      	ldr	r3, [pc, #152]	@ (8008818 <UART_SetConfig+0xac4>)
 8008780:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008782:	e00c      	b.n	800879e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008784:	4b25      	ldr	r3, [pc, #148]	@ (800881c <UART_SetConfig+0xac8>)
 8008786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008788:	e009      	b.n	800879e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800878a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800878e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008790:	e005      	b.n	800879e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008792:	2300      	movs	r3, #0
 8008794:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800879c:	bf00      	nop
    }

    if (pclk != 0U)
 800879e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d021      	beq.n	80087e8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087a8:	4a1d      	ldr	r2, [pc, #116]	@ (8008820 <UART_SetConfig+0xacc>)
 80087aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087ae:	461a      	mov	r2, r3
 80087b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	085b      	lsrs	r3, r3, #1
 80087bc:	441a      	add	r2, r3
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80087c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ca:	2b0f      	cmp	r3, #15
 80087cc:	d909      	bls.n	80087e2 <UART_SetConfig+0xa8e>
 80087ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087d4:	d205      	bcs.n	80087e2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80087d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d8:	b29a      	uxth	r2, r3
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	60da      	str	r2, [r3, #12]
 80087e0:	e002      	b.n	80087e8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	2200      	movs	r2, #0
 80087fc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	2200      	movs	r2, #0
 8008802:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008804:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008808:	4618      	mov	r0, r3
 800880a:	3748      	adds	r7, #72	@ 0x48
 800880c:	46bd      	mov	sp, r7
 800880e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008812:	bf00      	nop
 8008814:	58024400 	.word	0x58024400
 8008818:	03d09000 	.word	0x03d09000
 800881c:	003d0900 	.word	0x003d0900
 8008820:	0800e0e0 	.word	0x0800e0e0

08008824 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008830:	f003 0308 	and.w	r3, r3, #8
 8008834:	2b00      	cmp	r3, #0
 8008836:	d00a      	beq.n	800884e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	430a      	orrs	r2, r1
 800884c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008852:	f003 0301 	and.w	r3, r3, #1
 8008856:	2b00      	cmp	r3, #0
 8008858:	d00a      	beq.n	8008870 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	430a      	orrs	r2, r1
 800886e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008874:	f003 0302 	and.w	r3, r3, #2
 8008878:	2b00      	cmp	r3, #0
 800887a:	d00a      	beq.n	8008892 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	430a      	orrs	r2, r1
 8008890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008896:	f003 0304 	and.w	r3, r3, #4
 800889a:	2b00      	cmp	r3, #0
 800889c:	d00a      	beq.n	80088b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	430a      	orrs	r2, r1
 80088b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088b8:	f003 0310 	and.w	r3, r3, #16
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d00a      	beq.n	80088d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	430a      	orrs	r2, r1
 80088d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088da:	f003 0320 	and.w	r3, r3, #32
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d00a      	beq.n	80088f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	430a      	orrs	r2, r1
 80088f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008900:	2b00      	cmp	r3, #0
 8008902:	d01a      	beq.n	800893a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	430a      	orrs	r2, r1
 8008918:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800891e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008922:	d10a      	bne.n	800893a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	430a      	orrs	r2, r1
 8008938:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800893e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00a      	beq.n	800895c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	430a      	orrs	r2, r1
 800895a:	605a      	str	r2, [r3, #4]
  }
}
 800895c:	bf00      	nop
 800895e:	370c      	adds	r7, #12
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b098      	sub	sp, #96	@ 0x60
 800896c:	af02      	add	r7, sp, #8
 800896e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008978:	f7f9 f882 	bl	8001a80 <HAL_GetTick>
 800897c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f003 0308 	and.w	r3, r3, #8
 8008988:	2b08      	cmp	r3, #8
 800898a:	d12f      	bne.n	80089ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800898c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008990:	9300      	str	r3, [sp, #0]
 8008992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008994:	2200      	movs	r2, #0
 8008996:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 f88e 	bl	8008abc <UART_WaitOnFlagUntilTimeout>
 80089a0:	4603      	mov	r3, r0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d022      	beq.n	80089ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ae:	e853 3f00 	ldrex	r3, [r3]
 80089b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80089b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80089ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	461a      	mov	r2, r3
 80089c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80089c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80089ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80089cc:	e841 2300 	strex	r3, r2, [r1]
 80089d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80089d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d1e6      	bne.n	80089a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2220      	movs	r2, #32
 80089dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089e8:	2303      	movs	r3, #3
 80089ea:	e063      	b.n	8008ab4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f003 0304 	and.w	r3, r3, #4
 80089f6:	2b04      	cmp	r3, #4
 80089f8:	d149      	bne.n	8008a8e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80089fe:	9300      	str	r3, [sp, #0]
 8008a00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a02:	2200      	movs	r2, #0
 8008a04:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 f857 	bl	8008abc <UART_WaitOnFlagUntilTimeout>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d03c      	beq.n	8008a8e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a1c:	e853 3f00 	ldrex	r3, [r3]
 8008a20:	623b      	str	r3, [r7, #32]
   return(result);
 8008a22:	6a3b      	ldr	r3, [r7, #32]
 8008a24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	461a      	mov	r2, r3
 8008a30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a32:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a34:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a3a:	e841 2300 	strex	r3, r2, [r1]
 8008a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1e6      	bne.n	8008a14 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	3308      	adds	r3, #8
 8008a4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	e853 3f00 	ldrex	r3, [r3]
 8008a54:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f023 0301 	bic.w	r3, r3, #1
 8008a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	3308      	adds	r3, #8
 8008a64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a66:	61fa      	str	r2, [r7, #28]
 8008a68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a6a:	69b9      	ldr	r1, [r7, #24]
 8008a6c:	69fa      	ldr	r2, [r7, #28]
 8008a6e:	e841 2300 	strex	r3, r2, [r1]
 8008a72:	617b      	str	r3, [r7, #20]
   return(result);
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d1e5      	bne.n	8008a46 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2220      	movs	r2, #32
 8008a7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a8a:	2303      	movs	r3, #3
 8008a8c:	e012      	b.n	8008ab4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2220      	movs	r2, #32
 8008a92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2220      	movs	r2, #32
 8008a9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3758      	adds	r7, #88	@ 0x58
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	603b      	str	r3, [r7, #0]
 8008ac8:	4613      	mov	r3, r2
 8008aca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008acc:	e04f      	b.n	8008b6e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ad4:	d04b      	beq.n	8008b6e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ad6:	f7f8 ffd3 	bl	8001a80 <HAL_GetTick>
 8008ada:	4602      	mov	r2, r0
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	1ad3      	subs	r3, r2, r3
 8008ae0:	69ba      	ldr	r2, [r7, #24]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d302      	bcc.n	8008aec <UART_WaitOnFlagUntilTimeout+0x30>
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d101      	bne.n	8008af0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008aec:	2303      	movs	r3, #3
 8008aee:	e04e      	b.n	8008b8e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f003 0304 	and.w	r3, r3, #4
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d037      	beq.n	8008b6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	2b80      	cmp	r3, #128	@ 0x80
 8008b02:	d034      	beq.n	8008b6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	2b40      	cmp	r3, #64	@ 0x40
 8008b08:	d031      	beq.n	8008b6e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	69db      	ldr	r3, [r3, #28]
 8008b10:	f003 0308 	and.w	r3, r3, #8
 8008b14:	2b08      	cmp	r3, #8
 8008b16:	d110      	bne.n	8008b3a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2208      	movs	r2, #8
 8008b1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f000 f95b 	bl	8008ddc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2208      	movs	r2, #8
 8008b2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2200      	movs	r2, #0
 8008b32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	e029      	b.n	8008b8e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	69db      	ldr	r3, [r3, #28]
 8008b40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b48:	d111      	bne.n	8008b6e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008b52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b54:	68f8      	ldr	r0, [r7, #12]
 8008b56:	f000 f941 	bl	8008ddc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2220      	movs	r2, #32
 8008b5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008b6a:	2303      	movs	r3, #3
 8008b6c:	e00f      	b.n	8008b8e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	69da      	ldr	r2, [r3, #28]
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	4013      	ands	r3, r2
 8008b78:	68ba      	ldr	r2, [r7, #8]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	bf0c      	ite	eq
 8008b7e:	2301      	moveq	r3, #1
 8008b80:	2300      	movne	r3, #0
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	461a      	mov	r2, r3
 8008b86:	79fb      	ldrb	r3, [r7, #7]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d0a0      	beq.n	8008ace <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3710      	adds	r7, #16
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
	...

08008b98 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b0a3      	sub	sp, #140	@ 0x8c
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	68ba      	ldr	r2, [r7, #8]
 8008baa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	88fa      	ldrh	r2, [r7, #6]
 8008bb0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	88fa      	ldrh	r2, [r7, #6]
 8008bb8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bca:	d10e      	bne.n	8008bea <UART_Start_Receive_IT+0x52>
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	691b      	ldr	r3, [r3, #16]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d105      	bne.n	8008be0 <UART_Start_Receive_IT+0x48>
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008bda:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008bde:	e02d      	b.n	8008c3c <UART_Start_Receive_IT+0xa4>
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	22ff      	movs	r2, #255	@ 0xff
 8008be4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008be8:	e028      	b.n	8008c3c <UART_Start_Receive_IT+0xa4>
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d10d      	bne.n	8008c0e <UART_Start_Receive_IT+0x76>
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	691b      	ldr	r3, [r3, #16]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d104      	bne.n	8008c04 <UART_Start_Receive_IT+0x6c>
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	22ff      	movs	r2, #255	@ 0xff
 8008bfe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008c02:	e01b      	b.n	8008c3c <UART_Start_Receive_IT+0xa4>
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	227f      	movs	r2, #127	@ 0x7f
 8008c08:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008c0c:	e016      	b.n	8008c3c <UART_Start_Receive_IT+0xa4>
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c16:	d10d      	bne.n	8008c34 <UART_Start_Receive_IT+0x9c>
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	691b      	ldr	r3, [r3, #16]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d104      	bne.n	8008c2a <UART_Start_Receive_IT+0x92>
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	227f      	movs	r2, #127	@ 0x7f
 8008c24:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008c28:	e008      	b.n	8008c3c <UART_Start_Receive_IT+0xa4>
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	223f      	movs	r2, #63	@ 0x3f
 8008c2e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008c32:	e003      	b.n	8008c3c <UART_Start_Receive_IT+0xa4>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2222      	movs	r2, #34	@ 0x22
 8008c48:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	3308      	adds	r3, #8
 8008c52:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c56:	e853 3f00 	ldrex	r3, [r3]
 8008c5a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008c5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c5e:	f043 0301 	orr.w	r3, r3, #1
 8008c62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	3308      	adds	r3, #8
 8008c6c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008c70:	673a      	str	r2, [r7, #112]	@ 0x70
 8008c72:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c74:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008c76:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008c78:	e841 2300 	strex	r3, r2, [r1]
 8008c7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008c7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d1e3      	bne.n	8008c4c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c8c:	d14f      	bne.n	8008d2e <UART_Start_Receive_IT+0x196>
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008c94:	88fa      	ldrh	r2, [r7, #6]
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d349      	bcc.n	8008d2e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ca2:	d107      	bne.n	8008cb4 <UART_Start_Receive_IT+0x11c>
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	691b      	ldr	r3, [r3, #16]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d103      	bne.n	8008cb4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	4a47      	ldr	r2, [pc, #284]	@ (8008dcc <UART_Start_Receive_IT+0x234>)
 8008cb0:	675a      	str	r2, [r3, #116]	@ 0x74
 8008cb2:	e002      	b.n	8008cba <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	4a46      	ldr	r2, [pc, #280]	@ (8008dd0 <UART_Start_Receive_IT+0x238>)
 8008cb8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	691b      	ldr	r3, [r3, #16]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d01a      	beq.n	8008cf8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cca:	e853 3f00 	ldrex	r3, [r3]
 8008cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008cd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008cd6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	461a      	mov	r2, r3
 8008ce0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008ce4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ce6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008cea:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008cec:	e841 2300 	strex	r3, r2, [r1]
 8008cf0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008cf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d1e4      	bne.n	8008cc2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	3308      	adds	r3, #8
 8008cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d02:	e853 3f00 	ldrex	r3, [r3]
 8008d06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	3308      	adds	r3, #8
 8008d16:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008d18:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008d1a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d1c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008d1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d20:	e841 2300 	strex	r3, r2, [r1]
 8008d24:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008d26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d1e5      	bne.n	8008cf8 <UART_Start_Receive_IT+0x160>
 8008d2c:	e046      	b.n	8008dbc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d36:	d107      	bne.n	8008d48 <UART_Start_Receive_IT+0x1b0>
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	691b      	ldr	r3, [r3, #16]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d103      	bne.n	8008d48 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	4a24      	ldr	r2, [pc, #144]	@ (8008dd4 <UART_Start_Receive_IT+0x23c>)
 8008d44:	675a      	str	r2, [r3, #116]	@ 0x74
 8008d46:	e002      	b.n	8008d4e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	4a23      	ldr	r2, [pc, #140]	@ (8008dd8 <UART_Start_Receive_IT+0x240>)
 8008d4c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	691b      	ldr	r3, [r3, #16]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d019      	beq.n	8008d8a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d5e:	e853 3f00 	ldrex	r3, [r3]
 8008d62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d66:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008d6a:	677b      	str	r3, [r7, #116]	@ 0x74
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	461a      	mov	r2, r3
 8008d72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d74:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d76:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d78:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008d7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d7c:	e841 2300 	strex	r3, r2, [r1]
 8008d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d1e6      	bne.n	8008d56 <UART_Start_Receive_IT+0x1be>
 8008d88:	e018      	b.n	8008dbc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	e853 3f00 	ldrex	r3, [r3]
 8008d96:	613b      	str	r3, [r7, #16]
   return(result);
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	f043 0320 	orr.w	r3, r3, #32
 8008d9e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	461a      	mov	r2, r3
 8008da6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008da8:	623b      	str	r3, [r7, #32]
 8008daa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dac:	69f9      	ldr	r1, [r7, #28]
 8008dae:	6a3a      	ldr	r2, [r7, #32]
 8008db0:	e841 2300 	strex	r3, r2, [r1]
 8008db4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d1e6      	bne.n	8008d8a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	378c      	adds	r7, #140	@ 0x8c
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	080095fd 	.word	0x080095fd
 8008dd0:	0800929d 	.word	0x0800929d
 8008dd4:	080090e5 	.word	0x080090e5
 8008dd8:	08008f2d 	.word	0x08008f2d

08008ddc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b095      	sub	sp, #84	@ 0x54
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dec:	e853 3f00 	ldrex	r3, [r3]
 8008df0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008df8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	461a      	mov	r2, r3
 8008e00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e02:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e04:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e06:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e0a:	e841 2300 	strex	r3, r2, [r1]
 8008e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1e6      	bne.n	8008de4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	3308      	adds	r3, #8
 8008e1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e1e:	6a3b      	ldr	r3, [r7, #32]
 8008e20:	e853 3f00 	ldrex	r3, [r3]
 8008e24:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e26:	69fa      	ldr	r2, [r7, #28]
 8008e28:	4b1e      	ldr	r3, [pc, #120]	@ (8008ea4 <UART_EndRxTransfer+0xc8>)
 8008e2a:	4013      	ands	r3, r2
 8008e2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	3308      	adds	r3, #8
 8008e34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008e38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e3e:	e841 2300 	strex	r3, r2, [r1]
 8008e42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d1e5      	bne.n	8008e16 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d118      	bne.n	8008e84 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	e853 3f00 	ldrex	r3, [r3]
 8008e5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	f023 0310 	bic.w	r3, r3, #16
 8008e66:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e70:	61bb      	str	r3, [r7, #24]
 8008e72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e74:	6979      	ldr	r1, [r7, #20]
 8008e76:	69ba      	ldr	r2, [r7, #24]
 8008e78:	e841 2300 	strex	r3, r2, [r1]
 8008e7c:	613b      	str	r3, [r7, #16]
   return(result);
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d1e6      	bne.n	8008e52 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2220      	movs	r2, #32
 8008e88:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008e98:	bf00      	nop
 8008e9a:	3754      	adds	r7, #84	@ 0x54
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr
 8008ea4:	effffffe 	.word	0xeffffffe

08008ea8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ec6:	68f8      	ldr	r0, [r7, #12]
 8008ec8:	f7fe ff2e 	bl	8007d28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ecc:	bf00      	nop
 8008ece:	3710      	adds	r7, #16
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b088      	sub	sp, #32
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	e853 3f00 	ldrex	r3, [r3]
 8008ee8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ef0:	61fb      	str	r3, [r7, #28]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	69fb      	ldr	r3, [r7, #28]
 8008efa:	61bb      	str	r3, [r7, #24]
 8008efc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008efe:	6979      	ldr	r1, [r7, #20]
 8008f00:	69ba      	ldr	r2, [r7, #24]
 8008f02:	e841 2300 	strex	r3, r2, [r1]
 8008f06:	613b      	str	r3, [r7, #16]
   return(result);
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d1e6      	bne.n	8008edc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2220      	movs	r2, #32
 8008f12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f7fe fef9 	bl	8007d14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f22:	bf00      	nop
 8008f24:	3720      	adds	r7, #32
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
	...

08008f2c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b09c      	sub	sp, #112	@ 0x70
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008f3a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f44:	2b22      	cmp	r3, #34	@ 0x22
 8008f46:	f040 80be 	bne.w	80090c6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f50:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008f54:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008f58:	b2d9      	uxtb	r1, r3
 8008f5a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008f5e:	b2da      	uxtb	r2, r3
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f64:	400a      	ands	r2, r1
 8008f66:	b2d2      	uxtb	r2, r2
 8008f68:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f6e:	1c5a      	adds	r2, r3, #1
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	b29a      	uxth	r2, r3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	f040 80a1 	bne.w	80090d6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f9c:	e853 3f00 	ldrex	r3, [r3]
 8008fa0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008fa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fa4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008fa8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	461a      	mov	r2, r3
 8008fb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008fb2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008fb4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008fb8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008fba:	e841 2300 	strex	r3, r2, [r1]
 8008fbe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008fc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d1e6      	bne.n	8008f94 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	3308      	adds	r3, #8
 8008fcc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fd0:	e853 3f00 	ldrex	r3, [r3]
 8008fd4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fd8:	f023 0301 	bic.w	r3, r3, #1
 8008fdc:	667b      	str	r3, [r7, #100]	@ 0x64
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	3308      	adds	r3, #8
 8008fe4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008fe6:	647a      	str	r2, [r7, #68]	@ 0x44
 8008fe8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008fec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008fee:	e841 2300 	strex	r3, r2, [r1]
 8008ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1e5      	bne.n	8008fc6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2220      	movs	r2, #32
 8008ffe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a33      	ldr	r2, [pc, #204]	@ (80090e0 <UART_RxISR_8BIT+0x1b4>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d01f      	beq.n	8009058 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009022:	2b00      	cmp	r3, #0
 8009024:	d018      	beq.n	8009058 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800902e:	e853 3f00 	ldrex	r3, [r3]
 8009032:	623b      	str	r3, [r7, #32]
   return(result);
 8009034:	6a3b      	ldr	r3, [r7, #32]
 8009036:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800903a:	663b      	str	r3, [r7, #96]	@ 0x60
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	461a      	mov	r2, r3
 8009042:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009044:	633b      	str	r3, [r7, #48]	@ 0x30
 8009046:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009048:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800904a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800904c:	e841 2300 	strex	r3, r2, [r1]
 8009050:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009054:	2b00      	cmp	r3, #0
 8009056:	d1e6      	bne.n	8009026 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800905c:	2b01      	cmp	r3, #1
 800905e:	d12e      	bne.n	80090be <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	e853 3f00 	ldrex	r3, [r3]
 8009072:	60fb      	str	r3, [r7, #12]
   return(result);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f023 0310 	bic.w	r3, r3, #16
 800907a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	461a      	mov	r2, r3
 8009082:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009084:	61fb      	str	r3, [r7, #28]
 8009086:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009088:	69b9      	ldr	r1, [r7, #24]
 800908a:	69fa      	ldr	r2, [r7, #28]
 800908c:	e841 2300 	strex	r3, r2, [r1]
 8009090:	617b      	str	r3, [r7, #20]
   return(result);
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d1e6      	bne.n	8009066 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	69db      	ldr	r3, [r3, #28]
 800909e:	f003 0310 	and.w	r3, r3, #16
 80090a2:	2b10      	cmp	r3, #16
 80090a4:	d103      	bne.n	80090ae <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	2210      	movs	r2, #16
 80090ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80090b4:	4619      	mov	r1, r3
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f7fe fe40 	bl	8007d3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80090bc:	e00b      	b.n	80090d6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f7f8 f81a 	bl	80010f8 <HAL_UART_RxCpltCallback>
}
 80090c4:	e007      	b.n	80090d6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	699a      	ldr	r2, [r3, #24]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f042 0208 	orr.w	r2, r2, #8
 80090d4:	619a      	str	r2, [r3, #24]
}
 80090d6:	bf00      	nop
 80090d8:	3770      	adds	r7, #112	@ 0x70
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	58000c00 	.word	0x58000c00

080090e4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b09c      	sub	sp, #112	@ 0x70
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80090f2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80090fc:	2b22      	cmp	r3, #34	@ 0x22
 80090fe:	f040 80be 	bne.w	800927e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009108:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009110:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009112:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009116:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800911a:	4013      	ands	r3, r2
 800911c:	b29a      	uxth	r2, r3
 800911e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009120:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009126:	1c9a      	adds	r2, r3, #2
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009132:	b29b      	uxth	r3, r3
 8009134:	3b01      	subs	r3, #1
 8009136:	b29a      	uxth	r2, r3
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009144:	b29b      	uxth	r3, r3
 8009146:	2b00      	cmp	r3, #0
 8009148:	f040 80a1 	bne.w	800928e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009152:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009154:	e853 3f00 	ldrex	r3, [r3]
 8009158:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800915a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800915c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009160:	667b      	str	r3, [r7, #100]	@ 0x64
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	461a      	mov	r2, r3
 8009168:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800916a:	657b      	str	r3, [r7, #84]	@ 0x54
 800916c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009170:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009172:	e841 2300 	strex	r3, r2, [r1]
 8009176:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009178:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800917a:	2b00      	cmp	r3, #0
 800917c:	d1e6      	bne.n	800914c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	3308      	adds	r3, #8
 8009184:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009188:	e853 3f00 	ldrex	r3, [r3]
 800918c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800918e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009190:	f023 0301 	bic.w	r3, r3, #1
 8009194:	663b      	str	r3, [r7, #96]	@ 0x60
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	3308      	adds	r3, #8
 800919c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800919e:	643a      	str	r2, [r7, #64]	@ 0x40
 80091a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80091a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80091a6:	e841 2300 	strex	r3, r2, [r1]
 80091aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80091ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d1e5      	bne.n	800917e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2220      	movs	r2, #32
 80091b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a33      	ldr	r2, [pc, #204]	@ (8009298 <UART_RxISR_16BIT+0x1b4>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d01f      	beq.n	8009210 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d018      	beq.n	8009210 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e4:	6a3b      	ldr	r3, [r7, #32]
 80091e6:	e853 3f00 	ldrex	r3, [r3]
 80091ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80091f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	461a      	mov	r2, r3
 80091fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091fe:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009200:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009202:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009204:	e841 2300 	strex	r3, r2, [r1]
 8009208:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800920a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800920c:	2b00      	cmp	r3, #0
 800920e:	d1e6      	bne.n	80091de <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009214:	2b01      	cmp	r3, #1
 8009216:	d12e      	bne.n	8009276 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	e853 3f00 	ldrex	r3, [r3]
 800922a:	60bb      	str	r3, [r7, #8]
   return(result);
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	f023 0310 	bic.w	r3, r3, #16
 8009232:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	461a      	mov	r2, r3
 800923a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800923c:	61bb      	str	r3, [r7, #24]
 800923e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009240:	6979      	ldr	r1, [r7, #20]
 8009242:	69ba      	ldr	r2, [r7, #24]
 8009244:	e841 2300 	strex	r3, r2, [r1]
 8009248:	613b      	str	r3, [r7, #16]
   return(result);
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d1e6      	bne.n	800921e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	69db      	ldr	r3, [r3, #28]
 8009256:	f003 0310 	and.w	r3, r3, #16
 800925a:	2b10      	cmp	r3, #16
 800925c:	d103      	bne.n	8009266 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2210      	movs	r2, #16
 8009264:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800926c:	4619      	mov	r1, r3
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f7fe fd64 	bl	8007d3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009274:	e00b      	b.n	800928e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f7f7 ff3e 	bl	80010f8 <HAL_UART_RxCpltCallback>
}
 800927c:	e007      	b.n	800928e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	699a      	ldr	r2, [r3, #24]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f042 0208 	orr.w	r2, r2, #8
 800928c:	619a      	str	r2, [r3, #24]
}
 800928e:	bf00      	nop
 8009290:	3770      	adds	r7, #112	@ 0x70
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	58000c00 	.word	0x58000c00

0800929c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b0ac      	sub	sp, #176	@ 0xb0
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80092aa:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	69db      	ldr	r3, [r3, #28]
 80092b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092d2:	2b22      	cmp	r3, #34	@ 0x22
 80092d4:	f040 8180 	bne.w	80095d8 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80092de:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80092e2:	e123      	b.n	800952c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ea:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80092ee:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80092f2:	b2d9      	uxtb	r1, r3
 80092f4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80092f8:	b2da      	uxtb	r2, r3
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092fe:	400a      	ands	r2, r1
 8009300:	b2d2      	uxtb	r2, r2
 8009302:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009308:	1c5a      	adds	r2, r3, #1
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009314:	b29b      	uxth	r3, r3
 8009316:	3b01      	subs	r3, #1
 8009318:	b29a      	uxth	r2, r3
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	69db      	ldr	r3, [r3, #28]
 8009326:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800932a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800932e:	f003 0307 	and.w	r3, r3, #7
 8009332:	2b00      	cmp	r3, #0
 8009334:	d053      	beq.n	80093de <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009336:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800933a:	f003 0301 	and.w	r3, r3, #1
 800933e:	2b00      	cmp	r3, #0
 8009340:	d011      	beq.n	8009366 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009342:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00b      	beq.n	8009366 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	2201      	movs	r2, #1
 8009354:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800935c:	f043 0201 	orr.w	r2, r3, #1
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009366:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800936a:	f003 0302 	and.w	r3, r3, #2
 800936e:	2b00      	cmp	r3, #0
 8009370:	d011      	beq.n	8009396 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009372:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009376:	f003 0301 	and.w	r3, r3, #1
 800937a:	2b00      	cmp	r3, #0
 800937c:	d00b      	beq.n	8009396 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2202      	movs	r2, #2
 8009384:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800938c:	f043 0204 	orr.w	r2, r3, #4
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009396:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800939a:	f003 0304 	and.w	r3, r3, #4
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d011      	beq.n	80093c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80093a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80093a6:	f003 0301 	and.w	r3, r3, #1
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d00b      	beq.n	80093c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2204      	movs	r2, #4
 80093b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093bc:	f043 0202 	orr.w	r2, r3, #2
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d006      	beq.n	80093de <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f7fe fca9 	bl	8007d28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	f040 80a0 	bne.w	800952c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80093f4:	e853 3f00 	ldrex	r3, [r3]
 80093f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80093fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009400:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	461a      	mov	r2, r3
 800940a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800940e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009410:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009412:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009414:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009416:	e841 2300 	strex	r3, r2, [r1]
 800941a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800941c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800941e:	2b00      	cmp	r3, #0
 8009420:	d1e4      	bne.n	80093ec <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	3308      	adds	r3, #8
 8009428:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800942a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800942c:	e853 3f00 	ldrex	r3, [r3]
 8009430:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009432:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009434:	4b6e      	ldr	r3, [pc, #440]	@ (80095f0 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8009436:	4013      	ands	r3, r2
 8009438:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	3308      	adds	r3, #8
 8009442:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009446:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009448:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800944a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800944c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800944e:	e841 2300 	strex	r3, r2, [r1]
 8009452:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009454:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009456:	2b00      	cmp	r3, #0
 8009458:	d1e3      	bne.n	8009422 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2220      	movs	r2, #32
 800945e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2200      	movs	r2, #0
 8009466:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a60      	ldr	r2, [pc, #384]	@ (80095f4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d021      	beq.n	80094bc <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009482:	2b00      	cmp	r3, #0
 8009484:	d01a      	beq.n	80094bc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800948e:	e853 3f00 	ldrex	r3, [r3]
 8009492:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009494:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009496:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800949a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	461a      	mov	r2, r3
 80094a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80094a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80094aa:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ac:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80094ae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80094b0:	e841 2300 	strex	r3, r2, [r1]
 80094b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80094b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d1e4      	bne.n	8009486 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d130      	bne.n	8009526 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094d2:	e853 3f00 	ldrex	r3, [r3]
 80094d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80094d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094da:	f023 0310 	bic.w	r3, r3, #16
 80094de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	461a      	mov	r2, r3
 80094e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80094ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80094ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80094f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80094f4:	e841 2300 	strex	r3, r2, [r1]
 80094f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80094fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d1e4      	bne.n	80094ca <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	69db      	ldr	r3, [r3, #28]
 8009506:	f003 0310 	and.w	r3, r3, #16
 800950a:	2b10      	cmp	r3, #16
 800950c:	d103      	bne.n	8009516 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2210      	movs	r2, #16
 8009514:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800951c:	4619      	mov	r1, r3
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f7fe fc0c 	bl	8007d3c <HAL_UARTEx_RxEventCallback>
 8009524:	e002      	b.n	800952c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f7f7 fde6 	bl	80010f8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800952c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009530:	2b00      	cmp	r3, #0
 8009532:	d006      	beq.n	8009542 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8009534:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009538:	f003 0320 	and.w	r3, r3, #32
 800953c:	2b00      	cmp	r3, #0
 800953e:	f47f aed1 	bne.w	80092e4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009548:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800954c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009550:	2b00      	cmp	r3, #0
 8009552:	d049      	beq.n	80095e8 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800955a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800955e:	429a      	cmp	r2, r3
 8009560:	d242      	bcs.n	80095e8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	3308      	adds	r3, #8
 8009568:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800956a:	6a3b      	ldr	r3, [r7, #32]
 800956c:	e853 3f00 	ldrex	r3, [r3]
 8009570:	61fb      	str	r3, [r7, #28]
   return(result);
 8009572:	69fb      	ldr	r3, [r7, #28]
 8009574:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009578:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	3308      	adds	r3, #8
 8009582:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009586:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009588:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800958a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800958c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800958e:	e841 2300 	strex	r3, r2, [r1]
 8009592:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009596:	2b00      	cmp	r3, #0
 8009598:	d1e3      	bne.n	8009562 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	4a16      	ldr	r2, [pc, #88]	@ (80095f8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800959e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	e853 3f00 	ldrex	r3, [r3]
 80095ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	f043 0320 	orr.w	r3, r3, #32
 80095b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	461a      	mov	r2, r3
 80095be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80095c2:	61bb      	str	r3, [r7, #24]
 80095c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c6:	6979      	ldr	r1, [r7, #20]
 80095c8:	69ba      	ldr	r2, [r7, #24]
 80095ca:	e841 2300 	strex	r3, r2, [r1]
 80095ce:	613b      	str	r3, [r7, #16]
   return(result);
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d1e4      	bne.n	80095a0 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095d6:	e007      	b.n	80095e8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	699a      	ldr	r2, [r3, #24]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f042 0208 	orr.w	r2, r2, #8
 80095e6:	619a      	str	r2, [r3, #24]
}
 80095e8:	bf00      	nop
 80095ea:	37b0      	adds	r7, #176	@ 0xb0
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}
 80095f0:	effffffe 	.word	0xeffffffe
 80095f4:	58000c00 	.word	0x58000c00
 80095f8:	08008f2d 	.word	0x08008f2d

080095fc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b0ae      	sub	sp, #184	@ 0xb8
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800960a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	69db      	ldr	r3, [r3, #28]
 8009614:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009632:	2b22      	cmp	r3, #34	@ 0x22
 8009634:	f040 8184 	bne.w	8009940 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800963e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009642:	e127      	b.n	8009894 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800964a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009652:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009656:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800965a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800965e:	4013      	ands	r3, r2
 8009660:	b29a      	uxth	r2, r3
 8009662:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009666:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800966c:	1c9a      	adds	r2, r3, #2
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009678:	b29b      	uxth	r3, r3
 800967a:	3b01      	subs	r3, #1
 800967c:	b29a      	uxth	r2, r3
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	69db      	ldr	r3, [r3, #28]
 800968a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800968e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009692:	f003 0307 	and.w	r3, r3, #7
 8009696:	2b00      	cmp	r3, #0
 8009698:	d053      	beq.n	8009742 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800969a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800969e:	f003 0301 	and.w	r3, r3, #1
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d011      	beq.n	80096ca <UART_RxISR_16BIT_FIFOEN+0xce>
 80096a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80096aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d00b      	beq.n	80096ca <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	2201      	movs	r2, #1
 80096b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096c0:	f043 0201 	orr.w	r2, r3, #1
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80096ce:	f003 0302 	and.w	r3, r3, #2
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d011      	beq.n	80096fa <UART_RxISR_16BIT_FIFOEN+0xfe>
 80096d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80096da:	f003 0301 	and.w	r3, r3, #1
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d00b      	beq.n	80096fa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2202      	movs	r2, #2
 80096e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096f0:	f043 0204 	orr.w	r2, r3, #4
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80096fe:	f003 0304 	and.w	r3, r3, #4
 8009702:	2b00      	cmp	r3, #0
 8009704:	d011      	beq.n	800972a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009706:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800970a:	f003 0301 	and.w	r3, r3, #1
 800970e:	2b00      	cmp	r3, #0
 8009710:	d00b      	beq.n	800972a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2204      	movs	r2, #4
 8009718:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009720:	f043 0202 	orr.w	r2, r3, #2
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009730:	2b00      	cmp	r3, #0
 8009732:	d006      	beq.n	8009742 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f7fe faf7 	bl	8007d28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2200      	movs	r2, #0
 800973e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009748:	b29b      	uxth	r3, r3
 800974a:	2b00      	cmp	r3, #0
 800974c:	f040 80a2 	bne.w	8009894 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009756:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009758:	e853 3f00 	ldrex	r3, [r3]
 800975c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800975e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009760:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009764:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	461a      	mov	r2, r3
 800976e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009772:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009776:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009778:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800977a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800977e:	e841 2300 	strex	r3, r2, [r1]
 8009782:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009784:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009786:	2b00      	cmp	r3, #0
 8009788:	d1e2      	bne.n	8009750 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	3308      	adds	r3, #8
 8009790:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009792:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009794:	e853 3f00 	ldrex	r3, [r3]
 8009798:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800979a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800979c:	4b6e      	ldr	r3, [pc, #440]	@ (8009958 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800979e:	4013      	ands	r3, r2
 80097a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	3308      	adds	r3, #8
 80097aa:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80097ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80097b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80097b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80097b6:	e841 2300 	strex	r3, r2, [r1]
 80097ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80097bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d1e3      	bne.n	800978a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2220      	movs	r2, #32
 80097c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2200      	movs	r2, #0
 80097d4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a60      	ldr	r2, [pc, #384]	@ (800995c <UART_RxISR_16BIT_FIFOEN+0x360>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d021      	beq.n	8009824 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d01a      	beq.n	8009824 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097f6:	e853 3f00 	ldrex	r3, [r3]
 80097fa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80097fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009802:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	461a      	mov	r2, r3
 800980c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009810:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009812:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009814:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009816:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009818:	e841 2300 	strex	r3, r2, [r1]
 800981c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800981e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009820:	2b00      	cmp	r3, #0
 8009822:	d1e4      	bne.n	80097ee <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009828:	2b01      	cmp	r3, #1
 800982a:	d130      	bne.n	800988e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800983a:	e853 3f00 	ldrex	r3, [r3]
 800983e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009842:	f023 0310 	bic.w	r3, r3, #16
 8009846:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	461a      	mov	r2, r3
 8009850:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009854:	647b      	str	r3, [r7, #68]	@ 0x44
 8009856:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009858:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800985a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800985c:	e841 2300 	strex	r3, r2, [r1]
 8009860:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009864:	2b00      	cmp	r3, #0
 8009866:	d1e4      	bne.n	8009832 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	69db      	ldr	r3, [r3, #28]
 800986e:	f003 0310 	and.w	r3, r3, #16
 8009872:	2b10      	cmp	r3, #16
 8009874:	d103      	bne.n	800987e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	2210      	movs	r2, #16
 800987c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009884:	4619      	mov	r1, r3
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f7fe fa58 	bl	8007d3c <HAL_UARTEx_RxEventCallback>
 800988c:	e002      	b.n	8009894 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f7f7 fc32 	bl	80010f8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009894:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009898:	2b00      	cmp	r3, #0
 800989a:	d006      	beq.n	80098aa <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800989c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80098a0:	f003 0320 	and.w	r3, r3, #32
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f47f aecd 	bne.w	8009644 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80098b0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80098b4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d049      	beq.n	8009950 <UART_RxISR_16BIT_FIFOEN+0x354>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80098c2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d242      	bcs.n	8009950 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	3308      	adds	r3, #8
 80098d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098d4:	e853 3f00 	ldrex	r3, [r3]
 80098d8:	623b      	str	r3, [r7, #32]
   return(result);
 80098da:	6a3b      	ldr	r3, [r7, #32]
 80098dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80098e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	3308      	adds	r3, #8
 80098ea:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80098ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80098f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80098f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098f6:	e841 2300 	strex	r3, r2, [r1]
 80098fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80098fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d1e3      	bne.n	80098ca <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	4a16      	ldr	r2, [pc, #88]	@ (8009960 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009906:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	e853 3f00 	ldrex	r3, [r3]
 8009914:	60fb      	str	r3, [r7, #12]
   return(result);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f043 0320 	orr.w	r3, r3, #32
 800991c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	461a      	mov	r2, r3
 8009926:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800992a:	61fb      	str	r3, [r7, #28]
 800992c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800992e:	69b9      	ldr	r1, [r7, #24]
 8009930:	69fa      	ldr	r2, [r7, #28]
 8009932:	e841 2300 	strex	r3, r2, [r1]
 8009936:	617b      	str	r3, [r7, #20]
   return(result);
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d1e4      	bne.n	8009908 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800993e:	e007      	b.n	8009950 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	699a      	ldr	r2, [r3, #24]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f042 0208 	orr.w	r2, r2, #8
 800994e:	619a      	str	r2, [r3, #24]
}
 8009950:	bf00      	nop
 8009952:	37b8      	adds	r7, #184	@ 0xb8
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}
 8009958:	effffffe 	.word	0xeffffffe
 800995c:	58000c00 	.word	0x58000c00
 8009960:	080090e5 	.word	0x080090e5

08009964 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800996c:	bf00      	nop
 800996e:	370c      	adds	r7, #12
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009978:	b480      	push	{r7}
 800997a:	b083      	sub	sp, #12
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009980:	bf00      	nop
 8009982:	370c      	adds	r7, #12
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr

0800998c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009994:	bf00      	nop
 8009996:	370c      	adds	r7, #12
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b085      	sub	sp, #20
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d101      	bne.n	80099b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80099b2:	2302      	movs	r3, #2
 80099b4:	e027      	b.n	8009a06 <HAL_UARTEx_DisableFifoMode+0x66>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2201      	movs	r2, #1
 80099ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2224      	movs	r2, #36	@ 0x24
 80099c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f022 0201 	bic.w	r2, r2, #1
 80099dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80099e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2200      	movs	r2, #0
 80099ea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2220      	movs	r2, #32
 80099f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3714      	adds	r7, #20
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr

08009a12 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a12:	b580      	push	{r7, lr}
 8009a14:	b084      	sub	sp, #16
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
 8009a1a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d101      	bne.n	8009a2a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009a26:	2302      	movs	r3, #2
 8009a28:	e02d      	b.n	8009a86 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2224      	movs	r2, #36	@ 0x24
 8009a36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f022 0201 	bic.w	r2, r2, #1
 8009a50:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	683a      	ldr	r2, [r7, #0]
 8009a62:	430a      	orrs	r2, r1
 8009a64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 f850 	bl	8009b0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	68fa      	ldr	r2, [r7, #12]
 8009a72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2220      	movs	r2, #32
 8009a78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a84:	2300      	movs	r3, #0
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}

08009a8e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a8e:	b580      	push	{r7, lr}
 8009a90:	b084      	sub	sp, #16
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
 8009a96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	d101      	bne.n	8009aa6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009aa2:	2302      	movs	r3, #2
 8009aa4:	e02d      	b.n	8009b02 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2224      	movs	r2, #36	@ 0x24
 8009ab2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f022 0201 	bic.w	r2, r2, #1
 8009acc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	689b      	ldr	r3, [r3, #8]
 8009ad4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	683a      	ldr	r2, [r7, #0]
 8009ade:	430a      	orrs	r2, r1
 8009ae0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 f812 	bl	8009b0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	68fa      	ldr	r2, [r7, #12]
 8009aee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2220      	movs	r2, #32
 8009af4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3710      	adds	r7, #16
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
	...

08009b0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b085      	sub	sp, #20
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d108      	bne.n	8009b2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2201      	movs	r2, #1
 8009b28:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009b2c:	e031      	b.n	8009b92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009b2e:	2310      	movs	r3, #16
 8009b30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009b32:	2310      	movs	r3, #16
 8009b34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	0e5b      	lsrs	r3, r3, #25
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	f003 0307 	and.w	r3, r3, #7
 8009b44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	0f5b      	lsrs	r3, r3, #29
 8009b4e:	b2db      	uxtb	r3, r3
 8009b50:	f003 0307 	and.w	r3, r3, #7
 8009b54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b56:	7bbb      	ldrb	r3, [r7, #14]
 8009b58:	7b3a      	ldrb	r2, [r7, #12]
 8009b5a:	4911      	ldr	r1, [pc, #68]	@ (8009ba0 <UARTEx_SetNbDataToProcess+0x94>)
 8009b5c:	5c8a      	ldrb	r2, [r1, r2]
 8009b5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009b62:	7b3a      	ldrb	r2, [r7, #12]
 8009b64:	490f      	ldr	r1, [pc, #60]	@ (8009ba4 <UARTEx_SetNbDataToProcess+0x98>)
 8009b66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b68:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b6c:	b29a      	uxth	r2, r3
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b74:	7bfb      	ldrb	r3, [r7, #15]
 8009b76:	7b7a      	ldrb	r2, [r7, #13]
 8009b78:	4909      	ldr	r1, [pc, #36]	@ (8009ba0 <UARTEx_SetNbDataToProcess+0x94>)
 8009b7a:	5c8a      	ldrb	r2, [r1, r2]
 8009b7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009b80:	7b7a      	ldrb	r2, [r7, #13]
 8009b82:	4908      	ldr	r1, [pc, #32]	@ (8009ba4 <UARTEx_SetNbDataToProcess+0x98>)
 8009b84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b86:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b8a:	b29a      	uxth	r2, r3
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009b92:	bf00      	nop
 8009b94:	3714      	adds	r7, #20
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr
 8009b9e:	bf00      	nop
 8009ba0:	0800e0f8 	.word	0x0800e0f8
 8009ba4:	0800e100 	.word	0x0800e100

08009ba8 <__cvt>:
 8009ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009baa:	ed2d 8b02 	vpush	{d8}
 8009bae:	eeb0 8b40 	vmov.f64	d8, d0
 8009bb2:	b085      	sub	sp, #20
 8009bb4:	4617      	mov	r7, r2
 8009bb6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8009bb8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009bba:	ee18 2a90 	vmov	r2, s17
 8009bbe:	f025 0520 	bic.w	r5, r5, #32
 8009bc2:	2a00      	cmp	r2, #0
 8009bc4:	bfb6      	itet	lt
 8009bc6:	222d      	movlt	r2, #45	@ 0x2d
 8009bc8:	2200      	movge	r2, #0
 8009bca:	eeb1 8b40 	vneglt.f64	d8, d0
 8009bce:	2d46      	cmp	r5, #70	@ 0x46
 8009bd0:	460c      	mov	r4, r1
 8009bd2:	701a      	strb	r2, [r3, #0]
 8009bd4:	d004      	beq.n	8009be0 <__cvt+0x38>
 8009bd6:	2d45      	cmp	r5, #69	@ 0x45
 8009bd8:	d100      	bne.n	8009bdc <__cvt+0x34>
 8009bda:	3401      	adds	r4, #1
 8009bdc:	2102      	movs	r1, #2
 8009bde:	e000      	b.n	8009be2 <__cvt+0x3a>
 8009be0:	2103      	movs	r1, #3
 8009be2:	ab03      	add	r3, sp, #12
 8009be4:	9301      	str	r3, [sp, #4]
 8009be6:	ab02      	add	r3, sp, #8
 8009be8:	9300      	str	r3, [sp, #0]
 8009bea:	4622      	mov	r2, r4
 8009bec:	4633      	mov	r3, r6
 8009bee:	eeb0 0b48 	vmov.f64	d0, d8
 8009bf2:	f001 f851 	bl	800ac98 <_dtoa_r>
 8009bf6:	2d47      	cmp	r5, #71	@ 0x47
 8009bf8:	d114      	bne.n	8009c24 <__cvt+0x7c>
 8009bfa:	07fb      	lsls	r3, r7, #31
 8009bfc:	d50a      	bpl.n	8009c14 <__cvt+0x6c>
 8009bfe:	1902      	adds	r2, r0, r4
 8009c00:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c08:	bf08      	it	eq
 8009c0a:	9203      	streq	r2, [sp, #12]
 8009c0c:	2130      	movs	r1, #48	@ 0x30
 8009c0e:	9b03      	ldr	r3, [sp, #12]
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d319      	bcc.n	8009c48 <__cvt+0xa0>
 8009c14:	9b03      	ldr	r3, [sp, #12]
 8009c16:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c18:	1a1b      	subs	r3, r3, r0
 8009c1a:	6013      	str	r3, [r2, #0]
 8009c1c:	b005      	add	sp, #20
 8009c1e:	ecbd 8b02 	vpop	{d8}
 8009c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c24:	2d46      	cmp	r5, #70	@ 0x46
 8009c26:	eb00 0204 	add.w	r2, r0, r4
 8009c2a:	d1e9      	bne.n	8009c00 <__cvt+0x58>
 8009c2c:	7803      	ldrb	r3, [r0, #0]
 8009c2e:	2b30      	cmp	r3, #48	@ 0x30
 8009c30:	d107      	bne.n	8009c42 <__cvt+0x9a>
 8009c32:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c3a:	bf1c      	itt	ne
 8009c3c:	f1c4 0401 	rsbne	r4, r4, #1
 8009c40:	6034      	strne	r4, [r6, #0]
 8009c42:	6833      	ldr	r3, [r6, #0]
 8009c44:	441a      	add	r2, r3
 8009c46:	e7db      	b.n	8009c00 <__cvt+0x58>
 8009c48:	1c5c      	adds	r4, r3, #1
 8009c4a:	9403      	str	r4, [sp, #12]
 8009c4c:	7019      	strb	r1, [r3, #0]
 8009c4e:	e7de      	b.n	8009c0e <__cvt+0x66>

08009c50 <__exponent>:
 8009c50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c52:	2900      	cmp	r1, #0
 8009c54:	bfba      	itte	lt
 8009c56:	4249      	neglt	r1, r1
 8009c58:	232d      	movlt	r3, #45	@ 0x2d
 8009c5a:	232b      	movge	r3, #43	@ 0x2b
 8009c5c:	2909      	cmp	r1, #9
 8009c5e:	7002      	strb	r2, [r0, #0]
 8009c60:	7043      	strb	r3, [r0, #1]
 8009c62:	dd29      	ble.n	8009cb8 <__exponent+0x68>
 8009c64:	f10d 0307 	add.w	r3, sp, #7
 8009c68:	461d      	mov	r5, r3
 8009c6a:	270a      	movs	r7, #10
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	fbb1 f6f7 	udiv	r6, r1, r7
 8009c72:	fb07 1416 	mls	r4, r7, r6, r1
 8009c76:	3430      	adds	r4, #48	@ 0x30
 8009c78:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009c7c:	460c      	mov	r4, r1
 8009c7e:	2c63      	cmp	r4, #99	@ 0x63
 8009c80:	f103 33ff 	add.w	r3, r3, #4294967295
 8009c84:	4631      	mov	r1, r6
 8009c86:	dcf1      	bgt.n	8009c6c <__exponent+0x1c>
 8009c88:	3130      	adds	r1, #48	@ 0x30
 8009c8a:	1e94      	subs	r4, r2, #2
 8009c8c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009c90:	1c41      	adds	r1, r0, #1
 8009c92:	4623      	mov	r3, r4
 8009c94:	42ab      	cmp	r3, r5
 8009c96:	d30a      	bcc.n	8009cae <__exponent+0x5e>
 8009c98:	f10d 0309 	add.w	r3, sp, #9
 8009c9c:	1a9b      	subs	r3, r3, r2
 8009c9e:	42ac      	cmp	r4, r5
 8009ca0:	bf88      	it	hi
 8009ca2:	2300      	movhi	r3, #0
 8009ca4:	3302      	adds	r3, #2
 8009ca6:	4403      	add	r3, r0
 8009ca8:	1a18      	subs	r0, r3, r0
 8009caa:	b003      	add	sp, #12
 8009cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cae:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009cb2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009cb6:	e7ed      	b.n	8009c94 <__exponent+0x44>
 8009cb8:	2330      	movs	r3, #48	@ 0x30
 8009cba:	3130      	adds	r1, #48	@ 0x30
 8009cbc:	7083      	strb	r3, [r0, #2]
 8009cbe:	70c1      	strb	r1, [r0, #3]
 8009cc0:	1d03      	adds	r3, r0, #4
 8009cc2:	e7f1      	b.n	8009ca8 <__exponent+0x58>
 8009cc4:	0000      	movs	r0, r0
	...

08009cc8 <_printf_float>:
 8009cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ccc:	b08d      	sub	sp, #52	@ 0x34
 8009cce:	460c      	mov	r4, r1
 8009cd0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009cd4:	4616      	mov	r6, r2
 8009cd6:	461f      	mov	r7, r3
 8009cd8:	4605      	mov	r5, r0
 8009cda:	f000 fed7 	bl	800aa8c <_localeconv_r>
 8009cde:	f8d0 b000 	ldr.w	fp, [r0]
 8009ce2:	4658      	mov	r0, fp
 8009ce4:	f7f6 fb4c 	bl	8000380 <strlen>
 8009ce8:	2300      	movs	r3, #0
 8009cea:	930a      	str	r3, [sp, #40]	@ 0x28
 8009cec:	f8d8 3000 	ldr.w	r3, [r8]
 8009cf0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009cf4:	6822      	ldr	r2, [r4, #0]
 8009cf6:	9005      	str	r0, [sp, #20]
 8009cf8:	3307      	adds	r3, #7
 8009cfa:	f023 0307 	bic.w	r3, r3, #7
 8009cfe:	f103 0108 	add.w	r1, r3, #8
 8009d02:	f8c8 1000 	str.w	r1, [r8]
 8009d06:	ed93 0b00 	vldr	d0, [r3]
 8009d0a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8009f68 <_printf_float+0x2a0>
 8009d0e:	eeb0 7bc0 	vabs.f64	d7, d0
 8009d12:	eeb4 7b46 	vcmp.f64	d7, d6
 8009d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d1a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8009d1e:	dd24      	ble.n	8009d6a <_printf_float+0xa2>
 8009d20:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d28:	d502      	bpl.n	8009d30 <_printf_float+0x68>
 8009d2a:	232d      	movs	r3, #45	@ 0x2d
 8009d2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d30:	498f      	ldr	r1, [pc, #572]	@ (8009f70 <_printf_float+0x2a8>)
 8009d32:	4b90      	ldr	r3, [pc, #576]	@ (8009f74 <_printf_float+0x2ac>)
 8009d34:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8009d38:	bf94      	ite	ls
 8009d3a:	4688      	movls	r8, r1
 8009d3c:	4698      	movhi	r8, r3
 8009d3e:	f022 0204 	bic.w	r2, r2, #4
 8009d42:	2303      	movs	r3, #3
 8009d44:	6123      	str	r3, [r4, #16]
 8009d46:	6022      	str	r2, [r4, #0]
 8009d48:	f04f 0a00 	mov.w	sl, #0
 8009d4c:	9700      	str	r7, [sp, #0]
 8009d4e:	4633      	mov	r3, r6
 8009d50:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009d52:	4621      	mov	r1, r4
 8009d54:	4628      	mov	r0, r5
 8009d56:	f000 f9d1 	bl	800a0fc <_printf_common>
 8009d5a:	3001      	adds	r0, #1
 8009d5c:	f040 8089 	bne.w	8009e72 <_printf_float+0x1aa>
 8009d60:	f04f 30ff 	mov.w	r0, #4294967295
 8009d64:	b00d      	add	sp, #52	@ 0x34
 8009d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d6a:	eeb4 0b40 	vcmp.f64	d0, d0
 8009d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d72:	d709      	bvc.n	8009d88 <_printf_float+0xc0>
 8009d74:	ee10 3a90 	vmov	r3, s1
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	bfbc      	itt	lt
 8009d7c:	232d      	movlt	r3, #45	@ 0x2d
 8009d7e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009d82:	497d      	ldr	r1, [pc, #500]	@ (8009f78 <_printf_float+0x2b0>)
 8009d84:	4b7d      	ldr	r3, [pc, #500]	@ (8009f7c <_printf_float+0x2b4>)
 8009d86:	e7d5      	b.n	8009d34 <_printf_float+0x6c>
 8009d88:	6863      	ldr	r3, [r4, #4]
 8009d8a:	1c59      	adds	r1, r3, #1
 8009d8c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8009d90:	d139      	bne.n	8009e06 <_printf_float+0x13e>
 8009d92:	2306      	movs	r3, #6
 8009d94:	6063      	str	r3, [r4, #4]
 8009d96:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	6022      	str	r2, [r4, #0]
 8009d9e:	9303      	str	r3, [sp, #12]
 8009da0:	ab0a      	add	r3, sp, #40	@ 0x28
 8009da2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009da6:	ab09      	add	r3, sp, #36	@ 0x24
 8009da8:	9300      	str	r3, [sp, #0]
 8009daa:	6861      	ldr	r1, [r4, #4]
 8009dac:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009db0:	4628      	mov	r0, r5
 8009db2:	f7ff fef9 	bl	8009ba8 <__cvt>
 8009db6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009dba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009dbc:	4680      	mov	r8, r0
 8009dbe:	d129      	bne.n	8009e14 <_printf_float+0x14c>
 8009dc0:	1cc8      	adds	r0, r1, #3
 8009dc2:	db02      	blt.n	8009dca <_printf_float+0x102>
 8009dc4:	6863      	ldr	r3, [r4, #4]
 8009dc6:	4299      	cmp	r1, r3
 8009dc8:	dd41      	ble.n	8009e4e <_printf_float+0x186>
 8009dca:	f1a9 0902 	sub.w	r9, r9, #2
 8009dce:	fa5f f989 	uxtb.w	r9, r9
 8009dd2:	3901      	subs	r1, #1
 8009dd4:	464a      	mov	r2, r9
 8009dd6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009dda:	9109      	str	r1, [sp, #36]	@ 0x24
 8009ddc:	f7ff ff38 	bl	8009c50 <__exponent>
 8009de0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009de2:	1813      	adds	r3, r2, r0
 8009de4:	2a01      	cmp	r2, #1
 8009de6:	4682      	mov	sl, r0
 8009de8:	6123      	str	r3, [r4, #16]
 8009dea:	dc02      	bgt.n	8009df2 <_printf_float+0x12a>
 8009dec:	6822      	ldr	r2, [r4, #0]
 8009dee:	07d2      	lsls	r2, r2, #31
 8009df0:	d501      	bpl.n	8009df6 <_printf_float+0x12e>
 8009df2:	3301      	adds	r3, #1
 8009df4:	6123      	str	r3, [r4, #16]
 8009df6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d0a6      	beq.n	8009d4c <_printf_float+0x84>
 8009dfe:	232d      	movs	r3, #45	@ 0x2d
 8009e00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e04:	e7a2      	b.n	8009d4c <_printf_float+0x84>
 8009e06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009e0a:	d1c4      	bne.n	8009d96 <_printf_float+0xce>
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d1c2      	bne.n	8009d96 <_printf_float+0xce>
 8009e10:	2301      	movs	r3, #1
 8009e12:	e7bf      	b.n	8009d94 <_printf_float+0xcc>
 8009e14:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009e18:	d9db      	bls.n	8009dd2 <_printf_float+0x10a>
 8009e1a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8009e1e:	d118      	bne.n	8009e52 <_printf_float+0x18a>
 8009e20:	2900      	cmp	r1, #0
 8009e22:	6863      	ldr	r3, [r4, #4]
 8009e24:	dd0b      	ble.n	8009e3e <_printf_float+0x176>
 8009e26:	6121      	str	r1, [r4, #16]
 8009e28:	b913      	cbnz	r3, 8009e30 <_printf_float+0x168>
 8009e2a:	6822      	ldr	r2, [r4, #0]
 8009e2c:	07d0      	lsls	r0, r2, #31
 8009e2e:	d502      	bpl.n	8009e36 <_printf_float+0x16e>
 8009e30:	3301      	adds	r3, #1
 8009e32:	440b      	add	r3, r1
 8009e34:	6123      	str	r3, [r4, #16]
 8009e36:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009e38:	f04f 0a00 	mov.w	sl, #0
 8009e3c:	e7db      	b.n	8009df6 <_printf_float+0x12e>
 8009e3e:	b913      	cbnz	r3, 8009e46 <_printf_float+0x17e>
 8009e40:	6822      	ldr	r2, [r4, #0]
 8009e42:	07d2      	lsls	r2, r2, #31
 8009e44:	d501      	bpl.n	8009e4a <_printf_float+0x182>
 8009e46:	3302      	adds	r3, #2
 8009e48:	e7f4      	b.n	8009e34 <_printf_float+0x16c>
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e7f2      	b.n	8009e34 <_printf_float+0x16c>
 8009e4e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8009e52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e54:	4299      	cmp	r1, r3
 8009e56:	db05      	blt.n	8009e64 <_printf_float+0x19c>
 8009e58:	6823      	ldr	r3, [r4, #0]
 8009e5a:	6121      	str	r1, [r4, #16]
 8009e5c:	07d8      	lsls	r0, r3, #31
 8009e5e:	d5ea      	bpl.n	8009e36 <_printf_float+0x16e>
 8009e60:	1c4b      	adds	r3, r1, #1
 8009e62:	e7e7      	b.n	8009e34 <_printf_float+0x16c>
 8009e64:	2900      	cmp	r1, #0
 8009e66:	bfd4      	ite	le
 8009e68:	f1c1 0202 	rsble	r2, r1, #2
 8009e6c:	2201      	movgt	r2, #1
 8009e6e:	4413      	add	r3, r2
 8009e70:	e7e0      	b.n	8009e34 <_printf_float+0x16c>
 8009e72:	6823      	ldr	r3, [r4, #0]
 8009e74:	055a      	lsls	r2, r3, #21
 8009e76:	d407      	bmi.n	8009e88 <_printf_float+0x1c0>
 8009e78:	6923      	ldr	r3, [r4, #16]
 8009e7a:	4642      	mov	r2, r8
 8009e7c:	4631      	mov	r1, r6
 8009e7e:	4628      	mov	r0, r5
 8009e80:	47b8      	blx	r7
 8009e82:	3001      	adds	r0, #1
 8009e84:	d12a      	bne.n	8009edc <_printf_float+0x214>
 8009e86:	e76b      	b.n	8009d60 <_printf_float+0x98>
 8009e88:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009e8c:	f240 80e0 	bls.w	800a050 <_printf_float+0x388>
 8009e90:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8009e94:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e9c:	d133      	bne.n	8009f06 <_printf_float+0x23e>
 8009e9e:	4a38      	ldr	r2, [pc, #224]	@ (8009f80 <_printf_float+0x2b8>)
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	4631      	mov	r1, r6
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	47b8      	blx	r7
 8009ea8:	3001      	adds	r0, #1
 8009eaa:	f43f af59 	beq.w	8009d60 <_printf_float+0x98>
 8009eae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009eb2:	4543      	cmp	r3, r8
 8009eb4:	db02      	blt.n	8009ebc <_printf_float+0x1f4>
 8009eb6:	6823      	ldr	r3, [r4, #0]
 8009eb8:	07d8      	lsls	r0, r3, #31
 8009eba:	d50f      	bpl.n	8009edc <_printf_float+0x214>
 8009ebc:	9b05      	ldr	r3, [sp, #20]
 8009ebe:	465a      	mov	r2, fp
 8009ec0:	4631      	mov	r1, r6
 8009ec2:	4628      	mov	r0, r5
 8009ec4:	47b8      	blx	r7
 8009ec6:	3001      	adds	r0, #1
 8009ec8:	f43f af4a 	beq.w	8009d60 <_printf_float+0x98>
 8009ecc:	f04f 0900 	mov.w	r9, #0
 8009ed0:	f108 38ff 	add.w	r8, r8, #4294967295
 8009ed4:	f104 0a1a 	add.w	sl, r4, #26
 8009ed8:	45c8      	cmp	r8, r9
 8009eda:	dc09      	bgt.n	8009ef0 <_printf_float+0x228>
 8009edc:	6823      	ldr	r3, [r4, #0]
 8009ede:	079b      	lsls	r3, r3, #30
 8009ee0:	f100 8107 	bmi.w	800a0f2 <_printf_float+0x42a>
 8009ee4:	68e0      	ldr	r0, [r4, #12]
 8009ee6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ee8:	4298      	cmp	r0, r3
 8009eea:	bfb8      	it	lt
 8009eec:	4618      	movlt	r0, r3
 8009eee:	e739      	b.n	8009d64 <_printf_float+0x9c>
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	4652      	mov	r2, sl
 8009ef4:	4631      	mov	r1, r6
 8009ef6:	4628      	mov	r0, r5
 8009ef8:	47b8      	blx	r7
 8009efa:	3001      	adds	r0, #1
 8009efc:	f43f af30 	beq.w	8009d60 <_printf_float+0x98>
 8009f00:	f109 0901 	add.w	r9, r9, #1
 8009f04:	e7e8      	b.n	8009ed8 <_printf_float+0x210>
 8009f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	dc3b      	bgt.n	8009f84 <_printf_float+0x2bc>
 8009f0c:	4a1c      	ldr	r2, [pc, #112]	@ (8009f80 <_printf_float+0x2b8>)
 8009f0e:	2301      	movs	r3, #1
 8009f10:	4631      	mov	r1, r6
 8009f12:	4628      	mov	r0, r5
 8009f14:	47b8      	blx	r7
 8009f16:	3001      	adds	r0, #1
 8009f18:	f43f af22 	beq.w	8009d60 <_printf_float+0x98>
 8009f1c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009f20:	ea59 0303 	orrs.w	r3, r9, r3
 8009f24:	d102      	bne.n	8009f2c <_printf_float+0x264>
 8009f26:	6823      	ldr	r3, [r4, #0]
 8009f28:	07d9      	lsls	r1, r3, #31
 8009f2a:	d5d7      	bpl.n	8009edc <_printf_float+0x214>
 8009f2c:	9b05      	ldr	r3, [sp, #20]
 8009f2e:	465a      	mov	r2, fp
 8009f30:	4631      	mov	r1, r6
 8009f32:	4628      	mov	r0, r5
 8009f34:	47b8      	blx	r7
 8009f36:	3001      	adds	r0, #1
 8009f38:	f43f af12 	beq.w	8009d60 <_printf_float+0x98>
 8009f3c:	f04f 0a00 	mov.w	sl, #0
 8009f40:	f104 0b1a 	add.w	fp, r4, #26
 8009f44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f46:	425b      	negs	r3, r3
 8009f48:	4553      	cmp	r3, sl
 8009f4a:	dc01      	bgt.n	8009f50 <_printf_float+0x288>
 8009f4c:	464b      	mov	r3, r9
 8009f4e:	e794      	b.n	8009e7a <_printf_float+0x1b2>
 8009f50:	2301      	movs	r3, #1
 8009f52:	465a      	mov	r2, fp
 8009f54:	4631      	mov	r1, r6
 8009f56:	4628      	mov	r0, r5
 8009f58:	47b8      	blx	r7
 8009f5a:	3001      	adds	r0, #1
 8009f5c:	f43f af00 	beq.w	8009d60 <_printf_float+0x98>
 8009f60:	f10a 0a01 	add.w	sl, sl, #1
 8009f64:	e7ee      	b.n	8009f44 <_printf_float+0x27c>
 8009f66:	bf00      	nop
 8009f68:	ffffffff 	.word	0xffffffff
 8009f6c:	7fefffff 	.word	0x7fefffff
 8009f70:	0800e108 	.word	0x0800e108
 8009f74:	0800e10c 	.word	0x0800e10c
 8009f78:	0800e110 	.word	0x0800e110
 8009f7c:	0800e114 	.word	0x0800e114
 8009f80:	0800e118 	.word	0x0800e118
 8009f84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009f86:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009f8a:	4553      	cmp	r3, sl
 8009f8c:	bfa8      	it	ge
 8009f8e:	4653      	movge	r3, sl
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	4699      	mov	r9, r3
 8009f94:	dc37      	bgt.n	800a006 <_printf_float+0x33e>
 8009f96:	2300      	movs	r3, #0
 8009f98:	9307      	str	r3, [sp, #28]
 8009f9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f9e:	f104 021a 	add.w	r2, r4, #26
 8009fa2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009fa4:	9907      	ldr	r1, [sp, #28]
 8009fa6:	9306      	str	r3, [sp, #24]
 8009fa8:	eba3 0309 	sub.w	r3, r3, r9
 8009fac:	428b      	cmp	r3, r1
 8009fae:	dc31      	bgt.n	800a014 <_printf_float+0x34c>
 8009fb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fb2:	459a      	cmp	sl, r3
 8009fb4:	dc3b      	bgt.n	800a02e <_printf_float+0x366>
 8009fb6:	6823      	ldr	r3, [r4, #0]
 8009fb8:	07da      	lsls	r2, r3, #31
 8009fba:	d438      	bmi.n	800a02e <_printf_float+0x366>
 8009fbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fbe:	ebaa 0903 	sub.w	r9, sl, r3
 8009fc2:	9b06      	ldr	r3, [sp, #24]
 8009fc4:	ebaa 0303 	sub.w	r3, sl, r3
 8009fc8:	4599      	cmp	r9, r3
 8009fca:	bfa8      	it	ge
 8009fcc:	4699      	movge	r9, r3
 8009fce:	f1b9 0f00 	cmp.w	r9, #0
 8009fd2:	dc34      	bgt.n	800a03e <_printf_float+0x376>
 8009fd4:	f04f 0800 	mov.w	r8, #0
 8009fd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fdc:	f104 0b1a 	add.w	fp, r4, #26
 8009fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fe2:	ebaa 0303 	sub.w	r3, sl, r3
 8009fe6:	eba3 0309 	sub.w	r3, r3, r9
 8009fea:	4543      	cmp	r3, r8
 8009fec:	f77f af76 	ble.w	8009edc <_printf_float+0x214>
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	465a      	mov	r2, fp
 8009ff4:	4631      	mov	r1, r6
 8009ff6:	4628      	mov	r0, r5
 8009ff8:	47b8      	blx	r7
 8009ffa:	3001      	adds	r0, #1
 8009ffc:	f43f aeb0 	beq.w	8009d60 <_printf_float+0x98>
 800a000:	f108 0801 	add.w	r8, r8, #1
 800a004:	e7ec      	b.n	8009fe0 <_printf_float+0x318>
 800a006:	4642      	mov	r2, r8
 800a008:	4631      	mov	r1, r6
 800a00a:	4628      	mov	r0, r5
 800a00c:	47b8      	blx	r7
 800a00e:	3001      	adds	r0, #1
 800a010:	d1c1      	bne.n	8009f96 <_printf_float+0x2ce>
 800a012:	e6a5      	b.n	8009d60 <_printf_float+0x98>
 800a014:	2301      	movs	r3, #1
 800a016:	4631      	mov	r1, r6
 800a018:	4628      	mov	r0, r5
 800a01a:	9206      	str	r2, [sp, #24]
 800a01c:	47b8      	blx	r7
 800a01e:	3001      	adds	r0, #1
 800a020:	f43f ae9e 	beq.w	8009d60 <_printf_float+0x98>
 800a024:	9b07      	ldr	r3, [sp, #28]
 800a026:	9a06      	ldr	r2, [sp, #24]
 800a028:	3301      	adds	r3, #1
 800a02a:	9307      	str	r3, [sp, #28]
 800a02c:	e7b9      	b.n	8009fa2 <_printf_float+0x2da>
 800a02e:	9b05      	ldr	r3, [sp, #20]
 800a030:	465a      	mov	r2, fp
 800a032:	4631      	mov	r1, r6
 800a034:	4628      	mov	r0, r5
 800a036:	47b8      	blx	r7
 800a038:	3001      	adds	r0, #1
 800a03a:	d1bf      	bne.n	8009fbc <_printf_float+0x2f4>
 800a03c:	e690      	b.n	8009d60 <_printf_float+0x98>
 800a03e:	9a06      	ldr	r2, [sp, #24]
 800a040:	464b      	mov	r3, r9
 800a042:	4442      	add	r2, r8
 800a044:	4631      	mov	r1, r6
 800a046:	4628      	mov	r0, r5
 800a048:	47b8      	blx	r7
 800a04a:	3001      	adds	r0, #1
 800a04c:	d1c2      	bne.n	8009fd4 <_printf_float+0x30c>
 800a04e:	e687      	b.n	8009d60 <_printf_float+0x98>
 800a050:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800a054:	f1b9 0f01 	cmp.w	r9, #1
 800a058:	dc01      	bgt.n	800a05e <_printf_float+0x396>
 800a05a:	07db      	lsls	r3, r3, #31
 800a05c:	d536      	bpl.n	800a0cc <_printf_float+0x404>
 800a05e:	2301      	movs	r3, #1
 800a060:	4642      	mov	r2, r8
 800a062:	4631      	mov	r1, r6
 800a064:	4628      	mov	r0, r5
 800a066:	47b8      	blx	r7
 800a068:	3001      	adds	r0, #1
 800a06a:	f43f ae79 	beq.w	8009d60 <_printf_float+0x98>
 800a06e:	9b05      	ldr	r3, [sp, #20]
 800a070:	465a      	mov	r2, fp
 800a072:	4631      	mov	r1, r6
 800a074:	4628      	mov	r0, r5
 800a076:	47b8      	blx	r7
 800a078:	3001      	adds	r0, #1
 800a07a:	f43f ae71 	beq.w	8009d60 <_printf_float+0x98>
 800a07e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800a082:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a08a:	f109 39ff 	add.w	r9, r9, #4294967295
 800a08e:	d018      	beq.n	800a0c2 <_printf_float+0x3fa>
 800a090:	464b      	mov	r3, r9
 800a092:	f108 0201 	add.w	r2, r8, #1
 800a096:	4631      	mov	r1, r6
 800a098:	4628      	mov	r0, r5
 800a09a:	47b8      	blx	r7
 800a09c:	3001      	adds	r0, #1
 800a09e:	d10c      	bne.n	800a0ba <_printf_float+0x3f2>
 800a0a0:	e65e      	b.n	8009d60 <_printf_float+0x98>
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	465a      	mov	r2, fp
 800a0a6:	4631      	mov	r1, r6
 800a0a8:	4628      	mov	r0, r5
 800a0aa:	47b8      	blx	r7
 800a0ac:	3001      	adds	r0, #1
 800a0ae:	f43f ae57 	beq.w	8009d60 <_printf_float+0x98>
 800a0b2:	f108 0801 	add.w	r8, r8, #1
 800a0b6:	45c8      	cmp	r8, r9
 800a0b8:	dbf3      	blt.n	800a0a2 <_printf_float+0x3da>
 800a0ba:	4653      	mov	r3, sl
 800a0bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a0c0:	e6dc      	b.n	8009e7c <_printf_float+0x1b4>
 800a0c2:	f04f 0800 	mov.w	r8, #0
 800a0c6:	f104 0b1a 	add.w	fp, r4, #26
 800a0ca:	e7f4      	b.n	800a0b6 <_printf_float+0x3ee>
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	4642      	mov	r2, r8
 800a0d0:	e7e1      	b.n	800a096 <_printf_float+0x3ce>
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	464a      	mov	r2, r9
 800a0d6:	4631      	mov	r1, r6
 800a0d8:	4628      	mov	r0, r5
 800a0da:	47b8      	blx	r7
 800a0dc:	3001      	adds	r0, #1
 800a0de:	f43f ae3f 	beq.w	8009d60 <_printf_float+0x98>
 800a0e2:	f108 0801 	add.w	r8, r8, #1
 800a0e6:	68e3      	ldr	r3, [r4, #12]
 800a0e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a0ea:	1a5b      	subs	r3, r3, r1
 800a0ec:	4543      	cmp	r3, r8
 800a0ee:	dcf0      	bgt.n	800a0d2 <_printf_float+0x40a>
 800a0f0:	e6f8      	b.n	8009ee4 <_printf_float+0x21c>
 800a0f2:	f04f 0800 	mov.w	r8, #0
 800a0f6:	f104 0919 	add.w	r9, r4, #25
 800a0fa:	e7f4      	b.n	800a0e6 <_printf_float+0x41e>

0800a0fc <_printf_common>:
 800a0fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a100:	4616      	mov	r6, r2
 800a102:	4698      	mov	r8, r3
 800a104:	688a      	ldr	r2, [r1, #8]
 800a106:	690b      	ldr	r3, [r1, #16]
 800a108:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a10c:	4293      	cmp	r3, r2
 800a10e:	bfb8      	it	lt
 800a110:	4613      	movlt	r3, r2
 800a112:	6033      	str	r3, [r6, #0]
 800a114:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a118:	4607      	mov	r7, r0
 800a11a:	460c      	mov	r4, r1
 800a11c:	b10a      	cbz	r2, 800a122 <_printf_common+0x26>
 800a11e:	3301      	adds	r3, #1
 800a120:	6033      	str	r3, [r6, #0]
 800a122:	6823      	ldr	r3, [r4, #0]
 800a124:	0699      	lsls	r1, r3, #26
 800a126:	bf42      	ittt	mi
 800a128:	6833      	ldrmi	r3, [r6, #0]
 800a12a:	3302      	addmi	r3, #2
 800a12c:	6033      	strmi	r3, [r6, #0]
 800a12e:	6825      	ldr	r5, [r4, #0]
 800a130:	f015 0506 	ands.w	r5, r5, #6
 800a134:	d106      	bne.n	800a144 <_printf_common+0x48>
 800a136:	f104 0a19 	add.w	sl, r4, #25
 800a13a:	68e3      	ldr	r3, [r4, #12]
 800a13c:	6832      	ldr	r2, [r6, #0]
 800a13e:	1a9b      	subs	r3, r3, r2
 800a140:	42ab      	cmp	r3, r5
 800a142:	dc26      	bgt.n	800a192 <_printf_common+0x96>
 800a144:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a148:	6822      	ldr	r2, [r4, #0]
 800a14a:	3b00      	subs	r3, #0
 800a14c:	bf18      	it	ne
 800a14e:	2301      	movne	r3, #1
 800a150:	0692      	lsls	r2, r2, #26
 800a152:	d42b      	bmi.n	800a1ac <_printf_common+0xb0>
 800a154:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a158:	4641      	mov	r1, r8
 800a15a:	4638      	mov	r0, r7
 800a15c:	47c8      	blx	r9
 800a15e:	3001      	adds	r0, #1
 800a160:	d01e      	beq.n	800a1a0 <_printf_common+0xa4>
 800a162:	6823      	ldr	r3, [r4, #0]
 800a164:	6922      	ldr	r2, [r4, #16]
 800a166:	f003 0306 	and.w	r3, r3, #6
 800a16a:	2b04      	cmp	r3, #4
 800a16c:	bf02      	ittt	eq
 800a16e:	68e5      	ldreq	r5, [r4, #12]
 800a170:	6833      	ldreq	r3, [r6, #0]
 800a172:	1aed      	subeq	r5, r5, r3
 800a174:	68a3      	ldr	r3, [r4, #8]
 800a176:	bf0c      	ite	eq
 800a178:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a17c:	2500      	movne	r5, #0
 800a17e:	4293      	cmp	r3, r2
 800a180:	bfc4      	itt	gt
 800a182:	1a9b      	subgt	r3, r3, r2
 800a184:	18ed      	addgt	r5, r5, r3
 800a186:	2600      	movs	r6, #0
 800a188:	341a      	adds	r4, #26
 800a18a:	42b5      	cmp	r5, r6
 800a18c:	d11a      	bne.n	800a1c4 <_printf_common+0xc8>
 800a18e:	2000      	movs	r0, #0
 800a190:	e008      	b.n	800a1a4 <_printf_common+0xa8>
 800a192:	2301      	movs	r3, #1
 800a194:	4652      	mov	r2, sl
 800a196:	4641      	mov	r1, r8
 800a198:	4638      	mov	r0, r7
 800a19a:	47c8      	blx	r9
 800a19c:	3001      	adds	r0, #1
 800a19e:	d103      	bne.n	800a1a8 <_printf_common+0xac>
 800a1a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1a8:	3501      	adds	r5, #1
 800a1aa:	e7c6      	b.n	800a13a <_printf_common+0x3e>
 800a1ac:	18e1      	adds	r1, r4, r3
 800a1ae:	1c5a      	adds	r2, r3, #1
 800a1b0:	2030      	movs	r0, #48	@ 0x30
 800a1b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a1b6:	4422      	add	r2, r4
 800a1b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a1bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a1c0:	3302      	adds	r3, #2
 800a1c2:	e7c7      	b.n	800a154 <_printf_common+0x58>
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	4622      	mov	r2, r4
 800a1c8:	4641      	mov	r1, r8
 800a1ca:	4638      	mov	r0, r7
 800a1cc:	47c8      	blx	r9
 800a1ce:	3001      	adds	r0, #1
 800a1d0:	d0e6      	beq.n	800a1a0 <_printf_common+0xa4>
 800a1d2:	3601      	adds	r6, #1
 800a1d4:	e7d9      	b.n	800a18a <_printf_common+0x8e>
	...

0800a1d8 <_printf_i>:
 800a1d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1dc:	7e0f      	ldrb	r7, [r1, #24]
 800a1de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a1e0:	2f78      	cmp	r7, #120	@ 0x78
 800a1e2:	4691      	mov	r9, r2
 800a1e4:	4680      	mov	r8, r0
 800a1e6:	460c      	mov	r4, r1
 800a1e8:	469a      	mov	sl, r3
 800a1ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a1ee:	d807      	bhi.n	800a200 <_printf_i+0x28>
 800a1f0:	2f62      	cmp	r7, #98	@ 0x62
 800a1f2:	d80a      	bhi.n	800a20a <_printf_i+0x32>
 800a1f4:	2f00      	cmp	r7, #0
 800a1f6:	f000 80d2 	beq.w	800a39e <_printf_i+0x1c6>
 800a1fa:	2f58      	cmp	r7, #88	@ 0x58
 800a1fc:	f000 80b9 	beq.w	800a372 <_printf_i+0x19a>
 800a200:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a204:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a208:	e03a      	b.n	800a280 <_printf_i+0xa8>
 800a20a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a20e:	2b15      	cmp	r3, #21
 800a210:	d8f6      	bhi.n	800a200 <_printf_i+0x28>
 800a212:	a101      	add	r1, pc, #4	@ (adr r1, 800a218 <_printf_i+0x40>)
 800a214:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a218:	0800a271 	.word	0x0800a271
 800a21c:	0800a285 	.word	0x0800a285
 800a220:	0800a201 	.word	0x0800a201
 800a224:	0800a201 	.word	0x0800a201
 800a228:	0800a201 	.word	0x0800a201
 800a22c:	0800a201 	.word	0x0800a201
 800a230:	0800a285 	.word	0x0800a285
 800a234:	0800a201 	.word	0x0800a201
 800a238:	0800a201 	.word	0x0800a201
 800a23c:	0800a201 	.word	0x0800a201
 800a240:	0800a201 	.word	0x0800a201
 800a244:	0800a385 	.word	0x0800a385
 800a248:	0800a2af 	.word	0x0800a2af
 800a24c:	0800a33f 	.word	0x0800a33f
 800a250:	0800a201 	.word	0x0800a201
 800a254:	0800a201 	.word	0x0800a201
 800a258:	0800a3a7 	.word	0x0800a3a7
 800a25c:	0800a201 	.word	0x0800a201
 800a260:	0800a2af 	.word	0x0800a2af
 800a264:	0800a201 	.word	0x0800a201
 800a268:	0800a201 	.word	0x0800a201
 800a26c:	0800a347 	.word	0x0800a347
 800a270:	6833      	ldr	r3, [r6, #0]
 800a272:	1d1a      	adds	r2, r3, #4
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	6032      	str	r2, [r6, #0]
 800a278:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a27c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a280:	2301      	movs	r3, #1
 800a282:	e09d      	b.n	800a3c0 <_printf_i+0x1e8>
 800a284:	6833      	ldr	r3, [r6, #0]
 800a286:	6820      	ldr	r0, [r4, #0]
 800a288:	1d19      	adds	r1, r3, #4
 800a28a:	6031      	str	r1, [r6, #0]
 800a28c:	0606      	lsls	r6, r0, #24
 800a28e:	d501      	bpl.n	800a294 <_printf_i+0xbc>
 800a290:	681d      	ldr	r5, [r3, #0]
 800a292:	e003      	b.n	800a29c <_printf_i+0xc4>
 800a294:	0645      	lsls	r5, r0, #25
 800a296:	d5fb      	bpl.n	800a290 <_printf_i+0xb8>
 800a298:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a29c:	2d00      	cmp	r5, #0
 800a29e:	da03      	bge.n	800a2a8 <_printf_i+0xd0>
 800a2a0:	232d      	movs	r3, #45	@ 0x2d
 800a2a2:	426d      	negs	r5, r5
 800a2a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2a8:	4859      	ldr	r0, [pc, #356]	@ (800a410 <_printf_i+0x238>)
 800a2aa:	230a      	movs	r3, #10
 800a2ac:	e011      	b.n	800a2d2 <_printf_i+0xfa>
 800a2ae:	6821      	ldr	r1, [r4, #0]
 800a2b0:	6833      	ldr	r3, [r6, #0]
 800a2b2:	0608      	lsls	r0, r1, #24
 800a2b4:	f853 5b04 	ldr.w	r5, [r3], #4
 800a2b8:	d402      	bmi.n	800a2c0 <_printf_i+0xe8>
 800a2ba:	0649      	lsls	r1, r1, #25
 800a2bc:	bf48      	it	mi
 800a2be:	b2ad      	uxthmi	r5, r5
 800a2c0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a2c2:	4853      	ldr	r0, [pc, #332]	@ (800a410 <_printf_i+0x238>)
 800a2c4:	6033      	str	r3, [r6, #0]
 800a2c6:	bf14      	ite	ne
 800a2c8:	230a      	movne	r3, #10
 800a2ca:	2308      	moveq	r3, #8
 800a2cc:	2100      	movs	r1, #0
 800a2ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a2d2:	6866      	ldr	r6, [r4, #4]
 800a2d4:	60a6      	str	r6, [r4, #8]
 800a2d6:	2e00      	cmp	r6, #0
 800a2d8:	bfa2      	ittt	ge
 800a2da:	6821      	ldrge	r1, [r4, #0]
 800a2dc:	f021 0104 	bicge.w	r1, r1, #4
 800a2e0:	6021      	strge	r1, [r4, #0]
 800a2e2:	b90d      	cbnz	r5, 800a2e8 <_printf_i+0x110>
 800a2e4:	2e00      	cmp	r6, #0
 800a2e6:	d04b      	beq.n	800a380 <_printf_i+0x1a8>
 800a2e8:	4616      	mov	r6, r2
 800a2ea:	fbb5 f1f3 	udiv	r1, r5, r3
 800a2ee:	fb03 5711 	mls	r7, r3, r1, r5
 800a2f2:	5dc7      	ldrb	r7, [r0, r7]
 800a2f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a2f8:	462f      	mov	r7, r5
 800a2fa:	42bb      	cmp	r3, r7
 800a2fc:	460d      	mov	r5, r1
 800a2fe:	d9f4      	bls.n	800a2ea <_printf_i+0x112>
 800a300:	2b08      	cmp	r3, #8
 800a302:	d10b      	bne.n	800a31c <_printf_i+0x144>
 800a304:	6823      	ldr	r3, [r4, #0]
 800a306:	07df      	lsls	r7, r3, #31
 800a308:	d508      	bpl.n	800a31c <_printf_i+0x144>
 800a30a:	6923      	ldr	r3, [r4, #16]
 800a30c:	6861      	ldr	r1, [r4, #4]
 800a30e:	4299      	cmp	r1, r3
 800a310:	bfde      	ittt	le
 800a312:	2330      	movle	r3, #48	@ 0x30
 800a314:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a318:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a31c:	1b92      	subs	r2, r2, r6
 800a31e:	6122      	str	r2, [r4, #16]
 800a320:	f8cd a000 	str.w	sl, [sp]
 800a324:	464b      	mov	r3, r9
 800a326:	aa03      	add	r2, sp, #12
 800a328:	4621      	mov	r1, r4
 800a32a:	4640      	mov	r0, r8
 800a32c:	f7ff fee6 	bl	800a0fc <_printf_common>
 800a330:	3001      	adds	r0, #1
 800a332:	d14a      	bne.n	800a3ca <_printf_i+0x1f2>
 800a334:	f04f 30ff 	mov.w	r0, #4294967295
 800a338:	b004      	add	sp, #16
 800a33a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a33e:	6823      	ldr	r3, [r4, #0]
 800a340:	f043 0320 	orr.w	r3, r3, #32
 800a344:	6023      	str	r3, [r4, #0]
 800a346:	4833      	ldr	r0, [pc, #204]	@ (800a414 <_printf_i+0x23c>)
 800a348:	2778      	movs	r7, #120	@ 0x78
 800a34a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a34e:	6823      	ldr	r3, [r4, #0]
 800a350:	6831      	ldr	r1, [r6, #0]
 800a352:	061f      	lsls	r7, r3, #24
 800a354:	f851 5b04 	ldr.w	r5, [r1], #4
 800a358:	d402      	bmi.n	800a360 <_printf_i+0x188>
 800a35a:	065f      	lsls	r7, r3, #25
 800a35c:	bf48      	it	mi
 800a35e:	b2ad      	uxthmi	r5, r5
 800a360:	6031      	str	r1, [r6, #0]
 800a362:	07d9      	lsls	r1, r3, #31
 800a364:	bf44      	itt	mi
 800a366:	f043 0320 	orrmi.w	r3, r3, #32
 800a36a:	6023      	strmi	r3, [r4, #0]
 800a36c:	b11d      	cbz	r5, 800a376 <_printf_i+0x19e>
 800a36e:	2310      	movs	r3, #16
 800a370:	e7ac      	b.n	800a2cc <_printf_i+0xf4>
 800a372:	4827      	ldr	r0, [pc, #156]	@ (800a410 <_printf_i+0x238>)
 800a374:	e7e9      	b.n	800a34a <_printf_i+0x172>
 800a376:	6823      	ldr	r3, [r4, #0]
 800a378:	f023 0320 	bic.w	r3, r3, #32
 800a37c:	6023      	str	r3, [r4, #0]
 800a37e:	e7f6      	b.n	800a36e <_printf_i+0x196>
 800a380:	4616      	mov	r6, r2
 800a382:	e7bd      	b.n	800a300 <_printf_i+0x128>
 800a384:	6833      	ldr	r3, [r6, #0]
 800a386:	6825      	ldr	r5, [r4, #0]
 800a388:	6961      	ldr	r1, [r4, #20]
 800a38a:	1d18      	adds	r0, r3, #4
 800a38c:	6030      	str	r0, [r6, #0]
 800a38e:	062e      	lsls	r6, r5, #24
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	d501      	bpl.n	800a398 <_printf_i+0x1c0>
 800a394:	6019      	str	r1, [r3, #0]
 800a396:	e002      	b.n	800a39e <_printf_i+0x1c6>
 800a398:	0668      	lsls	r0, r5, #25
 800a39a:	d5fb      	bpl.n	800a394 <_printf_i+0x1bc>
 800a39c:	8019      	strh	r1, [r3, #0]
 800a39e:	2300      	movs	r3, #0
 800a3a0:	6123      	str	r3, [r4, #16]
 800a3a2:	4616      	mov	r6, r2
 800a3a4:	e7bc      	b.n	800a320 <_printf_i+0x148>
 800a3a6:	6833      	ldr	r3, [r6, #0]
 800a3a8:	1d1a      	adds	r2, r3, #4
 800a3aa:	6032      	str	r2, [r6, #0]
 800a3ac:	681e      	ldr	r6, [r3, #0]
 800a3ae:	6862      	ldr	r2, [r4, #4]
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	4630      	mov	r0, r6
 800a3b4:	f7f5 ff94 	bl	80002e0 <memchr>
 800a3b8:	b108      	cbz	r0, 800a3be <_printf_i+0x1e6>
 800a3ba:	1b80      	subs	r0, r0, r6
 800a3bc:	6060      	str	r0, [r4, #4]
 800a3be:	6863      	ldr	r3, [r4, #4]
 800a3c0:	6123      	str	r3, [r4, #16]
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3c8:	e7aa      	b.n	800a320 <_printf_i+0x148>
 800a3ca:	6923      	ldr	r3, [r4, #16]
 800a3cc:	4632      	mov	r2, r6
 800a3ce:	4649      	mov	r1, r9
 800a3d0:	4640      	mov	r0, r8
 800a3d2:	47d0      	blx	sl
 800a3d4:	3001      	adds	r0, #1
 800a3d6:	d0ad      	beq.n	800a334 <_printf_i+0x15c>
 800a3d8:	6823      	ldr	r3, [r4, #0]
 800a3da:	079b      	lsls	r3, r3, #30
 800a3dc:	d413      	bmi.n	800a406 <_printf_i+0x22e>
 800a3de:	68e0      	ldr	r0, [r4, #12]
 800a3e0:	9b03      	ldr	r3, [sp, #12]
 800a3e2:	4298      	cmp	r0, r3
 800a3e4:	bfb8      	it	lt
 800a3e6:	4618      	movlt	r0, r3
 800a3e8:	e7a6      	b.n	800a338 <_printf_i+0x160>
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	4632      	mov	r2, r6
 800a3ee:	4649      	mov	r1, r9
 800a3f0:	4640      	mov	r0, r8
 800a3f2:	47d0      	blx	sl
 800a3f4:	3001      	adds	r0, #1
 800a3f6:	d09d      	beq.n	800a334 <_printf_i+0x15c>
 800a3f8:	3501      	adds	r5, #1
 800a3fa:	68e3      	ldr	r3, [r4, #12]
 800a3fc:	9903      	ldr	r1, [sp, #12]
 800a3fe:	1a5b      	subs	r3, r3, r1
 800a400:	42ab      	cmp	r3, r5
 800a402:	dcf2      	bgt.n	800a3ea <_printf_i+0x212>
 800a404:	e7eb      	b.n	800a3de <_printf_i+0x206>
 800a406:	2500      	movs	r5, #0
 800a408:	f104 0619 	add.w	r6, r4, #25
 800a40c:	e7f5      	b.n	800a3fa <_printf_i+0x222>
 800a40e:	bf00      	nop
 800a410:	0800e11a 	.word	0x0800e11a
 800a414:	0800e12b 	.word	0x0800e12b

0800a418 <_scanf_float>:
 800a418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a41c:	b087      	sub	sp, #28
 800a41e:	4617      	mov	r7, r2
 800a420:	9303      	str	r3, [sp, #12]
 800a422:	688b      	ldr	r3, [r1, #8]
 800a424:	1e5a      	subs	r2, r3, #1
 800a426:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a42a:	bf81      	itttt	hi
 800a42c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a430:	eb03 0b05 	addhi.w	fp, r3, r5
 800a434:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a438:	608b      	strhi	r3, [r1, #8]
 800a43a:	680b      	ldr	r3, [r1, #0]
 800a43c:	460a      	mov	r2, r1
 800a43e:	f04f 0500 	mov.w	r5, #0
 800a442:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a446:	f842 3b1c 	str.w	r3, [r2], #28
 800a44a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a44e:	4680      	mov	r8, r0
 800a450:	460c      	mov	r4, r1
 800a452:	bf98      	it	ls
 800a454:	f04f 0b00 	movls.w	fp, #0
 800a458:	9201      	str	r2, [sp, #4]
 800a45a:	4616      	mov	r6, r2
 800a45c:	46aa      	mov	sl, r5
 800a45e:	46a9      	mov	r9, r5
 800a460:	9502      	str	r5, [sp, #8]
 800a462:	68a2      	ldr	r2, [r4, #8]
 800a464:	b152      	cbz	r2, 800a47c <_scanf_float+0x64>
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	2b4e      	cmp	r3, #78	@ 0x4e
 800a46c:	d864      	bhi.n	800a538 <_scanf_float+0x120>
 800a46e:	2b40      	cmp	r3, #64	@ 0x40
 800a470:	d83c      	bhi.n	800a4ec <_scanf_float+0xd4>
 800a472:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a476:	b2c8      	uxtb	r0, r1
 800a478:	280e      	cmp	r0, #14
 800a47a:	d93a      	bls.n	800a4f2 <_scanf_float+0xda>
 800a47c:	f1b9 0f00 	cmp.w	r9, #0
 800a480:	d003      	beq.n	800a48a <_scanf_float+0x72>
 800a482:	6823      	ldr	r3, [r4, #0]
 800a484:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a488:	6023      	str	r3, [r4, #0]
 800a48a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a48e:	f1ba 0f01 	cmp.w	sl, #1
 800a492:	f200 8117 	bhi.w	800a6c4 <_scanf_float+0x2ac>
 800a496:	9b01      	ldr	r3, [sp, #4]
 800a498:	429e      	cmp	r6, r3
 800a49a:	f200 8108 	bhi.w	800a6ae <_scanf_float+0x296>
 800a49e:	2001      	movs	r0, #1
 800a4a0:	b007      	add	sp, #28
 800a4a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4a6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a4aa:	2a0d      	cmp	r2, #13
 800a4ac:	d8e6      	bhi.n	800a47c <_scanf_float+0x64>
 800a4ae:	a101      	add	r1, pc, #4	@ (adr r1, 800a4b4 <_scanf_float+0x9c>)
 800a4b0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a4b4:	0800a5fb 	.word	0x0800a5fb
 800a4b8:	0800a47d 	.word	0x0800a47d
 800a4bc:	0800a47d 	.word	0x0800a47d
 800a4c0:	0800a47d 	.word	0x0800a47d
 800a4c4:	0800a65b 	.word	0x0800a65b
 800a4c8:	0800a633 	.word	0x0800a633
 800a4cc:	0800a47d 	.word	0x0800a47d
 800a4d0:	0800a47d 	.word	0x0800a47d
 800a4d4:	0800a609 	.word	0x0800a609
 800a4d8:	0800a47d 	.word	0x0800a47d
 800a4dc:	0800a47d 	.word	0x0800a47d
 800a4e0:	0800a47d 	.word	0x0800a47d
 800a4e4:	0800a47d 	.word	0x0800a47d
 800a4e8:	0800a5c1 	.word	0x0800a5c1
 800a4ec:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a4f0:	e7db      	b.n	800a4aa <_scanf_float+0x92>
 800a4f2:	290e      	cmp	r1, #14
 800a4f4:	d8c2      	bhi.n	800a47c <_scanf_float+0x64>
 800a4f6:	a001      	add	r0, pc, #4	@ (adr r0, 800a4fc <_scanf_float+0xe4>)
 800a4f8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a4fc:	0800a5b1 	.word	0x0800a5b1
 800a500:	0800a47d 	.word	0x0800a47d
 800a504:	0800a5b1 	.word	0x0800a5b1
 800a508:	0800a647 	.word	0x0800a647
 800a50c:	0800a47d 	.word	0x0800a47d
 800a510:	0800a559 	.word	0x0800a559
 800a514:	0800a597 	.word	0x0800a597
 800a518:	0800a597 	.word	0x0800a597
 800a51c:	0800a597 	.word	0x0800a597
 800a520:	0800a597 	.word	0x0800a597
 800a524:	0800a597 	.word	0x0800a597
 800a528:	0800a597 	.word	0x0800a597
 800a52c:	0800a597 	.word	0x0800a597
 800a530:	0800a597 	.word	0x0800a597
 800a534:	0800a597 	.word	0x0800a597
 800a538:	2b6e      	cmp	r3, #110	@ 0x6e
 800a53a:	d809      	bhi.n	800a550 <_scanf_float+0x138>
 800a53c:	2b60      	cmp	r3, #96	@ 0x60
 800a53e:	d8b2      	bhi.n	800a4a6 <_scanf_float+0x8e>
 800a540:	2b54      	cmp	r3, #84	@ 0x54
 800a542:	d07b      	beq.n	800a63c <_scanf_float+0x224>
 800a544:	2b59      	cmp	r3, #89	@ 0x59
 800a546:	d199      	bne.n	800a47c <_scanf_float+0x64>
 800a548:	2d07      	cmp	r5, #7
 800a54a:	d197      	bne.n	800a47c <_scanf_float+0x64>
 800a54c:	2508      	movs	r5, #8
 800a54e:	e02c      	b.n	800a5aa <_scanf_float+0x192>
 800a550:	2b74      	cmp	r3, #116	@ 0x74
 800a552:	d073      	beq.n	800a63c <_scanf_float+0x224>
 800a554:	2b79      	cmp	r3, #121	@ 0x79
 800a556:	e7f6      	b.n	800a546 <_scanf_float+0x12e>
 800a558:	6821      	ldr	r1, [r4, #0]
 800a55a:	05c8      	lsls	r0, r1, #23
 800a55c:	d51b      	bpl.n	800a596 <_scanf_float+0x17e>
 800a55e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a562:	6021      	str	r1, [r4, #0]
 800a564:	f109 0901 	add.w	r9, r9, #1
 800a568:	f1bb 0f00 	cmp.w	fp, #0
 800a56c:	d003      	beq.n	800a576 <_scanf_float+0x15e>
 800a56e:	3201      	adds	r2, #1
 800a570:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a574:	60a2      	str	r2, [r4, #8]
 800a576:	68a3      	ldr	r3, [r4, #8]
 800a578:	3b01      	subs	r3, #1
 800a57a:	60a3      	str	r3, [r4, #8]
 800a57c:	6923      	ldr	r3, [r4, #16]
 800a57e:	3301      	adds	r3, #1
 800a580:	6123      	str	r3, [r4, #16]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	3b01      	subs	r3, #1
 800a586:	2b00      	cmp	r3, #0
 800a588:	607b      	str	r3, [r7, #4]
 800a58a:	f340 8087 	ble.w	800a69c <_scanf_float+0x284>
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	3301      	adds	r3, #1
 800a592:	603b      	str	r3, [r7, #0]
 800a594:	e765      	b.n	800a462 <_scanf_float+0x4a>
 800a596:	eb1a 0105 	adds.w	r1, sl, r5
 800a59a:	f47f af6f 	bne.w	800a47c <_scanf_float+0x64>
 800a59e:	6822      	ldr	r2, [r4, #0]
 800a5a0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a5a4:	6022      	str	r2, [r4, #0]
 800a5a6:	460d      	mov	r5, r1
 800a5a8:	468a      	mov	sl, r1
 800a5aa:	f806 3b01 	strb.w	r3, [r6], #1
 800a5ae:	e7e2      	b.n	800a576 <_scanf_float+0x15e>
 800a5b0:	6822      	ldr	r2, [r4, #0]
 800a5b2:	0610      	lsls	r0, r2, #24
 800a5b4:	f57f af62 	bpl.w	800a47c <_scanf_float+0x64>
 800a5b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a5bc:	6022      	str	r2, [r4, #0]
 800a5be:	e7f4      	b.n	800a5aa <_scanf_float+0x192>
 800a5c0:	f1ba 0f00 	cmp.w	sl, #0
 800a5c4:	d10e      	bne.n	800a5e4 <_scanf_float+0x1cc>
 800a5c6:	f1b9 0f00 	cmp.w	r9, #0
 800a5ca:	d10e      	bne.n	800a5ea <_scanf_float+0x1d2>
 800a5cc:	6822      	ldr	r2, [r4, #0]
 800a5ce:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a5d2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a5d6:	d108      	bne.n	800a5ea <_scanf_float+0x1d2>
 800a5d8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a5dc:	6022      	str	r2, [r4, #0]
 800a5de:	f04f 0a01 	mov.w	sl, #1
 800a5e2:	e7e2      	b.n	800a5aa <_scanf_float+0x192>
 800a5e4:	f1ba 0f02 	cmp.w	sl, #2
 800a5e8:	d055      	beq.n	800a696 <_scanf_float+0x27e>
 800a5ea:	2d01      	cmp	r5, #1
 800a5ec:	d002      	beq.n	800a5f4 <_scanf_float+0x1dc>
 800a5ee:	2d04      	cmp	r5, #4
 800a5f0:	f47f af44 	bne.w	800a47c <_scanf_float+0x64>
 800a5f4:	3501      	adds	r5, #1
 800a5f6:	b2ed      	uxtb	r5, r5
 800a5f8:	e7d7      	b.n	800a5aa <_scanf_float+0x192>
 800a5fa:	f1ba 0f01 	cmp.w	sl, #1
 800a5fe:	f47f af3d 	bne.w	800a47c <_scanf_float+0x64>
 800a602:	f04f 0a02 	mov.w	sl, #2
 800a606:	e7d0      	b.n	800a5aa <_scanf_float+0x192>
 800a608:	b97d      	cbnz	r5, 800a62a <_scanf_float+0x212>
 800a60a:	f1b9 0f00 	cmp.w	r9, #0
 800a60e:	f47f af38 	bne.w	800a482 <_scanf_float+0x6a>
 800a612:	6822      	ldr	r2, [r4, #0]
 800a614:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a618:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a61c:	f040 8101 	bne.w	800a822 <_scanf_float+0x40a>
 800a620:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a624:	6022      	str	r2, [r4, #0]
 800a626:	2501      	movs	r5, #1
 800a628:	e7bf      	b.n	800a5aa <_scanf_float+0x192>
 800a62a:	2d03      	cmp	r5, #3
 800a62c:	d0e2      	beq.n	800a5f4 <_scanf_float+0x1dc>
 800a62e:	2d05      	cmp	r5, #5
 800a630:	e7de      	b.n	800a5f0 <_scanf_float+0x1d8>
 800a632:	2d02      	cmp	r5, #2
 800a634:	f47f af22 	bne.w	800a47c <_scanf_float+0x64>
 800a638:	2503      	movs	r5, #3
 800a63a:	e7b6      	b.n	800a5aa <_scanf_float+0x192>
 800a63c:	2d06      	cmp	r5, #6
 800a63e:	f47f af1d 	bne.w	800a47c <_scanf_float+0x64>
 800a642:	2507      	movs	r5, #7
 800a644:	e7b1      	b.n	800a5aa <_scanf_float+0x192>
 800a646:	6822      	ldr	r2, [r4, #0]
 800a648:	0591      	lsls	r1, r2, #22
 800a64a:	f57f af17 	bpl.w	800a47c <_scanf_float+0x64>
 800a64e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a652:	6022      	str	r2, [r4, #0]
 800a654:	f8cd 9008 	str.w	r9, [sp, #8]
 800a658:	e7a7      	b.n	800a5aa <_scanf_float+0x192>
 800a65a:	6822      	ldr	r2, [r4, #0]
 800a65c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a660:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a664:	d006      	beq.n	800a674 <_scanf_float+0x25c>
 800a666:	0550      	lsls	r0, r2, #21
 800a668:	f57f af08 	bpl.w	800a47c <_scanf_float+0x64>
 800a66c:	f1b9 0f00 	cmp.w	r9, #0
 800a670:	f000 80d7 	beq.w	800a822 <_scanf_float+0x40a>
 800a674:	0591      	lsls	r1, r2, #22
 800a676:	bf58      	it	pl
 800a678:	9902      	ldrpl	r1, [sp, #8]
 800a67a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a67e:	bf58      	it	pl
 800a680:	eba9 0101 	subpl.w	r1, r9, r1
 800a684:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a688:	bf58      	it	pl
 800a68a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a68e:	6022      	str	r2, [r4, #0]
 800a690:	f04f 0900 	mov.w	r9, #0
 800a694:	e789      	b.n	800a5aa <_scanf_float+0x192>
 800a696:	f04f 0a03 	mov.w	sl, #3
 800a69a:	e786      	b.n	800a5aa <_scanf_float+0x192>
 800a69c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a6a0:	4639      	mov	r1, r7
 800a6a2:	4640      	mov	r0, r8
 800a6a4:	4798      	blx	r3
 800a6a6:	2800      	cmp	r0, #0
 800a6a8:	f43f aedb 	beq.w	800a462 <_scanf_float+0x4a>
 800a6ac:	e6e6      	b.n	800a47c <_scanf_float+0x64>
 800a6ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a6b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a6b6:	463a      	mov	r2, r7
 800a6b8:	4640      	mov	r0, r8
 800a6ba:	4798      	blx	r3
 800a6bc:	6923      	ldr	r3, [r4, #16]
 800a6be:	3b01      	subs	r3, #1
 800a6c0:	6123      	str	r3, [r4, #16]
 800a6c2:	e6e8      	b.n	800a496 <_scanf_float+0x7e>
 800a6c4:	1e6b      	subs	r3, r5, #1
 800a6c6:	2b06      	cmp	r3, #6
 800a6c8:	d824      	bhi.n	800a714 <_scanf_float+0x2fc>
 800a6ca:	2d02      	cmp	r5, #2
 800a6cc:	d836      	bhi.n	800a73c <_scanf_float+0x324>
 800a6ce:	9b01      	ldr	r3, [sp, #4]
 800a6d0:	429e      	cmp	r6, r3
 800a6d2:	f67f aee4 	bls.w	800a49e <_scanf_float+0x86>
 800a6d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a6da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a6de:	463a      	mov	r2, r7
 800a6e0:	4640      	mov	r0, r8
 800a6e2:	4798      	blx	r3
 800a6e4:	6923      	ldr	r3, [r4, #16]
 800a6e6:	3b01      	subs	r3, #1
 800a6e8:	6123      	str	r3, [r4, #16]
 800a6ea:	e7f0      	b.n	800a6ce <_scanf_float+0x2b6>
 800a6ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a6f0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a6f4:	463a      	mov	r2, r7
 800a6f6:	4640      	mov	r0, r8
 800a6f8:	4798      	blx	r3
 800a6fa:	6923      	ldr	r3, [r4, #16]
 800a6fc:	3b01      	subs	r3, #1
 800a6fe:	6123      	str	r3, [r4, #16]
 800a700:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a704:	fa5f fa8a 	uxtb.w	sl, sl
 800a708:	f1ba 0f02 	cmp.w	sl, #2
 800a70c:	d1ee      	bne.n	800a6ec <_scanf_float+0x2d4>
 800a70e:	3d03      	subs	r5, #3
 800a710:	b2ed      	uxtb	r5, r5
 800a712:	1b76      	subs	r6, r6, r5
 800a714:	6823      	ldr	r3, [r4, #0]
 800a716:	05da      	lsls	r2, r3, #23
 800a718:	d530      	bpl.n	800a77c <_scanf_float+0x364>
 800a71a:	055b      	lsls	r3, r3, #21
 800a71c:	d511      	bpl.n	800a742 <_scanf_float+0x32a>
 800a71e:	9b01      	ldr	r3, [sp, #4]
 800a720:	429e      	cmp	r6, r3
 800a722:	f67f aebc 	bls.w	800a49e <_scanf_float+0x86>
 800a726:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a72a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a72e:	463a      	mov	r2, r7
 800a730:	4640      	mov	r0, r8
 800a732:	4798      	blx	r3
 800a734:	6923      	ldr	r3, [r4, #16]
 800a736:	3b01      	subs	r3, #1
 800a738:	6123      	str	r3, [r4, #16]
 800a73a:	e7f0      	b.n	800a71e <_scanf_float+0x306>
 800a73c:	46aa      	mov	sl, r5
 800a73e:	46b3      	mov	fp, r6
 800a740:	e7de      	b.n	800a700 <_scanf_float+0x2e8>
 800a742:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a746:	6923      	ldr	r3, [r4, #16]
 800a748:	2965      	cmp	r1, #101	@ 0x65
 800a74a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a74e:	f106 35ff 	add.w	r5, r6, #4294967295
 800a752:	6123      	str	r3, [r4, #16]
 800a754:	d00c      	beq.n	800a770 <_scanf_float+0x358>
 800a756:	2945      	cmp	r1, #69	@ 0x45
 800a758:	d00a      	beq.n	800a770 <_scanf_float+0x358>
 800a75a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a75e:	463a      	mov	r2, r7
 800a760:	4640      	mov	r0, r8
 800a762:	4798      	blx	r3
 800a764:	6923      	ldr	r3, [r4, #16]
 800a766:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a76a:	3b01      	subs	r3, #1
 800a76c:	1eb5      	subs	r5, r6, #2
 800a76e:	6123      	str	r3, [r4, #16]
 800a770:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a774:	463a      	mov	r2, r7
 800a776:	4640      	mov	r0, r8
 800a778:	4798      	blx	r3
 800a77a:	462e      	mov	r6, r5
 800a77c:	6822      	ldr	r2, [r4, #0]
 800a77e:	f012 0210 	ands.w	r2, r2, #16
 800a782:	d001      	beq.n	800a788 <_scanf_float+0x370>
 800a784:	2000      	movs	r0, #0
 800a786:	e68b      	b.n	800a4a0 <_scanf_float+0x88>
 800a788:	7032      	strb	r2, [r6, #0]
 800a78a:	6823      	ldr	r3, [r4, #0]
 800a78c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a790:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a794:	d11a      	bne.n	800a7cc <_scanf_float+0x3b4>
 800a796:	9b02      	ldr	r3, [sp, #8]
 800a798:	454b      	cmp	r3, r9
 800a79a:	eba3 0209 	sub.w	r2, r3, r9
 800a79e:	d121      	bne.n	800a7e4 <_scanf_float+0x3cc>
 800a7a0:	9901      	ldr	r1, [sp, #4]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	4640      	mov	r0, r8
 800a7a6:	f002 fb2d 	bl	800ce04 <_strtod_r>
 800a7aa:	9b03      	ldr	r3, [sp, #12]
 800a7ac:	6821      	ldr	r1, [r4, #0]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f011 0f02 	tst.w	r1, #2
 800a7b4:	f103 0204 	add.w	r2, r3, #4
 800a7b8:	d01f      	beq.n	800a7fa <_scanf_float+0x3e2>
 800a7ba:	9903      	ldr	r1, [sp, #12]
 800a7bc:	600a      	str	r2, [r1, #0]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	ed83 0b00 	vstr	d0, [r3]
 800a7c4:	68e3      	ldr	r3, [r4, #12]
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	60e3      	str	r3, [r4, #12]
 800a7ca:	e7db      	b.n	800a784 <_scanf_float+0x36c>
 800a7cc:	9b04      	ldr	r3, [sp, #16]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d0e6      	beq.n	800a7a0 <_scanf_float+0x388>
 800a7d2:	9905      	ldr	r1, [sp, #20]
 800a7d4:	230a      	movs	r3, #10
 800a7d6:	3101      	adds	r1, #1
 800a7d8:	4640      	mov	r0, r8
 800a7da:	f002 fb93 	bl	800cf04 <_strtol_r>
 800a7de:	9b04      	ldr	r3, [sp, #16]
 800a7e0:	9e05      	ldr	r6, [sp, #20]
 800a7e2:	1ac2      	subs	r2, r0, r3
 800a7e4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a7e8:	429e      	cmp	r6, r3
 800a7ea:	bf28      	it	cs
 800a7ec:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a7f0:	490d      	ldr	r1, [pc, #52]	@ (800a828 <_scanf_float+0x410>)
 800a7f2:	4630      	mov	r0, r6
 800a7f4:	f000 f8de 	bl	800a9b4 <siprintf>
 800a7f8:	e7d2      	b.n	800a7a0 <_scanf_float+0x388>
 800a7fa:	f011 0f04 	tst.w	r1, #4
 800a7fe:	9903      	ldr	r1, [sp, #12]
 800a800:	600a      	str	r2, [r1, #0]
 800a802:	d1dc      	bne.n	800a7be <_scanf_float+0x3a6>
 800a804:	eeb4 0b40 	vcmp.f64	d0, d0
 800a808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a80c:	681d      	ldr	r5, [r3, #0]
 800a80e:	d705      	bvc.n	800a81c <_scanf_float+0x404>
 800a810:	4806      	ldr	r0, [pc, #24]	@ (800a82c <_scanf_float+0x414>)
 800a812:	f000 f9b3 	bl	800ab7c <nanf>
 800a816:	ed85 0a00 	vstr	s0, [r5]
 800a81a:	e7d3      	b.n	800a7c4 <_scanf_float+0x3ac>
 800a81c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a820:	e7f9      	b.n	800a816 <_scanf_float+0x3fe>
 800a822:	f04f 0900 	mov.w	r9, #0
 800a826:	e630      	b.n	800a48a <_scanf_float+0x72>
 800a828:	0800e13c 	.word	0x0800e13c
 800a82c:	0800e4d5 	.word	0x0800e4d5

0800a830 <std>:
 800a830:	2300      	movs	r3, #0
 800a832:	b510      	push	{r4, lr}
 800a834:	4604      	mov	r4, r0
 800a836:	e9c0 3300 	strd	r3, r3, [r0]
 800a83a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a83e:	6083      	str	r3, [r0, #8]
 800a840:	8181      	strh	r1, [r0, #12]
 800a842:	6643      	str	r3, [r0, #100]	@ 0x64
 800a844:	81c2      	strh	r2, [r0, #14]
 800a846:	6183      	str	r3, [r0, #24]
 800a848:	4619      	mov	r1, r3
 800a84a:	2208      	movs	r2, #8
 800a84c:	305c      	adds	r0, #92	@ 0x5c
 800a84e:	f000 f914 	bl	800aa7a <memset>
 800a852:	4b0d      	ldr	r3, [pc, #52]	@ (800a888 <std+0x58>)
 800a854:	6263      	str	r3, [r4, #36]	@ 0x24
 800a856:	4b0d      	ldr	r3, [pc, #52]	@ (800a88c <std+0x5c>)
 800a858:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a85a:	4b0d      	ldr	r3, [pc, #52]	@ (800a890 <std+0x60>)
 800a85c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a85e:	4b0d      	ldr	r3, [pc, #52]	@ (800a894 <std+0x64>)
 800a860:	6323      	str	r3, [r4, #48]	@ 0x30
 800a862:	4b0d      	ldr	r3, [pc, #52]	@ (800a898 <std+0x68>)
 800a864:	6224      	str	r4, [r4, #32]
 800a866:	429c      	cmp	r4, r3
 800a868:	d006      	beq.n	800a878 <std+0x48>
 800a86a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a86e:	4294      	cmp	r4, r2
 800a870:	d002      	beq.n	800a878 <std+0x48>
 800a872:	33d0      	adds	r3, #208	@ 0xd0
 800a874:	429c      	cmp	r4, r3
 800a876:	d105      	bne.n	800a884 <std+0x54>
 800a878:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a87c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a880:	f000 b978 	b.w	800ab74 <__retarget_lock_init_recursive>
 800a884:	bd10      	pop	{r4, pc}
 800a886:	bf00      	nop
 800a888:	0800a9f5 	.word	0x0800a9f5
 800a88c:	0800aa17 	.word	0x0800aa17
 800a890:	0800aa4f 	.word	0x0800aa4f
 800a894:	0800aa73 	.word	0x0800aa73
 800a898:	24000358 	.word	0x24000358

0800a89c <stdio_exit_handler>:
 800a89c:	4a02      	ldr	r2, [pc, #8]	@ (800a8a8 <stdio_exit_handler+0xc>)
 800a89e:	4903      	ldr	r1, [pc, #12]	@ (800a8ac <stdio_exit_handler+0x10>)
 800a8a0:	4803      	ldr	r0, [pc, #12]	@ (800a8b0 <stdio_exit_handler+0x14>)
 800a8a2:	f000 b869 	b.w	800a978 <_fwalk_sglue>
 800a8a6:	bf00      	nop
 800a8a8:	24000010 	.word	0x24000010
 800a8ac:	0800d2c1 	.word	0x0800d2c1
 800a8b0:	24000020 	.word	0x24000020

0800a8b4 <cleanup_stdio>:
 800a8b4:	6841      	ldr	r1, [r0, #4]
 800a8b6:	4b0c      	ldr	r3, [pc, #48]	@ (800a8e8 <cleanup_stdio+0x34>)
 800a8b8:	4299      	cmp	r1, r3
 800a8ba:	b510      	push	{r4, lr}
 800a8bc:	4604      	mov	r4, r0
 800a8be:	d001      	beq.n	800a8c4 <cleanup_stdio+0x10>
 800a8c0:	f002 fcfe 	bl	800d2c0 <_fflush_r>
 800a8c4:	68a1      	ldr	r1, [r4, #8]
 800a8c6:	4b09      	ldr	r3, [pc, #36]	@ (800a8ec <cleanup_stdio+0x38>)
 800a8c8:	4299      	cmp	r1, r3
 800a8ca:	d002      	beq.n	800a8d2 <cleanup_stdio+0x1e>
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	f002 fcf7 	bl	800d2c0 <_fflush_r>
 800a8d2:	68e1      	ldr	r1, [r4, #12]
 800a8d4:	4b06      	ldr	r3, [pc, #24]	@ (800a8f0 <cleanup_stdio+0x3c>)
 800a8d6:	4299      	cmp	r1, r3
 800a8d8:	d004      	beq.n	800a8e4 <cleanup_stdio+0x30>
 800a8da:	4620      	mov	r0, r4
 800a8dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8e0:	f002 bcee 	b.w	800d2c0 <_fflush_r>
 800a8e4:	bd10      	pop	{r4, pc}
 800a8e6:	bf00      	nop
 800a8e8:	24000358 	.word	0x24000358
 800a8ec:	240003c0 	.word	0x240003c0
 800a8f0:	24000428 	.word	0x24000428

0800a8f4 <global_stdio_init.part.0>:
 800a8f4:	b510      	push	{r4, lr}
 800a8f6:	4b0b      	ldr	r3, [pc, #44]	@ (800a924 <global_stdio_init.part.0+0x30>)
 800a8f8:	4c0b      	ldr	r4, [pc, #44]	@ (800a928 <global_stdio_init.part.0+0x34>)
 800a8fa:	4a0c      	ldr	r2, [pc, #48]	@ (800a92c <global_stdio_init.part.0+0x38>)
 800a8fc:	601a      	str	r2, [r3, #0]
 800a8fe:	4620      	mov	r0, r4
 800a900:	2200      	movs	r2, #0
 800a902:	2104      	movs	r1, #4
 800a904:	f7ff ff94 	bl	800a830 <std>
 800a908:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a90c:	2201      	movs	r2, #1
 800a90e:	2109      	movs	r1, #9
 800a910:	f7ff ff8e 	bl	800a830 <std>
 800a914:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a918:	2202      	movs	r2, #2
 800a91a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a91e:	2112      	movs	r1, #18
 800a920:	f7ff bf86 	b.w	800a830 <std>
 800a924:	24000490 	.word	0x24000490
 800a928:	24000358 	.word	0x24000358
 800a92c:	0800a89d 	.word	0x0800a89d

0800a930 <__sfp_lock_acquire>:
 800a930:	4801      	ldr	r0, [pc, #4]	@ (800a938 <__sfp_lock_acquire+0x8>)
 800a932:	f000 b920 	b.w	800ab76 <__retarget_lock_acquire_recursive>
 800a936:	bf00      	nop
 800a938:	24000499 	.word	0x24000499

0800a93c <__sfp_lock_release>:
 800a93c:	4801      	ldr	r0, [pc, #4]	@ (800a944 <__sfp_lock_release+0x8>)
 800a93e:	f000 b91b 	b.w	800ab78 <__retarget_lock_release_recursive>
 800a942:	bf00      	nop
 800a944:	24000499 	.word	0x24000499

0800a948 <__sinit>:
 800a948:	b510      	push	{r4, lr}
 800a94a:	4604      	mov	r4, r0
 800a94c:	f7ff fff0 	bl	800a930 <__sfp_lock_acquire>
 800a950:	6a23      	ldr	r3, [r4, #32]
 800a952:	b11b      	cbz	r3, 800a95c <__sinit+0x14>
 800a954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a958:	f7ff bff0 	b.w	800a93c <__sfp_lock_release>
 800a95c:	4b04      	ldr	r3, [pc, #16]	@ (800a970 <__sinit+0x28>)
 800a95e:	6223      	str	r3, [r4, #32]
 800a960:	4b04      	ldr	r3, [pc, #16]	@ (800a974 <__sinit+0x2c>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d1f5      	bne.n	800a954 <__sinit+0xc>
 800a968:	f7ff ffc4 	bl	800a8f4 <global_stdio_init.part.0>
 800a96c:	e7f2      	b.n	800a954 <__sinit+0xc>
 800a96e:	bf00      	nop
 800a970:	0800a8b5 	.word	0x0800a8b5
 800a974:	24000490 	.word	0x24000490

0800a978 <_fwalk_sglue>:
 800a978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a97c:	4607      	mov	r7, r0
 800a97e:	4688      	mov	r8, r1
 800a980:	4614      	mov	r4, r2
 800a982:	2600      	movs	r6, #0
 800a984:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a988:	f1b9 0901 	subs.w	r9, r9, #1
 800a98c:	d505      	bpl.n	800a99a <_fwalk_sglue+0x22>
 800a98e:	6824      	ldr	r4, [r4, #0]
 800a990:	2c00      	cmp	r4, #0
 800a992:	d1f7      	bne.n	800a984 <_fwalk_sglue+0xc>
 800a994:	4630      	mov	r0, r6
 800a996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a99a:	89ab      	ldrh	r3, [r5, #12]
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d907      	bls.n	800a9b0 <_fwalk_sglue+0x38>
 800a9a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	d003      	beq.n	800a9b0 <_fwalk_sglue+0x38>
 800a9a8:	4629      	mov	r1, r5
 800a9aa:	4638      	mov	r0, r7
 800a9ac:	47c0      	blx	r8
 800a9ae:	4306      	orrs	r6, r0
 800a9b0:	3568      	adds	r5, #104	@ 0x68
 800a9b2:	e7e9      	b.n	800a988 <_fwalk_sglue+0x10>

0800a9b4 <siprintf>:
 800a9b4:	b40e      	push	{r1, r2, r3}
 800a9b6:	b500      	push	{lr}
 800a9b8:	b09c      	sub	sp, #112	@ 0x70
 800a9ba:	ab1d      	add	r3, sp, #116	@ 0x74
 800a9bc:	9002      	str	r0, [sp, #8]
 800a9be:	9006      	str	r0, [sp, #24]
 800a9c0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a9c4:	4809      	ldr	r0, [pc, #36]	@ (800a9ec <siprintf+0x38>)
 800a9c6:	9107      	str	r1, [sp, #28]
 800a9c8:	9104      	str	r1, [sp, #16]
 800a9ca:	4909      	ldr	r1, [pc, #36]	@ (800a9f0 <siprintf+0x3c>)
 800a9cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9d0:	9105      	str	r1, [sp, #20]
 800a9d2:	6800      	ldr	r0, [r0, #0]
 800a9d4:	9301      	str	r3, [sp, #4]
 800a9d6:	a902      	add	r1, sp, #8
 800a9d8:	f002 faf2 	bl	800cfc0 <_svfiprintf_r>
 800a9dc:	9b02      	ldr	r3, [sp, #8]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	701a      	strb	r2, [r3, #0]
 800a9e2:	b01c      	add	sp, #112	@ 0x70
 800a9e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9e8:	b003      	add	sp, #12
 800a9ea:	4770      	bx	lr
 800a9ec:	2400001c 	.word	0x2400001c
 800a9f0:	ffff0208 	.word	0xffff0208

0800a9f4 <__sread>:
 800a9f4:	b510      	push	{r4, lr}
 800a9f6:	460c      	mov	r4, r1
 800a9f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9fc:	f000 f86c 	bl	800aad8 <_read_r>
 800aa00:	2800      	cmp	r0, #0
 800aa02:	bfab      	itete	ge
 800aa04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800aa06:	89a3      	ldrhlt	r3, [r4, #12]
 800aa08:	181b      	addge	r3, r3, r0
 800aa0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aa0e:	bfac      	ite	ge
 800aa10:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aa12:	81a3      	strhlt	r3, [r4, #12]
 800aa14:	bd10      	pop	{r4, pc}

0800aa16 <__swrite>:
 800aa16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa1a:	461f      	mov	r7, r3
 800aa1c:	898b      	ldrh	r3, [r1, #12]
 800aa1e:	05db      	lsls	r3, r3, #23
 800aa20:	4605      	mov	r5, r0
 800aa22:	460c      	mov	r4, r1
 800aa24:	4616      	mov	r6, r2
 800aa26:	d505      	bpl.n	800aa34 <__swrite+0x1e>
 800aa28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa2c:	2302      	movs	r3, #2
 800aa2e:	2200      	movs	r2, #0
 800aa30:	f000 f840 	bl	800aab4 <_lseek_r>
 800aa34:	89a3      	ldrh	r3, [r4, #12]
 800aa36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aa3e:	81a3      	strh	r3, [r4, #12]
 800aa40:	4632      	mov	r2, r6
 800aa42:	463b      	mov	r3, r7
 800aa44:	4628      	mov	r0, r5
 800aa46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa4a:	f000 b857 	b.w	800aafc <_write_r>

0800aa4e <__sseek>:
 800aa4e:	b510      	push	{r4, lr}
 800aa50:	460c      	mov	r4, r1
 800aa52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa56:	f000 f82d 	bl	800aab4 <_lseek_r>
 800aa5a:	1c43      	adds	r3, r0, #1
 800aa5c:	89a3      	ldrh	r3, [r4, #12]
 800aa5e:	bf15      	itete	ne
 800aa60:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aa62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aa66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aa6a:	81a3      	strheq	r3, [r4, #12]
 800aa6c:	bf18      	it	ne
 800aa6e:	81a3      	strhne	r3, [r4, #12]
 800aa70:	bd10      	pop	{r4, pc}

0800aa72 <__sclose>:
 800aa72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa76:	f000 b80d 	b.w	800aa94 <_close_r>

0800aa7a <memset>:
 800aa7a:	4402      	add	r2, r0
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d100      	bne.n	800aa84 <memset+0xa>
 800aa82:	4770      	bx	lr
 800aa84:	f803 1b01 	strb.w	r1, [r3], #1
 800aa88:	e7f9      	b.n	800aa7e <memset+0x4>
	...

0800aa8c <_localeconv_r>:
 800aa8c:	4800      	ldr	r0, [pc, #0]	@ (800aa90 <_localeconv_r+0x4>)
 800aa8e:	4770      	bx	lr
 800aa90:	2400015c 	.word	0x2400015c

0800aa94 <_close_r>:
 800aa94:	b538      	push	{r3, r4, r5, lr}
 800aa96:	4d06      	ldr	r5, [pc, #24]	@ (800aab0 <_close_r+0x1c>)
 800aa98:	2300      	movs	r3, #0
 800aa9a:	4604      	mov	r4, r0
 800aa9c:	4608      	mov	r0, r1
 800aa9e:	602b      	str	r3, [r5, #0]
 800aaa0:	f7f6 fd1a 	bl	80014d8 <_close>
 800aaa4:	1c43      	adds	r3, r0, #1
 800aaa6:	d102      	bne.n	800aaae <_close_r+0x1a>
 800aaa8:	682b      	ldr	r3, [r5, #0]
 800aaaa:	b103      	cbz	r3, 800aaae <_close_r+0x1a>
 800aaac:	6023      	str	r3, [r4, #0]
 800aaae:	bd38      	pop	{r3, r4, r5, pc}
 800aab0:	24000494 	.word	0x24000494

0800aab4 <_lseek_r>:
 800aab4:	b538      	push	{r3, r4, r5, lr}
 800aab6:	4d07      	ldr	r5, [pc, #28]	@ (800aad4 <_lseek_r+0x20>)
 800aab8:	4604      	mov	r4, r0
 800aaba:	4608      	mov	r0, r1
 800aabc:	4611      	mov	r1, r2
 800aabe:	2200      	movs	r2, #0
 800aac0:	602a      	str	r2, [r5, #0]
 800aac2:	461a      	mov	r2, r3
 800aac4:	f7f6 fd2f 	bl	8001526 <_lseek>
 800aac8:	1c43      	adds	r3, r0, #1
 800aaca:	d102      	bne.n	800aad2 <_lseek_r+0x1e>
 800aacc:	682b      	ldr	r3, [r5, #0]
 800aace:	b103      	cbz	r3, 800aad2 <_lseek_r+0x1e>
 800aad0:	6023      	str	r3, [r4, #0]
 800aad2:	bd38      	pop	{r3, r4, r5, pc}
 800aad4:	24000494 	.word	0x24000494

0800aad8 <_read_r>:
 800aad8:	b538      	push	{r3, r4, r5, lr}
 800aada:	4d07      	ldr	r5, [pc, #28]	@ (800aaf8 <_read_r+0x20>)
 800aadc:	4604      	mov	r4, r0
 800aade:	4608      	mov	r0, r1
 800aae0:	4611      	mov	r1, r2
 800aae2:	2200      	movs	r2, #0
 800aae4:	602a      	str	r2, [r5, #0]
 800aae6:	461a      	mov	r2, r3
 800aae8:	f7f6 fcbd 	bl	8001466 <_read>
 800aaec:	1c43      	adds	r3, r0, #1
 800aaee:	d102      	bne.n	800aaf6 <_read_r+0x1e>
 800aaf0:	682b      	ldr	r3, [r5, #0]
 800aaf2:	b103      	cbz	r3, 800aaf6 <_read_r+0x1e>
 800aaf4:	6023      	str	r3, [r4, #0]
 800aaf6:	bd38      	pop	{r3, r4, r5, pc}
 800aaf8:	24000494 	.word	0x24000494

0800aafc <_write_r>:
 800aafc:	b538      	push	{r3, r4, r5, lr}
 800aafe:	4d07      	ldr	r5, [pc, #28]	@ (800ab1c <_write_r+0x20>)
 800ab00:	4604      	mov	r4, r0
 800ab02:	4608      	mov	r0, r1
 800ab04:	4611      	mov	r1, r2
 800ab06:	2200      	movs	r2, #0
 800ab08:	602a      	str	r2, [r5, #0]
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	f7f6 fcc8 	bl	80014a0 <_write>
 800ab10:	1c43      	adds	r3, r0, #1
 800ab12:	d102      	bne.n	800ab1a <_write_r+0x1e>
 800ab14:	682b      	ldr	r3, [r5, #0]
 800ab16:	b103      	cbz	r3, 800ab1a <_write_r+0x1e>
 800ab18:	6023      	str	r3, [r4, #0]
 800ab1a:	bd38      	pop	{r3, r4, r5, pc}
 800ab1c:	24000494 	.word	0x24000494

0800ab20 <__errno>:
 800ab20:	4b01      	ldr	r3, [pc, #4]	@ (800ab28 <__errno+0x8>)
 800ab22:	6818      	ldr	r0, [r3, #0]
 800ab24:	4770      	bx	lr
 800ab26:	bf00      	nop
 800ab28:	2400001c 	.word	0x2400001c

0800ab2c <__libc_init_array>:
 800ab2c:	b570      	push	{r4, r5, r6, lr}
 800ab2e:	4d0d      	ldr	r5, [pc, #52]	@ (800ab64 <__libc_init_array+0x38>)
 800ab30:	4c0d      	ldr	r4, [pc, #52]	@ (800ab68 <__libc_init_array+0x3c>)
 800ab32:	1b64      	subs	r4, r4, r5
 800ab34:	10a4      	asrs	r4, r4, #2
 800ab36:	2600      	movs	r6, #0
 800ab38:	42a6      	cmp	r6, r4
 800ab3a:	d109      	bne.n	800ab50 <__libc_init_array+0x24>
 800ab3c:	4d0b      	ldr	r5, [pc, #44]	@ (800ab6c <__libc_init_array+0x40>)
 800ab3e:	4c0c      	ldr	r4, [pc, #48]	@ (800ab70 <__libc_init_array+0x44>)
 800ab40:	f003 fab0 	bl	800e0a4 <_init>
 800ab44:	1b64      	subs	r4, r4, r5
 800ab46:	10a4      	asrs	r4, r4, #2
 800ab48:	2600      	movs	r6, #0
 800ab4a:	42a6      	cmp	r6, r4
 800ab4c:	d105      	bne.n	800ab5a <__libc_init_array+0x2e>
 800ab4e:	bd70      	pop	{r4, r5, r6, pc}
 800ab50:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab54:	4798      	blx	r3
 800ab56:	3601      	adds	r6, #1
 800ab58:	e7ee      	b.n	800ab38 <__libc_init_array+0xc>
 800ab5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab5e:	4798      	blx	r3
 800ab60:	3601      	adds	r6, #1
 800ab62:	e7f2      	b.n	800ab4a <__libc_init_array+0x1e>
 800ab64:	0800e540 	.word	0x0800e540
 800ab68:	0800e540 	.word	0x0800e540
 800ab6c:	0800e540 	.word	0x0800e540
 800ab70:	0800e544 	.word	0x0800e544

0800ab74 <__retarget_lock_init_recursive>:
 800ab74:	4770      	bx	lr

0800ab76 <__retarget_lock_acquire_recursive>:
 800ab76:	4770      	bx	lr

0800ab78 <__retarget_lock_release_recursive>:
 800ab78:	4770      	bx	lr
	...

0800ab7c <nanf>:
 800ab7c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ab84 <nanf+0x8>
 800ab80:	4770      	bx	lr
 800ab82:	bf00      	nop
 800ab84:	7fc00000 	.word	0x7fc00000

0800ab88 <quorem>:
 800ab88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab8c:	6903      	ldr	r3, [r0, #16]
 800ab8e:	690c      	ldr	r4, [r1, #16]
 800ab90:	42a3      	cmp	r3, r4
 800ab92:	4607      	mov	r7, r0
 800ab94:	db7e      	blt.n	800ac94 <quorem+0x10c>
 800ab96:	3c01      	subs	r4, #1
 800ab98:	f101 0814 	add.w	r8, r1, #20
 800ab9c:	00a3      	lsls	r3, r4, #2
 800ab9e:	f100 0514 	add.w	r5, r0, #20
 800aba2:	9300      	str	r3, [sp, #0]
 800aba4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aba8:	9301      	str	r3, [sp, #4]
 800abaa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800abae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800abb2:	3301      	adds	r3, #1
 800abb4:	429a      	cmp	r2, r3
 800abb6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800abba:	fbb2 f6f3 	udiv	r6, r2, r3
 800abbe:	d32e      	bcc.n	800ac1e <quorem+0x96>
 800abc0:	f04f 0a00 	mov.w	sl, #0
 800abc4:	46c4      	mov	ip, r8
 800abc6:	46ae      	mov	lr, r5
 800abc8:	46d3      	mov	fp, sl
 800abca:	f85c 3b04 	ldr.w	r3, [ip], #4
 800abce:	b298      	uxth	r0, r3
 800abd0:	fb06 a000 	mla	r0, r6, r0, sl
 800abd4:	0c02      	lsrs	r2, r0, #16
 800abd6:	0c1b      	lsrs	r3, r3, #16
 800abd8:	fb06 2303 	mla	r3, r6, r3, r2
 800abdc:	f8de 2000 	ldr.w	r2, [lr]
 800abe0:	b280      	uxth	r0, r0
 800abe2:	b292      	uxth	r2, r2
 800abe4:	1a12      	subs	r2, r2, r0
 800abe6:	445a      	add	r2, fp
 800abe8:	f8de 0000 	ldr.w	r0, [lr]
 800abec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800abf6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800abfa:	b292      	uxth	r2, r2
 800abfc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ac00:	45e1      	cmp	r9, ip
 800ac02:	f84e 2b04 	str.w	r2, [lr], #4
 800ac06:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ac0a:	d2de      	bcs.n	800abca <quorem+0x42>
 800ac0c:	9b00      	ldr	r3, [sp, #0]
 800ac0e:	58eb      	ldr	r3, [r5, r3]
 800ac10:	b92b      	cbnz	r3, 800ac1e <quorem+0x96>
 800ac12:	9b01      	ldr	r3, [sp, #4]
 800ac14:	3b04      	subs	r3, #4
 800ac16:	429d      	cmp	r5, r3
 800ac18:	461a      	mov	r2, r3
 800ac1a:	d32f      	bcc.n	800ac7c <quorem+0xf4>
 800ac1c:	613c      	str	r4, [r7, #16]
 800ac1e:	4638      	mov	r0, r7
 800ac20:	f001 f954 	bl	800becc <__mcmp>
 800ac24:	2800      	cmp	r0, #0
 800ac26:	db25      	blt.n	800ac74 <quorem+0xec>
 800ac28:	4629      	mov	r1, r5
 800ac2a:	2000      	movs	r0, #0
 800ac2c:	f858 2b04 	ldr.w	r2, [r8], #4
 800ac30:	f8d1 c000 	ldr.w	ip, [r1]
 800ac34:	fa1f fe82 	uxth.w	lr, r2
 800ac38:	fa1f f38c 	uxth.w	r3, ip
 800ac3c:	eba3 030e 	sub.w	r3, r3, lr
 800ac40:	4403      	add	r3, r0
 800ac42:	0c12      	lsrs	r2, r2, #16
 800ac44:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ac48:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ac4c:	b29b      	uxth	r3, r3
 800ac4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac52:	45c1      	cmp	r9, r8
 800ac54:	f841 3b04 	str.w	r3, [r1], #4
 800ac58:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ac5c:	d2e6      	bcs.n	800ac2c <quorem+0xa4>
 800ac5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac66:	b922      	cbnz	r2, 800ac72 <quorem+0xea>
 800ac68:	3b04      	subs	r3, #4
 800ac6a:	429d      	cmp	r5, r3
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	d30b      	bcc.n	800ac88 <quorem+0x100>
 800ac70:	613c      	str	r4, [r7, #16]
 800ac72:	3601      	adds	r6, #1
 800ac74:	4630      	mov	r0, r6
 800ac76:	b003      	add	sp, #12
 800ac78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac7c:	6812      	ldr	r2, [r2, #0]
 800ac7e:	3b04      	subs	r3, #4
 800ac80:	2a00      	cmp	r2, #0
 800ac82:	d1cb      	bne.n	800ac1c <quorem+0x94>
 800ac84:	3c01      	subs	r4, #1
 800ac86:	e7c6      	b.n	800ac16 <quorem+0x8e>
 800ac88:	6812      	ldr	r2, [r2, #0]
 800ac8a:	3b04      	subs	r3, #4
 800ac8c:	2a00      	cmp	r2, #0
 800ac8e:	d1ef      	bne.n	800ac70 <quorem+0xe8>
 800ac90:	3c01      	subs	r4, #1
 800ac92:	e7ea      	b.n	800ac6a <quorem+0xe2>
 800ac94:	2000      	movs	r0, #0
 800ac96:	e7ee      	b.n	800ac76 <quorem+0xee>

0800ac98 <_dtoa_r>:
 800ac98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac9c:	ed2d 8b02 	vpush	{d8}
 800aca0:	69c7      	ldr	r7, [r0, #28]
 800aca2:	b091      	sub	sp, #68	@ 0x44
 800aca4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800aca8:	ec55 4b10 	vmov	r4, r5, d0
 800acac:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800acae:	9107      	str	r1, [sp, #28]
 800acb0:	4681      	mov	r9, r0
 800acb2:	9209      	str	r2, [sp, #36]	@ 0x24
 800acb4:	930d      	str	r3, [sp, #52]	@ 0x34
 800acb6:	b97f      	cbnz	r7, 800acd8 <_dtoa_r+0x40>
 800acb8:	2010      	movs	r0, #16
 800acba:	f000 fd8d 	bl	800b7d8 <malloc>
 800acbe:	4602      	mov	r2, r0
 800acc0:	f8c9 001c 	str.w	r0, [r9, #28]
 800acc4:	b920      	cbnz	r0, 800acd0 <_dtoa_r+0x38>
 800acc6:	4ba0      	ldr	r3, [pc, #640]	@ (800af48 <_dtoa_r+0x2b0>)
 800acc8:	21ef      	movs	r1, #239	@ 0xef
 800acca:	48a0      	ldr	r0, [pc, #640]	@ (800af4c <_dtoa_r+0x2b4>)
 800accc:	f002 fb74 	bl	800d3b8 <__assert_func>
 800acd0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800acd4:	6007      	str	r7, [r0, #0]
 800acd6:	60c7      	str	r7, [r0, #12]
 800acd8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800acdc:	6819      	ldr	r1, [r3, #0]
 800acde:	b159      	cbz	r1, 800acf8 <_dtoa_r+0x60>
 800ace0:	685a      	ldr	r2, [r3, #4]
 800ace2:	604a      	str	r2, [r1, #4]
 800ace4:	2301      	movs	r3, #1
 800ace6:	4093      	lsls	r3, r2
 800ace8:	608b      	str	r3, [r1, #8]
 800acea:	4648      	mov	r0, r9
 800acec:	f000 fe6a 	bl	800b9c4 <_Bfree>
 800acf0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800acf4:	2200      	movs	r2, #0
 800acf6:	601a      	str	r2, [r3, #0]
 800acf8:	1e2b      	subs	r3, r5, #0
 800acfa:	bfbb      	ittet	lt
 800acfc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ad00:	9303      	strlt	r3, [sp, #12]
 800ad02:	2300      	movge	r3, #0
 800ad04:	2201      	movlt	r2, #1
 800ad06:	bfac      	ite	ge
 800ad08:	6033      	strge	r3, [r6, #0]
 800ad0a:	6032      	strlt	r2, [r6, #0]
 800ad0c:	4b90      	ldr	r3, [pc, #576]	@ (800af50 <_dtoa_r+0x2b8>)
 800ad0e:	9e03      	ldr	r6, [sp, #12]
 800ad10:	43b3      	bics	r3, r6
 800ad12:	d110      	bne.n	800ad36 <_dtoa_r+0x9e>
 800ad14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ad16:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ad1a:	6013      	str	r3, [r2, #0]
 800ad1c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800ad20:	4323      	orrs	r3, r4
 800ad22:	f000 84de 	beq.w	800b6e2 <_dtoa_r+0xa4a>
 800ad26:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ad28:	4f8a      	ldr	r7, [pc, #552]	@ (800af54 <_dtoa_r+0x2bc>)
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	f000 84e0 	beq.w	800b6f0 <_dtoa_r+0xa58>
 800ad30:	1cfb      	adds	r3, r7, #3
 800ad32:	f000 bcdb 	b.w	800b6ec <_dtoa_r+0xa54>
 800ad36:	ed9d 8b02 	vldr	d8, [sp, #8]
 800ad3a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ad3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad42:	d10a      	bne.n	800ad5a <_dtoa_r+0xc2>
 800ad44:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ad46:	2301      	movs	r3, #1
 800ad48:	6013      	str	r3, [r2, #0]
 800ad4a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ad4c:	b113      	cbz	r3, 800ad54 <_dtoa_r+0xbc>
 800ad4e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800ad50:	4b81      	ldr	r3, [pc, #516]	@ (800af58 <_dtoa_r+0x2c0>)
 800ad52:	6013      	str	r3, [r2, #0]
 800ad54:	4f81      	ldr	r7, [pc, #516]	@ (800af5c <_dtoa_r+0x2c4>)
 800ad56:	f000 bccb 	b.w	800b6f0 <_dtoa_r+0xa58>
 800ad5a:	aa0e      	add	r2, sp, #56	@ 0x38
 800ad5c:	a90f      	add	r1, sp, #60	@ 0x3c
 800ad5e:	4648      	mov	r0, r9
 800ad60:	eeb0 0b48 	vmov.f64	d0, d8
 800ad64:	f001 f9d2 	bl	800c10c <__d2b>
 800ad68:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800ad6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad6e:	9001      	str	r0, [sp, #4]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d045      	beq.n	800ae00 <_dtoa_r+0x168>
 800ad74:	eeb0 7b48 	vmov.f64	d7, d8
 800ad78:	ee18 1a90 	vmov	r1, s17
 800ad7c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ad80:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800ad84:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800ad88:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800ad8c:	2500      	movs	r5, #0
 800ad8e:	ee07 1a90 	vmov	s15, r1
 800ad92:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800ad96:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800af30 <_dtoa_r+0x298>
 800ad9a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ad9e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800af38 <_dtoa_r+0x2a0>
 800ada2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ada6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800af40 <_dtoa_r+0x2a8>
 800adaa:	ee07 3a90 	vmov	s15, r3
 800adae:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800adb2:	eeb0 7b46 	vmov.f64	d7, d6
 800adb6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800adba:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800adbe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800adc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adc6:	ee16 8a90 	vmov	r8, s13
 800adca:	d508      	bpl.n	800adde <_dtoa_r+0x146>
 800adcc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800add0:	eeb4 6b47 	vcmp.f64	d6, d7
 800add4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800add8:	bf18      	it	ne
 800adda:	f108 38ff 	addne.w	r8, r8, #4294967295
 800adde:	f1b8 0f16 	cmp.w	r8, #22
 800ade2:	d82b      	bhi.n	800ae3c <_dtoa_r+0x1a4>
 800ade4:	495e      	ldr	r1, [pc, #376]	@ (800af60 <_dtoa_r+0x2c8>)
 800ade6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800adea:	ed91 7b00 	vldr	d7, [r1]
 800adee:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800adf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adf6:	d501      	bpl.n	800adfc <_dtoa_r+0x164>
 800adf8:	f108 38ff 	add.w	r8, r8, #4294967295
 800adfc:	2100      	movs	r1, #0
 800adfe:	e01e      	b.n	800ae3e <_dtoa_r+0x1a6>
 800ae00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae02:	4413      	add	r3, r2
 800ae04:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800ae08:	2920      	cmp	r1, #32
 800ae0a:	bfc1      	itttt	gt
 800ae0c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800ae10:	408e      	lslgt	r6, r1
 800ae12:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800ae16:	fa24 f101 	lsrgt.w	r1, r4, r1
 800ae1a:	bfd6      	itet	le
 800ae1c:	f1c1 0120 	rsble	r1, r1, #32
 800ae20:	4331      	orrgt	r1, r6
 800ae22:	fa04 f101 	lslle.w	r1, r4, r1
 800ae26:	ee07 1a90 	vmov	s15, r1
 800ae2a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ae2e:	3b01      	subs	r3, #1
 800ae30:	ee17 1a90 	vmov	r1, s15
 800ae34:	2501      	movs	r5, #1
 800ae36:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800ae3a:	e7a8      	b.n	800ad8e <_dtoa_r+0xf6>
 800ae3c:	2101      	movs	r1, #1
 800ae3e:	1ad2      	subs	r2, r2, r3
 800ae40:	1e53      	subs	r3, r2, #1
 800ae42:	9306      	str	r3, [sp, #24]
 800ae44:	bf45      	ittet	mi
 800ae46:	f1c2 0301 	rsbmi	r3, r2, #1
 800ae4a:	9305      	strmi	r3, [sp, #20]
 800ae4c:	2300      	movpl	r3, #0
 800ae4e:	2300      	movmi	r3, #0
 800ae50:	bf4c      	ite	mi
 800ae52:	9306      	strmi	r3, [sp, #24]
 800ae54:	9305      	strpl	r3, [sp, #20]
 800ae56:	f1b8 0f00 	cmp.w	r8, #0
 800ae5a:	910c      	str	r1, [sp, #48]	@ 0x30
 800ae5c:	db18      	blt.n	800ae90 <_dtoa_r+0x1f8>
 800ae5e:	9b06      	ldr	r3, [sp, #24]
 800ae60:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800ae64:	4443      	add	r3, r8
 800ae66:	9306      	str	r3, [sp, #24]
 800ae68:	2300      	movs	r3, #0
 800ae6a:	9a07      	ldr	r2, [sp, #28]
 800ae6c:	2a09      	cmp	r2, #9
 800ae6e:	d849      	bhi.n	800af04 <_dtoa_r+0x26c>
 800ae70:	2a05      	cmp	r2, #5
 800ae72:	bfc4      	itt	gt
 800ae74:	3a04      	subgt	r2, #4
 800ae76:	9207      	strgt	r2, [sp, #28]
 800ae78:	9a07      	ldr	r2, [sp, #28]
 800ae7a:	f1a2 0202 	sub.w	r2, r2, #2
 800ae7e:	bfcc      	ite	gt
 800ae80:	2400      	movgt	r4, #0
 800ae82:	2401      	movle	r4, #1
 800ae84:	2a03      	cmp	r2, #3
 800ae86:	d848      	bhi.n	800af1a <_dtoa_r+0x282>
 800ae88:	e8df f002 	tbb	[pc, r2]
 800ae8c:	3a2c2e0b 	.word	0x3a2c2e0b
 800ae90:	9b05      	ldr	r3, [sp, #20]
 800ae92:	2200      	movs	r2, #0
 800ae94:	eba3 0308 	sub.w	r3, r3, r8
 800ae98:	9305      	str	r3, [sp, #20]
 800ae9a:	920a      	str	r2, [sp, #40]	@ 0x28
 800ae9c:	f1c8 0300 	rsb	r3, r8, #0
 800aea0:	e7e3      	b.n	800ae6a <_dtoa_r+0x1d2>
 800aea2:	2200      	movs	r2, #0
 800aea4:	9208      	str	r2, [sp, #32]
 800aea6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aea8:	2a00      	cmp	r2, #0
 800aeaa:	dc39      	bgt.n	800af20 <_dtoa_r+0x288>
 800aeac:	f04f 0b01 	mov.w	fp, #1
 800aeb0:	46da      	mov	sl, fp
 800aeb2:	465a      	mov	r2, fp
 800aeb4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800aeb8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800aebc:	2100      	movs	r1, #0
 800aebe:	2004      	movs	r0, #4
 800aec0:	f100 0614 	add.w	r6, r0, #20
 800aec4:	4296      	cmp	r6, r2
 800aec6:	d930      	bls.n	800af2a <_dtoa_r+0x292>
 800aec8:	6079      	str	r1, [r7, #4]
 800aeca:	4648      	mov	r0, r9
 800aecc:	9304      	str	r3, [sp, #16]
 800aece:	f000 fd39 	bl	800b944 <_Balloc>
 800aed2:	9b04      	ldr	r3, [sp, #16]
 800aed4:	4607      	mov	r7, r0
 800aed6:	2800      	cmp	r0, #0
 800aed8:	d146      	bne.n	800af68 <_dtoa_r+0x2d0>
 800aeda:	4b22      	ldr	r3, [pc, #136]	@ (800af64 <_dtoa_r+0x2cc>)
 800aedc:	4602      	mov	r2, r0
 800aede:	f240 11af 	movw	r1, #431	@ 0x1af
 800aee2:	e6f2      	b.n	800acca <_dtoa_r+0x32>
 800aee4:	2201      	movs	r2, #1
 800aee6:	e7dd      	b.n	800aea4 <_dtoa_r+0x20c>
 800aee8:	2200      	movs	r2, #0
 800aeea:	9208      	str	r2, [sp, #32]
 800aeec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aeee:	eb08 0b02 	add.w	fp, r8, r2
 800aef2:	f10b 0a01 	add.w	sl, fp, #1
 800aef6:	4652      	mov	r2, sl
 800aef8:	2a01      	cmp	r2, #1
 800aefa:	bfb8      	it	lt
 800aefc:	2201      	movlt	r2, #1
 800aefe:	e7db      	b.n	800aeb8 <_dtoa_r+0x220>
 800af00:	2201      	movs	r2, #1
 800af02:	e7f2      	b.n	800aeea <_dtoa_r+0x252>
 800af04:	2401      	movs	r4, #1
 800af06:	2200      	movs	r2, #0
 800af08:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800af0c:	f04f 3bff 	mov.w	fp, #4294967295
 800af10:	2100      	movs	r1, #0
 800af12:	46da      	mov	sl, fp
 800af14:	2212      	movs	r2, #18
 800af16:	9109      	str	r1, [sp, #36]	@ 0x24
 800af18:	e7ce      	b.n	800aeb8 <_dtoa_r+0x220>
 800af1a:	2201      	movs	r2, #1
 800af1c:	9208      	str	r2, [sp, #32]
 800af1e:	e7f5      	b.n	800af0c <_dtoa_r+0x274>
 800af20:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800af24:	46da      	mov	sl, fp
 800af26:	465a      	mov	r2, fp
 800af28:	e7c6      	b.n	800aeb8 <_dtoa_r+0x220>
 800af2a:	3101      	adds	r1, #1
 800af2c:	0040      	lsls	r0, r0, #1
 800af2e:	e7c7      	b.n	800aec0 <_dtoa_r+0x228>
 800af30:	636f4361 	.word	0x636f4361
 800af34:	3fd287a7 	.word	0x3fd287a7
 800af38:	8b60c8b3 	.word	0x8b60c8b3
 800af3c:	3fc68a28 	.word	0x3fc68a28
 800af40:	509f79fb 	.word	0x509f79fb
 800af44:	3fd34413 	.word	0x3fd34413
 800af48:	0800e14e 	.word	0x0800e14e
 800af4c:	0800e165 	.word	0x0800e165
 800af50:	7ff00000 	.word	0x7ff00000
 800af54:	0800e14a 	.word	0x0800e14a
 800af58:	0800e119 	.word	0x0800e119
 800af5c:	0800e118 	.word	0x0800e118
 800af60:	0800e260 	.word	0x0800e260
 800af64:	0800e1bd 	.word	0x0800e1bd
 800af68:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800af6c:	f1ba 0f0e 	cmp.w	sl, #14
 800af70:	6010      	str	r0, [r2, #0]
 800af72:	d86f      	bhi.n	800b054 <_dtoa_r+0x3bc>
 800af74:	2c00      	cmp	r4, #0
 800af76:	d06d      	beq.n	800b054 <_dtoa_r+0x3bc>
 800af78:	f1b8 0f00 	cmp.w	r8, #0
 800af7c:	f340 80c2 	ble.w	800b104 <_dtoa_r+0x46c>
 800af80:	4aca      	ldr	r2, [pc, #808]	@ (800b2ac <_dtoa_r+0x614>)
 800af82:	f008 010f 	and.w	r1, r8, #15
 800af86:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800af8a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800af8e:	ed92 7b00 	vldr	d7, [r2]
 800af92:	ea4f 1128 	mov.w	r1, r8, asr #4
 800af96:	f000 80a9 	beq.w	800b0ec <_dtoa_r+0x454>
 800af9a:	4ac5      	ldr	r2, [pc, #788]	@ (800b2b0 <_dtoa_r+0x618>)
 800af9c:	ed92 6b08 	vldr	d6, [r2, #32]
 800afa0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800afa4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800afa8:	f001 010f 	and.w	r1, r1, #15
 800afac:	2203      	movs	r2, #3
 800afae:	48c0      	ldr	r0, [pc, #768]	@ (800b2b0 <_dtoa_r+0x618>)
 800afb0:	2900      	cmp	r1, #0
 800afb2:	f040 809d 	bne.w	800b0f0 <_dtoa_r+0x458>
 800afb6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800afba:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800afbe:	ed8d 7b02 	vstr	d7, [sp, #8]
 800afc2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800afc4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800afc8:	2900      	cmp	r1, #0
 800afca:	f000 80c1 	beq.w	800b150 <_dtoa_r+0x4b8>
 800afce:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800afd2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800afd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afda:	f140 80b9 	bpl.w	800b150 <_dtoa_r+0x4b8>
 800afde:	f1ba 0f00 	cmp.w	sl, #0
 800afe2:	f000 80b5 	beq.w	800b150 <_dtoa_r+0x4b8>
 800afe6:	f1bb 0f00 	cmp.w	fp, #0
 800afea:	dd31      	ble.n	800b050 <_dtoa_r+0x3b8>
 800afec:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800aff0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aff4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aff8:	f108 31ff 	add.w	r1, r8, #4294967295
 800affc:	9104      	str	r1, [sp, #16]
 800affe:	3201      	adds	r2, #1
 800b000:	465c      	mov	r4, fp
 800b002:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b006:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800b00a:	ee07 2a90 	vmov	s15, r2
 800b00e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b012:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b016:	ee15 2a90 	vmov	r2, s11
 800b01a:	ec51 0b15 	vmov	r0, r1, d5
 800b01e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800b022:	2c00      	cmp	r4, #0
 800b024:	f040 8098 	bne.w	800b158 <_dtoa_r+0x4c0>
 800b028:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b02c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b030:	ec41 0b17 	vmov	d7, r0, r1
 800b034:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b03c:	f300 8261 	bgt.w	800b502 <_dtoa_r+0x86a>
 800b040:	eeb1 7b47 	vneg.f64	d7, d7
 800b044:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b04c:	f100 80f5 	bmi.w	800b23a <_dtoa_r+0x5a2>
 800b050:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b054:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b056:	2a00      	cmp	r2, #0
 800b058:	f2c0 812c 	blt.w	800b2b4 <_dtoa_r+0x61c>
 800b05c:	f1b8 0f0e 	cmp.w	r8, #14
 800b060:	f300 8128 	bgt.w	800b2b4 <_dtoa_r+0x61c>
 800b064:	4b91      	ldr	r3, [pc, #580]	@ (800b2ac <_dtoa_r+0x614>)
 800b066:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b06a:	ed93 6b00 	vldr	d6, [r3]
 800b06e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b070:	2b00      	cmp	r3, #0
 800b072:	da03      	bge.n	800b07c <_dtoa_r+0x3e4>
 800b074:	f1ba 0f00 	cmp.w	sl, #0
 800b078:	f340 80d2 	ble.w	800b220 <_dtoa_r+0x588>
 800b07c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800b080:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b084:	463e      	mov	r6, r7
 800b086:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b08a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b08e:	ee15 3a10 	vmov	r3, s10
 800b092:	3330      	adds	r3, #48	@ 0x30
 800b094:	f806 3b01 	strb.w	r3, [r6], #1
 800b098:	1bf3      	subs	r3, r6, r7
 800b09a:	459a      	cmp	sl, r3
 800b09c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b0a0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b0a4:	f040 80f8 	bne.w	800b298 <_dtoa_r+0x600>
 800b0a8:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b0ac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b0b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0b4:	f300 80dd 	bgt.w	800b272 <_dtoa_r+0x5da>
 800b0b8:	eeb4 7b46 	vcmp.f64	d7, d6
 800b0bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0c0:	d104      	bne.n	800b0cc <_dtoa_r+0x434>
 800b0c2:	ee15 3a10 	vmov	r3, s10
 800b0c6:	07db      	lsls	r3, r3, #31
 800b0c8:	f100 80d3 	bmi.w	800b272 <_dtoa_r+0x5da>
 800b0cc:	9901      	ldr	r1, [sp, #4]
 800b0ce:	4648      	mov	r0, r9
 800b0d0:	f000 fc78 	bl	800b9c4 <_Bfree>
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b0d8:	7033      	strb	r3, [r6, #0]
 800b0da:	f108 0301 	add.w	r3, r8, #1
 800b0de:	6013      	str	r3, [r2, #0]
 800b0e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	f000 8304 	beq.w	800b6f0 <_dtoa_r+0xa58>
 800b0e8:	601e      	str	r6, [r3, #0]
 800b0ea:	e301      	b.n	800b6f0 <_dtoa_r+0xa58>
 800b0ec:	2202      	movs	r2, #2
 800b0ee:	e75e      	b.n	800afae <_dtoa_r+0x316>
 800b0f0:	07cc      	lsls	r4, r1, #31
 800b0f2:	d504      	bpl.n	800b0fe <_dtoa_r+0x466>
 800b0f4:	ed90 6b00 	vldr	d6, [r0]
 800b0f8:	3201      	adds	r2, #1
 800b0fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b0fe:	1049      	asrs	r1, r1, #1
 800b100:	3008      	adds	r0, #8
 800b102:	e755      	b.n	800afb0 <_dtoa_r+0x318>
 800b104:	d022      	beq.n	800b14c <_dtoa_r+0x4b4>
 800b106:	f1c8 0100 	rsb	r1, r8, #0
 800b10a:	4a68      	ldr	r2, [pc, #416]	@ (800b2ac <_dtoa_r+0x614>)
 800b10c:	f001 000f 	and.w	r0, r1, #15
 800b110:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b114:	ed92 7b00 	vldr	d7, [r2]
 800b118:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b11c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b120:	4863      	ldr	r0, [pc, #396]	@ (800b2b0 <_dtoa_r+0x618>)
 800b122:	1109      	asrs	r1, r1, #4
 800b124:	2400      	movs	r4, #0
 800b126:	2202      	movs	r2, #2
 800b128:	b929      	cbnz	r1, 800b136 <_dtoa_r+0x49e>
 800b12a:	2c00      	cmp	r4, #0
 800b12c:	f43f af49 	beq.w	800afc2 <_dtoa_r+0x32a>
 800b130:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b134:	e745      	b.n	800afc2 <_dtoa_r+0x32a>
 800b136:	07ce      	lsls	r6, r1, #31
 800b138:	d505      	bpl.n	800b146 <_dtoa_r+0x4ae>
 800b13a:	ed90 6b00 	vldr	d6, [r0]
 800b13e:	3201      	adds	r2, #1
 800b140:	2401      	movs	r4, #1
 800b142:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b146:	1049      	asrs	r1, r1, #1
 800b148:	3008      	adds	r0, #8
 800b14a:	e7ed      	b.n	800b128 <_dtoa_r+0x490>
 800b14c:	2202      	movs	r2, #2
 800b14e:	e738      	b.n	800afc2 <_dtoa_r+0x32a>
 800b150:	f8cd 8010 	str.w	r8, [sp, #16]
 800b154:	4654      	mov	r4, sl
 800b156:	e754      	b.n	800b002 <_dtoa_r+0x36a>
 800b158:	4a54      	ldr	r2, [pc, #336]	@ (800b2ac <_dtoa_r+0x614>)
 800b15a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800b15e:	ed12 4b02 	vldr	d4, [r2, #-8]
 800b162:	9a08      	ldr	r2, [sp, #32]
 800b164:	ec41 0b17 	vmov	d7, r0, r1
 800b168:	443c      	add	r4, r7
 800b16a:	b34a      	cbz	r2, 800b1c0 <_dtoa_r+0x528>
 800b16c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800b170:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800b174:	463e      	mov	r6, r7
 800b176:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b17a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b17e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b182:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b186:	ee14 2a90 	vmov	r2, s9
 800b18a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b18e:	3230      	adds	r2, #48	@ 0x30
 800b190:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b194:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b19c:	f806 2b01 	strb.w	r2, [r6], #1
 800b1a0:	d438      	bmi.n	800b214 <_dtoa_r+0x57c>
 800b1a2:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b1a6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b1aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ae:	d462      	bmi.n	800b276 <_dtoa_r+0x5de>
 800b1b0:	42a6      	cmp	r6, r4
 800b1b2:	f43f af4d 	beq.w	800b050 <_dtoa_r+0x3b8>
 800b1b6:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b1ba:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b1be:	e7e0      	b.n	800b182 <_dtoa_r+0x4ea>
 800b1c0:	4621      	mov	r1, r4
 800b1c2:	463e      	mov	r6, r7
 800b1c4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b1c8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b1cc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b1d0:	ee14 2a90 	vmov	r2, s9
 800b1d4:	3230      	adds	r2, #48	@ 0x30
 800b1d6:	f806 2b01 	strb.w	r2, [r6], #1
 800b1da:	42a6      	cmp	r6, r4
 800b1dc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b1e0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b1e4:	d119      	bne.n	800b21a <_dtoa_r+0x582>
 800b1e6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800b1ea:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b1ee:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b1f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1f6:	dc3e      	bgt.n	800b276 <_dtoa_r+0x5de>
 800b1f8:	ee35 5b47 	vsub.f64	d5, d5, d7
 800b1fc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800b200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b204:	f57f af24 	bpl.w	800b050 <_dtoa_r+0x3b8>
 800b208:	460e      	mov	r6, r1
 800b20a:	3901      	subs	r1, #1
 800b20c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b210:	2b30      	cmp	r3, #48	@ 0x30
 800b212:	d0f9      	beq.n	800b208 <_dtoa_r+0x570>
 800b214:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b218:	e758      	b.n	800b0cc <_dtoa_r+0x434>
 800b21a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b21e:	e7d5      	b.n	800b1cc <_dtoa_r+0x534>
 800b220:	d10b      	bne.n	800b23a <_dtoa_r+0x5a2>
 800b222:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b226:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b22a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b22e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b236:	f2c0 8161 	blt.w	800b4fc <_dtoa_r+0x864>
 800b23a:	2400      	movs	r4, #0
 800b23c:	4625      	mov	r5, r4
 800b23e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b240:	43db      	mvns	r3, r3
 800b242:	9304      	str	r3, [sp, #16]
 800b244:	463e      	mov	r6, r7
 800b246:	f04f 0800 	mov.w	r8, #0
 800b24a:	4621      	mov	r1, r4
 800b24c:	4648      	mov	r0, r9
 800b24e:	f000 fbb9 	bl	800b9c4 <_Bfree>
 800b252:	2d00      	cmp	r5, #0
 800b254:	d0de      	beq.n	800b214 <_dtoa_r+0x57c>
 800b256:	f1b8 0f00 	cmp.w	r8, #0
 800b25a:	d005      	beq.n	800b268 <_dtoa_r+0x5d0>
 800b25c:	45a8      	cmp	r8, r5
 800b25e:	d003      	beq.n	800b268 <_dtoa_r+0x5d0>
 800b260:	4641      	mov	r1, r8
 800b262:	4648      	mov	r0, r9
 800b264:	f000 fbae 	bl	800b9c4 <_Bfree>
 800b268:	4629      	mov	r1, r5
 800b26a:	4648      	mov	r0, r9
 800b26c:	f000 fbaa 	bl	800b9c4 <_Bfree>
 800b270:	e7d0      	b.n	800b214 <_dtoa_r+0x57c>
 800b272:	f8cd 8010 	str.w	r8, [sp, #16]
 800b276:	4633      	mov	r3, r6
 800b278:	461e      	mov	r6, r3
 800b27a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b27e:	2a39      	cmp	r2, #57	@ 0x39
 800b280:	d106      	bne.n	800b290 <_dtoa_r+0x5f8>
 800b282:	429f      	cmp	r7, r3
 800b284:	d1f8      	bne.n	800b278 <_dtoa_r+0x5e0>
 800b286:	9a04      	ldr	r2, [sp, #16]
 800b288:	3201      	adds	r2, #1
 800b28a:	9204      	str	r2, [sp, #16]
 800b28c:	2230      	movs	r2, #48	@ 0x30
 800b28e:	703a      	strb	r2, [r7, #0]
 800b290:	781a      	ldrb	r2, [r3, #0]
 800b292:	3201      	adds	r2, #1
 800b294:	701a      	strb	r2, [r3, #0]
 800b296:	e7bd      	b.n	800b214 <_dtoa_r+0x57c>
 800b298:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b29c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b2a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2a4:	f47f aeef 	bne.w	800b086 <_dtoa_r+0x3ee>
 800b2a8:	e710      	b.n	800b0cc <_dtoa_r+0x434>
 800b2aa:	bf00      	nop
 800b2ac:	0800e260 	.word	0x0800e260
 800b2b0:	0800e238 	.word	0x0800e238
 800b2b4:	9908      	ldr	r1, [sp, #32]
 800b2b6:	2900      	cmp	r1, #0
 800b2b8:	f000 80e3 	beq.w	800b482 <_dtoa_r+0x7ea>
 800b2bc:	9907      	ldr	r1, [sp, #28]
 800b2be:	2901      	cmp	r1, #1
 800b2c0:	f300 80c8 	bgt.w	800b454 <_dtoa_r+0x7bc>
 800b2c4:	2d00      	cmp	r5, #0
 800b2c6:	f000 80c1 	beq.w	800b44c <_dtoa_r+0x7b4>
 800b2ca:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b2ce:	9e05      	ldr	r6, [sp, #20]
 800b2d0:	461c      	mov	r4, r3
 800b2d2:	9304      	str	r3, [sp, #16]
 800b2d4:	9b05      	ldr	r3, [sp, #20]
 800b2d6:	4413      	add	r3, r2
 800b2d8:	9305      	str	r3, [sp, #20]
 800b2da:	9b06      	ldr	r3, [sp, #24]
 800b2dc:	2101      	movs	r1, #1
 800b2de:	4413      	add	r3, r2
 800b2e0:	4648      	mov	r0, r9
 800b2e2:	9306      	str	r3, [sp, #24]
 800b2e4:	f000 fc6c 	bl	800bbc0 <__i2b>
 800b2e8:	9b04      	ldr	r3, [sp, #16]
 800b2ea:	4605      	mov	r5, r0
 800b2ec:	b166      	cbz	r6, 800b308 <_dtoa_r+0x670>
 800b2ee:	9a06      	ldr	r2, [sp, #24]
 800b2f0:	2a00      	cmp	r2, #0
 800b2f2:	dd09      	ble.n	800b308 <_dtoa_r+0x670>
 800b2f4:	42b2      	cmp	r2, r6
 800b2f6:	9905      	ldr	r1, [sp, #20]
 800b2f8:	bfa8      	it	ge
 800b2fa:	4632      	movge	r2, r6
 800b2fc:	1a89      	subs	r1, r1, r2
 800b2fe:	9105      	str	r1, [sp, #20]
 800b300:	9906      	ldr	r1, [sp, #24]
 800b302:	1ab6      	subs	r6, r6, r2
 800b304:	1a8a      	subs	r2, r1, r2
 800b306:	9206      	str	r2, [sp, #24]
 800b308:	b1fb      	cbz	r3, 800b34a <_dtoa_r+0x6b2>
 800b30a:	9a08      	ldr	r2, [sp, #32]
 800b30c:	2a00      	cmp	r2, #0
 800b30e:	f000 80bc 	beq.w	800b48a <_dtoa_r+0x7f2>
 800b312:	b19c      	cbz	r4, 800b33c <_dtoa_r+0x6a4>
 800b314:	4629      	mov	r1, r5
 800b316:	4622      	mov	r2, r4
 800b318:	4648      	mov	r0, r9
 800b31a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b31c:	f000 fd10 	bl	800bd40 <__pow5mult>
 800b320:	9a01      	ldr	r2, [sp, #4]
 800b322:	4601      	mov	r1, r0
 800b324:	4605      	mov	r5, r0
 800b326:	4648      	mov	r0, r9
 800b328:	f000 fc60 	bl	800bbec <__multiply>
 800b32c:	9901      	ldr	r1, [sp, #4]
 800b32e:	9004      	str	r0, [sp, #16]
 800b330:	4648      	mov	r0, r9
 800b332:	f000 fb47 	bl	800b9c4 <_Bfree>
 800b336:	9a04      	ldr	r2, [sp, #16]
 800b338:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b33a:	9201      	str	r2, [sp, #4]
 800b33c:	1b1a      	subs	r2, r3, r4
 800b33e:	d004      	beq.n	800b34a <_dtoa_r+0x6b2>
 800b340:	9901      	ldr	r1, [sp, #4]
 800b342:	4648      	mov	r0, r9
 800b344:	f000 fcfc 	bl	800bd40 <__pow5mult>
 800b348:	9001      	str	r0, [sp, #4]
 800b34a:	2101      	movs	r1, #1
 800b34c:	4648      	mov	r0, r9
 800b34e:	f000 fc37 	bl	800bbc0 <__i2b>
 800b352:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b354:	4604      	mov	r4, r0
 800b356:	2b00      	cmp	r3, #0
 800b358:	f000 81d0 	beq.w	800b6fc <_dtoa_r+0xa64>
 800b35c:	461a      	mov	r2, r3
 800b35e:	4601      	mov	r1, r0
 800b360:	4648      	mov	r0, r9
 800b362:	f000 fced 	bl	800bd40 <__pow5mult>
 800b366:	9b07      	ldr	r3, [sp, #28]
 800b368:	2b01      	cmp	r3, #1
 800b36a:	4604      	mov	r4, r0
 800b36c:	f300 8095 	bgt.w	800b49a <_dtoa_r+0x802>
 800b370:	9b02      	ldr	r3, [sp, #8]
 800b372:	2b00      	cmp	r3, #0
 800b374:	f040 808b 	bne.w	800b48e <_dtoa_r+0x7f6>
 800b378:	9b03      	ldr	r3, [sp, #12]
 800b37a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b37e:	2a00      	cmp	r2, #0
 800b380:	f040 8087 	bne.w	800b492 <_dtoa_r+0x7fa>
 800b384:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b388:	0d12      	lsrs	r2, r2, #20
 800b38a:	0512      	lsls	r2, r2, #20
 800b38c:	2a00      	cmp	r2, #0
 800b38e:	f000 8082 	beq.w	800b496 <_dtoa_r+0x7fe>
 800b392:	9b05      	ldr	r3, [sp, #20]
 800b394:	3301      	adds	r3, #1
 800b396:	9305      	str	r3, [sp, #20]
 800b398:	9b06      	ldr	r3, [sp, #24]
 800b39a:	3301      	adds	r3, #1
 800b39c:	9306      	str	r3, [sp, #24]
 800b39e:	2301      	movs	r3, #1
 800b3a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	f000 81af 	beq.w	800b708 <_dtoa_r+0xa70>
 800b3aa:	6922      	ldr	r2, [r4, #16]
 800b3ac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b3b0:	6910      	ldr	r0, [r2, #16]
 800b3b2:	f000 fbb9 	bl	800bb28 <__hi0bits>
 800b3b6:	f1c0 0020 	rsb	r0, r0, #32
 800b3ba:	9b06      	ldr	r3, [sp, #24]
 800b3bc:	4418      	add	r0, r3
 800b3be:	f010 001f 	ands.w	r0, r0, #31
 800b3c2:	d076      	beq.n	800b4b2 <_dtoa_r+0x81a>
 800b3c4:	f1c0 0220 	rsb	r2, r0, #32
 800b3c8:	2a04      	cmp	r2, #4
 800b3ca:	dd69      	ble.n	800b4a0 <_dtoa_r+0x808>
 800b3cc:	9b05      	ldr	r3, [sp, #20]
 800b3ce:	f1c0 001c 	rsb	r0, r0, #28
 800b3d2:	4403      	add	r3, r0
 800b3d4:	9305      	str	r3, [sp, #20]
 800b3d6:	9b06      	ldr	r3, [sp, #24]
 800b3d8:	4406      	add	r6, r0
 800b3da:	4403      	add	r3, r0
 800b3dc:	9306      	str	r3, [sp, #24]
 800b3de:	9b05      	ldr	r3, [sp, #20]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	dd05      	ble.n	800b3f0 <_dtoa_r+0x758>
 800b3e4:	9901      	ldr	r1, [sp, #4]
 800b3e6:	461a      	mov	r2, r3
 800b3e8:	4648      	mov	r0, r9
 800b3ea:	f000 fd03 	bl	800bdf4 <__lshift>
 800b3ee:	9001      	str	r0, [sp, #4]
 800b3f0:	9b06      	ldr	r3, [sp, #24]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	dd05      	ble.n	800b402 <_dtoa_r+0x76a>
 800b3f6:	4621      	mov	r1, r4
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	4648      	mov	r0, r9
 800b3fc:	f000 fcfa 	bl	800bdf4 <__lshift>
 800b400:	4604      	mov	r4, r0
 800b402:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b404:	2b00      	cmp	r3, #0
 800b406:	d056      	beq.n	800b4b6 <_dtoa_r+0x81e>
 800b408:	9801      	ldr	r0, [sp, #4]
 800b40a:	4621      	mov	r1, r4
 800b40c:	f000 fd5e 	bl	800becc <__mcmp>
 800b410:	2800      	cmp	r0, #0
 800b412:	da50      	bge.n	800b4b6 <_dtoa_r+0x81e>
 800b414:	f108 33ff 	add.w	r3, r8, #4294967295
 800b418:	9304      	str	r3, [sp, #16]
 800b41a:	9901      	ldr	r1, [sp, #4]
 800b41c:	2300      	movs	r3, #0
 800b41e:	220a      	movs	r2, #10
 800b420:	4648      	mov	r0, r9
 800b422:	f000 faf1 	bl	800ba08 <__multadd>
 800b426:	9b08      	ldr	r3, [sp, #32]
 800b428:	9001      	str	r0, [sp, #4]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	f000 816e 	beq.w	800b70c <_dtoa_r+0xa74>
 800b430:	4629      	mov	r1, r5
 800b432:	2300      	movs	r3, #0
 800b434:	220a      	movs	r2, #10
 800b436:	4648      	mov	r0, r9
 800b438:	f000 fae6 	bl	800ba08 <__multadd>
 800b43c:	f1bb 0f00 	cmp.w	fp, #0
 800b440:	4605      	mov	r5, r0
 800b442:	dc64      	bgt.n	800b50e <_dtoa_r+0x876>
 800b444:	9b07      	ldr	r3, [sp, #28]
 800b446:	2b02      	cmp	r3, #2
 800b448:	dc3e      	bgt.n	800b4c8 <_dtoa_r+0x830>
 800b44a:	e060      	b.n	800b50e <_dtoa_r+0x876>
 800b44c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b44e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b452:	e73c      	b.n	800b2ce <_dtoa_r+0x636>
 800b454:	f10a 34ff 	add.w	r4, sl, #4294967295
 800b458:	42a3      	cmp	r3, r4
 800b45a:	bfbf      	itttt	lt
 800b45c:	1ae2      	sublt	r2, r4, r3
 800b45e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b460:	189b      	addlt	r3, r3, r2
 800b462:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800b464:	bfae      	itee	ge
 800b466:	1b1c      	subge	r4, r3, r4
 800b468:	4623      	movlt	r3, r4
 800b46a:	2400      	movlt	r4, #0
 800b46c:	f1ba 0f00 	cmp.w	sl, #0
 800b470:	bfb5      	itete	lt
 800b472:	9a05      	ldrlt	r2, [sp, #20]
 800b474:	9e05      	ldrge	r6, [sp, #20]
 800b476:	eba2 060a 	sublt.w	r6, r2, sl
 800b47a:	4652      	movge	r2, sl
 800b47c:	bfb8      	it	lt
 800b47e:	2200      	movlt	r2, #0
 800b480:	e727      	b.n	800b2d2 <_dtoa_r+0x63a>
 800b482:	9e05      	ldr	r6, [sp, #20]
 800b484:	9d08      	ldr	r5, [sp, #32]
 800b486:	461c      	mov	r4, r3
 800b488:	e730      	b.n	800b2ec <_dtoa_r+0x654>
 800b48a:	461a      	mov	r2, r3
 800b48c:	e758      	b.n	800b340 <_dtoa_r+0x6a8>
 800b48e:	2300      	movs	r3, #0
 800b490:	e786      	b.n	800b3a0 <_dtoa_r+0x708>
 800b492:	9b02      	ldr	r3, [sp, #8]
 800b494:	e784      	b.n	800b3a0 <_dtoa_r+0x708>
 800b496:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b498:	e783      	b.n	800b3a2 <_dtoa_r+0x70a>
 800b49a:	2300      	movs	r3, #0
 800b49c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b49e:	e784      	b.n	800b3aa <_dtoa_r+0x712>
 800b4a0:	d09d      	beq.n	800b3de <_dtoa_r+0x746>
 800b4a2:	9b05      	ldr	r3, [sp, #20]
 800b4a4:	321c      	adds	r2, #28
 800b4a6:	4413      	add	r3, r2
 800b4a8:	9305      	str	r3, [sp, #20]
 800b4aa:	9b06      	ldr	r3, [sp, #24]
 800b4ac:	4416      	add	r6, r2
 800b4ae:	4413      	add	r3, r2
 800b4b0:	e794      	b.n	800b3dc <_dtoa_r+0x744>
 800b4b2:	4602      	mov	r2, r0
 800b4b4:	e7f5      	b.n	800b4a2 <_dtoa_r+0x80a>
 800b4b6:	f1ba 0f00 	cmp.w	sl, #0
 800b4ba:	f8cd 8010 	str.w	r8, [sp, #16]
 800b4be:	46d3      	mov	fp, sl
 800b4c0:	dc21      	bgt.n	800b506 <_dtoa_r+0x86e>
 800b4c2:	9b07      	ldr	r3, [sp, #28]
 800b4c4:	2b02      	cmp	r3, #2
 800b4c6:	dd1e      	ble.n	800b506 <_dtoa_r+0x86e>
 800b4c8:	f1bb 0f00 	cmp.w	fp, #0
 800b4cc:	f47f aeb7 	bne.w	800b23e <_dtoa_r+0x5a6>
 800b4d0:	4621      	mov	r1, r4
 800b4d2:	465b      	mov	r3, fp
 800b4d4:	2205      	movs	r2, #5
 800b4d6:	4648      	mov	r0, r9
 800b4d8:	f000 fa96 	bl	800ba08 <__multadd>
 800b4dc:	4601      	mov	r1, r0
 800b4de:	4604      	mov	r4, r0
 800b4e0:	9801      	ldr	r0, [sp, #4]
 800b4e2:	f000 fcf3 	bl	800becc <__mcmp>
 800b4e6:	2800      	cmp	r0, #0
 800b4e8:	f77f aea9 	ble.w	800b23e <_dtoa_r+0x5a6>
 800b4ec:	463e      	mov	r6, r7
 800b4ee:	2331      	movs	r3, #49	@ 0x31
 800b4f0:	f806 3b01 	strb.w	r3, [r6], #1
 800b4f4:	9b04      	ldr	r3, [sp, #16]
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	9304      	str	r3, [sp, #16]
 800b4fa:	e6a4      	b.n	800b246 <_dtoa_r+0x5ae>
 800b4fc:	f8cd 8010 	str.w	r8, [sp, #16]
 800b500:	4654      	mov	r4, sl
 800b502:	4625      	mov	r5, r4
 800b504:	e7f2      	b.n	800b4ec <_dtoa_r+0x854>
 800b506:	9b08      	ldr	r3, [sp, #32]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	f000 8103 	beq.w	800b714 <_dtoa_r+0xa7c>
 800b50e:	2e00      	cmp	r6, #0
 800b510:	dd05      	ble.n	800b51e <_dtoa_r+0x886>
 800b512:	4629      	mov	r1, r5
 800b514:	4632      	mov	r2, r6
 800b516:	4648      	mov	r0, r9
 800b518:	f000 fc6c 	bl	800bdf4 <__lshift>
 800b51c:	4605      	mov	r5, r0
 800b51e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b520:	2b00      	cmp	r3, #0
 800b522:	d058      	beq.n	800b5d6 <_dtoa_r+0x93e>
 800b524:	6869      	ldr	r1, [r5, #4]
 800b526:	4648      	mov	r0, r9
 800b528:	f000 fa0c 	bl	800b944 <_Balloc>
 800b52c:	4606      	mov	r6, r0
 800b52e:	b928      	cbnz	r0, 800b53c <_dtoa_r+0x8a4>
 800b530:	4b82      	ldr	r3, [pc, #520]	@ (800b73c <_dtoa_r+0xaa4>)
 800b532:	4602      	mov	r2, r0
 800b534:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b538:	f7ff bbc7 	b.w	800acca <_dtoa_r+0x32>
 800b53c:	692a      	ldr	r2, [r5, #16]
 800b53e:	3202      	adds	r2, #2
 800b540:	0092      	lsls	r2, r2, #2
 800b542:	f105 010c 	add.w	r1, r5, #12
 800b546:	300c      	adds	r0, #12
 800b548:	f001 ff1e 	bl	800d388 <memcpy>
 800b54c:	2201      	movs	r2, #1
 800b54e:	4631      	mov	r1, r6
 800b550:	4648      	mov	r0, r9
 800b552:	f000 fc4f 	bl	800bdf4 <__lshift>
 800b556:	1c7b      	adds	r3, r7, #1
 800b558:	9305      	str	r3, [sp, #20]
 800b55a:	eb07 030b 	add.w	r3, r7, fp
 800b55e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b560:	9b02      	ldr	r3, [sp, #8]
 800b562:	f003 0301 	and.w	r3, r3, #1
 800b566:	46a8      	mov	r8, r5
 800b568:	9308      	str	r3, [sp, #32]
 800b56a:	4605      	mov	r5, r0
 800b56c:	9b05      	ldr	r3, [sp, #20]
 800b56e:	9801      	ldr	r0, [sp, #4]
 800b570:	4621      	mov	r1, r4
 800b572:	f103 3bff 	add.w	fp, r3, #4294967295
 800b576:	f7ff fb07 	bl	800ab88 <quorem>
 800b57a:	4641      	mov	r1, r8
 800b57c:	9002      	str	r0, [sp, #8]
 800b57e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b582:	9801      	ldr	r0, [sp, #4]
 800b584:	f000 fca2 	bl	800becc <__mcmp>
 800b588:	462a      	mov	r2, r5
 800b58a:	9006      	str	r0, [sp, #24]
 800b58c:	4621      	mov	r1, r4
 800b58e:	4648      	mov	r0, r9
 800b590:	f000 fcb8 	bl	800bf04 <__mdiff>
 800b594:	68c2      	ldr	r2, [r0, #12]
 800b596:	4606      	mov	r6, r0
 800b598:	b9fa      	cbnz	r2, 800b5da <_dtoa_r+0x942>
 800b59a:	4601      	mov	r1, r0
 800b59c:	9801      	ldr	r0, [sp, #4]
 800b59e:	f000 fc95 	bl	800becc <__mcmp>
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	4631      	mov	r1, r6
 800b5a6:	4648      	mov	r0, r9
 800b5a8:	920a      	str	r2, [sp, #40]	@ 0x28
 800b5aa:	f000 fa0b 	bl	800b9c4 <_Bfree>
 800b5ae:	9b07      	ldr	r3, [sp, #28]
 800b5b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b5b2:	9e05      	ldr	r6, [sp, #20]
 800b5b4:	ea43 0102 	orr.w	r1, r3, r2
 800b5b8:	9b08      	ldr	r3, [sp, #32]
 800b5ba:	4319      	orrs	r1, r3
 800b5bc:	d10f      	bne.n	800b5de <_dtoa_r+0x946>
 800b5be:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b5c2:	d028      	beq.n	800b616 <_dtoa_r+0x97e>
 800b5c4:	9b06      	ldr	r3, [sp, #24]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	dd02      	ble.n	800b5d0 <_dtoa_r+0x938>
 800b5ca:	9b02      	ldr	r3, [sp, #8]
 800b5cc:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800b5d0:	f88b a000 	strb.w	sl, [fp]
 800b5d4:	e639      	b.n	800b24a <_dtoa_r+0x5b2>
 800b5d6:	4628      	mov	r0, r5
 800b5d8:	e7bd      	b.n	800b556 <_dtoa_r+0x8be>
 800b5da:	2201      	movs	r2, #1
 800b5dc:	e7e2      	b.n	800b5a4 <_dtoa_r+0x90c>
 800b5de:	9b06      	ldr	r3, [sp, #24]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	db04      	blt.n	800b5ee <_dtoa_r+0x956>
 800b5e4:	9907      	ldr	r1, [sp, #28]
 800b5e6:	430b      	orrs	r3, r1
 800b5e8:	9908      	ldr	r1, [sp, #32]
 800b5ea:	430b      	orrs	r3, r1
 800b5ec:	d120      	bne.n	800b630 <_dtoa_r+0x998>
 800b5ee:	2a00      	cmp	r2, #0
 800b5f0:	ddee      	ble.n	800b5d0 <_dtoa_r+0x938>
 800b5f2:	9901      	ldr	r1, [sp, #4]
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	4648      	mov	r0, r9
 800b5f8:	f000 fbfc 	bl	800bdf4 <__lshift>
 800b5fc:	4621      	mov	r1, r4
 800b5fe:	9001      	str	r0, [sp, #4]
 800b600:	f000 fc64 	bl	800becc <__mcmp>
 800b604:	2800      	cmp	r0, #0
 800b606:	dc03      	bgt.n	800b610 <_dtoa_r+0x978>
 800b608:	d1e2      	bne.n	800b5d0 <_dtoa_r+0x938>
 800b60a:	f01a 0f01 	tst.w	sl, #1
 800b60e:	d0df      	beq.n	800b5d0 <_dtoa_r+0x938>
 800b610:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b614:	d1d9      	bne.n	800b5ca <_dtoa_r+0x932>
 800b616:	2339      	movs	r3, #57	@ 0x39
 800b618:	f88b 3000 	strb.w	r3, [fp]
 800b61c:	4633      	mov	r3, r6
 800b61e:	461e      	mov	r6, r3
 800b620:	3b01      	subs	r3, #1
 800b622:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b626:	2a39      	cmp	r2, #57	@ 0x39
 800b628:	d053      	beq.n	800b6d2 <_dtoa_r+0xa3a>
 800b62a:	3201      	adds	r2, #1
 800b62c:	701a      	strb	r2, [r3, #0]
 800b62e:	e60c      	b.n	800b24a <_dtoa_r+0x5b2>
 800b630:	2a00      	cmp	r2, #0
 800b632:	dd07      	ble.n	800b644 <_dtoa_r+0x9ac>
 800b634:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b638:	d0ed      	beq.n	800b616 <_dtoa_r+0x97e>
 800b63a:	f10a 0301 	add.w	r3, sl, #1
 800b63e:	f88b 3000 	strb.w	r3, [fp]
 800b642:	e602      	b.n	800b24a <_dtoa_r+0x5b2>
 800b644:	9b05      	ldr	r3, [sp, #20]
 800b646:	9a05      	ldr	r2, [sp, #20]
 800b648:	f803 ac01 	strb.w	sl, [r3, #-1]
 800b64c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b64e:	4293      	cmp	r3, r2
 800b650:	d029      	beq.n	800b6a6 <_dtoa_r+0xa0e>
 800b652:	9901      	ldr	r1, [sp, #4]
 800b654:	2300      	movs	r3, #0
 800b656:	220a      	movs	r2, #10
 800b658:	4648      	mov	r0, r9
 800b65a:	f000 f9d5 	bl	800ba08 <__multadd>
 800b65e:	45a8      	cmp	r8, r5
 800b660:	9001      	str	r0, [sp, #4]
 800b662:	f04f 0300 	mov.w	r3, #0
 800b666:	f04f 020a 	mov.w	r2, #10
 800b66a:	4641      	mov	r1, r8
 800b66c:	4648      	mov	r0, r9
 800b66e:	d107      	bne.n	800b680 <_dtoa_r+0x9e8>
 800b670:	f000 f9ca 	bl	800ba08 <__multadd>
 800b674:	4680      	mov	r8, r0
 800b676:	4605      	mov	r5, r0
 800b678:	9b05      	ldr	r3, [sp, #20]
 800b67a:	3301      	adds	r3, #1
 800b67c:	9305      	str	r3, [sp, #20]
 800b67e:	e775      	b.n	800b56c <_dtoa_r+0x8d4>
 800b680:	f000 f9c2 	bl	800ba08 <__multadd>
 800b684:	4629      	mov	r1, r5
 800b686:	4680      	mov	r8, r0
 800b688:	2300      	movs	r3, #0
 800b68a:	220a      	movs	r2, #10
 800b68c:	4648      	mov	r0, r9
 800b68e:	f000 f9bb 	bl	800ba08 <__multadd>
 800b692:	4605      	mov	r5, r0
 800b694:	e7f0      	b.n	800b678 <_dtoa_r+0x9e0>
 800b696:	f1bb 0f00 	cmp.w	fp, #0
 800b69a:	bfcc      	ite	gt
 800b69c:	465e      	movgt	r6, fp
 800b69e:	2601      	movle	r6, #1
 800b6a0:	443e      	add	r6, r7
 800b6a2:	f04f 0800 	mov.w	r8, #0
 800b6a6:	9901      	ldr	r1, [sp, #4]
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	4648      	mov	r0, r9
 800b6ac:	f000 fba2 	bl	800bdf4 <__lshift>
 800b6b0:	4621      	mov	r1, r4
 800b6b2:	9001      	str	r0, [sp, #4]
 800b6b4:	f000 fc0a 	bl	800becc <__mcmp>
 800b6b8:	2800      	cmp	r0, #0
 800b6ba:	dcaf      	bgt.n	800b61c <_dtoa_r+0x984>
 800b6bc:	d102      	bne.n	800b6c4 <_dtoa_r+0xa2c>
 800b6be:	f01a 0f01 	tst.w	sl, #1
 800b6c2:	d1ab      	bne.n	800b61c <_dtoa_r+0x984>
 800b6c4:	4633      	mov	r3, r6
 800b6c6:	461e      	mov	r6, r3
 800b6c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b6cc:	2a30      	cmp	r2, #48	@ 0x30
 800b6ce:	d0fa      	beq.n	800b6c6 <_dtoa_r+0xa2e>
 800b6d0:	e5bb      	b.n	800b24a <_dtoa_r+0x5b2>
 800b6d2:	429f      	cmp	r7, r3
 800b6d4:	d1a3      	bne.n	800b61e <_dtoa_r+0x986>
 800b6d6:	9b04      	ldr	r3, [sp, #16]
 800b6d8:	3301      	adds	r3, #1
 800b6da:	9304      	str	r3, [sp, #16]
 800b6dc:	2331      	movs	r3, #49	@ 0x31
 800b6de:	703b      	strb	r3, [r7, #0]
 800b6e0:	e5b3      	b.n	800b24a <_dtoa_r+0x5b2>
 800b6e2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b6e4:	4f16      	ldr	r7, [pc, #88]	@ (800b740 <_dtoa_r+0xaa8>)
 800b6e6:	b11b      	cbz	r3, 800b6f0 <_dtoa_r+0xa58>
 800b6e8:	f107 0308 	add.w	r3, r7, #8
 800b6ec:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b6ee:	6013      	str	r3, [r2, #0]
 800b6f0:	4638      	mov	r0, r7
 800b6f2:	b011      	add	sp, #68	@ 0x44
 800b6f4:	ecbd 8b02 	vpop	{d8}
 800b6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6fc:	9b07      	ldr	r3, [sp, #28]
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	f77f ae36 	ble.w	800b370 <_dtoa_r+0x6d8>
 800b704:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b706:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b708:	2001      	movs	r0, #1
 800b70a:	e656      	b.n	800b3ba <_dtoa_r+0x722>
 800b70c:	f1bb 0f00 	cmp.w	fp, #0
 800b710:	f77f aed7 	ble.w	800b4c2 <_dtoa_r+0x82a>
 800b714:	463e      	mov	r6, r7
 800b716:	9801      	ldr	r0, [sp, #4]
 800b718:	4621      	mov	r1, r4
 800b71a:	f7ff fa35 	bl	800ab88 <quorem>
 800b71e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b722:	f806 ab01 	strb.w	sl, [r6], #1
 800b726:	1bf2      	subs	r2, r6, r7
 800b728:	4593      	cmp	fp, r2
 800b72a:	ddb4      	ble.n	800b696 <_dtoa_r+0x9fe>
 800b72c:	9901      	ldr	r1, [sp, #4]
 800b72e:	2300      	movs	r3, #0
 800b730:	220a      	movs	r2, #10
 800b732:	4648      	mov	r0, r9
 800b734:	f000 f968 	bl	800ba08 <__multadd>
 800b738:	9001      	str	r0, [sp, #4]
 800b73a:	e7ec      	b.n	800b716 <_dtoa_r+0xa7e>
 800b73c:	0800e1bd 	.word	0x0800e1bd
 800b740:	0800e141 	.word	0x0800e141

0800b744 <_free_r>:
 800b744:	b538      	push	{r3, r4, r5, lr}
 800b746:	4605      	mov	r5, r0
 800b748:	2900      	cmp	r1, #0
 800b74a:	d041      	beq.n	800b7d0 <_free_r+0x8c>
 800b74c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b750:	1f0c      	subs	r4, r1, #4
 800b752:	2b00      	cmp	r3, #0
 800b754:	bfb8      	it	lt
 800b756:	18e4      	addlt	r4, r4, r3
 800b758:	f000 f8e8 	bl	800b92c <__malloc_lock>
 800b75c:	4a1d      	ldr	r2, [pc, #116]	@ (800b7d4 <_free_r+0x90>)
 800b75e:	6813      	ldr	r3, [r2, #0]
 800b760:	b933      	cbnz	r3, 800b770 <_free_r+0x2c>
 800b762:	6063      	str	r3, [r4, #4]
 800b764:	6014      	str	r4, [r2, #0]
 800b766:	4628      	mov	r0, r5
 800b768:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b76c:	f000 b8e4 	b.w	800b938 <__malloc_unlock>
 800b770:	42a3      	cmp	r3, r4
 800b772:	d908      	bls.n	800b786 <_free_r+0x42>
 800b774:	6820      	ldr	r0, [r4, #0]
 800b776:	1821      	adds	r1, r4, r0
 800b778:	428b      	cmp	r3, r1
 800b77a:	bf01      	itttt	eq
 800b77c:	6819      	ldreq	r1, [r3, #0]
 800b77e:	685b      	ldreq	r3, [r3, #4]
 800b780:	1809      	addeq	r1, r1, r0
 800b782:	6021      	streq	r1, [r4, #0]
 800b784:	e7ed      	b.n	800b762 <_free_r+0x1e>
 800b786:	461a      	mov	r2, r3
 800b788:	685b      	ldr	r3, [r3, #4]
 800b78a:	b10b      	cbz	r3, 800b790 <_free_r+0x4c>
 800b78c:	42a3      	cmp	r3, r4
 800b78e:	d9fa      	bls.n	800b786 <_free_r+0x42>
 800b790:	6811      	ldr	r1, [r2, #0]
 800b792:	1850      	adds	r0, r2, r1
 800b794:	42a0      	cmp	r0, r4
 800b796:	d10b      	bne.n	800b7b0 <_free_r+0x6c>
 800b798:	6820      	ldr	r0, [r4, #0]
 800b79a:	4401      	add	r1, r0
 800b79c:	1850      	adds	r0, r2, r1
 800b79e:	4283      	cmp	r3, r0
 800b7a0:	6011      	str	r1, [r2, #0]
 800b7a2:	d1e0      	bne.n	800b766 <_free_r+0x22>
 800b7a4:	6818      	ldr	r0, [r3, #0]
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	6053      	str	r3, [r2, #4]
 800b7aa:	4408      	add	r0, r1
 800b7ac:	6010      	str	r0, [r2, #0]
 800b7ae:	e7da      	b.n	800b766 <_free_r+0x22>
 800b7b0:	d902      	bls.n	800b7b8 <_free_r+0x74>
 800b7b2:	230c      	movs	r3, #12
 800b7b4:	602b      	str	r3, [r5, #0]
 800b7b6:	e7d6      	b.n	800b766 <_free_r+0x22>
 800b7b8:	6820      	ldr	r0, [r4, #0]
 800b7ba:	1821      	adds	r1, r4, r0
 800b7bc:	428b      	cmp	r3, r1
 800b7be:	bf04      	itt	eq
 800b7c0:	6819      	ldreq	r1, [r3, #0]
 800b7c2:	685b      	ldreq	r3, [r3, #4]
 800b7c4:	6063      	str	r3, [r4, #4]
 800b7c6:	bf04      	itt	eq
 800b7c8:	1809      	addeq	r1, r1, r0
 800b7ca:	6021      	streq	r1, [r4, #0]
 800b7cc:	6054      	str	r4, [r2, #4]
 800b7ce:	e7ca      	b.n	800b766 <_free_r+0x22>
 800b7d0:	bd38      	pop	{r3, r4, r5, pc}
 800b7d2:	bf00      	nop
 800b7d4:	240004a0 	.word	0x240004a0

0800b7d8 <malloc>:
 800b7d8:	4b02      	ldr	r3, [pc, #8]	@ (800b7e4 <malloc+0xc>)
 800b7da:	4601      	mov	r1, r0
 800b7dc:	6818      	ldr	r0, [r3, #0]
 800b7de:	f000 b825 	b.w	800b82c <_malloc_r>
 800b7e2:	bf00      	nop
 800b7e4:	2400001c 	.word	0x2400001c

0800b7e8 <sbrk_aligned>:
 800b7e8:	b570      	push	{r4, r5, r6, lr}
 800b7ea:	4e0f      	ldr	r6, [pc, #60]	@ (800b828 <sbrk_aligned+0x40>)
 800b7ec:	460c      	mov	r4, r1
 800b7ee:	6831      	ldr	r1, [r6, #0]
 800b7f0:	4605      	mov	r5, r0
 800b7f2:	b911      	cbnz	r1, 800b7fa <sbrk_aligned+0x12>
 800b7f4:	f001 fdb8 	bl	800d368 <_sbrk_r>
 800b7f8:	6030      	str	r0, [r6, #0]
 800b7fa:	4621      	mov	r1, r4
 800b7fc:	4628      	mov	r0, r5
 800b7fe:	f001 fdb3 	bl	800d368 <_sbrk_r>
 800b802:	1c43      	adds	r3, r0, #1
 800b804:	d103      	bne.n	800b80e <sbrk_aligned+0x26>
 800b806:	f04f 34ff 	mov.w	r4, #4294967295
 800b80a:	4620      	mov	r0, r4
 800b80c:	bd70      	pop	{r4, r5, r6, pc}
 800b80e:	1cc4      	adds	r4, r0, #3
 800b810:	f024 0403 	bic.w	r4, r4, #3
 800b814:	42a0      	cmp	r0, r4
 800b816:	d0f8      	beq.n	800b80a <sbrk_aligned+0x22>
 800b818:	1a21      	subs	r1, r4, r0
 800b81a:	4628      	mov	r0, r5
 800b81c:	f001 fda4 	bl	800d368 <_sbrk_r>
 800b820:	3001      	adds	r0, #1
 800b822:	d1f2      	bne.n	800b80a <sbrk_aligned+0x22>
 800b824:	e7ef      	b.n	800b806 <sbrk_aligned+0x1e>
 800b826:	bf00      	nop
 800b828:	2400049c 	.word	0x2400049c

0800b82c <_malloc_r>:
 800b82c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b830:	1ccd      	adds	r5, r1, #3
 800b832:	f025 0503 	bic.w	r5, r5, #3
 800b836:	3508      	adds	r5, #8
 800b838:	2d0c      	cmp	r5, #12
 800b83a:	bf38      	it	cc
 800b83c:	250c      	movcc	r5, #12
 800b83e:	2d00      	cmp	r5, #0
 800b840:	4606      	mov	r6, r0
 800b842:	db01      	blt.n	800b848 <_malloc_r+0x1c>
 800b844:	42a9      	cmp	r1, r5
 800b846:	d904      	bls.n	800b852 <_malloc_r+0x26>
 800b848:	230c      	movs	r3, #12
 800b84a:	6033      	str	r3, [r6, #0]
 800b84c:	2000      	movs	r0, #0
 800b84e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b852:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b928 <_malloc_r+0xfc>
 800b856:	f000 f869 	bl	800b92c <__malloc_lock>
 800b85a:	f8d8 3000 	ldr.w	r3, [r8]
 800b85e:	461c      	mov	r4, r3
 800b860:	bb44      	cbnz	r4, 800b8b4 <_malloc_r+0x88>
 800b862:	4629      	mov	r1, r5
 800b864:	4630      	mov	r0, r6
 800b866:	f7ff ffbf 	bl	800b7e8 <sbrk_aligned>
 800b86a:	1c43      	adds	r3, r0, #1
 800b86c:	4604      	mov	r4, r0
 800b86e:	d158      	bne.n	800b922 <_malloc_r+0xf6>
 800b870:	f8d8 4000 	ldr.w	r4, [r8]
 800b874:	4627      	mov	r7, r4
 800b876:	2f00      	cmp	r7, #0
 800b878:	d143      	bne.n	800b902 <_malloc_r+0xd6>
 800b87a:	2c00      	cmp	r4, #0
 800b87c:	d04b      	beq.n	800b916 <_malloc_r+0xea>
 800b87e:	6823      	ldr	r3, [r4, #0]
 800b880:	4639      	mov	r1, r7
 800b882:	4630      	mov	r0, r6
 800b884:	eb04 0903 	add.w	r9, r4, r3
 800b888:	f001 fd6e 	bl	800d368 <_sbrk_r>
 800b88c:	4581      	cmp	r9, r0
 800b88e:	d142      	bne.n	800b916 <_malloc_r+0xea>
 800b890:	6821      	ldr	r1, [r4, #0]
 800b892:	1a6d      	subs	r5, r5, r1
 800b894:	4629      	mov	r1, r5
 800b896:	4630      	mov	r0, r6
 800b898:	f7ff ffa6 	bl	800b7e8 <sbrk_aligned>
 800b89c:	3001      	adds	r0, #1
 800b89e:	d03a      	beq.n	800b916 <_malloc_r+0xea>
 800b8a0:	6823      	ldr	r3, [r4, #0]
 800b8a2:	442b      	add	r3, r5
 800b8a4:	6023      	str	r3, [r4, #0]
 800b8a6:	f8d8 3000 	ldr.w	r3, [r8]
 800b8aa:	685a      	ldr	r2, [r3, #4]
 800b8ac:	bb62      	cbnz	r2, 800b908 <_malloc_r+0xdc>
 800b8ae:	f8c8 7000 	str.w	r7, [r8]
 800b8b2:	e00f      	b.n	800b8d4 <_malloc_r+0xa8>
 800b8b4:	6822      	ldr	r2, [r4, #0]
 800b8b6:	1b52      	subs	r2, r2, r5
 800b8b8:	d420      	bmi.n	800b8fc <_malloc_r+0xd0>
 800b8ba:	2a0b      	cmp	r2, #11
 800b8bc:	d917      	bls.n	800b8ee <_malloc_r+0xc2>
 800b8be:	1961      	adds	r1, r4, r5
 800b8c0:	42a3      	cmp	r3, r4
 800b8c2:	6025      	str	r5, [r4, #0]
 800b8c4:	bf18      	it	ne
 800b8c6:	6059      	strne	r1, [r3, #4]
 800b8c8:	6863      	ldr	r3, [r4, #4]
 800b8ca:	bf08      	it	eq
 800b8cc:	f8c8 1000 	streq.w	r1, [r8]
 800b8d0:	5162      	str	r2, [r4, r5]
 800b8d2:	604b      	str	r3, [r1, #4]
 800b8d4:	4630      	mov	r0, r6
 800b8d6:	f000 f82f 	bl	800b938 <__malloc_unlock>
 800b8da:	f104 000b 	add.w	r0, r4, #11
 800b8de:	1d23      	adds	r3, r4, #4
 800b8e0:	f020 0007 	bic.w	r0, r0, #7
 800b8e4:	1ac2      	subs	r2, r0, r3
 800b8e6:	bf1c      	itt	ne
 800b8e8:	1a1b      	subne	r3, r3, r0
 800b8ea:	50a3      	strne	r3, [r4, r2]
 800b8ec:	e7af      	b.n	800b84e <_malloc_r+0x22>
 800b8ee:	6862      	ldr	r2, [r4, #4]
 800b8f0:	42a3      	cmp	r3, r4
 800b8f2:	bf0c      	ite	eq
 800b8f4:	f8c8 2000 	streq.w	r2, [r8]
 800b8f8:	605a      	strne	r2, [r3, #4]
 800b8fa:	e7eb      	b.n	800b8d4 <_malloc_r+0xa8>
 800b8fc:	4623      	mov	r3, r4
 800b8fe:	6864      	ldr	r4, [r4, #4]
 800b900:	e7ae      	b.n	800b860 <_malloc_r+0x34>
 800b902:	463c      	mov	r4, r7
 800b904:	687f      	ldr	r7, [r7, #4]
 800b906:	e7b6      	b.n	800b876 <_malloc_r+0x4a>
 800b908:	461a      	mov	r2, r3
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	42a3      	cmp	r3, r4
 800b90e:	d1fb      	bne.n	800b908 <_malloc_r+0xdc>
 800b910:	2300      	movs	r3, #0
 800b912:	6053      	str	r3, [r2, #4]
 800b914:	e7de      	b.n	800b8d4 <_malloc_r+0xa8>
 800b916:	230c      	movs	r3, #12
 800b918:	6033      	str	r3, [r6, #0]
 800b91a:	4630      	mov	r0, r6
 800b91c:	f000 f80c 	bl	800b938 <__malloc_unlock>
 800b920:	e794      	b.n	800b84c <_malloc_r+0x20>
 800b922:	6005      	str	r5, [r0, #0]
 800b924:	e7d6      	b.n	800b8d4 <_malloc_r+0xa8>
 800b926:	bf00      	nop
 800b928:	240004a0 	.word	0x240004a0

0800b92c <__malloc_lock>:
 800b92c:	4801      	ldr	r0, [pc, #4]	@ (800b934 <__malloc_lock+0x8>)
 800b92e:	f7ff b922 	b.w	800ab76 <__retarget_lock_acquire_recursive>
 800b932:	bf00      	nop
 800b934:	24000498 	.word	0x24000498

0800b938 <__malloc_unlock>:
 800b938:	4801      	ldr	r0, [pc, #4]	@ (800b940 <__malloc_unlock+0x8>)
 800b93a:	f7ff b91d 	b.w	800ab78 <__retarget_lock_release_recursive>
 800b93e:	bf00      	nop
 800b940:	24000498 	.word	0x24000498

0800b944 <_Balloc>:
 800b944:	b570      	push	{r4, r5, r6, lr}
 800b946:	69c6      	ldr	r6, [r0, #28]
 800b948:	4604      	mov	r4, r0
 800b94a:	460d      	mov	r5, r1
 800b94c:	b976      	cbnz	r6, 800b96c <_Balloc+0x28>
 800b94e:	2010      	movs	r0, #16
 800b950:	f7ff ff42 	bl	800b7d8 <malloc>
 800b954:	4602      	mov	r2, r0
 800b956:	61e0      	str	r0, [r4, #28]
 800b958:	b920      	cbnz	r0, 800b964 <_Balloc+0x20>
 800b95a:	4b18      	ldr	r3, [pc, #96]	@ (800b9bc <_Balloc+0x78>)
 800b95c:	4818      	ldr	r0, [pc, #96]	@ (800b9c0 <_Balloc+0x7c>)
 800b95e:	216b      	movs	r1, #107	@ 0x6b
 800b960:	f001 fd2a 	bl	800d3b8 <__assert_func>
 800b964:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b968:	6006      	str	r6, [r0, #0]
 800b96a:	60c6      	str	r6, [r0, #12]
 800b96c:	69e6      	ldr	r6, [r4, #28]
 800b96e:	68f3      	ldr	r3, [r6, #12]
 800b970:	b183      	cbz	r3, 800b994 <_Balloc+0x50>
 800b972:	69e3      	ldr	r3, [r4, #28]
 800b974:	68db      	ldr	r3, [r3, #12]
 800b976:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b97a:	b9b8      	cbnz	r0, 800b9ac <_Balloc+0x68>
 800b97c:	2101      	movs	r1, #1
 800b97e:	fa01 f605 	lsl.w	r6, r1, r5
 800b982:	1d72      	adds	r2, r6, #5
 800b984:	0092      	lsls	r2, r2, #2
 800b986:	4620      	mov	r0, r4
 800b988:	f001 fd34 	bl	800d3f4 <_calloc_r>
 800b98c:	b160      	cbz	r0, 800b9a8 <_Balloc+0x64>
 800b98e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b992:	e00e      	b.n	800b9b2 <_Balloc+0x6e>
 800b994:	2221      	movs	r2, #33	@ 0x21
 800b996:	2104      	movs	r1, #4
 800b998:	4620      	mov	r0, r4
 800b99a:	f001 fd2b 	bl	800d3f4 <_calloc_r>
 800b99e:	69e3      	ldr	r3, [r4, #28]
 800b9a0:	60f0      	str	r0, [r6, #12]
 800b9a2:	68db      	ldr	r3, [r3, #12]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d1e4      	bne.n	800b972 <_Balloc+0x2e>
 800b9a8:	2000      	movs	r0, #0
 800b9aa:	bd70      	pop	{r4, r5, r6, pc}
 800b9ac:	6802      	ldr	r2, [r0, #0]
 800b9ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b9b8:	e7f7      	b.n	800b9aa <_Balloc+0x66>
 800b9ba:	bf00      	nop
 800b9bc:	0800e14e 	.word	0x0800e14e
 800b9c0:	0800e1ce 	.word	0x0800e1ce

0800b9c4 <_Bfree>:
 800b9c4:	b570      	push	{r4, r5, r6, lr}
 800b9c6:	69c6      	ldr	r6, [r0, #28]
 800b9c8:	4605      	mov	r5, r0
 800b9ca:	460c      	mov	r4, r1
 800b9cc:	b976      	cbnz	r6, 800b9ec <_Bfree+0x28>
 800b9ce:	2010      	movs	r0, #16
 800b9d0:	f7ff ff02 	bl	800b7d8 <malloc>
 800b9d4:	4602      	mov	r2, r0
 800b9d6:	61e8      	str	r0, [r5, #28]
 800b9d8:	b920      	cbnz	r0, 800b9e4 <_Bfree+0x20>
 800b9da:	4b09      	ldr	r3, [pc, #36]	@ (800ba00 <_Bfree+0x3c>)
 800b9dc:	4809      	ldr	r0, [pc, #36]	@ (800ba04 <_Bfree+0x40>)
 800b9de:	218f      	movs	r1, #143	@ 0x8f
 800b9e0:	f001 fcea 	bl	800d3b8 <__assert_func>
 800b9e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b9e8:	6006      	str	r6, [r0, #0]
 800b9ea:	60c6      	str	r6, [r0, #12]
 800b9ec:	b13c      	cbz	r4, 800b9fe <_Bfree+0x3a>
 800b9ee:	69eb      	ldr	r3, [r5, #28]
 800b9f0:	6862      	ldr	r2, [r4, #4]
 800b9f2:	68db      	ldr	r3, [r3, #12]
 800b9f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b9f8:	6021      	str	r1, [r4, #0]
 800b9fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b9fe:	bd70      	pop	{r4, r5, r6, pc}
 800ba00:	0800e14e 	.word	0x0800e14e
 800ba04:	0800e1ce 	.word	0x0800e1ce

0800ba08 <__multadd>:
 800ba08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba0c:	690d      	ldr	r5, [r1, #16]
 800ba0e:	4607      	mov	r7, r0
 800ba10:	460c      	mov	r4, r1
 800ba12:	461e      	mov	r6, r3
 800ba14:	f101 0c14 	add.w	ip, r1, #20
 800ba18:	2000      	movs	r0, #0
 800ba1a:	f8dc 3000 	ldr.w	r3, [ip]
 800ba1e:	b299      	uxth	r1, r3
 800ba20:	fb02 6101 	mla	r1, r2, r1, r6
 800ba24:	0c1e      	lsrs	r6, r3, #16
 800ba26:	0c0b      	lsrs	r3, r1, #16
 800ba28:	fb02 3306 	mla	r3, r2, r6, r3
 800ba2c:	b289      	uxth	r1, r1
 800ba2e:	3001      	adds	r0, #1
 800ba30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ba34:	4285      	cmp	r5, r0
 800ba36:	f84c 1b04 	str.w	r1, [ip], #4
 800ba3a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ba3e:	dcec      	bgt.n	800ba1a <__multadd+0x12>
 800ba40:	b30e      	cbz	r6, 800ba86 <__multadd+0x7e>
 800ba42:	68a3      	ldr	r3, [r4, #8]
 800ba44:	42ab      	cmp	r3, r5
 800ba46:	dc19      	bgt.n	800ba7c <__multadd+0x74>
 800ba48:	6861      	ldr	r1, [r4, #4]
 800ba4a:	4638      	mov	r0, r7
 800ba4c:	3101      	adds	r1, #1
 800ba4e:	f7ff ff79 	bl	800b944 <_Balloc>
 800ba52:	4680      	mov	r8, r0
 800ba54:	b928      	cbnz	r0, 800ba62 <__multadd+0x5a>
 800ba56:	4602      	mov	r2, r0
 800ba58:	4b0c      	ldr	r3, [pc, #48]	@ (800ba8c <__multadd+0x84>)
 800ba5a:	480d      	ldr	r0, [pc, #52]	@ (800ba90 <__multadd+0x88>)
 800ba5c:	21ba      	movs	r1, #186	@ 0xba
 800ba5e:	f001 fcab 	bl	800d3b8 <__assert_func>
 800ba62:	6922      	ldr	r2, [r4, #16]
 800ba64:	3202      	adds	r2, #2
 800ba66:	f104 010c 	add.w	r1, r4, #12
 800ba6a:	0092      	lsls	r2, r2, #2
 800ba6c:	300c      	adds	r0, #12
 800ba6e:	f001 fc8b 	bl	800d388 <memcpy>
 800ba72:	4621      	mov	r1, r4
 800ba74:	4638      	mov	r0, r7
 800ba76:	f7ff ffa5 	bl	800b9c4 <_Bfree>
 800ba7a:	4644      	mov	r4, r8
 800ba7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ba80:	3501      	adds	r5, #1
 800ba82:	615e      	str	r6, [r3, #20]
 800ba84:	6125      	str	r5, [r4, #16]
 800ba86:	4620      	mov	r0, r4
 800ba88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba8c:	0800e1bd 	.word	0x0800e1bd
 800ba90:	0800e1ce 	.word	0x0800e1ce

0800ba94 <__s2b>:
 800ba94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba98:	460c      	mov	r4, r1
 800ba9a:	4615      	mov	r5, r2
 800ba9c:	461f      	mov	r7, r3
 800ba9e:	2209      	movs	r2, #9
 800baa0:	3308      	adds	r3, #8
 800baa2:	4606      	mov	r6, r0
 800baa4:	fb93 f3f2 	sdiv	r3, r3, r2
 800baa8:	2100      	movs	r1, #0
 800baaa:	2201      	movs	r2, #1
 800baac:	429a      	cmp	r2, r3
 800baae:	db09      	blt.n	800bac4 <__s2b+0x30>
 800bab0:	4630      	mov	r0, r6
 800bab2:	f7ff ff47 	bl	800b944 <_Balloc>
 800bab6:	b940      	cbnz	r0, 800baca <__s2b+0x36>
 800bab8:	4602      	mov	r2, r0
 800baba:	4b19      	ldr	r3, [pc, #100]	@ (800bb20 <__s2b+0x8c>)
 800babc:	4819      	ldr	r0, [pc, #100]	@ (800bb24 <__s2b+0x90>)
 800babe:	21d3      	movs	r1, #211	@ 0xd3
 800bac0:	f001 fc7a 	bl	800d3b8 <__assert_func>
 800bac4:	0052      	lsls	r2, r2, #1
 800bac6:	3101      	adds	r1, #1
 800bac8:	e7f0      	b.n	800baac <__s2b+0x18>
 800baca:	9b08      	ldr	r3, [sp, #32]
 800bacc:	6143      	str	r3, [r0, #20]
 800bace:	2d09      	cmp	r5, #9
 800bad0:	f04f 0301 	mov.w	r3, #1
 800bad4:	6103      	str	r3, [r0, #16]
 800bad6:	dd16      	ble.n	800bb06 <__s2b+0x72>
 800bad8:	f104 0909 	add.w	r9, r4, #9
 800badc:	46c8      	mov	r8, r9
 800bade:	442c      	add	r4, r5
 800bae0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bae4:	4601      	mov	r1, r0
 800bae6:	3b30      	subs	r3, #48	@ 0x30
 800bae8:	220a      	movs	r2, #10
 800baea:	4630      	mov	r0, r6
 800baec:	f7ff ff8c 	bl	800ba08 <__multadd>
 800baf0:	45a0      	cmp	r8, r4
 800baf2:	d1f5      	bne.n	800bae0 <__s2b+0x4c>
 800baf4:	f1a5 0408 	sub.w	r4, r5, #8
 800baf8:	444c      	add	r4, r9
 800bafa:	1b2d      	subs	r5, r5, r4
 800bafc:	1963      	adds	r3, r4, r5
 800bafe:	42bb      	cmp	r3, r7
 800bb00:	db04      	blt.n	800bb0c <__s2b+0x78>
 800bb02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb06:	340a      	adds	r4, #10
 800bb08:	2509      	movs	r5, #9
 800bb0a:	e7f6      	b.n	800bafa <__s2b+0x66>
 800bb0c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bb10:	4601      	mov	r1, r0
 800bb12:	3b30      	subs	r3, #48	@ 0x30
 800bb14:	220a      	movs	r2, #10
 800bb16:	4630      	mov	r0, r6
 800bb18:	f7ff ff76 	bl	800ba08 <__multadd>
 800bb1c:	e7ee      	b.n	800bafc <__s2b+0x68>
 800bb1e:	bf00      	nop
 800bb20:	0800e1bd 	.word	0x0800e1bd
 800bb24:	0800e1ce 	.word	0x0800e1ce

0800bb28 <__hi0bits>:
 800bb28:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	bf36      	itet	cc
 800bb30:	0403      	lslcc	r3, r0, #16
 800bb32:	2000      	movcs	r0, #0
 800bb34:	2010      	movcc	r0, #16
 800bb36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bb3a:	bf3c      	itt	cc
 800bb3c:	021b      	lslcc	r3, r3, #8
 800bb3e:	3008      	addcc	r0, #8
 800bb40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb44:	bf3c      	itt	cc
 800bb46:	011b      	lslcc	r3, r3, #4
 800bb48:	3004      	addcc	r0, #4
 800bb4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb4e:	bf3c      	itt	cc
 800bb50:	009b      	lslcc	r3, r3, #2
 800bb52:	3002      	addcc	r0, #2
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	db05      	blt.n	800bb64 <__hi0bits+0x3c>
 800bb58:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bb5c:	f100 0001 	add.w	r0, r0, #1
 800bb60:	bf08      	it	eq
 800bb62:	2020      	moveq	r0, #32
 800bb64:	4770      	bx	lr

0800bb66 <__lo0bits>:
 800bb66:	6803      	ldr	r3, [r0, #0]
 800bb68:	4602      	mov	r2, r0
 800bb6a:	f013 0007 	ands.w	r0, r3, #7
 800bb6e:	d00b      	beq.n	800bb88 <__lo0bits+0x22>
 800bb70:	07d9      	lsls	r1, r3, #31
 800bb72:	d421      	bmi.n	800bbb8 <__lo0bits+0x52>
 800bb74:	0798      	lsls	r0, r3, #30
 800bb76:	bf49      	itett	mi
 800bb78:	085b      	lsrmi	r3, r3, #1
 800bb7a:	089b      	lsrpl	r3, r3, #2
 800bb7c:	2001      	movmi	r0, #1
 800bb7e:	6013      	strmi	r3, [r2, #0]
 800bb80:	bf5c      	itt	pl
 800bb82:	6013      	strpl	r3, [r2, #0]
 800bb84:	2002      	movpl	r0, #2
 800bb86:	4770      	bx	lr
 800bb88:	b299      	uxth	r1, r3
 800bb8a:	b909      	cbnz	r1, 800bb90 <__lo0bits+0x2a>
 800bb8c:	0c1b      	lsrs	r3, r3, #16
 800bb8e:	2010      	movs	r0, #16
 800bb90:	b2d9      	uxtb	r1, r3
 800bb92:	b909      	cbnz	r1, 800bb98 <__lo0bits+0x32>
 800bb94:	3008      	adds	r0, #8
 800bb96:	0a1b      	lsrs	r3, r3, #8
 800bb98:	0719      	lsls	r1, r3, #28
 800bb9a:	bf04      	itt	eq
 800bb9c:	091b      	lsreq	r3, r3, #4
 800bb9e:	3004      	addeq	r0, #4
 800bba0:	0799      	lsls	r1, r3, #30
 800bba2:	bf04      	itt	eq
 800bba4:	089b      	lsreq	r3, r3, #2
 800bba6:	3002      	addeq	r0, #2
 800bba8:	07d9      	lsls	r1, r3, #31
 800bbaa:	d403      	bmi.n	800bbb4 <__lo0bits+0x4e>
 800bbac:	085b      	lsrs	r3, r3, #1
 800bbae:	f100 0001 	add.w	r0, r0, #1
 800bbb2:	d003      	beq.n	800bbbc <__lo0bits+0x56>
 800bbb4:	6013      	str	r3, [r2, #0]
 800bbb6:	4770      	bx	lr
 800bbb8:	2000      	movs	r0, #0
 800bbba:	4770      	bx	lr
 800bbbc:	2020      	movs	r0, #32
 800bbbe:	4770      	bx	lr

0800bbc0 <__i2b>:
 800bbc0:	b510      	push	{r4, lr}
 800bbc2:	460c      	mov	r4, r1
 800bbc4:	2101      	movs	r1, #1
 800bbc6:	f7ff febd 	bl	800b944 <_Balloc>
 800bbca:	4602      	mov	r2, r0
 800bbcc:	b928      	cbnz	r0, 800bbda <__i2b+0x1a>
 800bbce:	4b05      	ldr	r3, [pc, #20]	@ (800bbe4 <__i2b+0x24>)
 800bbd0:	4805      	ldr	r0, [pc, #20]	@ (800bbe8 <__i2b+0x28>)
 800bbd2:	f240 1145 	movw	r1, #325	@ 0x145
 800bbd6:	f001 fbef 	bl	800d3b8 <__assert_func>
 800bbda:	2301      	movs	r3, #1
 800bbdc:	6144      	str	r4, [r0, #20]
 800bbde:	6103      	str	r3, [r0, #16]
 800bbe0:	bd10      	pop	{r4, pc}
 800bbe2:	bf00      	nop
 800bbe4:	0800e1bd 	.word	0x0800e1bd
 800bbe8:	0800e1ce 	.word	0x0800e1ce

0800bbec <__multiply>:
 800bbec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf0:	4614      	mov	r4, r2
 800bbf2:	690a      	ldr	r2, [r1, #16]
 800bbf4:	6923      	ldr	r3, [r4, #16]
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	bfa8      	it	ge
 800bbfa:	4623      	movge	r3, r4
 800bbfc:	460f      	mov	r7, r1
 800bbfe:	bfa4      	itt	ge
 800bc00:	460c      	movge	r4, r1
 800bc02:	461f      	movge	r7, r3
 800bc04:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bc08:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bc0c:	68a3      	ldr	r3, [r4, #8]
 800bc0e:	6861      	ldr	r1, [r4, #4]
 800bc10:	eb0a 0609 	add.w	r6, sl, r9
 800bc14:	42b3      	cmp	r3, r6
 800bc16:	b085      	sub	sp, #20
 800bc18:	bfb8      	it	lt
 800bc1a:	3101      	addlt	r1, #1
 800bc1c:	f7ff fe92 	bl	800b944 <_Balloc>
 800bc20:	b930      	cbnz	r0, 800bc30 <__multiply+0x44>
 800bc22:	4602      	mov	r2, r0
 800bc24:	4b44      	ldr	r3, [pc, #272]	@ (800bd38 <__multiply+0x14c>)
 800bc26:	4845      	ldr	r0, [pc, #276]	@ (800bd3c <__multiply+0x150>)
 800bc28:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bc2c:	f001 fbc4 	bl	800d3b8 <__assert_func>
 800bc30:	f100 0514 	add.w	r5, r0, #20
 800bc34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bc38:	462b      	mov	r3, r5
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	4543      	cmp	r3, r8
 800bc3e:	d321      	bcc.n	800bc84 <__multiply+0x98>
 800bc40:	f107 0114 	add.w	r1, r7, #20
 800bc44:	f104 0214 	add.w	r2, r4, #20
 800bc48:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bc4c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bc50:	9302      	str	r3, [sp, #8]
 800bc52:	1b13      	subs	r3, r2, r4
 800bc54:	3b15      	subs	r3, #21
 800bc56:	f023 0303 	bic.w	r3, r3, #3
 800bc5a:	3304      	adds	r3, #4
 800bc5c:	f104 0715 	add.w	r7, r4, #21
 800bc60:	42ba      	cmp	r2, r7
 800bc62:	bf38      	it	cc
 800bc64:	2304      	movcc	r3, #4
 800bc66:	9301      	str	r3, [sp, #4]
 800bc68:	9b02      	ldr	r3, [sp, #8]
 800bc6a:	9103      	str	r1, [sp, #12]
 800bc6c:	428b      	cmp	r3, r1
 800bc6e:	d80c      	bhi.n	800bc8a <__multiply+0x9e>
 800bc70:	2e00      	cmp	r6, #0
 800bc72:	dd03      	ble.n	800bc7c <__multiply+0x90>
 800bc74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d05b      	beq.n	800bd34 <__multiply+0x148>
 800bc7c:	6106      	str	r6, [r0, #16]
 800bc7e:	b005      	add	sp, #20
 800bc80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc84:	f843 2b04 	str.w	r2, [r3], #4
 800bc88:	e7d8      	b.n	800bc3c <__multiply+0x50>
 800bc8a:	f8b1 a000 	ldrh.w	sl, [r1]
 800bc8e:	f1ba 0f00 	cmp.w	sl, #0
 800bc92:	d024      	beq.n	800bcde <__multiply+0xf2>
 800bc94:	f104 0e14 	add.w	lr, r4, #20
 800bc98:	46a9      	mov	r9, r5
 800bc9a:	f04f 0c00 	mov.w	ip, #0
 800bc9e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bca2:	f8d9 3000 	ldr.w	r3, [r9]
 800bca6:	fa1f fb87 	uxth.w	fp, r7
 800bcaa:	b29b      	uxth	r3, r3
 800bcac:	fb0a 330b 	mla	r3, sl, fp, r3
 800bcb0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bcb4:	f8d9 7000 	ldr.w	r7, [r9]
 800bcb8:	4463      	add	r3, ip
 800bcba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bcbe:	fb0a c70b 	mla	r7, sl, fp, ip
 800bcc2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bcc6:	b29b      	uxth	r3, r3
 800bcc8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bccc:	4572      	cmp	r2, lr
 800bcce:	f849 3b04 	str.w	r3, [r9], #4
 800bcd2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bcd6:	d8e2      	bhi.n	800bc9e <__multiply+0xb2>
 800bcd8:	9b01      	ldr	r3, [sp, #4]
 800bcda:	f845 c003 	str.w	ip, [r5, r3]
 800bcde:	9b03      	ldr	r3, [sp, #12]
 800bce0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bce4:	3104      	adds	r1, #4
 800bce6:	f1b9 0f00 	cmp.w	r9, #0
 800bcea:	d021      	beq.n	800bd30 <__multiply+0x144>
 800bcec:	682b      	ldr	r3, [r5, #0]
 800bcee:	f104 0c14 	add.w	ip, r4, #20
 800bcf2:	46ae      	mov	lr, r5
 800bcf4:	f04f 0a00 	mov.w	sl, #0
 800bcf8:	f8bc b000 	ldrh.w	fp, [ip]
 800bcfc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bd00:	fb09 770b 	mla	r7, r9, fp, r7
 800bd04:	4457      	add	r7, sl
 800bd06:	b29b      	uxth	r3, r3
 800bd08:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bd0c:	f84e 3b04 	str.w	r3, [lr], #4
 800bd10:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bd14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bd18:	f8be 3000 	ldrh.w	r3, [lr]
 800bd1c:	fb09 330a 	mla	r3, r9, sl, r3
 800bd20:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bd24:	4562      	cmp	r2, ip
 800bd26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bd2a:	d8e5      	bhi.n	800bcf8 <__multiply+0x10c>
 800bd2c:	9f01      	ldr	r7, [sp, #4]
 800bd2e:	51eb      	str	r3, [r5, r7]
 800bd30:	3504      	adds	r5, #4
 800bd32:	e799      	b.n	800bc68 <__multiply+0x7c>
 800bd34:	3e01      	subs	r6, #1
 800bd36:	e79b      	b.n	800bc70 <__multiply+0x84>
 800bd38:	0800e1bd 	.word	0x0800e1bd
 800bd3c:	0800e1ce 	.word	0x0800e1ce

0800bd40 <__pow5mult>:
 800bd40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd44:	4615      	mov	r5, r2
 800bd46:	f012 0203 	ands.w	r2, r2, #3
 800bd4a:	4607      	mov	r7, r0
 800bd4c:	460e      	mov	r6, r1
 800bd4e:	d007      	beq.n	800bd60 <__pow5mult+0x20>
 800bd50:	4c25      	ldr	r4, [pc, #148]	@ (800bde8 <__pow5mult+0xa8>)
 800bd52:	3a01      	subs	r2, #1
 800bd54:	2300      	movs	r3, #0
 800bd56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bd5a:	f7ff fe55 	bl	800ba08 <__multadd>
 800bd5e:	4606      	mov	r6, r0
 800bd60:	10ad      	asrs	r5, r5, #2
 800bd62:	d03d      	beq.n	800bde0 <__pow5mult+0xa0>
 800bd64:	69fc      	ldr	r4, [r7, #28]
 800bd66:	b97c      	cbnz	r4, 800bd88 <__pow5mult+0x48>
 800bd68:	2010      	movs	r0, #16
 800bd6a:	f7ff fd35 	bl	800b7d8 <malloc>
 800bd6e:	4602      	mov	r2, r0
 800bd70:	61f8      	str	r0, [r7, #28]
 800bd72:	b928      	cbnz	r0, 800bd80 <__pow5mult+0x40>
 800bd74:	4b1d      	ldr	r3, [pc, #116]	@ (800bdec <__pow5mult+0xac>)
 800bd76:	481e      	ldr	r0, [pc, #120]	@ (800bdf0 <__pow5mult+0xb0>)
 800bd78:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bd7c:	f001 fb1c 	bl	800d3b8 <__assert_func>
 800bd80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bd84:	6004      	str	r4, [r0, #0]
 800bd86:	60c4      	str	r4, [r0, #12]
 800bd88:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bd8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bd90:	b94c      	cbnz	r4, 800bda6 <__pow5mult+0x66>
 800bd92:	f240 2171 	movw	r1, #625	@ 0x271
 800bd96:	4638      	mov	r0, r7
 800bd98:	f7ff ff12 	bl	800bbc0 <__i2b>
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	f8c8 0008 	str.w	r0, [r8, #8]
 800bda2:	4604      	mov	r4, r0
 800bda4:	6003      	str	r3, [r0, #0]
 800bda6:	f04f 0900 	mov.w	r9, #0
 800bdaa:	07eb      	lsls	r3, r5, #31
 800bdac:	d50a      	bpl.n	800bdc4 <__pow5mult+0x84>
 800bdae:	4631      	mov	r1, r6
 800bdb0:	4622      	mov	r2, r4
 800bdb2:	4638      	mov	r0, r7
 800bdb4:	f7ff ff1a 	bl	800bbec <__multiply>
 800bdb8:	4631      	mov	r1, r6
 800bdba:	4680      	mov	r8, r0
 800bdbc:	4638      	mov	r0, r7
 800bdbe:	f7ff fe01 	bl	800b9c4 <_Bfree>
 800bdc2:	4646      	mov	r6, r8
 800bdc4:	106d      	asrs	r5, r5, #1
 800bdc6:	d00b      	beq.n	800bde0 <__pow5mult+0xa0>
 800bdc8:	6820      	ldr	r0, [r4, #0]
 800bdca:	b938      	cbnz	r0, 800bddc <__pow5mult+0x9c>
 800bdcc:	4622      	mov	r2, r4
 800bdce:	4621      	mov	r1, r4
 800bdd0:	4638      	mov	r0, r7
 800bdd2:	f7ff ff0b 	bl	800bbec <__multiply>
 800bdd6:	6020      	str	r0, [r4, #0]
 800bdd8:	f8c0 9000 	str.w	r9, [r0]
 800bddc:	4604      	mov	r4, r0
 800bdde:	e7e4      	b.n	800bdaa <__pow5mult+0x6a>
 800bde0:	4630      	mov	r0, r6
 800bde2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bde6:	bf00      	nop
 800bde8:	0800e228 	.word	0x0800e228
 800bdec:	0800e14e 	.word	0x0800e14e
 800bdf0:	0800e1ce 	.word	0x0800e1ce

0800bdf4 <__lshift>:
 800bdf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdf8:	460c      	mov	r4, r1
 800bdfa:	6849      	ldr	r1, [r1, #4]
 800bdfc:	6923      	ldr	r3, [r4, #16]
 800bdfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800be02:	68a3      	ldr	r3, [r4, #8]
 800be04:	4607      	mov	r7, r0
 800be06:	4691      	mov	r9, r2
 800be08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800be0c:	f108 0601 	add.w	r6, r8, #1
 800be10:	42b3      	cmp	r3, r6
 800be12:	db0b      	blt.n	800be2c <__lshift+0x38>
 800be14:	4638      	mov	r0, r7
 800be16:	f7ff fd95 	bl	800b944 <_Balloc>
 800be1a:	4605      	mov	r5, r0
 800be1c:	b948      	cbnz	r0, 800be32 <__lshift+0x3e>
 800be1e:	4602      	mov	r2, r0
 800be20:	4b28      	ldr	r3, [pc, #160]	@ (800bec4 <__lshift+0xd0>)
 800be22:	4829      	ldr	r0, [pc, #164]	@ (800bec8 <__lshift+0xd4>)
 800be24:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800be28:	f001 fac6 	bl	800d3b8 <__assert_func>
 800be2c:	3101      	adds	r1, #1
 800be2e:	005b      	lsls	r3, r3, #1
 800be30:	e7ee      	b.n	800be10 <__lshift+0x1c>
 800be32:	2300      	movs	r3, #0
 800be34:	f100 0114 	add.w	r1, r0, #20
 800be38:	f100 0210 	add.w	r2, r0, #16
 800be3c:	4618      	mov	r0, r3
 800be3e:	4553      	cmp	r3, sl
 800be40:	db33      	blt.n	800beaa <__lshift+0xb6>
 800be42:	6920      	ldr	r0, [r4, #16]
 800be44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800be48:	f104 0314 	add.w	r3, r4, #20
 800be4c:	f019 091f 	ands.w	r9, r9, #31
 800be50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800be54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800be58:	d02b      	beq.n	800beb2 <__lshift+0xbe>
 800be5a:	f1c9 0e20 	rsb	lr, r9, #32
 800be5e:	468a      	mov	sl, r1
 800be60:	2200      	movs	r2, #0
 800be62:	6818      	ldr	r0, [r3, #0]
 800be64:	fa00 f009 	lsl.w	r0, r0, r9
 800be68:	4310      	orrs	r0, r2
 800be6a:	f84a 0b04 	str.w	r0, [sl], #4
 800be6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800be72:	459c      	cmp	ip, r3
 800be74:	fa22 f20e 	lsr.w	r2, r2, lr
 800be78:	d8f3      	bhi.n	800be62 <__lshift+0x6e>
 800be7a:	ebac 0304 	sub.w	r3, ip, r4
 800be7e:	3b15      	subs	r3, #21
 800be80:	f023 0303 	bic.w	r3, r3, #3
 800be84:	3304      	adds	r3, #4
 800be86:	f104 0015 	add.w	r0, r4, #21
 800be8a:	4584      	cmp	ip, r0
 800be8c:	bf38      	it	cc
 800be8e:	2304      	movcc	r3, #4
 800be90:	50ca      	str	r2, [r1, r3]
 800be92:	b10a      	cbz	r2, 800be98 <__lshift+0xa4>
 800be94:	f108 0602 	add.w	r6, r8, #2
 800be98:	3e01      	subs	r6, #1
 800be9a:	4638      	mov	r0, r7
 800be9c:	612e      	str	r6, [r5, #16]
 800be9e:	4621      	mov	r1, r4
 800bea0:	f7ff fd90 	bl	800b9c4 <_Bfree>
 800bea4:	4628      	mov	r0, r5
 800bea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beaa:	f842 0f04 	str.w	r0, [r2, #4]!
 800beae:	3301      	adds	r3, #1
 800beb0:	e7c5      	b.n	800be3e <__lshift+0x4a>
 800beb2:	3904      	subs	r1, #4
 800beb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800beb8:	f841 2f04 	str.w	r2, [r1, #4]!
 800bebc:	459c      	cmp	ip, r3
 800bebe:	d8f9      	bhi.n	800beb4 <__lshift+0xc0>
 800bec0:	e7ea      	b.n	800be98 <__lshift+0xa4>
 800bec2:	bf00      	nop
 800bec4:	0800e1bd 	.word	0x0800e1bd
 800bec8:	0800e1ce 	.word	0x0800e1ce

0800becc <__mcmp>:
 800becc:	690a      	ldr	r2, [r1, #16]
 800bece:	4603      	mov	r3, r0
 800bed0:	6900      	ldr	r0, [r0, #16]
 800bed2:	1a80      	subs	r0, r0, r2
 800bed4:	b530      	push	{r4, r5, lr}
 800bed6:	d10e      	bne.n	800bef6 <__mcmp+0x2a>
 800bed8:	3314      	adds	r3, #20
 800beda:	3114      	adds	r1, #20
 800bedc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bee0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bee4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bee8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800beec:	4295      	cmp	r5, r2
 800beee:	d003      	beq.n	800bef8 <__mcmp+0x2c>
 800bef0:	d205      	bcs.n	800befe <__mcmp+0x32>
 800bef2:	f04f 30ff 	mov.w	r0, #4294967295
 800bef6:	bd30      	pop	{r4, r5, pc}
 800bef8:	42a3      	cmp	r3, r4
 800befa:	d3f3      	bcc.n	800bee4 <__mcmp+0x18>
 800befc:	e7fb      	b.n	800bef6 <__mcmp+0x2a>
 800befe:	2001      	movs	r0, #1
 800bf00:	e7f9      	b.n	800bef6 <__mcmp+0x2a>
	...

0800bf04 <__mdiff>:
 800bf04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf08:	4689      	mov	r9, r1
 800bf0a:	4606      	mov	r6, r0
 800bf0c:	4611      	mov	r1, r2
 800bf0e:	4648      	mov	r0, r9
 800bf10:	4614      	mov	r4, r2
 800bf12:	f7ff ffdb 	bl	800becc <__mcmp>
 800bf16:	1e05      	subs	r5, r0, #0
 800bf18:	d112      	bne.n	800bf40 <__mdiff+0x3c>
 800bf1a:	4629      	mov	r1, r5
 800bf1c:	4630      	mov	r0, r6
 800bf1e:	f7ff fd11 	bl	800b944 <_Balloc>
 800bf22:	4602      	mov	r2, r0
 800bf24:	b928      	cbnz	r0, 800bf32 <__mdiff+0x2e>
 800bf26:	4b3f      	ldr	r3, [pc, #252]	@ (800c024 <__mdiff+0x120>)
 800bf28:	f240 2137 	movw	r1, #567	@ 0x237
 800bf2c:	483e      	ldr	r0, [pc, #248]	@ (800c028 <__mdiff+0x124>)
 800bf2e:	f001 fa43 	bl	800d3b8 <__assert_func>
 800bf32:	2301      	movs	r3, #1
 800bf34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bf38:	4610      	mov	r0, r2
 800bf3a:	b003      	add	sp, #12
 800bf3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf40:	bfbc      	itt	lt
 800bf42:	464b      	movlt	r3, r9
 800bf44:	46a1      	movlt	r9, r4
 800bf46:	4630      	mov	r0, r6
 800bf48:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bf4c:	bfba      	itte	lt
 800bf4e:	461c      	movlt	r4, r3
 800bf50:	2501      	movlt	r5, #1
 800bf52:	2500      	movge	r5, #0
 800bf54:	f7ff fcf6 	bl	800b944 <_Balloc>
 800bf58:	4602      	mov	r2, r0
 800bf5a:	b918      	cbnz	r0, 800bf64 <__mdiff+0x60>
 800bf5c:	4b31      	ldr	r3, [pc, #196]	@ (800c024 <__mdiff+0x120>)
 800bf5e:	f240 2145 	movw	r1, #581	@ 0x245
 800bf62:	e7e3      	b.n	800bf2c <__mdiff+0x28>
 800bf64:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bf68:	6926      	ldr	r6, [r4, #16]
 800bf6a:	60c5      	str	r5, [r0, #12]
 800bf6c:	f109 0310 	add.w	r3, r9, #16
 800bf70:	f109 0514 	add.w	r5, r9, #20
 800bf74:	f104 0e14 	add.w	lr, r4, #20
 800bf78:	f100 0b14 	add.w	fp, r0, #20
 800bf7c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bf80:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bf84:	9301      	str	r3, [sp, #4]
 800bf86:	46d9      	mov	r9, fp
 800bf88:	f04f 0c00 	mov.w	ip, #0
 800bf8c:	9b01      	ldr	r3, [sp, #4]
 800bf8e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bf92:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bf96:	9301      	str	r3, [sp, #4]
 800bf98:	fa1f f38a 	uxth.w	r3, sl
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	b283      	uxth	r3, r0
 800bfa0:	1acb      	subs	r3, r1, r3
 800bfa2:	0c00      	lsrs	r0, r0, #16
 800bfa4:	4463      	add	r3, ip
 800bfa6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bfaa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bfae:	b29b      	uxth	r3, r3
 800bfb0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bfb4:	4576      	cmp	r6, lr
 800bfb6:	f849 3b04 	str.w	r3, [r9], #4
 800bfba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bfbe:	d8e5      	bhi.n	800bf8c <__mdiff+0x88>
 800bfc0:	1b33      	subs	r3, r6, r4
 800bfc2:	3b15      	subs	r3, #21
 800bfc4:	f023 0303 	bic.w	r3, r3, #3
 800bfc8:	3415      	adds	r4, #21
 800bfca:	3304      	adds	r3, #4
 800bfcc:	42a6      	cmp	r6, r4
 800bfce:	bf38      	it	cc
 800bfd0:	2304      	movcc	r3, #4
 800bfd2:	441d      	add	r5, r3
 800bfd4:	445b      	add	r3, fp
 800bfd6:	461e      	mov	r6, r3
 800bfd8:	462c      	mov	r4, r5
 800bfda:	4544      	cmp	r4, r8
 800bfdc:	d30e      	bcc.n	800bffc <__mdiff+0xf8>
 800bfde:	f108 0103 	add.w	r1, r8, #3
 800bfe2:	1b49      	subs	r1, r1, r5
 800bfe4:	f021 0103 	bic.w	r1, r1, #3
 800bfe8:	3d03      	subs	r5, #3
 800bfea:	45a8      	cmp	r8, r5
 800bfec:	bf38      	it	cc
 800bfee:	2100      	movcc	r1, #0
 800bff0:	440b      	add	r3, r1
 800bff2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bff6:	b191      	cbz	r1, 800c01e <__mdiff+0x11a>
 800bff8:	6117      	str	r7, [r2, #16]
 800bffa:	e79d      	b.n	800bf38 <__mdiff+0x34>
 800bffc:	f854 1b04 	ldr.w	r1, [r4], #4
 800c000:	46e6      	mov	lr, ip
 800c002:	0c08      	lsrs	r0, r1, #16
 800c004:	fa1c fc81 	uxtah	ip, ip, r1
 800c008:	4471      	add	r1, lr
 800c00a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c00e:	b289      	uxth	r1, r1
 800c010:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c014:	f846 1b04 	str.w	r1, [r6], #4
 800c018:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c01c:	e7dd      	b.n	800bfda <__mdiff+0xd6>
 800c01e:	3f01      	subs	r7, #1
 800c020:	e7e7      	b.n	800bff2 <__mdiff+0xee>
 800c022:	bf00      	nop
 800c024:	0800e1bd 	.word	0x0800e1bd
 800c028:	0800e1ce 	.word	0x0800e1ce

0800c02c <__ulp>:
 800c02c:	b082      	sub	sp, #8
 800c02e:	ed8d 0b00 	vstr	d0, [sp]
 800c032:	9a01      	ldr	r2, [sp, #4]
 800c034:	4b0f      	ldr	r3, [pc, #60]	@ (800c074 <__ulp+0x48>)
 800c036:	4013      	ands	r3, r2
 800c038:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	dc08      	bgt.n	800c052 <__ulp+0x26>
 800c040:	425b      	negs	r3, r3
 800c042:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c046:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c04a:	da04      	bge.n	800c056 <__ulp+0x2a>
 800c04c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c050:	4113      	asrs	r3, r2
 800c052:	2200      	movs	r2, #0
 800c054:	e008      	b.n	800c068 <__ulp+0x3c>
 800c056:	f1a2 0314 	sub.w	r3, r2, #20
 800c05a:	2b1e      	cmp	r3, #30
 800c05c:	bfda      	itte	le
 800c05e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c062:	40da      	lsrle	r2, r3
 800c064:	2201      	movgt	r2, #1
 800c066:	2300      	movs	r3, #0
 800c068:	4619      	mov	r1, r3
 800c06a:	4610      	mov	r0, r2
 800c06c:	ec41 0b10 	vmov	d0, r0, r1
 800c070:	b002      	add	sp, #8
 800c072:	4770      	bx	lr
 800c074:	7ff00000 	.word	0x7ff00000

0800c078 <__b2d>:
 800c078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c07c:	6906      	ldr	r6, [r0, #16]
 800c07e:	f100 0814 	add.w	r8, r0, #20
 800c082:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c086:	1f37      	subs	r7, r6, #4
 800c088:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c08c:	4610      	mov	r0, r2
 800c08e:	f7ff fd4b 	bl	800bb28 <__hi0bits>
 800c092:	f1c0 0320 	rsb	r3, r0, #32
 800c096:	280a      	cmp	r0, #10
 800c098:	600b      	str	r3, [r1, #0]
 800c09a:	491b      	ldr	r1, [pc, #108]	@ (800c108 <__b2d+0x90>)
 800c09c:	dc15      	bgt.n	800c0ca <__b2d+0x52>
 800c09e:	f1c0 0c0b 	rsb	ip, r0, #11
 800c0a2:	fa22 f30c 	lsr.w	r3, r2, ip
 800c0a6:	45b8      	cmp	r8, r7
 800c0a8:	ea43 0501 	orr.w	r5, r3, r1
 800c0ac:	bf34      	ite	cc
 800c0ae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c0b2:	2300      	movcs	r3, #0
 800c0b4:	3015      	adds	r0, #21
 800c0b6:	fa02 f000 	lsl.w	r0, r2, r0
 800c0ba:	fa23 f30c 	lsr.w	r3, r3, ip
 800c0be:	4303      	orrs	r3, r0
 800c0c0:	461c      	mov	r4, r3
 800c0c2:	ec45 4b10 	vmov	d0, r4, r5
 800c0c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0ca:	45b8      	cmp	r8, r7
 800c0cc:	bf3a      	itte	cc
 800c0ce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c0d2:	f1a6 0708 	subcc.w	r7, r6, #8
 800c0d6:	2300      	movcs	r3, #0
 800c0d8:	380b      	subs	r0, #11
 800c0da:	d012      	beq.n	800c102 <__b2d+0x8a>
 800c0dc:	f1c0 0120 	rsb	r1, r0, #32
 800c0e0:	fa23 f401 	lsr.w	r4, r3, r1
 800c0e4:	4082      	lsls	r2, r0
 800c0e6:	4322      	orrs	r2, r4
 800c0e8:	4547      	cmp	r7, r8
 800c0ea:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c0ee:	bf8c      	ite	hi
 800c0f0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c0f4:	2200      	movls	r2, #0
 800c0f6:	4083      	lsls	r3, r0
 800c0f8:	40ca      	lsrs	r2, r1
 800c0fa:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c0fe:	4313      	orrs	r3, r2
 800c100:	e7de      	b.n	800c0c0 <__b2d+0x48>
 800c102:	ea42 0501 	orr.w	r5, r2, r1
 800c106:	e7db      	b.n	800c0c0 <__b2d+0x48>
 800c108:	3ff00000 	.word	0x3ff00000

0800c10c <__d2b>:
 800c10c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c110:	460f      	mov	r7, r1
 800c112:	2101      	movs	r1, #1
 800c114:	ec59 8b10 	vmov	r8, r9, d0
 800c118:	4616      	mov	r6, r2
 800c11a:	f7ff fc13 	bl	800b944 <_Balloc>
 800c11e:	4604      	mov	r4, r0
 800c120:	b930      	cbnz	r0, 800c130 <__d2b+0x24>
 800c122:	4602      	mov	r2, r0
 800c124:	4b23      	ldr	r3, [pc, #140]	@ (800c1b4 <__d2b+0xa8>)
 800c126:	4824      	ldr	r0, [pc, #144]	@ (800c1b8 <__d2b+0xac>)
 800c128:	f240 310f 	movw	r1, #783	@ 0x30f
 800c12c:	f001 f944 	bl	800d3b8 <__assert_func>
 800c130:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c134:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c138:	b10d      	cbz	r5, 800c13e <__d2b+0x32>
 800c13a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c13e:	9301      	str	r3, [sp, #4]
 800c140:	f1b8 0300 	subs.w	r3, r8, #0
 800c144:	d023      	beq.n	800c18e <__d2b+0x82>
 800c146:	4668      	mov	r0, sp
 800c148:	9300      	str	r3, [sp, #0]
 800c14a:	f7ff fd0c 	bl	800bb66 <__lo0bits>
 800c14e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c152:	b1d0      	cbz	r0, 800c18a <__d2b+0x7e>
 800c154:	f1c0 0320 	rsb	r3, r0, #32
 800c158:	fa02 f303 	lsl.w	r3, r2, r3
 800c15c:	430b      	orrs	r3, r1
 800c15e:	40c2      	lsrs	r2, r0
 800c160:	6163      	str	r3, [r4, #20]
 800c162:	9201      	str	r2, [sp, #4]
 800c164:	9b01      	ldr	r3, [sp, #4]
 800c166:	61a3      	str	r3, [r4, #24]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	bf0c      	ite	eq
 800c16c:	2201      	moveq	r2, #1
 800c16e:	2202      	movne	r2, #2
 800c170:	6122      	str	r2, [r4, #16]
 800c172:	b1a5      	cbz	r5, 800c19e <__d2b+0x92>
 800c174:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c178:	4405      	add	r5, r0
 800c17a:	603d      	str	r5, [r7, #0]
 800c17c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c180:	6030      	str	r0, [r6, #0]
 800c182:	4620      	mov	r0, r4
 800c184:	b003      	add	sp, #12
 800c186:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c18a:	6161      	str	r1, [r4, #20]
 800c18c:	e7ea      	b.n	800c164 <__d2b+0x58>
 800c18e:	a801      	add	r0, sp, #4
 800c190:	f7ff fce9 	bl	800bb66 <__lo0bits>
 800c194:	9b01      	ldr	r3, [sp, #4]
 800c196:	6163      	str	r3, [r4, #20]
 800c198:	3020      	adds	r0, #32
 800c19a:	2201      	movs	r2, #1
 800c19c:	e7e8      	b.n	800c170 <__d2b+0x64>
 800c19e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c1a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c1a6:	6038      	str	r0, [r7, #0]
 800c1a8:	6918      	ldr	r0, [r3, #16]
 800c1aa:	f7ff fcbd 	bl	800bb28 <__hi0bits>
 800c1ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c1b2:	e7e5      	b.n	800c180 <__d2b+0x74>
 800c1b4:	0800e1bd 	.word	0x0800e1bd
 800c1b8:	0800e1ce 	.word	0x0800e1ce

0800c1bc <__ratio>:
 800c1bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1c0:	4688      	mov	r8, r1
 800c1c2:	4669      	mov	r1, sp
 800c1c4:	4681      	mov	r9, r0
 800c1c6:	f7ff ff57 	bl	800c078 <__b2d>
 800c1ca:	a901      	add	r1, sp, #4
 800c1cc:	4640      	mov	r0, r8
 800c1ce:	ec55 4b10 	vmov	r4, r5, d0
 800c1d2:	f7ff ff51 	bl	800c078 <__b2d>
 800c1d6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c1da:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800c1de:	1ad2      	subs	r2, r2, r3
 800c1e0:	e9dd 3100 	ldrd	r3, r1, [sp]
 800c1e4:	1a5b      	subs	r3, r3, r1
 800c1e6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800c1ea:	ec57 6b10 	vmov	r6, r7, d0
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	bfd6      	itet	le
 800c1f2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c1f6:	462a      	movgt	r2, r5
 800c1f8:	463a      	movle	r2, r7
 800c1fa:	46ab      	mov	fp, r5
 800c1fc:	46a2      	mov	sl, r4
 800c1fe:	bfce      	itee	gt
 800c200:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800c204:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800c208:	ee00 3a90 	vmovle	s1, r3
 800c20c:	ec4b ab17 	vmov	d7, sl, fp
 800c210:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800c214:	b003      	add	sp, #12
 800c216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c21a <__copybits>:
 800c21a:	3901      	subs	r1, #1
 800c21c:	b570      	push	{r4, r5, r6, lr}
 800c21e:	1149      	asrs	r1, r1, #5
 800c220:	6914      	ldr	r4, [r2, #16]
 800c222:	3101      	adds	r1, #1
 800c224:	f102 0314 	add.w	r3, r2, #20
 800c228:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c22c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c230:	1f05      	subs	r5, r0, #4
 800c232:	42a3      	cmp	r3, r4
 800c234:	d30c      	bcc.n	800c250 <__copybits+0x36>
 800c236:	1aa3      	subs	r3, r4, r2
 800c238:	3b11      	subs	r3, #17
 800c23a:	f023 0303 	bic.w	r3, r3, #3
 800c23e:	3211      	adds	r2, #17
 800c240:	42a2      	cmp	r2, r4
 800c242:	bf88      	it	hi
 800c244:	2300      	movhi	r3, #0
 800c246:	4418      	add	r0, r3
 800c248:	2300      	movs	r3, #0
 800c24a:	4288      	cmp	r0, r1
 800c24c:	d305      	bcc.n	800c25a <__copybits+0x40>
 800c24e:	bd70      	pop	{r4, r5, r6, pc}
 800c250:	f853 6b04 	ldr.w	r6, [r3], #4
 800c254:	f845 6f04 	str.w	r6, [r5, #4]!
 800c258:	e7eb      	b.n	800c232 <__copybits+0x18>
 800c25a:	f840 3b04 	str.w	r3, [r0], #4
 800c25e:	e7f4      	b.n	800c24a <__copybits+0x30>

0800c260 <__any_on>:
 800c260:	f100 0214 	add.w	r2, r0, #20
 800c264:	6900      	ldr	r0, [r0, #16]
 800c266:	114b      	asrs	r3, r1, #5
 800c268:	4298      	cmp	r0, r3
 800c26a:	b510      	push	{r4, lr}
 800c26c:	db11      	blt.n	800c292 <__any_on+0x32>
 800c26e:	dd0a      	ble.n	800c286 <__any_on+0x26>
 800c270:	f011 011f 	ands.w	r1, r1, #31
 800c274:	d007      	beq.n	800c286 <__any_on+0x26>
 800c276:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c27a:	fa24 f001 	lsr.w	r0, r4, r1
 800c27e:	fa00 f101 	lsl.w	r1, r0, r1
 800c282:	428c      	cmp	r4, r1
 800c284:	d10b      	bne.n	800c29e <__any_on+0x3e>
 800c286:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d803      	bhi.n	800c296 <__any_on+0x36>
 800c28e:	2000      	movs	r0, #0
 800c290:	bd10      	pop	{r4, pc}
 800c292:	4603      	mov	r3, r0
 800c294:	e7f7      	b.n	800c286 <__any_on+0x26>
 800c296:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c29a:	2900      	cmp	r1, #0
 800c29c:	d0f5      	beq.n	800c28a <__any_on+0x2a>
 800c29e:	2001      	movs	r0, #1
 800c2a0:	e7f6      	b.n	800c290 <__any_on+0x30>

0800c2a2 <sulp>:
 800c2a2:	b570      	push	{r4, r5, r6, lr}
 800c2a4:	4604      	mov	r4, r0
 800c2a6:	460d      	mov	r5, r1
 800c2a8:	4616      	mov	r6, r2
 800c2aa:	ec45 4b10 	vmov	d0, r4, r5
 800c2ae:	f7ff febd 	bl	800c02c <__ulp>
 800c2b2:	b17e      	cbz	r6, 800c2d4 <sulp+0x32>
 800c2b4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c2b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	dd09      	ble.n	800c2d4 <sulp+0x32>
 800c2c0:	051b      	lsls	r3, r3, #20
 800c2c2:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800c2c6:	2000      	movs	r0, #0
 800c2c8:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800c2cc:	ec41 0b17 	vmov	d7, r0, r1
 800c2d0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c2d4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c2d8 <_strtod_l>:
 800c2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2dc:	ed2d 8b0a 	vpush	{d8-d12}
 800c2e0:	b097      	sub	sp, #92	@ 0x5c
 800c2e2:	4688      	mov	r8, r1
 800c2e4:	920e      	str	r2, [sp, #56]	@ 0x38
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	9212      	str	r2, [sp, #72]	@ 0x48
 800c2ea:	9005      	str	r0, [sp, #20]
 800c2ec:	f04f 0a00 	mov.w	sl, #0
 800c2f0:	f04f 0b00 	mov.w	fp, #0
 800c2f4:	460a      	mov	r2, r1
 800c2f6:	9211      	str	r2, [sp, #68]	@ 0x44
 800c2f8:	7811      	ldrb	r1, [r2, #0]
 800c2fa:	292b      	cmp	r1, #43	@ 0x2b
 800c2fc:	d04c      	beq.n	800c398 <_strtod_l+0xc0>
 800c2fe:	d839      	bhi.n	800c374 <_strtod_l+0x9c>
 800c300:	290d      	cmp	r1, #13
 800c302:	d833      	bhi.n	800c36c <_strtod_l+0x94>
 800c304:	2908      	cmp	r1, #8
 800c306:	d833      	bhi.n	800c370 <_strtod_l+0x98>
 800c308:	2900      	cmp	r1, #0
 800c30a:	d03c      	beq.n	800c386 <_strtod_l+0xae>
 800c30c:	2200      	movs	r2, #0
 800c30e:	9208      	str	r2, [sp, #32]
 800c310:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800c312:	782a      	ldrb	r2, [r5, #0]
 800c314:	2a30      	cmp	r2, #48	@ 0x30
 800c316:	f040 80b5 	bne.w	800c484 <_strtod_l+0x1ac>
 800c31a:	786a      	ldrb	r2, [r5, #1]
 800c31c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c320:	2a58      	cmp	r2, #88	@ 0x58
 800c322:	d170      	bne.n	800c406 <_strtod_l+0x12e>
 800c324:	9302      	str	r3, [sp, #8]
 800c326:	9b08      	ldr	r3, [sp, #32]
 800c328:	9301      	str	r3, [sp, #4]
 800c32a:	ab12      	add	r3, sp, #72	@ 0x48
 800c32c:	9300      	str	r3, [sp, #0]
 800c32e:	4a8b      	ldr	r2, [pc, #556]	@ (800c55c <_strtod_l+0x284>)
 800c330:	9805      	ldr	r0, [sp, #20]
 800c332:	ab13      	add	r3, sp, #76	@ 0x4c
 800c334:	a911      	add	r1, sp, #68	@ 0x44
 800c336:	f001 f8d9 	bl	800d4ec <__gethex>
 800c33a:	f010 060f 	ands.w	r6, r0, #15
 800c33e:	4604      	mov	r4, r0
 800c340:	d005      	beq.n	800c34e <_strtod_l+0x76>
 800c342:	2e06      	cmp	r6, #6
 800c344:	d12a      	bne.n	800c39c <_strtod_l+0xc4>
 800c346:	3501      	adds	r5, #1
 800c348:	2300      	movs	r3, #0
 800c34a:	9511      	str	r5, [sp, #68]	@ 0x44
 800c34c:	9308      	str	r3, [sp, #32]
 800c34e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c350:	2b00      	cmp	r3, #0
 800c352:	f040 852f 	bne.w	800cdb4 <_strtod_l+0xadc>
 800c356:	9b08      	ldr	r3, [sp, #32]
 800c358:	ec4b ab10 	vmov	d0, sl, fp
 800c35c:	b1cb      	cbz	r3, 800c392 <_strtod_l+0xba>
 800c35e:	eeb1 0b40 	vneg.f64	d0, d0
 800c362:	b017      	add	sp, #92	@ 0x5c
 800c364:	ecbd 8b0a 	vpop	{d8-d12}
 800c368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c36c:	2920      	cmp	r1, #32
 800c36e:	d1cd      	bne.n	800c30c <_strtod_l+0x34>
 800c370:	3201      	adds	r2, #1
 800c372:	e7c0      	b.n	800c2f6 <_strtod_l+0x1e>
 800c374:	292d      	cmp	r1, #45	@ 0x2d
 800c376:	d1c9      	bne.n	800c30c <_strtod_l+0x34>
 800c378:	2101      	movs	r1, #1
 800c37a:	9108      	str	r1, [sp, #32]
 800c37c:	1c51      	adds	r1, r2, #1
 800c37e:	9111      	str	r1, [sp, #68]	@ 0x44
 800c380:	7852      	ldrb	r2, [r2, #1]
 800c382:	2a00      	cmp	r2, #0
 800c384:	d1c4      	bne.n	800c310 <_strtod_l+0x38>
 800c386:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c388:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	f040 850f 	bne.w	800cdb0 <_strtod_l+0xad8>
 800c392:	ec4b ab10 	vmov	d0, sl, fp
 800c396:	e7e4      	b.n	800c362 <_strtod_l+0x8a>
 800c398:	2100      	movs	r1, #0
 800c39a:	e7ee      	b.n	800c37a <_strtod_l+0xa2>
 800c39c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c39e:	b13a      	cbz	r2, 800c3b0 <_strtod_l+0xd8>
 800c3a0:	2135      	movs	r1, #53	@ 0x35
 800c3a2:	a814      	add	r0, sp, #80	@ 0x50
 800c3a4:	f7ff ff39 	bl	800c21a <__copybits>
 800c3a8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c3aa:	9805      	ldr	r0, [sp, #20]
 800c3ac:	f7ff fb0a 	bl	800b9c4 <_Bfree>
 800c3b0:	1e73      	subs	r3, r6, #1
 800c3b2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c3b4:	2b04      	cmp	r3, #4
 800c3b6:	d806      	bhi.n	800c3c6 <_strtod_l+0xee>
 800c3b8:	e8df f003 	tbb	[pc, r3]
 800c3bc:	201d0314 	.word	0x201d0314
 800c3c0:	14          	.byte	0x14
 800c3c1:	00          	.byte	0x00
 800c3c2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800c3c6:	05e3      	lsls	r3, r4, #23
 800c3c8:	bf48      	it	mi
 800c3ca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c3ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c3d2:	0d1b      	lsrs	r3, r3, #20
 800c3d4:	051b      	lsls	r3, r3, #20
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d1b9      	bne.n	800c34e <_strtod_l+0x76>
 800c3da:	f7fe fba1 	bl	800ab20 <__errno>
 800c3de:	2322      	movs	r3, #34	@ 0x22
 800c3e0:	6003      	str	r3, [r0, #0]
 800c3e2:	e7b4      	b.n	800c34e <_strtod_l+0x76>
 800c3e4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800c3e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c3ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c3f0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c3f4:	e7e7      	b.n	800c3c6 <_strtod_l+0xee>
 800c3f6:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800c564 <_strtod_l+0x28c>
 800c3fa:	e7e4      	b.n	800c3c6 <_strtod_l+0xee>
 800c3fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c400:	f04f 3aff 	mov.w	sl, #4294967295
 800c404:	e7df      	b.n	800c3c6 <_strtod_l+0xee>
 800c406:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c408:	1c5a      	adds	r2, r3, #1
 800c40a:	9211      	str	r2, [sp, #68]	@ 0x44
 800c40c:	785b      	ldrb	r3, [r3, #1]
 800c40e:	2b30      	cmp	r3, #48	@ 0x30
 800c410:	d0f9      	beq.n	800c406 <_strtod_l+0x12e>
 800c412:	2b00      	cmp	r3, #0
 800c414:	d09b      	beq.n	800c34e <_strtod_l+0x76>
 800c416:	2301      	movs	r3, #1
 800c418:	2600      	movs	r6, #0
 800c41a:	9307      	str	r3, [sp, #28]
 800c41c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c41e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c420:	46b1      	mov	r9, r6
 800c422:	4635      	mov	r5, r6
 800c424:	220a      	movs	r2, #10
 800c426:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800c428:	7804      	ldrb	r4, [r0, #0]
 800c42a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800c42e:	b2d9      	uxtb	r1, r3
 800c430:	2909      	cmp	r1, #9
 800c432:	d929      	bls.n	800c488 <_strtod_l+0x1b0>
 800c434:	494a      	ldr	r1, [pc, #296]	@ (800c560 <_strtod_l+0x288>)
 800c436:	2201      	movs	r2, #1
 800c438:	f000 ff84 	bl	800d344 <strncmp>
 800c43c:	b378      	cbz	r0, 800c49e <_strtod_l+0x1c6>
 800c43e:	2000      	movs	r0, #0
 800c440:	4622      	mov	r2, r4
 800c442:	462b      	mov	r3, r5
 800c444:	4607      	mov	r7, r0
 800c446:	9006      	str	r0, [sp, #24]
 800c448:	2a65      	cmp	r2, #101	@ 0x65
 800c44a:	d001      	beq.n	800c450 <_strtod_l+0x178>
 800c44c:	2a45      	cmp	r2, #69	@ 0x45
 800c44e:	d117      	bne.n	800c480 <_strtod_l+0x1a8>
 800c450:	b91b      	cbnz	r3, 800c45a <_strtod_l+0x182>
 800c452:	9b07      	ldr	r3, [sp, #28]
 800c454:	4303      	orrs	r3, r0
 800c456:	d096      	beq.n	800c386 <_strtod_l+0xae>
 800c458:	2300      	movs	r3, #0
 800c45a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800c45e:	f108 0201 	add.w	r2, r8, #1
 800c462:	9211      	str	r2, [sp, #68]	@ 0x44
 800c464:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c468:	2a2b      	cmp	r2, #43	@ 0x2b
 800c46a:	d06b      	beq.n	800c544 <_strtod_l+0x26c>
 800c46c:	2a2d      	cmp	r2, #45	@ 0x2d
 800c46e:	d071      	beq.n	800c554 <_strtod_l+0x27c>
 800c470:	f04f 0e00 	mov.w	lr, #0
 800c474:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800c478:	2c09      	cmp	r4, #9
 800c47a:	d979      	bls.n	800c570 <_strtod_l+0x298>
 800c47c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800c480:	2400      	movs	r4, #0
 800c482:	e094      	b.n	800c5ae <_strtod_l+0x2d6>
 800c484:	2300      	movs	r3, #0
 800c486:	e7c7      	b.n	800c418 <_strtod_l+0x140>
 800c488:	2d08      	cmp	r5, #8
 800c48a:	f100 0001 	add.w	r0, r0, #1
 800c48e:	bfd4      	ite	le
 800c490:	fb02 3909 	mlale	r9, r2, r9, r3
 800c494:	fb02 3606 	mlagt	r6, r2, r6, r3
 800c498:	3501      	adds	r5, #1
 800c49a:	9011      	str	r0, [sp, #68]	@ 0x44
 800c49c:	e7c3      	b.n	800c426 <_strtod_l+0x14e>
 800c49e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c4a0:	1c5a      	adds	r2, r3, #1
 800c4a2:	9211      	str	r2, [sp, #68]	@ 0x44
 800c4a4:	785a      	ldrb	r2, [r3, #1]
 800c4a6:	b375      	cbz	r5, 800c506 <_strtod_l+0x22e>
 800c4a8:	4607      	mov	r7, r0
 800c4aa:	462b      	mov	r3, r5
 800c4ac:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c4b0:	2909      	cmp	r1, #9
 800c4b2:	d913      	bls.n	800c4dc <_strtod_l+0x204>
 800c4b4:	2101      	movs	r1, #1
 800c4b6:	9106      	str	r1, [sp, #24]
 800c4b8:	e7c6      	b.n	800c448 <_strtod_l+0x170>
 800c4ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c4bc:	1c5a      	adds	r2, r3, #1
 800c4be:	9211      	str	r2, [sp, #68]	@ 0x44
 800c4c0:	785a      	ldrb	r2, [r3, #1]
 800c4c2:	3001      	adds	r0, #1
 800c4c4:	2a30      	cmp	r2, #48	@ 0x30
 800c4c6:	d0f8      	beq.n	800c4ba <_strtod_l+0x1e2>
 800c4c8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c4cc:	2b08      	cmp	r3, #8
 800c4ce:	f200 8476 	bhi.w	800cdbe <_strtod_l+0xae6>
 800c4d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c4d4:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4d6:	4607      	mov	r7, r0
 800c4d8:	2000      	movs	r0, #0
 800c4da:	4603      	mov	r3, r0
 800c4dc:	3a30      	subs	r2, #48	@ 0x30
 800c4de:	f100 0101 	add.w	r1, r0, #1
 800c4e2:	d023      	beq.n	800c52c <_strtod_l+0x254>
 800c4e4:	440f      	add	r7, r1
 800c4e6:	eb00 0c03 	add.w	ip, r0, r3
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	240a      	movs	r4, #10
 800c4ee:	4561      	cmp	r1, ip
 800c4f0:	d10b      	bne.n	800c50a <_strtod_l+0x232>
 800c4f2:	1c5c      	adds	r4, r3, #1
 800c4f4:	4403      	add	r3, r0
 800c4f6:	2b08      	cmp	r3, #8
 800c4f8:	4404      	add	r4, r0
 800c4fa:	dc11      	bgt.n	800c520 <_strtod_l+0x248>
 800c4fc:	230a      	movs	r3, #10
 800c4fe:	fb03 2909 	mla	r9, r3, r9, r2
 800c502:	2100      	movs	r1, #0
 800c504:	e013      	b.n	800c52e <_strtod_l+0x256>
 800c506:	4628      	mov	r0, r5
 800c508:	e7dc      	b.n	800c4c4 <_strtod_l+0x1ec>
 800c50a:	2908      	cmp	r1, #8
 800c50c:	f101 0101 	add.w	r1, r1, #1
 800c510:	dc02      	bgt.n	800c518 <_strtod_l+0x240>
 800c512:	fb04 f909 	mul.w	r9, r4, r9
 800c516:	e7ea      	b.n	800c4ee <_strtod_l+0x216>
 800c518:	2910      	cmp	r1, #16
 800c51a:	bfd8      	it	le
 800c51c:	4366      	mulle	r6, r4
 800c51e:	e7e6      	b.n	800c4ee <_strtod_l+0x216>
 800c520:	2b0f      	cmp	r3, #15
 800c522:	dcee      	bgt.n	800c502 <_strtod_l+0x22a>
 800c524:	230a      	movs	r3, #10
 800c526:	fb03 2606 	mla	r6, r3, r6, r2
 800c52a:	e7ea      	b.n	800c502 <_strtod_l+0x22a>
 800c52c:	461c      	mov	r4, r3
 800c52e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c530:	1c5a      	adds	r2, r3, #1
 800c532:	9211      	str	r2, [sp, #68]	@ 0x44
 800c534:	785a      	ldrb	r2, [r3, #1]
 800c536:	4608      	mov	r0, r1
 800c538:	4623      	mov	r3, r4
 800c53a:	e7b7      	b.n	800c4ac <_strtod_l+0x1d4>
 800c53c:	2301      	movs	r3, #1
 800c53e:	2700      	movs	r7, #0
 800c540:	9306      	str	r3, [sp, #24]
 800c542:	e786      	b.n	800c452 <_strtod_l+0x17a>
 800c544:	f04f 0e00 	mov.w	lr, #0
 800c548:	f108 0202 	add.w	r2, r8, #2
 800c54c:	9211      	str	r2, [sp, #68]	@ 0x44
 800c54e:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c552:	e78f      	b.n	800c474 <_strtod_l+0x19c>
 800c554:	f04f 0e01 	mov.w	lr, #1
 800c558:	e7f6      	b.n	800c548 <_strtod_l+0x270>
 800c55a:	bf00      	nop
 800c55c:	0800e340 	.word	0x0800e340
 800c560:	0800e328 	.word	0x0800e328
 800c564:	7ff00000 	.word	0x7ff00000
 800c568:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c56a:	1c54      	adds	r4, r2, #1
 800c56c:	9411      	str	r4, [sp, #68]	@ 0x44
 800c56e:	7852      	ldrb	r2, [r2, #1]
 800c570:	2a30      	cmp	r2, #48	@ 0x30
 800c572:	d0f9      	beq.n	800c568 <_strtod_l+0x290>
 800c574:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800c578:	2c08      	cmp	r4, #8
 800c57a:	d881      	bhi.n	800c480 <_strtod_l+0x1a8>
 800c57c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800c580:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c582:	9209      	str	r2, [sp, #36]	@ 0x24
 800c584:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c586:	1c51      	adds	r1, r2, #1
 800c588:	9111      	str	r1, [sp, #68]	@ 0x44
 800c58a:	7852      	ldrb	r2, [r2, #1]
 800c58c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800c590:	2c09      	cmp	r4, #9
 800c592:	d938      	bls.n	800c606 <_strtod_l+0x32e>
 800c594:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800c596:	1b0c      	subs	r4, r1, r4
 800c598:	2c08      	cmp	r4, #8
 800c59a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800c59e:	dc02      	bgt.n	800c5a6 <_strtod_l+0x2ce>
 800c5a0:	4564      	cmp	r4, ip
 800c5a2:	bfa8      	it	ge
 800c5a4:	4664      	movge	r4, ip
 800c5a6:	f1be 0f00 	cmp.w	lr, #0
 800c5aa:	d000      	beq.n	800c5ae <_strtod_l+0x2d6>
 800c5ac:	4264      	negs	r4, r4
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d14e      	bne.n	800c650 <_strtod_l+0x378>
 800c5b2:	9b07      	ldr	r3, [sp, #28]
 800c5b4:	4318      	orrs	r0, r3
 800c5b6:	f47f aeca 	bne.w	800c34e <_strtod_l+0x76>
 800c5ba:	9b06      	ldr	r3, [sp, #24]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	f47f aee2 	bne.w	800c386 <_strtod_l+0xae>
 800c5c2:	2a69      	cmp	r2, #105	@ 0x69
 800c5c4:	d027      	beq.n	800c616 <_strtod_l+0x33e>
 800c5c6:	dc24      	bgt.n	800c612 <_strtod_l+0x33a>
 800c5c8:	2a49      	cmp	r2, #73	@ 0x49
 800c5ca:	d024      	beq.n	800c616 <_strtod_l+0x33e>
 800c5cc:	2a4e      	cmp	r2, #78	@ 0x4e
 800c5ce:	f47f aeda 	bne.w	800c386 <_strtod_l+0xae>
 800c5d2:	4997      	ldr	r1, [pc, #604]	@ (800c830 <_strtod_l+0x558>)
 800c5d4:	a811      	add	r0, sp, #68	@ 0x44
 800c5d6:	f001 f9ab 	bl	800d930 <__match>
 800c5da:	2800      	cmp	r0, #0
 800c5dc:	f43f aed3 	beq.w	800c386 <_strtod_l+0xae>
 800c5e0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	2b28      	cmp	r3, #40	@ 0x28
 800c5e6:	d12d      	bne.n	800c644 <_strtod_l+0x36c>
 800c5e8:	4992      	ldr	r1, [pc, #584]	@ (800c834 <_strtod_l+0x55c>)
 800c5ea:	aa14      	add	r2, sp, #80	@ 0x50
 800c5ec:	a811      	add	r0, sp, #68	@ 0x44
 800c5ee:	f001 f9b3 	bl	800d958 <__hexnan>
 800c5f2:	2805      	cmp	r0, #5
 800c5f4:	d126      	bne.n	800c644 <_strtod_l+0x36c>
 800c5f6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c5f8:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800c5fc:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c600:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c604:	e6a3      	b.n	800c34e <_strtod_l+0x76>
 800c606:	240a      	movs	r4, #10
 800c608:	fb04 2c0c 	mla	ip, r4, ip, r2
 800c60c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800c610:	e7b8      	b.n	800c584 <_strtod_l+0x2ac>
 800c612:	2a6e      	cmp	r2, #110	@ 0x6e
 800c614:	e7db      	b.n	800c5ce <_strtod_l+0x2f6>
 800c616:	4988      	ldr	r1, [pc, #544]	@ (800c838 <_strtod_l+0x560>)
 800c618:	a811      	add	r0, sp, #68	@ 0x44
 800c61a:	f001 f989 	bl	800d930 <__match>
 800c61e:	2800      	cmp	r0, #0
 800c620:	f43f aeb1 	beq.w	800c386 <_strtod_l+0xae>
 800c624:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c626:	4985      	ldr	r1, [pc, #532]	@ (800c83c <_strtod_l+0x564>)
 800c628:	3b01      	subs	r3, #1
 800c62a:	a811      	add	r0, sp, #68	@ 0x44
 800c62c:	9311      	str	r3, [sp, #68]	@ 0x44
 800c62e:	f001 f97f 	bl	800d930 <__match>
 800c632:	b910      	cbnz	r0, 800c63a <_strtod_l+0x362>
 800c634:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c636:	3301      	adds	r3, #1
 800c638:	9311      	str	r3, [sp, #68]	@ 0x44
 800c63a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800c850 <_strtod_l+0x578>
 800c63e:	f04f 0a00 	mov.w	sl, #0
 800c642:	e684      	b.n	800c34e <_strtod_l+0x76>
 800c644:	487e      	ldr	r0, [pc, #504]	@ (800c840 <_strtod_l+0x568>)
 800c646:	f000 feaf 	bl	800d3a8 <nan>
 800c64a:	ec5b ab10 	vmov	sl, fp, d0
 800c64e:	e67e      	b.n	800c34e <_strtod_l+0x76>
 800c650:	ee07 9a90 	vmov	s15, r9
 800c654:	1be2      	subs	r2, r4, r7
 800c656:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c65a:	2d00      	cmp	r5, #0
 800c65c:	bf08      	it	eq
 800c65e:	461d      	moveq	r5, r3
 800c660:	2b10      	cmp	r3, #16
 800c662:	9209      	str	r2, [sp, #36]	@ 0x24
 800c664:	461a      	mov	r2, r3
 800c666:	bfa8      	it	ge
 800c668:	2210      	movge	r2, #16
 800c66a:	2b09      	cmp	r3, #9
 800c66c:	ec5b ab17 	vmov	sl, fp, d7
 800c670:	dc15      	bgt.n	800c69e <_strtod_l+0x3c6>
 800c672:	1be1      	subs	r1, r4, r7
 800c674:	2900      	cmp	r1, #0
 800c676:	f43f ae6a 	beq.w	800c34e <_strtod_l+0x76>
 800c67a:	eba4 0107 	sub.w	r1, r4, r7
 800c67e:	dd72      	ble.n	800c766 <_strtod_l+0x48e>
 800c680:	2916      	cmp	r1, #22
 800c682:	dc59      	bgt.n	800c738 <_strtod_l+0x460>
 800c684:	4b6f      	ldr	r3, [pc, #444]	@ (800c844 <_strtod_l+0x56c>)
 800c686:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c688:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c68c:	ed93 7b00 	vldr	d7, [r3]
 800c690:	ec4b ab16 	vmov	d6, sl, fp
 800c694:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c698:	ec5b ab17 	vmov	sl, fp, d7
 800c69c:	e657      	b.n	800c34e <_strtod_l+0x76>
 800c69e:	4969      	ldr	r1, [pc, #420]	@ (800c844 <_strtod_l+0x56c>)
 800c6a0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c6a4:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800c6a8:	ee06 6a90 	vmov	s13, r6
 800c6ac:	2b0f      	cmp	r3, #15
 800c6ae:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800c6b2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c6b6:	ec5b ab16 	vmov	sl, fp, d6
 800c6ba:	ddda      	ble.n	800c672 <_strtod_l+0x39a>
 800c6bc:	1a9a      	subs	r2, r3, r2
 800c6be:	1be1      	subs	r1, r4, r7
 800c6c0:	440a      	add	r2, r1
 800c6c2:	2a00      	cmp	r2, #0
 800c6c4:	f340 8094 	ble.w	800c7f0 <_strtod_l+0x518>
 800c6c8:	f012 000f 	ands.w	r0, r2, #15
 800c6cc:	d00a      	beq.n	800c6e4 <_strtod_l+0x40c>
 800c6ce:	495d      	ldr	r1, [pc, #372]	@ (800c844 <_strtod_l+0x56c>)
 800c6d0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c6d4:	ed91 7b00 	vldr	d7, [r1]
 800c6d8:	ec4b ab16 	vmov	d6, sl, fp
 800c6dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c6e0:	ec5b ab17 	vmov	sl, fp, d7
 800c6e4:	f032 020f 	bics.w	r2, r2, #15
 800c6e8:	d073      	beq.n	800c7d2 <_strtod_l+0x4fa>
 800c6ea:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800c6ee:	dd47      	ble.n	800c780 <_strtod_l+0x4a8>
 800c6f0:	2400      	movs	r4, #0
 800c6f2:	4625      	mov	r5, r4
 800c6f4:	9407      	str	r4, [sp, #28]
 800c6f6:	4626      	mov	r6, r4
 800c6f8:	9a05      	ldr	r2, [sp, #20]
 800c6fa:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c850 <_strtod_l+0x578>
 800c6fe:	2322      	movs	r3, #34	@ 0x22
 800c700:	6013      	str	r3, [r2, #0]
 800c702:	f04f 0a00 	mov.w	sl, #0
 800c706:	9b07      	ldr	r3, [sp, #28]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	f43f ae20 	beq.w	800c34e <_strtod_l+0x76>
 800c70e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c710:	9805      	ldr	r0, [sp, #20]
 800c712:	f7ff f957 	bl	800b9c4 <_Bfree>
 800c716:	9805      	ldr	r0, [sp, #20]
 800c718:	4631      	mov	r1, r6
 800c71a:	f7ff f953 	bl	800b9c4 <_Bfree>
 800c71e:	9805      	ldr	r0, [sp, #20]
 800c720:	4629      	mov	r1, r5
 800c722:	f7ff f94f 	bl	800b9c4 <_Bfree>
 800c726:	9907      	ldr	r1, [sp, #28]
 800c728:	9805      	ldr	r0, [sp, #20]
 800c72a:	f7ff f94b 	bl	800b9c4 <_Bfree>
 800c72e:	9805      	ldr	r0, [sp, #20]
 800c730:	4621      	mov	r1, r4
 800c732:	f7ff f947 	bl	800b9c4 <_Bfree>
 800c736:	e60a      	b.n	800c34e <_strtod_l+0x76>
 800c738:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800c73c:	1be0      	subs	r0, r4, r7
 800c73e:	4281      	cmp	r1, r0
 800c740:	dbbc      	blt.n	800c6bc <_strtod_l+0x3e4>
 800c742:	4a40      	ldr	r2, [pc, #256]	@ (800c844 <_strtod_l+0x56c>)
 800c744:	f1c3 030f 	rsb	r3, r3, #15
 800c748:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800c74c:	ed91 7b00 	vldr	d7, [r1]
 800c750:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c752:	ec4b ab16 	vmov	d6, sl, fp
 800c756:	1acb      	subs	r3, r1, r3
 800c758:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c75c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c760:	ed92 6b00 	vldr	d6, [r2]
 800c764:	e796      	b.n	800c694 <_strtod_l+0x3bc>
 800c766:	3116      	adds	r1, #22
 800c768:	dba8      	blt.n	800c6bc <_strtod_l+0x3e4>
 800c76a:	4b36      	ldr	r3, [pc, #216]	@ (800c844 <_strtod_l+0x56c>)
 800c76c:	1b3c      	subs	r4, r7, r4
 800c76e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c772:	ed94 7b00 	vldr	d7, [r4]
 800c776:	ec4b ab16 	vmov	d6, sl, fp
 800c77a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c77e:	e78b      	b.n	800c698 <_strtod_l+0x3c0>
 800c780:	2000      	movs	r0, #0
 800c782:	ec4b ab17 	vmov	d7, sl, fp
 800c786:	4e30      	ldr	r6, [pc, #192]	@ (800c848 <_strtod_l+0x570>)
 800c788:	1112      	asrs	r2, r2, #4
 800c78a:	4601      	mov	r1, r0
 800c78c:	2a01      	cmp	r2, #1
 800c78e:	dc23      	bgt.n	800c7d8 <_strtod_l+0x500>
 800c790:	b108      	cbz	r0, 800c796 <_strtod_l+0x4be>
 800c792:	ec5b ab17 	vmov	sl, fp, d7
 800c796:	4a2c      	ldr	r2, [pc, #176]	@ (800c848 <_strtod_l+0x570>)
 800c798:	482c      	ldr	r0, [pc, #176]	@ (800c84c <_strtod_l+0x574>)
 800c79a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c79e:	ed92 7b00 	vldr	d7, [r2]
 800c7a2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c7a6:	ec4b ab16 	vmov	d6, sl, fp
 800c7aa:	4a29      	ldr	r2, [pc, #164]	@ (800c850 <_strtod_l+0x578>)
 800c7ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c7b0:	ee17 1a90 	vmov	r1, s15
 800c7b4:	400a      	ands	r2, r1
 800c7b6:	4282      	cmp	r2, r0
 800c7b8:	ec5b ab17 	vmov	sl, fp, d7
 800c7bc:	d898      	bhi.n	800c6f0 <_strtod_l+0x418>
 800c7be:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800c7c2:	4282      	cmp	r2, r0
 800c7c4:	bf86      	itte	hi
 800c7c6:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800c854 <_strtod_l+0x57c>
 800c7ca:	f04f 3aff 	movhi.w	sl, #4294967295
 800c7ce:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	9206      	str	r2, [sp, #24]
 800c7d6:	e076      	b.n	800c8c6 <_strtod_l+0x5ee>
 800c7d8:	f012 0f01 	tst.w	r2, #1
 800c7dc:	d004      	beq.n	800c7e8 <_strtod_l+0x510>
 800c7de:	ed96 6b00 	vldr	d6, [r6]
 800c7e2:	2001      	movs	r0, #1
 800c7e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c7e8:	3101      	adds	r1, #1
 800c7ea:	1052      	asrs	r2, r2, #1
 800c7ec:	3608      	adds	r6, #8
 800c7ee:	e7cd      	b.n	800c78c <_strtod_l+0x4b4>
 800c7f0:	d0ef      	beq.n	800c7d2 <_strtod_l+0x4fa>
 800c7f2:	4252      	negs	r2, r2
 800c7f4:	f012 000f 	ands.w	r0, r2, #15
 800c7f8:	d00a      	beq.n	800c810 <_strtod_l+0x538>
 800c7fa:	4912      	ldr	r1, [pc, #72]	@ (800c844 <_strtod_l+0x56c>)
 800c7fc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c800:	ed91 7b00 	vldr	d7, [r1]
 800c804:	ec4b ab16 	vmov	d6, sl, fp
 800c808:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c80c:	ec5b ab17 	vmov	sl, fp, d7
 800c810:	1112      	asrs	r2, r2, #4
 800c812:	d0de      	beq.n	800c7d2 <_strtod_l+0x4fa>
 800c814:	2a1f      	cmp	r2, #31
 800c816:	dd1f      	ble.n	800c858 <_strtod_l+0x580>
 800c818:	2400      	movs	r4, #0
 800c81a:	4625      	mov	r5, r4
 800c81c:	9407      	str	r4, [sp, #28]
 800c81e:	4626      	mov	r6, r4
 800c820:	9a05      	ldr	r2, [sp, #20]
 800c822:	2322      	movs	r3, #34	@ 0x22
 800c824:	f04f 0a00 	mov.w	sl, #0
 800c828:	f04f 0b00 	mov.w	fp, #0
 800c82c:	6013      	str	r3, [r2, #0]
 800c82e:	e76a      	b.n	800c706 <_strtod_l+0x42e>
 800c830:	0800e115 	.word	0x0800e115
 800c834:	0800e32c 	.word	0x0800e32c
 800c838:	0800e10d 	.word	0x0800e10d
 800c83c:	0800e144 	.word	0x0800e144
 800c840:	0800e4d5 	.word	0x0800e4d5
 800c844:	0800e260 	.word	0x0800e260
 800c848:	0800e238 	.word	0x0800e238
 800c84c:	7ca00000 	.word	0x7ca00000
 800c850:	7ff00000 	.word	0x7ff00000
 800c854:	7fefffff 	.word	0x7fefffff
 800c858:	f012 0110 	ands.w	r1, r2, #16
 800c85c:	bf18      	it	ne
 800c85e:	216a      	movne	r1, #106	@ 0x6a
 800c860:	9106      	str	r1, [sp, #24]
 800c862:	ec4b ab17 	vmov	d7, sl, fp
 800c866:	49b0      	ldr	r1, [pc, #704]	@ (800cb28 <_strtod_l+0x850>)
 800c868:	2000      	movs	r0, #0
 800c86a:	07d6      	lsls	r6, r2, #31
 800c86c:	d504      	bpl.n	800c878 <_strtod_l+0x5a0>
 800c86e:	ed91 6b00 	vldr	d6, [r1]
 800c872:	2001      	movs	r0, #1
 800c874:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c878:	1052      	asrs	r2, r2, #1
 800c87a:	f101 0108 	add.w	r1, r1, #8
 800c87e:	d1f4      	bne.n	800c86a <_strtod_l+0x592>
 800c880:	b108      	cbz	r0, 800c886 <_strtod_l+0x5ae>
 800c882:	ec5b ab17 	vmov	sl, fp, d7
 800c886:	9a06      	ldr	r2, [sp, #24]
 800c888:	b1b2      	cbz	r2, 800c8b8 <_strtod_l+0x5e0>
 800c88a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800c88e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800c892:	2a00      	cmp	r2, #0
 800c894:	4658      	mov	r0, fp
 800c896:	dd0f      	ble.n	800c8b8 <_strtod_l+0x5e0>
 800c898:	2a1f      	cmp	r2, #31
 800c89a:	dd55      	ble.n	800c948 <_strtod_l+0x670>
 800c89c:	2a34      	cmp	r2, #52	@ 0x34
 800c89e:	bfde      	ittt	le
 800c8a0:	f04f 32ff 	movle.w	r2, #4294967295
 800c8a4:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800c8a8:	408a      	lslle	r2, r1
 800c8aa:	f04f 0a00 	mov.w	sl, #0
 800c8ae:	bfcc      	ite	gt
 800c8b0:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c8b4:	ea02 0b00 	andle.w	fp, r2, r0
 800c8b8:	ec4b ab17 	vmov	d7, sl, fp
 800c8bc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c8c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8c4:	d0a8      	beq.n	800c818 <_strtod_l+0x540>
 800c8c6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c8c8:	9805      	ldr	r0, [sp, #20]
 800c8ca:	f8cd 9000 	str.w	r9, [sp]
 800c8ce:	462a      	mov	r2, r5
 800c8d0:	f7ff f8e0 	bl	800ba94 <__s2b>
 800c8d4:	9007      	str	r0, [sp, #28]
 800c8d6:	2800      	cmp	r0, #0
 800c8d8:	f43f af0a 	beq.w	800c6f0 <_strtod_l+0x418>
 800c8dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8de:	1b3f      	subs	r7, r7, r4
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	bfb4      	ite	lt
 800c8e4:	463b      	movlt	r3, r7
 800c8e6:	2300      	movge	r3, #0
 800c8e8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c8ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8ec:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800cb18 <_strtod_l+0x840>
 800c8f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c8f4:	2400      	movs	r4, #0
 800c8f6:	930d      	str	r3, [sp, #52]	@ 0x34
 800c8f8:	4625      	mov	r5, r4
 800c8fa:	9b07      	ldr	r3, [sp, #28]
 800c8fc:	9805      	ldr	r0, [sp, #20]
 800c8fe:	6859      	ldr	r1, [r3, #4]
 800c900:	f7ff f820 	bl	800b944 <_Balloc>
 800c904:	4606      	mov	r6, r0
 800c906:	2800      	cmp	r0, #0
 800c908:	f43f aef6 	beq.w	800c6f8 <_strtod_l+0x420>
 800c90c:	9b07      	ldr	r3, [sp, #28]
 800c90e:	691a      	ldr	r2, [r3, #16]
 800c910:	ec4b ab19 	vmov	d9, sl, fp
 800c914:	3202      	adds	r2, #2
 800c916:	f103 010c 	add.w	r1, r3, #12
 800c91a:	0092      	lsls	r2, r2, #2
 800c91c:	300c      	adds	r0, #12
 800c91e:	f000 fd33 	bl	800d388 <memcpy>
 800c922:	eeb0 0b49 	vmov.f64	d0, d9
 800c926:	9805      	ldr	r0, [sp, #20]
 800c928:	aa14      	add	r2, sp, #80	@ 0x50
 800c92a:	a913      	add	r1, sp, #76	@ 0x4c
 800c92c:	f7ff fbee 	bl	800c10c <__d2b>
 800c930:	9012      	str	r0, [sp, #72]	@ 0x48
 800c932:	2800      	cmp	r0, #0
 800c934:	f43f aee0 	beq.w	800c6f8 <_strtod_l+0x420>
 800c938:	9805      	ldr	r0, [sp, #20]
 800c93a:	2101      	movs	r1, #1
 800c93c:	f7ff f940 	bl	800bbc0 <__i2b>
 800c940:	4605      	mov	r5, r0
 800c942:	b940      	cbnz	r0, 800c956 <_strtod_l+0x67e>
 800c944:	2500      	movs	r5, #0
 800c946:	e6d7      	b.n	800c6f8 <_strtod_l+0x420>
 800c948:	f04f 31ff 	mov.w	r1, #4294967295
 800c94c:	fa01 f202 	lsl.w	r2, r1, r2
 800c950:	ea02 0a0a 	and.w	sl, r2, sl
 800c954:	e7b0      	b.n	800c8b8 <_strtod_l+0x5e0>
 800c956:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800c958:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c95a:	2f00      	cmp	r7, #0
 800c95c:	bfab      	itete	ge
 800c95e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800c960:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800c962:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800c966:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800c96a:	bfac      	ite	ge
 800c96c:	eb07 0903 	addge.w	r9, r7, r3
 800c970:	eba3 0807 	sublt.w	r8, r3, r7
 800c974:	9b06      	ldr	r3, [sp, #24]
 800c976:	1aff      	subs	r7, r7, r3
 800c978:	4417      	add	r7, r2
 800c97a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800c97e:	4a6b      	ldr	r2, [pc, #428]	@ (800cb2c <_strtod_l+0x854>)
 800c980:	3f01      	subs	r7, #1
 800c982:	4297      	cmp	r7, r2
 800c984:	da51      	bge.n	800ca2a <_strtod_l+0x752>
 800c986:	1bd1      	subs	r1, r2, r7
 800c988:	291f      	cmp	r1, #31
 800c98a:	eba3 0301 	sub.w	r3, r3, r1
 800c98e:	f04f 0201 	mov.w	r2, #1
 800c992:	dc3e      	bgt.n	800ca12 <_strtod_l+0x73a>
 800c994:	408a      	lsls	r2, r1
 800c996:	920c      	str	r2, [sp, #48]	@ 0x30
 800c998:	2200      	movs	r2, #0
 800c99a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c99c:	eb09 0703 	add.w	r7, r9, r3
 800c9a0:	4498      	add	r8, r3
 800c9a2:	9b06      	ldr	r3, [sp, #24]
 800c9a4:	45b9      	cmp	r9, r7
 800c9a6:	4498      	add	r8, r3
 800c9a8:	464b      	mov	r3, r9
 800c9aa:	bfa8      	it	ge
 800c9ac:	463b      	movge	r3, r7
 800c9ae:	4543      	cmp	r3, r8
 800c9b0:	bfa8      	it	ge
 800c9b2:	4643      	movge	r3, r8
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	bfc2      	ittt	gt
 800c9b8:	1aff      	subgt	r7, r7, r3
 800c9ba:	eba8 0803 	subgt.w	r8, r8, r3
 800c9be:	eba9 0903 	subgt.w	r9, r9, r3
 800c9c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	dd16      	ble.n	800c9f6 <_strtod_l+0x71e>
 800c9c8:	4629      	mov	r1, r5
 800c9ca:	9805      	ldr	r0, [sp, #20]
 800c9cc:	461a      	mov	r2, r3
 800c9ce:	f7ff f9b7 	bl	800bd40 <__pow5mult>
 800c9d2:	4605      	mov	r5, r0
 800c9d4:	2800      	cmp	r0, #0
 800c9d6:	d0b5      	beq.n	800c944 <_strtod_l+0x66c>
 800c9d8:	4601      	mov	r1, r0
 800c9da:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c9dc:	9805      	ldr	r0, [sp, #20]
 800c9de:	f7ff f905 	bl	800bbec <__multiply>
 800c9e2:	900f      	str	r0, [sp, #60]	@ 0x3c
 800c9e4:	2800      	cmp	r0, #0
 800c9e6:	f43f ae87 	beq.w	800c6f8 <_strtod_l+0x420>
 800c9ea:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c9ec:	9805      	ldr	r0, [sp, #20]
 800c9ee:	f7fe ffe9 	bl	800b9c4 <_Bfree>
 800c9f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9f4:	9312      	str	r3, [sp, #72]	@ 0x48
 800c9f6:	2f00      	cmp	r7, #0
 800c9f8:	dc1b      	bgt.n	800ca32 <_strtod_l+0x75a>
 800c9fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	dd21      	ble.n	800ca44 <_strtod_l+0x76c>
 800ca00:	4631      	mov	r1, r6
 800ca02:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ca04:	9805      	ldr	r0, [sp, #20]
 800ca06:	f7ff f99b 	bl	800bd40 <__pow5mult>
 800ca0a:	4606      	mov	r6, r0
 800ca0c:	b9d0      	cbnz	r0, 800ca44 <_strtod_l+0x76c>
 800ca0e:	2600      	movs	r6, #0
 800ca10:	e672      	b.n	800c6f8 <_strtod_l+0x420>
 800ca12:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800ca16:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800ca1a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800ca1e:	37e2      	adds	r7, #226	@ 0xe2
 800ca20:	fa02 f107 	lsl.w	r1, r2, r7
 800ca24:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ca26:	920c      	str	r2, [sp, #48]	@ 0x30
 800ca28:	e7b8      	b.n	800c99c <_strtod_l+0x6c4>
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ca2e:	2201      	movs	r2, #1
 800ca30:	e7f9      	b.n	800ca26 <_strtod_l+0x74e>
 800ca32:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ca34:	9805      	ldr	r0, [sp, #20]
 800ca36:	463a      	mov	r2, r7
 800ca38:	f7ff f9dc 	bl	800bdf4 <__lshift>
 800ca3c:	9012      	str	r0, [sp, #72]	@ 0x48
 800ca3e:	2800      	cmp	r0, #0
 800ca40:	d1db      	bne.n	800c9fa <_strtod_l+0x722>
 800ca42:	e659      	b.n	800c6f8 <_strtod_l+0x420>
 800ca44:	f1b8 0f00 	cmp.w	r8, #0
 800ca48:	dd07      	ble.n	800ca5a <_strtod_l+0x782>
 800ca4a:	4631      	mov	r1, r6
 800ca4c:	9805      	ldr	r0, [sp, #20]
 800ca4e:	4642      	mov	r2, r8
 800ca50:	f7ff f9d0 	bl	800bdf4 <__lshift>
 800ca54:	4606      	mov	r6, r0
 800ca56:	2800      	cmp	r0, #0
 800ca58:	d0d9      	beq.n	800ca0e <_strtod_l+0x736>
 800ca5a:	f1b9 0f00 	cmp.w	r9, #0
 800ca5e:	dd08      	ble.n	800ca72 <_strtod_l+0x79a>
 800ca60:	4629      	mov	r1, r5
 800ca62:	9805      	ldr	r0, [sp, #20]
 800ca64:	464a      	mov	r2, r9
 800ca66:	f7ff f9c5 	bl	800bdf4 <__lshift>
 800ca6a:	4605      	mov	r5, r0
 800ca6c:	2800      	cmp	r0, #0
 800ca6e:	f43f ae43 	beq.w	800c6f8 <_strtod_l+0x420>
 800ca72:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ca74:	9805      	ldr	r0, [sp, #20]
 800ca76:	4632      	mov	r2, r6
 800ca78:	f7ff fa44 	bl	800bf04 <__mdiff>
 800ca7c:	4604      	mov	r4, r0
 800ca7e:	2800      	cmp	r0, #0
 800ca80:	f43f ae3a 	beq.w	800c6f8 <_strtod_l+0x420>
 800ca84:	2300      	movs	r3, #0
 800ca86:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800ca8a:	60c3      	str	r3, [r0, #12]
 800ca8c:	4629      	mov	r1, r5
 800ca8e:	f7ff fa1d 	bl	800becc <__mcmp>
 800ca92:	2800      	cmp	r0, #0
 800ca94:	da4e      	bge.n	800cb34 <_strtod_l+0x85c>
 800ca96:	ea58 080a 	orrs.w	r8, r8, sl
 800ca9a:	d174      	bne.n	800cb86 <_strtod_l+0x8ae>
 800ca9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d170      	bne.n	800cb86 <_strtod_l+0x8ae>
 800caa4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800caa8:	0d1b      	lsrs	r3, r3, #20
 800caaa:	051b      	lsls	r3, r3, #20
 800caac:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cab0:	d969      	bls.n	800cb86 <_strtod_l+0x8ae>
 800cab2:	6963      	ldr	r3, [r4, #20]
 800cab4:	b913      	cbnz	r3, 800cabc <_strtod_l+0x7e4>
 800cab6:	6923      	ldr	r3, [r4, #16]
 800cab8:	2b01      	cmp	r3, #1
 800caba:	dd64      	ble.n	800cb86 <_strtod_l+0x8ae>
 800cabc:	4621      	mov	r1, r4
 800cabe:	2201      	movs	r2, #1
 800cac0:	9805      	ldr	r0, [sp, #20]
 800cac2:	f7ff f997 	bl	800bdf4 <__lshift>
 800cac6:	4629      	mov	r1, r5
 800cac8:	4604      	mov	r4, r0
 800caca:	f7ff f9ff 	bl	800becc <__mcmp>
 800cace:	2800      	cmp	r0, #0
 800cad0:	dd59      	ble.n	800cb86 <_strtod_l+0x8ae>
 800cad2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cad6:	9a06      	ldr	r2, [sp, #24]
 800cad8:	0d1b      	lsrs	r3, r3, #20
 800cada:	051b      	lsls	r3, r3, #20
 800cadc:	2a00      	cmp	r2, #0
 800cade:	d070      	beq.n	800cbc2 <_strtod_l+0x8ea>
 800cae0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cae4:	d86d      	bhi.n	800cbc2 <_strtod_l+0x8ea>
 800cae6:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800caea:	f67f ae99 	bls.w	800c820 <_strtod_l+0x548>
 800caee:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800cb20 <_strtod_l+0x848>
 800caf2:	ec4b ab16 	vmov	d6, sl, fp
 800caf6:	4b0e      	ldr	r3, [pc, #56]	@ (800cb30 <_strtod_l+0x858>)
 800caf8:	ee26 7b07 	vmul.f64	d7, d6, d7
 800cafc:	ee17 2a90 	vmov	r2, s15
 800cb00:	4013      	ands	r3, r2
 800cb02:	ec5b ab17 	vmov	sl, fp, d7
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	f47f ae01 	bne.w	800c70e <_strtod_l+0x436>
 800cb0c:	9a05      	ldr	r2, [sp, #20]
 800cb0e:	2322      	movs	r3, #34	@ 0x22
 800cb10:	6013      	str	r3, [r2, #0]
 800cb12:	e5fc      	b.n	800c70e <_strtod_l+0x436>
 800cb14:	f3af 8000 	nop.w
 800cb18:	ffc00000 	.word	0xffc00000
 800cb1c:	41dfffff 	.word	0x41dfffff
 800cb20:	00000000 	.word	0x00000000
 800cb24:	39500000 	.word	0x39500000
 800cb28:	0800e358 	.word	0x0800e358
 800cb2c:	fffffc02 	.word	0xfffffc02
 800cb30:	7ff00000 	.word	0x7ff00000
 800cb34:	46d9      	mov	r9, fp
 800cb36:	d15d      	bne.n	800cbf4 <_strtod_l+0x91c>
 800cb38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cb3c:	f1b8 0f00 	cmp.w	r8, #0
 800cb40:	d02a      	beq.n	800cb98 <_strtod_l+0x8c0>
 800cb42:	4aab      	ldr	r2, [pc, #684]	@ (800cdf0 <_strtod_l+0xb18>)
 800cb44:	4293      	cmp	r3, r2
 800cb46:	d12a      	bne.n	800cb9e <_strtod_l+0x8c6>
 800cb48:	9b06      	ldr	r3, [sp, #24]
 800cb4a:	4652      	mov	r2, sl
 800cb4c:	b1fb      	cbz	r3, 800cb8e <_strtod_l+0x8b6>
 800cb4e:	4ba9      	ldr	r3, [pc, #676]	@ (800cdf4 <_strtod_l+0xb1c>)
 800cb50:	ea0b 0303 	and.w	r3, fp, r3
 800cb54:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800cb58:	f04f 31ff 	mov.w	r1, #4294967295
 800cb5c:	d81a      	bhi.n	800cb94 <_strtod_l+0x8bc>
 800cb5e:	0d1b      	lsrs	r3, r3, #20
 800cb60:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cb64:	fa01 f303 	lsl.w	r3, r1, r3
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d118      	bne.n	800cb9e <_strtod_l+0x8c6>
 800cb6c:	4ba2      	ldr	r3, [pc, #648]	@ (800cdf8 <_strtod_l+0xb20>)
 800cb6e:	4599      	cmp	r9, r3
 800cb70:	d102      	bne.n	800cb78 <_strtod_l+0x8a0>
 800cb72:	3201      	adds	r2, #1
 800cb74:	f43f adc0 	beq.w	800c6f8 <_strtod_l+0x420>
 800cb78:	4b9e      	ldr	r3, [pc, #632]	@ (800cdf4 <_strtod_l+0xb1c>)
 800cb7a:	ea09 0303 	and.w	r3, r9, r3
 800cb7e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800cb82:	f04f 0a00 	mov.w	sl, #0
 800cb86:	9b06      	ldr	r3, [sp, #24]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d1b0      	bne.n	800caee <_strtod_l+0x816>
 800cb8c:	e5bf      	b.n	800c70e <_strtod_l+0x436>
 800cb8e:	f04f 33ff 	mov.w	r3, #4294967295
 800cb92:	e7e9      	b.n	800cb68 <_strtod_l+0x890>
 800cb94:	460b      	mov	r3, r1
 800cb96:	e7e7      	b.n	800cb68 <_strtod_l+0x890>
 800cb98:	ea53 030a 	orrs.w	r3, r3, sl
 800cb9c:	d099      	beq.n	800cad2 <_strtod_l+0x7fa>
 800cb9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cba0:	b1c3      	cbz	r3, 800cbd4 <_strtod_l+0x8fc>
 800cba2:	ea13 0f09 	tst.w	r3, r9
 800cba6:	d0ee      	beq.n	800cb86 <_strtod_l+0x8ae>
 800cba8:	9a06      	ldr	r2, [sp, #24]
 800cbaa:	4650      	mov	r0, sl
 800cbac:	4659      	mov	r1, fp
 800cbae:	f1b8 0f00 	cmp.w	r8, #0
 800cbb2:	d013      	beq.n	800cbdc <_strtod_l+0x904>
 800cbb4:	f7ff fb75 	bl	800c2a2 <sulp>
 800cbb8:	ee39 7b00 	vadd.f64	d7, d9, d0
 800cbbc:	ec5b ab17 	vmov	sl, fp, d7
 800cbc0:	e7e1      	b.n	800cb86 <_strtod_l+0x8ae>
 800cbc2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cbc6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cbca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cbce:	f04f 3aff 	mov.w	sl, #4294967295
 800cbd2:	e7d8      	b.n	800cb86 <_strtod_l+0x8ae>
 800cbd4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cbd6:	ea13 0f0a 	tst.w	r3, sl
 800cbda:	e7e4      	b.n	800cba6 <_strtod_l+0x8ce>
 800cbdc:	f7ff fb61 	bl	800c2a2 <sulp>
 800cbe0:	ee39 0b40 	vsub.f64	d0, d9, d0
 800cbe4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800cbe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbec:	ec5b ab10 	vmov	sl, fp, d0
 800cbf0:	d1c9      	bne.n	800cb86 <_strtod_l+0x8ae>
 800cbf2:	e615      	b.n	800c820 <_strtod_l+0x548>
 800cbf4:	4629      	mov	r1, r5
 800cbf6:	4620      	mov	r0, r4
 800cbf8:	f7ff fae0 	bl	800c1bc <__ratio>
 800cbfc:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800cc00:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800cc04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc08:	d85d      	bhi.n	800ccc6 <_strtod_l+0x9ee>
 800cc0a:	f1b8 0f00 	cmp.w	r8, #0
 800cc0e:	d164      	bne.n	800ccda <_strtod_l+0xa02>
 800cc10:	f1ba 0f00 	cmp.w	sl, #0
 800cc14:	d14b      	bne.n	800ccae <_strtod_l+0x9d6>
 800cc16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc1a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d160      	bne.n	800cce4 <_strtod_l+0xa0c>
 800cc22:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800cc26:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800cc2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc2e:	d401      	bmi.n	800cc34 <_strtod_l+0x95c>
 800cc30:	ee20 8b08 	vmul.f64	d8, d0, d8
 800cc34:	eeb1 ab48 	vneg.f64	d10, d8
 800cc38:	486e      	ldr	r0, [pc, #440]	@ (800cdf4 <_strtod_l+0xb1c>)
 800cc3a:	4970      	ldr	r1, [pc, #448]	@ (800cdfc <_strtod_l+0xb24>)
 800cc3c:	ea09 0700 	and.w	r7, r9, r0
 800cc40:	428f      	cmp	r7, r1
 800cc42:	ec53 2b1a 	vmov	r2, r3, d10
 800cc46:	d17d      	bne.n	800cd44 <_strtod_l+0xa6c>
 800cc48:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800cc4c:	ec4b ab1c 	vmov	d12, sl, fp
 800cc50:	eeb0 0b4c 	vmov.f64	d0, d12
 800cc54:	f7ff f9ea 	bl	800c02c <__ulp>
 800cc58:	4866      	ldr	r0, [pc, #408]	@ (800cdf4 <_strtod_l+0xb1c>)
 800cc5a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800cc5e:	ee1c 3a90 	vmov	r3, s25
 800cc62:	4a67      	ldr	r2, [pc, #412]	@ (800ce00 <_strtod_l+0xb28>)
 800cc64:	ea03 0100 	and.w	r1, r3, r0
 800cc68:	4291      	cmp	r1, r2
 800cc6a:	ec5b ab1c 	vmov	sl, fp, d12
 800cc6e:	d93c      	bls.n	800ccea <_strtod_l+0xa12>
 800cc70:	ee19 2a90 	vmov	r2, s19
 800cc74:	4b60      	ldr	r3, [pc, #384]	@ (800cdf8 <_strtod_l+0xb20>)
 800cc76:	429a      	cmp	r2, r3
 800cc78:	d104      	bne.n	800cc84 <_strtod_l+0x9ac>
 800cc7a:	ee19 3a10 	vmov	r3, s18
 800cc7e:	3301      	adds	r3, #1
 800cc80:	f43f ad3a 	beq.w	800c6f8 <_strtod_l+0x420>
 800cc84:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800cdf8 <_strtod_l+0xb20>
 800cc88:	f04f 3aff 	mov.w	sl, #4294967295
 800cc8c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800cc8e:	9805      	ldr	r0, [sp, #20]
 800cc90:	f7fe fe98 	bl	800b9c4 <_Bfree>
 800cc94:	9805      	ldr	r0, [sp, #20]
 800cc96:	4631      	mov	r1, r6
 800cc98:	f7fe fe94 	bl	800b9c4 <_Bfree>
 800cc9c:	9805      	ldr	r0, [sp, #20]
 800cc9e:	4629      	mov	r1, r5
 800cca0:	f7fe fe90 	bl	800b9c4 <_Bfree>
 800cca4:	9805      	ldr	r0, [sp, #20]
 800cca6:	4621      	mov	r1, r4
 800cca8:	f7fe fe8c 	bl	800b9c4 <_Bfree>
 800ccac:	e625      	b.n	800c8fa <_strtod_l+0x622>
 800ccae:	f1ba 0f01 	cmp.w	sl, #1
 800ccb2:	d103      	bne.n	800ccbc <_strtod_l+0x9e4>
 800ccb4:	f1bb 0f00 	cmp.w	fp, #0
 800ccb8:	f43f adb2 	beq.w	800c820 <_strtod_l+0x548>
 800ccbc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800ccc0:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800ccc4:	e7b8      	b.n	800cc38 <_strtod_l+0x960>
 800ccc6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800ccca:	ee20 8b08 	vmul.f64	d8, d0, d8
 800ccce:	f1b8 0f00 	cmp.w	r8, #0
 800ccd2:	d0af      	beq.n	800cc34 <_strtod_l+0x95c>
 800ccd4:	eeb0 ab48 	vmov.f64	d10, d8
 800ccd8:	e7ae      	b.n	800cc38 <_strtod_l+0x960>
 800ccda:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800ccde:	eeb0 8b4a 	vmov.f64	d8, d10
 800cce2:	e7a9      	b.n	800cc38 <_strtod_l+0x960>
 800cce4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800cce8:	e7a6      	b.n	800cc38 <_strtod_l+0x960>
 800ccea:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ccee:	9b06      	ldr	r3, [sp, #24]
 800ccf0:	46d9      	mov	r9, fp
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d1ca      	bne.n	800cc8c <_strtod_l+0x9b4>
 800ccf6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ccfa:	0d1b      	lsrs	r3, r3, #20
 800ccfc:	051b      	lsls	r3, r3, #20
 800ccfe:	429f      	cmp	r7, r3
 800cd00:	d1c4      	bne.n	800cc8c <_strtod_l+0x9b4>
 800cd02:	ec51 0b18 	vmov	r0, r1, d8
 800cd06:	f7f3 fd17 	bl	8000738 <__aeabi_d2lz>
 800cd0a:	f7f3 fccf 	bl	80006ac <__aeabi_l2d>
 800cd0e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800cd12:	ec41 0b17 	vmov	d7, r0, r1
 800cd16:	ea49 090a 	orr.w	r9, r9, sl
 800cd1a:	ea59 0908 	orrs.w	r9, r9, r8
 800cd1e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800cd22:	d03c      	beq.n	800cd9e <_strtod_l+0xac6>
 800cd24:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800cdd8 <_strtod_l+0xb00>
 800cd28:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800cd2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd30:	f53f aced 	bmi.w	800c70e <_strtod_l+0x436>
 800cd34:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800cde0 <_strtod_l+0xb08>
 800cd38:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800cd3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd40:	dda4      	ble.n	800cc8c <_strtod_l+0x9b4>
 800cd42:	e4e4      	b.n	800c70e <_strtod_l+0x436>
 800cd44:	9906      	ldr	r1, [sp, #24]
 800cd46:	b1e1      	cbz	r1, 800cd82 <_strtod_l+0xaaa>
 800cd48:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800cd4c:	d819      	bhi.n	800cd82 <_strtod_l+0xaaa>
 800cd4e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800cd52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd56:	d811      	bhi.n	800cd7c <_strtod_l+0xaa4>
 800cd58:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800cd5c:	ee18 3a10 	vmov	r3, s16
 800cd60:	2b01      	cmp	r3, #1
 800cd62:	bf38      	it	cc
 800cd64:	2301      	movcc	r3, #1
 800cd66:	ee08 3a10 	vmov	s16, r3
 800cd6a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800cd6e:	f1b8 0f00 	cmp.w	r8, #0
 800cd72:	d111      	bne.n	800cd98 <_strtod_l+0xac0>
 800cd74:	eeb1 7b48 	vneg.f64	d7, d8
 800cd78:	ec53 2b17 	vmov	r2, r3, d7
 800cd7c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800cd80:	1bcb      	subs	r3, r1, r7
 800cd82:	eeb0 0b49 	vmov.f64	d0, d9
 800cd86:	ec43 2b1a 	vmov	d10, r2, r3
 800cd8a:	f7ff f94f 	bl	800c02c <__ulp>
 800cd8e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800cd92:	ec5b ab19 	vmov	sl, fp, d9
 800cd96:	e7aa      	b.n	800ccee <_strtod_l+0xa16>
 800cd98:	eeb0 7b48 	vmov.f64	d7, d8
 800cd9c:	e7ec      	b.n	800cd78 <_strtod_l+0xaa0>
 800cd9e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800cde8 <_strtod_l+0xb10>
 800cda2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800cda6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdaa:	f57f af6f 	bpl.w	800cc8c <_strtod_l+0x9b4>
 800cdae:	e4ae      	b.n	800c70e <_strtod_l+0x436>
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	9308      	str	r3, [sp, #32]
 800cdb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cdb6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cdb8:	6013      	str	r3, [r2, #0]
 800cdba:	f7ff bacc 	b.w	800c356 <_strtod_l+0x7e>
 800cdbe:	2a65      	cmp	r2, #101	@ 0x65
 800cdc0:	f43f abbc 	beq.w	800c53c <_strtod_l+0x264>
 800cdc4:	2a45      	cmp	r2, #69	@ 0x45
 800cdc6:	f43f abb9 	beq.w	800c53c <_strtod_l+0x264>
 800cdca:	2301      	movs	r3, #1
 800cdcc:	9306      	str	r3, [sp, #24]
 800cdce:	f7ff bbf0 	b.w	800c5b2 <_strtod_l+0x2da>
 800cdd2:	bf00      	nop
 800cdd4:	f3af 8000 	nop.w
 800cdd8:	94a03595 	.word	0x94a03595
 800cddc:	3fdfffff 	.word	0x3fdfffff
 800cde0:	35afe535 	.word	0x35afe535
 800cde4:	3fe00000 	.word	0x3fe00000
 800cde8:	94a03595 	.word	0x94a03595
 800cdec:	3fcfffff 	.word	0x3fcfffff
 800cdf0:	000fffff 	.word	0x000fffff
 800cdf4:	7ff00000 	.word	0x7ff00000
 800cdf8:	7fefffff 	.word	0x7fefffff
 800cdfc:	7fe00000 	.word	0x7fe00000
 800ce00:	7c9fffff 	.word	0x7c9fffff

0800ce04 <_strtod_r>:
 800ce04:	4b01      	ldr	r3, [pc, #4]	@ (800ce0c <_strtod_r+0x8>)
 800ce06:	f7ff ba67 	b.w	800c2d8 <_strtod_l>
 800ce0a:	bf00      	nop
 800ce0c:	2400006c 	.word	0x2400006c

0800ce10 <_strtol_l.constprop.0>:
 800ce10:	2b24      	cmp	r3, #36	@ 0x24
 800ce12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce16:	4686      	mov	lr, r0
 800ce18:	4690      	mov	r8, r2
 800ce1a:	d801      	bhi.n	800ce20 <_strtol_l.constprop.0+0x10>
 800ce1c:	2b01      	cmp	r3, #1
 800ce1e:	d106      	bne.n	800ce2e <_strtol_l.constprop.0+0x1e>
 800ce20:	f7fd fe7e 	bl	800ab20 <__errno>
 800ce24:	2316      	movs	r3, #22
 800ce26:	6003      	str	r3, [r0, #0]
 800ce28:	2000      	movs	r0, #0
 800ce2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce2e:	4834      	ldr	r0, [pc, #208]	@ (800cf00 <_strtol_l.constprop.0+0xf0>)
 800ce30:	460d      	mov	r5, r1
 800ce32:	462a      	mov	r2, r5
 800ce34:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce38:	5d06      	ldrb	r6, [r0, r4]
 800ce3a:	f016 0608 	ands.w	r6, r6, #8
 800ce3e:	d1f8      	bne.n	800ce32 <_strtol_l.constprop.0+0x22>
 800ce40:	2c2d      	cmp	r4, #45	@ 0x2d
 800ce42:	d12d      	bne.n	800cea0 <_strtol_l.constprop.0+0x90>
 800ce44:	782c      	ldrb	r4, [r5, #0]
 800ce46:	2601      	movs	r6, #1
 800ce48:	1c95      	adds	r5, r2, #2
 800ce4a:	f033 0210 	bics.w	r2, r3, #16
 800ce4e:	d109      	bne.n	800ce64 <_strtol_l.constprop.0+0x54>
 800ce50:	2c30      	cmp	r4, #48	@ 0x30
 800ce52:	d12a      	bne.n	800ceaa <_strtol_l.constprop.0+0x9a>
 800ce54:	782a      	ldrb	r2, [r5, #0]
 800ce56:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ce5a:	2a58      	cmp	r2, #88	@ 0x58
 800ce5c:	d125      	bne.n	800ceaa <_strtol_l.constprop.0+0x9a>
 800ce5e:	786c      	ldrb	r4, [r5, #1]
 800ce60:	2310      	movs	r3, #16
 800ce62:	3502      	adds	r5, #2
 800ce64:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ce68:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	fbbc f9f3 	udiv	r9, ip, r3
 800ce72:	4610      	mov	r0, r2
 800ce74:	fb03 ca19 	mls	sl, r3, r9, ip
 800ce78:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ce7c:	2f09      	cmp	r7, #9
 800ce7e:	d81b      	bhi.n	800ceb8 <_strtol_l.constprop.0+0xa8>
 800ce80:	463c      	mov	r4, r7
 800ce82:	42a3      	cmp	r3, r4
 800ce84:	dd27      	ble.n	800ced6 <_strtol_l.constprop.0+0xc6>
 800ce86:	1c57      	adds	r7, r2, #1
 800ce88:	d007      	beq.n	800ce9a <_strtol_l.constprop.0+0x8a>
 800ce8a:	4581      	cmp	r9, r0
 800ce8c:	d320      	bcc.n	800ced0 <_strtol_l.constprop.0+0xc0>
 800ce8e:	d101      	bne.n	800ce94 <_strtol_l.constprop.0+0x84>
 800ce90:	45a2      	cmp	sl, r4
 800ce92:	db1d      	blt.n	800ced0 <_strtol_l.constprop.0+0xc0>
 800ce94:	fb00 4003 	mla	r0, r0, r3, r4
 800ce98:	2201      	movs	r2, #1
 800ce9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce9e:	e7eb      	b.n	800ce78 <_strtol_l.constprop.0+0x68>
 800cea0:	2c2b      	cmp	r4, #43	@ 0x2b
 800cea2:	bf04      	itt	eq
 800cea4:	782c      	ldrbeq	r4, [r5, #0]
 800cea6:	1c95      	addeq	r5, r2, #2
 800cea8:	e7cf      	b.n	800ce4a <_strtol_l.constprop.0+0x3a>
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d1da      	bne.n	800ce64 <_strtol_l.constprop.0+0x54>
 800ceae:	2c30      	cmp	r4, #48	@ 0x30
 800ceb0:	bf0c      	ite	eq
 800ceb2:	2308      	moveq	r3, #8
 800ceb4:	230a      	movne	r3, #10
 800ceb6:	e7d5      	b.n	800ce64 <_strtol_l.constprop.0+0x54>
 800ceb8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800cebc:	2f19      	cmp	r7, #25
 800cebe:	d801      	bhi.n	800cec4 <_strtol_l.constprop.0+0xb4>
 800cec0:	3c37      	subs	r4, #55	@ 0x37
 800cec2:	e7de      	b.n	800ce82 <_strtol_l.constprop.0+0x72>
 800cec4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800cec8:	2f19      	cmp	r7, #25
 800ceca:	d804      	bhi.n	800ced6 <_strtol_l.constprop.0+0xc6>
 800cecc:	3c57      	subs	r4, #87	@ 0x57
 800cece:	e7d8      	b.n	800ce82 <_strtol_l.constprop.0+0x72>
 800ced0:	f04f 32ff 	mov.w	r2, #4294967295
 800ced4:	e7e1      	b.n	800ce9a <_strtol_l.constprop.0+0x8a>
 800ced6:	1c53      	adds	r3, r2, #1
 800ced8:	d108      	bne.n	800ceec <_strtol_l.constprop.0+0xdc>
 800ceda:	2322      	movs	r3, #34	@ 0x22
 800cedc:	f8ce 3000 	str.w	r3, [lr]
 800cee0:	4660      	mov	r0, ip
 800cee2:	f1b8 0f00 	cmp.w	r8, #0
 800cee6:	d0a0      	beq.n	800ce2a <_strtol_l.constprop.0+0x1a>
 800cee8:	1e69      	subs	r1, r5, #1
 800ceea:	e006      	b.n	800cefa <_strtol_l.constprop.0+0xea>
 800ceec:	b106      	cbz	r6, 800cef0 <_strtol_l.constprop.0+0xe0>
 800ceee:	4240      	negs	r0, r0
 800cef0:	f1b8 0f00 	cmp.w	r8, #0
 800cef4:	d099      	beq.n	800ce2a <_strtol_l.constprop.0+0x1a>
 800cef6:	2a00      	cmp	r2, #0
 800cef8:	d1f6      	bne.n	800cee8 <_strtol_l.constprop.0+0xd8>
 800cefa:	f8c8 1000 	str.w	r1, [r8]
 800cefe:	e794      	b.n	800ce2a <_strtol_l.constprop.0+0x1a>
 800cf00:	0800e381 	.word	0x0800e381

0800cf04 <_strtol_r>:
 800cf04:	f7ff bf84 	b.w	800ce10 <_strtol_l.constprop.0>

0800cf08 <__ssputs_r>:
 800cf08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf0c:	688e      	ldr	r6, [r1, #8]
 800cf0e:	461f      	mov	r7, r3
 800cf10:	42be      	cmp	r6, r7
 800cf12:	680b      	ldr	r3, [r1, #0]
 800cf14:	4682      	mov	sl, r0
 800cf16:	460c      	mov	r4, r1
 800cf18:	4690      	mov	r8, r2
 800cf1a:	d82d      	bhi.n	800cf78 <__ssputs_r+0x70>
 800cf1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cf20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cf24:	d026      	beq.n	800cf74 <__ssputs_r+0x6c>
 800cf26:	6965      	ldr	r5, [r4, #20]
 800cf28:	6909      	ldr	r1, [r1, #16]
 800cf2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf2e:	eba3 0901 	sub.w	r9, r3, r1
 800cf32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf36:	1c7b      	adds	r3, r7, #1
 800cf38:	444b      	add	r3, r9
 800cf3a:	106d      	asrs	r5, r5, #1
 800cf3c:	429d      	cmp	r5, r3
 800cf3e:	bf38      	it	cc
 800cf40:	461d      	movcc	r5, r3
 800cf42:	0553      	lsls	r3, r2, #21
 800cf44:	d527      	bpl.n	800cf96 <__ssputs_r+0x8e>
 800cf46:	4629      	mov	r1, r5
 800cf48:	f7fe fc70 	bl	800b82c <_malloc_r>
 800cf4c:	4606      	mov	r6, r0
 800cf4e:	b360      	cbz	r0, 800cfaa <__ssputs_r+0xa2>
 800cf50:	6921      	ldr	r1, [r4, #16]
 800cf52:	464a      	mov	r2, r9
 800cf54:	f000 fa18 	bl	800d388 <memcpy>
 800cf58:	89a3      	ldrh	r3, [r4, #12]
 800cf5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cf5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf62:	81a3      	strh	r3, [r4, #12]
 800cf64:	6126      	str	r6, [r4, #16]
 800cf66:	6165      	str	r5, [r4, #20]
 800cf68:	444e      	add	r6, r9
 800cf6a:	eba5 0509 	sub.w	r5, r5, r9
 800cf6e:	6026      	str	r6, [r4, #0]
 800cf70:	60a5      	str	r5, [r4, #8]
 800cf72:	463e      	mov	r6, r7
 800cf74:	42be      	cmp	r6, r7
 800cf76:	d900      	bls.n	800cf7a <__ssputs_r+0x72>
 800cf78:	463e      	mov	r6, r7
 800cf7a:	6820      	ldr	r0, [r4, #0]
 800cf7c:	4632      	mov	r2, r6
 800cf7e:	4641      	mov	r1, r8
 800cf80:	f000 f9c6 	bl	800d310 <memmove>
 800cf84:	68a3      	ldr	r3, [r4, #8]
 800cf86:	1b9b      	subs	r3, r3, r6
 800cf88:	60a3      	str	r3, [r4, #8]
 800cf8a:	6823      	ldr	r3, [r4, #0]
 800cf8c:	4433      	add	r3, r6
 800cf8e:	6023      	str	r3, [r4, #0]
 800cf90:	2000      	movs	r0, #0
 800cf92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf96:	462a      	mov	r2, r5
 800cf98:	f000 fd8b 	bl	800dab2 <_realloc_r>
 800cf9c:	4606      	mov	r6, r0
 800cf9e:	2800      	cmp	r0, #0
 800cfa0:	d1e0      	bne.n	800cf64 <__ssputs_r+0x5c>
 800cfa2:	6921      	ldr	r1, [r4, #16]
 800cfa4:	4650      	mov	r0, sl
 800cfa6:	f7fe fbcd 	bl	800b744 <_free_r>
 800cfaa:	230c      	movs	r3, #12
 800cfac:	f8ca 3000 	str.w	r3, [sl]
 800cfb0:	89a3      	ldrh	r3, [r4, #12]
 800cfb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cfb6:	81a3      	strh	r3, [r4, #12]
 800cfb8:	f04f 30ff 	mov.w	r0, #4294967295
 800cfbc:	e7e9      	b.n	800cf92 <__ssputs_r+0x8a>
	...

0800cfc0 <_svfiprintf_r>:
 800cfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfc4:	4698      	mov	r8, r3
 800cfc6:	898b      	ldrh	r3, [r1, #12]
 800cfc8:	061b      	lsls	r3, r3, #24
 800cfca:	b09d      	sub	sp, #116	@ 0x74
 800cfcc:	4607      	mov	r7, r0
 800cfce:	460d      	mov	r5, r1
 800cfd0:	4614      	mov	r4, r2
 800cfd2:	d510      	bpl.n	800cff6 <_svfiprintf_r+0x36>
 800cfd4:	690b      	ldr	r3, [r1, #16]
 800cfd6:	b973      	cbnz	r3, 800cff6 <_svfiprintf_r+0x36>
 800cfd8:	2140      	movs	r1, #64	@ 0x40
 800cfda:	f7fe fc27 	bl	800b82c <_malloc_r>
 800cfde:	6028      	str	r0, [r5, #0]
 800cfe0:	6128      	str	r0, [r5, #16]
 800cfe2:	b930      	cbnz	r0, 800cff2 <_svfiprintf_r+0x32>
 800cfe4:	230c      	movs	r3, #12
 800cfe6:	603b      	str	r3, [r7, #0]
 800cfe8:	f04f 30ff 	mov.w	r0, #4294967295
 800cfec:	b01d      	add	sp, #116	@ 0x74
 800cfee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cff2:	2340      	movs	r3, #64	@ 0x40
 800cff4:	616b      	str	r3, [r5, #20]
 800cff6:	2300      	movs	r3, #0
 800cff8:	9309      	str	r3, [sp, #36]	@ 0x24
 800cffa:	2320      	movs	r3, #32
 800cffc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d000:	f8cd 800c 	str.w	r8, [sp, #12]
 800d004:	2330      	movs	r3, #48	@ 0x30
 800d006:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d1a4 <_svfiprintf_r+0x1e4>
 800d00a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d00e:	f04f 0901 	mov.w	r9, #1
 800d012:	4623      	mov	r3, r4
 800d014:	469a      	mov	sl, r3
 800d016:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d01a:	b10a      	cbz	r2, 800d020 <_svfiprintf_r+0x60>
 800d01c:	2a25      	cmp	r2, #37	@ 0x25
 800d01e:	d1f9      	bne.n	800d014 <_svfiprintf_r+0x54>
 800d020:	ebba 0b04 	subs.w	fp, sl, r4
 800d024:	d00b      	beq.n	800d03e <_svfiprintf_r+0x7e>
 800d026:	465b      	mov	r3, fp
 800d028:	4622      	mov	r2, r4
 800d02a:	4629      	mov	r1, r5
 800d02c:	4638      	mov	r0, r7
 800d02e:	f7ff ff6b 	bl	800cf08 <__ssputs_r>
 800d032:	3001      	adds	r0, #1
 800d034:	f000 80a7 	beq.w	800d186 <_svfiprintf_r+0x1c6>
 800d038:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d03a:	445a      	add	r2, fp
 800d03c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d03e:	f89a 3000 	ldrb.w	r3, [sl]
 800d042:	2b00      	cmp	r3, #0
 800d044:	f000 809f 	beq.w	800d186 <_svfiprintf_r+0x1c6>
 800d048:	2300      	movs	r3, #0
 800d04a:	f04f 32ff 	mov.w	r2, #4294967295
 800d04e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d052:	f10a 0a01 	add.w	sl, sl, #1
 800d056:	9304      	str	r3, [sp, #16]
 800d058:	9307      	str	r3, [sp, #28]
 800d05a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d05e:	931a      	str	r3, [sp, #104]	@ 0x68
 800d060:	4654      	mov	r4, sl
 800d062:	2205      	movs	r2, #5
 800d064:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d068:	484e      	ldr	r0, [pc, #312]	@ (800d1a4 <_svfiprintf_r+0x1e4>)
 800d06a:	f7f3 f939 	bl	80002e0 <memchr>
 800d06e:	9a04      	ldr	r2, [sp, #16]
 800d070:	b9d8      	cbnz	r0, 800d0aa <_svfiprintf_r+0xea>
 800d072:	06d0      	lsls	r0, r2, #27
 800d074:	bf44      	itt	mi
 800d076:	2320      	movmi	r3, #32
 800d078:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d07c:	0711      	lsls	r1, r2, #28
 800d07e:	bf44      	itt	mi
 800d080:	232b      	movmi	r3, #43	@ 0x2b
 800d082:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d086:	f89a 3000 	ldrb.w	r3, [sl]
 800d08a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d08c:	d015      	beq.n	800d0ba <_svfiprintf_r+0xfa>
 800d08e:	9a07      	ldr	r2, [sp, #28]
 800d090:	4654      	mov	r4, sl
 800d092:	2000      	movs	r0, #0
 800d094:	f04f 0c0a 	mov.w	ip, #10
 800d098:	4621      	mov	r1, r4
 800d09a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d09e:	3b30      	subs	r3, #48	@ 0x30
 800d0a0:	2b09      	cmp	r3, #9
 800d0a2:	d94b      	bls.n	800d13c <_svfiprintf_r+0x17c>
 800d0a4:	b1b0      	cbz	r0, 800d0d4 <_svfiprintf_r+0x114>
 800d0a6:	9207      	str	r2, [sp, #28]
 800d0a8:	e014      	b.n	800d0d4 <_svfiprintf_r+0x114>
 800d0aa:	eba0 0308 	sub.w	r3, r0, r8
 800d0ae:	fa09 f303 	lsl.w	r3, r9, r3
 800d0b2:	4313      	orrs	r3, r2
 800d0b4:	9304      	str	r3, [sp, #16]
 800d0b6:	46a2      	mov	sl, r4
 800d0b8:	e7d2      	b.n	800d060 <_svfiprintf_r+0xa0>
 800d0ba:	9b03      	ldr	r3, [sp, #12]
 800d0bc:	1d19      	adds	r1, r3, #4
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	9103      	str	r1, [sp, #12]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	bfbb      	ittet	lt
 800d0c6:	425b      	neglt	r3, r3
 800d0c8:	f042 0202 	orrlt.w	r2, r2, #2
 800d0cc:	9307      	strge	r3, [sp, #28]
 800d0ce:	9307      	strlt	r3, [sp, #28]
 800d0d0:	bfb8      	it	lt
 800d0d2:	9204      	strlt	r2, [sp, #16]
 800d0d4:	7823      	ldrb	r3, [r4, #0]
 800d0d6:	2b2e      	cmp	r3, #46	@ 0x2e
 800d0d8:	d10a      	bne.n	800d0f0 <_svfiprintf_r+0x130>
 800d0da:	7863      	ldrb	r3, [r4, #1]
 800d0dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0de:	d132      	bne.n	800d146 <_svfiprintf_r+0x186>
 800d0e0:	9b03      	ldr	r3, [sp, #12]
 800d0e2:	1d1a      	adds	r2, r3, #4
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	9203      	str	r2, [sp, #12]
 800d0e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d0ec:	3402      	adds	r4, #2
 800d0ee:	9305      	str	r3, [sp, #20]
 800d0f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d1b4 <_svfiprintf_r+0x1f4>
 800d0f4:	7821      	ldrb	r1, [r4, #0]
 800d0f6:	2203      	movs	r2, #3
 800d0f8:	4650      	mov	r0, sl
 800d0fa:	f7f3 f8f1 	bl	80002e0 <memchr>
 800d0fe:	b138      	cbz	r0, 800d110 <_svfiprintf_r+0x150>
 800d100:	9b04      	ldr	r3, [sp, #16]
 800d102:	eba0 000a 	sub.w	r0, r0, sl
 800d106:	2240      	movs	r2, #64	@ 0x40
 800d108:	4082      	lsls	r2, r0
 800d10a:	4313      	orrs	r3, r2
 800d10c:	3401      	adds	r4, #1
 800d10e:	9304      	str	r3, [sp, #16]
 800d110:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d114:	4824      	ldr	r0, [pc, #144]	@ (800d1a8 <_svfiprintf_r+0x1e8>)
 800d116:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d11a:	2206      	movs	r2, #6
 800d11c:	f7f3 f8e0 	bl	80002e0 <memchr>
 800d120:	2800      	cmp	r0, #0
 800d122:	d036      	beq.n	800d192 <_svfiprintf_r+0x1d2>
 800d124:	4b21      	ldr	r3, [pc, #132]	@ (800d1ac <_svfiprintf_r+0x1ec>)
 800d126:	bb1b      	cbnz	r3, 800d170 <_svfiprintf_r+0x1b0>
 800d128:	9b03      	ldr	r3, [sp, #12]
 800d12a:	3307      	adds	r3, #7
 800d12c:	f023 0307 	bic.w	r3, r3, #7
 800d130:	3308      	adds	r3, #8
 800d132:	9303      	str	r3, [sp, #12]
 800d134:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d136:	4433      	add	r3, r6
 800d138:	9309      	str	r3, [sp, #36]	@ 0x24
 800d13a:	e76a      	b.n	800d012 <_svfiprintf_r+0x52>
 800d13c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d140:	460c      	mov	r4, r1
 800d142:	2001      	movs	r0, #1
 800d144:	e7a8      	b.n	800d098 <_svfiprintf_r+0xd8>
 800d146:	2300      	movs	r3, #0
 800d148:	3401      	adds	r4, #1
 800d14a:	9305      	str	r3, [sp, #20]
 800d14c:	4619      	mov	r1, r3
 800d14e:	f04f 0c0a 	mov.w	ip, #10
 800d152:	4620      	mov	r0, r4
 800d154:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d158:	3a30      	subs	r2, #48	@ 0x30
 800d15a:	2a09      	cmp	r2, #9
 800d15c:	d903      	bls.n	800d166 <_svfiprintf_r+0x1a6>
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d0c6      	beq.n	800d0f0 <_svfiprintf_r+0x130>
 800d162:	9105      	str	r1, [sp, #20]
 800d164:	e7c4      	b.n	800d0f0 <_svfiprintf_r+0x130>
 800d166:	fb0c 2101 	mla	r1, ip, r1, r2
 800d16a:	4604      	mov	r4, r0
 800d16c:	2301      	movs	r3, #1
 800d16e:	e7f0      	b.n	800d152 <_svfiprintf_r+0x192>
 800d170:	ab03      	add	r3, sp, #12
 800d172:	9300      	str	r3, [sp, #0]
 800d174:	462a      	mov	r2, r5
 800d176:	4b0e      	ldr	r3, [pc, #56]	@ (800d1b0 <_svfiprintf_r+0x1f0>)
 800d178:	a904      	add	r1, sp, #16
 800d17a:	4638      	mov	r0, r7
 800d17c:	f7fc fda4 	bl	8009cc8 <_printf_float>
 800d180:	1c42      	adds	r2, r0, #1
 800d182:	4606      	mov	r6, r0
 800d184:	d1d6      	bne.n	800d134 <_svfiprintf_r+0x174>
 800d186:	89ab      	ldrh	r3, [r5, #12]
 800d188:	065b      	lsls	r3, r3, #25
 800d18a:	f53f af2d 	bmi.w	800cfe8 <_svfiprintf_r+0x28>
 800d18e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d190:	e72c      	b.n	800cfec <_svfiprintf_r+0x2c>
 800d192:	ab03      	add	r3, sp, #12
 800d194:	9300      	str	r3, [sp, #0]
 800d196:	462a      	mov	r2, r5
 800d198:	4b05      	ldr	r3, [pc, #20]	@ (800d1b0 <_svfiprintf_r+0x1f0>)
 800d19a:	a904      	add	r1, sp, #16
 800d19c:	4638      	mov	r0, r7
 800d19e:	f7fd f81b 	bl	800a1d8 <_printf_i>
 800d1a2:	e7ed      	b.n	800d180 <_svfiprintf_r+0x1c0>
 800d1a4:	0800e481 	.word	0x0800e481
 800d1a8:	0800e48b 	.word	0x0800e48b
 800d1ac:	08009cc9 	.word	0x08009cc9
 800d1b0:	0800cf09 	.word	0x0800cf09
 800d1b4:	0800e487 	.word	0x0800e487

0800d1b8 <__sflush_r>:
 800d1b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1c0:	0716      	lsls	r6, r2, #28
 800d1c2:	4605      	mov	r5, r0
 800d1c4:	460c      	mov	r4, r1
 800d1c6:	d454      	bmi.n	800d272 <__sflush_r+0xba>
 800d1c8:	684b      	ldr	r3, [r1, #4]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	dc02      	bgt.n	800d1d4 <__sflush_r+0x1c>
 800d1ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	dd48      	ble.n	800d266 <__sflush_r+0xae>
 800d1d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d1d6:	2e00      	cmp	r6, #0
 800d1d8:	d045      	beq.n	800d266 <__sflush_r+0xae>
 800d1da:	2300      	movs	r3, #0
 800d1dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d1e0:	682f      	ldr	r7, [r5, #0]
 800d1e2:	6a21      	ldr	r1, [r4, #32]
 800d1e4:	602b      	str	r3, [r5, #0]
 800d1e6:	d030      	beq.n	800d24a <__sflush_r+0x92>
 800d1e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d1ea:	89a3      	ldrh	r3, [r4, #12]
 800d1ec:	0759      	lsls	r1, r3, #29
 800d1ee:	d505      	bpl.n	800d1fc <__sflush_r+0x44>
 800d1f0:	6863      	ldr	r3, [r4, #4]
 800d1f2:	1ad2      	subs	r2, r2, r3
 800d1f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d1f6:	b10b      	cbz	r3, 800d1fc <__sflush_r+0x44>
 800d1f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d1fa:	1ad2      	subs	r2, r2, r3
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d200:	6a21      	ldr	r1, [r4, #32]
 800d202:	4628      	mov	r0, r5
 800d204:	47b0      	blx	r6
 800d206:	1c43      	adds	r3, r0, #1
 800d208:	89a3      	ldrh	r3, [r4, #12]
 800d20a:	d106      	bne.n	800d21a <__sflush_r+0x62>
 800d20c:	6829      	ldr	r1, [r5, #0]
 800d20e:	291d      	cmp	r1, #29
 800d210:	d82b      	bhi.n	800d26a <__sflush_r+0xb2>
 800d212:	4a2a      	ldr	r2, [pc, #168]	@ (800d2bc <__sflush_r+0x104>)
 800d214:	410a      	asrs	r2, r1
 800d216:	07d6      	lsls	r6, r2, #31
 800d218:	d427      	bmi.n	800d26a <__sflush_r+0xb2>
 800d21a:	2200      	movs	r2, #0
 800d21c:	6062      	str	r2, [r4, #4]
 800d21e:	04d9      	lsls	r1, r3, #19
 800d220:	6922      	ldr	r2, [r4, #16]
 800d222:	6022      	str	r2, [r4, #0]
 800d224:	d504      	bpl.n	800d230 <__sflush_r+0x78>
 800d226:	1c42      	adds	r2, r0, #1
 800d228:	d101      	bne.n	800d22e <__sflush_r+0x76>
 800d22a:	682b      	ldr	r3, [r5, #0]
 800d22c:	b903      	cbnz	r3, 800d230 <__sflush_r+0x78>
 800d22e:	6560      	str	r0, [r4, #84]	@ 0x54
 800d230:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d232:	602f      	str	r7, [r5, #0]
 800d234:	b1b9      	cbz	r1, 800d266 <__sflush_r+0xae>
 800d236:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d23a:	4299      	cmp	r1, r3
 800d23c:	d002      	beq.n	800d244 <__sflush_r+0x8c>
 800d23e:	4628      	mov	r0, r5
 800d240:	f7fe fa80 	bl	800b744 <_free_r>
 800d244:	2300      	movs	r3, #0
 800d246:	6363      	str	r3, [r4, #52]	@ 0x34
 800d248:	e00d      	b.n	800d266 <__sflush_r+0xae>
 800d24a:	2301      	movs	r3, #1
 800d24c:	4628      	mov	r0, r5
 800d24e:	47b0      	blx	r6
 800d250:	4602      	mov	r2, r0
 800d252:	1c50      	adds	r0, r2, #1
 800d254:	d1c9      	bne.n	800d1ea <__sflush_r+0x32>
 800d256:	682b      	ldr	r3, [r5, #0]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d0c6      	beq.n	800d1ea <__sflush_r+0x32>
 800d25c:	2b1d      	cmp	r3, #29
 800d25e:	d001      	beq.n	800d264 <__sflush_r+0xac>
 800d260:	2b16      	cmp	r3, #22
 800d262:	d11e      	bne.n	800d2a2 <__sflush_r+0xea>
 800d264:	602f      	str	r7, [r5, #0]
 800d266:	2000      	movs	r0, #0
 800d268:	e022      	b.n	800d2b0 <__sflush_r+0xf8>
 800d26a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d26e:	b21b      	sxth	r3, r3
 800d270:	e01b      	b.n	800d2aa <__sflush_r+0xf2>
 800d272:	690f      	ldr	r7, [r1, #16]
 800d274:	2f00      	cmp	r7, #0
 800d276:	d0f6      	beq.n	800d266 <__sflush_r+0xae>
 800d278:	0793      	lsls	r3, r2, #30
 800d27a:	680e      	ldr	r6, [r1, #0]
 800d27c:	bf08      	it	eq
 800d27e:	694b      	ldreq	r3, [r1, #20]
 800d280:	600f      	str	r7, [r1, #0]
 800d282:	bf18      	it	ne
 800d284:	2300      	movne	r3, #0
 800d286:	eba6 0807 	sub.w	r8, r6, r7
 800d28a:	608b      	str	r3, [r1, #8]
 800d28c:	f1b8 0f00 	cmp.w	r8, #0
 800d290:	dde9      	ble.n	800d266 <__sflush_r+0xae>
 800d292:	6a21      	ldr	r1, [r4, #32]
 800d294:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d296:	4643      	mov	r3, r8
 800d298:	463a      	mov	r2, r7
 800d29a:	4628      	mov	r0, r5
 800d29c:	47b0      	blx	r6
 800d29e:	2800      	cmp	r0, #0
 800d2a0:	dc08      	bgt.n	800d2b4 <__sflush_r+0xfc>
 800d2a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d2aa:	81a3      	strh	r3, [r4, #12]
 800d2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2b4:	4407      	add	r7, r0
 800d2b6:	eba8 0800 	sub.w	r8, r8, r0
 800d2ba:	e7e7      	b.n	800d28c <__sflush_r+0xd4>
 800d2bc:	dfbffffe 	.word	0xdfbffffe

0800d2c0 <_fflush_r>:
 800d2c0:	b538      	push	{r3, r4, r5, lr}
 800d2c2:	690b      	ldr	r3, [r1, #16]
 800d2c4:	4605      	mov	r5, r0
 800d2c6:	460c      	mov	r4, r1
 800d2c8:	b913      	cbnz	r3, 800d2d0 <_fflush_r+0x10>
 800d2ca:	2500      	movs	r5, #0
 800d2cc:	4628      	mov	r0, r5
 800d2ce:	bd38      	pop	{r3, r4, r5, pc}
 800d2d0:	b118      	cbz	r0, 800d2da <_fflush_r+0x1a>
 800d2d2:	6a03      	ldr	r3, [r0, #32]
 800d2d4:	b90b      	cbnz	r3, 800d2da <_fflush_r+0x1a>
 800d2d6:	f7fd fb37 	bl	800a948 <__sinit>
 800d2da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d0f3      	beq.n	800d2ca <_fflush_r+0xa>
 800d2e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d2e4:	07d0      	lsls	r0, r2, #31
 800d2e6:	d404      	bmi.n	800d2f2 <_fflush_r+0x32>
 800d2e8:	0599      	lsls	r1, r3, #22
 800d2ea:	d402      	bmi.n	800d2f2 <_fflush_r+0x32>
 800d2ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d2ee:	f7fd fc42 	bl	800ab76 <__retarget_lock_acquire_recursive>
 800d2f2:	4628      	mov	r0, r5
 800d2f4:	4621      	mov	r1, r4
 800d2f6:	f7ff ff5f 	bl	800d1b8 <__sflush_r>
 800d2fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d2fc:	07da      	lsls	r2, r3, #31
 800d2fe:	4605      	mov	r5, r0
 800d300:	d4e4      	bmi.n	800d2cc <_fflush_r+0xc>
 800d302:	89a3      	ldrh	r3, [r4, #12]
 800d304:	059b      	lsls	r3, r3, #22
 800d306:	d4e1      	bmi.n	800d2cc <_fflush_r+0xc>
 800d308:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d30a:	f7fd fc35 	bl	800ab78 <__retarget_lock_release_recursive>
 800d30e:	e7dd      	b.n	800d2cc <_fflush_r+0xc>

0800d310 <memmove>:
 800d310:	4288      	cmp	r0, r1
 800d312:	b510      	push	{r4, lr}
 800d314:	eb01 0402 	add.w	r4, r1, r2
 800d318:	d902      	bls.n	800d320 <memmove+0x10>
 800d31a:	4284      	cmp	r4, r0
 800d31c:	4623      	mov	r3, r4
 800d31e:	d807      	bhi.n	800d330 <memmove+0x20>
 800d320:	1e43      	subs	r3, r0, #1
 800d322:	42a1      	cmp	r1, r4
 800d324:	d008      	beq.n	800d338 <memmove+0x28>
 800d326:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d32a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d32e:	e7f8      	b.n	800d322 <memmove+0x12>
 800d330:	4402      	add	r2, r0
 800d332:	4601      	mov	r1, r0
 800d334:	428a      	cmp	r2, r1
 800d336:	d100      	bne.n	800d33a <memmove+0x2a>
 800d338:	bd10      	pop	{r4, pc}
 800d33a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d33e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d342:	e7f7      	b.n	800d334 <memmove+0x24>

0800d344 <strncmp>:
 800d344:	b510      	push	{r4, lr}
 800d346:	b16a      	cbz	r2, 800d364 <strncmp+0x20>
 800d348:	3901      	subs	r1, #1
 800d34a:	1884      	adds	r4, r0, r2
 800d34c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d350:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d354:	429a      	cmp	r2, r3
 800d356:	d103      	bne.n	800d360 <strncmp+0x1c>
 800d358:	42a0      	cmp	r0, r4
 800d35a:	d001      	beq.n	800d360 <strncmp+0x1c>
 800d35c:	2a00      	cmp	r2, #0
 800d35e:	d1f5      	bne.n	800d34c <strncmp+0x8>
 800d360:	1ad0      	subs	r0, r2, r3
 800d362:	bd10      	pop	{r4, pc}
 800d364:	4610      	mov	r0, r2
 800d366:	e7fc      	b.n	800d362 <strncmp+0x1e>

0800d368 <_sbrk_r>:
 800d368:	b538      	push	{r3, r4, r5, lr}
 800d36a:	4d06      	ldr	r5, [pc, #24]	@ (800d384 <_sbrk_r+0x1c>)
 800d36c:	2300      	movs	r3, #0
 800d36e:	4604      	mov	r4, r0
 800d370:	4608      	mov	r0, r1
 800d372:	602b      	str	r3, [r5, #0]
 800d374:	f7f4 f8e4 	bl	8001540 <_sbrk>
 800d378:	1c43      	adds	r3, r0, #1
 800d37a:	d102      	bne.n	800d382 <_sbrk_r+0x1a>
 800d37c:	682b      	ldr	r3, [r5, #0]
 800d37e:	b103      	cbz	r3, 800d382 <_sbrk_r+0x1a>
 800d380:	6023      	str	r3, [r4, #0]
 800d382:	bd38      	pop	{r3, r4, r5, pc}
 800d384:	24000494 	.word	0x24000494

0800d388 <memcpy>:
 800d388:	440a      	add	r2, r1
 800d38a:	4291      	cmp	r1, r2
 800d38c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d390:	d100      	bne.n	800d394 <memcpy+0xc>
 800d392:	4770      	bx	lr
 800d394:	b510      	push	{r4, lr}
 800d396:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d39a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d39e:	4291      	cmp	r1, r2
 800d3a0:	d1f9      	bne.n	800d396 <memcpy+0xe>
 800d3a2:	bd10      	pop	{r4, pc}
 800d3a4:	0000      	movs	r0, r0
	...

0800d3a8 <nan>:
 800d3a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d3b0 <nan+0x8>
 800d3ac:	4770      	bx	lr
 800d3ae:	bf00      	nop
 800d3b0:	00000000 	.word	0x00000000
 800d3b4:	7ff80000 	.word	0x7ff80000

0800d3b8 <__assert_func>:
 800d3b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d3ba:	4614      	mov	r4, r2
 800d3bc:	461a      	mov	r2, r3
 800d3be:	4b09      	ldr	r3, [pc, #36]	@ (800d3e4 <__assert_func+0x2c>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	4605      	mov	r5, r0
 800d3c4:	68d8      	ldr	r0, [r3, #12]
 800d3c6:	b954      	cbnz	r4, 800d3de <__assert_func+0x26>
 800d3c8:	4b07      	ldr	r3, [pc, #28]	@ (800d3e8 <__assert_func+0x30>)
 800d3ca:	461c      	mov	r4, r3
 800d3cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d3d0:	9100      	str	r1, [sp, #0]
 800d3d2:	462b      	mov	r3, r5
 800d3d4:	4905      	ldr	r1, [pc, #20]	@ (800d3ec <__assert_func+0x34>)
 800d3d6:	f000 fba7 	bl	800db28 <fiprintf>
 800d3da:	f000 fbb7 	bl	800db4c <abort>
 800d3de:	4b04      	ldr	r3, [pc, #16]	@ (800d3f0 <__assert_func+0x38>)
 800d3e0:	e7f4      	b.n	800d3cc <__assert_func+0x14>
 800d3e2:	bf00      	nop
 800d3e4:	2400001c 	.word	0x2400001c
 800d3e8:	0800e4d5 	.word	0x0800e4d5
 800d3ec:	0800e4a7 	.word	0x0800e4a7
 800d3f0:	0800e49a 	.word	0x0800e49a

0800d3f4 <_calloc_r>:
 800d3f4:	b570      	push	{r4, r5, r6, lr}
 800d3f6:	fba1 5402 	umull	r5, r4, r1, r2
 800d3fa:	b93c      	cbnz	r4, 800d40c <_calloc_r+0x18>
 800d3fc:	4629      	mov	r1, r5
 800d3fe:	f7fe fa15 	bl	800b82c <_malloc_r>
 800d402:	4606      	mov	r6, r0
 800d404:	b928      	cbnz	r0, 800d412 <_calloc_r+0x1e>
 800d406:	2600      	movs	r6, #0
 800d408:	4630      	mov	r0, r6
 800d40a:	bd70      	pop	{r4, r5, r6, pc}
 800d40c:	220c      	movs	r2, #12
 800d40e:	6002      	str	r2, [r0, #0]
 800d410:	e7f9      	b.n	800d406 <_calloc_r+0x12>
 800d412:	462a      	mov	r2, r5
 800d414:	4621      	mov	r1, r4
 800d416:	f7fd fb30 	bl	800aa7a <memset>
 800d41a:	e7f5      	b.n	800d408 <_calloc_r+0x14>

0800d41c <rshift>:
 800d41c:	6903      	ldr	r3, [r0, #16]
 800d41e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d422:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d426:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d42a:	f100 0414 	add.w	r4, r0, #20
 800d42e:	dd45      	ble.n	800d4bc <rshift+0xa0>
 800d430:	f011 011f 	ands.w	r1, r1, #31
 800d434:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d438:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d43c:	d10c      	bne.n	800d458 <rshift+0x3c>
 800d43e:	f100 0710 	add.w	r7, r0, #16
 800d442:	4629      	mov	r1, r5
 800d444:	42b1      	cmp	r1, r6
 800d446:	d334      	bcc.n	800d4b2 <rshift+0x96>
 800d448:	1a9b      	subs	r3, r3, r2
 800d44a:	009b      	lsls	r3, r3, #2
 800d44c:	1eea      	subs	r2, r5, #3
 800d44e:	4296      	cmp	r6, r2
 800d450:	bf38      	it	cc
 800d452:	2300      	movcc	r3, #0
 800d454:	4423      	add	r3, r4
 800d456:	e015      	b.n	800d484 <rshift+0x68>
 800d458:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d45c:	f1c1 0820 	rsb	r8, r1, #32
 800d460:	40cf      	lsrs	r7, r1
 800d462:	f105 0e04 	add.w	lr, r5, #4
 800d466:	46a1      	mov	r9, r4
 800d468:	4576      	cmp	r6, lr
 800d46a:	46f4      	mov	ip, lr
 800d46c:	d815      	bhi.n	800d49a <rshift+0x7e>
 800d46e:	1a9a      	subs	r2, r3, r2
 800d470:	0092      	lsls	r2, r2, #2
 800d472:	3a04      	subs	r2, #4
 800d474:	3501      	adds	r5, #1
 800d476:	42ae      	cmp	r6, r5
 800d478:	bf38      	it	cc
 800d47a:	2200      	movcc	r2, #0
 800d47c:	18a3      	adds	r3, r4, r2
 800d47e:	50a7      	str	r7, [r4, r2]
 800d480:	b107      	cbz	r7, 800d484 <rshift+0x68>
 800d482:	3304      	adds	r3, #4
 800d484:	1b1a      	subs	r2, r3, r4
 800d486:	42a3      	cmp	r3, r4
 800d488:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d48c:	bf08      	it	eq
 800d48e:	2300      	moveq	r3, #0
 800d490:	6102      	str	r2, [r0, #16]
 800d492:	bf08      	it	eq
 800d494:	6143      	streq	r3, [r0, #20]
 800d496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d49a:	f8dc c000 	ldr.w	ip, [ip]
 800d49e:	fa0c fc08 	lsl.w	ip, ip, r8
 800d4a2:	ea4c 0707 	orr.w	r7, ip, r7
 800d4a6:	f849 7b04 	str.w	r7, [r9], #4
 800d4aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d4ae:	40cf      	lsrs	r7, r1
 800d4b0:	e7da      	b.n	800d468 <rshift+0x4c>
 800d4b2:	f851 cb04 	ldr.w	ip, [r1], #4
 800d4b6:	f847 cf04 	str.w	ip, [r7, #4]!
 800d4ba:	e7c3      	b.n	800d444 <rshift+0x28>
 800d4bc:	4623      	mov	r3, r4
 800d4be:	e7e1      	b.n	800d484 <rshift+0x68>

0800d4c0 <__hexdig_fun>:
 800d4c0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d4c4:	2b09      	cmp	r3, #9
 800d4c6:	d802      	bhi.n	800d4ce <__hexdig_fun+0xe>
 800d4c8:	3820      	subs	r0, #32
 800d4ca:	b2c0      	uxtb	r0, r0
 800d4cc:	4770      	bx	lr
 800d4ce:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d4d2:	2b05      	cmp	r3, #5
 800d4d4:	d801      	bhi.n	800d4da <__hexdig_fun+0x1a>
 800d4d6:	3847      	subs	r0, #71	@ 0x47
 800d4d8:	e7f7      	b.n	800d4ca <__hexdig_fun+0xa>
 800d4da:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d4de:	2b05      	cmp	r3, #5
 800d4e0:	d801      	bhi.n	800d4e6 <__hexdig_fun+0x26>
 800d4e2:	3827      	subs	r0, #39	@ 0x27
 800d4e4:	e7f1      	b.n	800d4ca <__hexdig_fun+0xa>
 800d4e6:	2000      	movs	r0, #0
 800d4e8:	4770      	bx	lr
	...

0800d4ec <__gethex>:
 800d4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4f0:	b085      	sub	sp, #20
 800d4f2:	468a      	mov	sl, r1
 800d4f4:	9302      	str	r3, [sp, #8]
 800d4f6:	680b      	ldr	r3, [r1, #0]
 800d4f8:	9001      	str	r0, [sp, #4]
 800d4fa:	4690      	mov	r8, r2
 800d4fc:	1c9c      	adds	r4, r3, #2
 800d4fe:	46a1      	mov	r9, r4
 800d500:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d504:	2830      	cmp	r0, #48	@ 0x30
 800d506:	d0fa      	beq.n	800d4fe <__gethex+0x12>
 800d508:	eba9 0303 	sub.w	r3, r9, r3
 800d50c:	f1a3 0b02 	sub.w	fp, r3, #2
 800d510:	f7ff ffd6 	bl	800d4c0 <__hexdig_fun>
 800d514:	4605      	mov	r5, r0
 800d516:	2800      	cmp	r0, #0
 800d518:	d168      	bne.n	800d5ec <__gethex+0x100>
 800d51a:	49a0      	ldr	r1, [pc, #640]	@ (800d79c <__gethex+0x2b0>)
 800d51c:	2201      	movs	r2, #1
 800d51e:	4648      	mov	r0, r9
 800d520:	f7ff ff10 	bl	800d344 <strncmp>
 800d524:	4607      	mov	r7, r0
 800d526:	2800      	cmp	r0, #0
 800d528:	d167      	bne.n	800d5fa <__gethex+0x10e>
 800d52a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d52e:	4626      	mov	r6, r4
 800d530:	f7ff ffc6 	bl	800d4c0 <__hexdig_fun>
 800d534:	2800      	cmp	r0, #0
 800d536:	d062      	beq.n	800d5fe <__gethex+0x112>
 800d538:	4623      	mov	r3, r4
 800d53a:	7818      	ldrb	r0, [r3, #0]
 800d53c:	2830      	cmp	r0, #48	@ 0x30
 800d53e:	4699      	mov	r9, r3
 800d540:	f103 0301 	add.w	r3, r3, #1
 800d544:	d0f9      	beq.n	800d53a <__gethex+0x4e>
 800d546:	f7ff ffbb 	bl	800d4c0 <__hexdig_fun>
 800d54a:	fab0 f580 	clz	r5, r0
 800d54e:	096d      	lsrs	r5, r5, #5
 800d550:	f04f 0b01 	mov.w	fp, #1
 800d554:	464a      	mov	r2, r9
 800d556:	4616      	mov	r6, r2
 800d558:	3201      	adds	r2, #1
 800d55a:	7830      	ldrb	r0, [r6, #0]
 800d55c:	f7ff ffb0 	bl	800d4c0 <__hexdig_fun>
 800d560:	2800      	cmp	r0, #0
 800d562:	d1f8      	bne.n	800d556 <__gethex+0x6a>
 800d564:	498d      	ldr	r1, [pc, #564]	@ (800d79c <__gethex+0x2b0>)
 800d566:	2201      	movs	r2, #1
 800d568:	4630      	mov	r0, r6
 800d56a:	f7ff feeb 	bl	800d344 <strncmp>
 800d56e:	2800      	cmp	r0, #0
 800d570:	d13f      	bne.n	800d5f2 <__gethex+0x106>
 800d572:	b944      	cbnz	r4, 800d586 <__gethex+0x9a>
 800d574:	1c74      	adds	r4, r6, #1
 800d576:	4622      	mov	r2, r4
 800d578:	4616      	mov	r6, r2
 800d57a:	3201      	adds	r2, #1
 800d57c:	7830      	ldrb	r0, [r6, #0]
 800d57e:	f7ff ff9f 	bl	800d4c0 <__hexdig_fun>
 800d582:	2800      	cmp	r0, #0
 800d584:	d1f8      	bne.n	800d578 <__gethex+0x8c>
 800d586:	1ba4      	subs	r4, r4, r6
 800d588:	00a7      	lsls	r7, r4, #2
 800d58a:	7833      	ldrb	r3, [r6, #0]
 800d58c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d590:	2b50      	cmp	r3, #80	@ 0x50
 800d592:	d13e      	bne.n	800d612 <__gethex+0x126>
 800d594:	7873      	ldrb	r3, [r6, #1]
 800d596:	2b2b      	cmp	r3, #43	@ 0x2b
 800d598:	d033      	beq.n	800d602 <__gethex+0x116>
 800d59a:	2b2d      	cmp	r3, #45	@ 0x2d
 800d59c:	d034      	beq.n	800d608 <__gethex+0x11c>
 800d59e:	1c71      	adds	r1, r6, #1
 800d5a0:	2400      	movs	r4, #0
 800d5a2:	7808      	ldrb	r0, [r1, #0]
 800d5a4:	f7ff ff8c 	bl	800d4c0 <__hexdig_fun>
 800d5a8:	1e43      	subs	r3, r0, #1
 800d5aa:	b2db      	uxtb	r3, r3
 800d5ac:	2b18      	cmp	r3, #24
 800d5ae:	d830      	bhi.n	800d612 <__gethex+0x126>
 800d5b0:	f1a0 0210 	sub.w	r2, r0, #16
 800d5b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d5b8:	f7ff ff82 	bl	800d4c0 <__hexdig_fun>
 800d5bc:	f100 3cff 	add.w	ip, r0, #4294967295
 800d5c0:	fa5f fc8c 	uxtb.w	ip, ip
 800d5c4:	f1bc 0f18 	cmp.w	ip, #24
 800d5c8:	f04f 030a 	mov.w	r3, #10
 800d5cc:	d91e      	bls.n	800d60c <__gethex+0x120>
 800d5ce:	b104      	cbz	r4, 800d5d2 <__gethex+0xe6>
 800d5d0:	4252      	negs	r2, r2
 800d5d2:	4417      	add	r7, r2
 800d5d4:	f8ca 1000 	str.w	r1, [sl]
 800d5d8:	b1ed      	cbz	r5, 800d616 <__gethex+0x12a>
 800d5da:	f1bb 0f00 	cmp.w	fp, #0
 800d5de:	bf0c      	ite	eq
 800d5e0:	2506      	moveq	r5, #6
 800d5e2:	2500      	movne	r5, #0
 800d5e4:	4628      	mov	r0, r5
 800d5e6:	b005      	add	sp, #20
 800d5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ec:	2500      	movs	r5, #0
 800d5ee:	462c      	mov	r4, r5
 800d5f0:	e7b0      	b.n	800d554 <__gethex+0x68>
 800d5f2:	2c00      	cmp	r4, #0
 800d5f4:	d1c7      	bne.n	800d586 <__gethex+0x9a>
 800d5f6:	4627      	mov	r7, r4
 800d5f8:	e7c7      	b.n	800d58a <__gethex+0x9e>
 800d5fa:	464e      	mov	r6, r9
 800d5fc:	462f      	mov	r7, r5
 800d5fe:	2501      	movs	r5, #1
 800d600:	e7c3      	b.n	800d58a <__gethex+0x9e>
 800d602:	2400      	movs	r4, #0
 800d604:	1cb1      	adds	r1, r6, #2
 800d606:	e7cc      	b.n	800d5a2 <__gethex+0xb6>
 800d608:	2401      	movs	r4, #1
 800d60a:	e7fb      	b.n	800d604 <__gethex+0x118>
 800d60c:	fb03 0002 	mla	r0, r3, r2, r0
 800d610:	e7ce      	b.n	800d5b0 <__gethex+0xc4>
 800d612:	4631      	mov	r1, r6
 800d614:	e7de      	b.n	800d5d4 <__gethex+0xe8>
 800d616:	eba6 0309 	sub.w	r3, r6, r9
 800d61a:	3b01      	subs	r3, #1
 800d61c:	4629      	mov	r1, r5
 800d61e:	2b07      	cmp	r3, #7
 800d620:	dc0a      	bgt.n	800d638 <__gethex+0x14c>
 800d622:	9801      	ldr	r0, [sp, #4]
 800d624:	f7fe f98e 	bl	800b944 <_Balloc>
 800d628:	4604      	mov	r4, r0
 800d62a:	b940      	cbnz	r0, 800d63e <__gethex+0x152>
 800d62c:	4b5c      	ldr	r3, [pc, #368]	@ (800d7a0 <__gethex+0x2b4>)
 800d62e:	4602      	mov	r2, r0
 800d630:	21e4      	movs	r1, #228	@ 0xe4
 800d632:	485c      	ldr	r0, [pc, #368]	@ (800d7a4 <__gethex+0x2b8>)
 800d634:	f7ff fec0 	bl	800d3b8 <__assert_func>
 800d638:	3101      	adds	r1, #1
 800d63a:	105b      	asrs	r3, r3, #1
 800d63c:	e7ef      	b.n	800d61e <__gethex+0x132>
 800d63e:	f100 0a14 	add.w	sl, r0, #20
 800d642:	2300      	movs	r3, #0
 800d644:	4655      	mov	r5, sl
 800d646:	469b      	mov	fp, r3
 800d648:	45b1      	cmp	r9, r6
 800d64a:	d337      	bcc.n	800d6bc <__gethex+0x1d0>
 800d64c:	f845 bb04 	str.w	fp, [r5], #4
 800d650:	eba5 050a 	sub.w	r5, r5, sl
 800d654:	10ad      	asrs	r5, r5, #2
 800d656:	6125      	str	r5, [r4, #16]
 800d658:	4658      	mov	r0, fp
 800d65a:	f7fe fa65 	bl	800bb28 <__hi0bits>
 800d65e:	016d      	lsls	r5, r5, #5
 800d660:	f8d8 6000 	ldr.w	r6, [r8]
 800d664:	1a2d      	subs	r5, r5, r0
 800d666:	42b5      	cmp	r5, r6
 800d668:	dd54      	ble.n	800d714 <__gethex+0x228>
 800d66a:	1bad      	subs	r5, r5, r6
 800d66c:	4629      	mov	r1, r5
 800d66e:	4620      	mov	r0, r4
 800d670:	f7fe fdf6 	bl	800c260 <__any_on>
 800d674:	4681      	mov	r9, r0
 800d676:	b178      	cbz	r0, 800d698 <__gethex+0x1ac>
 800d678:	1e6b      	subs	r3, r5, #1
 800d67a:	1159      	asrs	r1, r3, #5
 800d67c:	f003 021f 	and.w	r2, r3, #31
 800d680:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d684:	f04f 0901 	mov.w	r9, #1
 800d688:	fa09 f202 	lsl.w	r2, r9, r2
 800d68c:	420a      	tst	r2, r1
 800d68e:	d003      	beq.n	800d698 <__gethex+0x1ac>
 800d690:	454b      	cmp	r3, r9
 800d692:	dc36      	bgt.n	800d702 <__gethex+0x216>
 800d694:	f04f 0902 	mov.w	r9, #2
 800d698:	4629      	mov	r1, r5
 800d69a:	4620      	mov	r0, r4
 800d69c:	f7ff febe 	bl	800d41c <rshift>
 800d6a0:	442f      	add	r7, r5
 800d6a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d6a6:	42bb      	cmp	r3, r7
 800d6a8:	da42      	bge.n	800d730 <__gethex+0x244>
 800d6aa:	9801      	ldr	r0, [sp, #4]
 800d6ac:	4621      	mov	r1, r4
 800d6ae:	f7fe f989 	bl	800b9c4 <_Bfree>
 800d6b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	6013      	str	r3, [r2, #0]
 800d6b8:	25a3      	movs	r5, #163	@ 0xa3
 800d6ba:	e793      	b.n	800d5e4 <__gethex+0xf8>
 800d6bc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d6c0:	2a2e      	cmp	r2, #46	@ 0x2e
 800d6c2:	d012      	beq.n	800d6ea <__gethex+0x1fe>
 800d6c4:	2b20      	cmp	r3, #32
 800d6c6:	d104      	bne.n	800d6d2 <__gethex+0x1e6>
 800d6c8:	f845 bb04 	str.w	fp, [r5], #4
 800d6cc:	f04f 0b00 	mov.w	fp, #0
 800d6d0:	465b      	mov	r3, fp
 800d6d2:	7830      	ldrb	r0, [r6, #0]
 800d6d4:	9303      	str	r3, [sp, #12]
 800d6d6:	f7ff fef3 	bl	800d4c0 <__hexdig_fun>
 800d6da:	9b03      	ldr	r3, [sp, #12]
 800d6dc:	f000 000f 	and.w	r0, r0, #15
 800d6e0:	4098      	lsls	r0, r3
 800d6e2:	ea4b 0b00 	orr.w	fp, fp, r0
 800d6e6:	3304      	adds	r3, #4
 800d6e8:	e7ae      	b.n	800d648 <__gethex+0x15c>
 800d6ea:	45b1      	cmp	r9, r6
 800d6ec:	d8ea      	bhi.n	800d6c4 <__gethex+0x1d8>
 800d6ee:	492b      	ldr	r1, [pc, #172]	@ (800d79c <__gethex+0x2b0>)
 800d6f0:	9303      	str	r3, [sp, #12]
 800d6f2:	2201      	movs	r2, #1
 800d6f4:	4630      	mov	r0, r6
 800d6f6:	f7ff fe25 	bl	800d344 <strncmp>
 800d6fa:	9b03      	ldr	r3, [sp, #12]
 800d6fc:	2800      	cmp	r0, #0
 800d6fe:	d1e1      	bne.n	800d6c4 <__gethex+0x1d8>
 800d700:	e7a2      	b.n	800d648 <__gethex+0x15c>
 800d702:	1ea9      	subs	r1, r5, #2
 800d704:	4620      	mov	r0, r4
 800d706:	f7fe fdab 	bl	800c260 <__any_on>
 800d70a:	2800      	cmp	r0, #0
 800d70c:	d0c2      	beq.n	800d694 <__gethex+0x1a8>
 800d70e:	f04f 0903 	mov.w	r9, #3
 800d712:	e7c1      	b.n	800d698 <__gethex+0x1ac>
 800d714:	da09      	bge.n	800d72a <__gethex+0x23e>
 800d716:	1b75      	subs	r5, r6, r5
 800d718:	4621      	mov	r1, r4
 800d71a:	9801      	ldr	r0, [sp, #4]
 800d71c:	462a      	mov	r2, r5
 800d71e:	f7fe fb69 	bl	800bdf4 <__lshift>
 800d722:	1b7f      	subs	r7, r7, r5
 800d724:	4604      	mov	r4, r0
 800d726:	f100 0a14 	add.w	sl, r0, #20
 800d72a:	f04f 0900 	mov.w	r9, #0
 800d72e:	e7b8      	b.n	800d6a2 <__gethex+0x1b6>
 800d730:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d734:	42bd      	cmp	r5, r7
 800d736:	dd6f      	ble.n	800d818 <__gethex+0x32c>
 800d738:	1bed      	subs	r5, r5, r7
 800d73a:	42ae      	cmp	r6, r5
 800d73c:	dc34      	bgt.n	800d7a8 <__gethex+0x2bc>
 800d73e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d742:	2b02      	cmp	r3, #2
 800d744:	d022      	beq.n	800d78c <__gethex+0x2a0>
 800d746:	2b03      	cmp	r3, #3
 800d748:	d024      	beq.n	800d794 <__gethex+0x2a8>
 800d74a:	2b01      	cmp	r3, #1
 800d74c:	d115      	bne.n	800d77a <__gethex+0x28e>
 800d74e:	42ae      	cmp	r6, r5
 800d750:	d113      	bne.n	800d77a <__gethex+0x28e>
 800d752:	2e01      	cmp	r6, #1
 800d754:	d10b      	bne.n	800d76e <__gethex+0x282>
 800d756:	9a02      	ldr	r2, [sp, #8]
 800d758:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d75c:	6013      	str	r3, [r2, #0]
 800d75e:	2301      	movs	r3, #1
 800d760:	6123      	str	r3, [r4, #16]
 800d762:	f8ca 3000 	str.w	r3, [sl]
 800d766:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d768:	2562      	movs	r5, #98	@ 0x62
 800d76a:	601c      	str	r4, [r3, #0]
 800d76c:	e73a      	b.n	800d5e4 <__gethex+0xf8>
 800d76e:	1e71      	subs	r1, r6, #1
 800d770:	4620      	mov	r0, r4
 800d772:	f7fe fd75 	bl	800c260 <__any_on>
 800d776:	2800      	cmp	r0, #0
 800d778:	d1ed      	bne.n	800d756 <__gethex+0x26a>
 800d77a:	9801      	ldr	r0, [sp, #4]
 800d77c:	4621      	mov	r1, r4
 800d77e:	f7fe f921 	bl	800b9c4 <_Bfree>
 800d782:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d784:	2300      	movs	r3, #0
 800d786:	6013      	str	r3, [r2, #0]
 800d788:	2550      	movs	r5, #80	@ 0x50
 800d78a:	e72b      	b.n	800d5e4 <__gethex+0xf8>
 800d78c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d1f3      	bne.n	800d77a <__gethex+0x28e>
 800d792:	e7e0      	b.n	800d756 <__gethex+0x26a>
 800d794:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d796:	2b00      	cmp	r3, #0
 800d798:	d1dd      	bne.n	800d756 <__gethex+0x26a>
 800d79a:	e7ee      	b.n	800d77a <__gethex+0x28e>
 800d79c:	0800e328 	.word	0x0800e328
 800d7a0:	0800e1bd 	.word	0x0800e1bd
 800d7a4:	0800e4d6 	.word	0x0800e4d6
 800d7a8:	1e6f      	subs	r7, r5, #1
 800d7aa:	f1b9 0f00 	cmp.w	r9, #0
 800d7ae:	d130      	bne.n	800d812 <__gethex+0x326>
 800d7b0:	b127      	cbz	r7, 800d7bc <__gethex+0x2d0>
 800d7b2:	4639      	mov	r1, r7
 800d7b4:	4620      	mov	r0, r4
 800d7b6:	f7fe fd53 	bl	800c260 <__any_on>
 800d7ba:	4681      	mov	r9, r0
 800d7bc:	117a      	asrs	r2, r7, #5
 800d7be:	2301      	movs	r3, #1
 800d7c0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d7c4:	f007 071f 	and.w	r7, r7, #31
 800d7c8:	40bb      	lsls	r3, r7
 800d7ca:	4213      	tst	r3, r2
 800d7cc:	4629      	mov	r1, r5
 800d7ce:	4620      	mov	r0, r4
 800d7d0:	bf18      	it	ne
 800d7d2:	f049 0902 	orrne.w	r9, r9, #2
 800d7d6:	f7ff fe21 	bl	800d41c <rshift>
 800d7da:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d7de:	1b76      	subs	r6, r6, r5
 800d7e0:	2502      	movs	r5, #2
 800d7e2:	f1b9 0f00 	cmp.w	r9, #0
 800d7e6:	d047      	beq.n	800d878 <__gethex+0x38c>
 800d7e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d7ec:	2b02      	cmp	r3, #2
 800d7ee:	d015      	beq.n	800d81c <__gethex+0x330>
 800d7f0:	2b03      	cmp	r3, #3
 800d7f2:	d017      	beq.n	800d824 <__gethex+0x338>
 800d7f4:	2b01      	cmp	r3, #1
 800d7f6:	d109      	bne.n	800d80c <__gethex+0x320>
 800d7f8:	f019 0f02 	tst.w	r9, #2
 800d7fc:	d006      	beq.n	800d80c <__gethex+0x320>
 800d7fe:	f8da 3000 	ldr.w	r3, [sl]
 800d802:	ea49 0903 	orr.w	r9, r9, r3
 800d806:	f019 0f01 	tst.w	r9, #1
 800d80a:	d10e      	bne.n	800d82a <__gethex+0x33e>
 800d80c:	f045 0510 	orr.w	r5, r5, #16
 800d810:	e032      	b.n	800d878 <__gethex+0x38c>
 800d812:	f04f 0901 	mov.w	r9, #1
 800d816:	e7d1      	b.n	800d7bc <__gethex+0x2d0>
 800d818:	2501      	movs	r5, #1
 800d81a:	e7e2      	b.n	800d7e2 <__gethex+0x2f6>
 800d81c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d81e:	f1c3 0301 	rsb	r3, r3, #1
 800d822:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d824:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d826:	2b00      	cmp	r3, #0
 800d828:	d0f0      	beq.n	800d80c <__gethex+0x320>
 800d82a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d82e:	f104 0314 	add.w	r3, r4, #20
 800d832:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d836:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d83a:	f04f 0c00 	mov.w	ip, #0
 800d83e:	4618      	mov	r0, r3
 800d840:	f853 2b04 	ldr.w	r2, [r3], #4
 800d844:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d848:	d01b      	beq.n	800d882 <__gethex+0x396>
 800d84a:	3201      	adds	r2, #1
 800d84c:	6002      	str	r2, [r0, #0]
 800d84e:	2d02      	cmp	r5, #2
 800d850:	f104 0314 	add.w	r3, r4, #20
 800d854:	d13c      	bne.n	800d8d0 <__gethex+0x3e4>
 800d856:	f8d8 2000 	ldr.w	r2, [r8]
 800d85a:	3a01      	subs	r2, #1
 800d85c:	42b2      	cmp	r2, r6
 800d85e:	d109      	bne.n	800d874 <__gethex+0x388>
 800d860:	1171      	asrs	r1, r6, #5
 800d862:	2201      	movs	r2, #1
 800d864:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d868:	f006 061f 	and.w	r6, r6, #31
 800d86c:	fa02 f606 	lsl.w	r6, r2, r6
 800d870:	421e      	tst	r6, r3
 800d872:	d13a      	bne.n	800d8ea <__gethex+0x3fe>
 800d874:	f045 0520 	orr.w	r5, r5, #32
 800d878:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d87a:	601c      	str	r4, [r3, #0]
 800d87c:	9b02      	ldr	r3, [sp, #8]
 800d87e:	601f      	str	r7, [r3, #0]
 800d880:	e6b0      	b.n	800d5e4 <__gethex+0xf8>
 800d882:	4299      	cmp	r1, r3
 800d884:	f843 cc04 	str.w	ip, [r3, #-4]
 800d888:	d8d9      	bhi.n	800d83e <__gethex+0x352>
 800d88a:	68a3      	ldr	r3, [r4, #8]
 800d88c:	459b      	cmp	fp, r3
 800d88e:	db17      	blt.n	800d8c0 <__gethex+0x3d4>
 800d890:	6861      	ldr	r1, [r4, #4]
 800d892:	9801      	ldr	r0, [sp, #4]
 800d894:	3101      	adds	r1, #1
 800d896:	f7fe f855 	bl	800b944 <_Balloc>
 800d89a:	4681      	mov	r9, r0
 800d89c:	b918      	cbnz	r0, 800d8a6 <__gethex+0x3ba>
 800d89e:	4b1a      	ldr	r3, [pc, #104]	@ (800d908 <__gethex+0x41c>)
 800d8a0:	4602      	mov	r2, r0
 800d8a2:	2184      	movs	r1, #132	@ 0x84
 800d8a4:	e6c5      	b.n	800d632 <__gethex+0x146>
 800d8a6:	6922      	ldr	r2, [r4, #16]
 800d8a8:	3202      	adds	r2, #2
 800d8aa:	f104 010c 	add.w	r1, r4, #12
 800d8ae:	0092      	lsls	r2, r2, #2
 800d8b0:	300c      	adds	r0, #12
 800d8b2:	f7ff fd69 	bl	800d388 <memcpy>
 800d8b6:	4621      	mov	r1, r4
 800d8b8:	9801      	ldr	r0, [sp, #4]
 800d8ba:	f7fe f883 	bl	800b9c4 <_Bfree>
 800d8be:	464c      	mov	r4, r9
 800d8c0:	6923      	ldr	r3, [r4, #16]
 800d8c2:	1c5a      	adds	r2, r3, #1
 800d8c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d8c8:	6122      	str	r2, [r4, #16]
 800d8ca:	2201      	movs	r2, #1
 800d8cc:	615a      	str	r2, [r3, #20]
 800d8ce:	e7be      	b.n	800d84e <__gethex+0x362>
 800d8d0:	6922      	ldr	r2, [r4, #16]
 800d8d2:	455a      	cmp	r2, fp
 800d8d4:	dd0b      	ble.n	800d8ee <__gethex+0x402>
 800d8d6:	2101      	movs	r1, #1
 800d8d8:	4620      	mov	r0, r4
 800d8da:	f7ff fd9f 	bl	800d41c <rshift>
 800d8de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d8e2:	3701      	adds	r7, #1
 800d8e4:	42bb      	cmp	r3, r7
 800d8e6:	f6ff aee0 	blt.w	800d6aa <__gethex+0x1be>
 800d8ea:	2501      	movs	r5, #1
 800d8ec:	e7c2      	b.n	800d874 <__gethex+0x388>
 800d8ee:	f016 061f 	ands.w	r6, r6, #31
 800d8f2:	d0fa      	beq.n	800d8ea <__gethex+0x3fe>
 800d8f4:	4453      	add	r3, sl
 800d8f6:	f1c6 0620 	rsb	r6, r6, #32
 800d8fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d8fe:	f7fe f913 	bl	800bb28 <__hi0bits>
 800d902:	42b0      	cmp	r0, r6
 800d904:	dbe7      	blt.n	800d8d6 <__gethex+0x3ea>
 800d906:	e7f0      	b.n	800d8ea <__gethex+0x3fe>
 800d908:	0800e1bd 	.word	0x0800e1bd

0800d90c <L_shift>:
 800d90c:	f1c2 0208 	rsb	r2, r2, #8
 800d910:	0092      	lsls	r2, r2, #2
 800d912:	b570      	push	{r4, r5, r6, lr}
 800d914:	f1c2 0620 	rsb	r6, r2, #32
 800d918:	6843      	ldr	r3, [r0, #4]
 800d91a:	6804      	ldr	r4, [r0, #0]
 800d91c:	fa03 f506 	lsl.w	r5, r3, r6
 800d920:	432c      	orrs	r4, r5
 800d922:	40d3      	lsrs	r3, r2
 800d924:	6004      	str	r4, [r0, #0]
 800d926:	f840 3f04 	str.w	r3, [r0, #4]!
 800d92a:	4288      	cmp	r0, r1
 800d92c:	d3f4      	bcc.n	800d918 <L_shift+0xc>
 800d92e:	bd70      	pop	{r4, r5, r6, pc}

0800d930 <__match>:
 800d930:	b530      	push	{r4, r5, lr}
 800d932:	6803      	ldr	r3, [r0, #0]
 800d934:	3301      	adds	r3, #1
 800d936:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d93a:	b914      	cbnz	r4, 800d942 <__match+0x12>
 800d93c:	6003      	str	r3, [r0, #0]
 800d93e:	2001      	movs	r0, #1
 800d940:	bd30      	pop	{r4, r5, pc}
 800d942:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d946:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d94a:	2d19      	cmp	r5, #25
 800d94c:	bf98      	it	ls
 800d94e:	3220      	addls	r2, #32
 800d950:	42a2      	cmp	r2, r4
 800d952:	d0f0      	beq.n	800d936 <__match+0x6>
 800d954:	2000      	movs	r0, #0
 800d956:	e7f3      	b.n	800d940 <__match+0x10>

0800d958 <__hexnan>:
 800d958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d95c:	680b      	ldr	r3, [r1, #0]
 800d95e:	6801      	ldr	r1, [r0, #0]
 800d960:	115e      	asrs	r6, r3, #5
 800d962:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d966:	f013 031f 	ands.w	r3, r3, #31
 800d96a:	b087      	sub	sp, #28
 800d96c:	bf18      	it	ne
 800d96e:	3604      	addne	r6, #4
 800d970:	2500      	movs	r5, #0
 800d972:	1f37      	subs	r7, r6, #4
 800d974:	4682      	mov	sl, r0
 800d976:	4690      	mov	r8, r2
 800d978:	9301      	str	r3, [sp, #4]
 800d97a:	f846 5c04 	str.w	r5, [r6, #-4]
 800d97e:	46b9      	mov	r9, r7
 800d980:	463c      	mov	r4, r7
 800d982:	9502      	str	r5, [sp, #8]
 800d984:	46ab      	mov	fp, r5
 800d986:	784a      	ldrb	r2, [r1, #1]
 800d988:	1c4b      	adds	r3, r1, #1
 800d98a:	9303      	str	r3, [sp, #12]
 800d98c:	b342      	cbz	r2, 800d9e0 <__hexnan+0x88>
 800d98e:	4610      	mov	r0, r2
 800d990:	9105      	str	r1, [sp, #20]
 800d992:	9204      	str	r2, [sp, #16]
 800d994:	f7ff fd94 	bl	800d4c0 <__hexdig_fun>
 800d998:	2800      	cmp	r0, #0
 800d99a:	d151      	bne.n	800da40 <__hexnan+0xe8>
 800d99c:	9a04      	ldr	r2, [sp, #16]
 800d99e:	9905      	ldr	r1, [sp, #20]
 800d9a0:	2a20      	cmp	r2, #32
 800d9a2:	d818      	bhi.n	800d9d6 <__hexnan+0x7e>
 800d9a4:	9b02      	ldr	r3, [sp, #8]
 800d9a6:	459b      	cmp	fp, r3
 800d9a8:	dd13      	ble.n	800d9d2 <__hexnan+0x7a>
 800d9aa:	454c      	cmp	r4, r9
 800d9ac:	d206      	bcs.n	800d9bc <__hexnan+0x64>
 800d9ae:	2d07      	cmp	r5, #7
 800d9b0:	dc04      	bgt.n	800d9bc <__hexnan+0x64>
 800d9b2:	462a      	mov	r2, r5
 800d9b4:	4649      	mov	r1, r9
 800d9b6:	4620      	mov	r0, r4
 800d9b8:	f7ff ffa8 	bl	800d90c <L_shift>
 800d9bc:	4544      	cmp	r4, r8
 800d9be:	d952      	bls.n	800da66 <__hexnan+0x10e>
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	f1a4 0904 	sub.w	r9, r4, #4
 800d9c6:	f844 3c04 	str.w	r3, [r4, #-4]
 800d9ca:	f8cd b008 	str.w	fp, [sp, #8]
 800d9ce:	464c      	mov	r4, r9
 800d9d0:	461d      	mov	r5, r3
 800d9d2:	9903      	ldr	r1, [sp, #12]
 800d9d4:	e7d7      	b.n	800d986 <__hexnan+0x2e>
 800d9d6:	2a29      	cmp	r2, #41	@ 0x29
 800d9d8:	d157      	bne.n	800da8a <__hexnan+0x132>
 800d9da:	3102      	adds	r1, #2
 800d9dc:	f8ca 1000 	str.w	r1, [sl]
 800d9e0:	f1bb 0f00 	cmp.w	fp, #0
 800d9e4:	d051      	beq.n	800da8a <__hexnan+0x132>
 800d9e6:	454c      	cmp	r4, r9
 800d9e8:	d206      	bcs.n	800d9f8 <__hexnan+0xa0>
 800d9ea:	2d07      	cmp	r5, #7
 800d9ec:	dc04      	bgt.n	800d9f8 <__hexnan+0xa0>
 800d9ee:	462a      	mov	r2, r5
 800d9f0:	4649      	mov	r1, r9
 800d9f2:	4620      	mov	r0, r4
 800d9f4:	f7ff ff8a 	bl	800d90c <L_shift>
 800d9f8:	4544      	cmp	r4, r8
 800d9fa:	d936      	bls.n	800da6a <__hexnan+0x112>
 800d9fc:	f1a8 0204 	sub.w	r2, r8, #4
 800da00:	4623      	mov	r3, r4
 800da02:	f853 1b04 	ldr.w	r1, [r3], #4
 800da06:	f842 1f04 	str.w	r1, [r2, #4]!
 800da0a:	429f      	cmp	r7, r3
 800da0c:	d2f9      	bcs.n	800da02 <__hexnan+0xaa>
 800da0e:	1b3b      	subs	r3, r7, r4
 800da10:	f023 0303 	bic.w	r3, r3, #3
 800da14:	3304      	adds	r3, #4
 800da16:	3401      	adds	r4, #1
 800da18:	3e03      	subs	r6, #3
 800da1a:	42b4      	cmp	r4, r6
 800da1c:	bf88      	it	hi
 800da1e:	2304      	movhi	r3, #4
 800da20:	4443      	add	r3, r8
 800da22:	2200      	movs	r2, #0
 800da24:	f843 2b04 	str.w	r2, [r3], #4
 800da28:	429f      	cmp	r7, r3
 800da2a:	d2fb      	bcs.n	800da24 <__hexnan+0xcc>
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	b91b      	cbnz	r3, 800da38 <__hexnan+0xe0>
 800da30:	4547      	cmp	r7, r8
 800da32:	d128      	bne.n	800da86 <__hexnan+0x12e>
 800da34:	2301      	movs	r3, #1
 800da36:	603b      	str	r3, [r7, #0]
 800da38:	2005      	movs	r0, #5
 800da3a:	b007      	add	sp, #28
 800da3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da40:	3501      	adds	r5, #1
 800da42:	2d08      	cmp	r5, #8
 800da44:	f10b 0b01 	add.w	fp, fp, #1
 800da48:	dd06      	ble.n	800da58 <__hexnan+0x100>
 800da4a:	4544      	cmp	r4, r8
 800da4c:	d9c1      	bls.n	800d9d2 <__hexnan+0x7a>
 800da4e:	2300      	movs	r3, #0
 800da50:	f844 3c04 	str.w	r3, [r4, #-4]
 800da54:	2501      	movs	r5, #1
 800da56:	3c04      	subs	r4, #4
 800da58:	6822      	ldr	r2, [r4, #0]
 800da5a:	f000 000f 	and.w	r0, r0, #15
 800da5e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800da62:	6020      	str	r0, [r4, #0]
 800da64:	e7b5      	b.n	800d9d2 <__hexnan+0x7a>
 800da66:	2508      	movs	r5, #8
 800da68:	e7b3      	b.n	800d9d2 <__hexnan+0x7a>
 800da6a:	9b01      	ldr	r3, [sp, #4]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d0dd      	beq.n	800da2c <__hexnan+0xd4>
 800da70:	f1c3 0320 	rsb	r3, r3, #32
 800da74:	f04f 32ff 	mov.w	r2, #4294967295
 800da78:	40da      	lsrs	r2, r3
 800da7a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800da7e:	4013      	ands	r3, r2
 800da80:	f846 3c04 	str.w	r3, [r6, #-4]
 800da84:	e7d2      	b.n	800da2c <__hexnan+0xd4>
 800da86:	3f04      	subs	r7, #4
 800da88:	e7d0      	b.n	800da2c <__hexnan+0xd4>
 800da8a:	2004      	movs	r0, #4
 800da8c:	e7d5      	b.n	800da3a <__hexnan+0xe2>

0800da8e <__ascii_mbtowc>:
 800da8e:	b082      	sub	sp, #8
 800da90:	b901      	cbnz	r1, 800da94 <__ascii_mbtowc+0x6>
 800da92:	a901      	add	r1, sp, #4
 800da94:	b142      	cbz	r2, 800daa8 <__ascii_mbtowc+0x1a>
 800da96:	b14b      	cbz	r3, 800daac <__ascii_mbtowc+0x1e>
 800da98:	7813      	ldrb	r3, [r2, #0]
 800da9a:	600b      	str	r3, [r1, #0]
 800da9c:	7812      	ldrb	r2, [r2, #0]
 800da9e:	1e10      	subs	r0, r2, #0
 800daa0:	bf18      	it	ne
 800daa2:	2001      	movne	r0, #1
 800daa4:	b002      	add	sp, #8
 800daa6:	4770      	bx	lr
 800daa8:	4610      	mov	r0, r2
 800daaa:	e7fb      	b.n	800daa4 <__ascii_mbtowc+0x16>
 800daac:	f06f 0001 	mvn.w	r0, #1
 800dab0:	e7f8      	b.n	800daa4 <__ascii_mbtowc+0x16>

0800dab2 <_realloc_r>:
 800dab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dab6:	4680      	mov	r8, r0
 800dab8:	4615      	mov	r5, r2
 800daba:	460c      	mov	r4, r1
 800dabc:	b921      	cbnz	r1, 800dac8 <_realloc_r+0x16>
 800dabe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dac2:	4611      	mov	r1, r2
 800dac4:	f7fd beb2 	b.w	800b82c <_malloc_r>
 800dac8:	b92a      	cbnz	r2, 800dad6 <_realloc_r+0x24>
 800daca:	f7fd fe3b 	bl	800b744 <_free_r>
 800dace:	2400      	movs	r4, #0
 800dad0:	4620      	mov	r0, r4
 800dad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dad6:	f000 f840 	bl	800db5a <_malloc_usable_size_r>
 800dada:	4285      	cmp	r5, r0
 800dadc:	4606      	mov	r6, r0
 800dade:	d802      	bhi.n	800dae6 <_realloc_r+0x34>
 800dae0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dae4:	d8f4      	bhi.n	800dad0 <_realloc_r+0x1e>
 800dae6:	4629      	mov	r1, r5
 800dae8:	4640      	mov	r0, r8
 800daea:	f7fd fe9f 	bl	800b82c <_malloc_r>
 800daee:	4607      	mov	r7, r0
 800daf0:	2800      	cmp	r0, #0
 800daf2:	d0ec      	beq.n	800dace <_realloc_r+0x1c>
 800daf4:	42b5      	cmp	r5, r6
 800daf6:	462a      	mov	r2, r5
 800daf8:	4621      	mov	r1, r4
 800dafa:	bf28      	it	cs
 800dafc:	4632      	movcs	r2, r6
 800dafe:	f7ff fc43 	bl	800d388 <memcpy>
 800db02:	4621      	mov	r1, r4
 800db04:	4640      	mov	r0, r8
 800db06:	f7fd fe1d 	bl	800b744 <_free_r>
 800db0a:	463c      	mov	r4, r7
 800db0c:	e7e0      	b.n	800dad0 <_realloc_r+0x1e>

0800db0e <__ascii_wctomb>:
 800db0e:	4603      	mov	r3, r0
 800db10:	4608      	mov	r0, r1
 800db12:	b141      	cbz	r1, 800db26 <__ascii_wctomb+0x18>
 800db14:	2aff      	cmp	r2, #255	@ 0xff
 800db16:	d904      	bls.n	800db22 <__ascii_wctomb+0x14>
 800db18:	228a      	movs	r2, #138	@ 0x8a
 800db1a:	601a      	str	r2, [r3, #0]
 800db1c:	f04f 30ff 	mov.w	r0, #4294967295
 800db20:	4770      	bx	lr
 800db22:	700a      	strb	r2, [r1, #0]
 800db24:	2001      	movs	r0, #1
 800db26:	4770      	bx	lr

0800db28 <fiprintf>:
 800db28:	b40e      	push	{r1, r2, r3}
 800db2a:	b503      	push	{r0, r1, lr}
 800db2c:	4601      	mov	r1, r0
 800db2e:	ab03      	add	r3, sp, #12
 800db30:	4805      	ldr	r0, [pc, #20]	@ (800db48 <fiprintf+0x20>)
 800db32:	f853 2b04 	ldr.w	r2, [r3], #4
 800db36:	6800      	ldr	r0, [r0, #0]
 800db38:	9301      	str	r3, [sp, #4]
 800db3a:	f000 f83f 	bl	800dbbc <_vfiprintf_r>
 800db3e:	b002      	add	sp, #8
 800db40:	f85d eb04 	ldr.w	lr, [sp], #4
 800db44:	b003      	add	sp, #12
 800db46:	4770      	bx	lr
 800db48:	2400001c 	.word	0x2400001c

0800db4c <abort>:
 800db4c:	b508      	push	{r3, lr}
 800db4e:	2006      	movs	r0, #6
 800db50:	f000 fa08 	bl	800df64 <raise>
 800db54:	2001      	movs	r0, #1
 800db56:	f7f3 fc7b 	bl	8001450 <_exit>

0800db5a <_malloc_usable_size_r>:
 800db5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db5e:	1f18      	subs	r0, r3, #4
 800db60:	2b00      	cmp	r3, #0
 800db62:	bfbc      	itt	lt
 800db64:	580b      	ldrlt	r3, [r1, r0]
 800db66:	18c0      	addlt	r0, r0, r3
 800db68:	4770      	bx	lr

0800db6a <__sfputc_r>:
 800db6a:	6893      	ldr	r3, [r2, #8]
 800db6c:	3b01      	subs	r3, #1
 800db6e:	2b00      	cmp	r3, #0
 800db70:	b410      	push	{r4}
 800db72:	6093      	str	r3, [r2, #8]
 800db74:	da08      	bge.n	800db88 <__sfputc_r+0x1e>
 800db76:	6994      	ldr	r4, [r2, #24]
 800db78:	42a3      	cmp	r3, r4
 800db7a:	db01      	blt.n	800db80 <__sfputc_r+0x16>
 800db7c:	290a      	cmp	r1, #10
 800db7e:	d103      	bne.n	800db88 <__sfputc_r+0x1e>
 800db80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db84:	f000 b932 	b.w	800ddec <__swbuf_r>
 800db88:	6813      	ldr	r3, [r2, #0]
 800db8a:	1c58      	adds	r0, r3, #1
 800db8c:	6010      	str	r0, [r2, #0]
 800db8e:	7019      	strb	r1, [r3, #0]
 800db90:	4608      	mov	r0, r1
 800db92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db96:	4770      	bx	lr

0800db98 <__sfputs_r>:
 800db98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db9a:	4606      	mov	r6, r0
 800db9c:	460f      	mov	r7, r1
 800db9e:	4614      	mov	r4, r2
 800dba0:	18d5      	adds	r5, r2, r3
 800dba2:	42ac      	cmp	r4, r5
 800dba4:	d101      	bne.n	800dbaa <__sfputs_r+0x12>
 800dba6:	2000      	movs	r0, #0
 800dba8:	e007      	b.n	800dbba <__sfputs_r+0x22>
 800dbaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbae:	463a      	mov	r2, r7
 800dbb0:	4630      	mov	r0, r6
 800dbb2:	f7ff ffda 	bl	800db6a <__sfputc_r>
 800dbb6:	1c43      	adds	r3, r0, #1
 800dbb8:	d1f3      	bne.n	800dba2 <__sfputs_r+0xa>
 800dbba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dbbc <_vfiprintf_r>:
 800dbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbc0:	460d      	mov	r5, r1
 800dbc2:	b09d      	sub	sp, #116	@ 0x74
 800dbc4:	4614      	mov	r4, r2
 800dbc6:	4698      	mov	r8, r3
 800dbc8:	4606      	mov	r6, r0
 800dbca:	b118      	cbz	r0, 800dbd4 <_vfiprintf_r+0x18>
 800dbcc:	6a03      	ldr	r3, [r0, #32]
 800dbce:	b90b      	cbnz	r3, 800dbd4 <_vfiprintf_r+0x18>
 800dbd0:	f7fc feba 	bl	800a948 <__sinit>
 800dbd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dbd6:	07d9      	lsls	r1, r3, #31
 800dbd8:	d405      	bmi.n	800dbe6 <_vfiprintf_r+0x2a>
 800dbda:	89ab      	ldrh	r3, [r5, #12]
 800dbdc:	059a      	lsls	r2, r3, #22
 800dbde:	d402      	bmi.n	800dbe6 <_vfiprintf_r+0x2a>
 800dbe0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dbe2:	f7fc ffc8 	bl	800ab76 <__retarget_lock_acquire_recursive>
 800dbe6:	89ab      	ldrh	r3, [r5, #12]
 800dbe8:	071b      	lsls	r3, r3, #28
 800dbea:	d501      	bpl.n	800dbf0 <_vfiprintf_r+0x34>
 800dbec:	692b      	ldr	r3, [r5, #16]
 800dbee:	b99b      	cbnz	r3, 800dc18 <_vfiprintf_r+0x5c>
 800dbf0:	4629      	mov	r1, r5
 800dbf2:	4630      	mov	r0, r6
 800dbf4:	f000 f938 	bl	800de68 <__swsetup_r>
 800dbf8:	b170      	cbz	r0, 800dc18 <_vfiprintf_r+0x5c>
 800dbfa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dbfc:	07dc      	lsls	r4, r3, #31
 800dbfe:	d504      	bpl.n	800dc0a <_vfiprintf_r+0x4e>
 800dc00:	f04f 30ff 	mov.w	r0, #4294967295
 800dc04:	b01d      	add	sp, #116	@ 0x74
 800dc06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc0a:	89ab      	ldrh	r3, [r5, #12]
 800dc0c:	0598      	lsls	r0, r3, #22
 800dc0e:	d4f7      	bmi.n	800dc00 <_vfiprintf_r+0x44>
 800dc10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dc12:	f7fc ffb1 	bl	800ab78 <__retarget_lock_release_recursive>
 800dc16:	e7f3      	b.n	800dc00 <_vfiprintf_r+0x44>
 800dc18:	2300      	movs	r3, #0
 800dc1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc1c:	2320      	movs	r3, #32
 800dc1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dc22:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc26:	2330      	movs	r3, #48	@ 0x30
 800dc28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ddd8 <_vfiprintf_r+0x21c>
 800dc2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dc30:	f04f 0901 	mov.w	r9, #1
 800dc34:	4623      	mov	r3, r4
 800dc36:	469a      	mov	sl, r3
 800dc38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc3c:	b10a      	cbz	r2, 800dc42 <_vfiprintf_r+0x86>
 800dc3e:	2a25      	cmp	r2, #37	@ 0x25
 800dc40:	d1f9      	bne.n	800dc36 <_vfiprintf_r+0x7a>
 800dc42:	ebba 0b04 	subs.w	fp, sl, r4
 800dc46:	d00b      	beq.n	800dc60 <_vfiprintf_r+0xa4>
 800dc48:	465b      	mov	r3, fp
 800dc4a:	4622      	mov	r2, r4
 800dc4c:	4629      	mov	r1, r5
 800dc4e:	4630      	mov	r0, r6
 800dc50:	f7ff ffa2 	bl	800db98 <__sfputs_r>
 800dc54:	3001      	adds	r0, #1
 800dc56:	f000 80a7 	beq.w	800dda8 <_vfiprintf_r+0x1ec>
 800dc5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc5c:	445a      	add	r2, fp
 800dc5e:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc60:	f89a 3000 	ldrb.w	r3, [sl]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	f000 809f 	beq.w	800dda8 <_vfiprintf_r+0x1ec>
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	f04f 32ff 	mov.w	r2, #4294967295
 800dc70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc74:	f10a 0a01 	add.w	sl, sl, #1
 800dc78:	9304      	str	r3, [sp, #16]
 800dc7a:	9307      	str	r3, [sp, #28]
 800dc7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dc80:	931a      	str	r3, [sp, #104]	@ 0x68
 800dc82:	4654      	mov	r4, sl
 800dc84:	2205      	movs	r2, #5
 800dc86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc8a:	4853      	ldr	r0, [pc, #332]	@ (800ddd8 <_vfiprintf_r+0x21c>)
 800dc8c:	f7f2 fb28 	bl	80002e0 <memchr>
 800dc90:	9a04      	ldr	r2, [sp, #16]
 800dc92:	b9d8      	cbnz	r0, 800dccc <_vfiprintf_r+0x110>
 800dc94:	06d1      	lsls	r1, r2, #27
 800dc96:	bf44      	itt	mi
 800dc98:	2320      	movmi	r3, #32
 800dc9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc9e:	0713      	lsls	r3, r2, #28
 800dca0:	bf44      	itt	mi
 800dca2:	232b      	movmi	r3, #43	@ 0x2b
 800dca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dca8:	f89a 3000 	ldrb.w	r3, [sl]
 800dcac:	2b2a      	cmp	r3, #42	@ 0x2a
 800dcae:	d015      	beq.n	800dcdc <_vfiprintf_r+0x120>
 800dcb0:	9a07      	ldr	r2, [sp, #28]
 800dcb2:	4654      	mov	r4, sl
 800dcb4:	2000      	movs	r0, #0
 800dcb6:	f04f 0c0a 	mov.w	ip, #10
 800dcba:	4621      	mov	r1, r4
 800dcbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dcc0:	3b30      	subs	r3, #48	@ 0x30
 800dcc2:	2b09      	cmp	r3, #9
 800dcc4:	d94b      	bls.n	800dd5e <_vfiprintf_r+0x1a2>
 800dcc6:	b1b0      	cbz	r0, 800dcf6 <_vfiprintf_r+0x13a>
 800dcc8:	9207      	str	r2, [sp, #28]
 800dcca:	e014      	b.n	800dcf6 <_vfiprintf_r+0x13a>
 800dccc:	eba0 0308 	sub.w	r3, r0, r8
 800dcd0:	fa09 f303 	lsl.w	r3, r9, r3
 800dcd4:	4313      	orrs	r3, r2
 800dcd6:	9304      	str	r3, [sp, #16]
 800dcd8:	46a2      	mov	sl, r4
 800dcda:	e7d2      	b.n	800dc82 <_vfiprintf_r+0xc6>
 800dcdc:	9b03      	ldr	r3, [sp, #12]
 800dcde:	1d19      	adds	r1, r3, #4
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	9103      	str	r1, [sp, #12]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	bfbb      	ittet	lt
 800dce8:	425b      	neglt	r3, r3
 800dcea:	f042 0202 	orrlt.w	r2, r2, #2
 800dcee:	9307      	strge	r3, [sp, #28]
 800dcf0:	9307      	strlt	r3, [sp, #28]
 800dcf2:	bfb8      	it	lt
 800dcf4:	9204      	strlt	r2, [sp, #16]
 800dcf6:	7823      	ldrb	r3, [r4, #0]
 800dcf8:	2b2e      	cmp	r3, #46	@ 0x2e
 800dcfa:	d10a      	bne.n	800dd12 <_vfiprintf_r+0x156>
 800dcfc:	7863      	ldrb	r3, [r4, #1]
 800dcfe:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd00:	d132      	bne.n	800dd68 <_vfiprintf_r+0x1ac>
 800dd02:	9b03      	ldr	r3, [sp, #12]
 800dd04:	1d1a      	adds	r2, r3, #4
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	9203      	str	r2, [sp, #12]
 800dd0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dd0e:	3402      	adds	r4, #2
 800dd10:	9305      	str	r3, [sp, #20]
 800dd12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dde8 <_vfiprintf_r+0x22c>
 800dd16:	7821      	ldrb	r1, [r4, #0]
 800dd18:	2203      	movs	r2, #3
 800dd1a:	4650      	mov	r0, sl
 800dd1c:	f7f2 fae0 	bl	80002e0 <memchr>
 800dd20:	b138      	cbz	r0, 800dd32 <_vfiprintf_r+0x176>
 800dd22:	9b04      	ldr	r3, [sp, #16]
 800dd24:	eba0 000a 	sub.w	r0, r0, sl
 800dd28:	2240      	movs	r2, #64	@ 0x40
 800dd2a:	4082      	lsls	r2, r0
 800dd2c:	4313      	orrs	r3, r2
 800dd2e:	3401      	adds	r4, #1
 800dd30:	9304      	str	r3, [sp, #16]
 800dd32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd36:	4829      	ldr	r0, [pc, #164]	@ (800dddc <_vfiprintf_r+0x220>)
 800dd38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dd3c:	2206      	movs	r2, #6
 800dd3e:	f7f2 facf 	bl	80002e0 <memchr>
 800dd42:	2800      	cmp	r0, #0
 800dd44:	d03f      	beq.n	800ddc6 <_vfiprintf_r+0x20a>
 800dd46:	4b26      	ldr	r3, [pc, #152]	@ (800dde0 <_vfiprintf_r+0x224>)
 800dd48:	bb1b      	cbnz	r3, 800dd92 <_vfiprintf_r+0x1d6>
 800dd4a:	9b03      	ldr	r3, [sp, #12]
 800dd4c:	3307      	adds	r3, #7
 800dd4e:	f023 0307 	bic.w	r3, r3, #7
 800dd52:	3308      	adds	r3, #8
 800dd54:	9303      	str	r3, [sp, #12]
 800dd56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd58:	443b      	add	r3, r7
 800dd5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd5c:	e76a      	b.n	800dc34 <_vfiprintf_r+0x78>
 800dd5e:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd62:	460c      	mov	r4, r1
 800dd64:	2001      	movs	r0, #1
 800dd66:	e7a8      	b.n	800dcba <_vfiprintf_r+0xfe>
 800dd68:	2300      	movs	r3, #0
 800dd6a:	3401      	adds	r4, #1
 800dd6c:	9305      	str	r3, [sp, #20]
 800dd6e:	4619      	mov	r1, r3
 800dd70:	f04f 0c0a 	mov.w	ip, #10
 800dd74:	4620      	mov	r0, r4
 800dd76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd7a:	3a30      	subs	r2, #48	@ 0x30
 800dd7c:	2a09      	cmp	r2, #9
 800dd7e:	d903      	bls.n	800dd88 <_vfiprintf_r+0x1cc>
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d0c6      	beq.n	800dd12 <_vfiprintf_r+0x156>
 800dd84:	9105      	str	r1, [sp, #20]
 800dd86:	e7c4      	b.n	800dd12 <_vfiprintf_r+0x156>
 800dd88:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd8c:	4604      	mov	r4, r0
 800dd8e:	2301      	movs	r3, #1
 800dd90:	e7f0      	b.n	800dd74 <_vfiprintf_r+0x1b8>
 800dd92:	ab03      	add	r3, sp, #12
 800dd94:	9300      	str	r3, [sp, #0]
 800dd96:	462a      	mov	r2, r5
 800dd98:	4b12      	ldr	r3, [pc, #72]	@ (800dde4 <_vfiprintf_r+0x228>)
 800dd9a:	a904      	add	r1, sp, #16
 800dd9c:	4630      	mov	r0, r6
 800dd9e:	f7fb ff93 	bl	8009cc8 <_printf_float>
 800dda2:	4607      	mov	r7, r0
 800dda4:	1c78      	adds	r0, r7, #1
 800dda6:	d1d6      	bne.n	800dd56 <_vfiprintf_r+0x19a>
 800dda8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ddaa:	07d9      	lsls	r1, r3, #31
 800ddac:	d405      	bmi.n	800ddba <_vfiprintf_r+0x1fe>
 800ddae:	89ab      	ldrh	r3, [r5, #12]
 800ddb0:	059a      	lsls	r2, r3, #22
 800ddb2:	d402      	bmi.n	800ddba <_vfiprintf_r+0x1fe>
 800ddb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ddb6:	f7fc fedf 	bl	800ab78 <__retarget_lock_release_recursive>
 800ddba:	89ab      	ldrh	r3, [r5, #12]
 800ddbc:	065b      	lsls	r3, r3, #25
 800ddbe:	f53f af1f 	bmi.w	800dc00 <_vfiprintf_r+0x44>
 800ddc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ddc4:	e71e      	b.n	800dc04 <_vfiprintf_r+0x48>
 800ddc6:	ab03      	add	r3, sp, #12
 800ddc8:	9300      	str	r3, [sp, #0]
 800ddca:	462a      	mov	r2, r5
 800ddcc:	4b05      	ldr	r3, [pc, #20]	@ (800dde4 <_vfiprintf_r+0x228>)
 800ddce:	a904      	add	r1, sp, #16
 800ddd0:	4630      	mov	r0, r6
 800ddd2:	f7fc fa01 	bl	800a1d8 <_printf_i>
 800ddd6:	e7e4      	b.n	800dda2 <_vfiprintf_r+0x1e6>
 800ddd8:	0800e481 	.word	0x0800e481
 800dddc:	0800e48b 	.word	0x0800e48b
 800dde0:	08009cc9 	.word	0x08009cc9
 800dde4:	0800db99 	.word	0x0800db99
 800dde8:	0800e487 	.word	0x0800e487

0800ddec <__swbuf_r>:
 800ddec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddee:	460e      	mov	r6, r1
 800ddf0:	4614      	mov	r4, r2
 800ddf2:	4605      	mov	r5, r0
 800ddf4:	b118      	cbz	r0, 800ddfe <__swbuf_r+0x12>
 800ddf6:	6a03      	ldr	r3, [r0, #32]
 800ddf8:	b90b      	cbnz	r3, 800ddfe <__swbuf_r+0x12>
 800ddfa:	f7fc fda5 	bl	800a948 <__sinit>
 800ddfe:	69a3      	ldr	r3, [r4, #24]
 800de00:	60a3      	str	r3, [r4, #8]
 800de02:	89a3      	ldrh	r3, [r4, #12]
 800de04:	071a      	lsls	r2, r3, #28
 800de06:	d501      	bpl.n	800de0c <__swbuf_r+0x20>
 800de08:	6923      	ldr	r3, [r4, #16]
 800de0a:	b943      	cbnz	r3, 800de1e <__swbuf_r+0x32>
 800de0c:	4621      	mov	r1, r4
 800de0e:	4628      	mov	r0, r5
 800de10:	f000 f82a 	bl	800de68 <__swsetup_r>
 800de14:	b118      	cbz	r0, 800de1e <__swbuf_r+0x32>
 800de16:	f04f 37ff 	mov.w	r7, #4294967295
 800de1a:	4638      	mov	r0, r7
 800de1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de1e:	6823      	ldr	r3, [r4, #0]
 800de20:	6922      	ldr	r2, [r4, #16]
 800de22:	1a98      	subs	r0, r3, r2
 800de24:	6963      	ldr	r3, [r4, #20]
 800de26:	b2f6      	uxtb	r6, r6
 800de28:	4283      	cmp	r3, r0
 800de2a:	4637      	mov	r7, r6
 800de2c:	dc05      	bgt.n	800de3a <__swbuf_r+0x4e>
 800de2e:	4621      	mov	r1, r4
 800de30:	4628      	mov	r0, r5
 800de32:	f7ff fa45 	bl	800d2c0 <_fflush_r>
 800de36:	2800      	cmp	r0, #0
 800de38:	d1ed      	bne.n	800de16 <__swbuf_r+0x2a>
 800de3a:	68a3      	ldr	r3, [r4, #8]
 800de3c:	3b01      	subs	r3, #1
 800de3e:	60a3      	str	r3, [r4, #8]
 800de40:	6823      	ldr	r3, [r4, #0]
 800de42:	1c5a      	adds	r2, r3, #1
 800de44:	6022      	str	r2, [r4, #0]
 800de46:	701e      	strb	r6, [r3, #0]
 800de48:	6962      	ldr	r2, [r4, #20]
 800de4a:	1c43      	adds	r3, r0, #1
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d004      	beq.n	800de5a <__swbuf_r+0x6e>
 800de50:	89a3      	ldrh	r3, [r4, #12]
 800de52:	07db      	lsls	r3, r3, #31
 800de54:	d5e1      	bpl.n	800de1a <__swbuf_r+0x2e>
 800de56:	2e0a      	cmp	r6, #10
 800de58:	d1df      	bne.n	800de1a <__swbuf_r+0x2e>
 800de5a:	4621      	mov	r1, r4
 800de5c:	4628      	mov	r0, r5
 800de5e:	f7ff fa2f 	bl	800d2c0 <_fflush_r>
 800de62:	2800      	cmp	r0, #0
 800de64:	d0d9      	beq.n	800de1a <__swbuf_r+0x2e>
 800de66:	e7d6      	b.n	800de16 <__swbuf_r+0x2a>

0800de68 <__swsetup_r>:
 800de68:	b538      	push	{r3, r4, r5, lr}
 800de6a:	4b29      	ldr	r3, [pc, #164]	@ (800df10 <__swsetup_r+0xa8>)
 800de6c:	4605      	mov	r5, r0
 800de6e:	6818      	ldr	r0, [r3, #0]
 800de70:	460c      	mov	r4, r1
 800de72:	b118      	cbz	r0, 800de7c <__swsetup_r+0x14>
 800de74:	6a03      	ldr	r3, [r0, #32]
 800de76:	b90b      	cbnz	r3, 800de7c <__swsetup_r+0x14>
 800de78:	f7fc fd66 	bl	800a948 <__sinit>
 800de7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de80:	0719      	lsls	r1, r3, #28
 800de82:	d422      	bmi.n	800deca <__swsetup_r+0x62>
 800de84:	06da      	lsls	r2, r3, #27
 800de86:	d407      	bmi.n	800de98 <__swsetup_r+0x30>
 800de88:	2209      	movs	r2, #9
 800de8a:	602a      	str	r2, [r5, #0]
 800de8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de90:	81a3      	strh	r3, [r4, #12]
 800de92:	f04f 30ff 	mov.w	r0, #4294967295
 800de96:	e033      	b.n	800df00 <__swsetup_r+0x98>
 800de98:	0758      	lsls	r0, r3, #29
 800de9a:	d512      	bpl.n	800dec2 <__swsetup_r+0x5a>
 800de9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800de9e:	b141      	cbz	r1, 800deb2 <__swsetup_r+0x4a>
 800dea0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dea4:	4299      	cmp	r1, r3
 800dea6:	d002      	beq.n	800deae <__swsetup_r+0x46>
 800dea8:	4628      	mov	r0, r5
 800deaa:	f7fd fc4b 	bl	800b744 <_free_r>
 800deae:	2300      	movs	r3, #0
 800deb0:	6363      	str	r3, [r4, #52]	@ 0x34
 800deb2:	89a3      	ldrh	r3, [r4, #12]
 800deb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800deb8:	81a3      	strh	r3, [r4, #12]
 800deba:	2300      	movs	r3, #0
 800debc:	6063      	str	r3, [r4, #4]
 800debe:	6923      	ldr	r3, [r4, #16]
 800dec0:	6023      	str	r3, [r4, #0]
 800dec2:	89a3      	ldrh	r3, [r4, #12]
 800dec4:	f043 0308 	orr.w	r3, r3, #8
 800dec8:	81a3      	strh	r3, [r4, #12]
 800deca:	6923      	ldr	r3, [r4, #16]
 800decc:	b94b      	cbnz	r3, 800dee2 <__swsetup_r+0x7a>
 800dece:	89a3      	ldrh	r3, [r4, #12]
 800ded0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ded4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ded8:	d003      	beq.n	800dee2 <__swsetup_r+0x7a>
 800deda:	4621      	mov	r1, r4
 800dedc:	4628      	mov	r0, r5
 800dede:	f000 f883 	bl	800dfe8 <__smakebuf_r>
 800dee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dee6:	f013 0201 	ands.w	r2, r3, #1
 800deea:	d00a      	beq.n	800df02 <__swsetup_r+0x9a>
 800deec:	2200      	movs	r2, #0
 800deee:	60a2      	str	r2, [r4, #8]
 800def0:	6962      	ldr	r2, [r4, #20]
 800def2:	4252      	negs	r2, r2
 800def4:	61a2      	str	r2, [r4, #24]
 800def6:	6922      	ldr	r2, [r4, #16]
 800def8:	b942      	cbnz	r2, 800df0c <__swsetup_r+0xa4>
 800defa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800defe:	d1c5      	bne.n	800de8c <__swsetup_r+0x24>
 800df00:	bd38      	pop	{r3, r4, r5, pc}
 800df02:	0799      	lsls	r1, r3, #30
 800df04:	bf58      	it	pl
 800df06:	6962      	ldrpl	r2, [r4, #20]
 800df08:	60a2      	str	r2, [r4, #8]
 800df0a:	e7f4      	b.n	800def6 <__swsetup_r+0x8e>
 800df0c:	2000      	movs	r0, #0
 800df0e:	e7f7      	b.n	800df00 <__swsetup_r+0x98>
 800df10:	2400001c 	.word	0x2400001c

0800df14 <_raise_r>:
 800df14:	291f      	cmp	r1, #31
 800df16:	b538      	push	{r3, r4, r5, lr}
 800df18:	4605      	mov	r5, r0
 800df1a:	460c      	mov	r4, r1
 800df1c:	d904      	bls.n	800df28 <_raise_r+0x14>
 800df1e:	2316      	movs	r3, #22
 800df20:	6003      	str	r3, [r0, #0]
 800df22:	f04f 30ff 	mov.w	r0, #4294967295
 800df26:	bd38      	pop	{r3, r4, r5, pc}
 800df28:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800df2a:	b112      	cbz	r2, 800df32 <_raise_r+0x1e>
 800df2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800df30:	b94b      	cbnz	r3, 800df46 <_raise_r+0x32>
 800df32:	4628      	mov	r0, r5
 800df34:	f000 f830 	bl	800df98 <_getpid_r>
 800df38:	4622      	mov	r2, r4
 800df3a:	4601      	mov	r1, r0
 800df3c:	4628      	mov	r0, r5
 800df3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df42:	f000 b817 	b.w	800df74 <_kill_r>
 800df46:	2b01      	cmp	r3, #1
 800df48:	d00a      	beq.n	800df60 <_raise_r+0x4c>
 800df4a:	1c59      	adds	r1, r3, #1
 800df4c:	d103      	bne.n	800df56 <_raise_r+0x42>
 800df4e:	2316      	movs	r3, #22
 800df50:	6003      	str	r3, [r0, #0]
 800df52:	2001      	movs	r0, #1
 800df54:	e7e7      	b.n	800df26 <_raise_r+0x12>
 800df56:	2100      	movs	r1, #0
 800df58:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800df5c:	4620      	mov	r0, r4
 800df5e:	4798      	blx	r3
 800df60:	2000      	movs	r0, #0
 800df62:	e7e0      	b.n	800df26 <_raise_r+0x12>

0800df64 <raise>:
 800df64:	4b02      	ldr	r3, [pc, #8]	@ (800df70 <raise+0xc>)
 800df66:	4601      	mov	r1, r0
 800df68:	6818      	ldr	r0, [r3, #0]
 800df6a:	f7ff bfd3 	b.w	800df14 <_raise_r>
 800df6e:	bf00      	nop
 800df70:	2400001c 	.word	0x2400001c

0800df74 <_kill_r>:
 800df74:	b538      	push	{r3, r4, r5, lr}
 800df76:	4d07      	ldr	r5, [pc, #28]	@ (800df94 <_kill_r+0x20>)
 800df78:	2300      	movs	r3, #0
 800df7a:	4604      	mov	r4, r0
 800df7c:	4608      	mov	r0, r1
 800df7e:	4611      	mov	r1, r2
 800df80:	602b      	str	r3, [r5, #0]
 800df82:	f7f3 fa55 	bl	8001430 <_kill>
 800df86:	1c43      	adds	r3, r0, #1
 800df88:	d102      	bne.n	800df90 <_kill_r+0x1c>
 800df8a:	682b      	ldr	r3, [r5, #0]
 800df8c:	b103      	cbz	r3, 800df90 <_kill_r+0x1c>
 800df8e:	6023      	str	r3, [r4, #0]
 800df90:	bd38      	pop	{r3, r4, r5, pc}
 800df92:	bf00      	nop
 800df94:	24000494 	.word	0x24000494

0800df98 <_getpid_r>:
 800df98:	f7f3 ba42 	b.w	8001420 <_getpid>

0800df9c <__swhatbuf_r>:
 800df9c:	b570      	push	{r4, r5, r6, lr}
 800df9e:	460c      	mov	r4, r1
 800dfa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfa4:	2900      	cmp	r1, #0
 800dfa6:	b096      	sub	sp, #88	@ 0x58
 800dfa8:	4615      	mov	r5, r2
 800dfaa:	461e      	mov	r6, r3
 800dfac:	da0d      	bge.n	800dfca <__swhatbuf_r+0x2e>
 800dfae:	89a3      	ldrh	r3, [r4, #12]
 800dfb0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dfb4:	f04f 0100 	mov.w	r1, #0
 800dfb8:	bf14      	ite	ne
 800dfba:	2340      	movne	r3, #64	@ 0x40
 800dfbc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dfc0:	2000      	movs	r0, #0
 800dfc2:	6031      	str	r1, [r6, #0]
 800dfc4:	602b      	str	r3, [r5, #0]
 800dfc6:	b016      	add	sp, #88	@ 0x58
 800dfc8:	bd70      	pop	{r4, r5, r6, pc}
 800dfca:	466a      	mov	r2, sp
 800dfcc:	f000 f848 	bl	800e060 <_fstat_r>
 800dfd0:	2800      	cmp	r0, #0
 800dfd2:	dbec      	blt.n	800dfae <__swhatbuf_r+0x12>
 800dfd4:	9901      	ldr	r1, [sp, #4]
 800dfd6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dfda:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dfde:	4259      	negs	r1, r3
 800dfe0:	4159      	adcs	r1, r3
 800dfe2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dfe6:	e7eb      	b.n	800dfc0 <__swhatbuf_r+0x24>

0800dfe8 <__smakebuf_r>:
 800dfe8:	898b      	ldrh	r3, [r1, #12]
 800dfea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dfec:	079d      	lsls	r5, r3, #30
 800dfee:	4606      	mov	r6, r0
 800dff0:	460c      	mov	r4, r1
 800dff2:	d507      	bpl.n	800e004 <__smakebuf_r+0x1c>
 800dff4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dff8:	6023      	str	r3, [r4, #0]
 800dffa:	6123      	str	r3, [r4, #16]
 800dffc:	2301      	movs	r3, #1
 800dffe:	6163      	str	r3, [r4, #20]
 800e000:	b003      	add	sp, #12
 800e002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e004:	ab01      	add	r3, sp, #4
 800e006:	466a      	mov	r2, sp
 800e008:	f7ff ffc8 	bl	800df9c <__swhatbuf_r>
 800e00c:	9f00      	ldr	r7, [sp, #0]
 800e00e:	4605      	mov	r5, r0
 800e010:	4639      	mov	r1, r7
 800e012:	4630      	mov	r0, r6
 800e014:	f7fd fc0a 	bl	800b82c <_malloc_r>
 800e018:	b948      	cbnz	r0, 800e02e <__smakebuf_r+0x46>
 800e01a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e01e:	059a      	lsls	r2, r3, #22
 800e020:	d4ee      	bmi.n	800e000 <__smakebuf_r+0x18>
 800e022:	f023 0303 	bic.w	r3, r3, #3
 800e026:	f043 0302 	orr.w	r3, r3, #2
 800e02a:	81a3      	strh	r3, [r4, #12]
 800e02c:	e7e2      	b.n	800dff4 <__smakebuf_r+0xc>
 800e02e:	89a3      	ldrh	r3, [r4, #12]
 800e030:	6020      	str	r0, [r4, #0]
 800e032:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e036:	81a3      	strh	r3, [r4, #12]
 800e038:	9b01      	ldr	r3, [sp, #4]
 800e03a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e03e:	b15b      	cbz	r3, 800e058 <__smakebuf_r+0x70>
 800e040:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e044:	4630      	mov	r0, r6
 800e046:	f000 f81d 	bl	800e084 <_isatty_r>
 800e04a:	b128      	cbz	r0, 800e058 <__smakebuf_r+0x70>
 800e04c:	89a3      	ldrh	r3, [r4, #12]
 800e04e:	f023 0303 	bic.w	r3, r3, #3
 800e052:	f043 0301 	orr.w	r3, r3, #1
 800e056:	81a3      	strh	r3, [r4, #12]
 800e058:	89a3      	ldrh	r3, [r4, #12]
 800e05a:	431d      	orrs	r5, r3
 800e05c:	81a5      	strh	r5, [r4, #12]
 800e05e:	e7cf      	b.n	800e000 <__smakebuf_r+0x18>

0800e060 <_fstat_r>:
 800e060:	b538      	push	{r3, r4, r5, lr}
 800e062:	4d07      	ldr	r5, [pc, #28]	@ (800e080 <_fstat_r+0x20>)
 800e064:	2300      	movs	r3, #0
 800e066:	4604      	mov	r4, r0
 800e068:	4608      	mov	r0, r1
 800e06a:	4611      	mov	r1, r2
 800e06c:	602b      	str	r3, [r5, #0]
 800e06e:	f7f3 fa3f 	bl	80014f0 <_fstat>
 800e072:	1c43      	adds	r3, r0, #1
 800e074:	d102      	bne.n	800e07c <_fstat_r+0x1c>
 800e076:	682b      	ldr	r3, [r5, #0]
 800e078:	b103      	cbz	r3, 800e07c <_fstat_r+0x1c>
 800e07a:	6023      	str	r3, [r4, #0]
 800e07c:	bd38      	pop	{r3, r4, r5, pc}
 800e07e:	bf00      	nop
 800e080:	24000494 	.word	0x24000494

0800e084 <_isatty_r>:
 800e084:	b538      	push	{r3, r4, r5, lr}
 800e086:	4d06      	ldr	r5, [pc, #24]	@ (800e0a0 <_isatty_r+0x1c>)
 800e088:	2300      	movs	r3, #0
 800e08a:	4604      	mov	r4, r0
 800e08c:	4608      	mov	r0, r1
 800e08e:	602b      	str	r3, [r5, #0]
 800e090:	f7f3 fa3e 	bl	8001510 <_isatty>
 800e094:	1c43      	adds	r3, r0, #1
 800e096:	d102      	bne.n	800e09e <_isatty_r+0x1a>
 800e098:	682b      	ldr	r3, [r5, #0]
 800e09a:	b103      	cbz	r3, 800e09e <_isatty_r+0x1a>
 800e09c:	6023      	str	r3, [r4, #0]
 800e09e:	bd38      	pop	{r3, r4, r5, pc}
 800e0a0:	24000494 	.word	0x24000494

0800e0a4 <_init>:
 800e0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0a6:	bf00      	nop
 800e0a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0aa:	bc08      	pop	{r3}
 800e0ac:	469e      	mov	lr, r3
 800e0ae:	4770      	bx	lr

0800e0b0 <_fini>:
 800e0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0b2:	bf00      	nop
 800e0b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0b6:	bc08      	pop	{r3}
 800e0b8:	469e      	mov	lr, r3
 800e0ba:	4770      	bx	lr
