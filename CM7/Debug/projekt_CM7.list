
projekt_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012668  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d38  08012908  08012908  00013908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014640  08014640  000161d8  2**0
                  CONTENTS
  4 .ARM          00000008  08014640  08014640  00015640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014648  08014648  000161d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014648  08014648  00015648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801464c  0801464c  0001564c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  24000000  08014650  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  240001d8  08014828  000161d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000580  08014828  00016580  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000161d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000223dc  00000000  00000000  00016206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fe2  00000000  00000000  000385e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a10  00000000  00000000  0003c5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001445  00000000  00000000  0003dfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f579  00000000  00000000  0003f41d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000260d4  00000000  00000000  0007e996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019eb50  00000000  00000000  000a4a6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002435ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008528  00000000  00000000  00243600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0024bb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080128f0 	.word	0x080128f0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	080128f0 	.word	0x080128f0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a6c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b64 <SystemInit+0xfc>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a72:	4a3c      	ldr	r2, [pc, #240]	@ (8000b64 <SystemInit+0xfc>)
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a7c:	4b39      	ldr	r3, [pc, #228]	@ (8000b64 <SystemInit+0xfc>)
 8000a7e:	691b      	ldr	r3, [r3, #16]
 8000a80:	4a38      	ldr	r2, [pc, #224]	@ (8000b64 <SystemInit+0xfc>)
 8000a82:	f043 0310 	orr.w	r3, r3, #16
 8000a86:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a88:	4b37      	ldr	r3, [pc, #220]	@ (8000b68 <SystemInit+0x100>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f003 030f 	and.w	r3, r3, #15
 8000a90:	2b06      	cmp	r3, #6
 8000a92:	d807      	bhi.n	8000aa4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a94:	4b34      	ldr	r3, [pc, #208]	@ (8000b68 <SystemInit+0x100>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f023 030f 	bic.w	r3, r3, #15
 8000a9c:	4a32      	ldr	r2, [pc, #200]	@ (8000b68 <SystemInit+0x100>)
 8000a9e:	f043 0307 	orr.w	r3, r3, #7
 8000aa2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aa4:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <SystemInit+0x104>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a30      	ldr	r2, [pc, #192]	@ (8000b6c <SystemInit+0x104>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <SystemInit+0x104>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b6c <SystemInit+0x104>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	492c      	ldr	r1, [pc, #176]	@ (8000b6c <SystemInit+0x104>)
 8000abc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b70 <SystemInit+0x108>)
 8000abe:	4013      	ands	r3, r2
 8000ac0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ac2:	4b29      	ldr	r3, [pc, #164]	@ (8000b68 <SystemInit+0x100>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f003 0308 	and.w	r3, r3, #8
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d007      	beq.n	8000ade <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ace:	4b26      	ldr	r3, [pc, #152]	@ (8000b68 <SystemInit+0x100>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f023 030f 	bic.w	r3, r3, #15
 8000ad6:	4a24      	ldr	r2, [pc, #144]	@ (8000b68 <SystemInit+0x100>)
 8000ad8:	f043 0307 	orr.w	r3, r3, #7
 8000adc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ade:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <SystemInit+0x104>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <SystemInit+0x104>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000aea:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <SystemInit+0x104>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000af0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b6c <SystemInit+0x104>)
 8000af2:	4a20      	ldr	r2, [pc, #128]	@ (8000b74 <SystemInit+0x10c>)
 8000af4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000af6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <SystemInit+0x104>)
 8000af8:	4a1f      	ldr	r2, [pc, #124]	@ (8000b78 <SystemInit+0x110>)
 8000afa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <SystemInit+0x104>)
 8000afe:	4a1f      	ldr	r2, [pc, #124]	@ (8000b7c <SystemInit+0x114>)
 8000b00:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <SystemInit+0x104>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b08:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <SystemInit+0x104>)
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b7c <SystemInit+0x114>)
 8000b0c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b0e:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <SystemInit+0x104>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b14:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <SystemInit+0x104>)
 8000b16:	4a19      	ldr	r2, [pc, #100]	@ (8000b7c <SystemInit+0x114>)
 8000b18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <SystemInit+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <SystemInit+0x104>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a11      	ldr	r2, [pc, #68]	@ (8000b6c <SystemInit+0x104>)
 8000b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <SystemInit+0x104>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <SystemInit+0x118>)
 8000b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b36:	4a12      	ldr	r2, [pc, #72]	@ (8000b80 <SystemInit+0x118>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <SystemInit+0x11c>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <SystemInit+0x120>)
 8000b44:	4013      	ands	r3, r2
 8000b46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b4a:	d202      	bcs.n	8000b52 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <SystemInit+0x124>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b52:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <SystemInit+0x128>)
 8000b54:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b58:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00
 8000b68:	52002000 	.word	0x52002000
 8000b6c:	58024400 	.word	0x58024400
 8000b70:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b74:	02020200 	.word	0x02020200
 8000b78:	01ff0000 	.word	0x01ff0000
 8000b7c:	01010280 	.word	0x01010280
 8000b80:	580000c0 	.word	0x580000c0
 8000b84:	5c001000 	.word	0x5c001000
 8000b88:	ffff0000 	.word	0xffff0000
 8000b8c:	51008108 	.word	0x51008108
 8000b90:	52004000 	.word	0x52004000

08000b94 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	@ 0x28
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b9a:	f107 031c 	add.w	r3, r7, #28
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ba6:	463b      	mov	r3, r7
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
 8000bb4:	615a      	str	r2, [r3, #20]
 8000bb6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bb8:	4b35      	ldr	r3, [pc, #212]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000bba:	4a36      	ldr	r2, [pc, #216]	@ (8000c94 <MX_ADC1_Init+0x100>)
 8000bbc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bbe:	4b34      	ldr	r3, [pc, #208]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bc4:	4b32      	ldr	r3, [pc, #200]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000bc6:	2204      	movs	r2, #4
 8000bc8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bca:	4b31      	ldr	r3, [pc, #196]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bd0:	4b2f      	ldr	r3, [pc, #188]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000bd6:	4b2e      	ldr	r3, [pc, #184]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bdc:	4b2c      	ldr	r3, [pc, #176]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000be2:	4b2b      	ldr	r3, [pc, #172]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000be8:	4b29      	ldr	r3, [pc, #164]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000bee:	4b28      	ldr	r3, [pc, #160]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bf4:	4b26      	ldr	r3, [pc, #152]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000bfa:	4b25      	ldr	r3, [pc, #148]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c00:	4b23      	ldr	r3, [pc, #140]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000c08:	4b21      	ldr	r3, [pc, #132]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c0e:	4820      	ldr	r0, [pc, #128]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000c10:	f001 fb5e 	bl	80022d0 <HAL_ADC_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000c1a:	f000 fdd5 	bl	80017c8 <Error_Handler>
  }
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000c20:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c24:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000c26:	4b1a      	ldr	r3, [pc, #104]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c2c:	4818      	ldr	r0, [pc, #96]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000c2e:	f001 fb4f 	bl	80022d0 <HAL_ADC_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000c38:	f000 fdc6 	bl	80017c8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c40:	f107 031c 	add.w	r3, r7, #28
 8000c44:	4619      	mov	r1, r3
 8000c46:	4812      	ldr	r0, [pc, #72]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000c48:	f002 fbc8 	bl	80033dc <HAL_ADCEx_MultiModeConfigChannel>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000c52:	f000 fdb9 	bl	80017c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8000c56:	4b10      	ldr	r3, [pc, #64]	@ (8000c98 <MX_ADC1_Init+0x104>)
 8000c58:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c5a:	2306      	movs	r3, #6
 8000c5c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c62:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000c66:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c68:	2304      	movs	r3, #4
 8000c6a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c74:	463b      	mov	r3, r7
 8000c76:	4619      	mov	r1, r3
 8000c78:	4805      	ldr	r0, [pc, #20]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000c7a:	f001 fe97 	bl	80029ac <HAL_ADC_ConfigChannel>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8000c84:	f000 fda0 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c88:	bf00      	nop
 8000c8a:	3728      	adds	r7, #40	@ 0x28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	240001f4 	.word	0x240001f4
 8000c94:	40022000 	.word	0x40022000
 8000c98:	4fb80000 	.word	0x4fb80000

08000c9c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b0ba      	sub	sp, #232	@ 0xe8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	22c0      	movs	r2, #192	@ 0xc0
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f00d ffc0 	bl	800ec42 <memset>
  if(adcHandle->Instance==ADC1)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a43      	ldr	r2, [pc, #268]	@ (8000dd4 <HAL_ADC_MspInit+0x138>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d17f      	bne.n	8000dcc <HAL_ADC_MspInit+0x130>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ccc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000cd8:	2304      	movs	r3, #4
 8000cda:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8000cdc:	230a      	movs	r3, #10
 8000cde:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000cec:	23c0      	movs	r3, #192	@ 0xc0
 8000cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000cf0:	2320      	movs	r3, #32
 8000cf2:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cfe:	f107 0310 	add.w	r3, r7, #16
 8000d02:	4618      	mov	r0, r3
 8000d04:	f006 fe1c 	bl	8007940 <HAL_RCCEx_PeriphCLKConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8000d0e:	f000 fd5b 	bl	80017c8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d12:	4b31      	ldr	r3, [pc, #196]	@ (8000dd8 <HAL_ADC_MspInit+0x13c>)
 8000d14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d18:	4a2f      	ldr	r2, [pc, #188]	@ (8000dd8 <HAL_ADC_MspInit+0x13c>)
 8000d1a:	f043 0320 	orr.w	r3, r3, #32
 8000d1e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d22:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd8 <HAL_ADC_MspInit+0x13c>)
 8000d24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d28:	f003 0320 	and.w	r3, r3, #32
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d30:	4b29      	ldr	r3, [pc, #164]	@ (8000dd8 <HAL_ADC_MspInit+0x13c>)
 8000d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d36:	4a28      	ldr	r2, [pc, #160]	@ (8000dd8 <HAL_ADC_MspInit+0x13c>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d40:	4b25      	ldr	r3, [pc, #148]	@ (8000dd8 <HAL_ADC_MspInit+0x13c>)
 8000d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_INP19
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d4e:	2320      	movs	r3, #32
 8000d50:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d54:	2303      	movs	r3, #3
 8000d56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d60:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d64:	4619      	mov	r1, r3
 8000d66:	481d      	ldr	r0, [pc, #116]	@ (8000ddc <HAL_ADC_MspInit+0x140>)
 8000d68:	f004 ff4c 	bl	8005c04 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000d6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000d6e:	4a1d      	ldr	r2, [pc, #116]	@ (8000de4 <HAL_ADC_MspInit+0x148>)
 8000d70:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000d72:	4b1b      	ldr	r3, [pc, #108]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000d74:	2209      	movs	r2, #9
 8000d76:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d78:	4b19      	ldr	r3, [pc, #100]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d7e:	4b18      	ldr	r3, [pc, #96]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d84:	4b16      	ldr	r3, [pc, #88]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000d86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d8a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d8c:	4b14      	ldr	r3, [pc, #80]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000d8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d92:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d94:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000d96:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d9a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d9c:	4b10      	ldr	r3, [pc, #64]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000d9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000da2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000da4:	4b0e      	ldr	r3, [pc, #56]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000daa:	4b0d      	ldr	r3, [pc, #52]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000db0:	480b      	ldr	r0, [pc, #44]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000db2:	f002 fd01 	bl	80037b8 <HAL_DMA_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <HAL_ADC_MspInit+0x124>
    {
      Error_Handler();
 8000dbc:	f000 fd04 	bl	80017c8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a07      	ldr	r2, [pc, #28]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000dc4:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000dc6:	4a06      	ldr	r2, [pc, #24]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000dcc:	bf00      	nop
 8000dce:	37e8      	adds	r7, #232	@ 0xe8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40022000 	.word	0x40022000
 8000dd8:	58024400 	.word	0x58024400
 8000ddc:	58020000 	.word	0x58020000
 8000de0:	24000258 	.word	0x24000258
 8000de4:	40020010 	.word	0x40020010

08000de8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dee:	4b0d      	ldr	r3, [pc, #52]	@ (8000e24 <MX_DMA_Init+0x3c>)
 8000df0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000df4:	4a0b      	ldr	r2, [pc, #44]	@ (8000e24 <MX_DMA_Init+0x3c>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000dfe:	4b09      	ldr	r3, [pc, #36]	@ (8000e24 <MX_DMA_Init+0x3c>)
 8000e00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2100      	movs	r1, #0
 8000e10:	200b      	movs	r0, #11
 8000e12:	f002 fc9c 	bl	800374e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e16:	200b      	movs	r0, #11
 8000e18:	f002 fcb3 	bl	8003782 <HAL_NVIC_EnableIRQ>

}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	58024400 	.word	0x58024400

08000e28 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08c      	sub	sp, #48	@ 0x30
 8000e2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2e:	f107 031c 	add.w	r3, r7, #28
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	609a      	str	r2, [r3, #8]
 8000e3a:	60da      	str	r2, [r3, #12]
 8000e3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3e:	4b73      	ldr	r3, [pc, #460]	@ (800100c <MX_GPIO_Init+0x1e4>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e44:	4a71      	ldr	r2, [pc, #452]	@ (800100c <MX_GPIO_Init+0x1e4>)
 8000e46:	f043 0304 	orr.w	r3, r3, #4
 8000e4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e4e:	4b6f      	ldr	r3, [pc, #444]	@ (800100c <MX_GPIO_Init+0x1e4>)
 8000e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e54:	f003 0304 	and.w	r3, r3, #4
 8000e58:	61bb      	str	r3, [r7, #24]
 8000e5a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5c:	4b6b      	ldr	r3, [pc, #428]	@ (800100c <MX_GPIO_Init+0x1e4>)
 8000e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e62:	4a6a      	ldr	r2, [pc, #424]	@ (800100c <MX_GPIO_Init+0x1e4>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e6c:	4b67      	ldr	r3, [pc, #412]	@ (800100c <MX_GPIO_Init+0x1e4>)
 8000e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7a:	4b64      	ldr	r3, [pc, #400]	@ (800100c <MX_GPIO_Init+0x1e4>)
 8000e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e80:	4a62      	ldr	r2, [pc, #392]	@ (800100c <MX_GPIO_Init+0x1e4>)
 8000e82:	f043 0302 	orr.w	r3, r3, #2
 8000e86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e8a:	4b60      	ldr	r3, [pc, #384]	@ (800100c <MX_GPIO_Init+0x1e4>)
 8000e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e98:	4b5c      	ldr	r3, [pc, #368]	@ (800100c <MX_GPIO_Init+0x1e4>)
 8000e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e9e:	4a5b      	ldr	r2, [pc, #364]	@ (800100c <MX_GPIO_Init+0x1e4>)
 8000ea0:	f043 0308 	orr.w	r3, r3, #8
 8000ea4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ea8:	4b58      	ldr	r3, [pc, #352]	@ (800100c <MX_GPIO_Init+0x1e4>)
 8000eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eae:	f003 0308 	and.w	r3, r3, #8
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eb6:	4b55      	ldr	r3, [pc, #340]	@ (800100c <MX_GPIO_Init+0x1e4>)
 8000eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ebc:	4a53      	ldr	r2, [pc, #332]	@ (800100c <MX_GPIO_Init+0x1e4>)
 8000ebe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ec2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ec6:	4b51      	ldr	r3, [pc, #324]	@ (800100c <MX_GPIO_Init+0x1e4>)
 8000ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ed4:	4b4d      	ldr	r3, [pc, #308]	@ (800100c <MX_GPIO_Init+0x1e4>)
 8000ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eda:	4a4c      	ldr	r2, [pc, #304]	@ (800100c <MX_GPIO_Init+0x1e4>)
 8000edc:	f043 0310 	orr.w	r3, r3, #16
 8000ee0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ee4:	4b49      	ldr	r3, [pc, #292]	@ (800100c <MX_GPIO_Init+0x1e4>)
 8000ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eea:	f003 0310 	and.w	r3, r3, #16
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000ef8:	4845      	ldr	r0, [pc, #276]	@ (8001010 <MX_GPIO_Init+0x1e8>)
 8000efa:	f005 f833 	bl	8005f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2102      	movs	r1, #2
 8000f02:	4844      	ldr	r0, [pc, #272]	@ (8001014 <MX_GPIO_Init+0x1ec>)
 8000f04:	f005 f82e 	bl	8005f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000f08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000f16:	f107 031c 	add.w	r3, r7, #28
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	483e      	ldr	r0, [pc, #248]	@ (8001018 <MX_GPIO_Init+0x1f0>)
 8000f1e:	f004 fe71 	bl	8005c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f22:	2332      	movs	r3, #50	@ 0x32
 8000f24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f32:	230b      	movs	r3, #11
 8000f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4836      	ldr	r0, [pc, #216]	@ (8001018 <MX_GPIO_Init+0x1f0>)
 8000f3e:	f004 fe61 	bl	8005c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f42:	2386      	movs	r3, #134	@ 0x86
 8000f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f52:	230b      	movs	r3, #11
 8000f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f107 031c 	add.w	r3, r7, #28
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	482f      	ldr	r0, [pc, #188]	@ (800101c <MX_GPIO_Init+0x1f4>)
 8000f5e:	f004 fe51 	bl	8005c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin;
 8000f62:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4825      	ldr	r0, [pc, #148]	@ (8001010 <MX_GPIO_Init+0x1e8>)
 8000f7c:	f004 fe42 	bl	8005c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f92:	230b      	movs	r3, #11
 8000f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f96:	f107 031c 	add.w	r3, r7, #28
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	481c      	ldr	r0, [pc, #112]	@ (8001010 <MX_GPIO_Init+0x1e8>)
 8000f9e:	f004 fe31 	bl	8005c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000fa2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000fa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000fb4:	230a      	movs	r3, #10
 8000fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb8:	f107 031c 	add.w	r3, r7, #28
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4817      	ldr	r0, [pc, #92]	@ (800101c <MX_GPIO_Init+0x1f4>)
 8000fc0:	f004 fe20 	bl	8005c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000fc4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000fc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fd6:	230b      	movs	r3, #11
 8000fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fda:	f107 031c 	add.w	r3, r7, #28
 8000fde:	4619      	mov	r1, r3
 8000fe0:	480f      	ldr	r0, [pc, #60]	@ (8001020 <MX_GPIO_Init+0x1f8>)
 8000fe2:	f004 fe0f 	bl	8005c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fea:	2301      	movs	r3, #1
 8000fec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000ff6:	f107 031c 	add.w	r3, r7, #28
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4805      	ldr	r0, [pc, #20]	@ (8001014 <MX_GPIO_Init+0x1ec>)
 8000ffe:	f004 fe01 	bl	8005c04 <HAL_GPIO_Init>

}
 8001002:	bf00      	nop
 8001004:	3730      	adds	r7, #48	@ 0x30
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	58024400 	.word	0x58024400
 8001010:	58020400 	.word	0x58020400
 8001014:	58021000 	.word	0x58021000
 8001018:	58020800 	.word	0x58020800
 800101c:	58020000 	.word	0x58020000
 8001020:	58021800 	.word	0x58021800

08001024 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001028:	4b1b      	ldr	r3, [pc, #108]	@ (8001098 <MX_I2C2_Init+0x74>)
 800102a:	4a1c      	ldr	r2, [pc, #112]	@ (800109c <MX_I2C2_Init+0x78>)
 800102c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 800102e:	4b1a      	ldr	r3, [pc, #104]	@ (8001098 <MX_I2C2_Init+0x74>)
 8001030:	4a1b      	ldr	r2, [pc, #108]	@ (80010a0 <MX_I2C2_Init+0x7c>)
 8001032:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001034:	4b18      	ldr	r3, [pc, #96]	@ (8001098 <MX_I2C2_Init+0x74>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800103a:	4b17      	ldr	r3, [pc, #92]	@ (8001098 <MX_I2C2_Init+0x74>)
 800103c:	2201      	movs	r2, #1
 800103e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001040:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <MX_I2C2_Init+0x74>)
 8001042:	2200      	movs	r2, #0
 8001044:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001046:	4b14      	ldr	r3, [pc, #80]	@ (8001098 <MX_I2C2_Init+0x74>)
 8001048:	2200      	movs	r2, #0
 800104a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800104c:	4b12      	ldr	r3, [pc, #72]	@ (8001098 <MX_I2C2_Init+0x74>)
 800104e:	2200      	movs	r2, #0
 8001050:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001052:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <MX_I2C2_Init+0x74>)
 8001054:	2200      	movs	r2, #0
 8001056:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001058:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <MX_I2C2_Init+0x74>)
 800105a:	2200      	movs	r2, #0
 800105c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800105e:	480e      	ldr	r0, [pc, #56]	@ (8001098 <MX_I2C2_Init+0x74>)
 8001060:	f004 ffc8 	bl	8005ff4 <HAL_I2C_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800106a:	f000 fbad 	bl	80017c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800106e:	2100      	movs	r1, #0
 8001070:	4809      	ldr	r0, [pc, #36]	@ (8001098 <MX_I2C2_Init+0x74>)
 8001072:	f005 fb8d 	bl	8006790 <HAL_I2CEx_ConfigAnalogFilter>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800107c:	f000 fba4 	bl	80017c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001080:	2100      	movs	r1, #0
 8001082:	4805      	ldr	r0, [pc, #20]	@ (8001098 <MX_I2C2_Init+0x74>)
 8001084:	f005 fbcf 	bl	8006826 <HAL_I2CEx_ConfigDigitalFilter>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800108e:	f000 fb9b 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	240002d0 	.word	0x240002d0
 800109c:	40005800 	.word	0x40005800
 80010a0:	00707cbb 	.word	0x00707cbb

080010a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b0ba      	sub	sp, #232	@ 0xe8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010bc:	f107 0310 	add.w	r3, r7, #16
 80010c0:	22c0      	movs	r2, #192	@ 0xc0
 80010c2:	2100      	movs	r1, #0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f00d fdbc 	bl	800ec42 <memset>
  if(i2cHandle->Instance==I2C2)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a27      	ldr	r2, [pc, #156]	@ (800116c <HAL_I2C_MspInit+0xc8>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d146      	bne.n	8001162 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80010d4:	f04f 0208 	mov.w	r2, #8
 80010d8:	f04f 0300 	mov.w	r3, #0
 80010dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80010e0:	2300      	movs	r3, #0
 80010e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010e6:	f107 0310 	add.w	r3, r7, #16
 80010ea:	4618      	mov	r0, r3
 80010ec:	f006 fc28 	bl	8007940 <HAL_RCCEx_PeriphCLKConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80010f6:	f000 fb67 	bl	80017c8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001170 <HAL_I2C_MspInit+0xcc>)
 80010fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001100:	4a1b      	ldr	r2, [pc, #108]	@ (8001170 <HAL_I2C_MspInit+0xcc>)
 8001102:	f043 0302 	orr.w	r3, r3, #2
 8001106:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800110a:	4b19      	ldr	r3, [pc, #100]	@ (8001170 <HAL_I2C_MspInit+0xcc>)
 800110c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001118:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800111c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001120:	2312      	movs	r3, #18
 8001122:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001132:	2304      	movs	r3, #4
 8001134:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001138:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800113c:	4619      	mov	r1, r3
 800113e:	480d      	ldr	r0, [pc, #52]	@ (8001174 <HAL_I2C_MspInit+0xd0>)
 8001140:	f004 fd60 	bl	8005c04 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001144:	4b0a      	ldr	r3, [pc, #40]	@ (8001170 <HAL_I2C_MspInit+0xcc>)
 8001146:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800114a:	4a09      	ldr	r2, [pc, #36]	@ (8001170 <HAL_I2C_MspInit+0xcc>)
 800114c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001150:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001154:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <HAL_I2C_MspInit+0xcc>)
 8001156:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800115a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001162:	bf00      	nop
 8001164:	37e8      	adds	r7, #232	@ 0xe8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40005800 	.word	0x40005800
 8001170:	58024400 	.word	0x58024400
 8001174:	58020400 	.word	0x58020400

08001178 <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 800118e:	2308      	movs	r3, #8
 8001190:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 8001192:	2028      	movs	r0, #40	@ 0x28
 8001194:	f000 fe8a 	bl	8001eac <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	7bfa      	ldrb	r2, [r7, #15]
 800119e:	2130      	movs	r1, #48	@ 0x30
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 f829 	bl	80011f8 <lcd_write>
	HAL_Delay(5);
 80011a6:	2005      	movs	r0, #5
 80011a8:	f000 fe80 	bl	8001eac <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	7bfa      	ldrb	r2, [r7, #15]
 80011b2:	2130      	movs	r1, #48	@ 0x30
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 f81f 	bl	80011f8 <lcd_write>
	HAL_Delay(1);
 80011ba:	2001      	movs	r0, #1
 80011bc:	f000 fe76 	bl	8001eac <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	7bfa      	ldrb	r2, [r7, #15]
 80011c6:	2130      	movs	r1, #48	@ 0x30
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 f815 	bl	80011f8 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	7bfa      	ldrb	r2, [r7, #15]
 80011d4:	2102      	movs	r1, #2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f80e 	bl	80011f8 <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	7bfa      	ldrb	r2, [r7, #15]
 80011e2:	210c      	movs	r1, #12
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 f807 	bl	80011f8 <lcd_write>

	/* clear */
	lcd_clear(lcd);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 f89f 	bl	800132e <lcd_clear>

}
 80011f0:	bf00      	nop
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af02      	add	r7, sp, #8
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
 8001202:	460b      	mov	r3, r1
 8001204:	71bb      	strb	r3, [r7, #6]
 8001206:	4613      	mov	r3, r2
 8001208:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 800120a:	79bb      	ldrb	r3, [r7, #6]
 800120c:	f023 030f 	bic.w	r3, r3, #15
 8001210:	b2da      	uxtb	r2, r3
 8001212:	797b      	ldrb	r3, [r7, #5]
 8001214:	4313      	orrs	r3, r2
 8001216:	b2db      	uxtb	r3, r3
 8001218:	f043 0304 	orr.w	r3, r3, #4
 800121c:	b2db      	uxtb	r3, r3
 800121e:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 8001220:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001224:	f023 030f 	bic.w	r3, r3, #15
 8001228:	b25a      	sxtb	r2, r3
 800122a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800122e:	4313      	orrs	r3, r2
 8001230:	b25b      	sxtb	r3, r3
 8001232:	b2db      	uxtb	r3, r3
 8001234:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 8001236:	79bb      	ldrb	r3, [r7, #6]
 8001238:	011b      	lsls	r3, r3, #4
 800123a:	b2da      	uxtb	r2, r3
 800123c:	797b      	ldrb	r3, [r7, #5]
 800123e:	4313      	orrs	r3, r2
 8001240:	b2db      	uxtb	r3, r3
 8001242:	f043 0304 	orr.w	r3, r3, #4
 8001246:	b2db      	uxtb	r3, r3
 8001248:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 800124a:	79bb      	ldrb	r3, [r7, #6]
 800124c:	011b      	lsls	r3, r3, #4
 800124e:	b25a      	sxtb	r2, r3
 8001250:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001254:	4313      	orrs	r3, r2
 8001256:	b25b      	sxtb	r3, r3
 8001258:	b2db      	uxtb	r3, r3
 800125a:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	b299      	uxth	r1, r3
 8001260:	f107 020c 	add.w	r2, r7, #12
 8001264:	2364      	movs	r3, #100	@ 0x64
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2304      	movs	r3, #4
 800126a:	4805      	ldr	r0, [pc, #20]	@ (8001280 <lcd_write+0x88>)
 800126c:	f004 ff5e 	bl	800612c <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8001270:	2005      	movs	r0, #5
 8001272:	f000 fe1b 	bl	8001eac <HAL_Delay>
}
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	240002d0 	.word	0x240002d0

08001284 <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	73fb      	strb	r3, [r7, #15]
 8001290:	2300      	movs	r3, #0
 8001292:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 800129e:	2308      	movs	r3, #8
 80012a0:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 f843 	bl	800132e <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	7bfa      	ldrb	r2, [r7, #15]
 80012ae:	2180      	movs	r1, #128	@ 0x80
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ffa1 	bl	80011f8 <lcd_write>
	while(lcd->f_line[i])
 80012b6:	e00f      	b.n	80012d8 <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	7818      	ldrb	r0, [r3, #0]
 80012bc:	7bbb      	ldrb	r3, [r7, #14]
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	7859      	ldrb	r1, [r3, #1]
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	461a      	mov	r2, r3
 80012ce:	f7ff ff93 	bl	80011f8 <lcd_write>
		i++;
 80012d2:	7bbb      	ldrb	r3, [r7, #14]
 80012d4:	3301      	adds	r3, #1
 80012d6:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 80012d8:	7bbb      	ldrb	r3, [r7, #14]
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	4413      	add	r3, r2
 80012de:	785b      	ldrb	r3, [r3, #1]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1e9      	bne.n	80012b8 <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	7bfa      	ldrb	r2, [r7, #15]
 80012ee:	21c0      	movs	r1, #192	@ 0xc0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff81 	bl	80011f8 <lcd_write>
	while(lcd->s_line[i])
 80012f6:	e00f      	b.n	8001318 <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	7818      	ldrb	r0, [r3, #0]
 80012fc:	7bbb      	ldrb	r3, [r7, #14]
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	7c99      	ldrb	r1, [r3, #18]
 8001304:	7bfb      	ldrb	r3, [r7, #15]
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	b2db      	uxtb	r3, r3
 800130c:	461a      	mov	r2, r3
 800130e:	f7ff ff73 	bl	80011f8 <lcd_write>
		i++;
 8001312:	7bbb      	ldrb	r3, [r7, #14]
 8001314:	3301      	adds	r3, #1
 8001316:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 8001318:	7bbb      	ldrb	r3, [r7, #14]
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	7c9b      	ldrb	r3, [r3, #18]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1e9      	bne.n	80012f8 <lcd_display+0x74>
	}
}
 8001324:	bf00      	nop
 8001326:	bf00      	nop
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b084      	sub	sp, #16
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 8001344:	2308      	movs	r3, #8
 8001346:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	7bfa      	ldrb	r2, [r7, #15]
 800134e:	2101      	movs	r1, #1
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff51 	bl	80011f8 <lcd_write>
}
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <SendDebugMessage>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void SendDebugMessage(const char* message) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff f809 	bl	8000380 <strlen>
 800136e:	4603      	mov	r3, r0
 8001370:	b29a      	uxth	r2, r3
 8001372:	f04f 33ff 	mov.w	r3, #4294967295
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	4803      	ldr	r0, [pc, #12]	@ (8001388 <SendDebugMessage+0x28>)
 800137a:	f00a f91b 	bl	800b5b4 <HAL_UART_Transmit>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	2400039c 	.word	0x2400039c

0800138c <HAL_UART_RxCpltCallback>:
    snprintf(buffer, sizeof(buffer), "%.2f", value);
    SendDebugMessage(buffer);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	SendDebugMessage(rx_data);
 8001394:	4811      	ldr	r0, [pc, #68]	@ (80013dc <HAL_UART_RxCpltCallback+0x50>)
 8001396:	f7ff ffe3 	bl	8001360 <SendDebugMessage>
	int rx_data_int = 100*(rx_data[0]-'0') + 10*(rx_data[1]-'0') + (rx_data[2]-'0');
 800139a:	4b10      	ldr	r3, [pc, #64]	@ (80013dc <HAL_UART_RxCpltCallback+0x50>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	3b30      	subs	r3, #48	@ 0x30
 80013a0:	2264      	movs	r2, #100	@ 0x64
 80013a2:	fb02 f103 	mul.w	r1, r2, r3
 80013a6:	4b0d      	ldr	r3, [pc, #52]	@ (80013dc <HAL_UART_RxCpltCallback+0x50>)
 80013a8:	785b      	ldrb	r3, [r3, #1]
 80013aa:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80013ae:	4613      	mov	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	18ca      	adds	r2, r1, r3
 80013b8:	4b08      	ldr	r3, [pc, #32]	@ (80013dc <HAL_UART_RxCpltCallback+0x50>)
 80013ba:	789b      	ldrb	r3, [r3, #2]
 80013bc:	3b30      	subs	r3, #48	@ 0x30
 80013be:	4413      	add	r3, r2
 80013c0:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, rx_data_int);
 80013c2:	4b07      	ldr	r3, [pc, #28]	@ (80013e0 <HAL_UART_RxCpltCallback+0x54>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_UART_Receive_IT(&huart3, &rx_data, 3);
 80013ca:	2203      	movs	r2, #3
 80013cc:	4903      	ldr	r1, [pc, #12]	@ (80013dc <HAL_UART_RxCpltCallback+0x50>)
 80013ce:	4805      	ldr	r0, [pc, #20]	@ (80013e4 <HAL_UART_RxCpltCallback+0x58>)
 80013d0:	f00a f97e 	bl	800b6d0 <HAL_UART_Receive_IT>
}
 80013d4:	bf00      	nop
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	24000324 	.word	0x24000324
 80013e0:	24000350 	.word	0x24000350
 80013e4:	2400039c 	.word	0x2400039c

080013e8 <Servo_SetAngle>:

void Servo_SetAngle(uint8_t angle) {
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
    angle = angle>180 ? 180 : angle;
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	2bb4      	cmp	r3, #180	@ 0xb4
 80013f6:	bf28      	it	cs
 80013f8:	23b4      	movcs	r3, #180	@ 0xb4
 80013fa:	71fb      	strb	r3, [r7, #7]
    angle = angle<0 ? 0 : angle;
    uint32_t pulse_length = 500 + (angle * 2000 / 180);
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001402:	fb02 f303 	mul.w	r3, r2, r3
 8001406:	4a0f      	ldr	r2, [pc, #60]	@ (8001444 <Servo_SetAngle+0x5c>)
 8001408:	fb82 1203 	smull	r1, r2, r2, r3
 800140c:	441a      	add	r2, r3
 800140e:	11d2      	asrs	r2, r2, #7
 8001410:	17db      	asrs	r3, r3, #31
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001418:	60fb      	str	r3, [r7, #12]
	uint32_t ccr_value = (pulse_length * (htim2.Init.Period + 1)) / 20000;
 800141a:	4b0b      	ldr	r3, [pc, #44]	@ (8001448 <Servo_SetAngle+0x60>)
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	3301      	adds	r3, #1
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	fb02 f303 	mul.w	r3, r2, r3
 8001426:	4a09      	ldr	r2, [pc, #36]	@ (800144c <Servo_SetAngle+0x64>)
 8001428:	fba2 2303 	umull	r2, r3, r2, r3
 800142c:	0b9b      	lsrs	r3, r3, #14
 800142e:	60bb      	str	r3, [r7, #8]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, ccr_value);
 8001430:	4b05      	ldr	r3, [pc, #20]	@ (8001448 <Servo_SetAngle+0x60>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	68ba      	ldr	r2, [r7, #8]
 8001436:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001438:	bf00      	nop
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	b60b60b7 	.word	0xb60b60b7
 8001448:	24000350 	.word	0x24000350
 800144c:	d1b71759 	.word	0xd1b71759

08001450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	@ 0x28
 8001454:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001456:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800145a:	627b      	str	r3, [r7, #36]	@ 0x24
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800145c:	bf00      	nop
 800145e:	4b94      	ldr	r3, [pc, #592]	@ (80016b0 <main+0x260>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d004      	beq.n	8001474 <main+0x24>
 800146a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146c:	1e5a      	subs	r2, r3, #1
 800146e:	627a      	str	r2, [r7, #36]	@ 0x24
 8001470:	2b00      	cmp	r3, #0
 8001472:	dcf4      	bgt.n	800145e <main+0xe>
  if ( timeout < 0 )
 8001474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001476:	2b00      	cmp	r3, #0
 8001478:	da01      	bge.n	800147e <main+0x2e>
  {
  Error_Handler();
 800147a:	f000 f9a5 	bl	80017c8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800147e:	f000 fc83 	bl	8001d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001482:	f000 f92f 	bl	80016e4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001486:	4b8a      	ldr	r3, [pc, #552]	@ (80016b0 <main+0x260>)
 8001488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800148c:	4a88      	ldr	r2, [pc, #544]	@ (80016b0 <main+0x260>)
 800148e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001492:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001496:	4b86      	ldr	r3, [pc, #536]	@ (80016b0 <main+0x260>)
 8001498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800149c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	68fb      	ldr	r3, [r7, #12]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80014a4:	2000      	movs	r0, #0
 80014a6:	f004 fd77 	bl	8005f98 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80014aa:	2100      	movs	r1, #0
 80014ac:	2000      	movs	r0, #0
 80014ae:	f004 fd8d 	bl	8005fcc <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80014b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014b6:	627b      	str	r3, [r7, #36]	@ 0x24
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80014b8:	bf00      	nop
 80014ba:	4b7d      	ldr	r3, [pc, #500]	@ (80016b0 <main+0x260>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d104      	bne.n	80014d0 <main+0x80>
 80014c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c8:	1e5a      	subs	r2, r3, #1
 80014ca:	627a      	str	r2, [r7, #36]	@ 0x24
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	dcf4      	bgt.n	80014ba <main+0x6a>
if ( timeout < 0 )
 80014d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	da01      	bge.n	80014da <main+0x8a>
{
Error_Handler();
 80014d6:	f000 f977 	bl	80017c8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014da:	f7ff fca5 	bl	8000e28 <MX_GPIO_Init>
  MX_DMA_Init();
 80014de:	f7ff fc83 	bl	8000de8 <MX_DMA_Init>
  MX_TIM2_Init();
 80014e2:	f000 fa9b 	bl	8001a1c <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80014e6:	f000 fb67 	bl	8001bb8 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 80014ea:	f7ff fd9b 	bl	8001024 <MX_I2C2_Init>
  MX_ADC1_Init();
 80014ee:	f7ff fb51 	bl	8000b94 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	disp.addr = (0x27 << 1);
 80014f2:	4b70      	ldr	r3, [pc, #448]	@ (80016b4 <main+0x264>)
 80014f4:	224e      	movs	r2, #78	@ 0x4e
 80014f6:	701a      	strb	r2, [r3, #0]
	disp.bl = true;
 80014f8:	4b6e      	ldr	r3, [pc, #440]	@ (80016b4 <main+0x264>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	lcd_init(&disp);
 8001500:	486c      	ldr	r0, [pc, #432]	@ (80016b4 <main+0x264>)
 8001502:	f7ff fe39 	bl	8001178 <lcd_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  TIM2->CCR1 = 100;
 8001506:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800150a:	2264      	movs	r2, #100	@ 0x64
 800150c:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 800150e:	2100      	movs	r1, #0
 8001510:	4869      	ldr	r0, [pc, #420]	@ (80016b8 <main+0x268>)
 8001512:	f008 ffcb 	bl	800a4ac <HAL_TIM_PWM_Start_IT>
  HAL_UART_Receive_IT(&huart3, &rx_data, 3);
 8001516:	2203      	movs	r2, #3
 8001518:	4968      	ldr	r1, [pc, #416]	@ (80016bc <main+0x26c>)
 800151a:	4869      	ldr	r0, [pc, #420]	@ (80016c0 <main+0x270>)
 800151c:	f00a f8d8 	bl	800b6d0 <HAL_UART_Receive_IT>

  while (1)
  {

	HAL_ADC_Start(&hadc1);
 8001520:	4868      	ldr	r0, [pc, #416]	@ (80016c4 <main+0x274>)
 8001522:	f001 f877 	bl	8002614 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,20);
 8001526:	2114      	movs	r1, #20
 8001528:	4866      	ldr	r0, [pc, #408]	@ (80016c4 <main+0x274>)
 800152a:	f001 f93d 	bl	80027a8 <HAL_ADC_PollForConversion>
	uint16_t v = HAL_ADC_GetValue(&hadc1);
 800152e:	4865      	ldr	r0, [pc, #404]	@ (80016c4 <main+0x274>)
 8001530:	f001 fa2e 	bl	8002990 <HAL_ADC_GetValue>
 8001534:	4603      	mov	r3, r0
 8001536:	847b      	strh	r3, [r7, #34]	@ 0x22

	float voltage = 3.3 * v / 65535;
 8001538:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800153a:	ee07 3a90 	vmov	s15, r3
 800153e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001542:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 8001680 <main+0x230>
 8001546:	ee27 6b06 	vmul.f64	d6, d7, d6
 800154a:	ed9f 5b4f 	vldr	d5, [pc, #316]	@ 8001688 <main+0x238>
 800154e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001552:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001556:	edc7 7a07 	vstr	s15, [r7, #28]
	float resistance = (( voltage)/(3.3 - voltage) * 4700);
 800155a:	edd7 7a07 	vldr	s15, [r7, #28]
 800155e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001562:	edd7 7a07 	vldr	s15, [r7, #28]
 8001566:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800156a:	ed9f 6b45 	vldr	d6, [pc, #276]	@ 8001680 <main+0x230>
 800156e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001572:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001576:	ed9f 6b46 	vldr	d6, [pc, #280]	@ 8001690 <main+0x240>
 800157a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800157e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001582:	edc7 7a06 	vstr	s15, [r7, #24]
	float lux = (10 * pow(8000, 1/0.6)) / pow(resistance, 1/0.6);
 8001586:	edd7 7a06 	vldr	s15, [r7, #24]
 800158a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800158e:	ed9f 1b42 	vldr	d1, [pc, #264]	@ 8001698 <main+0x248>
 8001592:	eeb0 0b47 	vmov.f64	d0, d7
 8001596:	f010 fee7 	bl	8012368 <pow>
 800159a:	eeb0 6b40 	vmov.f64	d6, d0
 800159e:	ed9f 5b40 	vldr	d5, [pc, #256]	@ 80016a0 <main+0x250>
 80015a2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80015a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015aa:	edc7 7a05 	vstr	s15, [r7, #20]

	sprintf((char *)disp.f_line, "%.2f", lux);
 80015ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80015b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015b6:	ec53 2b17 	vmov	r2, r3, d7
 80015ba:	4943      	ldr	r1, [pc, #268]	@ (80016c8 <main+0x278>)
 80015bc:	4843      	ldr	r0, [pc, #268]	@ (80016cc <main+0x27c>)
 80015be:	f00d fadd 	bl	800eb7c <siprintf>
	sprintf((char *)disp.s_line, "uwu");
 80015c2:	4943      	ldr	r1, [pc, #268]	@ (80016d0 <main+0x280>)
 80015c4:	4843      	ldr	r0, [pc, #268]	@ (80016d4 <main+0x284>)
 80015c6:	f00d fad9 	bl	800eb7c <siprintf>
	lcd_display(&disp);
 80015ca:	483a      	ldr	r0, [pc, #232]	@ (80016b4 <main+0x264>)
 80015cc:	f7ff fe5a 	bl	8001284 <lcd_display>

	float angle = lux<10 ? lux * 3 : (lux<40 ? fmax(lux * 1.5, 10) : (lux <=150 ? fmax(lux,40) : 180));
 80015d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80015d4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80015d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e0:	d506      	bpl.n	80015f0 <main+0x1a0>
 80015e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80015e6:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80015ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ee:	e035      	b.n	800165c <main+0x20c>
 80015f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80015f4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80016d8 <main+0x288>
 80015f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001600:	d512      	bpl.n	8001628 <main+0x1d8>
 8001602:	edd7 7a05 	vldr	s15, [r7, #20]
 8001606:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800160a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800160e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001612:	eeb2 1b04 	vmov.f64	d1, #36	@ 0x41200000  10.0
 8001616:	eeb0 0b47 	vmov.f64	d0, d7
 800161a:	f010 fe27 	bl	801226c <fmax>
 800161e:	eeb0 7b40 	vmov.f64	d7, d0
 8001622:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001626:	e019      	b.n	800165c <main+0x20c>
 8001628:	edd7 7a05 	vldr	s15, [r7, #20]
 800162c:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80016dc <main+0x28c>
 8001630:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001638:	d80e      	bhi.n	8001658 <main+0x208>
 800163a:	edd7 7a05 	vldr	s15, [r7, #20]
 800163e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001642:	ed9f 1b19 	vldr	d1, [pc, #100]	@ 80016a8 <main+0x258>
 8001646:	eeb0 0b47 	vmov.f64	d0, d7
 800164a:	f010 fe0f 	bl	801226c <fmax>
 800164e:	eeb0 7b40 	vmov.f64	d7, d0
 8001652:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001656:	e001      	b.n	800165c <main+0x20c>
 8001658:	eddf 7a21 	vldr	s15, [pc, #132]	@ 80016e0 <main+0x290>
 800165c:	edc7 7a04 	vstr	s15, [r7, #16]
	Servo_SetAngle(angle);
 8001660:	edd7 7a04 	vldr	s15, [r7, #16]
 8001664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001668:	edc7 7a01 	vstr	s15, [r7, #4]
 800166c:	793b      	ldrb	r3, [r7, #4]
 800166e:	b2db      	uxtb	r3, r3
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff feb9 	bl	80013e8 <Servo_SetAngle>
	HAL_Delay(500);
 8001676:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800167a:	f000 fc17 	bl	8001eac <HAL_Delay>
  {
 800167e:	e74f      	b.n	8001520 <main+0xd0>
 8001680:	66666666 	.word	0x66666666
 8001684:	400a6666 	.word	0x400a6666
 8001688:	00000000 	.word	0x00000000
 800168c:	40efffe0 	.word	0x40efffe0
 8001690:	00000000 	.word	0x00000000
 8001694:	40b25c00 	.word	0x40b25c00
 8001698:	aaaaaaab 	.word	0xaaaaaaab
 800169c:	3ffaaaaa 	.word	0x3ffaaaaa
 80016a0:	00000006 	.word	0x00000006
 80016a4:	417e8480 	.word	0x417e8480
 80016a8:	00000000 	.word	0x00000000
 80016ac:	40440000 	.word	0x40440000
 80016b0:	58024400 	.word	0x58024400
 80016b4:	24000328 	.word	0x24000328
 80016b8:	24000350 	.word	0x24000350
 80016bc:	24000324 	.word	0x24000324
 80016c0:	2400039c 	.word	0x2400039c
 80016c4:	240001f4 	.word	0x240001f4
 80016c8:	0801290c 	.word	0x0801290c
 80016cc:	24000329 	.word	0x24000329
 80016d0:	08012914 	.word	0x08012914
 80016d4:	2400033a 	.word	0x2400033a
 80016d8:	42200000 	.word	0x42200000
 80016dc:	43160000 	.word	0x43160000
 80016e0:	43340000 	.word	0x43340000

080016e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b09c      	sub	sp, #112	@ 0x70
 80016e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016ee:	224c      	movs	r2, #76	@ 0x4c
 80016f0:	2100      	movs	r1, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f00d faa5 	bl	800ec42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	2220      	movs	r2, #32
 80016fc:	2100      	movs	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f00d fa9f 	bl	800ec42 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001704:	2004      	movs	r0, #4
 8001706:	f005 f8db 	bl	80068c0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800170a:	2300      	movs	r3, #0
 800170c:	603b      	str	r3, [r7, #0]
 800170e:	4b2b      	ldr	r3, [pc, #172]	@ (80017bc <SystemClock_Config+0xd8>)
 8001710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001712:	4a2a      	ldr	r2, [pc, #168]	@ (80017bc <SystemClock_Config+0xd8>)
 8001714:	f023 0301 	bic.w	r3, r3, #1
 8001718:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800171a:	4b28      	ldr	r3, [pc, #160]	@ (80017bc <SystemClock_Config+0xd8>)
 800171c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	4b26      	ldr	r3, [pc, #152]	@ (80017c0 <SystemClock_Config+0xdc>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800172c:	4a24      	ldr	r2, [pc, #144]	@ (80017c0 <SystemClock_Config+0xdc>)
 800172e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001732:	6193      	str	r3, [r2, #24]
 8001734:	4b22      	ldr	r3, [pc, #136]	@ (80017c0 <SystemClock_Config+0xdc>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800173c:	603b      	str	r3, [r7, #0]
 800173e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001740:	bf00      	nop
 8001742:	4b1f      	ldr	r3, [pc, #124]	@ (80017c0 <SystemClock_Config+0xdc>)
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800174a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800174e:	d1f8      	bne.n	8001742 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8001750:	4b1c      	ldr	r3, [pc, #112]	@ (80017c4 <SystemClock_Config+0xe0>)
 8001752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001754:	4a1b      	ldr	r2, [pc, #108]	@ (80017c4 <SystemClock_Config+0xe0>)
 8001756:	f023 0303 	bic.w	r3, r3, #3
 800175a:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800175c:	2302      	movs	r3, #2
 800175e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001760:	2301      	movs	r3, #1
 8001762:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001764:	2340      	movs	r3, #64	@ 0x40
 8001766:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001768:	2300      	movs	r3, #0
 800176a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800176c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001770:	4618      	mov	r0, r3
 8001772:	f005 f8ff 	bl	8006974 <HAL_RCC_OscConfig>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800177c:	f000 f824 	bl	80017c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001780:	233f      	movs	r3, #63	@ 0x3f
 8001782:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001784:	2300      	movs	r3, #0
 8001786:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800178c:	2300      	movs	r3, #0
 800178e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001794:	2340      	movs	r3, #64	@ 0x40
 8001796:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001798:	2300      	movs	r3, #0
 800179a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800179c:	2300      	movs	r3, #0
 800179e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	2101      	movs	r1, #1
 80017a4:	4618      	mov	r0, r3
 80017a6:	f005 fd3f 	bl	8007228 <HAL_RCC_ClockConfig>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80017b0:	f000 f80a 	bl	80017c8 <Error_Handler>
  }
}
 80017b4:	bf00      	nop
 80017b6:	3770      	adds	r7, #112	@ 0x70
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	58000400 	.word	0x58000400
 80017c0:	58024800 	.word	0x58024800
 80017c4:	58024400 	.word	0x58024400

080017c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017cc:	b672      	cpsid	i
}
 80017ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d0:	bf00      	nop
 80017d2:	e7fd      	b.n	80017d0 <Error_Handler+0x8>

080017d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017da:	4b0a      	ldr	r3, [pc, #40]	@ (8001804 <HAL_MspInit+0x30>)
 80017dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017e0:	4a08      	ldr	r2, [pc, #32]	@ (8001804 <HAL_MspInit+0x30>)
 80017e2:	f043 0302 	orr.w	r3, r3, #2
 80017e6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80017ea:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <HAL_MspInit+0x30>)
 80017ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	607b      	str	r3, [r7, #4]
 80017f6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	58024400 	.word	0x58024400

08001808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800180c:	bf00      	nop
 800180e:	e7fd      	b.n	800180c <NMI_Handler+0x4>

08001810 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <HardFault_Handler+0x4>

08001818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800181c:	bf00      	nop
 800181e:	e7fd      	b.n	800181c <MemManage_Handler+0x4>

08001820 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001824:	bf00      	nop
 8001826:	e7fd      	b.n	8001824 <BusFault_Handler+0x4>

08001828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800182c:	bf00      	nop
 800182e:	e7fd      	b.n	800182c <UsageFault_Handler+0x4>

08001830 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800185e:	f000 fb05 	bl	8001e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800186c:	4802      	ldr	r0, [pc, #8]	@ (8001878 <DMA1_Stream0_IRQHandler+0x10>)
 800186e:	f003 f863 	bl	8004938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	24000258 	.word	0x24000258

0800187c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001880:	4802      	ldr	r0, [pc, #8]	@ (800188c <USART3_IRQHandler+0x10>)
 8001882:	f009 ff71 	bl	800b768 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	2400039c 	.word	0x2400039c

08001890 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return 1;
 8001894:	2301      	movs	r3, #1
}
 8001896:	4618      	mov	r0, r3
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <_kill>:

int _kill(int pid, int sig)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018aa:	f00d fa1d 	bl	800ece8 <__errno>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2216      	movs	r2, #22
 80018b2:	601a      	str	r2, [r3, #0]
  return -1;
 80018b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <_exit>:

void _exit (int status)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018c8:	f04f 31ff 	mov.w	r1, #4294967295
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff ffe7 	bl	80018a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018d2:	bf00      	nop
 80018d4:	e7fd      	b.n	80018d2 <_exit+0x12>

080018d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b086      	sub	sp, #24
 80018da:	af00      	add	r7, sp, #0
 80018dc:	60f8      	str	r0, [r7, #12]
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	e00a      	b.n	80018fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018e8:	f3af 8000 	nop.w
 80018ec:	4601      	mov	r1, r0
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	1c5a      	adds	r2, r3, #1
 80018f2:	60ba      	str	r2, [r7, #8]
 80018f4:	b2ca      	uxtb	r2, r1
 80018f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	3301      	adds	r3, #1
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	429a      	cmp	r2, r3
 8001904:	dbf0      	blt.n	80018e8 <_read+0x12>
  }

  return len;
 8001906:	687b      	ldr	r3, [r7, #4]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	e009      	b.n	8001936 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	1c5a      	adds	r2, r3, #1
 8001926:	60ba      	str	r2, [r7, #8]
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	3301      	adds	r3, #1
 8001934:	617b      	str	r3, [r7, #20]
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	429a      	cmp	r2, r3
 800193c:	dbf1      	blt.n	8001922 <_write+0x12>
  }
  return len;
 800193e:	687b      	ldr	r3, [r7, #4]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <_close>:

int _close(int file)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001950:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001954:	4618      	mov	r0, r3
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001970:	605a      	str	r2, [r3, #4]
  return 0;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <_isatty>:

int _isatty(int file)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001988:	2301      	movs	r3, #1
}
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001996:	b480      	push	{r7}
 8001998:	b085      	sub	sp, #20
 800199a:	af00      	add	r7, sp, #0
 800199c:	60f8      	str	r0, [r7, #12]
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b8:	4a14      	ldr	r2, [pc, #80]	@ (8001a0c <_sbrk+0x5c>)
 80019ba:	4b15      	ldr	r3, [pc, #84]	@ (8001a10 <_sbrk+0x60>)
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c4:	4b13      	ldr	r3, [pc, #76]	@ (8001a14 <_sbrk+0x64>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d102      	bne.n	80019d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019cc:	4b11      	ldr	r3, [pc, #68]	@ (8001a14 <_sbrk+0x64>)
 80019ce:	4a12      	ldr	r2, [pc, #72]	@ (8001a18 <_sbrk+0x68>)
 80019d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019d2:	4b10      	ldr	r3, [pc, #64]	@ (8001a14 <_sbrk+0x64>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d207      	bcs.n	80019f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019e0:	f00d f982 	bl	800ece8 <__errno>
 80019e4:	4603      	mov	r3, r0
 80019e6:	220c      	movs	r2, #12
 80019e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295
 80019ee:	e009      	b.n	8001a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f0:	4b08      	ldr	r3, [pc, #32]	@ (8001a14 <_sbrk+0x64>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019f6:	4b07      	ldr	r3, [pc, #28]	@ (8001a14 <_sbrk+0x64>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	4a05      	ldr	r2, [pc, #20]	@ (8001a14 <_sbrk+0x64>)
 8001a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a02:	68fb      	ldr	r3, [r7, #12]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	24080000 	.word	0x24080000
 8001a10:	00000400 	.word	0x00000400
 8001a14:	2400034c 	.word	0x2400034c
 8001a18:	24000580 	.word	0x24000580

08001a1c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08e      	sub	sp, #56	@ 0x38
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a30:	f107 031c 	add.w	r3, r7, #28
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a3c:	463b      	mov	r3, r7
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	60da      	str	r2, [r3, #12]
 8001a48:	611a      	str	r2, [r3, #16]
 8001a4a:	615a      	str	r2, [r3, #20]
 8001a4c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a4e:	4b2d      	ldr	r3, [pc, #180]	@ (8001b04 <MX_TIM2_Init+0xe8>)
 8001a50:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a54:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8001a56:	4b2b      	ldr	r3, [pc, #172]	@ (8001b04 <MX_TIM2_Init+0xe8>)
 8001a58:	223f      	movs	r2, #63	@ 0x3f
 8001a5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a5c:	4b29      	ldr	r3, [pc, #164]	@ (8001b04 <MX_TIM2_Init+0xe8>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8001a62:	4b28      	ldr	r3, [pc, #160]	@ (8001b04 <MX_TIM2_Init+0xe8>)
 8001a64:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001a68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a6a:	4b26      	ldr	r3, [pc, #152]	@ (8001b04 <MX_TIM2_Init+0xe8>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a70:	4b24      	ldr	r3, [pc, #144]	@ (8001b04 <MX_TIM2_Init+0xe8>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a76:	4823      	ldr	r0, [pc, #140]	@ (8001b04 <MX_TIM2_Init+0xe8>)
 8001a78:	f008 fc60 	bl	800a33c <HAL_TIM_Base_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001a82:	f7ff fea1 	bl	80017c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a90:	4619      	mov	r1, r3
 8001a92:	481c      	ldr	r0, [pc, #112]	@ (8001b04 <MX_TIM2_Init+0xe8>)
 8001a94:	f008 ff78 	bl	800a988 <HAL_TIM_ConfigClockSource>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001a9e:	f7ff fe93 	bl	80017c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001aa2:	4818      	ldr	r0, [pc, #96]	@ (8001b04 <MX_TIM2_Init+0xe8>)
 8001aa4:	f008 fca1 	bl	800a3ea <HAL_TIM_PWM_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001aae:	f7ff fe8b 	bl	80017c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001aba:	f107 031c 	add.w	r3, r7, #28
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4810      	ldr	r0, [pc, #64]	@ (8001b04 <MX_TIM2_Init+0xe8>)
 8001ac2:	f009 fc99 	bl	800b3f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001acc:	f7ff fe7c 	bl	80017c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ad0:	2360      	movs	r3, #96	@ 0x60
 8001ad2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ae0:	463b      	mov	r3, r7
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4807      	ldr	r0, [pc, #28]	@ (8001b04 <MX_TIM2_Init+0xe8>)
 8001ae8:	f008 fe3a 	bl	800a760 <HAL_TIM_PWM_ConfigChannel>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001af2:	f7ff fe69 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001af6:	4803      	ldr	r0, [pc, #12]	@ (8001b04 <MX_TIM2_Init+0xe8>)
 8001af8:	f000 f826 	bl	8001b48 <HAL_TIM_MspPostInit>

}
 8001afc:	bf00      	nop
 8001afe:	3738      	adds	r7, #56	@ 0x38
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	24000350 	.word	0x24000350

08001b08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b18:	d10e      	bne.n	8001b38 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b44 <HAL_TIM_Base_MspInit+0x3c>)
 8001b1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b20:	4a08      	ldr	r2, [pc, #32]	@ (8001b44 <HAL_TIM_Base_MspInit+0x3c>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b2a:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <HAL_TIM_Base_MspInit+0x3c>)
 8001b2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001b38:	bf00      	nop
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	58024400 	.word	0x58024400

08001b48 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 030c 	add.w	r3, r7, #12
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b68:	d11e      	bne.n	8001ba8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6a:	4b11      	ldr	r3, [pc, #68]	@ (8001bb0 <HAL_TIM_MspPostInit+0x68>)
 8001b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b70:	4a0f      	ldr	r2, [pc, #60]	@ (8001bb0 <HAL_TIM_MspPostInit+0x68>)
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb0 <HAL_TIM_MspPostInit+0x68>)
 8001b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9c:	f107 030c 	add.w	r3, r7, #12
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4804      	ldr	r0, [pc, #16]	@ (8001bb4 <HAL_TIM_MspPostInit+0x6c>)
 8001ba4:	f004 f82e 	bl	8005c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ba8:	bf00      	nop
 8001baa:	3720      	adds	r7, #32
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	58024400 	.word	0x58024400
 8001bb4:	58020000 	.word	0x58020000

08001bb8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001bbc:	4b22      	ldr	r3, [pc, #136]	@ (8001c48 <MX_USART3_UART_Init+0x90>)
 8001bbe:	4a23      	ldr	r2, [pc, #140]	@ (8001c4c <MX_USART3_UART_Init+0x94>)
 8001bc0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001bc2:	4b21      	ldr	r3, [pc, #132]	@ (8001c48 <MX_USART3_UART_Init+0x90>)
 8001bc4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001bc8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001bca:	4b1f      	ldr	r3, [pc, #124]	@ (8001c48 <MX_USART3_UART_Init+0x90>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001bd0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c48 <MX_USART3_UART_Init+0x90>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001bd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c48 <MX_USART3_UART_Init+0x90>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c48 <MX_USART3_UART_Init+0x90>)
 8001bde:	220c      	movs	r2, #12
 8001be0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001be2:	4b19      	ldr	r3, [pc, #100]	@ (8001c48 <MX_USART3_UART_Init+0x90>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be8:	4b17      	ldr	r3, [pc, #92]	@ (8001c48 <MX_USART3_UART_Init+0x90>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bee:	4b16      	ldr	r3, [pc, #88]	@ (8001c48 <MX_USART3_UART_Init+0x90>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bf4:	4b14      	ldr	r3, [pc, #80]	@ (8001c48 <MX_USART3_UART_Init+0x90>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bfa:	4b13      	ldr	r3, [pc, #76]	@ (8001c48 <MX_USART3_UART_Init+0x90>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c00:	4811      	ldr	r0, [pc, #68]	@ (8001c48 <MX_USART3_UART_Init+0x90>)
 8001c02:	f009 fc87 	bl	800b514 <HAL_UART_Init>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001c0c:	f7ff fddc 	bl	80017c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c10:	2100      	movs	r1, #0
 8001c12:	480d      	ldr	r0, [pc, #52]	@ (8001c48 <MX_USART3_UART_Init+0x90>)
 8001c14:	f00b ffe1 	bl	800dbda <HAL_UARTEx_SetTxFifoThreshold>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001c1e:	f7ff fdd3 	bl	80017c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c22:	2100      	movs	r1, #0
 8001c24:	4808      	ldr	r0, [pc, #32]	@ (8001c48 <MX_USART3_UART_Init+0x90>)
 8001c26:	f00c f816 	bl	800dc56 <HAL_UARTEx_SetRxFifoThreshold>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001c30:	f7ff fdca 	bl	80017c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001c34:	4804      	ldr	r0, [pc, #16]	@ (8001c48 <MX_USART3_UART_Init+0x90>)
 8001c36:	f00b ff97 	bl	800db68 <HAL_UARTEx_DisableFifoMode>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001c40:	f7ff fdc2 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	2400039c 	.word	0x2400039c
 8001c4c:	40004800 	.word	0x40004800

08001c50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b0ba      	sub	sp, #232	@ 0xe8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c68:	f107 0310 	add.w	r3, r7, #16
 8001c6c:	22c0      	movs	r2, #192	@ 0xc0
 8001c6e:	2100      	movs	r1, #0
 8001c70:	4618      	mov	r0, r3
 8001c72:	f00c ffe6 	bl	800ec42 <memset>
  if(uartHandle->Instance==USART3)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a2b      	ldr	r2, [pc, #172]	@ (8001d28 <HAL_UART_MspInit+0xd8>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d14e      	bne.n	8001d1e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c80:	f04f 0202 	mov.w	r2, #2
 8001c84:	f04f 0300 	mov.w	r3, #0
 8001c88:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c92:	f107 0310 	add.w	r3, r7, #16
 8001c96:	4618      	mov	r0, r3
 8001c98:	f005 fe52 	bl	8007940 <HAL_RCCEx_PeriphCLKConfig>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001ca2:	f7ff fd91 	bl	80017c8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ca6:	4b21      	ldr	r3, [pc, #132]	@ (8001d2c <HAL_UART_MspInit+0xdc>)
 8001ca8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cac:	4a1f      	ldr	r2, [pc, #124]	@ (8001d2c <HAL_UART_MspInit+0xdc>)
 8001cae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cb2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d2c <HAL_UART_MspInit+0xdc>)
 8001cb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cc4:	4b19      	ldr	r3, [pc, #100]	@ (8001d2c <HAL_UART_MspInit+0xdc>)
 8001cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cca:	4a18      	ldr	r2, [pc, #96]	@ (8001d2c <HAL_UART_MspInit+0xdc>)
 8001ccc:	f043 0308 	orr.w	r3, r3, #8
 8001cd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cd4:	4b15      	ldr	r3, [pc, #84]	@ (8001d2c <HAL_UART_MspInit+0xdc>)
 8001cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	60bb      	str	r3, [r7, #8]
 8001ce0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ce2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ce6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cea:	2302      	movs	r3, #2
 8001cec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cfc:	2307      	movs	r3, #7
 8001cfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d02:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d06:	4619      	mov	r1, r3
 8001d08:	4809      	ldr	r0, [pc, #36]	@ (8001d30 <HAL_UART_MspInit+0xe0>)
 8001d0a:	f003 ff7b 	bl	8005c04 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2100      	movs	r1, #0
 8001d12:	2027      	movs	r0, #39	@ 0x27
 8001d14:	f001 fd1b 	bl	800374e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d18:	2027      	movs	r0, #39	@ 0x27
 8001d1a:	f001 fd32 	bl	8003782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001d1e:	bf00      	nop
 8001d20:	37e8      	adds	r7, #232	@ 0xe8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40004800 	.word	0x40004800
 8001d2c:	58024400 	.word	0x58024400
 8001d30:	58020c00 	.word	0x58020c00

08001d34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001d34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d6c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d38:	f7fe fe96 	bl	8000a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d3c:	480c      	ldr	r0, [pc, #48]	@ (8001d70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d3e:	490d      	ldr	r1, [pc, #52]	@ (8001d74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d40:	4a0d      	ldr	r2, [pc, #52]	@ (8001d78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d44:	e002      	b.n	8001d4c <LoopCopyDataInit>

08001d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d4a:	3304      	adds	r3, #4

08001d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d50:	d3f9      	bcc.n	8001d46 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d52:	4a0a      	ldr	r2, [pc, #40]	@ (8001d7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d54:	4c0a      	ldr	r4, [pc, #40]	@ (8001d80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d58:	e001      	b.n	8001d5e <LoopFillZerobss>

08001d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d5c:	3204      	adds	r2, #4

08001d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d60:	d3fb      	bcc.n	8001d5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d62:	f00c ffc7 	bl	800ecf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d66:	f7ff fb73 	bl	8001450 <main>
  bx  lr
 8001d6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d6c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001d70:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001d74:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001d78:	08014650 	.word	0x08014650
  ldr r2, =_sbss
 8001d7c:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8001d80:	24000580 	.word	0x24000580

08001d84 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d84:	e7fe      	b.n	8001d84 <ADC3_IRQHandler>
	...

08001d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d8e:	2003      	movs	r0, #3
 8001d90:	f001 fcd2 	bl	8003738 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d94:	f005 fbfe 	bl	8007594 <HAL_RCC_GetSysClockFreq>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	4b15      	ldr	r3, [pc, #84]	@ (8001df0 <HAL_Init+0x68>)
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	0a1b      	lsrs	r3, r3, #8
 8001da0:	f003 030f 	and.w	r3, r3, #15
 8001da4:	4913      	ldr	r1, [pc, #76]	@ (8001df4 <HAL_Init+0x6c>)
 8001da6:	5ccb      	ldrb	r3, [r1, r3]
 8001da8:	f003 031f 	and.w	r3, r3, #31
 8001dac:	fa22 f303 	lsr.w	r3, r2, r3
 8001db0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001db2:	4b0f      	ldr	r3, [pc, #60]	@ (8001df0 <HAL_Init+0x68>)
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	4a0e      	ldr	r2, [pc, #56]	@ (8001df4 <HAL_Init+0x6c>)
 8001dbc:	5cd3      	ldrb	r3, [r2, r3]
 8001dbe:	f003 031f 	and.w	r3, r3, #31
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc8:	4a0b      	ldr	r2, [pc, #44]	@ (8001df8 <HAL_Init+0x70>)
 8001dca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001dcc:	4a0b      	ldr	r2, [pc, #44]	@ (8001dfc <HAL_Init+0x74>)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	f000 f814 	bl	8001e00 <HAL_InitTick>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e002      	b.n	8001de8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001de2:	f7ff fcf7 	bl	80017d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	58024400 	.word	0x58024400
 8001df4:	08012918 	.word	0x08012918
 8001df8:	24000004 	.word	0x24000004
 8001dfc:	24000000 	.word	0x24000000

08001e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001e08:	4b15      	ldr	r3, [pc, #84]	@ (8001e60 <HAL_InitTick+0x60>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e021      	b.n	8001e58 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001e14:	4b13      	ldr	r3, [pc, #76]	@ (8001e64 <HAL_InitTick+0x64>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <HAL_InitTick+0x60>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f001 fcb7 	bl	800379e <HAL_SYSTICK_Config>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e00e      	b.n	8001e58 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b0f      	cmp	r3, #15
 8001e3e:	d80a      	bhi.n	8001e56 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e40:	2200      	movs	r2, #0
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	f04f 30ff 	mov.w	r0, #4294967295
 8001e48:	f001 fc81 	bl	800374e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e4c:	4a06      	ldr	r2, [pc, #24]	@ (8001e68 <HAL_InitTick+0x68>)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	e000      	b.n	8001e58 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	2400000c 	.word	0x2400000c
 8001e64:	24000000 	.word	0x24000000
 8001e68:	24000008 	.word	0x24000008

08001e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e70:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <HAL_IncTick+0x20>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	4b06      	ldr	r3, [pc, #24]	@ (8001e90 <HAL_IncTick+0x24>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	4a04      	ldr	r2, [pc, #16]	@ (8001e90 <HAL_IncTick+0x24>)
 8001e7e:	6013      	str	r3, [r2, #0]
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	2400000c 	.word	0x2400000c
 8001e90:	24000430 	.word	0x24000430

08001e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return uwTick;
 8001e98:	4b03      	ldr	r3, [pc, #12]	@ (8001ea8 <HAL_GetTick+0x14>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	24000430 	.word	0x24000430

08001eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eb4:	f7ff ffee 	bl	8001e94 <HAL_GetTick>
 8001eb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec4:	d005      	beq.n	8001ed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef0 <HAL_Delay+0x44>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4413      	add	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ed2:	bf00      	nop
 8001ed4:	f7ff ffde 	bl	8001e94 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d8f7      	bhi.n	8001ed4 <HAL_Delay+0x28>
  {
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	bf00      	nop
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	2400000c 	.word	0x2400000c

08001ef4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ef8:	4b03      	ldr	r3, [pc, #12]	@ (8001f08 <HAL_GetREVID+0x14>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	0c1b      	lsrs	r3, r3, #16
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	5c001000 	.word	0x5c001000

08001f0c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	431a      	orrs	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	609a      	str	r2, [r3, #8]
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b087      	sub	sp, #28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
 8001f80:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	3360      	adds	r3, #96	@ 0x60
 8001f86:	461a      	mov	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4413      	add	r3, r2
 8001f8e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	430b      	orrs	r3, r1
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001fa8:	bf00      	nop
 8001faa:	371c      	adds	r7, #28
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f003 031f 	and.w	r3, r3, #31
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	611a      	str	r2, [r3, #16]
}
 8001fda:	bf00      	nop
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b087      	sub	sp, #28
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	60f8      	str	r0, [r7, #12]
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	3360      	adds	r3, #96	@ 0x60
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	431a      	orrs	r2, r3
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	601a      	str	r2, [r3, #0]
  }
}
 8002010:	bf00      	nop
 8002012:	371c      	adds	r7, #28
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002030:	2301      	movs	r3, #1
 8002032:	e000      	b.n	8002036 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002042:	b480      	push	{r7}
 8002044:	b087      	sub	sp, #28
 8002046:	af00      	add	r7, sp, #0
 8002048:	60f8      	str	r0, [r7, #12]
 800204a:	60b9      	str	r1, [r7, #8]
 800204c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	3330      	adds	r3, #48	@ 0x30
 8002052:	461a      	mov	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	0a1b      	lsrs	r3, r3, #8
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	f003 030c 	and.w	r3, r3, #12
 800205e:	4413      	add	r3, r2
 8002060:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	f003 031f 	and.w	r3, r3, #31
 800206c:	211f      	movs	r1, #31
 800206e:	fa01 f303 	lsl.w	r3, r1, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	401a      	ands	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	0e9b      	lsrs	r3, r3, #26
 800207a:	f003 011f 	and.w	r1, r3, #31
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	f003 031f 	and.w	r3, r3, #31
 8002084:	fa01 f303 	lsl.w	r3, r1, r3
 8002088:	431a      	orrs	r2, r3
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800208e:	bf00      	nop
 8002090:	371c      	adds	r7, #28
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800209a:	b480      	push	{r7}
 800209c:	b087      	sub	sp, #28
 800209e:	af00      	add	r7, sp, #0
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	3314      	adds	r3, #20
 80020aa:	461a      	mov	r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	0e5b      	lsrs	r3, r3, #25
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	f003 0304 	and.w	r3, r3, #4
 80020b6:	4413      	add	r3, r2
 80020b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	0d1b      	lsrs	r3, r3, #20
 80020c2:	f003 031f 	and.w	r3, r3, #31
 80020c6:	2107      	movs	r1, #7
 80020c8:	fa01 f303 	lsl.w	r3, r1, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	401a      	ands	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	0d1b      	lsrs	r3, r3, #20
 80020d4:	f003 031f 	and.w	r3, r3, #31
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	fa01 f303 	lsl.w	r3, r1, r3
 80020de:	431a      	orrs	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80020e4:	bf00      	nop
 80020e6:	371c      	adds	r7, #28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002108:	43db      	mvns	r3, r3
 800210a:	401a      	ands	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f003 0318 	and.w	r3, r3, #24
 8002112:	4908      	ldr	r1, [pc, #32]	@ (8002134 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002114:	40d9      	lsrs	r1, r3
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	400b      	ands	r3, r1
 800211a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800211e:	431a      	orrs	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002126:	bf00      	nop
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	000fffff 	.word	0x000fffff

08002138 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 031f 	and.w	r3, r3, #31
}
 8002148:	4618      	mov	r0, r3
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002164:	4618      	mov	r0, r3
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	4b04      	ldr	r3, [pc, #16]	@ (8002190 <LL_ADC_DisableDeepPowerDown+0x20>)
 800217e:	4013      	ands	r3, r2
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6093      	str	r3, [r2, #8]
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	5fffffc0 	.word	0x5fffffc0

08002194 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80021a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80021a8:	d101      	bne.n	80021ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80021aa:	2301      	movs	r3, #1
 80021ac:	e000      	b.n	80021b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	4b05      	ldr	r3, [pc, #20]	@ (80021e0 <LL_ADC_EnableInternalRegulator+0x24>)
 80021ca:	4013      	ands	r3, r2
 80021cc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	6fffffc0 	.word	0x6fffffc0

080021e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021f8:	d101      	bne.n	80021fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	4b05      	ldr	r3, [pc, #20]	@ (8002230 <LL_ADC_Enable+0x24>)
 800221a:	4013      	ands	r3, r2
 800221c:	f043 0201 	orr.w	r2, r3, #1
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	7fffffc0 	.word	0x7fffffc0

08002234 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <LL_ADC_IsEnabled+0x18>
 8002248:	2301      	movs	r3, #1
 800224a:	e000      	b.n	800224e <LL_ADC_IsEnabled+0x1a>
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	4b05      	ldr	r3, [pc, #20]	@ (8002280 <LL_ADC_REG_StartConversion+0x24>)
 800226a:	4013      	ands	r3, r2
 800226c:	f043 0204 	orr.w	r2, r3, #4
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	7fffffc0 	.word	0x7fffffc0

08002284 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b04      	cmp	r3, #4
 8002296:	d101      	bne.n	800229c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002298:	2301      	movs	r3, #1
 800229a:	e000      	b.n	800229e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b08      	cmp	r3, #8
 80022bc:	d101      	bne.n	80022c2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80022be:	2301      	movs	r3, #1
 80022c0:	e000      	b.n	80022c4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022d0:	b590      	push	{r4, r7, lr}
 80022d2:	b089      	sub	sp, #36	@ 0x24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022d8:	2300      	movs	r3, #0
 80022da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80022dc:	2300      	movs	r3, #0
 80022de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e18f      	b.n	800260a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d109      	bne.n	800230c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7fe fccf 	bl	8000c9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff ff3f 	bl	8002194 <LL_ADC_IsDeepPowerDownEnabled>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d004      	beq.n	8002326 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff25 	bl	8002170 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff ff5a 	bl	80021e4 <LL_ADC_IsInternalRegulatorEnabled>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d114      	bne.n	8002360 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff ff3e 	bl	80021bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002340:	4b87      	ldr	r3, [pc, #540]	@ (8002560 <HAL_ADC_Init+0x290>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	099b      	lsrs	r3, r3, #6
 8002346:	4a87      	ldr	r2, [pc, #540]	@ (8002564 <HAL_ADC_Init+0x294>)
 8002348:	fba2 2303 	umull	r2, r3, r2, r3
 800234c:	099b      	lsrs	r3, r3, #6
 800234e:	3301      	adds	r3, #1
 8002350:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002352:	e002      	b.n	800235a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	3b01      	subs	r3, #1
 8002358:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1f9      	bne.n	8002354 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff ff3d 	bl	80021e4 <LL_ADC_IsInternalRegulatorEnabled>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10d      	bne.n	800238c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002374:	f043 0210 	orr.w	r2, r3, #16
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002380:	f043 0201 	orr.w	r2, r3, #1
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff ff77 	bl	8002284 <LL_ADC_REG_IsConversionOngoing>
 8002396:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800239c:	f003 0310 	and.w	r3, r3, #16
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f040 8129 	bne.w	80025f8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f040 8125 	bne.w	80025f8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80023b6:	f043 0202 	orr.w	r2, r3, #2
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff ff36 	bl	8002234 <LL_ADC_IsEnabled>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d136      	bne.n	800243c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a65      	ldr	r2, [pc, #404]	@ (8002568 <HAL_ADC_Init+0x298>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d004      	beq.n	80023e2 <HAL_ADC_Init+0x112>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a63      	ldr	r2, [pc, #396]	@ (800256c <HAL_ADC_Init+0x29c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d10e      	bne.n	8002400 <HAL_ADC_Init+0x130>
 80023e2:	4861      	ldr	r0, [pc, #388]	@ (8002568 <HAL_ADC_Init+0x298>)
 80023e4:	f7ff ff26 	bl	8002234 <LL_ADC_IsEnabled>
 80023e8:	4604      	mov	r4, r0
 80023ea:	4860      	ldr	r0, [pc, #384]	@ (800256c <HAL_ADC_Init+0x29c>)
 80023ec:	f7ff ff22 	bl	8002234 <LL_ADC_IsEnabled>
 80023f0:	4603      	mov	r3, r0
 80023f2:	4323      	orrs	r3, r4
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	bf0c      	ite	eq
 80023f8:	2301      	moveq	r3, #1
 80023fa:	2300      	movne	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	e008      	b.n	8002412 <HAL_ADC_Init+0x142>
 8002400:	485b      	ldr	r0, [pc, #364]	@ (8002570 <HAL_ADC_Init+0x2a0>)
 8002402:	f7ff ff17 	bl	8002234 <LL_ADC_IsEnabled>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	bf0c      	ite	eq
 800240c:	2301      	moveq	r3, #1
 800240e:	2300      	movne	r3, #0
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d012      	beq.n	800243c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a53      	ldr	r2, [pc, #332]	@ (8002568 <HAL_ADC_Init+0x298>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d004      	beq.n	800242a <HAL_ADC_Init+0x15a>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a51      	ldr	r2, [pc, #324]	@ (800256c <HAL_ADC_Init+0x29c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d101      	bne.n	800242e <HAL_ADC_Init+0x15e>
 800242a:	4a52      	ldr	r2, [pc, #328]	@ (8002574 <HAL_ADC_Init+0x2a4>)
 800242c:	e000      	b.n	8002430 <HAL_ADC_Init+0x160>
 800242e:	4a52      	ldr	r2, [pc, #328]	@ (8002578 <HAL_ADC_Init+0x2a8>)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	4619      	mov	r1, r3
 8002436:	4610      	mov	r0, r2
 8002438:	f7ff fd68 	bl	8001f0c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800243c:	f7ff fd5a 	bl	8001ef4 <HAL_GetREVID>
 8002440:	4603      	mov	r3, r0
 8002442:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002446:	4293      	cmp	r3, r2
 8002448:	d914      	bls.n	8002474 <HAL_ADC_Init+0x1a4>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b10      	cmp	r3, #16
 8002450:	d110      	bne.n	8002474 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	7d5b      	ldrb	r3, [r3, #21]
 8002456:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800245c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002462:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	7f1b      	ldrb	r3, [r3, #28]
 8002468:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800246a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800246c:	f043 030c 	orr.w	r3, r3, #12
 8002470:	61bb      	str	r3, [r7, #24]
 8002472:	e00d      	b.n	8002490 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	7d5b      	ldrb	r3, [r3, #21]
 8002478:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800247e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002484:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	7f1b      	ldrb	r3, [r3, #28]
 800248a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	7f1b      	ldrb	r3, [r3, #28]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d106      	bne.n	80024a6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	3b01      	subs	r3, #1
 800249e:	045b      	lsls	r3, r3, #17
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d009      	beq.n	80024c2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b2:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ba:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	4b2c      	ldr	r3, [pc, #176]	@ (800257c <HAL_ADC_Init+0x2ac>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6812      	ldr	r2, [r2, #0]
 80024d0:	69b9      	ldr	r1, [r7, #24]
 80024d2:	430b      	orrs	r3, r1
 80024d4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff fed2 	bl	8002284 <LL_ADC_REG_IsConversionOngoing>
 80024e0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff fedf 	bl	80022aa <LL_ADC_INJ_IsConversionOngoing>
 80024ec:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d15f      	bne.n	80025b4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d15c      	bne.n	80025b4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	7d1b      	ldrb	r3, [r3, #20]
 80024fe:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002504:	4313      	orrs	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68da      	ldr	r2, [r3, #12]
 800250e:	4b1c      	ldr	r3, [pc, #112]	@ (8002580 <HAL_ADC_Init+0x2b0>)
 8002510:	4013      	ands	r3, r2
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6812      	ldr	r2, [r2, #0]
 8002516:	69b9      	ldr	r1, [r7, #24]
 8002518:	430b      	orrs	r3, r1
 800251a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002522:	2b01      	cmp	r3, #1
 8002524:	d130      	bne.n	8002588 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	691a      	ldr	r2, [r3, #16]
 8002532:	4b14      	ldr	r3, [pc, #80]	@ (8002584 <HAL_ADC_Init+0x2b4>)
 8002534:	4013      	ands	r3, r2
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800253a:	3a01      	subs	r2, #1
 800253c:	0411      	lsls	r1, r2, #16
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002542:	4311      	orrs	r1, r2
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002548:	4311      	orrs	r1, r2
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800254e:	430a      	orrs	r2, r1
 8002550:	431a      	orrs	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 0201 	orr.w	r2, r2, #1
 800255a:	611a      	str	r2, [r3, #16]
 800255c:	e01c      	b.n	8002598 <HAL_ADC_Init+0x2c8>
 800255e:	bf00      	nop
 8002560:	24000000 	.word	0x24000000
 8002564:	053e2d63 	.word	0x053e2d63
 8002568:	40022000 	.word	0x40022000
 800256c:	40022100 	.word	0x40022100
 8002570:	58026000 	.word	0x58026000
 8002574:	40022300 	.word	0x40022300
 8002578:	58026300 	.word	0x58026300
 800257c:	fff0c003 	.word	0xfff0c003
 8002580:	ffffbffc 	.word	0xffffbffc
 8002584:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	691a      	ldr	r2, [r3, #16]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0201 	bic.w	r2, r2, #1
 8002596:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 fde2 	bl	8003178 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d10c      	bne.n	80025d6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c2:	f023 010f 	bic.w	r1, r3, #15
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	1e5a      	subs	r2, r3, #1
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80025d4:	e007      	b.n	80025e6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 020f 	bic.w	r2, r2, #15
 80025e4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ea:	f023 0303 	bic.w	r3, r3, #3
 80025ee:	f043 0201 	orr.w	r2, r3, #1
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	655a      	str	r2, [r3, #84]	@ 0x54
 80025f6:	e007      	b.n	8002608 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025fc:	f043 0210 	orr.w	r2, r3, #16
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002608:	7ffb      	ldrb	r3, [r7, #31]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3724      	adds	r7, #36	@ 0x24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd90      	pop	{r4, r7, pc}
 8002612:	bf00      	nop

08002614 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a5c      	ldr	r2, [pc, #368]	@ (8002794 <HAL_ADC_Start+0x180>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d004      	beq.n	8002630 <HAL_ADC_Start+0x1c>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a5b      	ldr	r2, [pc, #364]	@ (8002798 <HAL_ADC_Start+0x184>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d101      	bne.n	8002634 <HAL_ADC_Start+0x20>
 8002630:	4b5a      	ldr	r3, [pc, #360]	@ (800279c <HAL_ADC_Start+0x188>)
 8002632:	e000      	b.n	8002636 <HAL_ADC_Start+0x22>
 8002634:	4b5a      	ldr	r3, [pc, #360]	@ (80027a0 <HAL_ADC_Start+0x18c>)
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff fd7e 	bl	8002138 <LL_ADC_GetMultimode>
 800263c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff fe1e 	bl	8002284 <LL_ADC_REG_IsConversionOngoing>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	f040 809a 	bne.w	8002784 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002656:	2b01      	cmp	r3, #1
 8002658:	d101      	bne.n	800265e <HAL_ADC_Start+0x4a>
 800265a:	2302      	movs	r3, #2
 800265c:	e095      	b.n	800278a <HAL_ADC_Start+0x176>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 fcfc 	bl	8003064 <ADC_Enable>
 800266c:	4603      	mov	r3, r0
 800266e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002670:	7dfb      	ldrb	r3, [r7, #23]
 8002672:	2b00      	cmp	r3, #0
 8002674:	f040 8081 	bne.w	800277a <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800267c:	4b49      	ldr	r3, [pc, #292]	@ (80027a4 <HAL_ADC_Start+0x190>)
 800267e:	4013      	ands	r3, r2
 8002680:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a42      	ldr	r2, [pc, #264]	@ (8002798 <HAL_ADC_Start+0x184>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d002      	beq.n	8002698 <HAL_ADC_Start+0x84>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	e000      	b.n	800269a <HAL_ADC_Start+0x86>
 8002698:	4b3e      	ldr	r3, [pc, #248]	@ (8002794 <HAL_ADC_Start+0x180>)
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6812      	ldr	r2, [r2, #0]
 800269e:	4293      	cmp	r3, r2
 80026a0:	d002      	beq.n	80026a8 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d105      	bne.n	80026b4 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026c0:	d106      	bne.n	80026d0 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c6:	f023 0206 	bic.w	r2, r3, #6
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	659a      	str	r2, [r3, #88]	@ 0x58
 80026ce:	e002      	b.n	80026d6 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	221c      	movs	r2, #28
 80026dc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a2b      	ldr	r2, [pc, #172]	@ (8002798 <HAL_ADC_Start+0x184>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d002      	beq.n	80026f6 <HAL_ADC_Start+0xe2>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	e000      	b.n	80026f8 <HAL_ADC_Start+0xe4>
 80026f6:	4b27      	ldr	r3, [pc, #156]	@ (8002794 <HAL_ADC_Start+0x180>)
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d008      	beq.n	8002712 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d005      	beq.n	8002712 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	2b05      	cmp	r3, #5
 800270a:	d002      	beq.n	8002712 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	2b09      	cmp	r3, #9
 8002710:	d114      	bne.n	800273c <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d007      	beq.n	8002730 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002724:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002728:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff fd91 	bl	800225c <LL_ADC_REG_StartConversion>
 800273a:	e025      	b.n	8002788 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002740:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a12      	ldr	r2, [pc, #72]	@ (8002798 <HAL_ADC_Start+0x184>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d002      	beq.n	8002758 <HAL_ADC_Start+0x144>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	e000      	b.n	800275a <HAL_ADC_Start+0x146>
 8002758:	4b0e      	ldr	r3, [pc, #56]	@ (8002794 <HAL_ADC_Start+0x180>)
 800275a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00f      	beq.n	8002788 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800276c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002770:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	655a      	str	r2, [r3, #84]	@ 0x54
 8002778:	e006      	b.n	8002788 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002782:	e001      	b.n	8002788 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002784:	2302      	movs	r3, #2
 8002786:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002788:	7dfb      	ldrb	r3, [r7, #23]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40022000 	.word	0x40022000
 8002798:	40022100 	.word	0x40022100
 800279c:	40022300 	.word	0x40022300
 80027a0:	58026300 	.word	0x58026300
 80027a4:	fffff0fe 	.word	0xfffff0fe

080027a8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b088      	sub	sp, #32
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a72      	ldr	r2, [pc, #456]	@ (8002980 <HAL_ADC_PollForConversion+0x1d8>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d004      	beq.n	80027c6 <HAL_ADC_PollForConversion+0x1e>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a70      	ldr	r2, [pc, #448]	@ (8002984 <HAL_ADC_PollForConversion+0x1dc>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d101      	bne.n	80027ca <HAL_ADC_PollForConversion+0x22>
 80027c6:	4b70      	ldr	r3, [pc, #448]	@ (8002988 <HAL_ADC_PollForConversion+0x1e0>)
 80027c8:	e000      	b.n	80027cc <HAL_ADC_PollForConversion+0x24>
 80027ca:	4b70      	ldr	r3, [pc, #448]	@ (800298c <HAL_ADC_PollForConversion+0x1e4>)
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff fcb3 	bl	8002138 <LL_ADC_GetMultimode>
 80027d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d102      	bne.n	80027e2 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80027dc:	2308      	movs	r3, #8
 80027de:	61fb      	str	r3, [r7, #28]
 80027e0:	e037      	b.n	8002852 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d005      	beq.n	80027f4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	2b05      	cmp	r3, #5
 80027ec:	d002      	beq.n	80027f4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2b09      	cmp	r3, #9
 80027f2:	d111      	bne.n	8002818 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d007      	beq.n	8002812 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002806:	f043 0220 	orr.w	r2, r3, #32
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e0b1      	b.n	8002976 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002812:	2304      	movs	r3, #4
 8002814:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002816:	e01c      	b.n	8002852 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a58      	ldr	r2, [pc, #352]	@ (8002980 <HAL_ADC_PollForConversion+0x1d8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d004      	beq.n	800282c <HAL_ADC_PollForConversion+0x84>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a57      	ldr	r2, [pc, #348]	@ (8002984 <HAL_ADC_PollForConversion+0x1dc>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d101      	bne.n	8002830 <HAL_ADC_PollForConversion+0x88>
 800282c:	4b56      	ldr	r3, [pc, #344]	@ (8002988 <HAL_ADC_PollForConversion+0x1e0>)
 800282e:	e000      	b.n	8002832 <HAL_ADC_PollForConversion+0x8a>
 8002830:	4b56      	ldr	r3, [pc, #344]	@ (800298c <HAL_ADC_PollForConversion+0x1e4>)
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff fc8e 	bl	8002154 <LL_ADC_GetMultiDMATransfer>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d007      	beq.n	800284e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002842:	f043 0220 	orr.w	r2, r3, #32
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e093      	b.n	8002976 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800284e:	2304      	movs	r3, #4
 8002850:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002852:	f7ff fb1f 	bl	8001e94 <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002858:	e021      	b.n	800289e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002860:	d01d      	beq.n	800289e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002862:	f7ff fb17 	bl	8001e94 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d302      	bcc.n	8002878 <HAL_ADC_PollForConversion+0xd0>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d112      	bne.n	800289e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	4013      	ands	r3, r2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10b      	bne.n	800289e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800288a:	f043 0204 	orr.w	r2, r3, #4
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e06b      	b.n	8002976 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	4013      	ands	r3, r2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0d6      	beq.n	800285a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028b0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff fbad 	bl	800201c <LL_ADC_REG_IsTriggerSourceSWStart>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d01c      	beq.n	8002902 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	7d5b      	ldrb	r3, [r3, #21]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d118      	bne.n	8002902 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d111      	bne.n	8002902 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d105      	bne.n	8002902 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028fa:	f043 0201 	orr.w	r2, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a1f      	ldr	r2, [pc, #124]	@ (8002984 <HAL_ADC_PollForConversion+0x1dc>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d002      	beq.n	8002912 <HAL_ADC_PollForConversion+0x16a>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	e000      	b.n	8002914 <HAL_ADC_PollForConversion+0x16c>
 8002912:	4b1b      	ldr	r3, [pc, #108]	@ (8002980 <HAL_ADC_PollForConversion+0x1d8>)
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	4293      	cmp	r3, r2
 800291a:	d008      	beq.n	800292e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d005      	beq.n	800292e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2b05      	cmp	r3, #5
 8002926:	d002      	beq.n	800292e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	2b09      	cmp	r3, #9
 800292c:	d104      	bne.n	8002938 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	61bb      	str	r3, [r7, #24]
 8002936:	e00c      	b.n	8002952 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a11      	ldr	r2, [pc, #68]	@ (8002984 <HAL_ADC_PollForConversion+0x1dc>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d002      	beq.n	8002948 <HAL_ADC_PollForConversion+0x1a0>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	e000      	b.n	800294a <HAL_ADC_PollForConversion+0x1a2>
 8002948:	4b0d      	ldr	r3, [pc, #52]	@ (8002980 <HAL_ADC_PollForConversion+0x1d8>)
 800294a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	2b08      	cmp	r3, #8
 8002956:	d104      	bne.n	8002962 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2208      	movs	r2, #8
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	e008      	b.n	8002974 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d103      	bne.n	8002974 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	220c      	movs	r2, #12
 8002972:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3720      	adds	r7, #32
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40022000 	.word	0x40022000
 8002984:	40022100 	.word	0x40022100
 8002988:	40022300 	.word	0x40022300
 800298c:	58026300 	.word	0x58026300

08002990 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800299e:	4618      	mov	r0, r3
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
	...

080029ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80029ac:	b590      	push	{r4, r7, lr}
 80029ae:	b0a1      	sub	sp, #132	@ 0x84
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80029bc:	2300      	movs	r3, #0
 80029be:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	4a65      	ldr	r2, [pc, #404]	@ (8002b5c <HAL_ADC_ConfigChannel+0x1b0>)
 80029c6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d101      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x2a>
 80029d2:	2302      	movs	r3, #2
 80029d4:	e32e      	b.n	8003034 <HAL_ADC_ConfigChannel+0x688>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff fc4e 	bl	8002284 <LL_ADC_REG_IsConversionOngoing>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f040 8313 	bne.w	8003016 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	db2c      	blt.n	8002a52 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d108      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x6a>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	0e9b      	lsrs	r3, r3, #26
 8002a0a:	f003 031f 	and.w	r3, r3, #31
 8002a0e:	2201      	movs	r2, #1
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	e016      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x98>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a1e:	fa93 f3a3 	rbit	r3, r3
 8002a22:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a26:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8002a2e:	2320      	movs	r3, #32
 8002a30:	e003      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8002a32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a34:	fab3 f383 	clz	r3, r3
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	f003 031f 	and.w	r3, r3, #31
 8002a3e:	2201      	movs	r2, #1
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6812      	ldr	r2, [r2, #0]
 8002a48:	69d1      	ldr	r1, [r2, #28]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6812      	ldr	r2, [r2, #0]
 8002a4e:	430b      	orrs	r3, r1
 8002a50:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6818      	ldr	r0, [r3, #0]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	6859      	ldr	r1, [r3, #4]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	f7ff faef 	bl	8002042 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff fc0b 	bl	8002284 <LL_ADC_REG_IsConversionOngoing>
 8002a6e:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff fc18 	bl	80022aa <LL_ADC_INJ_IsConversionOngoing>
 8002a7a:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f040 80b8 	bne.w	8002bf4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f040 80b4 	bne.w	8002bf4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6818      	ldr	r0, [r3, #0]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	6819      	ldr	r1, [r3, #0]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	f7ff fafe 	bl	800209a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a9e:	4b30      	ldr	r3, [pc, #192]	@ (8002b60 <HAL_ADC_ConfigChannel+0x1b4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002aa6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002aaa:	d10b      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x118>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	695a      	ldr	r2, [r3, #20]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	089b      	lsrs	r3, r3, #2
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	e01d      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x154>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f003 0310 	and.w	r3, r3, #16
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10b      	bne.n	8002aea <HAL_ADC_ConfigChannel+0x13e>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	695a      	ldr	r2, [r3, #20]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	089b      	lsrs	r3, r3, #2
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	e00a      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x154>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	695a      	ldr	r2, [r3, #20]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	089b      	lsrs	r3, r3, #2
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d02c      	beq.n	8002b64 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	6919      	ldr	r1, [r3, #16]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b18:	f7ff fa2c 	bl	8001f74 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6818      	ldr	r0, [r3, #0]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	6919      	ldr	r1, [r3, #16]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	7e5b      	ldrb	r3, [r3, #25]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d102      	bne.n	8002b32 <HAL_ADC_ConfigChannel+0x186>
 8002b2c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002b30:	e000      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x188>
 8002b32:	2300      	movs	r3, #0
 8002b34:	461a      	mov	r2, r3
 8002b36:	f7ff fa56 	bl	8001fe6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6818      	ldr	r0, [r3, #0]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	6919      	ldr	r1, [r3, #16]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	7e1b      	ldrb	r3, [r3, #24]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d102      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x1a4>
 8002b4a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002b4e:	e000      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x1a6>
 8002b50:	2300      	movs	r3, #0
 8002b52:	461a      	mov	r2, r3
 8002b54:	f7ff fa2e 	bl	8001fb4 <LL_ADC_SetDataRightShift>
 8002b58:	e04c      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x248>
 8002b5a:	bf00      	nop
 8002b5c:	47ff0000 	.word	0x47ff0000
 8002b60:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b6a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	069b      	lsls	r3, r3, #26
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d107      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002b86:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b8e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	069b      	lsls	r3, r3, #26
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d107      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002baa:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bb2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	069b      	lsls	r3, r3, #26
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d107      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002bce:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bd6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	069b      	lsls	r3, r3, #26
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d107      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002bf2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff fb1b 	bl	8002234 <LL_ADC_IsEnabled>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f040 8211 	bne.w	8003028 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	6819      	ldr	r1, [r3, #0]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	461a      	mov	r2, r3
 8002c14:	f7ff fa6c 	bl	80020f0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	4aa1      	ldr	r2, [pc, #644]	@ (8002ea4 <HAL_ADC_ConfigChannel+0x4f8>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	f040 812e 	bne.w	8002e80 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10b      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x2a0>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	0e9b      	lsrs	r3, r3, #26
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	f003 031f 	and.w	r3, r3, #31
 8002c40:	2b09      	cmp	r3, #9
 8002c42:	bf94      	ite	ls
 8002c44:	2301      	movls	r3, #1
 8002c46:	2300      	movhi	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	e019      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x2d4>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c54:	fa93 f3a3 	rbit	r3, r3
 8002c58:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002c5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002c5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8002c64:	2320      	movs	r3, #32
 8002c66:	e003      	b.n	8002c70 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002c68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c6a:	fab3 f383 	clz	r3, r3
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	3301      	adds	r3, #1
 8002c72:	f003 031f 	and.w	r3, r3, #31
 8002c76:	2b09      	cmp	r3, #9
 8002c78:	bf94      	ite	ls
 8002c7a:	2301      	movls	r3, #1
 8002c7c:	2300      	movhi	r3, #0
 8002c7e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d079      	beq.n	8002d78 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d107      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x2f4>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	0e9b      	lsrs	r3, r3, #26
 8002c96:	3301      	adds	r3, #1
 8002c98:	069b      	lsls	r3, r3, #26
 8002c9a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c9e:	e015      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x320>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ca8:	fa93 f3a3 	rbit	r3, r3
 8002cac:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002cae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cb0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002cb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002cb8:	2320      	movs	r3, #32
 8002cba:	e003      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002cbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cbe:	fab3 f383 	clz	r3, r3
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	069b      	lsls	r3, r3, #26
 8002cc8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d109      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x340>
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	0e9b      	lsrs	r3, r3, #26
 8002cde:	3301      	adds	r3, #1
 8002ce0:	f003 031f 	and.w	r3, r3, #31
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cea:	e017      	b.n	8002d1c <HAL_ADC_ConfigChannel+0x370>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cf4:	fa93 f3a3 	rbit	r3, r3
 8002cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cfc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002cfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002d04:	2320      	movs	r3, #32
 8002d06:	e003      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002d08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d0a:	fab3 f383 	clz	r3, r3
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	3301      	adds	r3, #1
 8002d12:	f003 031f 	and.w	r3, r3, #31
 8002d16:	2101      	movs	r1, #1
 8002d18:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1c:	ea42 0103 	orr.w	r1, r2, r3
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10a      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x396>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	0e9b      	lsrs	r3, r3, #26
 8002d32:	3301      	adds	r3, #1
 8002d34:	f003 021f 	and.w	r2, r3, #31
 8002d38:	4613      	mov	r3, r2
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	4413      	add	r3, r2
 8002d3e:	051b      	lsls	r3, r3, #20
 8002d40:	e018      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x3c8>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d4a:	fa93 f3a3 	rbit	r3, r3
 8002d4e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d52:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8002d5a:	2320      	movs	r3, #32
 8002d5c:	e003      	b.n	8002d66 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8002d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d60:	fab3 f383 	clz	r3, r3
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	3301      	adds	r3, #1
 8002d68:	f003 021f 	and.w	r2, r3, #31
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	4413      	add	r3, r2
 8002d72:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d74:	430b      	orrs	r3, r1
 8002d76:	e07e      	b.n	8002e76 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d107      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x3e8>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	0e9b      	lsrs	r3, r3, #26
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	069b      	lsls	r3, r3, #26
 8002d8e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d92:	e015      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x414>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d9c:	fa93 f3a3 	rbit	r3, r3
 8002da0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002dac:	2320      	movs	r3, #32
 8002dae:	e003      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002db2:	fab3 f383 	clz	r3, r3
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	3301      	adds	r3, #1
 8002dba:	069b      	lsls	r3, r3, #26
 8002dbc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d109      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x434>
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	0e9b      	lsrs	r3, r3, #26
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	f003 031f 	and.w	r3, r3, #31
 8002dd8:	2101      	movs	r1, #1
 8002dda:	fa01 f303 	lsl.w	r3, r1, r3
 8002dde:	e017      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x464>
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	fa93 f3a3 	rbit	r3, r3
 8002dec:	61bb      	str	r3, [r7, #24]
  return result;
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002df8:	2320      	movs	r3, #32
 8002dfa:	e003      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	fab3 f383 	clz	r3, r3
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	3301      	adds	r3, #1
 8002e06:	f003 031f 	and.w	r3, r3, #31
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e10:	ea42 0103 	orr.w	r1, r2, r3
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10d      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x490>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	0e9b      	lsrs	r3, r3, #26
 8002e26:	3301      	adds	r3, #1
 8002e28:	f003 021f 	and.w	r2, r3, #31
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	4413      	add	r3, r2
 8002e32:	3b1e      	subs	r3, #30
 8002e34:	051b      	lsls	r3, r3, #20
 8002e36:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e3a:	e01b      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x4c8>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	fa93 f3a3 	rbit	r3, r3
 8002e48:	60fb      	str	r3, [r7, #12]
  return result;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002e54:	2320      	movs	r3, #32
 8002e56:	e003      	b.n	8002e60 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	fab3 f383 	clz	r3, r3
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	3301      	adds	r3, #1
 8002e62:	f003 021f 	and.w	r2, r3, #31
 8002e66:	4613      	mov	r3, r2
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3b1e      	subs	r3, #30
 8002e6e:	051b      	lsls	r3, r3, #20
 8002e70:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e74:	430b      	orrs	r3, r1
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	6892      	ldr	r2, [r2, #8]
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	f7ff f90d 	bl	800209a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f280 80cf 	bge.w	8003028 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a06      	ldr	r2, [pc, #24]	@ (8002ea8 <HAL_ADC_ConfigChannel+0x4fc>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d004      	beq.n	8002e9e <HAL_ADC_ConfigChannel+0x4f2>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a04      	ldr	r2, [pc, #16]	@ (8002eac <HAL_ADC_ConfigChannel+0x500>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d10a      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x508>
 8002e9e:	4b04      	ldr	r3, [pc, #16]	@ (8002eb0 <HAL_ADC_ConfigChannel+0x504>)
 8002ea0:	e009      	b.n	8002eb6 <HAL_ADC_ConfigChannel+0x50a>
 8002ea2:	bf00      	nop
 8002ea4:	47ff0000 	.word	0x47ff0000
 8002ea8:	40022000 	.word	0x40022000
 8002eac:	40022100 	.word	0x40022100
 8002eb0:	40022300 	.word	0x40022300
 8002eb4:	4b61      	ldr	r3, [pc, #388]	@ (800303c <HAL_ADC_ConfigChannel+0x690>)
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff f84e 	bl	8001f58 <LL_ADC_GetCommonPathInternalCh>
 8002ebc:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a5f      	ldr	r2, [pc, #380]	@ (8003040 <HAL_ADC_ConfigChannel+0x694>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d004      	beq.n	8002ed2 <HAL_ADC_ConfigChannel+0x526>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a5d      	ldr	r2, [pc, #372]	@ (8003044 <HAL_ADC_ConfigChannel+0x698>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d10e      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x544>
 8002ed2:	485b      	ldr	r0, [pc, #364]	@ (8003040 <HAL_ADC_ConfigChannel+0x694>)
 8002ed4:	f7ff f9ae 	bl	8002234 <LL_ADC_IsEnabled>
 8002ed8:	4604      	mov	r4, r0
 8002eda:	485a      	ldr	r0, [pc, #360]	@ (8003044 <HAL_ADC_ConfigChannel+0x698>)
 8002edc:	f7ff f9aa 	bl	8002234 <LL_ADC_IsEnabled>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	4323      	orrs	r3, r4
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	bf0c      	ite	eq
 8002ee8:	2301      	moveq	r3, #1
 8002eea:	2300      	movne	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	e008      	b.n	8002f02 <HAL_ADC_ConfigChannel+0x556>
 8002ef0:	4855      	ldr	r0, [pc, #340]	@ (8003048 <HAL_ADC_ConfigChannel+0x69c>)
 8002ef2:	f7ff f99f 	bl	8002234 <LL_ADC_IsEnabled>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	bf0c      	ite	eq
 8002efc:	2301      	moveq	r3, #1
 8002efe:	2300      	movne	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d07d      	beq.n	8003002 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a50      	ldr	r2, [pc, #320]	@ (800304c <HAL_ADC_ConfigChannel+0x6a0>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d130      	bne.n	8002f72 <HAL_ADC_ConfigChannel+0x5c6>
 8002f10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d12b      	bne.n	8002f72 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a4a      	ldr	r2, [pc, #296]	@ (8003048 <HAL_ADC_ConfigChannel+0x69c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	f040 8081 	bne.w	8003028 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a45      	ldr	r2, [pc, #276]	@ (8003040 <HAL_ADC_ConfigChannel+0x694>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d004      	beq.n	8002f3a <HAL_ADC_ConfigChannel+0x58e>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a43      	ldr	r2, [pc, #268]	@ (8003044 <HAL_ADC_ConfigChannel+0x698>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d101      	bne.n	8002f3e <HAL_ADC_ConfigChannel+0x592>
 8002f3a:	4a45      	ldr	r2, [pc, #276]	@ (8003050 <HAL_ADC_ConfigChannel+0x6a4>)
 8002f3c:	e000      	b.n	8002f40 <HAL_ADC_ConfigChannel+0x594>
 8002f3e:	4a3f      	ldr	r2, [pc, #252]	@ (800303c <HAL_ADC_ConfigChannel+0x690>)
 8002f40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f42:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f46:	4619      	mov	r1, r3
 8002f48:	4610      	mov	r0, r2
 8002f4a:	f7fe fff2 	bl	8001f32 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f4e:	4b41      	ldr	r3, [pc, #260]	@ (8003054 <HAL_ADC_ConfigChannel+0x6a8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	099b      	lsrs	r3, r3, #6
 8002f54:	4a40      	ldr	r2, [pc, #256]	@ (8003058 <HAL_ADC_ConfigChannel+0x6ac>)
 8002f56:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5a:	099b      	lsrs	r3, r3, #6
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002f62:	e002      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	3b01      	subs	r3, #1
 8002f68:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1f9      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f70:	e05a      	b.n	8003028 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a39      	ldr	r2, [pc, #228]	@ (800305c <HAL_ADC_ConfigChannel+0x6b0>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d11e      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x60e>
 8002f7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d119      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a2f      	ldr	r2, [pc, #188]	@ (8003048 <HAL_ADC_ConfigChannel+0x69c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d14b      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a2a      	ldr	r2, [pc, #168]	@ (8003040 <HAL_ADC_ConfigChannel+0x694>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d004      	beq.n	8002fa4 <HAL_ADC_ConfigChannel+0x5f8>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a29      	ldr	r2, [pc, #164]	@ (8003044 <HAL_ADC_ConfigChannel+0x698>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d101      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x5fc>
 8002fa4:	4a2a      	ldr	r2, [pc, #168]	@ (8003050 <HAL_ADC_ConfigChannel+0x6a4>)
 8002fa6:	e000      	b.n	8002faa <HAL_ADC_ConfigChannel+0x5fe>
 8002fa8:	4a24      	ldr	r2, [pc, #144]	@ (800303c <HAL_ADC_ConfigChannel+0x690>)
 8002faa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4610      	mov	r0, r2
 8002fb4:	f7fe ffbd 	bl	8001f32 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fb8:	e036      	b.n	8003028 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a28      	ldr	r2, [pc, #160]	@ (8003060 <HAL_ADC_ConfigChannel+0x6b4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d131      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x67c>
 8002fc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d12c      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a1d      	ldr	r2, [pc, #116]	@ (8003048 <HAL_ADC_ConfigChannel+0x69c>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d127      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a18      	ldr	r2, [pc, #96]	@ (8003040 <HAL_ADC_ConfigChannel+0x694>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d004      	beq.n	8002fec <HAL_ADC_ConfigChannel+0x640>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a17      	ldr	r2, [pc, #92]	@ (8003044 <HAL_ADC_ConfigChannel+0x698>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d101      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x644>
 8002fec:	4a18      	ldr	r2, [pc, #96]	@ (8003050 <HAL_ADC_ConfigChannel+0x6a4>)
 8002fee:	e000      	b.n	8002ff2 <HAL_ADC_ConfigChannel+0x646>
 8002ff0:	4a12      	ldr	r2, [pc, #72]	@ (800303c <HAL_ADC_ConfigChannel+0x690>)
 8002ff2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ff4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	f7fe ff99 	bl	8001f32 <LL_ADC_SetCommonPathInternalCh>
 8003000:	e012      	b.n	8003028 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003006:	f043 0220 	orr.w	r2, r3, #32
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003014:	e008      	b.n	8003028 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800301a:	f043 0220 	orr.w	r2, r3, #32
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003030:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003034:	4618      	mov	r0, r3
 8003036:	3784      	adds	r7, #132	@ 0x84
 8003038:	46bd      	mov	sp, r7
 800303a:	bd90      	pop	{r4, r7, pc}
 800303c:	58026300 	.word	0x58026300
 8003040:	40022000 	.word	0x40022000
 8003044:	40022100 	.word	0x40022100
 8003048:	58026000 	.word	0x58026000
 800304c:	cb840000 	.word	0xcb840000
 8003050:	40022300 	.word	0x40022300
 8003054:	24000000 	.word	0x24000000
 8003058:	053e2d63 	.word	0x053e2d63
 800305c:	c7520000 	.word	0xc7520000
 8003060:	cfb80000 	.word	0xcfb80000

08003064 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff f8df 	bl	8002234 <LL_ADC_IsEnabled>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d16e      	bne.n	800315a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	4b38      	ldr	r3, [pc, #224]	@ (8003164 <ADC_Enable+0x100>)
 8003084:	4013      	ands	r3, r2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00d      	beq.n	80030a6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800308e:	f043 0210 	orr.w	r2, r3, #16
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800309a:	f043 0201 	orr.w	r2, r3, #1
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e05a      	b.n	800315c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff f8ae 	bl	800220c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80030b0:	f7fe fef0 	bl	8001e94 <HAL_GetTick>
 80030b4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a2b      	ldr	r2, [pc, #172]	@ (8003168 <ADC_Enable+0x104>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d004      	beq.n	80030ca <ADC_Enable+0x66>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a29      	ldr	r2, [pc, #164]	@ (800316c <ADC_Enable+0x108>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d101      	bne.n	80030ce <ADC_Enable+0x6a>
 80030ca:	4b29      	ldr	r3, [pc, #164]	@ (8003170 <ADC_Enable+0x10c>)
 80030cc:	e000      	b.n	80030d0 <ADC_Enable+0x6c>
 80030ce:	4b29      	ldr	r3, [pc, #164]	@ (8003174 <ADC_Enable+0x110>)
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff f831 	bl	8002138 <LL_ADC_GetMultimode>
 80030d6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a23      	ldr	r2, [pc, #140]	@ (800316c <ADC_Enable+0x108>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d002      	beq.n	80030e8 <ADC_Enable+0x84>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	e000      	b.n	80030ea <ADC_Enable+0x86>
 80030e8:	4b1f      	ldr	r3, [pc, #124]	@ (8003168 <ADC_Enable+0x104>)
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6812      	ldr	r2, [r2, #0]
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d02c      	beq.n	800314c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d130      	bne.n	800315a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030f8:	e028      	b.n	800314c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff f898 	bl	8002234 <LL_ADC_IsEnabled>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d104      	bne.n	8003114 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff f87c 	bl	800220c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003114:	f7fe febe 	bl	8001e94 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d914      	bls.n	800314c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b01      	cmp	r3, #1
 800312e:	d00d      	beq.n	800314c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003134:	f043 0210 	orr.w	r2, r3, #16
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003140:	f043 0201 	orr.w	r2, r3, #1
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e007      	b.n	800315c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b01      	cmp	r3, #1
 8003158:	d1cf      	bne.n	80030fa <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	8000003f 	.word	0x8000003f
 8003168:	40022000 	.word	0x40022000
 800316c:	40022100 	.word	0x40022100
 8003170:	40022300 	.word	0x40022300
 8003174:	58026300 	.word	0x58026300

08003178 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a7a      	ldr	r2, [pc, #488]	@ (8003370 <ADC_ConfigureBoostMode+0x1f8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d004      	beq.n	8003194 <ADC_ConfigureBoostMode+0x1c>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a79      	ldr	r2, [pc, #484]	@ (8003374 <ADC_ConfigureBoostMode+0x1fc>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d109      	bne.n	80031a8 <ADC_ConfigureBoostMode+0x30>
 8003194:	4b78      	ldr	r3, [pc, #480]	@ (8003378 <ADC_ConfigureBoostMode+0x200>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800319c:	2b00      	cmp	r3, #0
 800319e:	bf14      	ite	ne
 80031a0:	2301      	movne	r3, #1
 80031a2:	2300      	moveq	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	e008      	b.n	80031ba <ADC_ConfigureBoostMode+0x42>
 80031a8:	4b74      	ldr	r3, [pc, #464]	@ (800337c <ADC_ConfigureBoostMode+0x204>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	bf14      	ite	ne
 80031b4:	2301      	movne	r3, #1
 80031b6:	2300      	moveq	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d01c      	beq.n	80031f8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80031be:	f004 fb63 	bl	8007888 <HAL_RCC_GetHCLKFreq>
 80031c2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80031cc:	d010      	beq.n	80031f0 <ADC_ConfigureBoostMode+0x78>
 80031ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80031d2:	d873      	bhi.n	80032bc <ADC_ConfigureBoostMode+0x144>
 80031d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031d8:	d002      	beq.n	80031e0 <ADC_ConfigureBoostMode+0x68>
 80031da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80031de:	d16d      	bne.n	80032bc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	0c1b      	lsrs	r3, r3, #16
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ec:	60fb      	str	r3, [r7, #12]
        break;
 80031ee:	e068      	b.n	80032c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	089b      	lsrs	r3, r3, #2
 80031f4:	60fb      	str	r3, [r7, #12]
        break;
 80031f6:	e064      	b.n	80032c2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80031f8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80031fc:	f04f 0100 	mov.w	r1, #0
 8003200:	f005 fda8 	bl	8008d54 <HAL_RCCEx_GetPeriphCLKFreq>
 8003204:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800320e:	d051      	beq.n	80032b4 <ADC_ConfigureBoostMode+0x13c>
 8003210:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003214:	d854      	bhi.n	80032c0 <ADC_ConfigureBoostMode+0x148>
 8003216:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800321a:	d047      	beq.n	80032ac <ADC_ConfigureBoostMode+0x134>
 800321c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003220:	d84e      	bhi.n	80032c0 <ADC_ConfigureBoostMode+0x148>
 8003222:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003226:	d03d      	beq.n	80032a4 <ADC_ConfigureBoostMode+0x12c>
 8003228:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800322c:	d848      	bhi.n	80032c0 <ADC_ConfigureBoostMode+0x148>
 800322e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003232:	d033      	beq.n	800329c <ADC_ConfigureBoostMode+0x124>
 8003234:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003238:	d842      	bhi.n	80032c0 <ADC_ConfigureBoostMode+0x148>
 800323a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800323e:	d029      	beq.n	8003294 <ADC_ConfigureBoostMode+0x11c>
 8003240:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003244:	d83c      	bhi.n	80032c0 <ADC_ConfigureBoostMode+0x148>
 8003246:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800324a:	d01a      	beq.n	8003282 <ADC_ConfigureBoostMode+0x10a>
 800324c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003250:	d836      	bhi.n	80032c0 <ADC_ConfigureBoostMode+0x148>
 8003252:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003256:	d014      	beq.n	8003282 <ADC_ConfigureBoostMode+0x10a>
 8003258:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800325c:	d830      	bhi.n	80032c0 <ADC_ConfigureBoostMode+0x148>
 800325e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003262:	d00e      	beq.n	8003282 <ADC_ConfigureBoostMode+0x10a>
 8003264:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003268:	d82a      	bhi.n	80032c0 <ADC_ConfigureBoostMode+0x148>
 800326a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800326e:	d008      	beq.n	8003282 <ADC_ConfigureBoostMode+0x10a>
 8003270:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003274:	d824      	bhi.n	80032c0 <ADC_ConfigureBoostMode+0x148>
 8003276:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800327a:	d002      	beq.n	8003282 <ADC_ConfigureBoostMode+0x10a>
 800327c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003280:	d11e      	bne.n	80032c0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	0c9b      	lsrs	r3, r3, #18
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003290:	60fb      	str	r3, [r7, #12]
        break;
 8003292:	e016      	b.n	80032c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	091b      	lsrs	r3, r3, #4
 8003298:	60fb      	str	r3, [r7, #12]
        break;
 800329a:	e012      	b.n	80032c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	60fb      	str	r3, [r7, #12]
        break;
 80032a2:	e00e      	b.n	80032c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	099b      	lsrs	r3, r3, #6
 80032a8:	60fb      	str	r3, [r7, #12]
        break;
 80032aa:	e00a      	b.n	80032c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	09db      	lsrs	r3, r3, #7
 80032b0:	60fb      	str	r3, [r7, #12]
        break;
 80032b2:	e006      	b.n	80032c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	0a1b      	lsrs	r3, r3, #8
 80032b8:	60fb      	str	r3, [r7, #12]
        break;
 80032ba:	e002      	b.n	80032c2 <ADC_ConfigureBoostMode+0x14a>
        break;
 80032bc:	bf00      	nop
 80032be:	e000      	b.n	80032c2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80032c0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80032c2:	f7fe fe17 	bl	8001ef4 <HAL_GetREVID>
 80032c6:	4603      	mov	r3, r0
 80032c8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d815      	bhi.n	80032fc <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4a2b      	ldr	r2, [pc, #172]	@ (8003380 <ADC_ConfigureBoostMode+0x208>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d908      	bls.n	80032ea <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689a      	ldr	r2, [r3, #8]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032e6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80032e8:	e03e      	b.n	8003368 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032f8:	609a      	str	r2, [r3, #8]
}
 80032fa:	e035      	b.n	8003368 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	085b      	lsrs	r3, r3, #1
 8003300:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4a1f      	ldr	r2, [pc, #124]	@ (8003384 <ADC_ConfigureBoostMode+0x20c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d808      	bhi.n	800331c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003318:	609a      	str	r2, [r3, #8]
}
 800331a:	e025      	b.n	8003368 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4a1a      	ldr	r2, [pc, #104]	@ (8003388 <ADC_ConfigureBoostMode+0x210>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d80a      	bhi.n	800333a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003336:	609a      	str	r2, [r3, #8]
}
 8003338:	e016      	b.n	8003368 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4a13      	ldr	r2, [pc, #76]	@ (800338c <ADC_ConfigureBoostMode+0x214>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d80a      	bhi.n	8003358 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003354:	609a      	str	r2, [r3, #8]
}
 8003356:	e007      	b.n	8003368 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003366:	609a      	str	r2, [r3, #8]
}
 8003368:	bf00      	nop
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40022000 	.word	0x40022000
 8003374:	40022100 	.word	0x40022100
 8003378:	40022300 	.word	0x40022300
 800337c:	58026300 	.word	0x58026300
 8003380:	01312d00 	.word	0x01312d00
 8003384:	005f5e10 	.word	0x005f5e10
 8003388:	00bebc20 	.word	0x00bebc20
 800338c:	017d7840 	.word	0x017d7840

08003390 <LL_ADC_IsEnabled>:
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <LL_ADC_IsEnabled+0x18>
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <LL_ADC_IsEnabled+0x1a>
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <LL_ADC_REG_IsConversionOngoing>:
{
 80033b6:	b480      	push	{r7}
 80033b8:	b083      	sub	sp, #12
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 0304 	and.w	r3, r3, #4
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d101      	bne.n	80033ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80033ca:	2301      	movs	r3, #1
 80033cc:	e000      	b.n	80033d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80033dc:	b590      	push	{r4, r7, lr}
 80033de:	b09f      	sub	sp, #124	@ 0x7c
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033e6:	2300      	movs	r3, #0
 80033e8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80033f6:	2302      	movs	r3, #2
 80033f8:	e0be      	b.n	8003578 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003402:	2300      	movs	r3, #0
 8003404:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003406:	2300      	movs	r3, #0
 8003408:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a5c      	ldr	r2, [pc, #368]	@ (8003580 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d102      	bne.n	800341a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003414:	4b5b      	ldr	r3, [pc, #364]	@ (8003584 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003416:	60bb      	str	r3, [r7, #8]
 8003418:	e001      	b.n	800341e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800341a:	2300      	movs	r3, #0
 800341c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10b      	bne.n	800343c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003428:	f043 0220 	orr.w	r2, r3, #32
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e09d      	b.n	8003578 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff ffb9 	bl	80033b6 <LL_ADC_REG_IsConversionOngoing>
 8003444:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff ffb3 	bl	80033b6 <LL_ADC_REG_IsConversionOngoing>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d17f      	bne.n	8003556 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003456:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003458:	2b00      	cmp	r3, #0
 800345a:	d17c      	bne.n	8003556 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a47      	ldr	r2, [pc, #284]	@ (8003580 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d004      	beq.n	8003470 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a46      	ldr	r2, [pc, #280]	@ (8003584 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d101      	bne.n	8003474 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003470:	4b45      	ldr	r3, [pc, #276]	@ (8003588 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003472:	e000      	b.n	8003476 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003474:	4b45      	ldr	r3, [pc, #276]	@ (800358c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003476:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d039      	beq.n	80034f4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003480:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	431a      	orrs	r2, r3
 800348e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003490:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a3a      	ldr	r2, [pc, #232]	@ (8003580 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d004      	beq.n	80034a6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a38      	ldr	r2, [pc, #224]	@ (8003584 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d10e      	bne.n	80034c4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80034a6:	4836      	ldr	r0, [pc, #216]	@ (8003580 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80034a8:	f7ff ff72 	bl	8003390 <LL_ADC_IsEnabled>
 80034ac:	4604      	mov	r4, r0
 80034ae:	4835      	ldr	r0, [pc, #212]	@ (8003584 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80034b0:	f7ff ff6e 	bl	8003390 <LL_ADC_IsEnabled>
 80034b4:	4603      	mov	r3, r0
 80034b6:	4323      	orrs	r3, r4
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	bf0c      	ite	eq
 80034bc:	2301      	moveq	r3, #1
 80034be:	2300      	movne	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	e008      	b.n	80034d6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80034c4:	4832      	ldr	r0, [pc, #200]	@ (8003590 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80034c6:	f7ff ff63 	bl	8003390 <LL_ADC_IsEnabled>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	bf0c      	ite	eq
 80034d0:	2301      	moveq	r3, #1
 80034d2:	2300      	movne	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d047      	beq.n	800356a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80034da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	4b2d      	ldr	r3, [pc, #180]	@ (8003594 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80034e0:	4013      	ands	r3, r2
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	6811      	ldr	r1, [r2, #0]
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	6892      	ldr	r2, [r2, #8]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	431a      	orrs	r2, r3
 80034ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034f0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034f2:	e03a      	b.n	800356a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80034f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80034fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034fe:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a1e      	ldr	r2, [pc, #120]	@ (8003580 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d004      	beq.n	8003514 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a1d      	ldr	r2, [pc, #116]	@ (8003584 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d10e      	bne.n	8003532 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003514:	481a      	ldr	r0, [pc, #104]	@ (8003580 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003516:	f7ff ff3b 	bl	8003390 <LL_ADC_IsEnabled>
 800351a:	4604      	mov	r4, r0
 800351c:	4819      	ldr	r0, [pc, #100]	@ (8003584 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800351e:	f7ff ff37 	bl	8003390 <LL_ADC_IsEnabled>
 8003522:	4603      	mov	r3, r0
 8003524:	4323      	orrs	r3, r4
 8003526:	2b00      	cmp	r3, #0
 8003528:	bf0c      	ite	eq
 800352a:	2301      	moveq	r3, #1
 800352c:	2300      	movne	r3, #0
 800352e:	b2db      	uxtb	r3, r3
 8003530:	e008      	b.n	8003544 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003532:	4817      	ldr	r0, [pc, #92]	@ (8003590 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003534:	f7ff ff2c 	bl	8003390 <LL_ADC_IsEnabled>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	bf0c      	ite	eq
 800353e:	2301      	moveq	r3, #1
 8003540:	2300      	movne	r3, #0
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	d010      	beq.n	800356a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003548:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	4b11      	ldr	r3, [pc, #68]	@ (8003594 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800354e:	4013      	ands	r3, r2
 8003550:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003552:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003554:	e009      	b.n	800356a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800355a:	f043 0220 	orr.w	r2, r3, #32
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003568:	e000      	b.n	800356c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800356a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003574:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003578:	4618      	mov	r0, r3
 800357a:	377c      	adds	r7, #124	@ 0x7c
 800357c:	46bd      	mov	sp, r7
 800357e:	bd90      	pop	{r4, r7, pc}
 8003580:	40022000 	.word	0x40022000
 8003584:	40022100 	.word	0x40022100
 8003588:	40022300 	.word	0x40022300
 800358c:	58026300 	.word	0x58026300
 8003590:	58026000 	.word	0x58026000
 8003594:	fffff0e0 	.word	0xfffff0e0

08003598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f003 0307 	and.w	r3, r3, #7
 80035a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035a8:	4b0b      	ldr	r3, [pc, #44]	@ (80035d8 <__NVIC_SetPriorityGrouping+0x40>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035b4:	4013      	ands	r3, r2
 80035b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80035c0:	4b06      	ldr	r3, [pc, #24]	@ (80035dc <__NVIC_SetPriorityGrouping+0x44>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035c6:	4a04      	ldr	r2, [pc, #16]	@ (80035d8 <__NVIC_SetPriorityGrouping+0x40>)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	60d3      	str	r3, [r2, #12]
}
 80035cc:	bf00      	nop
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	e000ed00 	.word	0xe000ed00
 80035dc:	05fa0000 	.word	0x05fa0000

080035e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035e4:	4b04      	ldr	r3, [pc, #16]	@ (80035f8 <__NVIC_GetPriorityGrouping+0x18>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	0a1b      	lsrs	r3, r3, #8
 80035ea:	f003 0307 	and.w	r3, r3, #7
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	e000ed00 	.word	0xe000ed00

080035fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800360a:	2b00      	cmp	r3, #0
 800360c:	db0b      	blt.n	8003626 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800360e:	88fb      	ldrh	r3, [r7, #6]
 8003610:	f003 021f 	and.w	r2, r3, #31
 8003614:	4907      	ldr	r1, [pc, #28]	@ (8003634 <__NVIC_EnableIRQ+0x38>)
 8003616:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800361a:	095b      	lsrs	r3, r3, #5
 800361c:	2001      	movs	r0, #1
 800361e:	fa00 f202 	lsl.w	r2, r0, r2
 8003622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	e000e100 	.word	0xe000e100

08003638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	4603      	mov	r3, r0
 8003640:	6039      	str	r1, [r7, #0]
 8003642:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003644:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003648:	2b00      	cmp	r3, #0
 800364a:	db0a      	blt.n	8003662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	b2da      	uxtb	r2, r3
 8003650:	490c      	ldr	r1, [pc, #48]	@ (8003684 <__NVIC_SetPriority+0x4c>)
 8003652:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003656:	0112      	lsls	r2, r2, #4
 8003658:	b2d2      	uxtb	r2, r2
 800365a:	440b      	add	r3, r1
 800365c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003660:	e00a      	b.n	8003678 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	b2da      	uxtb	r2, r3
 8003666:	4908      	ldr	r1, [pc, #32]	@ (8003688 <__NVIC_SetPriority+0x50>)
 8003668:	88fb      	ldrh	r3, [r7, #6]
 800366a:	f003 030f 	and.w	r3, r3, #15
 800366e:	3b04      	subs	r3, #4
 8003670:	0112      	lsls	r2, r2, #4
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	440b      	add	r3, r1
 8003676:	761a      	strb	r2, [r3, #24]
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	e000e100 	.word	0xe000e100
 8003688:	e000ed00 	.word	0xe000ed00

0800368c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800368c:	b480      	push	{r7}
 800368e:	b089      	sub	sp, #36	@ 0x24
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	f1c3 0307 	rsb	r3, r3, #7
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	bf28      	it	cs
 80036aa:	2304      	movcs	r3, #4
 80036ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	3304      	adds	r3, #4
 80036b2:	2b06      	cmp	r3, #6
 80036b4:	d902      	bls.n	80036bc <NVIC_EncodePriority+0x30>
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	3b03      	subs	r3, #3
 80036ba:	e000      	b.n	80036be <NVIC_EncodePriority+0x32>
 80036bc:	2300      	movs	r3, #0
 80036be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c0:	f04f 32ff 	mov.w	r2, #4294967295
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ca:	43da      	mvns	r2, r3
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	401a      	ands	r2, r3
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036d4:	f04f 31ff 	mov.w	r1, #4294967295
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	fa01 f303 	lsl.w	r3, r1, r3
 80036de:	43d9      	mvns	r1, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036e4:	4313      	orrs	r3, r2
         );
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3724      	adds	r7, #36	@ 0x24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
	...

080036f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3b01      	subs	r3, #1
 8003700:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003704:	d301      	bcc.n	800370a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003706:	2301      	movs	r3, #1
 8003708:	e00f      	b.n	800372a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800370a:	4a0a      	ldr	r2, [pc, #40]	@ (8003734 <SysTick_Config+0x40>)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3b01      	subs	r3, #1
 8003710:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003712:	210f      	movs	r1, #15
 8003714:	f04f 30ff 	mov.w	r0, #4294967295
 8003718:	f7ff ff8e 	bl	8003638 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800371c:	4b05      	ldr	r3, [pc, #20]	@ (8003734 <SysTick_Config+0x40>)
 800371e:	2200      	movs	r2, #0
 8003720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003722:	4b04      	ldr	r3, [pc, #16]	@ (8003734 <SysTick_Config+0x40>)
 8003724:	2207      	movs	r2, #7
 8003726:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	e000e010 	.word	0xe000e010

08003738 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7ff ff29 	bl	8003598 <__NVIC_SetPriorityGrouping>
}
 8003746:	bf00      	nop
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b086      	sub	sp, #24
 8003752:	af00      	add	r7, sp, #0
 8003754:	4603      	mov	r3, r0
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	607a      	str	r2, [r7, #4]
 800375a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800375c:	f7ff ff40 	bl	80035e0 <__NVIC_GetPriorityGrouping>
 8003760:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	68b9      	ldr	r1, [r7, #8]
 8003766:	6978      	ldr	r0, [r7, #20]
 8003768:	f7ff ff90 	bl	800368c <NVIC_EncodePriority>
 800376c:	4602      	mov	r2, r0
 800376e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003772:	4611      	mov	r1, r2
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff ff5f 	bl	8003638 <__NVIC_SetPriority>
}
 800377a:	bf00      	nop
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b082      	sub	sp, #8
 8003786:	af00      	add	r7, sp, #0
 8003788:	4603      	mov	r3, r0
 800378a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800378c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff ff33 	bl	80035fc <__NVIC_EnableIRQ>
}
 8003796:	bf00      	nop
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7ff ffa4 	bl	80036f4 <SysTick_Config>
 80037ac:	4603      	mov	r3, r0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80037c0:	f7fe fb68 	bl	8001e94 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e316      	b.n	8003dfe <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a66      	ldr	r2, [pc, #408]	@ (8003970 <HAL_DMA_Init+0x1b8>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d04a      	beq.n	8003870 <HAL_DMA_Init+0xb8>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a65      	ldr	r2, [pc, #404]	@ (8003974 <HAL_DMA_Init+0x1bc>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d045      	beq.n	8003870 <HAL_DMA_Init+0xb8>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a63      	ldr	r2, [pc, #396]	@ (8003978 <HAL_DMA_Init+0x1c0>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d040      	beq.n	8003870 <HAL_DMA_Init+0xb8>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a62      	ldr	r2, [pc, #392]	@ (800397c <HAL_DMA_Init+0x1c4>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d03b      	beq.n	8003870 <HAL_DMA_Init+0xb8>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a60      	ldr	r2, [pc, #384]	@ (8003980 <HAL_DMA_Init+0x1c8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d036      	beq.n	8003870 <HAL_DMA_Init+0xb8>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a5f      	ldr	r2, [pc, #380]	@ (8003984 <HAL_DMA_Init+0x1cc>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d031      	beq.n	8003870 <HAL_DMA_Init+0xb8>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a5d      	ldr	r2, [pc, #372]	@ (8003988 <HAL_DMA_Init+0x1d0>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d02c      	beq.n	8003870 <HAL_DMA_Init+0xb8>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a5c      	ldr	r2, [pc, #368]	@ (800398c <HAL_DMA_Init+0x1d4>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d027      	beq.n	8003870 <HAL_DMA_Init+0xb8>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a5a      	ldr	r2, [pc, #360]	@ (8003990 <HAL_DMA_Init+0x1d8>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d022      	beq.n	8003870 <HAL_DMA_Init+0xb8>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a59      	ldr	r2, [pc, #356]	@ (8003994 <HAL_DMA_Init+0x1dc>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d01d      	beq.n	8003870 <HAL_DMA_Init+0xb8>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a57      	ldr	r2, [pc, #348]	@ (8003998 <HAL_DMA_Init+0x1e0>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d018      	beq.n	8003870 <HAL_DMA_Init+0xb8>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a56      	ldr	r2, [pc, #344]	@ (800399c <HAL_DMA_Init+0x1e4>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d013      	beq.n	8003870 <HAL_DMA_Init+0xb8>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a54      	ldr	r2, [pc, #336]	@ (80039a0 <HAL_DMA_Init+0x1e8>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d00e      	beq.n	8003870 <HAL_DMA_Init+0xb8>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a53      	ldr	r2, [pc, #332]	@ (80039a4 <HAL_DMA_Init+0x1ec>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d009      	beq.n	8003870 <HAL_DMA_Init+0xb8>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a51      	ldr	r2, [pc, #324]	@ (80039a8 <HAL_DMA_Init+0x1f0>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d004      	beq.n	8003870 <HAL_DMA_Init+0xb8>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a50      	ldr	r2, [pc, #320]	@ (80039ac <HAL_DMA_Init+0x1f4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d101      	bne.n	8003874 <HAL_DMA_Init+0xbc>
 8003870:	2301      	movs	r3, #1
 8003872:	e000      	b.n	8003876 <HAL_DMA_Init+0xbe>
 8003874:	2300      	movs	r3, #0
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 813b 	beq.w	8003af2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a37      	ldr	r2, [pc, #220]	@ (8003970 <HAL_DMA_Init+0x1b8>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d04a      	beq.n	800392c <HAL_DMA_Init+0x174>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a36      	ldr	r2, [pc, #216]	@ (8003974 <HAL_DMA_Init+0x1bc>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d045      	beq.n	800392c <HAL_DMA_Init+0x174>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a34      	ldr	r2, [pc, #208]	@ (8003978 <HAL_DMA_Init+0x1c0>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d040      	beq.n	800392c <HAL_DMA_Init+0x174>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a33      	ldr	r2, [pc, #204]	@ (800397c <HAL_DMA_Init+0x1c4>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d03b      	beq.n	800392c <HAL_DMA_Init+0x174>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a31      	ldr	r2, [pc, #196]	@ (8003980 <HAL_DMA_Init+0x1c8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d036      	beq.n	800392c <HAL_DMA_Init+0x174>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a30      	ldr	r2, [pc, #192]	@ (8003984 <HAL_DMA_Init+0x1cc>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d031      	beq.n	800392c <HAL_DMA_Init+0x174>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a2e      	ldr	r2, [pc, #184]	@ (8003988 <HAL_DMA_Init+0x1d0>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d02c      	beq.n	800392c <HAL_DMA_Init+0x174>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a2d      	ldr	r2, [pc, #180]	@ (800398c <HAL_DMA_Init+0x1d4>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d027      	beq.n	800392c <HAL_DMA_Init+0x174>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a2b      	ldr	r2, [pc, #172]	@ (8003990 <HAL_DMA_Init+0x1d8>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d022      	beq.n	800392c <HAL_DMA_Init+0x174>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a2a      	ldr	r2, [pc, #168]	@ (8003994 <HAL_DMA_Init+0x1dc>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d01d      	beq.n	800392c <HAL_DMA_Init+0x174>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a28      	ldr	r2, [pc, #160]	@ (8003998 <HAL_DMA_Init+0x1e0>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d018      	beq.n	800392c <HAL_DMA_Init+0x174>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a27      	ldr	r2, [pc, #156]	@ (800399c <HAL_DMA_Init+0x1e4>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d013      	beq.n	800392c <HAL_DMA_Init+0x174>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a25      	ldr	r2, [pc, #148]	@ (80039a0 <HAL_DMA_Init+0x1e8>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d00e      	beq.n	800392c <HAL_DMA_Init+0x174>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a24      	ldr	r2, [pc, #144]	@ (80039a4 <HAL_DMA_Init+0x1ec>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d009      	beq.n	800392c <HAL_DMA_Init+0x174>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a22      	ldr	r2, [pc, #136]	@ (80039a8 <HAL_DMA_Init+0x1f0>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d004      	beq.n	800392c <HAL_DMA_Init+0x174>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a21      	ldr	r2, [pc, #132]	@ (80039ac <HAL_DMA_Init+0x1f4>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d108      	bne.n	800393e <HAL_DMA_Init+0x186>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0201 	bic.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	e007      	b.n	800394e <HAL_DMA_Init+0x196>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 0201 	bic.w	r2, r2, #1
 800394c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800394e:	e02f      	b.n	80039b0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003950:	f7fe faa0 	bl	8001e94 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b05      	cmp	r3, #5
 800395c:	d928      	bls.n	80039b0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2220      	movs	r2, #32
 8003962:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2203      	movs	r2, #3
 8003968:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e246      	b.n	8003dfe <HAL_DMA_Init+0x646>
 8003970:	40020010 	.word	0x40020010
 8003974:	40020028 	.word	0x40020028
 8003978:	40020040 	.word	0x40020040
 800397c:	40020058 	.word	0x40020058
 8003980:	40020070 	.word	0x40020070
 8003984:	40020088 	.word	0x40020088
 8003988:	400200a0 	.word	0x400200a0
 800398c:	400200b8 	.word	0x400200b8
 8003990:	40020410 	.word	0x40020410
 8003994:	40020428 	.word	0x40020428
 8003998:	40020440 	.word	0x40020440
 800399c:	40020458 	.word	0x40020458
 80039a0:	40020470 	.word	0x40020470
 80039a4:	40020488 	.word	0x40020488
 80039a8:	400204a0 	.word	0x400204a0
 80039ac:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1c8      	bne.n	8003950 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	4b83      	ldr	r3, [pc, #524]	@ (8003bd8 <HAL_DMA_Init+0x420>)
 80039ca:	4013      	ands	r3, r2
 80039cc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80039d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ee:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a00:	2b04      	cmp	r3, #4
 8003a02:	d107      	bne.n	8003a14 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003a14:	4b71      	ldr	r3, [pc, #452]	@ (8003bdc <HAL_DMA_Init+0x424>)
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	4b71      	ldr	r3, [pc, #452]	@ (8003be0 <HAL_DMA_Init+0x428>)
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a20:	d328      	bcc.n	8003a74 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2b28      	cmp	r3, #40	@ 0x28
 8003a28:	d903      	bls.n	8003a32 <HAL_DMA_Init+0x27a>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a30:	d917      	bls.n	8003a62 <HAL_DMA_Init+0x2aa>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b3e      	cmp	r3, #62	@ 0x3e
 8003a38:	d903      	bls.n	8003a42 <HAL_DMA_Init+0x28a>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2b42      	cmp	r3, #66	@ 0x42
 8003a40:	d90f      	bls.n	8003a62 <HAL_DMA_Init+0x2aa>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b46      	cmp	r3, #70	@ 0x46
 8003a48:	d903      	bls.n	8003a52 <HAL_DMA_Init+0x29a>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b48      	cmp	r3, #72	@ 0x48
 8003a50:	d907      	bls.n	8003a62 <HAL_DMA_Init+0x2aa>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b4e      	cmp	r3, #78	@ 0x4e
 8003a58:	d905      	bls.n	8003a66 <HAL_DMA_Init+0x2ae>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b52      	cmp	r3, #82	@ 0x52
 8003a60:	d801      	bhi.n	8003a66 <HAL_DMA_Init+0x2ae>
 8003a62:	2301      	movs	r3, #1
 8003a64:	e000      	b.n	8003a68 <HAL_DMA_Init+0x2b0>
 8003a66:	2300      	movs	r3, #0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d003      	beq.n	8003a74 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a72:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f023 0307 	bic.w	r3, r3, #7
 8003a8a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d117      	bne.n	8003ace <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00e      	beq.n	8003ace <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f001 ff1d 	bl	80058f0 <DMA_CheckFifoParam>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d008      	beq.n	8003ace <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2240      	movs	r2, #64	@ 0x40
 8003ac0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e197      	b.n	8003dfe <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f001 fe58 	bl	800578c <DMA_CalcBaseAndBitshift>
 8003adc:	4603      	mov	r3, r0
 8003ade:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae4:	f003 031f 	and.w	r3, r3, #31
 8003ae8:	223f      	movs	r2, #63	@ 0x3f
 8003aea:	409a      	lsls	r2, r3
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	609a      	str	r2, [r3, #8]
 8003af0:	e0cd      	b.n	8003c8e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a3b      	ldr	r2, [pc, #236]	@ (8003be4 <HAL_DMA_Init+0x42c>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d022      	beq.n	8003b42 <HAL_DMA_Init+0x38a>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a39      	ldr	r2, [pc, #228]	@ (8003be8 <HAL_DMA_Init+0x430>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d01d      	beq.n	8003b42 <HAL_DMA_Init+0x38a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a38      	ldr	r2, [pc, #224]	@ (8003bec <HAL_DMA_Init+0x434>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d018      	beq.n	8003b42 <HAL_DMA_Init+0x38a>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a36      	ldr	r2, [pc, #216]	@ (8003bf0 <HAL_DMA_Init+0x438>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d013      	beq.n	8003b42 <HAL_DMA_Init+0x38a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a35      	ldr	r2, [pc, #212]	@ (8003bf4 <HAL_DMA_Init+0x43c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d00e      	beq.n	8003b42 <HAL_DMA_Init+0x38a>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a33      	ldr	r2, [pc, #204]	@ (8003bf8 <HAL_DMA_Init+0x440>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d009      	beq.n	8003b42 <HAL_DMA_Init+0x38a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a32      	ldr	r2, [pc, #200]	@ (8003bfc <HAL_DMA_Init+0x444>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d004      	beq.n	8003b42 <HAL_DMA_Init+0x38a>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a30      	ldr	r2, [pc, #192]	@ (8003c00 <HAL_DMA_Init+0x448>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d101      	bne.n	8003b46 <HAL_DMA_Init+0x38e>
 8003b42:	2301      	movs	r3, #1
 8003b44:	e000      	b.n	8003b48 <HAL_DMA_Init+0x390>
 8003b46:	2300      	movs	r3, #0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 8097 	beq.w	8003c7c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a24      	ldr	r2, [pc, #144]	@ (8003be4 <HAL_DMA_Init+0x42c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d021      	beq.n	8003b9c <HAL_DMA_Init+0x3e4>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a22      	ldr	r2, [pc, #136]	@ (8003be8 <HAL_DMA_Init+0x430>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d01c      	beq.n	8003b9c <HAL_DMA_Init+0x3e4>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a21      	ldr	r2, [pc, #132]	@ (8003bec <HAL_DMA_Init+0x434>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d017      	beq.n	8003b9c <HAL_DMA_Init+0x3e4>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a1f      	ldr	r2, [pc, #124]	@ (8003bf0 <HAL_DMA_Init+0x438>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d012      	beq.n	8003b9c <HAL_DMA_Init+0x3e4>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a1e      	ldr	r2, [pc, #120]	@ (8003bf4 <HAL_DMA_Init+0x43c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d00d      	beq.n	8003b9c <HAL_DMA_Init+0x3e4>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a1c      	ldr	r2, [pc, #112]	@ (8003bf8 <HAL_DMA_Init+0x440>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d008      	beq.n	8003b9c <HAL_DMA_Init+0x3e4>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a1b      	ldr	r2, [pc, #108]	@ (8003bfc <HAL_DMA_Init+0x444>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d003      	beq.n	8003b9c <HAL_DMA_Init+0x3e4>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a19      	ldr	r2, [pc, #100]	@ (8003c00 <HAL_DMA_Init+0x448>)
 8003b9a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	4b13      	ldr	r3, [pc, #76]	@ (8003c04 <HAL_DMA_Init+0x44c>)
 8003bb8:	4013      	ands	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	2b40      	cmp	r3, #64	@ 0x40
 8003bc2:	d021      	beq.n	8003c08 <HAL_DMA_Init+0x450>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	2b80      	cmp	r3, #128	@ 0x80
 8003bca:	d102      	bne.n	8003bd2 <HAL_DMA_Init+0x41a>
 8003bcc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003bd0:	e01b      	b.n	8003c0a <HAL_DMA_Init+0x452>
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	e019      	b.n	8003c0a <HAL_DMA_Init+0x452>
 8003bd6:	bf00      	nop
 8003bd8:	fe10803f 	.word	0xfe10803f
 8003bdc:	5c001000 	.word	0x5c001000
 8003be0:	ffff0000 	.word	0xffff0000
 8003be4:	58025408 	.word	0x58025408
 8003be8:	5802541c 	.word	0x5802541c
 8003bec:	58025430 	.word	0x58025430
 8003bf0:	58025444 	.word	0x58025444
 8003bf4:	58025458 	.word	0x58025458
 8003bf8:	5802546c 	.word	0x5802546c
 8003bfc:	58025480 	.word	0x58025480
 8003c00:	58025494 	.word	0x58025494
 8003c04:	fffe000f 	.word	0xfffe000f
 8003c08:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	68d2      	ldr	r2, [r2, #12]
 8003c0e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003c18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003c20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003c28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003c30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c38:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	4b6e      	ldr	r3, [pc, #440]	@ (8003e08 <HAL_DMA_Init+0x650>)
 8003c50:	4413      	add	r3, r2
 8003c52:	4a6e      	ldr	r2, [pc, #440]	@ (8003e0c <HAL_DMA_Init+0x654>)
 8003c54:	fba2 2303 	umull	r2, r3, r2, r3
 8003c58:	091b      	lsrs	r3, r3, #4
 8003c5a:	009a      	lsls	r2, r3, #2
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f001 fd93 	bl	800578c <DMA_CalcBaseAndBitshift>
 8003c66:	4603      	mov	r3, r0
 8003c68:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c6e:	f003 031f 	and.w	r3, r3, #31
 8003c72:	2201      	movs	r2, #1
 8003c74:	409a      	lsls	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	605a      	str	r2, [r3, #4]
 8003c7a:	e008      	b.n	8003c8e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2240      	movs	r2, #64	@ 0x40
 8003c80:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2203      	movs	r2, #3
 8003c86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e0b7      	b.n	8003dfe <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a5f      	ldr	r2, [pc, #380]	@ (8003e10 <HAL_DMA_Init+0x658>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d072      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a5d      	ldr	r2, [pc, #372]	@ (8003e14 <HAL_DMA_Init+0x65c>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d06d      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a5c      	ldr	r2, [pc, #368]	@ (8003e18 <HAL_DMA_Init+0x660>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d068      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a5a      	ldr	r2, [pc, #360]	@ (8003e1c <HAL_DMA_Init+0x664>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d063      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a59      	ldr	r2, [pc, #356]	@ (8003e20 <HAL_DMA_Init+0x668>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d05e      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a57      	ldr	r2, [pc, #348]	@ (8003e24 <HAL_DMA_Init+0x66c>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d059      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a56      	ldr	r2, [pc, #344]	@ (8003e28 <HAL_DMA_Init+0x670>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d054      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a54      	ldr	r2, [pc, #336]	@ (8003e2c <HAL_DMA_Init+0x674>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d04f      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a53      	ldr	r2, [pc, #332]	@ (8003e30 <HAL_DMA_Init+0x678>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d04a      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a51      	ldr	r2, [pc, #324]	@ (8003e34 <HAL_DMA_Init+0x67c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d045      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a50      	ldr	r2, [pc, #320]	@ (8003e38 <HAL_DMA_Init+0x680>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d040      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a4e      	ldr	r2, [pc, #312]	@ (8003e3c <HAL_DMA_Init+0x684>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d03b      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a4d      	ldr	r2, [pc, #308]	@ (8003e40 <HAL_DMA_Init+0x688>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d036      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a4b      	ldr	r2, [pc, #300]	@ (8003e44 <HAL_DMA_Init+0x68c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d031      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a4a      	ldr	r2, [pc, #296]	@ (8003e48 <HAL_DMA_Init+0x690>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d02c      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a48      	ldr	r2, [pc, #288]	@ (8003e4c <HAL_DMA_Init+0x694>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d027      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a47      	ldr	r2, [pc, #284]	@ (8003e50 <HAL_DMA_Init+0x698>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d022      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a45      	ldr	r2, [pc, #276]	@ (8003e54 <HAL_DMA_Init+0x69c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d01d      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a44      	ldr	r2, [pc, #272]	@ (8003e58 <HAL_DMA_Init+0x6a0>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d018      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a42      	ldr	r2, [pc, #264]	@ (8003e5c <HAL_DMA_Init+0x6a4>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d013      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a41      	ldr	r2, [pc, #260]	@ (8003e60 <HAL_DMA_Init+0x6a8>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d00e      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a3f      	ldr	r2, [pc, #252]	@ (8003e64 <HAL_DMA_Init+0x6ac>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d009      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a3e      	ldr	r2, [pc, #248]	@ (8003e68 <HAL_DMA_Init+0x6b0>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d004      	beq.n	8003d7e <HAL_DMA_Init+0x5c6>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a3c      	ldr	r2, [pc, #240]	@ (8003e6c <HAL_DMA_Init+0x6b4>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d101      	bne.n	8003d82 <HAL_DMA_Init+0x5ca>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e000      	b.n	8003d84 <HAL_DMA_Init+0x5cc>
 8003d82:	2300      	movs	r3, #0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d032      	beq.n	8003dee <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f001 fe2d 	bl	80059e8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	2b80      	cmp	r3, #128	@ 0x80
 8003d94:	d102      	bne.n	8003d9c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003da4:	b2d2      	uxtb	r2, r2
 8003da6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003db0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d010      	beq.n	8003ddc <HAL_DMA_Init+0x624>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2b08      	cmp	r3, #8
 8003dc0:	d80c      	bhi.n	8003ddc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f001 feaa 	bl	8005b1c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003dd8:	605a      	str	r2, [r3, #4]
 8003dda:	e008      	b.n	8003dee <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	a7fdabf8 	.word	0xa7fdabf8
 8003e0c:	cccccccd 	.word	0xcccccccd
 8003e10:	40020010 	.word	0x40020010
 8003e14:	40020028 	.word	0x40020028
 8003e18:	40020040 	.word	0x40020040
 8003e1c:	40020058 	.word	0x40020058
 8003e20:	40020070 	.word	0x40020070
 8003e24:	40020088 	.word	0x40020088
 8003e28:	400200a0 	.word	0x400200a0
 8003e2c:	400200b8 	.word	0x400200b8
 8003e30:	40020410 	.word	0x40020410
 8003e34:	40020428 	.word	0x40020428
 8003e38:	40020440 	.word	0x40020440
 8003e3c:	40020458 	.word	0x40020458
 8003e40:	40020470 	.word	0x40020470
 8003e44:	40020488 	.word	0x40020488
 8003e48:	400204a0 	.word	0x400204a0
 8003e4c:	400204b8 	.word	0x400204b8
 8003e50:	58025408 	.word	0x58025408
 8003e54:	5802541c 	.word	0x5802541c
 8003e58:	58025430 	.word	0x58025430
 8003e5c:	58025444 	.word	0x58025444
 8003e60:	58025458 	.word	0x58025458
 8003e64:	5802546c 	.word	0x5802546c
 8003e68:	58025480 	.word	0x58025480
 8003e6c:	58025494 	.word	0x58025494

08003e70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003e78:	f7fe f80c 	bl	8001e94 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e2dc      	b.n	8004442 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d008      	beq.n	8003ea6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2280      	movs	r2, #128	@ 0x80
 8003e98:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e2cd      	b.n	8004442 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a76      	ldr	r2, [pc, #472]	@ (8004084 <HAL_DMA_Abort+0x214>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d04a      	beq.n	8003f46 <HAL_DMA_Abort+0xd6>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a74      	ldr	r2, [pc, #464]	@ (8004088 <HAL_DMA_Abort+0x218>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d045      	beq.n	8003f46 <HAL_DMA_Abort+0xd6>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a73      	ldr	r2, [pc, #460]	@ (800408c <HAL_DMA_Abort+0x21c>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d040      	beq.n	8003f46 <HAL_DMA_Abort+0xd6>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a71      	ldr	r2, [pc, #452]	@ (8004090 <HAL_DMA_Abort+0x220>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d03b      	beq.n	8003f46 <HAL_DMA_Abort+0xd6>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a70      	ldr	r2, [pc, #448]	@ (8004094 <HAL_DMA_Abort+0x224>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d036      	beq.n	8003f46 <HAL_DMA_Abort+0xd6>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a6e      	ldr	r2, [pc, #440]	@ (8004098 <HAL_DMA_Abort+0x228>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d031      	beq.n	8003f46 <HAL_DMA_Abort+0xd6>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a6d      	ldr	r2, [pc, #436]	@ (800409c <HAL_DMA_Abort+0x22c>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d02c      	beq.n	8003f46 <HAL_DMA_Abort+0xd6>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a6b      	ldr	r2, [pc, #428]	@ (80040a0 <HAL_DMA_Abort+0x230>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d027      	beq.n	8003f46 <HAL_DMA_Abort+0xd6>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a6a      	ldr	r2, [pc, #424]	@ (80040a4 <HAL_DMA_Abort+0x234>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d022      	beq.n	8003f46 <HAL_DMA_Abort+0xd6>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a68      	ldr	r2, [pc, #416]	@ (80040a8 <HAL_DMA_Abort+0x238>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d01d      	beq.n	8003f46 <HAL_DMA_Abort+0xd6>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a67      	ldr	r2, [pc, #412]	@ (80040ac <HAL_DMA_Abort+0x23c>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d018      	beq.n	8003f46 <HAL_DMA_Abort+0xd6>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a65      	ldr	r2, [pc, #404]	@ (80040b0 <HAL_DMA_Abort+0x240>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d013      	beq.n	8003f46 <HAL_DMA_Abort+0xd6>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a64      	ldr	r2, [pc, #400]	@ (80040b4 <HAL_DMA_Abort+0x244>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d00e      	beq.n	8003f46 <HAL_DMA_Abort+0xd6>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a62      	ldr	r2, [pc, #392]	@ (80040b8 <HAL_DMA_Abort+0x248>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d009      	beq.n	8003f46 <HAL_DMA_Abort+0xd6>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a61      	ldr	r2, [pc, #388]	@ (80040bc <HAL_DMA_Abort+0x24c>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d004      	beq.n	8003f46 <HAL_DMA_Abort+0xd6>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a5f      	ldr	r2, [pc, #380]	@ (80040c0 <HAL_DMA_Abort+0x250>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d101      	bne.n	8003f4a <HAL_DMA_Abort+0xda>
 8003f46:	2301      	movs	r3, #1
 8003f48:	e000      	b.n	8003f4c <HAL_DMA_Abort+0xdc>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d013      	beq.n	8003f78 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 021e 	bic.w	r2, r2, #30
 8003f5e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695a      	ldr	r2, [r3, #20]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f6e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	617b      	str	r3, [r7, #20]
 8003f76:	e00a      	b.n	8003f8e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 020e 	bic.w	r2, r2, #14
 8003f86:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a3c      	ldr	r2, [pc, #240]	@ (8004084 <HAL_DMA_Abort+0x214>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d072      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a3a      	ldr	r2, [pc, #232]	@ (8004088 <HAL_DMA_Abort+0x218>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d06d      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a39      	ldr	r2, [pc, #228]	@ (800408c <HAL_DMA_Abort+0x21c>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d068      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a37      	ldr	r2, [pc, #220]	@ (8004090 <HAL_DMA_Abort+0x220>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d063      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a36      	ldr	r2, [pc, #216]	@ (8004094 <HAL_DMA_Abort+0x224>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d05e      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a34      	ldr	r2, [pc, #208]	@ (8004098 <HAL_DMA_Abort+0x228>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d059      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a33      	ldr	r2, [pc, #204]	@ (800409c <HAL_DMA_Abort+0x22c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d054      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a31      	ldr	r2, [pc, #196]	@ (80040a0 <HAL_DMA_Abort+0x230>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d04f      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a30      	ldr	r2, [pc, #192]	@ (80040a4 <HAL_DMA_Abort+0x234>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d04a      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a2e      	ldr	r2, [pc, #184]	@ (80040a8 <HAL_DMA_Abort+0x238>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d045      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a2d      	ldr	r2, [pc, #180]	@ (80040ac <HAL_DMA_Abort+0x23c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d040      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a2b      	ldr	r2, [pc, #172]	@ (80040b0 <HAL_DMA_Abort+0x240>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d03b      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a2a      	ldr	r2, [pc, #168]	@ (80040b4 <HAL_DMA_Abort+0x244>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d036      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a28      	ldr	r2, [pc, #160]	@ (80040b8 <HAL_DMA_Abort+0x248>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d031      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a27      	ldr	r2, [pc, #156]	@ (80040bc <HAL_DMA_Abort+0x24c>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d02c      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a25      	ldr	r2, [pc, #148]	@ (80040c0 <HAL_DMA_Abort+0x250>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d027      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a24      	ldr	r2, [pc, #144]	@ (80040c4 <HAL_DMA_Abort+0x254>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d022      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a22      	ldr	r2, [pc, #136]	@ (80040c8 <HAL_DMA_Abort+0x258>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d01d      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a21      	ldr	r2, [pc, #132]	@ (80040cc <HAL_DMA_Abort+0x25c>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d018      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a1f      	ldr	r2, [pc, #124]	@ (80040d0 <HAL_DMA_Abort+0x260>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d013      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a1e      	ldr	r2, [pc, #120]	@ (80040d4 <HAL_DMA_Abort+0x264>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d00e      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a1c      	ldr	r2, [pc, #112]	@ (80040d8 <HAL_DMA_Abort+0x268>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d009      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a1b      	ldr	r2, [pc, #108]	@ (80040dc <HAL_DMA_Abort+0x26c>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d004      	beq.n	800407e <HAL_DMA_Abort+0x20e>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a19      	ldr	r2, [pc, #100]	@ (80040e0 <HAL_DMA_Abort+0x270>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d132      	bne.n	80040e4 <HAL_DMA_Abort+0x274>
 800407e:	2301      	movs	r3, #1
 8004080:	e031      	b.n	80040e6 <HAL_DMA_Abort+0x276>
 8004082:	bf00      	nop
 8004084:	40020010 	.word	0x40020010
 8004088:	40020028 	.word	0x40020028
 800408c:	40020040 	.word	0x40020040
 8004090:	40020058 	.word	0x40020058
 8004094:	40020070 	.word	0x40020070
 8004098:	40020088 	.word	0x40020088
 800409c:	400200a0 	.word	0x400200a0
 80040a0:	400200b8 	.word	0x400200b8
 80040a4:	40020410 	.word	0x40020410
 80040a8:	40020428 	.word	0x40020428
 80040ac:	40020440 	.word	0x40020440
 80040b0:	40020458 	.word	0x40020458
 80040b4:	40020470 	.word	0x40020470
 80040b8:	40020488 	.word	0x40020488
 80040bc:	400204a0 	.word	0x400204a0
 80040c0:	400204b8 	.word	0x400204b8
 80040c4:	58025408 	.word	0x58025408
 80040c8:	5802541c 	.word	0x5802541c
 80040cc:	58025430 	.word	0x58025430
 80040d0:	58025444 	.word	0x58025444
 80040d4:	58025458 	.word	0x58025458
 80040d8:	5802546c 	.word	0x5802546c
 80040dc:	58025480 	.word	0x58025480
 80040e0:	58025494 	.word	0x58025494
 80040e4:	2300      	movs	r3, #0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d007      	beq.n	80040fa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a6d      	ldr	r2, [pc, #436]	@ (80042b4 <HAL_DMA_Abort+0x444>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d04a      	beq.n	800419a <HAL_DMA_Abort+0x32a>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a6b      	ldr	r2, [pc, #428]	@ (80042b8 <HAL_DMA_Abort+0x448>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d045      	beq.n	800419a <HAL_DMA_Abort+0x32a>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a6a      	ldr	r2, [pc, #424]	@ (80042bc <HAL_DMA_Abort+0x44c>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d040      	beq.n	800419a <HAL_DMA_Abort+0x32a>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a68      	ldr	r2, [pc, #416]	@ (80042c0 <HAL_DMA_Abort+0x450>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d03b      	beq.n	800419a <HAL_DMA_Abort+0x32a>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a67      	ldr	r2, [pc, #412]	@ (80042c4 <HAL_DMA_Abort+0x454>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d036      	beq.n	800419a <HAL_DMA_Abort+0x32a>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a65      	ldr	r2, [pc, #404]	@ (80042c8 <HAL_DMA_Abort+0x458>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d031      	beq.n	800419a <HAL_DMA_Abort+0x32a>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a64      	ldr	r2, [pc, #400]	@ (80042cc <HAL_DMA_Abort+0x45c>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d02c      	beq.n	800419a <HAL_DMA_Abort+0x32a>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a62      	ldr	r2, [pc, #392]	@ (80042d0 <HAL_DMA_Abort+0x460>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d027      	beq.n	800419a <HAL_DMA_Abort+0x32a>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a61      	ldr	r2, [pc, #388]	@ (80042d4 <HAL_DMA_Abort+0x464>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d022      	beq.n	800419a <HAL_DMA_Abort+0x32a>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a5f      	ldr	r2, [pc, #380]	@ (80042d8 <HAL_DMA_Abort+0x468>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d01d      	beq.n	800419a <HAL_DMA_Abort+0x32a>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a5e      	ldr	r2, [pc, #376]	@ (80042dc <HAL_DMA_Abort+0x46c>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d018      	beq.n	800419a <HAL_DMA_Abort+0x32a>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a5c      	ldr	r2, [pc, #368]	@ (80042e0 <HAL_DMA_Abort+0x470>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d013      	beq.n	800419a <HAL_DMA_Abort+0x32a>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a5b      	ldr	r2, [pc, #364]	@ (80042e4 <HAL_DMA_Abort+0x474>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d00e      	beq.n	800419a <HAL_DMA_Abort+0x32a>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a59      	ldr	r2, [pc, #356]	@ (80042e8 <HAL_DMA_Abort+0x478>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d009      	beq.n	800419a <HAL_DMA_Abort+0x32a>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a58      	ldr	r2, [pc, #352]	@ (80042ec <HAL_DMA_Abort+0x47c>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d004      	beq.n	800419a <HAL_DMA_Abort+0x32a>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a56      	ldr	r2, [pc, #344]	@ (80042f0 <HAL_DMA_Abort+0x480>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d108      	bne.n	80041ac <HAL_DMA_Abort+0x33c>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0201 	bic.w	r2, r2, #1
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	e007      	b.n	80041bc <HAL_DMA_Abort+0x34c>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0201 	bic.w	r2, r2, #1
 80041ba:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80041bc:	e013      	b.n	80041e6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041be:	f7fd fe69 	bl	8001e94 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b05      	cmp	r3, #5
 80041ca:	d90c      	bls.n	80041e6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2220      	movs	r2, #32
 80041d0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2203      	movs	r2, #3
 80041d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e12d      	b.n	8004442 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1e5      	bne.n	80041be <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a2f      	ldr	r2, [pc, #188]	@ (80042b4 <HAL_DMA_Abort+0x444>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d04a      	beq.n	8004292 <HAL_DMA_Abort+0x422>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a2d      	ldr	r2, [pc, #180]	@ (80042b8 <HAL_DMA_Abort+0x448>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d045      	beq.n	8004292 <HAL_DMA_Abort+0x422>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a2c      	ldr	r2, [pc, #176]	@ (80042bc <HAL_DMA_Abort+0x44c>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d040      	beq.n	8004292 <HAL_DMA_Abort+0x422>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a2a      	ldr	r2, [pc, #168]	@ (80042c0 <HAL_DMA_Abort+0x450>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d03b      	beq.n	8004292 <HAL_DMA_Abort+0x422>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a29      	ldr	r2, [pc, #164]	@ (80042c4 <HAL_DMA_Abort+0x454>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d036      	beq.n	8004292 <HAL_DMA_Abort+0x422>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a27      	ldr	r2, [pc, #156]	@ (80042c8 <HAL_DMA_Abort+0x458>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d031      	beq.n	8004292 <HAL_DMA_Abort+0x422>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a26      	ldr	r2, [pc, #152]	@ (80042cc <HAL_DMA_Abort+0x45c>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d02c      	beq.n	8004292 <HAL_DMA_Abort+0x422>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a24      	ldr	r2, [pc, #144]	@ (80042d0 <HAL_DMA_Abort+0x460>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d027      	beq.n	8004292 <HAL_DMA_Abort+0x422>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a23      	ldr	r2, [pc, #140]	@ (80042d4 <HAL_DMA_Abort+0x464>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d022      	beq.n	8004292 <HAL_DMA_Abort+0x422>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a21      	ldr	r2, [pc, #132]	@ (80042d8 <HAL_DMA_Abort+0x468>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d01d      	beq.n	8004292 <HAL_DMA_Abort+0x422>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a20      	ldr	r2, [pc, #128]	@ (80042dc <HAL_DMA_Abort+0x46c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d018      	beq.n	8004292 <HAL_DMA_Abort+0x422>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a1e      	ldr	r2, [pc, #120]	@ (80042e0 <HAL_DMA_Abort+0x470>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d013      	beq.n	8004292 <HAL_DMA_Abort+0x422>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a1d      	ldr	r2, [pc, #116]	@ (80042e4 <HAL_DMA_Abort+0x474>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d00e      	beq.n	8004292 <HAL_DMA_Abort+0x422>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a1b      	ldr	r2, [pc, #108]	@ (80042e8 <HAL_DMA_Abort+0x478>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d009      	beq.n	8004292 <HAL_DMA_Abort+0x422>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a1a      	ldr	r2, [pc, #104]	@ (80042ec <HAL_DMA_Abort+0x47c>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d004      	beq.n	8004292 <HAL_DMA_Abort+0x422>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a18      	ldr	r2, [pc, #96]	@ (80042f0 <HAL_DMA_Abort+0x480>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d101      	bne.n	8004296 <HAL_DMA_Abort+0x426>
 8004292:	2301      	movs	r3, #1
 8004294:	e000      	b.n	8004298 <HAL_DMA_Abort+0x428>
 8004296:	2300      	movs	r3, #0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d02b      	beq.n	80042f4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042a6:	f003 031f 	and.w	r3, r3, #31
 80042aa:	223f      	movs	r2, #63	@ 0x3f
 80042ac:	409a      	lsls	r2, r3
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	609a      	str	r2, [r3, #8]
 80042b2:	e02a      	b.n	800430a <HAL_DMA_Abort+0x49a>
 80042b4:	40020010 	.word	0x40020010
 80042b8:	40020028 	.word	0x40020028
 80042bc:	40020040 	.word	0x40020040
 80042c0:	40020058 	.word	0x40020058
 80042c4:	40020070 	.word	0x40020070
 80042c8:	40020088 	.word	0x40020088
 80042cc:	400200a0 	.word	0x400200a0
 80042d0:	400200b8 	.word	0x400200b8
 80042d4:	40020410 	.word	0x40020410
 80042d8:	40020428 	.word	0x40020428
 80042dc:	40020440 	.word	0x40020440
 80042e0:	40020458 	.word	0x40020458
 80042e4:	40020470 	.word	0x40020470
 80042e8:	40020488 	.word	0x40020488
 80042ec:	400204a0 	.word	0x400204a0
 80042f0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042f8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042fe:	f003 031f 	and.w	r3, r3, #31
 8004302:	2201      	movs	r2, #1
 8004304:	409a      	lsls	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a4f      	ldr	r2, [pc, #316]	@ (800444c <HAL_DMA_Abort+0x5dc>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d072      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a4d      	ldr	r2, [pc, #308]	@ (8004450 <HAL_DMA_Abort+0x5e0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d06d      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a4c      	ldr	r2, [pc, #304]	@ (8004454 <HAL_DMA_Abort+0x5e4>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d068      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a4a      	ldr	r2, [pc, #296]	@ (8004458 <HAL_DMA_Abort+0x5e8>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d063      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a49      	ldr	r2, [pc, #292]	@ (800445c <HAL_DMA_Abort+0x5ec>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d05e      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a47      	ldr	r2, [pc, #284]	@ (8004460 <HAL_DMA_Abort+0x5f0>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d059      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a46      	ldr	r2, [pc, #280]	@ (8004464 <HAL_DMA_Abort+0x5f4>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d054      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a44      	ldr	r2, [pc, #272]	@ (8004468 <HAL_DMA_Abort+0x5f8>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d04f      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a43      	ldr	r2, [pc, #268]	@ (800446c <HAL_DMA_Abort+0x5fc>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d04a      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a41      	ldr	r2, [pc, #260]	@ (8004470 <HAL_DMA_Abort+0x600>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d045      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a40      	ldr	r2, [pc, #256]	@ (8004474 <HAL_DMA_Abort+0x604>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d040      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a3e      	ldr	r2, [pc, #248]	@ (8004478 <HAL_DMA_Abort+0x608>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d03b      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a3d      	ldr	r2, [pc, #244]	@ (800447c <HAL_DMA_Abort+0x60c>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d036      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a3b      	ldr	r2, [pc, #236]	@ (8004480 <HAL_DMA_Abort+0x610>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d031      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a3a      	ldr	r2, [pc, #232]	@ (8004484 <HAL_DMA_Abort+0x614>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d02c      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a38      	ldr	r2, [pc, #224]	@ (8004488 <HAL_DMA_Abort+0x618>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d027      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a37      	ldr	r2, [pc, #220]	@ (800448c <HAL_DMA_Abort+0x61c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d022      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a35      	ldr	r2, [pc, #212]	@ (8004490 <HAL_DMA_Abort+0x620>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d01d      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a34      	ldr	r2, [pc, #208]	@ (8004494 <HAL_DMA_Abort+0x624>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d018      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a32      	ldr	r2, [pc, #200]	@ (8004498 <HAL_DMA_Abort+0x628>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d013      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a31      	ldr	r2, [pc, #196]	@ (800449c <HAL_DMA_Abort+0x62c>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d00e      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a2f      	ldr	r2, [pc, #188]	@ (80044a0 <HAL_DMA_Abort+0x630>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d009      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a2e      	ldr	r2, [pc, #184]	@ (80044a4 <HAL_DMA_Abort+0x634>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d004      	beq.n	80043fa <HAL_DMA_Abort+0x58a>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a2c      	ldr	r2, [pc, #176]	@ (80044a8 <HAL_DMA_Abort+0x638>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d101      	bne.n	80043fe <HAL_DMA_Abort+0x58e>
 80043fa:	2301      	movs	r3, #1
 80043fc:	e000      	b.n	8004400 <HAL_DMA_Abort+0x590>
 80043fe:	2300      	movs	r3, #0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d015      	beq.n	8004430 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800440c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00c      	beq.n	8004430 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004420:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004424:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800442e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3718      	adds	r7, #24
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	40020010 	.word	0x40020010
 8004450:	40020028 	.word	0x40020028
 8004454:	40020040 	.word	0x40020040
 8004458:	40020058 	.word	0x40020058
 800445c:	40020070 	.word	0x40020070
 8004460:	40020088 	.word	0x40020088
 8004464:	400200a0 	.word	0x400200a0
 8004468:	400200b8 	.word	0x400200b8
 800446c:	40020410 	.word	0x40020410
 8004470:	40020428 	.word	0x40020428
 8004474:	40020440 	.word	0x40020440
 8004478:	40020458 	.word	0x40020458
 800447c:	40020470 	.word	0x40020470
 8004480:	40020488 	.word	0x40020488
 8004484:	400204a0 	.word	0x400204a0
 8004488:	400204b8 	.word	0x400204b8
 800448c:	58025408 	.word	0x58025408
 8004490:	5802541c 	.word	0x5802541c
 8004494:	58025430 	.word	0x58025430
 8004498:	58025444 	.word	0x58025444
 800449c:	58025458 	.word	0x58025458
 80044a0:	5802546c 	.word	0x5802546c
 80044a4:	58025480 	.word	0x58025480
 80044a8:	58025494 	.word	0x58025494

080044ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e237      	b.n	800492e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d004      	beq.n	80044d4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2280      	movs	r2, #128	@ 0x80
 80044ce:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e22c      	b.n	800492e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a5c      	ldr	r2, [pc, #368]	@ (800464c <HAL_DMA_Abort_IT+0x1a0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d04a      	beq.n	8004574 <HAL_DMA_Abort_IT+0xc8>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a5b      	ldr	r2, [pc, #364]	@ (8004650 <HAL_DMA_Abort_IT+0x1a4>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d045      	beq.n	8004574 <HAL_DMA_Abort_IT+0xc8>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a59      	ldr	r2, [pc, #356]	@ (8004654 <HAL_DMA_Abort_IT+0x1a8>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d040      	beq.n	8004574 <HAL_DMA_Abort_IT+0xc8>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a58      	ldr	r2, [pc, #352]	@ (8004658 <HAL_DMA_Abort_IT+0x1ac>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d03b      	beq.n	8004574 <HAL_DMA_Abort_IT+0xc8>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a56      	ldr	r2, [pc, #344]	@ (800465c <HAL_DMA_Abort_IT+0x1b0>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d036      	beq.n	8004574 <HAL_DMA_Abort_IT+0xc8>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a55      	ldr	r2, [pc, #340]	@ (8004660 <HAL_DMA_Abort_IT+0x1b4>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d031      	beq.n	8004574 <HAL_DMA_Abort_IT+0xc8>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a53      	ldr	r2, [pc, #332]	@ (8004664 <HAL_DMA_Abort_IT+0x1b8>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d02c      	beq.n	8004574 <HAL_DMA_Abort_IT+0xc8>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a52      	ldr	r2, [pc, #328]	@ (8004668 <HAL_DMA_Abort_IT+0x1bc>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d027      	beq.n	8004574 <HAL_DMA_Abort_IT+0xc8>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a50      	ldr	r2, [pc, #320]	@ (800466c <HAL_DMA_Abort_IT+0x1c0>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d022      	beq.n	8004574 <HAL_DMA_Abort_IT+0xc8>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a4f      	ldr	r2, [pc, #316]	@ (8004670 <HAL_DMA_Abort_IT+0x1c4>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d01d      	beq.n	8004574 <HAL_DMA_Abort_IT+0xc8>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a4d      	ldr	r2, [pc, #308]	@ (8004674 <HAL_DMA_Abort_IT+0x1c8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d018      	beq.n	8004574 <HAL_DMA_Abort_IT+0xc8>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a4c      	ldr	r2, [pc, #304]	@ (8004678 <HAL_DMA_Abort_IT+0x1cc>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d013      	beq.n	8004574 <HAL_DMA_Abort_IT+0xc8>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a4a      	ldr	r2, [pc, #296]	@ (800467c <HAL_DMA_Abort_IT+0x1d0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00e      	beq.n	8004574 <HAL_DMA_Abort_IT+0xc8>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a49      	ldr	r2, [pc, #292]	@ (8004680 <HAL_DMA_Abort_IT+0x1d4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d009      	beq.n	8004574 <HAL_DMA_Abort_IT+0xc8>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a47      	ldr	r2, [pc, #284]	@ (8004684 <HAL_DMA_Abort_IT+0x1d8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d004      	beq.n	8004574 <HAL_DMA_Abort_IT+0xc8>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a46      	ldr	r2, [pc, #280]	@ (8004688 <HAL_DMA_Abort_IT+0x1dc>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d101      	bne.n	8004578 <HAL_DMA_Abort_IT+0xcc>
 8004574:	2301      	movs	r3, #1
 8004576:	e000      	b.n	800457a <HAL_DMA_Abort_IT+0xce>
 8004578:	2300      	movs	r3, #0
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 8086 	beq.w	800468c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2204      	movs	r2, #4
 8004584:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a2f      	ldr	r2, [pc, #188]	@ (800464c <HAL_DMA_Abort_IT+0x1a0>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d04a      	beq.n	8004628 <HAL_DMA_Abort_IT+0x17c>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a2e      	ldr	r2, [pc, #184]	@ (8004650 <HAL_DMA_Abort_IT+0x1a4>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d045      	beq.n	8004628 <HAL_DMA_Abort_IT+0x17c>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a2c      	ldr	r2, [pc, #176]	@ (8004654 <HAL_DMA_Abort_IT+0x1a8>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d040      	beq.n	8004628 <HAL_DMA_Abort_IT+0x17c>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a2b      	ldr	r2, [pc, #172]	@ (8004658 <HAL_DMA_Abort_IT+0x1ac>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d03b      	beq.n	8004628 <HAL_DMA_Abort_IT+0x17c>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a29      	ldr	r2, [pc, #164]	@ (800465c <HAL_DMA_Abort_IT+0x1b0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d036      	beq.n	8004628 <HAL_DMA_Abort_IT+0x17c>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a28      	ldr	r2, [pc, #160]	@ (8004660 <HAL_DMA_Abort_IT+0x1b4>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d031      	beq.n	8004628 <HAL_DMA_Abort_IT+0x17c>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a26      	ldr	r2, [pc, #152]	@ (8004664 <HAL_DMA_Abort_IT+0x1b8>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d02c      	beq.n	8004628 <HAL_DMA_Abort_IT+0x17c>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a25      	ldr	r2, [pc, #148]	@ (8004668 <HAL_DMA_Abort_IT+0x1bc>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d027      	beq.n	8004628 <HAL_DMA_Abort_IT+0x17c>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a23      	ldr	r2, [pc, #140]	@ (800466c <HAL_DMA_Abort_IT+0x1c0>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d022      	beq.n	8004628 <HAL_DMA_Abort_IT+0x17c>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a22      	ldr	r2, [pc, #136]	@ (8004670 <HAL_DMA_Abort_IT+0x1c4>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d01d      	beq.n	8004628 <HAL_DMA_Abort_IT+0x17c>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a20      	ldr	r2, [pc, #128]	@ (8004674 <HAL_DMA_Abort_IT+0x1c8>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d018      	beq.n	8004628 <HAL_DMA_Abort_IT+0x17c>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a1f      	ldr	r2, [pc, #124]	@ (8004678 <HAL_DMA_Abort_IT+0x1cc>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d013      	beq.n	8004628 <HAL_DMA_Abort_IT+0x17c>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a1d      	ldr	r2, [pc, #116]	@ (800467c <HAL_DMA_Abort_IT+0x1d0>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d00e      	beq.n	8004628 <HAL_DMA_Abort_IT+0x17c>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a1c      	ldr	r2, [pc, #112]	@ (8004680 <HAL_DMA_Abort_IT+0x1d4>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d009      	beq.n	8004628 <HAL_DMA_Abort_IT+0x17c>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a1a      	ldr	r2, [pc, #104]	@ (8004684 <HAL_DMA_Abort_IT+0x1d8>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d004      	beq.n	8004628 <HAL_DMA_Abort_IT+0x17c>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a19      	ldr	r2, [pc, #100]	@ (8004688 <HAL_DMA_Abort_IT+0x1dc>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d108      	bne.n	800463a <HAL_DMA_Abort_IT+0x18e>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0201 	bic.w	r2, r2, #1
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	e178      	b.n	800492c <HAL_DMA_Abort_IT+0x480>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0201 	bic.w	r2, r2, #1
 8004648:	601a      	str	r2, [r3, #0]
 800464a:	e16f      	b.n	800492c <HAL_DMA_Abort_IT+0x480>
 800464c:	40020010 	.word	0x40020010
 8004650:	40020028 	.word	0x40020028
 8004654:	40020040 	.word	0x40020040
 8004658:	40020058 	.word	0x40020058
 800465c:	40020070 	.word	0x40020070
 8004660:	40020088 	.word	0x40020088
 8004664:	400200a0 	.word	0x400200a0
 8004668:	400200b8 	.word	0x400200b8
 800466c:	40020410 	.word	0x40020410
 8004670:	40020428 	.word	0x40020428
 8004674:	40020440 	.word	0x40020440
 8004678:	40020458 	.word	0x40020458
 800467c:	40020470 	.word	0x40020470
 8004680:	40020488 	.word	0x40020488
 8004684:	400204a0 	.word	0x400204a0
 8004688:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 020e 	bic.w	r2, r2, #14
 800469a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a6c      	ldr	r2, [pc, #432]	@ (8004854 <HAL_DMA_Abort_IT+0x3a8>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d04a      	beq.n	800473c <HAL_DMA_Abort_IT+0x290>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a6b      	ldr	r2, [pc, #428]	@ (8004858 <HAL_DMA_Abort_IT+0x3ac>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d045      	beq.n	800473c <HAL_DMA_Abort_IT+0x290>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a69      	ldr	r2, [pc, #420]	@ (800485c <HAL_DMA_Abort_IT+0x3b0>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d040      	beq.n	800473c <HAL_DMA_Abort_IT+0x290>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a68      	ldr	r2, [pc, #416]	@ (8004860 <HAL_DMA_Abort_IT+0x3b4>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d03b      	beq.n	800473c <HAL_DMA_Abort_IT+0x290>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a66      	ldr	r2, [pc, #408]	@ (8004864 <HAL_DMA_Abort_IT+0x3b8>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d036      	beq.n	800473c <HAL_DMA_Abort_IT+0x290>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a65      	ldr	r2, [pc, #404]	@ (8004868 <HAL_DMA_Abort_IT+0x3bc>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d031      	beq.n	800473c <HAL_DMA_Abort_IT+0x290>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a63      	ldr	r2, [pc, #396]	@ (800486c <HAL_DMA_Abort_IT+0x3c0>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d02c      	beq.n	800473c <HAL_DMA_Abort_IT+0x290>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a62      	ldr	r2, [pc, #392]	@ (8004870 <HAL_DMA_Abort_IT+0x3c4>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d027      	beq.n	800473c <HAL_DMA_Abort_IT+0x290>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a60      	ldr	r2, [pc, #384]	@ (8004874 <HAL_DMA_Abort_IT+0x3c8>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d022      	beq.n	800473c <HAL_DMA_Abort_IT+0x290>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a5f      	ldr	r2, [pc, #380]	@ (8004878 <HAL_DMA_Abort_IT+0x3cc>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d01d      	beq.n	800473c <HAL_DMA_Abort_IT+0x290>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a5d      	ldr	r2, [pc, #372]	@ (800487c <HAL_DMA_Abort_IT+0x3d0>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d018      	beq.n	800473c <HAL_DMA_Abort_IT+0x290>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a5c      	ldr	r2, [pc, #368]	@ (8004880 <HAL_DMA_Abort_IT+0x3d4>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d013      	beq.n	800473c <HAL_DMA_Abort_IT+0x290>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a5a      	ldr	r2, [pc, #360]	@ (8004884 <HAL_DMA_Abort_IT+0x3d8>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d00e      	beq.n	800473c <HAL_DMA_Abort_IT+0x290>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a59      	ldr	r2, [pc, #356]	@ (8004888 <HAL_DMA_Abort_IT+0x3dc>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d009      	beq.n	800473c <HAL_DMA_Abort_IT+0x290>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a57      	ldr	r2, [pc, #348]	@ (800488c <HAL_DMA_Abort_IT+0x3e0>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d004      	beq.n	800473c <HAL_DMA_Abort_IT+0x290>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a56      	ldr	r2, [pc, #344]	@ (8004890 <HAL_DMA_Abort_IT+0x3e4>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d108      	bne.n	800474e <HAL_DMA_Abort_IT+0x2a2>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0201 	bic.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	e007      	b.n	800475e <HAL_DMA_Abort_IT+0x2b2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0201 	bic.w	r2, r2, #1
 800475c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a3c      	ldr	r2, [pc, #240]	@ (8004854 <HAL_DMA_Abort_IT+0x3a8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d072      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a3a      	ldr	r2, [pc, #232]	@ (8004858 <HAL_DMA_Abort_IT+0x3ac>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d06d      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a39      	ldr	r2, [pc, #228]	@ (800485c <HAL_DMA_Abort_IT+0x3b0>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d068      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a37      	ldr	r2, [pc, #220]	@ (8004860 <HAL_DMA_Abort_IT+0x3b4>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d063      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a36      	ldr	r2, [pc, #216]	@ (8004864 <HAL_DMA_Abort_IT+0x3b8>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d05e      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a34      	ldr	r2, [pc, #208]	@ (8004868 <HAL_DMA_Abort_IT+0x3bc>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d059      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a33      	ldr	r2, [pc, #204]	@ (800486c <HAL_DMA_Abort_IT+0x3c0>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d054      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a31      	ldr	r2, [pc, #196]	@ (8004870 <HAL_DMA_Abort_IT+0x3c4>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d04f      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a30      	ldr	r2, [pc, #192]	@ (8004874 <HAL_DMA_Abort_IT+0x3c8>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d04a      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a2e      	ldr	r2, [pc, #184]	@ (8004878 <HAL_DMA_Abort_IT+0x3cc>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d045      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a2d      	ldr	r2, [pc, #180]	@ (800487c <HAL_DMA_Abort_IT+0x3d0>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d040      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a2b      	ldr	r2, [pc, #172]	@ (8004880 <HAL_DMA_Abort_IT+0x3d4>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d03b      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a2a      	ldr	r2, [pc, #168]	@ (8004884 <HAL_DMA_Abort_IT+0x3d8>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d036      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a28      	ldr	r2, [pc, #160]	@ (8004888 <HAL_DMA_Abort_IT+0x3dc>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d031      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a27      	ldr	r2, [pc, #156]	@ (800488c <HAL_DMA_Abort_IT+0x3e0>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d02c      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a25      	ldr	r2, [pc, #148]	@ (8004890 <HAL_DMA_Abort_IT+0x3e4>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d027      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a24      	ldr	r2, [pc, #144]	@ (8004894 <HAL_DMA_Abort_IT+0x3e8>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d022      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a22      	ldr	r2, [pc, #136]	@ (8004898 <HAL_DMA_Abort_IT+0x3ec>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d01d      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a21      	ldr	r2, [pc, #132]	@ (800489c <HAL_DMA_Abort_IT+0x3f0>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d018      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a1f      	ldr	r2, [pc, #124]	@ (80048a0 <HAL_DMA_Abort_IT+0x3f4>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d013      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a1e      	ldr	r2, [pc, #120]	@ (80048a4 <HAL_DMA_Abort_IT+0x3f8>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d00e      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a1c      	ldr	r2, [pc, #112]	@ (80048a8 <HAL_DMA_Abort_IT+0x3fc>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d009      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a1b      	ldr	r2, [pc, #108]	@ (80048ac <HAL_DMA_Abort_IT+0x400>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d004      	beq.n	800484e <HAL_DMA_Abort_IT+0x3a2>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a19      	ldr	r2, [pc, #100]	@ (80048b0 <HAL_DMA_Abort_IT+0x404>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d132      	bne.n	80048b4 <HAL_DMA_Abort_IT+0x408>
 800484e:	2301      	movs	r3, #1
 8004850:	e031      	b.n	80048b6 <HAL_DMA_Abort_IT+0x40a>
 8004852:	bf00      	nop
 8004854:	40020010 	.word	0x40020010
 8004858:	40020028 	.word	0x40020028
 800485c:	40020040 	.word	0x40020040
 8004860:	40020058 	.word	0x40020058
 8004864:	40020070 	.word	0x40020070
 8004868:	40020088 	.word	0x40020088
 800486c:	400200a0 	.word	0x400200a0
 8004870:	400200b8 	.word	0x400200b8
 8004874:	40020410 	.word	0x40020410
 8004878:	40020428 	.word	0x40020428
 800487c:	40020440 	.word	0x40020440
 8004880:	40020458 	.word	0x40020458
 8004884:	40020470 	.word	0x40020470
 8004888:	40020488 	.word	0x40020488
 800488c:	400204a0 	.word	0x400204a0
 8004890:	400204b8 	.word	0x400204b8
 8004894:	58025408 	.word	0x58025408
 8004898:	5802541c 	.word	0x5802541c
 800489c:	58025430 	.word	0x58025430
 80048a0:	58025444 	.word	0x58025444
 80048a4:	58025458 	.word	0x58025458
 80048a8:	5802546c 	.word	0x5802546c
 80048ac:	58025480 	.word	0x58025480
 80048b0:	58025494 	.word	0x58025494
 80048b4:	2300      	movs	r3, #0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d028      	beq.n	800490c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048c8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ce:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048d4:	f003 031f 	and.w	r3, r3, #31
 80048d8:	2201      	movs	r2, #1
 80048da:	409a      	lsls	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80048e8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00c      	beq.n	800490c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004900:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800490a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop

08004938 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b08a      	sub	sp, #40	@ 0x28
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004940:	2300      	movs	r3, #0
 8004942:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004944:	4b67      	ldr	r3, [pc, #412]	@ (8004ae4 <HAL_DMA_IRQHandler+0x1ac>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a67      	ldr	r2, [pc, #412]	@ (8004ae8 <HAL_DMA_IRQHandler+0x1b0>)
 800494a:	fba2 2303 	umull	r2, r3, r2, r3
 800494e:	0a9b      	lsrs	r3, r3, #10
 8004950:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004956:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800495c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a5f      	ldr	r2, [pc, #380]	@ (8004aec <HAL_DMA_IRQHandler+0x1b4>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d04a      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a5d      	ldr	r2, [pc, #372]	@ (8004af0 <HAL_DMA_IRQHandler+0x1b8>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d045      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a5c      	ldr	r2, [pc, #368]	@ (8004af4 <HAL_DMA_IRQHandler+0x1bc>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d040      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a5a      	ldr	r2, [pc, #360]	@ (8004af8 <HAL_DMA_IRQHandler+0x1c0>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d03b      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a59      	ldr	r2, [pc, #356]	@ (8004afc <HAL_DMA_IRQHandler+0x1c4>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d036      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a57      	ldr	r2, [pc, #348]	@ (8004b00 <HAL_DMA_IRQHandler+0x1c8>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d031      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a56      	ldr	r2, [pc, #344]	@ (8004b04 <HAL_DMA_IRQHandler+0x1cc>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d02c      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a54      	ldr	r2, [pc, #336]	@ (8004b08 <HAL_DMA_IRQHandler+0x1d0>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d027      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a53      	ldr	r2, [pc, #332]	@ (8004b0c <HAL_DMA_IRQHandler+0x1d4>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d022      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a51      	ldr	r2, [pc, #324]	@ (8004b10 <HAL_DMA_IRQHandler+0x1d8>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d01d      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a50      	ldr	r2, [pc, #320]	@ (8004b14 <HAL_DMA_IRQHandler+0x1dc>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d018      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a4e      	ldr	r2, [pc, #312]	@ (8004b18 <HAL_DMA_IRQHandler+0x1e0>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d013      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a4d      	ldr	r2, [pc, #308]	@ (8004b1c <HAL_DMA_IRQHandler+0x1e4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d00e      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a4b      	ldr	r2, [pc, #300]	@ (8004b20 <HAL_DMA_IRQHandler+0x1e8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d009      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a4a      	ldr	r2, [pc, #296]	@ (8004b24 <HAL_DMA_IRQHandler+0x1ec>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d004      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xd2>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a48      	ldr	r2, [pc, #288]	@ (8004b28 <HAL_DMA_IRQHandler+0x1f0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d101      	bne.n	8004a0e <HAL_DMA_IRQHandler+0xd6>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e000      	b.n	8004a10 <HAL_DMA_IRQHandler+0xd8>
 8004a0e:	2300      	movs	r3, #0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 842b 	beq.w	800526c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a1a:	f003 031f 	and.w	r3, r3, #31
 8004a1e:	2208      	movs	r2, #8
 8004a20:	409a      	lsls	r2, r3
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	4013      	ands	r3, r2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f000 80a2 	beq.w	8004b70 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a2e      	ldr	r2, [pc, #184]	@ (8004aec <HAL_DMA_IRQHandler+0x1b4>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d04a      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a2d      	ldr	r2, [pc, #180]	@ (8004af0 <HAL_DMA_IRQHandler+0x1b8>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d045      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a2b      	ldr	r2, [pc, #172]	@ (8004af4 <HAL_DMA_IRQHandler+0x1bc>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d040      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a2a      	ldr	r2, [pc, #168]	@ (8004af8 <HAL_DMA_IRQHandler+0x1c0>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d03b      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a28      	ldr	r2, [pc, #160]	@ (8004afc <HAL_DMA_IRQHandler+0x1c4>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d036      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a27      	ldr	r2, [pc, #156]	@ (8004b00 <HAL_DMA_IRQHandler+0x1c8>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d031      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a25      	ldr	r2, [pc, #148]	@ (8004b04 <HAL_DMA_IRQHandler+0x1cc>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d02c      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a24      	ldr	r2, [pc, #144]	@ (8004b08 <HAL_DMA_IRQHandler+0x1d0>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d027      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a22      	ldr	r2, [pc, #136]	@ (8004b0c <HAL_DMA_IRQHandler+0x1d4>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d022      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a21      	ldr	r2, [pc, #132]	@ (8004b10 <HAL_DMA_IRQHandler+0x1d8>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d01d      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a1f      	ldr	r2, [pc, #124]	@ (8004b14 <HAL_DMA_IRQHandler+0x1dc>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d018      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a1e      	ldr	r2, [pc, #120]	@ (8004b18 <HAL_DMA_IRQHandler+0x1e0>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d013      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a1c      	ldr	r2, [pc, #112]	@ (8004b1c <HAL_DMA_IRQHandler+0x1e4>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d00e      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a1b      	ldr	r2, [pc, #108]	@ (8004b20 <HAL_DMA_IRQHandler+0x1e8>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d009      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a19      	ldr	r2, [pc, #100]	@ (8004b24 <HAL_DMA_IRQHandler+0x1ec>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d004      	beq.n	8004acc <HAL_DMA_IRQHandler+0x194>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a18      	ldr	r2, [pc, #96]	@ (8004b28 <HAL_DMA_IRQHandler+0x1f0>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d12f      	bne.n	8004b2c <HAL_DMA_IRQHandler+0x1f4>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0304 	and.w	r3, r3, #4
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	bf14      	ite	ne
 8004ada:	2301      	movne	r3, #1
 8004adc:	2300      	moveq	r3, #0
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	e02e      	b.n	8004b40 <HAL_DMA_IRQHandler+0x208>
 8004ae2:	bf00      	nop
 8004ae4:	24000000 	.word	0x24000000
 8004ae8:	1b4e81b5 	.word	0x1b4e81b5
 8004aec:	40020010 	.word	0x40020010
 8004af0:	40020028 	.word	0x40020028
 8004af4:	40020040 	.word	0x40020040
 8004af8:	40020058 	.word	0x40020058
 8004afc:	40020070 	.word	0x40020070
 8004b00:	40020088 	.word	0x40020088
 8004b04:	400200a0 	.word	0x400200a0
 8004b08:	400200b8 	.word	0x400200b8
 8004b0c:	40020410 	.word	0x40020410
 8004b10:	40020428 	.word	0x40020428
 8004b14:	40020440 	.word	0x40020440
 8004b18:	40020458 	.word	0x40020458
 8004b1c:	40020470 	.word	0x40020470
 8004b20:	40020488 	.word	0x40020488
 8004b24:	400204a0 	.word	0x400204a0
 8004b28:	400204b8 	.word	0x400204b8
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0308 	and.w	r3, r3, #8
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	bf14      	ite	ne
 8004b3a:	2301      	movne	r3, #1
 8004b3c:	2300      	moveq	r3, #0
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d015      	beq.n	8004b70 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0204 	bic.w	r2, r2, #4
 8004b52:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b58:	f003 031f 	and.w	r3, r3, #31
 8004b5c:	2208      	movs	r2, #8
 8004b5e:	409a      	lsls	r2, r3
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b68:	f043 0201 	orr.w	r2, r3, #1
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b74:	f003 031f 	and.w	r3, r3, #31
 8004b78:	69ba      	ldr	r2, [r7, #24]
 8004b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d06e      	beq.n	8004c64 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a69      	ldr	r2, [pc, #420]	@ (8004d30 <HAL_DMA_IRQHandler+0x3f8>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d04a      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a67      	ldr	r2, [pc, #412]	@ (8004d34 <HAL_DMA_IRQHandler+0x3fc>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d045      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a66      	ldr	r2, [pc, #408]	@ (8004d38 <HAL_DMA_IRQHandler+0x400>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d040      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a64      	ldr	r2, [pc, #400]	@ (8004d3c <HAL_DMA_IRQHandler+0x404>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d03b      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a63      	ldr	r2, [pc, #396]	@ (8004d40 <HAL_DMA_IRQHandler+0x408>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d036      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a61      	ldr	r2, [pc, #388]	@ (8004d44 <HAL_DMA_IRQHandler+0x40c>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d031      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a60      	ldr	r2, [pc, #384]	@ (8004d48 <HAL_DMA_IRQHandler+0x410>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d02c      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a5e      	ldr	r2, [pc, #376]	@ (8004d4c <HAL_DMA_IRQHandler+0x414>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d027      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a5d      	ldr	r2, [pc, #372]	@ (8004d50 <HAL_DMA_IRQHandler+0x418>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d022      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a5b      	ldr	r2, [pc, #364]	@ (8004d54 <HAL_DMA_IRQHandler+0x41c>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d01d      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a5a      	ldr	r2, [pc, #360]	@ (8004d58 <HAL_DMA_IRQHandler+0x420>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d018      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a58      	ldr	r2, [pc, #352]	@ (8004d5c <HAL_DMA_IRQHandler+0x424>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d013      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a57      	ldr	r2, [pc, #348]	@ (8004d60 <HAL_DMA_IRQHandler+0x428>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d00e      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a55      	ldr	r2, [pc, #340]	@ (8004d64 <HAL_DMA_IRQHandler+0x42c>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d009      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a54      	ldr	r2, [pc, #336]	@ (8004d68 <HAL_DMA_IRQHandler+0x430>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d004      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x2ee>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a52      	ldr	r2, [pc, #328]	@ (8004d6c <HAL_DMA_IRQHandler+0x434>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d10a      	bne.n	8004c3c <HAL_DMA_IRQHandler+0x304>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	bf14      	ite	ne
 8004c34:	2301      	movne	r3, #1
 8004c36:	2300      	moveq	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	e003      	b.n	8004c44 <HAL_DMA_IRQHandler+0x30c>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2300      	movs	r3, #0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00d      	beq.n	8004c64 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c4c:	f003 031f 	and.w	r3, r3, #31
 8004c50:	2201      	movs	r2, #1
 8004c52:	409a      	lsls	r2, r3
 8004c54:	6a3b      	ldr	r3, [r7, #32]
 8004c56:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c5c:	f043 0202 	orr.w	r2, r3, #2
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c68:	f003 031f 	and.w	r3, r3, #31
 8004c6c:	2204      	movs	r2, #4
 8004c6e:	409a      	lsls	r2, r3
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	4013      	ands	r3, r2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 808f 	beq.w	8004d98 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a2c      	ldr	r2, [pc, #176]	@ (8004d30 <HAL_DMA_IRQHandler+0x3f8>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d04a      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a2a      	ldr	r2, [pc, #168]	@ (8004d34 <HAL_DMA_IRQHandler+0x3fc>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d045      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a29      	ldr	r2, [pc, #164]	@ (8004d38 <HAL_DMA_IRQHandler+0x400>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d040      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a27      	ldr	r2, [pc, #156]	@ (8004d3c <HAL_DMA_IRQHandler+0x404>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d03b      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a26      	ldr	r2, [pc, #152]	@ (8004d40 <HAL_DMA_IRQHandler+0x408>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d036      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a24      	ldr	r2, [pc, #144]	@ (8004d44 <HAL_DMA_IRQHandler+0x40c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d031      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a23      	ldr	r2, [pc, #140]	@ (8004d48 <HAL_DMA_IRQHandler+0x410>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d02c      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a21      	ldr	r2, [pc, #132]	@ (8004d4c <HAL_DMA_IRQHandler+0x414>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d027      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a20      	ldr	r2, [pc, #128]	@ (8004d50 <HAL_DMA_IRQHandler+0x418>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d022      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a1e      	ldr	r2, [pc, #120]	@ (8004d54 <HAL_DMA_IRQHandler+0x41c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d01d      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a1d      	ldr	r2, [pc, #116]	@ (8004d58 <HAL_DMA_IRQHandler+0x420>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d018      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a1b      	ldr	r2, [pc, #108]	@ (8004d5c <HAL_DMA_IRQHandler+0x424>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d013      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a1a      	ldr	r2, [pc, #104]	@ (8004d60 <HAL_DMA_IRQHandler+0x428>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d00e      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a18      	ldr	r2, [pc, #96]	@ (8004d64 <HAL_DMA_IRQHandler+0x42c>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d009      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a17      	ldr	r2, [pc, #92]	@ (8004d68 <HAL_DMA_IRQHandler+0x430>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d004      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x3e2>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a15      	ldr	r2, [pc, #84]	@ (8004d6c <HAL_DMA_IRQHandler+0x434>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d12a      	bne.n	8004d70 <HAL_DMA_IRQHandler+0x438>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	bf14      	ite	ne
 8004d28:	2301      	movne	r3, #1
 8004d2a:	2300      	moveq	r3, #0
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	e023      	b.n	8004d78 <HAL_DMA_IRQHandler+0x440>
 8004d30:	40020010 	.word	0x40020010
 8004d34:	40020028 	.word	0x40020028
 8004d38:	40020040 	.word	0x40020040
 8004d3c:	40020058 	.word	0x40020058
 8004d40:	40020070 	.word	0x40020070
 8004d44:	40020088 	.word	0x40020088
 8004d48:	400200a0 	.word	0x400200a0
 8004d4c:	400200b8 	.word	0x400200b8
 8004d50:	40020410 	.word	0x40020410
 8004d54:	40020428 	.word	0x40020428
 8004d58:	40020440 	.word	0x40020440
 8004d5c:	40020458 	.word	0x40020458
 8004d60:	40020470 	.word	0x40020470
 8004d64:	40020488 	.word	0x40020488
 8004d68:	400204a0 	.word	0x400204a0
 8004d6c:	400204b8 	.word	0x400204b8
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2300      	movs	r3, #0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00d      	beq.n	8004d98 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d80:	f003 031f 	and.w	r3, r3, #31
 8004d84:	2204      	movs	r2, #4
 8004d86:	409a      	lsls	r2, r3
 8004d88:	6a3b      	ldr	r3, [r7, #32]
 8004d8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d90:	f043 0204 	orr.w	r2, r3, #4
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d9c:	f003 031f 	and.w	r3, r3, #31
 8004da0:	2210      	movs	r2, #16
 8004da2:	409a      	lsls	r2, r3
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	4013      	ands	r3, r2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 80a6 	beq.w	8004efa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a85      	ldr	r2, [pc, #532]	@ (8004fc8 <HAL_DMA_IRQHandler+0x690>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d04a      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a83      	ldr	r2, [pc, #524]	@ (8004fcc <HAL_DMA_IRQHandler+0x694>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d045      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a82      	ldr	r2, [pc, #520]	@ (8004fd0 <HAL_DMA_IRQHandler+0x698>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d040      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a80      	ldr	r2, [pc, #512]	@ (8004fd4 <HAL_DMA_IRQHandler+0x69c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d03b      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a7f      	ldr	r2, [pc, #508]	@ (8004fd8 <HAL_DMA_IRQHandler+0x6a0>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d036      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a7d      	ldr	r2, [pc, #500]	@ (8004fdc <HAL_DMA_IRQHandler+0x6a4>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d031      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a7c      	ldr	r2, [pc, #496]	@ (8004fe0 <HAL_DMA_IRQHandler+0x6a8>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d02c      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a7a      	ldr	r2, [pc, #488]	@ (8004fe4 <HAL_DMA_IRQHandler+0x6ac>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d027      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a79      	ldr	r2, [pc, #484]	@ (8004fe8 <HAL_DMA_IRQHandler+0x6b0>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d022      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a77      	ldr	r2, [pc, #476]	@ (8004fec <HAL_DMA_IRQHandler+0x6b4>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d01d      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a76      	ldr	r2, [pc, #472]	@ (8004ff0 <HAL_DMA_IRQHandler+0x6b8>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d018      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a74      	ldr	r2, [pc, #464]	@ (8004ff4 <HAL_DMA_IRQHandler+0x6bc>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d013      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a73      	ldr	r2, [pc, #460]	@ (8004ff8 <HAL_DMA_IRQHandler+0x6c0>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d00e      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a71      	ldr	r2, [pc, #452]	@ (8004ffc <HAL_DMA_IRQHandler+0x6c4>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d009      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a70      	ldr	r2, [pc, #448]	@ (8005000 <HAL_DMA_IRQHandler+0x6c8>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d004      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x516>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a6e      	ldr	r2, [pc, #440]	@ (8005004 <HAL_DMA_IRQHandler+0x6cc>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d10a      	bne.n	8004e64 <HAL_DMA_IRQHandler+0x52c>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0308 	and.w	r3, r3, #8
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	bf14      	ite	ne
 8004e5c:	2301      	movne	r3, #1
 8004e5e:	2300      	moveq	r3, #0
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	e009      	b.n	8004e78 <HAL_DMA_IRQHandler+0x540>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0304 	and.w	r3, r3, #4
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	bf14      	ite	ne
 8004e72:	2301      	movne	r3, #1
 8004e74:	2300      	moveq	r3, #0
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d03e      	beq.n	8004efa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e80:	f003 031f 	and.w	r3, r3, #31
 8004e84:	2210      	movs	r2, #16
 8004e86:	409a      	lsls	r2, r3
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d018      	beq.n	8004ecc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d108      	bne.n	8004eba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d024      	beq.n	8004efa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	4798      	blx	r3
 8004eb8:	e01f      	b.n	8004efa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d01b      	beq.n	8004efa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	4798      	blx	r3
 8004eca:	e016      	b.n	8004efa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d107      	bne.n	8004eea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f022 0208 	bic.w	r2, r2, #8
 8004ee8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004efe:	f003 031f 	and.w	r3, r3, #31
 8004f02:	2220      	movs	r2, #32
 8004f04:	409a      	lsls	r2, r3
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	4013      	ands	r3, r2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 8110 	beq.w	8005130 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a2c      	ldr	r2, [pc, #176]	@ (8004fc8 <HAL_DMA_IRQHandler+0x690>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d04a      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a2b      	ldr	r2, [pc, #172]	@ (8004fcc <HAL_DMA_IRQHandler+0x694>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d045      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a29      	ldr	r2, [pc, #164]	@ (8004fd0 <HAL_DMA_IRQHandler+0x698>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d040      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a28      	ldr	r2, [pc, #160]	@ (8004fd4 <HAL_DMA_IRQHandler+0x69c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d03b      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a26      	ldr	r2, [pc, #152]	@ (8004fd8 <HAL_DMA_IRQHandler+0x6a0>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d036      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a25      	ldr	r2, [pc, #148]	@ (8004fdc <HAL_DMA_IRQHandler+0x6a4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d031      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a23      	ldr	r2, [pc, #140]	@ (8004fe0 <HAL_DMA_IRQHandler+0x6a8>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d02c      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a22      	ldr	r2, [pc, #136]	@ (8004fe4 <HAL_DMA_IRQHandler+0x6ac>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d027      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a20      	ldr	r2, [pc, #128]	@ (8004fe8 <HAL_DMA_IRQHandler+0x6b0>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d022      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a1f      	ldr	r2, [pc, #124]	@ (8004fec <HAL_DMA_IRQHandler+0x6b4>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d01d      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a1d      	ldr	r2, [pc, #116]	@ (8004ff0 <HAL_DMA_IRQHandler+0x6b8>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d018      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a1c      	ldr	r2, [pc, #112]	@ (8004ff4 <HAL_DMA_IRQHandler+0x6bc>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d013      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a1a      	ldr	r2, [pc, #104]	@ (8004ff8 <HAL_DMA_IRQHandler+0x6c0>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d00e      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a19      	ldr	r2, [pc, #100]	@ (8004ffc <HAL_DMA_IRQHandler+0x6c4>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d009      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a17      	ldr	r2, [pc, #92]	@ (8005000 <HAL_DMA_IRQHandler+0x6c8>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d004      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x678>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a16      	ldr	r2, [pc, #88]	@ (8005004 <HAL_DMA_IRQHandler+0x6cc>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d12b      	bne.n	8005008 <HAL_DMA_IRQHandler+0x6d0>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0310 	and.w	r3, r3, #16
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	bf14      	ite	ne
 8004fbe:	2301      	movne	r3, #1
 8004fc0:	2300      	moveq	r3, #0
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	e02a      	b.n	800501c <HAL_DMA_IRQHandler+0x6e4>
 8004fc6:	bf00      	nop
 8004fc8:	40020010 	.word	0x40020010
 8004fcc:	40020028 	.word	0x40020028
 8004fd0:	40020040 	.word	0x40020040
 8004fd4:	40020058 	.word	0x40020058
 8004fd8:	40020070 	.word	0x40020070
 8004fdc:	40020088 	.word	0x40020088
 8004fe0:	400200a0 	.word	0x400200a0
 8004fe4:	400200b8 	.word	0x400200b8
 8004fe8:	40020410 	.word	0x40020410
 8004fec:	40020428 	.word	0x40020428
 8004ff0:	40020440 	.word	0x40020440
 8004ff4:	40020458 	.word	0x40020458
 8004ff8:	40020470 	.word	0x40020470
 8004ffc:	40020488 	.word	0x40020488
 8005000:	400204a0 	.word	0x400204a0
 8005004:	400204b8 	.word	0x400204b8
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	bf14      	ite	ne
 8005016:	2301      	movne	r3, #1
 8005018:	2300      	moveq	r3, #0
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 8087 	beq.w	8005130 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005026:	f003 031f 	and.w	r3, r3, #31
 800502a:	2220      	movs	r2, #32
 800502c:	409a      	lsls	r2, r3
 800502e:	6a3b      	ldr	r3, [r7, #32]
 8005030:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b04      	cmp	r3, #4
 800503c:	d139      	bne.n	80050b2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f022 0216 	bic.w	r2, r2, #22
 800504c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	695a      	ldr	r2, [r3, #20]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800505c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005062:	2b00      	cmp	r3, #0
 8005064:	d103      	bne.n	800506e <HAL_DMA_IRQHandler+0x736>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800506a:	2b00      	cmp	r3, #0
 800506c:	d007      	beq.n	800507e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 0208 	bic.w	r2, r2, #8
 800507c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005082:	f003 031f 	and.w	r3, r3, #31
 8005086:	223f      	movs	r2, #63	@ 0x3f
 8005088:	409a      	lsls	r2, r3
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 834a 	beq.w	800573c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	4798      	blx	r3
          }
          return;
 80050b0:	e344      	b.n	800573c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d018      	beq.n	80050f2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d108      	bne.n	80050e0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d02c      	beq.n	8005130 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	4798      	blx	r3
 80050de:	e027      	b.n	8005130 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d023      	beq.n	8005130 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	4798      	blx	r3
 80050f0:	e01e      	b.n	8005130 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d10f      	bne.n	8005120 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 0210 	bic.w	r2, r2, #16
 800510e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005124:	2b00      	cmp	r3, #0
 8005126:	d003      	beq.n	8005130 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 8306 	beq.w	8005746 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	f000 8088 	beq.w	8005258 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2204      	movs	r2, #4
 800514c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a7a      	ldr	r2, [pc, #488]	@ (8005340 <HAL_DMA_IRQHandler+0xa08>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d04a      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a79      	ldr	r2, [pc, #484]	@ (8005344 <HAL_DMA_IRQHandler+0xa0c>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d045      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a77      	ldr	r2, [pc, #476]	@ (8005348 <HAL_DMA_IRQHandler+0xa10>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d040      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a76      	ldr	r2, [pc, #472]	@ (800534c <HAL_DMA_IRQHandler+0xa14>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d03b      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a74      	ldr	r2, [pc, #464]	@ (8005350 <HAL_DMA_IRQHandler+0xa18>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d036      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a73      	ldr	r2, [pc, #460]	@ (8005354 <HAL_DMA_IRQHandler+0xa1c>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d031      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a71      	ldr	r2, [pc, #452]	@ (8005358 <HAL_DMA_IRQHandler+0xa20>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d02c      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a70      	ldr	r2, [pc, #448]	@ (800535c <HAL_DMA_IRQHandler+0xa24>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d027      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a6e      	ldr	r2, [pc, #440]	@ (8005360 <HAL_DMA_IRQHandler+0xa28>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d022      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a6d      	ldr	r2, [pc, #436]	@ (8005364 <HAL_DMA_IRQHandler+0xa2c>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d01d      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a6b      	ldr	r2, [pc, #428]	@ (8005368 <HAL_DMA_IRQHandler+0xa30>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d018      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a6a      	ldr	r2, [pc, #424]	@ (800536c <HAL_DMA_IRQHandler+0xa34>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d013      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a68      	ldr	r2, [pc, #416]	@ (8005370 <HAL_DMA_IRQHandler+0xa38>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d00e      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a67      	ldr	r2, [pc, #412]	@ (8005374 <HAL_DMA_IRQHandler+0xa3c>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d009      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a65      	ldr	r2, [pc, #404]	@ (8005378 <HAL_DMA_IRQHandler+0xa40>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d004      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x8b8>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a64      	ldr	r2, [pc, #400]	@ (800537c <HAL_DMA_IRQHandler+0xa44>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d108      	bne.n	8005202 <HAL_DMA_IRQHandler+0x8ca>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 0201 	bic.w	r2, r2, #1
 80051fe:	601a      	str	r2, [r3, #0]
 8005200:	e007      	b.n	8005212 <HAL_DMA_IRQHandler+0x8da>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0201 	bic.w	r2, r2, #1
 8005210:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	3301      	adds	r3, #1
 8005216:	60fb      	str	r3, [r7, #12]
 8005218:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800521a:	429a      	cmp	r2, r3
 800521c:	d307      	bcc.n	800522e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1f2      	bne.n	8005212 <HAL_DMA_IRQHandler+0x8da>
 800522c:	e000      	b.n	8005230 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800522e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	d004      	beq.n	8005248 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2203      	movs	r2, #3
 8005242:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005246:	e003      	b.n	8005250 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800525c:	2b00      	cmp	r3, #0
 800525e:	f000 8272 	beq.w	8005746 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	4798      	blx	r3
 800526a:	e26c      	b.n	8005746 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a43      	ldr	r2, [pc, #268]	@ (8005380 <HAL_DMA_IRQHandler+0xa48>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d022      	beq.n	80052bc <HAL_DMA_IRQHandler+0x984>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a42      	ldr	r2, [pc, #264]	@ (8005384 <HAL_DMA_IRQHandler+0xa4c>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d01d      	beq.n	80052bc <HAL_DMA_IRQHandler+0x984>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a40      	ldr	r2, [pc, #256]	@ (8005388 <HAL_DMA_IRQHandler+0xa50>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d018      	beq.n	80052bc <HAL_DMA_IRQHandler+0x984>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a3f      	ldr	r2, [pc, #252]	@ (800538c <HAL_DMA_IRQHandler+0xa54>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d013      	beq.n	80052bc <HAL_DMA_IRQHandler+0x984>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a3d      	ldr	r2, [pc, #244]	@ (8005390 <HAL_DMA_IRQHandler+0xa58>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d00e      	beq.n	80052bc <HAL_DMA_IRQHandler+0x984>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a3c      	ldr	r2, [pc, #240]	@ (8005394 <HAL_DMA_IRQHandler+0xa5c>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d009      	beq.n	80052bc <HAL_DMA_IRQHandler+0x984>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a3a      	ldr	r2, [pc, #232]	@ (8005398 <HAL_DMA_IRQHandler+0xa60>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d004      	beq.n	80052bc <HAL_DMA_IRQHandler+0x984>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a39      	ldr	r2, [pc, #228]	@ (800539c <HAL_DMA_IRQHandler+0xa64>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d101      	bne.n	80052c0 <HAL_DMA_IRQHandler+0x988>
 80052bc:	2301      	movs	r3, #1
 80052be:	e000      	b.n	80052c2 <HAL_DMA_IRQHandler+0x98a>
 80052c0:	2300      	movs	r3, #0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f000 823f 	beq.w	8005746 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052d4:	f003 031f 	and.w	r3, r3, #31
 80052d8:	2204      	movs	r2, #4
 80052da:	409a      	lsls	r2, r3
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	4013      	ands	r3, r2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f000 80cd 	beq.w	8005480 <HAL_DMA_IRQHandler+0xb48>
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 80c7 	beq.w	8005480 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052f6:	f003 031f 	and.w	r3, r3, #31
 80052fa:	2204      	movs	r2, #4
 80052fc:	409a      	lsls	r2, r3
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d049      	beq.n	80053a0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d109      	bne.n	800532a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800531a:	2b00      	cmp	r3, #0
 800531c:	f000 8210 	beq.w	8005740 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005328:	e20a      	b.n	8005740 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800532e:	2b00      	cmp	r3, #0
 8005330:	f000 8206 	beq.w	8005740 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800533c:	e200      	b.n	8005740 <HAL_DMA_IRQHandler+0xe08>
 800533e:	bf00      	nop
 8005340:	40020010 	.word	0x40020010
 8005344:	40020028 	.word	0x40020028
 8005348:	40020040 	.word	0x40020040
 800534c:	40020058 	.word	0x40020058
 8005350:	40020070 	.word	0x40020070
 8005354:	40020088 	.word	0x40020088
 8005358:	400200a0 	.word	0x400200a0
 800535c:	400200b8 	.word	0x400200b8
 8005360:	40020410 	.word	0x40020410
 8005364:	40020428 	.word	0x40020428
 8005368:	40020440 	.word	0x40020440
 800536c:	40020458 	.word	0x40020458
 8005370:	40020470 	.word	0x40020470
 8005374:	40020488 	.word	0x40020488
 8005378:	400204a0 	.word	0x400204a0
 800537c:	400204b8 	.word	0x400204b8
 8005380:	58025408 	.word	0x58025408
 8005384:	5802541c 	.word	0x5802541c
 8005388:	58025430 	.word	0x58025430
 800538c:	58025444 	.word	0x58025444
 8005390:	58025458 	.word	0x58025458
 8005394:	5802546c 	.word	0x5802546c
 8005398:	58025480 	.word	0x58025480
 800539c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f003 0320 	and.w	r3, r3, #32
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d160      	bne.n	800546c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a7f      	ldr	r2, [pc, #508]	@ (80055ac <HAL_DMA_IRQHandler+0xc74>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d04a      	beq.n	800544a <HAL_DMA_IRQHandler+0xb12>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a7d      	ldr	r2, [pc, #500]	@ (80055b0 <HAL_DMA_IRQHandler+0xc78>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d045      	beq.n	800544a <HAL_DMA_IRQHandler+0xb12>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a7c      	ldr	r2, [pc, #496]	@ (80055b4 <HAL_DMA_IRQHandler+0xc7c>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d040      	beq.n	800544a <HAL_DMA_IRQHandler+0xb12>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a7a      	ldr	r2, [pc, #488]	@ (80055b8 <HAL_DMA_IRQHandler+0xc80>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d03b      	beq.n	800544a <HAL_DMA_IRQHandler+0xb12>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a79      	ldr	r2, [pc, #484]	@ (80055bc <HAL_DMA_IRQHandler+0xc84>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d036      	beq.n	800544a <HAL_DMA_IRQHandler+0xb12>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a77      	ldr	r2, [pc, #476]	@ (80055c0 <HAL_DMA_IRQHandler+0xc88>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d031      	beq.n	800544a <HAL_DMA_IRQHandler+0xb12>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a76      	ldr	r2, [pc, #472]	@ (80055c4 <HAL_DMA_IRQHandler+0xc8c>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d02c      	beq.n	800544a <HAL_DMA_IRQHandler+0xb12>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a74      	ldr	r2, [pc, #464]	@ (80055c8 <HAL_DMA_IRQHandler+0xc90>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d027      	beq.n	800544a <HAL_DMA_IRQHandler+0xb12>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a73      	ldr	r2, [pc, #460]	@ (80055cc <HAL_DMA_IRQHandler+0xc94>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d022      	beq.n	800544a <HAL_DMA_IRQHandler+0xb12>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a71      	ldr	r2, [pc, #452]	@ (80055d0 <HAL_DMA_IRQHandler+0xc98>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d01d      	beq.n	800544a <HAL_DMA_IRQHandler+0xb12>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a70      	ldr	r2, [pc, #448]	@ (80055d4 <HAL_DMA_IRQHandler+0xc9c>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d018      	beq.n	800544a <HAL_DMA_IRQHandler+0xb12>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a6e      	ldr	r2, [pc, #440]	@ (80055d8 <HAL_DMA_IRQHandler+0xca0>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d013      	beq.n	800544a <HAL_DMA_IRQHandler+0xb12>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a6d      	ldr	r2, [pc, #436]	@ (80055dc <HAL_DMA_IRQHandler+0xca4>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d00e      	beq.n	800544a <HAL_DMA_IRQHandler+0xb12>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a6b      	ldr	r2, [pc, #428]	@ (80055e0 <HAL_DMA_IRQHandler+0xca8>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d009      	beq.n	800544a <HAL_DMA_IRQHandler+0xb12>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a6a      	ldr	r2, [pc, #424]	@ (80055e4 <HAL_DMA_IRQHandler+0xcac>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d004      	beq.n	800544a <HAL_DMA_IRQHandler+0xb12>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a68      	ldr	r2, [pc, #416]	@ (80055e8 <HAL_DMA_IRQHandler+0xcb0>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d108      	bne.n	800545c <HAL_DMA_IRQHandler+0xb24>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f022 0208 	bic.w	r2, r2, #8
 8005458:	601a      	str	r2, [r3, #0]
 800545a:	e007      	b.n	800546c <HAL_DMA_IRQHandler+0xb34>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f022 0204 	bic.w	r2, r2, #4
 800546a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005470:	2b00      	cmp	r3, #0
 8005472:	f000 8165 	beq.w	8005740 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800547e:	e15f      	b.n	8005740 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005484:	f003 031f 	and.w	r3, r3, #31
 8005488:	2202      	movs	r2, #2
 800548a:	409a      	lsls	r2, r3
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	4013      	ands	r3, r2
 8005490:	2b00      	cmp	r3, #0
 8005492:	f000 80c5 	beq.w	8005620 <HAL_DMA_IRQHandler+0xce8>
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b00      	cmp	r3, #0
 800549e:	f000 80bf 	beq.w	8005620 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054a6:	f003 031f 	and.w	r3, r3, #31
 80054aa:	2202      	movs	r2, #2
 80054ac:	409a      	lsls	r2, r3
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d018      	beq.n	80054ee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d109      	bne.n	80054da <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 813a 	beq.w	8005744 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054d8:	e134      	b.n	8005744 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f000 8130 	beq.w	8005744 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054ec:	e12a      	b.n	8005744 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	f003 0320 	and.w	r3, r3, #32
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f040 8089 	bne.w	800560c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a2b      	ldr	r2, [pc, #172]	@ (80055ac <HAL_DMA_IRQHandler+0xc74>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d04a      	beq.n	800559a <HAL_DMA_IRQHandler+0xc62>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a29      	ldr	r2, [pc, #164]	@ (80055b0 <HAL_DMA_IRQHandler+0xc78>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d045      	beq.n	800559a <HAL_DMA_IRQHandler+0xc62>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a28      	ldr	r2, [pc, #160]	@ (80055b4 <HAL_DMA_IRQHandler+0xc7c>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d040      	beq.n	800559a <HAL_DMA_IRQHandler+0xc62>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a26      	ldr	r2, [pc, #152]	@ (80055b8 <HAL_DMA_IRQHandler+0xc80>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d03b      	beq.n	800559a <HAL_DMA_IRQHandler+0xc62>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a25      	ldr	r2, [pc, #148]	@ (80055bc <HAL_DMA_IRQHandler+0xc84>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d036      	beq.n	800559a <HAL_DMA_IRQHandler+0xc62>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a23      	ldr	r2, [pc, #140]	@ (80055c0 <HAL_DMA_IRQHandler+0xc88>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d031      	beq.n	800559a <HAL_DMA_IRQHandler+0xc62>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a22      	ldr	r2, [pc, #136]	@ (80055c4 <HAL_DMA_IRQHandler+0xc8c>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d02c      	beq.n	800559a <HAL_DMA_IRQHandler+0xc62>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a20      	ldr	r2, [pc, #128]	@ (80055c8 <HAL_DMA_IRQHandler+0xc90>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d027      	beq.n	800559a <HAL_DMA_IRQHandler+0xc62>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a1f      	ldr	r2, [pc, #124]	@ (80055cc <HAL_DMA_IRQHandler+0xc94>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d022      	beq.n	800559a <HAL_DMA_IRQHandler+0xc62>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a1d      	ldr	r2, [pc, #116]	@ (80055d0 <HAL_DMA_IRQHandler+0xc98>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d01d      	beq.n	800559a <HAL_DMA_IRQHandler+0xc62>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a1c      	ldr	r2, [pc, #112]	@ (80055d4 <HAL_DMA_IRQHandler+0xc9c>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d018      	beq.n	800559a <HAL_DMA_IRQHandler+0xc62>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a1a      	ldr	r2, [pc, #104]	@ (80055d8 <HAL_DMA_IRQHandler+0xca0>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d013      	beq.n	800559a <HAL_DMA_IRQHandler+0xc62>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a19      	ldr	r2, [pc, #100]	@ (80055dc <HAL_DMA_IRQHandler+0xca4>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d00e      	beq.n	800559a <HAL_DMA_IRQHandler+0xc62>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a17      	ldr	r2, [pc, #92]	@ (80055e0 <HAL_DMA_IRQHandler+0xca8>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d009      	beq.n	800559a <HAL_DMA_IRQHandler+0xc62>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a16      	ldr	r2, [pc, #88]	@ (80055e4 <HAL_DMA_IRQHandler+0xcac>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d004      	beq.n	800559a <HAL_DMA_IRQHandler+0xc62>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a14      	ldr	r2, [pc, #80]	@ (80055e8 <HAL_DMA_IRQHandler+0xcb0>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d128      	bne.n	80055ec <HAL_DMA_IRQHandler+0xcb4>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 0214 	bic.w	r2, r2, #20
 80055a8:	601a      	str	r2, [r3, #0]
 80055aa:	e027      	b.n	80055fc <HAL_DMA_IRQHandler+0xcc4>
 80055ac:	40020010 	.word	0x40020010
 80055b0:	40020028 	.word	0x40020028
 80055b4:	40020040 	.word	0x40020040
 80055b8:	40020058 	.word	0x40020058
 80055bc:	40020070 	.word	0x40020070
 80055c0:	40020088 	.word	0x40020088
 80055c4:	400200a0 	.word	0x400200a0
 80055c8:	400200b8 	.word	0x400200b8
 80055cc:	40020410 	.word	0x40020410
 80055d0:	40020428 	.word	0x40020428
 80055d4:	40020440 	.word	0x40020440
 80055d8:	40020458 	.word	0x40020458
 80055dc:	40020470 	.word	0x40020470
 80055e0:	40020488 	.word	0x40020488
 80055e4:	400204a0 	.word	0x400204a0
 80055e8:	400204b8 	.word	0x400204b8
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f022 020a 	bic.w	r2, r2, #10
 80055fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 8097 	beq.w	8005744 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800561e:	e091      	b.n	8005744 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005624:	f003 031f 	and.w	r3, r3, #31
 8005628:	2208      	movs	r2, #8
 800562a:	409a      	lsls	r2, r3
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	4013      	ands	r3, r2
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 8088 	beq.w	8005746 <HAL_DMA_IRQHandler+0xe0e>
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	f003 0308 	and.w	r3, r3, #8
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 8082 	beq.w	8005746 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a41      	ldr	r2, [pc, #260]	@ (800574c <HAL_DMA_IRQHandler+0xe14>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d04a      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xdaa>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a3f      	ldr	r2, [pc, #252]	@ (8005750 <HAL_DMA_IRQHandler+0xe18>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d045      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xdaa>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a3e      	ldr	r2, [pc, #248]	@ (8005754 <HAL_DMA_IRQHandler+0xe1c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d040      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xdaa>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a3c      	ldr	r2, [pc, #240]	@ (8005758 <HAL_DMA_IRQHandler+0xe20>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d03b      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xdaa>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a3b      	ldr	r2, [pc, #236]	@ (800575c <HAL_DMA_IRQHandler+0xe24>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d036      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xdaa>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a39      	ldr	r2, [pc, #228]	@ (8005760 <HAL_DMA_IRQHandler+0xe28>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d031      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xdaa>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a38      	ldr	r2, [pc, #224]	@ (8005764 <HAL_DMA_IRQHandler+0xe2c>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d02c      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xdaa>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a36      	ldr	r2, [pc, #216]	@ (8005768 <HAL_DMA_IRQHandler+0xe30>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d027      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xdaa>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a35      	ldr	r2, [pc, #212]	@ (800576c <HAL_DMA_IRQHandler+0xe34>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d022      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xdaa>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a33      	ldr	r2, [pc, #204]	@ (8005770 <HAL_DMA_IRQHandler+0xe38>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d01d      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xdaa>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a32      	ldr	r2, [pc, #200]	@ (8005774 <HAL_DMA_IRQHandler+0xe3c>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d018      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xdaa>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a30      	ldr	r2, [pc, #192]	@ (8005778 <HAL_DMA_IRQHandler+0xe40>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d013      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xdaa>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a2f      	ldr	r2, [pc, #188]	@ (800577c <HAL_DMA_IRQHandler+0xe44>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d00e      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xdaa>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a2d      	ldr	r2, [pc, #180]	@ (8005780 <HAL_DMA_IRQHandler+0xe48>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d009      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xdaa>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a2c      	ldr	r2, [pc, #176]	@ (8005784 <HAL_DMA_IRQHandler+0xe4c>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d004      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xdaa>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a2a      	ldr	r2, [pc, #168]	@ (8005788 <HAL_DMA_IRQHandler+0xe50>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d108      	bne.n	80056f4 <HAL_DMA_IRQHandler+0xdbc>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 021c 	bic.w	r2, r2, #28
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	e007      	b.n	8005704 <HAL_DMA_IRQHandler+0xdcc>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f022 020e 	bic.w	r2, r2, #14
 8005702:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005708:	f003 031f 	and.w	r3, r3, #31
 800570c:	2201      	movs	r2, #1
 800570e:	409a      	lsls	r2, r3
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800572e:	2b00      	cmp	r3, #0
 8005730:	d009      	beq.n	8005746 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	4798      	blx	r3
 800573a:	e004      	b.n	8005746 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800573c:	bf00      	nop
 800573e:	e002      	b.n	8005746 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005740:	bf00      	nop
 8005742:	e000      	b.n	8005746 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005744:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005746:	3728      	adds	r7, #40	@ 0x28
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	40020010 	.word	0x40020010
 8005750:	40020028 	.word	0x40020028
 8005754:	40020040 	.word	0x40020040
 8005758:	40020058 	.word	0x40020058
 800575c:	40020070 	.word	0x40020070
 8005760:	40020088 	.word	0x40020088
 8005764:	400200a0 	.word	0x400200a0
 8005768:	400200b8 	.word	0x400200b8
 800576c:	40020410 	.word	0x40020410
 8005770:	40020428 	.word	0x40020428
 8005774:	40020440 	.word	0x40020440
 8005778:	40020458 	.word	0x40020458
 800577c:	40020470 	.word	0x40020470
 8005780:	40020488 	.word	0x40020488
 8005784:	400204a0 	.word	0x400204a0
 8005788:	400204b8 	.word	0x400204b8

0800578c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a42      	ldr	r2, [pc, #264]	@ (80058a4 <DMA_CalcBaseAndBitshift+0x118>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d04a      	beq.n	8005834 <DMA_CalcBaseAndBitshift+0xa8>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a41      	ldr	r2, [pc, #260]	@ (80058a8 <DMA_CalcBaseAndBitshift+0x11c>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d045      	beq.n	8005834 <DMA_CalcBaseAndBitshift+0xa8>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a3f      	ldr	r2, [pc, #252]	@ (80058ac <DMA_CalcBaseAndBitshift+0x120>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d040      	beq.n	8005834 <DMA_CalcBaseAndBitshift+0xa8>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a3e      	ldr	r2, [pc, #248]	@ (80058b0 <DMA_CalcBaseAndBitshift+0x124>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d03b      	beq.n	8005834 <DMA_CalcBaseAndBitshift+0xa8>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a3c      	ldr	r2, [pc, #240]	@ (80058b4 <DMA_CalcBaseAndBitshift+0x128>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d036      	beq.n	8005834 <DMA_CalcBaseAndBitshift+0xa8>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a3b      	ldr	r2, [pc, #236]	@ (80058b8 <DMA_CalcBaseAndBitshift+0x12c>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d031      	beq.n	8005834 <DMA_CalcBaseAndBitshift+0xa8>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a39      	ldr	r2, [pc, #228]	@ (80058bc <DMA_CalcBaseAndBitshift+0x130>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d02c      	beq.n	8005834 <DMA_CalcBaseAndBitshift+0xa8>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a38      	ldr	r2, [pc, #224]	@ (80058c0 <DMA_CalcBaseAndBitshift+0x134>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d027      	beq.n	8005834 <DMA_CalcBaseAndBitshift+0xa8>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a36      	ldr	r2, [pc, #216]	@ (80058c4 <DMA_CalcBaseAndBitshift+0x138>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d022      	beq.n	8005834 <DMA_CalcBaseAndBitshift+0xa8>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a35      	ldr	r2, [pc, #212]	@ (80058c8 <DMA_CalcBaseAndBitshift+0x13c>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d01d      	beq.n	8005834 <DMA_CalcBaseAndBitshift+0xa8>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a33      	ldr	r2, [pc, #204]	@ (80058cc <DMA_CalcBaseAndBitshift+0x140>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d018      	beq.n	8005834 <DMA_CalcBaseAndBitshift+0xa8>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a32      	ldr	r2, [pc, #200]	@ (80058d0 <DMA_CalcBaseAndBitshift+0x144>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d013      	beq.n	8005834 <DMA_CalcBaseAndBitshift+0xa8>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a30      	ldr	r2, [pc, #192]	@ (80058d4 <DMA_CalcBaseAndBitshift+0x148>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d00e      	beq.n	8005834 <DMA_CalcBaseAndBitshift+0xa8>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a2f      	ldr	r2, [pc, #188]	@ (80058d8 <DMA_CalcBaseAndBitshift+0x14c>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d009      	beq.n	8005834 <DMA_CalcBaseAndBitshift+0xa8>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a2d      	ldr	r2, [pc, #180]	@ (80058dc <DMA_CalcBaseAndBitshift+0x150>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d004      	beq.n	8005834 <DMA_CalcBaseAndBitshift+0xa8>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a2c      	ldr	r2, [pc, #176]	@ (80058e0 <DMA_CalcBaseAndBitshift+0x154>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d101      	bne.n	8005838 <DMA_CalcBaseAndBitshift+0xac>
 8005834:	2301      	movs	r3, #1
 8005836:	e000      	b.n	800583a <DMA_CalcBaseAndBitshift+0xae>
 8005838:	2300      	movs	r3, #0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d024      	beq.n	8005888 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	b2db      	uxtb	r3, r3
 8005844:	3b10      	subs	r3, #16
 8005846:	4a27      	ldr	r2, [pc, #156]	@ (80058e4 <DMA_CalcBaseAndBitshift+0x158>)
 8005848:	fba2 2303 	umull	r2, r3, r2, r3
 800584c:	091b      	lsrs	r3, r3, #4
 800584e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f003 0307 	and.w	r3, r3, #7
 8005856:	4a24      	ldr	r2, [pc, #144]	@ (80058e8 <DMA_CalcBaseAndBitshift+0x15c>)
 8005858:	5cd3      	ldrb	r3, [r2, r3]
 800585a:	461a      	mov	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2b03      	cmp	r3, #3
 8005864:	d908      	bls.n	8005878 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	461a      	mov	r2, r3
 800586c:	4b1f      	ldr	r3, [pc, #124]	@ (80058ec <DMA_CalcBaseAndBitshift+0x160>)
 800586e:	4013      	ands	r3, r2
 8005870:	1d1a      	adds	r2, r3, #4
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	659a      	str	r2, [r3, #88]	@ 0x58
 8005876:	e00d      	b.n	8005894 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	461a      	mov	r2, r3
 800587e:	4b1b      	ldr	r3, [pc, #108]	@ (80058ec <DMA_CalcBaseAndBitshift+0x160>)
 8005880:	4013      	ands	r3, r2
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	6593      	str	r3, [r2, #88]	@ 0x58
 8005886:	e005      	b.n	8005894 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005898:	4618      	mov	r0, r3
 800589a:	3714      	adds	r7, #20
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	40020010 	.word	0x40020010
 80058a8:	40020028 	.word	0x40020028
 80058ac:	40020040 	.word	0x40020040
 80058b0:	40020058 	.word	0x40020058
 80058b4:	40020070 	.word	0x40020070
 80058b8:	40020088 	.word	0x40020088
 80058bc:	400200a0 	.word	0x400200a0
 80058c0:	400200b8 	.word	0x400200b8
 80058c4:	40020410 	.word	0x40020410
 80058c8:	40020428 	.word	0x40020428
 80058cc:	40020440 	.word	0x40020440
 80058d0:	40020458 	.word	0x40020458
 80058d4:	40020470 	.word	0x40020470
 80058d8:	40020488 	.word	0x40020488
 80058dc:	400204a0 	.word	0x400204a0
 80058e0:	400204b8 	.word	0x400204b8
 80058e4:	aaaaaaab 	.word	0xaaaaaaab
 80058e8:	08012928 	.word	0x08012928
 80058ec:	fffffc00 	.word	0xfffffc00

080058f0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058f8:	2300      	movs	r3, #0
 80058fa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d120      	bne.n	8005946 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005908:	2b03      	cmp	r3, #3
 800590a:	d858      	bhi.n	80059be <DMA_CheckFifoParam+0xce>
 800590c:	a201      	add	r2, pc, #4	@ (adr r2, 8005914 <DMA_CheckFifoParam+0x24>)
 800590e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005912:	bf00      	nop
 8005914:	08005925 	.word	0x08005925
 8005918:	08005937 	.word	0x08005937
 800591c:	08005925 	.word	0x08005925
 8005920:	080059bf 	.word	0x080059bf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005928:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d048      	beq.n	80059c2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005934:	e045      	b.n	80059c2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800593a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800593e:	d142      	bne.n	80059c6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005944:	e03f      	b.n	80059c6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800594e:	d123      	bne.n	8005998 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005954:	2b03      	cmp	r3, #3
 8005956:	d838      	bhi.n	80059ca <DMA_CheckFifoParam+0xda>
 8005958:	a201      	add	r2, pc, #4	@ (adr r2, 8005960 <DMA_CheckFifoParam+0x70>)
 800595a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800595e:	bf00      	nop
 8005960:	08005971 	.word	0x08005971
 8005964:	08005977 	.word	0x08005977
 8005968:	08005971 	.word	0x08005971
 800596c:	08005989 	.word	0x08005989
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	73fb      	strb	r3, [r7, #15]
        break;
 8005974:	e030      	b.n	80059d8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800597a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d025      	beq.n	80059ce <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005986:	e022      	b.n	80059ce <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800598c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005990:	d11f      	bne.n	80059d2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005996:	e01c      	b.n	80059d2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800599c:	2b02      	cmp	r3, #2
 800599e:	d902      	bls.n	80059a6 <DMA_CheckFifoParam+0xb6>
 80059a0:	2b03      	cmp	r3, #3
 80059a2:	d003      	beq.n	80059ac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80059a4:	e018      	b.n	80059d8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	73fb      	strb	r3, [r7, #15]
        break;
 80059aa:	e015      	b.n	80059d8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00e      	beq.n	80059d6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	73fb      	strb	r3, [r7, #15]
    break;
 80059bc:	e00b      	b.n	80059d6 <DMA_CheckFifoParam+0xe6>
        break;
 80059be:	bf00      	nop
 80059c0:	e00a      	b.n	80059d8 <DMA_CheckFifoParam+0xe8>
        break;
 80059c2:	bf00      	nop
 80059c4:	e008      	b.n	80059d8 <DMA_CheckFifoParam+0xe8>
        break;
 80059c6:	bf00      	nop
 80059c8:	e006      	b.n	80059d8 <DMA_CheckFifoParam+0xe8>
        break;
 80059ca:	bf00      	nop
 80059cc:	e004      	b.n	80059d8 <DMA_CheckFifoParam+0xe8>
        break;
 80059ce:	bf00      	nop
 80059d0:	e002      	b.n	80059d8 <DMA_CheckFifoParam+0xe8>
        break;
 80059d2:	bf00      	nop
 80059d4:	e000      	b.n	80059d8 <DMA_CheckFifoParam+0xe8>
    break;
 80059d6:	bf00      	nop
    }
  }

  return status;
 80059d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3714      	adds	r7, #20
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop

080059e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a38      	ldr	r2, [pc, #224]	@ (8005adc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d022      	beq.n	8005a46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a36      	ldr	r2, [pc, #216]	@ (8005ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d01d      	beq.n	8005a46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a35      	ldr	r2, [pc, #212]	@ (8005ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d018      	beq.n	8005a46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a33      	ldr	r2, [pc, #204]	@ (8005ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d013      	beq.n	8005a46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a32      	ldr	r2, [pc, #200]	@ (8005aec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d00e      	beq.n	8005a46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a30      	ldr	r2, [pc, #192]	@ (8005af0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d009      	beq.n	8005a46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a2f      	ldr	r2, [pc, #188]	@ (8005af4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d004      	beq.n	8005a46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a2d      	ldr	r2, [pc, #180]	@ (8005af8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d101      	bne.n	8005a4a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005a46:	2301      	movs	r3, #1
 8005a48:	e000      	b.n	8005a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d01a      	beq.n	8005a86 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	3b08      	subs	r3, #8
 8005a58:	4a28      	ldr	r2, [pc, #160]	@ (8005afc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a5e:	091b      	lsrs	r3, r3, #4
 8005a60:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	4b26      	ldr	r3, [pc, #152]	@ (8005b00 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005a66:	4413      	add	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a24      	ldr	r2, [pc, #144]	@ (8005b04 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005a74:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f003 031f 	and.w	r3, r3, #31
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	409a      	lsls	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005a84:	e024      	b.n	8005ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	3b10      	subs	r3, #16
 8005a8e:	4a1e      	ldr	r2, [pc, #120]	@ (8005b08 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005a90:	fba2 2303 	umull	r2, r3, r2, r3
 8005a94:	091b      	lsrs	r3, r3, #4
 8005a96:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	4a1c      	ldr	r2, [pc, #112]	@ (8005b0c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d806      	bhi.n	8005aae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	4a1b      	ldr	r2, [pc, #108]	@ (8005b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d902      	bls.n	8005aae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	3308      	adds	r3, #8
 8005aac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	4b18      	ldr	r3, [pc, #96]	@ (8005b14 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005ab2:	4413      	add	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a16      	ldr	r2, [pc, #88]	@ (8005b18 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005ac0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f003 031f 	and.w	r3, r3, #31
 8005ac8:	2201      	movs	r2, #1
 8005aca:	409a      	lsls	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005ad0:	bf00      	nop
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr
 8005adc:	58025408 	.word	0x58025408
 8005ae0:	5802541c 	.word	0x5802541c
 8005ae4:	58025430 	.word	0x58025430
 8005ae8:	58025444 	.word	0x58025444
 8005aec:	58025458 	.word	0x58025458
 8005af0:	5802546c 	.word	0x5802546c
 8005af4:	58025480 	.word	0x58025480
 8005af8:	58025494 	.word	0x58025494
 8005afc:	cccccccd 	.word	0xcccccccd
 8005b00:	16009600 	.word	0x16009600
 8005b04:	58025880 	.word	0x58025880
 8005b08:	aaaaaaab 	.word	0xaaaaaaab
 8005b0c:	400204b8 	.word	0x400204b8
 8005b10:	4002040f 	.word	0x4002040f
 8005b14:	10008200 	.word	0x10008200
 8005b18:	40020880 	.word	0x40020880

08005b1c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d04a      	beq.n	8005bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2b08      	cmp	r3, #8
 8005b36:	d847      	bhi.n	8005bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a25      	ldr	r2, [pc, #148]	@ (8005bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d022      	beq.n	8005b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a24      	ldr	r2, [pc, #144]	@ (8005bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d01d      	beq.n	8005b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a22      	ldr	r2, [pc, #136]	@ (8005bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d018      	beq.n	8005b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a21      	ldr	r2, [pc, #132]	@ (8005be0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d013      	beq.n	8005b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a1f      	ldr	r2, [pc, #124]	@ (8005be4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d00e      	beq.n	8005b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a1e      	ldr	r2, [pc, #120]	@ (8005be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d009      	beq.n	8005b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a1c      	ldr	r2, [pc, #112]	@ (8005bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d004      	beq.n	8005b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a1b      	ldr	r2, [pc, #108]	@ (8005bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d101      	bne.n	8005b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e000      	b.n	8005b8e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00a      	beq.n	8005ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	4b17      	ldr	r3, [pc, #92]	@ (8005bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005b96:	4413      	add	r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a15      	ldr	r2, [pc, #84]	@ (8005bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005ba4:	671a      	str	r2, [r3, #112]	@ 0x70
 8005ba6:	e009      	b.n	8005bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	4b14      	ldr	r3, [pc, #80]	@ (8005bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005bac:	4413      	add	r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a11      	ldr	r2, [pc, #68]	@ (8005c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005bba:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	409a      	lsls	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005bc8:	bf00      	nop
 8005bca:	3714      	adds	r7, #20
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr
 8005bd4:	58025408 	.word	0x58025408
 8005bd8:	5802541c 	.word	0x5802541c
 8005bdc:	58025430 	.word	0x58025430
 8005be0:	58025444 	.word	0x58025444
 8005be4:	58025458 	.word	0x58025458
 8005be8:	5802546c 	.word	0x5802546c
 8005bec:	58025480 	.word	0x58025480
 8005bf0:	58025494 	.word	0x58025494
 8005bf4:	1600963f 	.word	0x1600963f
 8005bf8:	58025940 	.word	0x58025940
 8005bfc:	1000823f 	.word	0x1000823f
 8005c00:	40020940 	.word	0x40020940

08005c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b089      	sub	sp, #36	@ 0x24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005c12:	4b89      	ldr	r3, [pc, #548]	@ (8005e38 <HAL_GPIO_Init+0x234>)
 8005c14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c16:	e194      	b.n	8005f42 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	2101      	movs	r1, #1
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	fa01 f303 	lsl.w	r3, r1, r3
 8005c24:	4013      	ands	r3, r2
 8005c26:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f000 8186 	beq.w	8005f3c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f003 0303 	and.w	r3, r3, #3
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d005      	beq.n	8005c48 <HAL_GPIO_Init+0x44>
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f003 0303 	and.w	r3, r3, #3
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d130      	bne.n	8005caa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	005b      	lsls	r3, r3, #1
 8005c52:	2203      	movs	r2, #3
 8005c54:	fa02 f303 	lsl.w	r3, r2, r3
 8005c58:	43db      	mvns	r3, r3
 8005c5a:	69ba      	ldr	r2, [r7, #24]
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	68da      	ldr	r2, [r3, #12]
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	005b      	lsls	r3, r3, #1
 8005c68:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c7e:	2201      	movs	r2, #1
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	fa02 f303 	lsl.w	r3, r2, r3
 8005c86:	43db      	mvns	r3, r3
 8005c88:	69ba      	ldr	r2, [r7, #24]
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	091b      	lsrs	r3, r3, #4
 8005c94:	f003 0201 	and.w	r2, r3, #1
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9e:	69ba      	ldr	r2, [r7, #24]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	69ba      	ldr	r2, [r7, #24]
 8005ca8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f003 0303 	and.w	r3, r3, #3
 8005cb2:	2b03      	cmp	r3, #3
 8005cb4:	d017      	beq.n	8005ce6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	005b      	lsls	r3, r3, #1
 8005cc0:	2203      	movs	r2, #3
 8005cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc6:	43db      	mvns	r3, r3
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	4013      	ands	r3, r2
 8005ccc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	689a      	ldr	r2, [r3, #8]
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	005b      	lsls	r3, r3, #1
 8005cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	69ba      	ldr	r2, [r7, #24]
 8005ce4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f003 0303 	and.w	r3, r3, #3
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d123      	bne.n	8005d3a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	08da      	lsrs	r2, r3, #3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	3208      	adds	r2, #8
 8005cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	f003 0307 	and.w	r3, r3, #7
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	220f      	movs	r2, #15
 8005d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0e:	43db      	mvns	r3, r3
 8005d10:	69ba      	ldr	r2, [r7, #24]
 8005d12:	4013      	ands	r3, r2
 8005d14:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	691a      	ldr	r2, [r3, #16]
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	f003 0307 	and.w	r3, r3, #7
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	fa02 f303 	lsl.w	r3, r2, r3
 8005d26:	69ba      	ldr	r2, [r7, #24]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	08da      	lsrs	r2, r3, #3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	3208      	adds	r2, #8
 8005d34:	69b9      	ldr	r1, [r7, #24]
 8005d36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	005b      	lsls	r3, r3, #1
 8005d44:	2203      	movs	r2, #3
 8005d46:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4a:	43db      	mvns	r3, r3
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	4013      	ands	r3, r2
 8005d50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f003 0203 	and.w	r2, r3, #3
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	005b      	lsls	r3, r3, #1
 8005d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d62:	69ba      	ldr	r2, [r7, #24]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	69ba      	ldr	r2, [r7, #24]
 8005d6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 80e0 	beq.w	8005f3c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d7c:	4b2f      	ldr	r3, [pc, #188]	@ (8005e3c <HAL_GPIO_Init+0x238>)
 8005d7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005d82:	4a2e      	ldr	r2, [pc, #184]	@ (8005e3c <HAL_GPIO_Init+0x238>)
 8005d84:	f043 0302 	orr.w	r3, r3, #2
 8005d88:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005d8c:	4b2b      	ldr	r3, [pc, #172]	@ (8005e3c <HAL_GPIO_Init+0x238>)
 8005d8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005d92:	f003 0302 	and.w	r3, r3, #2
 8005d96:	60fb      	str	r3, [r7, #12]
 8005d98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d9a:	4a29      	ldr	r2, [pc, #164]	@ (8005e40 <HAL_GPIO_Init+0x23c>)
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	089b      	lsrs	r3, r3, #2
 8005da0:	3302      	adds	r3, #2
 8005da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	f003 0303 	and.w	r3, r3, #3
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	220f      	movs	r2, #15
 8005db2:	fa02 f303 	lsl.w	r3, r2, r3
 8005db6:	43db      	mvns	r3, r3
 8005db8:	69ba      	ldr	r2, [r7, #24]
 8005dba:	4013      	ands	r3, r2
 8005dbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a20      	ldr	r2, [pc, #128]	@ (8005e44 <HAL_GPIO_Init+0x240>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d052      	beq.n	8005e6c <HAL_GPIO_Init+0x268>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a1f      	ldr	r2, [pc, #124]	@ (8005e48 <HAL_GPIO_Init+0x244>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d031      	beq.n	8005e32 <HAL_GPIO_Init+0x22e>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a1e      	ldr	r2, [pc, #120]	@ (8005e4c <HAL_GPIO_Init+0x248>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d02b      	beq.n	8005e2e <HAL_GPIO_Init+0x22a>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a1d      	ldr	r2, [pc, #116]	@ (8005e50 <HAL_GPIO_Init+0x24c>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d025      	beq.n	8005e2a <HAL_GPIO_Init+0x226>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a1c      	ldr	r2, [pc, #112]	@ (8005e54 <HAL_GPIO_Init+0x250>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d01f      	beq.n	8005e26 <HAL_GPIO_Init+0x222>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a1b      	ldr	r2, [pc, #108]	@ (8005e58 <HAL_GPIO_Init+0x254>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d019      	beq.n	8005e22 <HAL_GPIO_Init+0x21e>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a1a      	ldr	r2, [pc, #104]	@ (8005e5c <HAL_GPIO_Init+0x258>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d013      	beq.n	8005e1e <HAL_GPIO_Init+0x21a>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a19      	ldr	r2, [pc, #100]	@ (8005e60 <HAL_GPIO_Init+0x25c>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d00d      	beq.n	8005e1a <HAL_GPIO_Init+0x216>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a18      	ldr	r2, [pc, #96]	@ (8005e64 <HAL_GPIO_Init+0x260>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d007      	beq.n	8005e16 <HAL_GPIO_Init+0x212>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a17      	ldr	r2, [pc, #92]	@ (8005e68 <HAL_GPIO_Init+0x264>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d101      	bne.n	8005e12 <HAL_GPIO_Init+0x20e>
 8005e0e:	2309      	movs	r3, #9
 8005e10:	e02d      	b.n	8005e6e <HAL_GPIO_Init+0x26a>
 8005e12:	230a      	movs	r3, #10
 8005e14:	e02b      	b.n	8005e6e <HAL_GPIO_Init+0x26a>
 8005e16:	2308      	movs	r3, #8
 8005e18:	e029      	b.n	8005e6e <HAL_GPIO_Init+0x26a>
 8005e1a:	2307      	movs	r3, #7
 8005e1c:	e027      	b.n	8005e6e <HAL_GPIO_Init+0x26a>
 8005e1e:	2306      	movs	r3, #6
 8005e20:	e025      	b.n	8005e6e <HAL_GPIO_Init+0x26a>
 8005e22:	2305      	movs	r3, #5
 8005e24:	e023      	b.n	8005e6e <HAL_GPIO_Init+0x26a>
 8005e26:	2304      	movs	r3, #4
 8005e28:	e021      	b.n	8005e6e <HAL_GPIO_Init+0x26a>
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e01f      	b.n	8005e6e <HAL_GPIO_Init+0x26a>
 8005e2e:	2302      	movs	r3, #2
 8005e30:	e01d      	b.n	8005e6e <HAL_GPIO_Init+0x26a>
 8005e32:	2301      	movs	r3, #1
 8005e34:	e01b      	b.n	8005e6e <HAL_GPIO_Init+0x26a>
 8005e36:	bf00      	nop
 8005e38:	58000080 	.word	0x58000080
 8005e3c:	58024400 	.word	0x58024400
 8005e40:	58000400 	.word	0x58000400
 8005e44:	58020000 	.word	0x58020000
 8005e48:	58020400 	.word	0x58020400
 8005e4c:	58020800 	.word	0x58020800
 8005e50:	58020c00 	.word	0x58020c00
 8005e54:	58021000 	.word	0x58021000
 8005e58:	58021400 	.word	0x58021400
 8005e5c:	58021800 	.word	0x58021800
 8005e60:	58021c00 	.word	0x58021c00
 8005e64:	58022000 	.word	0x58022000
 8005e68:	58022400 	.word	0x58022400
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	69fa      	ldr	r2, [r7, #28]
 8005e70:	f002 0203 	and.w	r2, r2, #3
 8005e74:	0092      	lsls	r2, r2, #2
 8005e76:	4093      	lsls	r3, r2
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e7e:	4938      	ldr	r1, [pc, #224]	@ (8005f60 <HAL_GPIO_Init+0x35c>)
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	089b      	lsrs	r3, r3, #2
 8005e84:	3302      	adds	r3, #2
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	43db      	mvns	r3, r3
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005eaa:	69ba      	ldr	r2, [r7, #24]
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005eb2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005eba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	43db      	mvns	r3, r3
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	4013      	ands	r3, r2
 8005eca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d003      	beq.n	8005ee0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005ed8:	69ba      	ldr	r2, [r7, #24]
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005ee0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	43db      	mvns	r3, r3
 8005ef2:	69ba      	ldr	r2, [r7, #24]
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d003      	beq.n	8005f0c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	43db      	mvns	r3, r3
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d003      	beq.n	8005f36 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	fa22 f303 	lsr.w	r3, r2, r3
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f47f ae63 	bne.w	8005c18 <HAL_GPIO_Init+0x14>
  }
}
 8005f52:	bf00      	nop
 8005f54:	bf00      	nop
 8005f56:	3724      	adds	r7, #36	@ 0x24
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr
 8005f60:	58000400 	.word	0x58000400

08005f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	807b      	strh	r3, [r7, #2]
 8005f70:	4613      	mov	r3, r2
 8005f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005f74:	787b      	ldrb	r3, [r7, #1]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d003      	beq.n	8005f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f7a:	887a      	ldrh	r2, [r7, #2]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005f80:	e003      	b.n	8005f8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005f82:	887b      	ldrh	r3, [r7, #2]
 8005f84:	041a      	lsls	r2, r3, #16
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	619a      	str	r2, [r3, #24]
}
 8005f8a:	bf00      	nop
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
	...

08005f98 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005fa0:	4a08      	ldr	r2, [pc, #32]	@ (8005fc4 <HAL_HSEM_FastTake+0x2c>)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	3320      	adds	r3, #32
 8005fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005faa:	4a07      	ldr	r2, [pc, #28]	@ (8005fc8 <HAL_HSEM_FastTake+0x30>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d101      	bne.n	8005fb4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	e000      	b.n	8005fb6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	58026400 	.word	0x58026400
 8005fc8:	80000300 	.word	0x80000300

08005fcc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005fd6:	4906      	ldr	r1, [pc, #24]	@ (8005ff0 <HAL_HSEM_Release+0x24>)
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr
 8005ff0:	58026400 	.word	0x58026400

08005ff4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e08b      	b.n	800611e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b00      	cmp	r3, #0
 8006010:	d106      	bne.n	8006020 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7fb f842 	bl	80010a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2224      	movs	r2, #36	@ 0x24
 8006024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f022 0201 	bic.w	r2, r2, #1
 8006036:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006044:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689a      	ldr	r2, [r3, #8]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006054:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d107      	bne.n	800606e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	689a      	ldr	r2, [r3, #8]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800606a:	609a      	str	r2, [r3, #8]
 800606c:	e006      	b.n	800607c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	689a      	ldr	r2, [r3, #8]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800607a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	2b02      	cmp	r3, #2
 8006082:	d108      	bne.n	8006096 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	685a      	ldr	r2, [r3, #4]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006092:	605a      	str	r2, [r3, #4]
 8006094:	e007      	b.n	80060a6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	685a      	ldr	r2, [r3, #4]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	6859      	ldr	r1, [r3, #4]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006128 <HAL_I2C_Init+0x134>)
 80060b2:	430b      	orrs	r3, r1
 80060b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68da      	ldr	r2, [r3, #12]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80060c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	691a      	ldr	r2, [r3, #16]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	430a      	orrs	r2, r1
 80060de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	69d9      	ldr	r1, [r3, #28]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a1a      	ldr	r2, [r3, #32]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	430a      	orrs	r2, r1
 80060ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f042 0201 	orr.w	r2, r2, #1
 80060fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2220      	movs	r2, #32
 800610a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3708      	adds	r7, #8
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	02008000 	.word	0x02008000

0800612c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b088      	sub	sp, #32
 8006130:	af02      	add	r7, sp, #8
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	607a      	str	r2, [r7, #4]
 8006136:	461a      	mov	r2, r3
 8006138:	460b      	mov	r3, r1
 800613a:	817b      	strh	r3, [r7, #10]
 800613c:	4613      	mov	r3, r2
 800613e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006146:	b2db      	uxtb	r3, r3
 8006148:	2b20      	cmp	r3, #32
 800614a:	f040 80fd 	bne.w	8006348 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006154:	2b01      	cmp	r3, #1
 8006156:	d101      	bne.n	800615c <HAL_I2C_Master_Transmit+0x30>
 8006158:	2302      	movs	r3, #2
 800615a:	e0f6      	b.n	800634a <HAL_I2C_Master_Transmit+0x21e>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006164:	f7fb fe96 	bl	8001e94 <HAL_GetTick>
 8006168:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	2319      	movs	r3, #25
 8006170:	2201      	movs	r2, #1
 8006172:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f000 f914 	bl	80063a4 <I2C_WaitOnFlagUntilTimeout>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d001      	beq.n	8006186 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e0e1      	b.n	800634a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2221      	movs	r2, #33	@ 0x21
 800618a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2210      	movs	r2, #16
 8006192:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	893a      	ldrh	r2, [r7, #8]
 80061a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	2bff      	cmp	r3, #255	@ 0xff
 80061b6:	d906      	bls.n	80061c6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	22ff      	movs	r2, #255	@ 0xff
 80061bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80061be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80061c2:	617b      	str	r3, [r7, #20]
 80061c4:	e007      	b.n	80061d6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80061d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80061d4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d024      	beq.n	8006228 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e2:	781a      	ldrb	r2, [r3, #0]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ee:	1c5a      	adds	r2, r3, #1
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	3b01      	subs	r3, #1
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006206:	3b01      	subs	r3, #1
 8006208:	b29a      	uxth	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006212:	b2db      	uxtb	r3, r3
 8006214:	3301      	adds	r3, #1
 8006216:	b2da      	uxtb	r2, r3
 8006218:	8979      	ldrh	r1, [r7, #10]
 800621a:	4b4e      	ldr	r3, [pc, #312]	@ (8006354 <HAL_I2C_Master_Transmit+0x228>)
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f000 fa83 	bl	800672c <I2C_TransferConfig>
 8006226:	e066      	b.n	80062f6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800622c:	b2da      	uxtb	r2, r3
 800622e:	8979      	ldrh	r1, [r7, #10]
 8006230:	4b48      	ldr	r3, [pc, #288]	@ (8006354 <HAL_I2C_Master_Transmit+0x228>)
 8006232:	9300      	str	r3, [sp, #0]
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f000 fa78 	bl	800672c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800623c:	e05b      	b.n	80062f6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	6a39      	ldr	r1, [r7, #32]
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f000 f907 	bl	8006456 <I2C_WaitOnTXISFlagUntilTimeout>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e07b      	b.n	800634a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006256:	781a      	ldrb	r2, [r3, #0]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006262:	1c5a      	adds	r2, r3, #1
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800626c:	b29b      	uxth	r3, r3
 800626e:	3b01      	subs	r3, #1
 8006270:	b29a      	uxth	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800627a:	3b01      	subs	r3, #1
 800627c:	b29a      	uxth	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006286:	b29b      	uxth	r3, r3
 8006288:	2b00      	cmp	r3, #0
 800628a:	d034      	beq.n	80062f6 <HAL_I2C_Master_Transmit+0x1ca>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006290:	2b00      	cmp	r3, #0
 8006292:	d130      	bne.n	80062f6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	6a3b      	ldr	r3, [r7, #32]
 800629a:	2200      	movs	r2, #0
 800629c:	2180      	movs	r1, #128	@ 0x80
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 f880 	bl	80063a4 <I2C_WaitOnFlagUntilTimeout>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d001      	beq.n	80062ae <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e04d      	b.n	800634a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	2bff      	cmp	r3, #255	@ 0xff
 80062b6:	d90e      	bls.n	80062d6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	22ff      	movs	r2, #255	@ 0xff
 80062bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062c2:	b2da      	uxtb	r2, r3
 80062c4:	8979      	ldrh	r1, [r7, #10]
 80062c6:	2300      	movs	r3, #0
 80062c8:	9300      	str	r3, [sp, #0]
 80062ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f000 fa2c 	bl	800672c <I2C_TransferConfig>
 80062d4:	e00f      	b.n	80062f6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062da:	b29a      	uxth	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	8979      	ldrh	r1, [r7, #10]
 80062e8:	2300      	movs	r3, #0
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f000 fa1b 	bl	800672c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d19e      	bne.n	800623e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	6a39      	ldr	r1, [r7, #32]
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f000 f8ed 	bl	80064e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d001      	beq.n	8006314 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e01a      	b.n	800634a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2220      	movs	r2, #32
 800631a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6859      	ldr	r1, [r3, #4]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	4b0c      	ldr	r3, [pc, #48]	@ (8006358 <HAL_I2C_Master_Transmit+0x22c>)
 8006328:	400b      	ands	r3, r1
 800632a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2220      	movs	r2, #32
 8006330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006344:	2300      	movs	r3, #0
 8006346:	e000      	b.n	800634a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8006348:	2302      	movs	r3, #2
  }
}
 800634a:	4618      	mov	r0, r3
 800634c:	3718      	adds	r7, #24
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	80002000 	.word	0x80002000
 8006358:	fe00e800 	.word	0xfe00e800

0800635c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	f003 0302 	and.w	r3, r3, #2
 800636e:	2b02      	cmp	r3, #2
 8006370:	d103      	bne.n	800637a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2200      	movs	r2, #0
 8006378:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	f003 0301 	and.w	r3, r3, #1
 8006384:	2b01      	cmp	r3, #1
 8006386:	d007      	beq.n	8006398 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	699a      	ldr	r2, [r3, #24]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f042 0201 	orr.w	r2, r2, #1
 8006396:	619a      	str	r2, [r3, #24]
  }
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	603b      	str	r3, [r7, #0]
 80063b0:	4613      	mov	r3, r2
 80063b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063b4:	e03b      	b.n	800642e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	6839      	ldr	r1, [r7, #0]
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f000 f8d6 	bl	800656c <I2C_IsErrorOccurred>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e041      	b.n	800644e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d0:	d02d      	beq.n	800642e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063d2:	f7fb fd5f 	bl	8001e94 <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	683a      	ldr	r2, [r7, #0]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d302      	bcc.n	80063e8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d122      	bne.n	800642e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	699a      	ldr	r2, [r3, #24]
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	4013      	ands	r3, r2
 80063f2:	68ba      	ldr	r2, [r7, #8]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	bf0c      	ite	eq
 80063f8:	2301      	moveq	r3, #1
 80063fa:	2300      	movne	r3, #0
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	461a      	mov	r2, r3
 8006400:	79fb      	ldrb	r3, [r7, #7]
 8006402:	429a      	cmp	r2, r3
 8006404:	d113      	bne.n	800642e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800640a:	f043 0220 	orr.w	r2, r3, #32
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2220      	movs	r2, #32
 8006416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e00f      	b.n	800644e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	699a      	ldr	r2, [r3, #24]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	4013      	ands	r3, r2
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	429a      	cmp	r2, r3
 800643c:	bf0c      	ite	eq
 800643e:	2301      	moveq	r3, #1
 8006440:	2300      	movne	r3, #0
 8006442:	b2db      	uxtb	r3, r3
 8006444:	461a      	mov	r2, r3
 8006446:	79fb      	ldrb	r3, [r7, #7]
 8006448:	429a      	cmp	r2, r3
 800644a:	d0b4      	beq.n	80063b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b084      	sub	sp, #16
 800645a:	af00      	add	r7, sp, #0
 800645c:	60f8      	str	r0, [r7, #12]
 800645e:	60b9      	str	r1, [r7, #8]
 8006460:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006462:	e033      	b.n	80064cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	68b9      	ldr	r1, [r7, #8]
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f000 f87f 	bl	800656c <I2C_IsErrorOccurred>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d001      	beq.n	8006478 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e031      	b.n	80064dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647e:	d025      	beq.n	80064cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006480:	f7fb fd08 	bl	8001e94 <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	429a      	cmp	r2, r3
 800648e:	d302      	bcc.n	8006496 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d11a      	bne.n	80064cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	f003 0302 	and.w	r3, r3, #2
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d013      	beq.n	80064cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064a8:	f043 0220 	orr.w	r2, r3, #32
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2220      	movs	r2, #32
 80064b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e007      	b.n	80064dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	f003 0302 	and.w	r3, r3, #2
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d1c4      	bne.n	8006464 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3710      	adds	r7, #16
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064f0:	e02f      	b.n	8006552 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	68b9      	ldr	r1, [r7, #8]
 80064f6:	68f8      	ldr	r0, [r7, #12]
 80064f8:	f000 f838 	bl	800656c <I2C_IsErrorOccurred>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d001      	beq.n	8006506 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e02d      	b.n	8006562 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006506:	f7fb fcc5 	bl	8001e94 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	429a      	cmp	r2, r3
 8006514:	d302      	bcc.n	800651c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d11a      	bne.n	8006552 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	f003 0320 	and.w	r3, r3, #32
 8006526:	2b20      	cmp	r3, #32
 8006528:	d013      	beq.n	8006552 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800652e:	f043 0220 	orr.w	r2, r3, #32
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2220      	movs	r2, #32
 800653a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e007      	b.n	8006562 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	f003 0320 	and.w	r3, r3, #32
 800655c:	2b20      	cmp	r3, #32
 800655e:	d1c8      	bne.n	80064f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
	...

0800656c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b08a      	sub	sp, #40	@ 0x28
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006578:	2300      	movs	r3, #0
 800657a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006586:	2300      	movs	r3, #0
 8006588:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	f003 0310 	and.w	r3, r3, #16
 8006594:	2b00      	cmp	r3, #0
 8006596:	d068      	beq.n	800666a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2210      	movs	r2, #16
 800659e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80065a0:	e049      	b.n	8006636 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a8:	d045      	beq.n	8006636 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80065aa:	f7fb fc73 	bl	8001e94 <HAL_GetTick>
 80065ae:	4602      	mov	r2, r0
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d302      	bcc.n	80065c0 <I2C_IsErrorOccurred+0x54>
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d13a      	bne.n	8006636 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80065d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80065de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065e2:	d121      	bne.n	8006628 <I2C_IsErrorOccurred+0xbc>
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065ea:	d01d      	beq.n	8006628 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80065ec:	7cfb      	ldrb	r3, [r7, #19]
 80065ee:	2b20      	cmp	r3, #32
 80065f0:	d01a      	beq.n	8006628 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006600:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006602:	f7fb fc47 	bl	8001e94 <HAL_GetTick>
 8006606:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006608:	e00e      	b.n	8006628 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800660a:	f7fb fc43 	bl	8001e94 <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	2b19      	cmp	r3, #25
 8006616:	d907      	bls.n	8006628 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006618:	6a3b      	ldr	r3, [r7, #32]
 800661a:	f043 0320 	orr.w	r3, r3, #32
 800661e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006626:	e006      	b.n	8006636 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	f003 0320 	and.w	r3, r3, #32
 8006632:	2b20      	cmp	r3, #32
 8006634:	d1e9      	bne.n	800660a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	f003 0320 	and.w	r3, r3, #32
 8006640:	2b20      	cmp	r3, #32
 8006642:	d003      	beq.n	800664c <I2C_IsErrorOccurred+0xe0>
 8006644:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006648:	2b00      	cmp	r3, #0
 800664a:	d0aa      	beq.n	80065a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800664c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006650:	2b00      	cmp	r3, #0
 8006652:	d103      	bne.n	800665c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2220      	movs	r2, #32
 800665a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	f043 0304 	orr.w	r3, r3, #4
 8006662:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00b      	beq.n	8006694 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800667c:	6a3b      	ldr	r3, [r7, #32]
 800667e:	f043 0301 	orr.w	r3, r3, #1
 8006682:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800668c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00b      	beq.n	80066b6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800669e:	6a3b      	ldr	r3, [r7, #32]
 80066a0:	f043 0308 	orr.w	r3, r3, #8
 80066a4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80066ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00b      	beq.n	80066d8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	f043 0302 	orr.w	r3, r3, #2
 80066c6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80066d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d01c      	beq.n	800671a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f7ff fe3b 	bl	800635c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	6859      	ldr	r1, [r3, #4]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	4b0d      	ldr	r3, [pc, #52]	@ (8006728 <I2C_IsErrorOccurred+0x1bc>)
 80066f2:	400b      	ands	r3, r1
 80066f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066fa:	6a3b      	ldr	r3, [r7, #32]
 80066fc:	431a      	orrs	r2, r3
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2220      	movs	r2, #32
 8006706:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800671a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800671e:	4618      	mov	r0, r3
 8006720:	3728      	adds	r7, #40	@ 0x28
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	fe00e800 	.word	0xfe00e800

0800672c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800672c:	b480      	push	{r7}
 800672e:	b087      	sub	sp, #28
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	607b      	str	r3, [r7, #4]
 8006736:	460b      	mov	r3, r1
 8006738:	817b      	strh	r3, [r7, #10]
 800673a:	4613      	mov	r3, r2
 800673c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800673e:	897b      	ldrh	r3, [r7, #10]
 8006740:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006744:	7a7b      	ldrb	r3, [r7, #9]
 8006746:	041b      	lsls	r3, r3, #16
 8006748:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800674c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006752:	6a3b      	ldr	r3, [r7, #32]
 8006754:	4313      	orrs	r3, r2
 8006756:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800675a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	685a      	ldr	r2, [r3, #4]
 8006762:	6a3b      	ldr	r3, [r7, #32]
 8006764:	0d5b      	lsrs	r3, r3, #21
 8006766:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800676a:	4b08      	ldr	r3, [pc, #32]	@ (800678c <I2C_TransferConfig+0x60>)
 800676c:	430b      	orrs	r3, r1
 800676e:	43db      	mvns	r3, r3
 8006770:	ea02 0103 	and.w	r1, r2, r3
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	430a      	orrs	r2, r1
 800677c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800677e:	bf00      	nop
 8006780:	371c      	adds	r7, #28
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	03ff63ff 	.word	0x03ff63ff

08006790 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b20      	cmp	r3, #32
 80067a4:	d138      	bne.n	8006818 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d101      	bne.n	80067b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80067b0:	2302      	movs	r3, #2
 80067b2:	e032      	b.n	800681a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2224      	movs	r2, #36	@ 0x24
 80067c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f022 0201 	bic.w	r2, r2, #1
 80067d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80067e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6819      	ldr	r1, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	430a      	orrs	r2, r1
 80067f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f042 0201 	orr.w	r2, r2, #1
 8006802:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2220      	movs	r2, #32
 8006808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006814:	2300      	movs	r3, #0
 8006816:	e000      	b.n	800681a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006818:	2302      	movs	r3, #2
  }
}
 800681a:	4618      	mov	r0, r3
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006826:	b480      	push	{r7}
 8006828:	b085      	sub	sp, #20
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b20      	cmp	r3, #32
 800683a:	d139      	bne.n	80068b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006842:	2b01      	cmp	r3, #1
 8006844:	d101      	bne.n	800684a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006846:	2302      	movs	r3, #2
 8006848:	e033      	b.n	80068b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2224      	movs	r2, #36	@ 0x24
 8006856:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f022 0201 	bic.w	r2, r2, #1
 8006868:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006878:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	021b      	lsls	r3, r3, #8
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	4313      	orrs	r3, r2
 8006882:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f042 0201 	orr.w	r2, r2, #1
 800689a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2220      	movs	r2, #32
 80068a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80068ac:	2300      	movs	r3, #0
 80068ae:	e000      	b.n	80068b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80068b0:	2302      	movs	r3, #2
  }
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3714      	adds	r7, #20
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
	...

080068c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80068c8:	4b29      	ldr	r3, [pc, #164]	@ (8006970 <HAL_PWREx_ConfigSupply+0xb0>)
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	f003 0307 	and.w	r3, r3, #7
 80068d0:	2b06      	cmp	r3, #6
 80068d2:	d00a      	beq.n	80068ea <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80068d4:	4b26      	ldr	r3, [pc, #152]	@ (8006970 <HAL_PWREx_ConfigSupply+0xb0>)
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d001      	beq.n	80068e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e040      	b.n	8006968 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	e03e      	b.n	8006968 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80068ea:	4b21      	ldr	r3, [pc, #132]	@ (8006970 <HAL_PWREx_ConfigSupply+0xb0>)
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80068f2:	491f      	ldr	r1, [pc, #124]	@ (8006970 <HAL_PWREx_ConfigSupply+0xb0>)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80068fa:	f7fb facb 	bl	8001e94 <HAL_GetTick>
 80068fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006900:	e009      	b.n	8006916 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006902:	f7fb fac7 	bl	8001e94 <HAL_GetTick>
 8006906:	4602      	mov	r2, r0
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006910:	d901      	bls.n	8006916 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e028      	b.n	8006968 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006916:	4b16      	ldr	r3, [pc, #88]	@ (8006970 <HAL_PWREx_ConfigSupply+0xb0>)
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800691e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006922:	d1ee      	bne.n	8006902 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2b1e      	cmp	r3, #30
 8006928:	d008      	beq.n	800693c <HAL_PWREx_ConfigSupply+0x7c>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b2e      	cmp	r3, #46	@ 0x2e
 800692e:	d005      	beq.n	800693c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b1d      	cmp	r3, #29
 8006934:	d002      	beq.n	800693c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2b2d      	cmp	r3, #45	@ 0x2d
 800693a:	d114      	bne.n	8006966 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800693c:	f7fb faaa 	bl	8001e94 <HAL_GetTick>
 8006940:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006942:	e009      	b.n	8006958 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006944:	f7fb faa6 	bl	8001e94 <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006952:	d901      	bls.n	8006958 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e007      	b.n	8006968 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006958:	4b05      	ldr	r3, [pc, #20]	@ (8006970 <HAL_PWREx_ConfigSupply+0xb0>)
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006960:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006964:	d1ee      	bne.n	8006944 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	58024800 	.word	0x58024800

08006974 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b08c      	sub	sp, #48	@ 0x30
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d102      	bne.n	8006988 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	f000 bc48 	b.w	8007218 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0301 	and.w	r3, r3, #1
 8006990:	2b00      	cmp	r3, #0
 8006992:	f000 8088 	beq.w	8006aa6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006996:	4b99      	ldr	r3, [pc, #612]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800699e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80069a0:	4b96      	ldr	r3, [pc, #600]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 80069a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80069a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069a8:	2b10      	cmp	r3, #16
 80069aa:	d007      	beq.n	80069bc <HAL_RCC_OscConfig+0x48>
 80069ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ae:	2b18      	cmp	r3, #24
 80069b0:	d111      	bne.n	80069d6 <HAL_RCC_OscConfig+0x62>
 80069b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b4:	f003 0303 	and.w	r3, r3, #3
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d10c      	bne.n	80069d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069bc:	4b8f      	ldr	r3, [pc, #572]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d06d      	beq.n	8006aa4 <HAL_RCC_OscConfig+0x130>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d169      	bne.n	8006aa4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	f000 bc21 	b.w	8007218 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069de:	d106      	bne.n	80069ee <HAL_RCC_OscConfig+0x7a>
 80069e0:	4b86      	ldr	r3, [pc, #536]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a85      	ldr	r2, [pc, #532]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 80069e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069ea:	6013      	str	r3, [r2, #0]
 80069ec:	e02e      	b.n	8006a4c <HAL_RCC_OscConfig+0xd8>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10c      	bne.n	8006a10 <HAL_RCC_OscConfig+0x9c>
 80069f6:	4b81      	ldr	r3, [pc, #516]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a80      	ldr	r2, [pc, #512]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 80069fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a00:	6013      	str	r3, [r2, #0]
 8006a02:	4b7e      	ldr	r3, [pc, #504]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a7d      	ldr	r2, [pc, #500]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 8006a08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a0c:	6013      	str	r3, [r2, #0]
 8006a0e:	e01d      	b.n	8006a4c <HAL_RCC_OscConfig+0xd8>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a18:	d10c      	bne.n	8006a34 <HAL_RCC_OscConfig+0xc0>
 8006a1a:	4b78      	ldr	r3, [pc, #480]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a77      	ldr	r2, [pc, #476]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 8006a20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a24:	6013      	str	r3, [r2, #0]
 8006a26:	4b75      	ldr	r3, [pc, #468]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a74      	ldr	r2, [pc, #464]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 8006a2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a30:	6013      	str	r3, [r2, #0]
 8006a32:	e00b      	b.n	8006a4c <HAL_RCC_OscConfig+0xd8>
 8006a34:	4b71      	ldr	r3, [pc, #452]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a70      	ldr	r2, [pc, #448]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 8006a3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a3e:	6013      	str	r3, [r2, #0]
 8006a40:	4b6e      	ldr	r3, [pc, #440]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a6d      	ldr	r2, [pc, #436]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 8006a46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d013      	beq.n	8006a7c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a54:	f7fb fa1e 	bl	8001e94 <HAL_GetTick>
 8006a58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a5a:	e008      	b.n	8006a6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a5c:	f7fb fa1a 	bl	8001e94 <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	2b64      	cmp	r3, #100	@ 0x64
 8006a68:	d901      	bls.n	8006a6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e3d4      	b.n	8007218 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a6e:	4b63      	ldr	r3, [pc, #396]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d0f0      	beq.n	8006a5c <HAL_RCC_OscConfig+0xe8>
 8006a7a:	e014      	b.n	8006aa6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a7c:	f7fb fa0a 	bl	8001e94 <HAL_GetTick>
 8006a80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006a82:	e008      	b.n	8006a96 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a84:	f7fb fa06 	bl	8001e94 <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	2b64      	cmp	r3, #100	@ 0x64
 8006a90:	d901      	bls.n	8006a96 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e3c0      	b.n	8007218 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006a96:	4b59      	ldr	r3, [pc, #356]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1f0      	bne.n	8006a84 <HAL_RCC_OscConfig+0x110>
 8006aa2:	e000      	b.n	8006aa6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 0302 	and.w	r3, r3, #2
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 80ca 	beq.w	8006c48 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ab4:	4b51      	ldr	r3, [pc, #324]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006abc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006abe:	4b4f      	ldr	r3, [pc, #316]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 8006ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006ac4:	6a3b      	ldr	r3, [r7, #32]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d007      	beq.n	8006ada <HAL_RCC_OscConfig+0x166>
 8006aca:	6a3b      	ldr	r3, [r7, #32]
 8006acc:	2b18      	cmp	r3, #24
 8006ace:	d156      	bne.n	8006b7e <HAL_RCC_OscConfig+0x20a>
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	f003 0303 	and.w	r3, r3, #3
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d151      	bne.n	8006b7e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ada:	4b48      	ldr	r3, [pc, #288]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0304 	and.w	r3, r3, #4
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d005      	beq.n	8006af2 <HAL_RCC_OscConfig+0x17e>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e392      	b.n	8007218 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006af2:	4b42      	ldr	r3, [pc, #264]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f023 0219 	bic.w	r2, r3, #25
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	493f      	ldr	r1, [pc, #252]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 8006b00:	4313      	orrs	r3, r2
 8006b02:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b04:	f7fb f9c6 	bl	8001e94 <HAL_GetTick>
 8006b08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b0a:	e008      	b.n	8006b1e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b0c:	f7fb f9c2 	bl	8001e94 <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d901      	bls.n	8006b1e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e37c      	b.n	8007218 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b1e:	4b37      	ldr	r3, [pc, #220]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0304 	and.w	r3, r3, #4
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d0f0      	beq.n	8006b0c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b2a:	f7fb f9e3 	bl	8001ef4 <HAL_GetREVID>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d817      	bhi.n	8006b68 <HAL_RCC_OscConfig+0x1f4>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	2b40      	cmp	r3, #64	@ 0x40
 8006b3e:	d108      	bne.n	8006b52 <HAL_RCC_OscConfig+0x1de>
 8006b40:	4b2e      	ldr	r3, [pc, #184]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006b48:	4a2c      	ldr	r2, [pc, #176]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 8006b4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b4e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b50:	e07a      	b.n	8006c48 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b52:	4b2a      	ldr	r3, [pc, #168]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	031b      	lsls	r3, r3, #12
 8006b60:	4926      	ldr	r1, [pc, #152]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b66:	e06f      	b.n	8006c48 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b68:	4b24      	ldr	r3, [pc, #144]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	061b      	lsls	r3, r3, #24
 8006b76:	4921      	ldr	r1, [pc, #132]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b7c:	e064      	b.n	8006c48 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d047      	beq.n	8006c16 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006b86:	4b1d      	ldr	r3, [pc, #116]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f023 0219 	bic.w	r2, r3, #25
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	491a      	ldr	r1, [pc, #104]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 8006b94:	4313      	orrs	r3, r2
 8006b96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b98:	f7fb f97c 	bl	8001e94 <HAL_GetTick>
 8006b9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b9e:	e008      	b.n	8006bb2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ba0:	f7fb f978 	bl	8001e94 <HAL_GetTick>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d901      	bls.n	8006bb2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e332      	b.n	8007218 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bb2:	4b12      	ldr	r3, [pc, #72]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 0304 	and.w	r3, r3, #4
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d0f0      	beq.n	8006ba0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bbe:	f7fb f999 	bl	8001ef4 <HAL_GetREVID>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d819      	bhi.n	8006c00 <HAL_RCC_OscConfig+0x28c>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	2b40      	cmp	r3, #64	@ 0x40
 8006bd2:	d108      	bne.n	8006be6 <HAL_RCC_OscConfig+0x272>
 8006bd4:	4b09      	ldr	r3, [pc, #36]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006bdc:	4a07      	ldr	r2, [pc, #28]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 8006bde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006be2:	6053      	str	r3, [r2, #4]
 8006be4:	e030      	b.n	8006c48 <HAL_RCC_OscConfig+0x2d4>
 8006be6:	4b05      	ldr	r3, [pc, #20]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	031b      	lsls	r3, r3, #12
 8006bf4:	4901      	ldr	r1, [pc, #4]	@ (8006bfc <HAL_RCC_OscConfig+0x288>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	604b      	str	r3, [r1, #4]
 8006bfa:	e025      	b.n	8006c48 <HAL_RCC_OscConfig+0x2d4>
 8006bfc:	58024400 	.word	0x58024400
 8006c00:	4b9a      	ldr	r3, [pc, #616]	@ (8006e6c <HAL_RCC_OscConfig+0x4f8>)
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	061b      	lsls	r3, r3, #24
 8006c0e:	4997      	ldr	r1, [pc, #604]	@ (8006e6c <HAL_RCC_OscConfig+0x4f8>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	604b      	str	r3, [r1, #4]
 8006c14:	e018      	b.n	8006c48 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c16:	4b95      	ldr	r3, [pc, #596]	@ (8006e6c <HAL_RCC_OscConfig+0x4f8>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a94      	ldr	r2, [pc, #592]	@ (8006e6c <HAL_RCC_OscConfig+0x4f8>)
 8006c1c:	f023 0301 	bic.w	r3, r3, #1
 8006c20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c22:	f7fb f937 	bl	8001e94 <HAL_GetTick>
 8006c26:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006c28:	e008      	b.n	8006c3c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c2a:	f7fb f933 	bl	8001e94 <HAL_GetTick>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d901      	bls.n	8006c3c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e2ed      	b.n	8007218 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006c3c:	4b8b      	ldr	r3, [pc, #556]	@ (8006e6c <HAL_RCC_OscConfig+0x4f8>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0304 	and.w	r3, r3, #4
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1f0      	bne.n	8006c2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 0310 	and.w	r3, r3, #16
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 80a9 	beq.w	8006da8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c56:	4b85      	ldr	r3, [pc, #532]	@ (8006e6c <HAL_RCC_OscConfig+0x4f8>)
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c5e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006c60:	4b82      	ldr	r3, [pc, #520]	@ (8006e6c <HAL_RCC_OscConfig+0x4f8>)
 8006c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c64:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	2b08      	cmp	r3, #8
 8006c6a:	d007      	beq.n	8006c7c <HAL_RCC_OscConfig+0x308>
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	2b18      	cmp	r3, #24
 8006c70:	d13a      	bne.n	8006ce8 <HAL_RCC_OscConfig+0x374>
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	f003 0303 	and.w	r3, r3, #3
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d135      	bne.n	8006ce8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c7c:	4b7b      	ldr	r3, [pc, #492]	@ (8006e6c <HAL_RCC_OscConfig+0x4f8>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d005      	beq.n	8006c94 <HAL_RCC_OscConfig+0x320>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	69db      	ldr	r3, [r3, #28]
 8006c8c:	2b80      	cmp	r3, #128	@ 0x80
 8006c8e:	d001      	beq.n	8006c94 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e2c1      	b.n	8007218 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c94:	f7fb f92e 	bl	8001ef4 <HAL_GetREVID>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d817      	bhi.n	8006cd2 <HAL_RCC_OscConfig+0x35e>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	2b20      	cmp	r3, #32
 8006ca8:	d108      	bne.n	8006cbc <HAL_RCC_OscConfig+0x348>
 8006caa:	4b70      	ldr	r3, [pc, #448]	@ (8006e6c <HAL_RCC_OscConfig+0x4f8>)
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006cb2:	4a6e      	ldr	r2, [pc, #440]	@ (8006e6c <HAL_RCC_OscConfig+0x4f8>)
 8006cb4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006cb8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006cba:	e075      	b.n	8006da8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006cbc:	4b6b      	ldr	r3, [pc, #428]	@ (8006e6c <HAL_RCC_OscConfig+0x4f8>)
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a1b      	ldr	r3, [r3, #32]
 8006cc8:	069b      	lsls	r3, r3, #26
 8006cca:	4968      	ldr	r1, [pc, #416]	@ (8006e6c <HAL_RCC_OscConfig+0x4f8>)
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006cd0:	e06a      	b.n	8006da8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006cd2:	4b66      	ldr	r3, [pc, #408]	@ (8006e6c <HAL_RCC_OscConfig+0x4f8>)
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a1b      	ldr	r3, [r3, #32]
 8006cde:	061b      	lsls	r3, r3, #24
 8006ce0:	4962      	ldr	r1, [pc, #392]	@ (8006e6c <HAL_RCC_OscConfig+0x4f8>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006ce6:	e05f      	b.n	8006da8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	69db      	ldr	r3, [r3, #28]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d042      	beq.n	8006d76 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006cf0:	4b5e      	ldr	r3, [pc, #376]	@ (8006e6c <HAL_RCC_OscConfig+0x4f8>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a5d      	ldr	r2, [pc, #372]	@ (8006e6c <HAL_RCC_OscConfig+0x4f8>)
 8006cf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cfc:	f7fb f8ca 	bl	8001e94 <HAL_GetTick>
 8006d00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d02:	e008      	b.n	8006d16 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006d04:	f7fb f8c6 	bl	8001e94 <HAL_GetTick>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d901      	bls.n	8006d16 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e280      	b.n	8007218 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d16:	4b55      	ldr	r3, [pc, #340]	@ (8006e6c <HAL_RCC_OscConfig+0x4f8>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d0f0      	beq.n	8006d04 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d22:	f7fb f8e7 	bl	8001ef4 <HAL_GetREVID>
 8006d26:	4603      	mov	r3, r0
 8006d28:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d817      	bhi.n	8006d60 <HAL_RCC_OscConfig+0x3ec>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a1b      	ldr	r3, [r3, #32]
 8006d34:	2b20      	cmp	r3, #32
 8006d36:	d108      	bne.n	8006d4a <HAL_RCC_OscConfig+0x3d6>
 8006d38:	4b4c      	ldr	r3, [pc, #304]	@ (8006e6c <HAL_RCC_OscConfig+0x4f8>)
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006d40:	4a4a      	ldr	r2, [pc, #296]	@ (8006e6c <HAL_RCC_OscConfig+0x4f8>)
 8006d42:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d46:	6053      	str	r3, [r2, #4]
 8006d48:	e02e      	b.n	8006da8 <HAL_RCC_OscConfig+0x434>
 8006d4a:	4b48      	ldr	r3, [pc, #288]	@ (8006e6c <HAL_RCC_OscConfig+0x4f8>)
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	069b      	lsls	r3, r3, #26
 8006d58:	4944      	ldr	r1, [pc, #272]	@ (8006e6c <HAL_RCC_OscConfig+0x4f8>)
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	604b      	str	r3, [r1, #4]
 8006d5e:	e023      	b.n	8006da8 <HAL_RCC_OscConfig+0x434>
 8006d60:	4b42      	ldr	r3, [pc, #264]	@ (8006e6c <HAL_RCC_OscConfig+0x4f8>)
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
 8006d6c:	061b      	lsls	r3, r3, #24
 8006d6e:	493f      	ldr	r1, [pc, #252]	@ (8006e6c <HAL_RCC_OscConfig+0x4f8>)
 8006d70:	4313      	orrs	r3, r2
 8006d72:	60cb      	str	r3, [r1, #12]
 8006d74:	e018      	b.n	8006da8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006d76:	4b3d      	ldr	r3, [pc, #244]	@ (8006e6c <HAL_RCC_OscConfig+0x4f8>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a3c      	ldr	r2, [pc, #240]	@ (8006e6c <HAL_RCC_OscConfig+0x4f8>)
 8006d7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d82:	f7fb f887 	bl	8001e94 <HAL_GetTick>
 8006d86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006d88:	e008      	b.n	8006d9c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006d8a:	f7fb f883 	bl	8001e94 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d901      	bls.n	8006d9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e23d      	b.n	8007218 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006d9c:	4b33      	ldr	r3, [pc, #204]	@ (8006e6c <HAL_RCC_OscConfig+0x4f8>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d1f0      	bne.n	8006d8a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0308 	and.w	r3, r3, #8
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d036      	beq.n	8006e22 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	695b      	ldr	r3, [r3, #20]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d019      	beq.n	8006df0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006dbc:	4b2b      	ldr	r3, [pc, #172]	@ (8006e6c <HAL_RCC_OscConfig+0x4f8>)
 8006dbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dc0:	4a2a      	ldr	r2, [pc, #168]	@ (8006e6c <HAL_RCC_OscConfig+0x4f8>)
 8006dc2:	f043 0301 	orr.w	r3, r3, #1
 8006dc6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dc8:	f7fb f864 	bl	8001e94 <HAL_GetTick>
 8006dcc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006dce:	e008      	b.n	8006de2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006dd0:	f7fb f860 	bl	8001e94 <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d901      	bls.n	8006de2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e21a      	b.n	8007218 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006de2:	4b22      	ldr	r3, [pc, #136]	@ (8006e6c <HAL_RCC_OscConfig+0x4f8>)
 8006de4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006de6:	f003 0302 	and.w	r3, r3, #2
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d0f0      	beq.n	8006dd0 <HAL_RCC_OscConfig+0x45c>
 8006dee:	e018      	b.n	8006e22 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006df0:	4b1e      	ldr	r3, [pc, #120]	@ (8006e6c <HAL_RCC_OscConfig+0x4f8>)
 8006df2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006df4:	4a1d      	ldr	r2, [pc, #116]	@ (8006e6c <HAL_RCC_OscConfig+0x4f8>)
 8006df6:	f023 0301 	bic.w	r3, r3, #1
 8006dfa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dfc:	f7fb f84a 	bl	8001e94 <HAL_GetTick>
 8006e00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006e02:	e008      	b.n	8006e16 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e04:	f7fb f846 	bl	8001e94 <HAL_GetTick>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	d901      	bls.n	8006e16 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006e12:	2303      	movs	r3, #3
 8006e14:	e200      	b.n	8007218 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006e16:	4b15      	ldr	r3, [pc, #84]	@ (8006e6c <HAL_RCC_OscConfig+0x4f8>)
 8006e18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e1a:	f003 0302 	and.w	r3, r3, #2
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1f0      	bne.n	8006e04 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 0320 	and.w	r3, r3, #32
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d039      	beq.n	8006ea2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d01c      	beq.n	8006e70 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006e36:	4b0d      	ldr	r3, [pc, #52]	@ (8006e6c <HAL_RCC_OscConfig+0x4f8>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a0c      	ldr	r2, [pc, #48]	@ (8006e6c <HAL_RCC_OscConfig+0x4f8>)
 8006e3c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006e40:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006e42:	f7fb f827 	bl	8001e94 <HAL_GetTick>
 8006e46:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006e48:	e008      	b.n	8006e5c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e4a:	f7fb f823 	bl	8001e94 <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d901      	bls.n	8006e5c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e1dd      	b.n	8007218 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006e5c:	4b03      	ldr	r3, [pc, #12]	@ (8006e6c <HAL_RCC_OscConfig+0x4f8>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d0f0      	beq.n	8006e4a <HAL_RCC_OscConfig+0x4d6>
 8006e68:	e01b      	b.n	8006ea2 <HAL_RCC_OscConfig+0x52e>
 8006e6a:	bf00      	nop
 8006e6c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006e70:	4b9b      	ldr	r3, [pc, #620]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a9a      	ldr	r2, [pc, #616]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 8006e76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e7a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006e7c:	f7fb f80a 	bl	8001e94 <HAL_GetTick>
 8006e80:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006e82:	e008      	b.n	8006e96 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e84:	f7fb f806 	bl	8001e94 <HAL_GetTick>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d901      	bls.n	8006e96 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006e92:	2303      	movs	r3, #3
 8006e94:	e1c0      	b.n	8007218 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006e96:	4b92      	ldr	r3, [pc, #584]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1f0      	bne.n	8006e84 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0304 	and.w	r3, r3, #4
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	f000 8081 	beq.w	8006fb2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006eb0:	4b8c      	ldr	r3, [pc, #560]	@ (80070e4 <HAL_RCC_OscConfig+0x770>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a8b      	ldr	r2, [pc, #556]	@ (80070e4 <HAL_RCC_OscConfig+0x770>)
 8006eb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006eba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ebc:	f7fa ffea 	bl	8001e94 <HAL_GetTick>
 8006ec0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ec2:	e008      	b.n	8006ed6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ec4:	f7fa ffe6 	bl	8001e94 <HAL_GetTick>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	2b64      	cmp	r3, #100	@ 0x64
 8006ed0:	d901      	bls.n	8006ed6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e1a0      	b.n	8007218 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ed6:	4b83      	ldr	r3, [pc, #524]	@ (80070e4 <HAL_RCC_OscConfig+0x770>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d0f0      	beq.n	8006ec4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d106      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x584>
 8006eea:	4b7d      	ldr	r3, [pc, #500]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 8006eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eee:	4a7c      	ldr	r2, [pc, #496]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 8006ef0:	f043 0301 	orr.w	r3, r3, #1
 8006ef4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ef6:	e02d      	b.n	8006f54 <HAL_RCC_OscConfig+0x5e0>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10c      	bne.n	8006f1a <HAL_RCC_OscConfig+0x5a6>
 8006f00:	4b77      	ldr	r3, [pc, #476]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 8006f02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f04:	4a76      	ldr	r2, [pc, #472]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 8006f06:	f023 0301 	bic.w	r3, r3, #1
 8006f0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f0c:	4b74      	ldr	r3, [pc, #464]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 8006f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f10:	4a73      	ldr	r2, [pc, #460]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 8006f12:	f023 0304 	bic.w	r3, r3, #4
 8006f16:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f18:	e01c      	b.n	8006f54 <HAL_RCC_OscConfig+0x5e0>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	2b05      	cmp	r3, #5
 8006f20:	d10c      	bne.n	8006f3c <HAL_RCC_OscConfig+0x5c8>
 8006f22:	4b6f      	ldr	r3, [pc, #444]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 8006f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f26:	4a6e      	ldr	r2, [pc, #440]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 8006f28:	f043 0304 	orr.w	r3, r3, #4
 8006f2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f2e:	4b6c      	ldr	r3, [pc, #432]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 8006f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f32:	4a6b      	ldr	r2, [pc, #428]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 8006f34:	f043 0301 	orr.w	r3, r3, #1
 8006f38:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f3a:	e00b      	b.n	8006f54 <HAL_RCC_OscConfig+0x5e0>
 8006f3c:	4b68      	ldr	r3, [pc, #416]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 8006f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f40:	4a67      	ldr	r2, [pc, #412]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 8006f42:	f023 0301 	bic.w	r3, r3, #1
 8006f46:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f48:	4b65      	ldr	r3, [pc, #404]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 8006f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f4c:	4a64      	ldr	r2, [pc, #400]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 8006f4e:	f023 0304 	bic.w	r3, r3, #4
 8006f52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d015      	beq.n	8006f88 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f5c:	f7fa ff9a 	bl	8001e94 <HAL_GetTick>
 8006f60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f62:	e00a      	b.n	8006f7a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f64:	f7fa ff96 	bl	8001e94 <HAL_GetTick>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d901      	bls.n	8006f7a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e14e      	b.n	8007218 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f7a:	4b59      	ldr	r3, [pc, #356]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 8006f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f7e:	f003 0302 	and.w	r3, r3, #2
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d0ee      	beq.n	8006f64 <HAL_RCC_OscConfig+0x5f0>
 8006f86:	e014      	b.n	8006fb2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f88:	f7fa ff84 	bl	8001e94 <HAL_GetTick>
 8006f8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006f8e:	e00a      	b.n	8006fa6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f90:	f7fa ff80 	bl	8001e94 <HAL_GetTick>
 8006f94:	4602      	mov	r2, r0
 8006f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d901      	bls.n	8006fa6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e138      	b.n	8007218 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006fa6:	4b4e      	ldr	r3, [pc, #312]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 8006fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006faa:	f003 0302 	and.w	r3, r3, #2
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1ee      	bne.n	8006f90 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f000 812d 	beq.w	8007216 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006fbc:	4b48      	ldr	r3, [pc, #288]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006fc4:	2b18      	cmp	r3, #24
 8006fc6:	f000 80bd 	beq.w	8007144 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	f040 809e 	bne.w	8007110 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fd4:	4b42      	ldr	r3, [pc, #264]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a41      	ldr	r2, [pc, #260]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 8006fda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006fde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fe0:	f7fa ff58 	bl	8001e94 <HAL_GetTick>
 8006fe4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006fe6:	e008      	b.n	8006ffa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fe8:	f7fa ff54 	bl	8001e94 <HAL_GetTick>
 8006fec:	4602      	mov	r2, r0
 8006fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d901      	bls.n	8006ffa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	e10e      	b.n	8007218 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ffa:	4b39      	ldr	r3, [pc, #228]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1f0      	bne.n	8006fe8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007006:	4b36      	ldr	r3, [pc, #216]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 8007008:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800700a:	4b37      	ldr	r3, [pc, #220]	@ (80070e8 <HAL_RCC_OscConfig+0x774>)
 800700c:	4013      	ands	r3, r2
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007016:	0112      	lsls	r2, r2, #4
 8007018:	430a      	orrs	r2, r1
 800701a:	4931      	ldr	r1, [pc, #196]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 800701c:	4313      	orrs	r3, r2
 800701e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007024:	3b01      	subs	r3, #1
 8007026:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800702e:	3b01      	subs	r3, #1
 8007030:	025b      	lsls	r3, r3, #9
 8007032:	b29b      	uxth	r3, r3
 8007034:	431a      	orrs	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800703a:	3b01      	subs	r3, #1
 800703c:	041b      	lsls	r3, r3, #16
 800703e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007042:	431a      	orrs	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007048:	3b01      	subs	r3, #1
 800704a:	061b      	lsls	r3, r3, #24
 800704c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007050:	4923      	ldr	r1, [pc, #140]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 8007052:	4313      	orrs	r3, r2
 8007054:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007056:	4b22      	ldr	r3, [pc, #136]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 8007058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800705a:	4a21      	ldr	r2, [pc, #132]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 800705c:	f023 0301 	bic.w	r3, r3, #1
 8007060:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007062:	4b1f      	ldr	r3, [pc, #124]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 8007064:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007066:	4b21      	ldr	r3, [pc, #132]	@ (80070ec <HAL_RCC_OscConfig+0x778>)
 8007068:	4013      	ands	r3, r2
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800706e:	00d2      	lsls	r2, r2, #3
 8007070:	491b      	ldr	r1, [pc, #108]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 8007072:	4313      	orrs	r3, r2
 8007074:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007076:	4b1a      	ldr	r3, [pc, #104]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 8007078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800707a:	f023 020c 	bic.w	r2, r3, #12
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007082:	4917      	ldr	r1, [pc, #92]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 8007084:	4313      	orrs	r3, r2
 8007086:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007088:	4b15      	ldr	r3, [pc, #84]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 800708a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800708c:	f023 0202 	bic.w	r2, r3, #2
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007094:	4912      	ldr	r1, [pc, #72]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 8007096:	4313      	orrs	r3, r2
 8007098:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800709a:	4b11      	ldr	r3, [pc, #68]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 800709c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800709e:	4a10      	ldr	r2, [pc, #64]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 80070a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070a6:	4b0e      	ldr	r3, [pc, #56]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 80070a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070aa:	4a0d      	ldr	r2, [pc, #52]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 80070ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80070b2:	4b0b      	ldr	r3, [pc, #44]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 80070b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b6:	4a0a      	ldr	r2, [pc, #40]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 80070b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80070bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80070be:	4b08      	ldr	r3, [pc, #32]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 80070c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070c2:	4a07      	ldr	r2, [pc, #28]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 80070c4:	f043 0301 	orr.w	r3, r3, #1
 80070c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070ca:	4b05      	ldr	r3, [pc, #20]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a04      	ldr	r2, [pc, #16]	@ (80070e0 <HAL_RCC_OscConfig+0x76c>)
 80070d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80070d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070d6:	f7fa fedd 	bl	8001e94 <HAL_GetTick>
 80070da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80070dc:	e011      	b.n	8007102 <HAL_RCC_OscConfig+0x78e>
 80070de:	bf00      	nop
 80070e0:	58024400 	.word	0x58024400
 80070e4:	58024800 	.word	0x58024800
 80070e8:	fffffc0c 	.word	0xfffffc0c
 80070ec:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070f0:	f7fa fed0 	bl	8001e94 <HAL_GetTick>
 80070f4:	4602      	mov	r2, r0
 80070f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d901      	bls.n	8007102 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80070fe:	2303      	movs	r3, #3
 8007100:	e08a      	b.n	8007218 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007102:	4b47      	ldr	r3, [pc, #284]	@ (8007220 <HAL_RCC_OscConfig+0x8ac>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d0f0      	beq.n	80070f0 <HAL_RCC_OscConfig+0x77c>
 800710e:	e082      	b.n	8007216 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007110:	4b43      	ldr	r3, [pc, #268]	@ (8007220 <HAL_RCC_OscConfig+0x8ac>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a42      	ldr	r2, [pc, #264]	@ (8007220 <HAL_RCC_OscConfig+0x8ac>)
 8007116:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800711a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800711c:	f7fa feba 	bl	8001e94 <HAL_GetTick>
 8007120:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007122:	e008      	b.n	8007136 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007124:	f7fa feb6 	bl	8001e94 <HAL_GetTick>
 8007128:	4602      	mov	r2, r0
 800712a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	2b02      	cmp	r3, #2
 8007130:	d901      	bls.n	8007136 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e070      	b.n	8007218 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007136:	4b3a      	ldr	r3, [pc, #232]	@ (8007220 <HAL_RCC_OscConfig+0x8ac>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1f0      	bne.n	8007124 <HAL_RCC_OscConfig+0x7b0>
 8007142:	e068      	b.n	8007216 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007144:	4b36      	ldr	r3, [pc, #216]	@ (8007220 <HAL_RCC_OscConfig+0x8ac>)
 8007146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007148:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800714a:	4b35      	ldr	r3, [pc, #212]	@ (8007220 <HAL_RCC_OscConfig+0x8ac>)
 800714c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800714e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007154:	2b01      	cmp	r3, #1
 8007156:	d031      	beq.n	80071bc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	f003 0203 	and.w	r2, r3, #3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007162:	429a      	cmp	r2, r3
 8007164:	d12a      	bne.n	80071bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	091b      	lsrs	r3, r3, #4
 800716a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007172:	429a      	cmp	r2, r3
 8007174:	d122      	bne.n	80071bc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007180:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007182:	429a      	cmp	r2, r3
 8007184:	d11a      	bne.n	80071bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	0a5b      	lsrs	r3, r3, #9
 800718a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007192:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007194:	429a      	cmp	r2, r3
 8007196:	d111      	bne.n	80071bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	0c1b      	lsrs	r3, r3, #16
 800719c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d108      	bne.n	80071bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	0e1b      	lsrs	r3, r3, #24
 80071ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071b6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d001      	beq.n	80071c0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	e02b      	b.n	8007218 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80071c0:	4b17      	ldr	r3, [pc, #92]	@ (8007220 <HAL_RCC_OscConfig+0x8ac>)
 80071c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071c4:	08db      	lsrs	r3, r3, #3
 80071c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071ca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d01f      	beq.n	8007216 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80071d6:	4b12      	ldr	r3, [pc, #72]	@ (8007220 <HAL_RCC_OscConfig+0x8ac>)
 80071d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071da:	4a11      	ldr	r2, [pc, #68]	@ (8007220 <HAL_RCC_OscConfig+0x8ac>)
 80071dc:	f023 0301 	bic.w	r3, r3, #1
 80071e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80071e2:	f7fa fe57 	bl	8001e94 <HAL_GetTick>
 80071e6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80071e8:	bf00      	nop
 80071ea:	f7fa fe53 	bl	8001e94 <HAL_GetTick>
 80071ee:	4602      	mov	r2, r0
 80071f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d0f9      	beq.n	80071ea <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80071f6:	4b0a      	ldr	r3, [pc, #40]	@ (8007220 <HAL_RCC_OscConfig+0x8ac>)
 80071f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071fa:	4b0a      	ldr	r3, [pc, #40]	@ (8007224 <HAL_RCC_OscConfig+0x8b0>)
 80071fc:	4013      	ands	r3, r2
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007202:	00d2      	lsls	r2, r2, #3
 8007204:	4906      	ldr	r1, [pc, #24]	@ (8007220 <HAL_RCC_OscConfig+0x8ac>)
 8007206:	4313      	orrs	r3, r2
 8007208:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800720a:	4b05      	ldr	r3, [pc, #20]	@ (8007220 <HAL_RCC_OscConfig+0x8ac>)
 800720c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800720e:	4a04      	ldr	r2, [pc, #16]	@ (8007220 <HAL_RCC_OscConfig+0x8ac>)
 8007210:	f043 0301 	orr.w	r3, r3, #1
 8007214:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3730      	adds	r7, #48	@ 0x30
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	58024400 	.word	0x58024400
 8007224:	ffff0007 	.word	0xffff0007

08007228 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b086      	sub	sp, #24
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d101      	bne.n	800723c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	e19c      	b.n	8007576 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800723c:	4b8a      	ldr	r3, [pc, #552]	@ (8007468 <HAL_RCC_ClockConfig+0x240>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 030f 	and.w	r3, r3, #15
 8007244:	683a      	ldr	r2, [r7, #0]
 8007246:	429a      	cmp	r2, r3
 8007248:	d910      	bls.n	800726c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800724a:	4b87      	ldr	r3, [pc, #540]	@ (8007468 <HAL_RCC_ClockConfig+0x240>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f023 020f 	bic.w	r2, r3, #15
 8007252:	4985      	ldr	r1, [pc, #532]	@ (8007468 <HAL_RCC_ClockConfig+0x240>)
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	4313      	orrs	r3, r2
 8007258:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800725a:	4b83      	ldr	r3, [pc, #524]	@ (8007468 <HAL_RCC_ClockConfig+0x240>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 030f 	and.w	r3, r3, #15
 8007262:	683a      	ldr	r2, [r7, #0]
 8007264:	429a      	cmp	r2, r3
 8007266:	d001      	beq.n	800726c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	e184      	b.n	8007576 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 0304 	and.w	r3, r3, #4
 8007274:	2b00      	cmp	r3, #0
 8007276:	d010      	beq.n	800729a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	691a      	ldr	r2, [r3, #16]
 800727c:	4b7b      	ldr	r3, [pc, #492]	@ (800746c <HAL_RCC_ClockConfig+0x244>)
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007284:	429a      	cmp	r2, r3
 8007286:	d908      	bls.n	800729a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007288:	4b78      	ldr	r3, [pc, #480]	@ (800746c <HAL_RCC_ClockConfig+0x244>)
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	4975      	ldr	r1, [pc, #468]	@ (800746c <HAL_RCC_ClockConfig+0x244>)
 8007296:	4313      	orrs	r3, r2
 8007298:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 0308 	and.w	r3, r3, #8
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d010      	beq.n	80072c8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	695a      	ldr	r2, [r3, #20]
 80072aa:	4b70      	ldr	r3, [pc, #448]	@ (800746c <HAL_RCC_ClockConfig+0x244>)
 80072ac:	69db      	ldr	r3, [r3, #28]
 80072ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d908      	bls.n	80072c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80072b6:	4b6d      	ldr	r3, [pc, #436]	@ (800746c <HAL_RCC_ClockConfig+0x244>)
 80072b8:	69db      	ldr	r3, [r3, #28]
 80072ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	695b      	ldr	r3, [r3, #20]
 80072c2:	496a      	ldr	r1, [pc, #424]	@ (800746c <HAL_RCC_ClockConfig+0x244>)
 80072c4:	4313      	orrs	r3, r2
 80072c6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0310 	and.w	r3, r3, #16
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d010      	beq.n	80072f6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	699a      	ldr	r2, [r3, #24]
 80072d8:	4b64      	ldr	r3, [pc, #400]	@ (800746c <HAL_RCC_ClockConfig+0x244>)
 80072da:	69db      	ldr	r3, [r3, #28]
 80072dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d908      	bls.n	80072f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80072e4:	4b61      	ldr	r3, [pc, #388]	@ (800746c <HAL_RCC_ClockConfig+0x244>)
 80072e6:	69db      	ldr	r3, [r3, #28]
 80072e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	495e      	ldr	r1, [pc, #376]	@ (800746c <HAL_RCC_ClockConfig+0x244>)
 80072f2:	4313      	orrs	r3, r2
 80072f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 0320 	and.w	r3, r3, #32
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d010      	beq.n	8007324 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	69da      	ldr	r2, [r3, #28]
 8007306:	4b59      	ldr	r3, [pc, #356]	@ (800746c <HAL_RCC_ClockConfig+0x244>)
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800730e:	429a      	cmp	r2, r3
 8007310:	d908      	bls.n	8007324 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007312:	4b56      	ldr	r3, [pc, #344]	@ (800746c <HAL_RCC_ClockConfig+0x244>)
 8007314:	6a1b      	ldr	r3, [r3, #32]
 8007316:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	69db      	ldr	r3, [r3, #28]
 800731e:	4953      	ldr	r1, [pc, #332]	@ (800746c <HAL_RCC_ClockConfig+0x244>)
 8007320:	4313      	orrs	r3, r2
 8007322:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 0302 	and.w	r3, r3, #2
 800732c:	2b00      	cmp	r3, #0
 800732e:	d010      	beq.n	8007352 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	68da      	ldr	r2, [r3, #12]
 8007334:	4b4d      	ldr	r3, [pc, #308]	@ (800746c <HAL_RCC_ClockConfig+0x244>)
 8007336:	699b      	ldr	r3, [r3, #24]
 8007338:	f003 030f 	and.w	r3, r3, #15
 800733c:	429a      	cmp	r2, r3
 800733e:	d908      	bls.n	8007352 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007340:	4b4a      	ldr	r3, [pc, #296]	@ (800746c <HAL_RCC_ClockConfig+0x244>)
 8007342:	699b      	ldr	r3, [r3, #24]
 8007344:	f023 020f 	bic.w	r2, r3, #15
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	4947      	ldr	r1, [pc, #284]	@ (800746c <HAL_RCC_ClockConfig+0x244>)
 800734e:	4313      	orrs	r3, r2
 8007350:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	2b00      	cmp	r3, #0
 800735c:	d055      	beq.n	800740a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800735e:	4b43      	ldr	r3, [pc, #268]	@ (800746c <HAL_RCC_ClockConfig+0x244>)
 8007360:	699b      	ldr	r3, [r3, #24]
 8007362:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	4940      	ldr	r1, [pc, #256]	@ (800746c <HAL_RCC_ClockConfig+0x244>)
 800736c:	4313      	orrs	r3, r2
 800736e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	2b02      	cmp	r3, #2
 8007376:	d107      	bne.n	8007388 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007378:	4b3c      	ldr	r3, [pc, #240]	@ (800746c <HAL_RCC_ClockConfig+0x244>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007380:	2b00      	cmp	r3, #0
 8007382:	d121      	bne.n	80073c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e0f6      	b.n	8007576 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	2b03      	cmp	r3, #3
 800738e:	d107      	bne.n	80073a0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007390:	4b36      	ldr	r3, [pc, #216]	@ (800746c <HAL_RCC_ClockConfig+0x244>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d115      	bne.n	80073c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	e0ea      	b.n	8007576 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d107      	bne.n	80073b8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80073a8:	4b30      	ldr	r3, [pc, #192]	@ (800746c <HAL_RCC_ClockConfig+0x244>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d109      	bne.n	80073c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e0de      	b.n	8007576 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80073b8:	4b2c      	ldr	r3, [pc, #176]	@ (800746c <HAL_RCC_ClockConfig+0x244>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 0304 	and.w	r3, r3, #4
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d101      	bne.n	80073c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	e0d6      	b.n	8007576 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80073c8:	4b28      	ldr	r3, [pc, #160]	@ (800746c <HAL_RCC_ClockConfig+0x244>)
 80073ca:	691b      	ldr	r3, [r3, #16]
 80073cc:	f023 0207 	bic.w	r2, r3, #7
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	4925      	ldr	r1, [pc, #148]	@ (800746c <HAL_RCC_ClockConfig+0x244>)
 80073d6:	4313      	orrs	r3, r2
 80073d8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073da:	f7fa fd5b 	bl	8001e94 <HAL_GetTick>
 80073de:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073e0:	e00a      	b.n	80073f8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073e2:	f7fa fd57 	bl	8001e94 <HAL_GetTick>
 80073e6:	4602      	mov	r2, r0
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	1ad3      	subs	r3, r2, r3
 80073ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d901      	bls.n	80073f8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80073f4:	2303      	movs	r3, #3
 80073f6:	e0be      	b.n	8007576 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073f8:	4b1c      	ldr	r3, [pc, #112]	@ (800746c <HAL_RCC_ClockConfig+0x244>)
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	00db      	lsls	r3, r3, #3
 8007406:	429a      	cmp	r2, r3
 8007408:	d1eb      	bne.n	80073e2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 0302 	and.w	r3, r3, #2
 8007412:	2b00      	cmp	r3, #0
 8007414:	d010      	beq.n	8007438 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	68da      	ldr	r2, [r3, #12]
 800741a:	4b14      	ldr	r3, [pc, #80]	@ (800746c <HAL_RCC_ClockConfig+0x244>)
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	f003 030f 	and.w	r3, r3, #15
 8007422:	429a      	cmp	r2, r3
 8007424:	d208      	bcs.n	8007438 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007426:	4b11      	ldr	r3, [pc, #68]	@ (800746c <HAL_RCC_ClockConfig+0x244>)
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	f023 020f 	bic.w	r2, r3, #15
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	490e      	ldr	r1, [pc, #56]	@ (800746c <HAL_RCC_ClockConfig+0x244>)
 8007434:	4313      	orrs	r3, r2
 8007436:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007438:	4b0b      	ldr	r3, [pc, #44]	@ (8007468 <HAL_RCC_ClockConfig+0x240>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 030f 	and.w	r3, r3, #15
 8007440:	683a      	ldr	r2, [r7, #0]
 8007442:	429a      	cmp	r2, r3
 8007444:	d214      	bcs.n	8007470 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007446:	4b08      	ldr	r3, [pc, #32]	@ (8007468 <HAL_RCC_ClockConfig+0x240>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f023 020f 	bic.w	r2, r3, #15
 800744e:	4906      	ldr	r1, [pc, #24]	@ (8007468 <HAL_RCC_ClockConfig+0x240>)
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	4313      	orrs	r3, r2
 8007454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007456:	4b04      	ldr	r3, [pc, #16]	@ (8007468 <HAL_RCC_ClockConfig+0x240>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 030f 	and.w	r3, r3, #15
 800745e:	683a      	ldr	r2, [r7, #0]
 8007460:	429a      	cmp	r2, r3
 8007462:	d005      	beq.n	8007470 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	e086      	b.n	8007576 <HAL_RCC_ClockConfig+0x34e>
 8007468:	52002000 	.word	0x52002000
 800746c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 0304 	and.w	r3, r3, #4
 8007478:	2b00      	cmp	r3, #0
 800747a:	d010      	beq.n	800749e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	691a      	ldr	r2, [r3, #16]
 8007480:	4b3f      	ldr	r3, [pc, #252]	@ (8007580 <HAL_RCC_ClockConfig+0x358>)
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007488:	429a      	cmp	r2, r3
 800748a:	d208      	bcs.n	800749e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800748c:	4b3c      	ldr	r3, [pc, #240]	@ (8007580 <HAL_RCC_ClockConfig+0x358>)
 800748e:	699b      	ldr	r3, [r3, #24]
 8007490:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	4939      	ldr	r1, [pc, #228]	@ (8007580 <HAL_RCC_ClockConfig+0x358>)
 800749a:	4313      	orrs	r3, r2
 800749c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 0308 	and.w	r3, r3, #8
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d010      	beq.n	80074cc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	695a      	ldr	r2, [r3, #20]
 80074ae:	4b34      	ldr	r3, [pc, #208]	@ (8007580 <HAL_RCC_ClockConfig+0x358>)
 80074b0:	69db      	ldr	r3, [r3, #28]
 80074b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d208      	bcs.n	80074cc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80074ba:	4b31      	ldr	r3, [pc, #196]	@ (8007580 <HAL_RCC_ClockConfig+0x358>)
 80074bc:	69db      	ldr	r3, [r3, #28]
 80074be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	695b      	ldr	r3, [r3, #20]
 80074c6:	492e      	ldr	r1, [pc, #184]	@ (8007580 <HAL_RCC_ClockConfig+0x358>)
 80074c8:	4313      	orrs	r3, r2
 80074ca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 0310 	and.w	r3, r3, #16
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d010      	beq.n	80074fa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	699a      	ldr	r2, [r3, #24]
 80074dc:	4b28      	ldr	r3, [pc, #160]	@ (8007580 <HAL_RCC_ClockConfig+0x358>)
 80074de:	69db      	ldr	r3, [r3, #28]
 80074e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d208      	bcs.n	80074fa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80074e8:	4b25      	ldr	r3, [pc, #148]	@ (8007580 <HAL_RCC_ClockConfig+0x358>)
 80074ea:	69db      	ldr	r3, [r3, #28]
 80074ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	699b      	ldr	r3, [r3, #24]
 80074f4:	4922      	ldr	r1, [pc, #136]	@ (8007580 <HAL_RCC_ClockConfig+0x358>)
 80074f6:	4313      	orrs	r3, r2
 80074f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 0320 	and.w	r3, r3, #32
 8007502:	2b00      	cmp	r3, #0
 8007504:	d010      	beq.n	8007528 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	69da      	ldr	r2, [r3, #28]
 800750a:	4b1d      	ldr	r3, [pc, #116]	@ (8007580 <HAL_RCC_ClockConfig+0x358>)
 800750c:	6a1b      	ldr	r3, [r3, #32]
 800750e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007512:	429a      	cmp	r2, r3
 8007514:	d208      	bcs.n	8007528 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007516:	4b1a      	ldr	r3, [pc, #104]	@ (8007580 <HAL_RCC_ClockConfig+0x358>)
 8007518:	6a1b      	ldr	r3, [r3, #32]
 800751a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	69db      	ldr	r3, [r3, #28]
 8007522:	4917      	ldr	r1, [pc, #92]	@ (8007580 <HAL_RCC_ClockConfig+0x358>)
 8007524:	4313      	orrs	r3, r2
 8007526:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007528:	f000 f834 	bl	8007594 <HAL_RCC_GetSysClockFreq>
 800752c:	4602      	mov	r2, r0
 800752e:	4b14      	ldr	r3, [pc, #80]	@ (8007580 <HAL_RCC_ClockConfig+0x358>)
 8007530:	699b      	ldr	r3, [r3, #24]
 8007532:	0a1b      	lsrs	r3, r3, #8
 8007534:	f003 030f 	and.w	r3, r3, #15
 8007538:	4912      	ldr	r1, [pc, #72]	@ (8007584 <HAL_RCC_ClockConfig+0x35c>)
 800753a:	5ccb      	ldrb	r3, [r1, r3]
 800753c:	f003 031f 	and.w	r3, r3, #31
 8007540:	fa22 f303 	lsr.w	r3, r2, r3
 8007544:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007546:	4b0e      	ldr	r3, [pc, #56]	@ (8007580 <HAL_RCC_ClockConfig+0x358>)
 8007548:	699b      	ldr	r3, [r3, #24]
 800754a:	f003 030f 	and.w	r3, r3, #15
 800754e:	4a0d      	ldr	r2, [pc, #52]	@ (8007584 <HAL_RCC_ClockConfig+0x35c>)
 8007550:	5cd3      	ldrb	r3, [r2, r3]
 8007552:	f003 031f 	and.w	r3, r3, #31
 8007556:	693a      	ldr	r2, [r7, #16]
 8007558:	fa22 f303 	lsr.w	r3, r2, r3
 800755c:	4a0a      	ldr	r2, [pc, #40]	@ (8007588 <HAL_RCC_ClockConfig+0x360>)
 800755e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007560:	4a0a      	ldr	r2, [pc, #40]	@ (800758c <HAL_RCC_ClockConfig+0x364>)
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007566:	4b0a      	ldr	r3, [pc, #40]	@ (8007590 <HAL_RCC_ClockConfig+0x368>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4618      	mov	r0, r3
 800756c:	f7fa fc48 	bl	8001e00 <HAL_InitTick>
 8007570:	4603      	mov	r3, r0
 8007572:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007574:	7bfb      	ldrb	r3, [r7, #15]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3718      	adds	r7, #24
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	58024400 	.word	0x58024400
 8007584:	08012918 	.word	0x08012918
 8007588:	24000004 	.word	0x24000004
 800758c:	24000000 	.word	0x24000000
 8007590:	24000008 	.word	0x24000008

08007594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007594:	b480      	push	{r7}
 8007596:	b089      	sub	sp, #36	@ 0x24
 8007598:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800759a:	4bb3      	ldr	r3, [pc, #716]	@ (8007868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80075a2:	2b18      	cmp	r3, #24
 80075a4:	f200 8155 	bhi.w	8007852 <HAL_RCC_GetSysClockFreq+0x2be>
 80075a8:	a201      	add	r2, pc, #4	@ (adr r2, 80075b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80075aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ae:	bf00      	nop
 80075b0:	08007615 	.word	0x08007615
 80075b4:	08007853 	.word	0x08007853
 80075b8:	08007853 	.word	0x08007853
 80075bc:	08007853 	.word	0x08007853
 80075c0:	08007853 	.word	0x08007853
 80075c4:	08007853 	.word	0x08007853
 80075c8:	08007853 	.word	0x08007853
 80075cc:	08007853 	.word	0x08007853
 80075d0:	0800763b 	.word	0x0800763b
 80075d4:	08007853 	.word	0x08007853
 80075d8:	08007853 	.word	0x08007853
 80075dc:	08007853 	.word	0x08007853
 80075e0:	08007853 	.word	0x08007853
 80075e4:	08007853 	.word	0x08007853
 80075e8:	08007853 	.word	0x08007853
 80075ec:	08007853 	.word	0x08007853
 80075f0:	08007641 	.word	0x08007641
 80075f4:	08007853 	.word	0x08007853
 80075f8:	08007853 	.word	0x08007853
 80075fc:	08007853 	.word	0x08007853
 8007600:	08007853 	.word	0x08007853
 8007604:	08007853 	.word	0x08007853
 8007608:	08007853 	.word	0x08007853
 800760c:	08007853 	.word	0x08007853
 8007610:	08007647 	.word	0x08007647
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007614:	4b94      	ldr	r3, [pc, #592]	@ (8007868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 0320 	and.w	r3, r3, #32
 800761c:	2b00      	cmp	r3, #0
 800761e:	d009      	beq.n	8007634 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007620:	4b91      	ldr	r3, [pc, #580]	@ (8007868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	08db      	lsrs	r3, r3, #3
 8007626:	f003 0303 	and.w	r3, r3, #3
 800762a:	4a90      	ldr	r2, [pc, #576]	@ (800786c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800762c:	fa22 f303 	lsr.w	r3, r2, r3
 8007630:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007632:	e111      	b.n	8007858 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007634:	4b8d      	ldr	r3, [pc, #564]	@ (800786c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007636:	61bb      	str	r3, [r7, #24]
      break;
 8007638:	e10e      	b.n	8007858 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800763a:	4b8d      	ldr	r3, [pc, #564]	@ (8007870 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800763c:	61bb      	str	r3, [r7, #24]
      break;
 800763e:	e10b      	b.n	8007858 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007640:	4b8c      	ldr	r3, [pc, #560]	@ (8007874 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007642:	61bb      	str	r3, [r7, #24]
      break;
 8007644:	e108      	b.n	8007858 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007646:	4b88      	ldr	r3, [pc, #544]	@ (8007868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800764a:	f003 0303 	and.w	r3, r3, #3
 800764e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007650:	4b85      	ldr	r3, [pc, #532]	@ (8007868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007654:	091b      	lsrs	r3, r3, #4
 8007656:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800765a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800765c:	4b82      	ldr	r3, [pc, #520]	@ (8007868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800765e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007660:	f003 0301 	and.w	r3, r3, #1
 8007664:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007666:	4b80      	ldr	r3, [pc, #512]	@ (8007868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800766a:	08db      	lsrs	r3, r3, #3
 800766c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	fb02 f303 	mul.w	r3, r2, r3
 8007676:	ee07 3a90 	vmov	s15, r3
 800767a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800767e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	2b00      	cmp	r3, #0
 8007686:	f000 80e1 	beq.w	800784c <HAL_RCC_GetSysClockFreq+0x2b8>
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	2b02      	cmp	r3, #2
 800768e:	f000 8083 	beq.w	8007798 <HAL_RCC_GetSysClockFreq+0x204>
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	2b02      	cmp	r3, #2
 8007696:	f200 80a1 	bhi.w	80077dc <HAL_RCC_GetSysClockFreq+0x248>
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d003      	beq.n	80076a8 <HAL_RCC_GetSysClockFreq+0x114>
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d056      	beq.n	8007754 <HAL_RCC_GetSysClockFreq+0x1c0>
 80076a6:	e099      	b.n	80077dc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076a8:	4b6f      	ldr	r3, [pc, #444]	@ (8007868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 0320 	and.w	r3, r3, #32
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d02d      	beq.n	8007710 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80076b4:	4b6c      	ldr	r3, [pc, #432]	@ (8007868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	08db      	lsrs	r3, r3, #3
 80076ba:	f003 0303 	and.w	r3, r3, #3
 80076be:	4a6b      	ldr	r2, [pc, #428]	@ (800786c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80076c0:	fa22 f303 	lsr.w	r3, r2, r3
 80076c4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	ee07 3a90 	vmov	s15, r3
 80076cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	ee07 3a90 	vmov	s15, r3
 80076d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076de:	4b62      	ldr	r3, [pc, #392]	@ (8007868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076e6:	ee07 3a90 	vmov	s15, r3
 80076ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80076f2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007878 <HAL_RCC_GetSysClockFreq+0x2e4>
 80076f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800770a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800770e:	e087      	b.n	8007820 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	ee07 3a90 	vmov	s15, r3
 8007716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800771a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800787c <HAL_RCC_GetSysClockFreq+0x2e8>
 800771e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007722:	4b51      	ldr	r3, [pc, #324]	@ (8007868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800772a:	ee07 3a90 	vmov	s15, r3
 800772e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007732:	ed97 6a02 	vldr	s12, [r7, #8]
 8007736:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007878 <HAL_RCC_GetSysClockFreq+0x2e4>
 800773a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800773e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800774a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800774e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007752:	e065      	b.n	8007820 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	ee07 3a90 	vmov	s15, r3
 800775a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800775e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007880 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007766:	4b40      	ldr	r3, [pc, #256]	@ (8007868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800776a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800776e:	ee07 3a90 	vmov	s15, r3
 8007772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007776:	ed97 6a02 	vldr	s12, [r7, #8]
 800777a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007878 <HAL_RCC_GetSysClockFreq+0x2e4>
 800777e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007786:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800778a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800778e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007792:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007796:	e043      	b.n	8007820 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	ee07 3a90 	vmov	s15, r3
 800779e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077a2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007884 <HAL_RCC_GetSysClockFreq+0x2f0>
 80077a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077aa:	4b2f      	ldr	r3, [pc, #188]	@ (8007868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077b2:	ee07 3a90 	vmov	s15, r3
 80077b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80077be:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007878 <HAL_RCC_GetSysClockFreq+0x2e4>
 80077c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80077da:	e021      	b.n	8007820 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	ee07 3a90 	vmov	s15, r3
 80077e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077e6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007880 <HAL_RCC_GetSysClockFreq+0x2ec>
 80077ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077ee:	4b1e      	ldr	r3, [pc, #120]	@ (8007868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077f6:	ee07 3a90 	vmov	s15, r3
 80077fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8007802:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007878 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800780a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800780e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800781a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800781e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007820:	4b11      	ldr	r3, [pc, #68]	@ (8007868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007824:	0a5b      	lsrs	r3, r3, #9
 8007826:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800782a:	3301      	adds	r3, #1
 800782c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	ee07 3a90 	vmov	s15, r3
 8007834:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007838:	edd7 6a07 	vldr	s13, [r7, #28]
 800783c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007840:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007844:	ee17 3a90 	vmov	r3, s15
 8007848:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800784a:	e005      	b.n	8007858 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800784c:	2300      	movs	r3, #0
 800784e:	61bb      	str	r3, [r7, #24]
      break;
 8007850:	e002      	b.n	8007858 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007852:	4b07      	ldr	r3, [pc, #28]	@ (8007870 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007854:	61bb      	str	r3, [r7, #24]
      break;
 8007856:	bf00      	nop
  }

  return sysclockfreq;
 8007858:	69bb      	ldr	r3, [r7, #24]
}
 800785a:	4618      	mov	r0, r3
 800785c:	3724      	adds	r7, #36	@ 0x24
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop
 8007868:	58024400 	.word	0x58024400
 800786c:	03d09000 	.word	0x03d09000
 8007870:	003d0900 	.word	0x003d0900
 8007874:	017d7840 	.word	0x017d7840
 8007878:	46000000 	.word	0x46000000
 800787c:	4c742400 	.word	0x4c742400
 8007880:	4a742400 	.word	0x4a742400
 8007884:	4bbebc20 	.word	0x4bbebc20

08007888 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800788e:	f7ff fe81 	bl	8007594 <HAL_RCC_GetSysClockFreq>
 8007892:	4602      	mov	r2, r0
 8007894:	4b10      	ldr	r3, [pc, #64]	@ (80078d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	0a1b      	lsrs	r3, r3, #8
 800789a:	f003 030f 	and.w	r3, r3, #15
 800789e:	490f      	ldr	r1, [pc, #60]	@ (80078dc <HAL_RCC_GetHCLKFreq+0x54>)
 80078a0:	5ccb      	ldrb	r3, [r1, r3]
 80078a2:	f003 031f 	and.w	r3, r3, #31
 80078a6:	fa22 f303 	lsr.w	r3, r2, r3
 80078aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80078ac:	4b0a      	ldr	r3, [pc, #40]	@ (80078d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	f003 030f 	and.w	r3, r3, #15
 80078b4:	4a09      	ldr	r2, [pc, #36]	@ (80078dc <HAL_RCC_GetHCLKFreq+0x54>)
 80078b6:	5cd3      	ldrb	r3, [r2, r3]
 80078b8:	f003 031f 	and.w	r3, r3, #31
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	fa22 f303 	lsr.w	r3, r2, r3
 80078c2:	4a07      	ldr	r2, [pc, #28]	@ (80078e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80078c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80078c6:	4a07      	ldr	r2, [pc, #28]	@ (80078e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80078cc:	4b04      	ldr	r3, [pc, #16]	@ (80078e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80078ce:	681b      	ldr	r3, [r3, #0]
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3708      	adds	r7, #8
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	58024400 	.word	0x58024400
 80078dc:	08012918 	.word	0x08012918
 80078e0:	24000004 	.word	0x24000004
 80078e4:	24000000 	.word	0x24000000

080078e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80078ec:	f7ff ffcc 	bl	8007888 <HAL_RCC_GetHCLKFreq>
 80078f0:	4602      	mov	r2, r0
 80078f2:	4b06      	ldr	r3, [pc, #24]	@ (800790c <HAL_RCC_GetPCLK1Freq+0x24>)
 80078f4:	69db      	ldr	r3, [r3, #28]
 80078f6:	091b      	lsrs	r3, r3, #4
 80078f8:	f003 0307 	and.w	r3, r3, #7
 80078fc:	4904      	ldr	r1, [pc, #16]	@ (8007910 <HAL_RCC_GetPCLK1Freq+0x28>)
 80078fe:	5ccb      	ldrb	r3, [r1, r3]
 8007900:	f003 031f 	and.w	r3, r3, #31
 8007904:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007908:	4618      	mov	r0, r3
 800790a:	bd80      	pop	{r7, pc}
 800790c:	58024400 	.word	0x58024400
 8007910:	08012918 	.word	0x08012918

08007914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007918:	f7ff ffb6 	bl	8007888 <HAL_RCC_GetHCLKFreq>
 800791c:	4602      	mov	r2, r0
 800791e:	4b06      	ldr	r3, [pc, #24]	@ (8007938 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007920:	69db      	ldr	r3, [r3, #28]
 8007922:	0a1b      	lsrs	r3, r3, #8
 8007924:	f003 0307 	and.w	r3, r3, #7
 8007928:	4904      	ldr	r1, [pc, #16]	@ (800793c <HAL_RCC_GetPCLK2Freq+0x28>)
 800792a:	5ccb      	ldrb	r3, [r1, r3]
 800792c:	f003 031f 	and.w	r3, r3, #31
 8007930:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007934:	4618      	mov	r0, r3
 8007936:	bd80      	pop	{r7, pc}
 8007938:	58024400 	.word	0x58024400
 800793c:	08012918 	.word	0x08012918

08007940 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007944:	b0ca      	sub	sp, #296	@ 0x128
 8007946:	af00      	add	r7, sp, #0
 8007948:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800794c:	2300      	movs	r3, #0
 800794e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007952:	2300      	movs	r3, #0
 8007954:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800795c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007960:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007964:	2500      	movs	r5, #0
 8007966:	ea54 0305 	orrs.w	r3, r4, r5
 800796a:	d049      	beq.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800796c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007970:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007972:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007976:	d02f      	beq.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007978:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800797c:	d828      	bhi.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800797e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007982:	d01a      	beq.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007984:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007988:	d822      	bhi.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800798a:	2b00      	cmp	r3, #0
 800798c:	d003      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800798e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007992:	d007      	beq.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007994:	e01c      	b.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007996:	4bb8      	ldr	r3, [pc, #736]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800799a:	4ab7      	ldr	r2, [pc, #732]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800799c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80079a2:	e01a      	b.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80079a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079a8:	3308      	adds	r3, #8
 80079aa:	2102      	movs	r1, #2
 80079ac:	4618      	mov	r0, r3
 80079ae:	f002 fb61 	bl	800a074 <RCCEx_PLL2_Config>
 80079b2:	4603      	mov	r3, r0
 80079b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80079b8:	e00f      	b.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80079ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079be:	3328      	adds	r3, #40	@ 0x28
 80079c0:	2102      	movs	r1, #2
 80079c2:	4618      	mov	r0, r3
 80079c4:	f002 fc08 	bl	800a1d8 <RCCEx_PLL3_Config>
 80079c8:	4603      	mov	r3, r0
 80079ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80079ce:	e004      	b.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079d6:	e000      	b.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80079d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10a      	bne.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80079e2:	4ba5      	ldr	r3, [pc, #660]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80079ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80079f0:	4aa1      	ldr	r2, [pc, #644]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079f2:	430b      	orrs	r3, r1
 80079f4:	6513      	str	r3, [r2, #80]	@ 0x50
 80079f6:	e003      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a08:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007a0c:	f04f 0900 	mov.w	r9, #0
 8007a10:	ea58 0309 	orrs.w	r3, r8, r9
 8007a14:	d047      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a1c:	2b04      	cmp	r3, #4
 8007a1e:	d82a      	bhi.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007a20:	a201      	add	r2, pc, #4	@ (adr r2, 8007a28 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a26:	bf00      	nop
 8007a28:	08007a3d 	.word	0x08007a3d
 8007a2c:	08007a4b 	.word	0x08007a4b
 8007a30:	08007a61 	.word	0x08007a61
 8007a34:	08007a7f 	.word	0x08007a7f
 8007a38:	08007a7f 	.word	0x08007a7f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a3c:	4b8e      	ldr	r3, [pc, #568]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a40:	4a8d      	ldr	r2, [pc, #564]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a48:	e01a      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a4e:	3308      	adds	r3, #8
 8007a50:	2100      	movs	r1, #0
 8007a52:	4618      	mov	r0, r3
 8007a54:	f002 fb0e 	bl	800a074 <RCCEx_PLL2_Config>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a5e:	e00f      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a64:	3328      	adds	r3, #40	@ 0x28
 8007a66:	2100      	movs	r1, #0
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f002 fbb5 	bl	800a1d8 <RCCEx_PLL3_Config>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a74:	e004      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a7c:	e000      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007a7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d10a      	bne.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a88:	4b7b      	ldr	r3, [pc, #492]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a8c:	f023 0107 	bic.w	r1, r3, #7
 8007a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a96:	4a78      	ldr	r2, [pc, #480]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a98:	430b      	orrs	r3, r1
 8007a9a:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a9c:	e003      	b.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007aa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aae:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007ab2:	f04f 0b00 	mov.w	fp, #0
 8007ab6:	ea5a 030b 	orrs.w	r3, sl, fp
 8007aba:	d04c      	beq.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ac2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ac6:	d030      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007ac8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007acc:	d829      	bhi.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007ace:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ad0:	d02d      	beq.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007ad2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ad4:	d825      	bhi.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007ad6:	2b80      	cmp	r3, #128	@ 0x80
 8007ad8:	d018      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007ada:	2b80      	cmp	r3, #128	@ 0x80
 8007adc:	d821      	bhi.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d002      	beq.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007ae2:	2b40      	cmp	r3, #64	@ 0x40
 8007ae4:	d007      	beq.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007ae6:	e01c      	b.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ae8:	4b63      	ldr	r3, [pc, #396]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aec:	4a62      	ldr	r2, [pc, #392]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007aee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007af2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007af4:	e01c      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007afa:	3308      	adds	r3, #8
 8007afc:	2100      	movs	r1, #0
 8007afe:	4618      	mov	r0, r3
 8007b00:	f002 fab8 	bl	800a074 <RCCEx_PLL2_Config>
 8007b04:	4603      	mov	r3, r0
 8007b06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007b0a:	e011      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b10:	3328      	adds	r3, #40	@ 0x28
 8007b12:	2100      	movs	r1, #0
 8007b14:	4618      	mov	r0, r3
 8007b16:	f002 fb5f 	bl	800a1d8 <RCCEx_PLL3_Config>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007b20:	e006      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b28:	e002      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007b2a:	bf00      	nop
 8007b2c:	e000      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007b2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d10a      	bne.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007b38:	4b4f      	ldr	r3, [pc, #316]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b3c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b46:	4a4c      	ldr	r2, [pc, #304]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b48:	430b      	orrs	r3, r1
 8007b4a:	6513      	str	r3, [r2, #80]	@ 0x50
 8007b4c:	e003      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007b62:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007b66:	2300      	movs	r3, #0
 8007b68:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007b6c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007b70:	460b      	mov	r3, r1
 8007b72:	4313      	orrs	r3, r2
 8007b74:	d053      	beq.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007b7e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007b82:	d035      	beq.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007b84:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007b88:	d82e      	bhi.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007b8a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007b8e:	d031      	beq.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007b90:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007b94:	d828      	bhi.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007b96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b9a:	d01a      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007b9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ba0:	d822      	bhi.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d003      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007ba6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007baa:	d007      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007bac:	e01c      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bae:	4b32      	ldr	r3, [pc, #200]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bb2:	4a31      	ldr	r2, [pc, #196]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007bba:	e01c      	b.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bc0:	3308      	adds	r3, #8
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f002 fa55 	bl	800a074 <RCCEx_PLL2_Config>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007bd0:	e011      	b.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bd6:	3328      	adds	r3, #40	@ 0x28
 8007bd8:	2100      	movs	r1, #0
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f002 fafc 	bl	800a1d8 <RCCEx_PLL3_Config>
 8007be0:	4603      	mov	r3, r0
 8007be2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007be6:	e006      	b.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bee:	e002      	b.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007bf0:	bf00      	nop
 8007bf2:	e000      	b.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007bf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d10b      	bne.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c02:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007c0e:	4a1a      	ldr	r2, [pc, #104]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c10:	430b      	orrs	r3, r1
 8007c12:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c14:	e003      	b.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c26:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007c2a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007c2e:	2300      	movs	r3, #0
 8007c30:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007c34:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007c38:	460b      	mov	r3, r1
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	d056      	beq.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c42:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007c46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007c4a:	d038      	beq.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007c4c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007c50:	d831      	bhi.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007c52:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007c56:	d034      	beq.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007c58:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007c5c:	d82b      	bhi.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007c5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007c62:	d01d      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007c64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007c68:	d825      	bhi.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d006      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007c6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c72:	d00a      	beq.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007c74:	e01f      	b.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007c76:	bf00      	nop
 8007c78:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c7c:	4ba2      	ldr	r3, [pc, #648]	@ (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c80:	4aa1      	ldr	r2, [pc, #644]	@ (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c88:	e01c      	b.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c8e:	3308      	adds	r3, #8
 8007c90:	2100      	movs	r1, #0
 8007c92:	4618      	mov	r0, r3
 8007c94:	f002 f9ee 	bl	800a074 <RCCEx_PLL2_Config>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007c9e:	e011      	b.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ca4:	3328      	adds	r3, #40	@ 0x28
 8007ca6:	2100      	movs	r1, #0
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f002 fa95 	bl	800a1d8 <RCCEx_PLL3_Config>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007cb4:	e006      	b.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007cbc:	e002      	b.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007cbe:	bf00      	nop
 8007cc0:	e000      	b.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007cc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d10b      	bne.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007ccc:	4b8e      	ldr	r3, [pc, #568]	@ (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cd0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007cdc:	4a8a      	ldr	r2, [pc, #552]	@ (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007cde:	430b      	orrs	r3, r1
 8007ce0:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ce2:	e003      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ce4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ce8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007cf8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007d02:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007d06:	460b      	mov	r3, r1
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	d03a      	beq.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d12:	2b30      	cmp	r3, #48	@ 0x30
 8007d14:	d01f      	beq.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007d16:	2b30      	cmp	r3, #48	@ 0x30
 8007d18:	d819      	bhi.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007d1a:	2b20      	cmp	r3, #32
 8007d1c:	d00c      	beq.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007d1e:	2b20      	cmp	r3, #32
 8007d20:	d815      	bhi.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d019      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007d26:	2b10      	cmp	r3, #16
 8007d28:	d111      	bne.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d2a:	4b77      	ldr	r3, [pc, #476]	@ (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d2e:	4a76      	ldr	r2, [pc, #472]	@ (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007d36:	e011      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d3c:	3308      	adds	r3, #8
 8007d3e:	2102      	movs	r1, #2
 8007d40:	4618      	mov	r0, r3
 8007d42:	f002 f997 	bl	800a074 <RCCEx_PLL2_Config>
 8007d46:	4603      	mov	r3, r0
 8007d48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007d4c:	e006      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d54:	e002      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007d56:	bf00      	nop
 8007d58:	e000      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007d5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10a      	bne.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007d64:	4b68      	ldr	r3, [pc, #416]	@ (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d68:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d72:	4a65      	ldr	r2, [pc, #404]	@ (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d74:	430b      	orrs	r3, r1
 8007d76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007d78:	e003      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d8a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007d8e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007d92:	2300      	movs	r3, #0
 8007d94:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007d98:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	d051      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007da8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007dac:	d035      	beq.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007dae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007db2:	d82e      	bhi.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007db4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007db8:	d031      	beq.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007dba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007dbe:	d828      	bhi.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007dc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007dc4:	d01a      	beq.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007dc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007dca:	d822      	bhi.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d003      	beq.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007dd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dd4:	d007      	beq.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007dd6:	e01c      	b.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dd8:	4b4b      	ldr	r3, [pc, #300]	@ (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ddc:	4a4a      	ldr	r2, [pc, #296]	@ (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007dde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007de2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007de4:	e01c      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dea:	3308      	adds	r3, #8
 8007dec:	2100      	movs	r1, #0
 8007dee:	4618      	mov	r0, r3
 8007df0:	f002 f940 	bl	800a074 <RCCEx_PLL2_Config>
 8007df4:	4603      	mov	r3, r0
 8007df6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007dfa:	e011      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e00:	3328      	adds	r3, #40	@ 0x28
 8007e02:	2100      	movs	r1, #0
 8007e04:	4618      	mov	r0, r3
 8007e06:	f002 f9e7 	bl	800a1d8 <RCCEx_PLL3_Config>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007e10:	e006      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e18:	e002      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007e1a:	bf00      	nop
 8007e1c:	e000      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007e1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d10a      	bne.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007e28:	4b37      	ldr	r3, [pc, #220]	@ (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e2c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e36:	4a34      	ldr	r2, [pc, #208]	@ (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e38:	430b      	orrs	r3, r1
 8007e3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8007e3c:	e003      	b.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007e52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007e56:	2300      	movs	r3, #0
 8007e58:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007e5c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007e60:	460b      	mov	r3, r1
 8007e62:	4313      	orrs	r3, r2
 8007e64:	d056      	beq.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007e70:	d033      	beq.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007e72:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007e76:	d82c      	bhi.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007e78:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007e7c:	d02f      	beq.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007e7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007e82:	d826      	bhi.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007e84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007e88:	d02b      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007e8a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007e8e:	d820      	bhi.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007e90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e94:	d012      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007e96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e9a:	d81a      	bhi.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d022      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007ea0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ea4:	d115      	bne.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eaa:	3308      	adds	r3, #8
 8007eac:	2101      	movs	r1, #1
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f002 f8e0 	bl	800a074 <RCCEx_PLL2_Config>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007eba:	e015      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ec0:	3328      	adds	r3, #40	@ 0x28
 8007ec2:	2101      	movs	r1, #1
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f002 f987 	bl	800a1d8 <RCCEx_PLL3_Config>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007ed0:	e00a      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ed8:	e006      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007eda:	bf00      	nop
 8007edc:	e004      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007ede:	bf00      	nop
 8007ee0:	e002      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007ee2:	bf00      	nop
 8007ee4:	e000      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007ee6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ee8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d10d      	bne.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007ef0:	4b05      	ldr	r3, [pc, #20]	@ (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ef4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007efc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007efe:	4a02      	ldr	r2, [pc, #8]	@ (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f00:	430b      	orrs	r3, r1
 8007f02:	6513      	str	r3, [r2, #80]	@ 0x50
 8007f04:	e006      	b.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007f06:	bf00      	nop
 8007f08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007f20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007f24:	2300      	movs	r3, #0
 8007f26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007f2a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007f2e:	460b      	mov	r3, r1
 8007f30:	4313      	orrs	r3, r2
 8007f32:	d055      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007f3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f40:	d033      	beq.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007f42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f46:	d82c      	bhi.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007f48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f4c:	d02f      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f52:	d826      	bhi.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007f54:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007f58:	d02b      	beq.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007f5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007f5e:	d820      	bhi.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007f60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f64:	d012      	beq.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007f66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f6a:	d81a      	bhi.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d022      	beq.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007f70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f74:	d115      	bne.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f7a:	3308      	adds	r3, #8
 8007f7c:	2101      	movs	r1, #1
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f002 f878 	bl	800a074 <RCCEx_PLL2_Config>
 8007f84:	4603      	mov	r3, r0
 8007f86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007f8a:	e015      	b.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f90:	3328      	adds	r3, #40	@ 0x28
 8007f92:	2101      	movs	r1, #1
 8007f94:	4618      	mov	r0, r3
 8007f96:	f002 f91f 	bl	800a1d8 <RCCEx_PLL3_Config>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007fa0:	e00a      	b.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007fa8:	e006      	b.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007faa:	bf00      	nop
 8007fac:	e004      	b.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007fae:	bf00      	nop
 8007fb0:	e002      	b.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007fb2:	bf00      	nop
 8007fb4:	e000      	b.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007fb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d10b      	bne.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007fc0:	4ba3      	ldr	r3, [pc, #652]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fc4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fcc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007fd0:	4a9f      	ldr	r2, [pc, #636]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fd2:	430b      	orrs	r3, r1
 8007fd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8007fd6:	e003      	b.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fdc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007fec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007ff6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	d037      	beq.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008006:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800800a:	d00e      	beq.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800800c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008010:	d816      	bhi.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008012:	2b00      	cmp	r3, #0
 8008014:	d018      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008016:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800801a:	d111      	bne.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800801c:	4b8c      	ldr	r3, [pc, #560]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800801e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008020:	4a8b      	ldr	r2, [pc, #556]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008022:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008026:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008028:	e00f      	b.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800802a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800802e:	3308      	adds	r3, #8
 8008030:	2101      	movs	r1, #1
 8008032:	4618      	mov	r0, r3
 8008034:	f002 f81e 	bl	800a074 <RCCEx_PLL2_Config>
 8008038:	4603      	mov	r3, r0
 800803a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800803e:	e004      	b.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008046:	e000      	b.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008048:	bf00      	nop
    }

    if (ret == HAL_OK)
 800804a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800804e:	2b00      	cmp	r3, #0
 8008050:	d10a      	bne.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008052:	4b7f      	ldr	r3, [pc, #508]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008054:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008056:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800805a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800805e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008060:	4a7b      	ldr	r2, [pc, #492]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008062:	430b      	orrs	r3, r1
 8008064:	6513      	str	r3, [r2, #80]	@ 0x50
 8008066:	e003      	b.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008068:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800806c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008078:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800807c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008080:	2300      	movs	r3, #0
 8008082:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008086:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800808a:	460b      	mov	r3, r1
 800808c:	4313      	orrs	r3, r2
 800808e:	d039      	beq.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008094:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008096:	2b03      	cmp	r3, #3
 8008098:	d81c      	bhi.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800809a:	a201      	add	r2, pc, #4	@ (adr r2, 80080a0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800809c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a0:	080080dd 	.word	0x080080dd
 80080a4:	080080b1 	.word	0x080080b1
 80080a8:	080080bf 	.word	0x080080bf
 80080ac:	080080dd 	.word	0x080080dd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080b0:	4b67      	ldr	r3, [pc, #412]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b4:	4a66      	ldr	r2, [pc, #408]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80080bc:	e00f      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80080be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080c2:	3308      	adds	r3, #8
 80080c4:	2102      	movs	r1, #2
 80080c6:	4618      	mov	r0, r3
 80080c8:	f001 ffd4 	bl	800a074 <RCCEx_PLL2_Config>
 80080cc:	4603      	mov	r3, r0
 80080ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80080d2:	e004      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080da:	e000      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80080dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d10a      	bne.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80080e6:	4b5a      	ldr	r3, [pc, #360]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080ea:	f023 0103 	bic.w	r1, r3, #3
 80080ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080f4:	4a56      	ldr	r2, [pc, #344]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080f6:	430b      	orrs	r3, r1
 80080f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80080fa:	e003      	b.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008100:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008110:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008114:	2300      	movs	r3, #0
 8008116:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800811a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800811e:	460b      	mov	r3, r1
 8008120:	4313      	orrs	r3, r2
 8008122:	f000 809f 	beq.w	8008264 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008126:	4b4b      	ldr	r3, [pc, #300]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a4a      	ldr	r2, [pc, #296]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800812c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008130:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008132:	f7f9 feaf 	bl	8001e94 <HAL_GetTick>
 8008136:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800813a:	e00b      	b.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800813c:	f7f9 feaa 	bl	8001e94 <HAL_GetTick>
 8008140:	4602      	mov	r2, r0
 8008142:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	2b64      	cmp	r3, #100	@ 0x64
 800814a:	d903      	bls.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800814c:	2303      	movs	r3, #3
 800814e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008152:	e005      	b.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008154:	4b3f      	ldr	r3, [pc, #252]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800815c:	2b00      	cmp	r3, #0
 800815e:	d0ed      	beq.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008160:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008164:	2b00      	cmp	r3, #0
 8008166:	d179      	bne.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008168:	4b39      	ldr	r3, [pc, #228]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800816a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800816c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008170:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008174:	4053      	eors	r3, r2
 8008176:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800817a:	2b00      	cmp	r3, #0
 800817c:	d015      	beq.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800817e:	4b34      	ldr	r3, [pc, #208]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008182:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008186:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800818a:	4b31      	ldr	r3, [pc, #196]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800818c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800818e:	4a30      	ldr	r2, [pc, #192]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008194:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008196:	4b2e      	ldr	r3, [pc, #184]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800819a:	4a2d      	ldr	r2, [pc, #180]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800819c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081a0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80081a2:	4a2b      	ldr	r2, [pc, #172]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80081a8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80081aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80081b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081b6:	d118      	bne.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081b8:	f7f9 fe6c 	bl	8001e94 <HAL_GetTick>
 80081bc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081c0:	e00d      	b.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081c2:	f7f9 fe67 	bl	8001e94 <HAL_GetTick>
 80081c6:	4602      	mov	r2, r0
 80081c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80081cc:	1ad2      	subs	r2, r2, r3
 80081ce:	f241 3388 	movw	r3, #5000	@ 0x1388
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d903      	bls.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80081d6:	2303      	movs	r3, #3
 80081d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80081dc:	e005      	b.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081de:	4b1c      	ldr	r3, [pc, #112]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081e2:	f003 0302 	and.w	r3, r3, #2
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d0eb      	beq.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80081ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d129      	bne.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80081f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80081fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008202:	d10e      	bne.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008204:	4b12      	ldr	r3, [pc, #72]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800820c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008210:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008214:	091a      	lsrs	r2, r3, #4
 8008216:	4b10      	ldr	r3, [pc, #64]	@ (8008258 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008218:	4013      	ands	r3, r2
 800821a:	4a0d      	ldr	r2, [pc, #52]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800821c:	430b      	orrs	r3, r1
 800821e:	6113      	str	r3, [r2, #16]
 8008220:	e005      	b.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008222:	4b0b      	ldr	r3, [pc, #44]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	4a0a      	ldr	r2, [pc, #40]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008228:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800822c:	6113      	str	r3, [r2, #16]
 800822e:	4b08      	ldr	r3, [pc, #32]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008230:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008236:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800823a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800823e:	4a04      	ldr	r2, [pc, #16]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008240:	430b      	orrs	r3, r1
 8008242:	6713      	str	r3, [r2, #112]	@ 0x70
 8008244:	e00e      	b.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008246:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800824a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800824e:	e009      	b.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008250:	58024400 	.word	0x58024400
 8008254:	58024800 	.word	0x58024800
 8008258:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800825c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008260:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826c:	f002 0301 	and.w	r3, r2, #1
 8008270:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008274:	2300      	movs	r3, #0
 8008276:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800827a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800827e:	460b      	mov	r3, r1
 8008280:	4313      	orrs	r3, r2
 8008282:	f000 8089 	beq.w	8008398 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800828a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800828c:	2b28      	cmp	r3, #40	@ 0x28
 800828e:	d86b      	bhi.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008290:	a201      	add	r2, pc, #4	@ (adr r2, 8008298 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008296:	bf00      	nop
 8008298:	08008371 	.word	0x08008371
 800829c:	08008369 	.word	0x08008369
 80082a0:	08008369 	.word	0x08008369
 80082a4:	08008369 	.word	0x08008369
 80082a8:	08008369 	.word	0x08008369
 80082ac:	08008369 	.word	0x08008369
 80082b0:	08008369 	.word	0x08008369
 80082b4:	08008369 	.word	0x08008369
 80082b8:	0800833d 	.word	0x0800833d
 80082bc:	08008369 	.word	0x08008369
 80082c0:	08008369 	.word	0x08008369
 80082c4:	08008369 	.word	0x08008369
 80082c8:	08008369 	.word	0x08008369
 80082cc:	08008369 	.word	0x08008369
 80082d0:	08008369 	.word	0x08008369
 80082d4:	08008369 	.word	0x08008369
 80082d8:	08008353 	.word	0x08008353
 80082dc:	08008369 	.word	0x08008369
 80082e0:	08008369 	.word	0x08008369
 80082e4:	08008369 	.word	0x08008369
 80082e8:	08008369 	.word	0x08008369
 80082ec:	08008369 	.word	0x08008369
 80082f0:	08008369 	.word	0x08008369
 80082f4:	08008369 	.word	0x08008369
 80082f8:	08008371 	.word	0x08008371
 80082fc:	08008369 	.word	0x08008369
 8008300:	08008369 	.word	0x08008369
 8008304:	08008369 	.word	0x08008369
 8008308:	08008369 	.word	0x08008369
 800830c:	08008369 	.word	0x08008369
 8008310:	08008369 	.word	0x08008369
 8008314:	08008369 	.word	0x08008369
 8008318:	08008371 	.word	0x08008371
 800831c:	08008369 	.word	0x08008369
 8008320:	08008369 	.word	0x08008369
 8008324:	08008369 	.word	0x08008369
 8008328:	08008369 	.word	0x08008369
 800832c:	08008369 	.word	0x08008369
 8008330:	08008369 	.word	0x08008369
 8008334:	08008369 	.word	0x08008369
 8008338:	08008371 	.word	0x08008371
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800833c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008340:	3308      	adds	r3, #8
 8008342:	2101      	movs	r1, #1
 8008344:	4618      	mov	r0, r3
 8008346:	f001 fe95 	bl	800a074 <RCCEx_PLL2_Config>
 800834a:	4603      	mov	r3, r0
 800834c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008350:	e00f      	b.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008356:	3328      	adds	r3, #40	@ 0x28
 8008358:	2101      	movs	r1, #1
 800835a:	4618      	mov	r0, r3
 800835c:	f001 ff3c 	bl	800a1d8 <RCCEx_PLL3_Config>
 8008360:	4603      	mov	r3, r0
 8008362:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008366:	e004      	b.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008368:	2301      	movs	r3, #1
 800836a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800836e:	e000      	b.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008370:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008372:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008376:	2b00      	cmp	r3, #0
 8008378:	d10a      	bne.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800837a:	4bbf      	ldr	r3, [pc, #764]	@ (8008678 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800837c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800837e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008386:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008388:	4abb      	ldr	r2, [pc, #748]	@ (8008678 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800838a:	430b      	orrs	r3, r1
 800838c:	6553      	str	r3, [r2, #84]	@ 0x54
 800838e:	e003      	b.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008390:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008394:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800839c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a0:	f002 0302 	and.w	r3, r2, #2
 80083a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80083a8:	2300      	movs	r3, #0
 80083aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80083ae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80083b2:	460b      	mov	r3, r1
 80083b4:	4313      	orrs	r3, r2
 80083b6:	d041      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80083b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80083be:	2b05      	cmp	r3, #5
 80083c0:	d824      	bhi.n	800840c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80083c2:	a201      	add	r2, pc, #4	@ (adr r2, 80083c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80083c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c8:	08008415 	.word	0x08008415
 80083cc:	080083e1 	.word	0x080083e1
 80083d0:	080083f7 	.word	0x080083f7
 80083d4:	08008415 	.word	0x08008415
 80083d8:	08008415 	.word	0x08008415
 80083dc:	08008415 	.word	0x08008415
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083e4:	3308      	adds	r3, #8
 80083e6:	2101      	movs	r1, #1
 80083e8:	4618      	mov	r0, r3
 80083ea:	f001 fe43 	bl	800a074 <RCCEx_PLL2_Config>
 80083ee:	4603      	mov	r3, r0
 80083f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80083f4:	e00f      	b.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80083f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083fa:	3328      	adds	r3, #40	@ 0x28
 80083fc:	2101      	movs	r1, #1
 80083fe:	4618      	mov	r0, r3
 8008400:	f001 feea 	bl	800a1d8 <RCCEx_PLL3_Config>
 8008404:	4603      	mov	r3, r0
 8008406:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800840a:	e004      	b.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008412:	e000      	b.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008414:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800841a:	2b00      	cmp	r3, #0
 800841c:	d10a      	bne.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800841e:	4b96      	ldr	r3, [pc, #600]	@ (8008678 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008422:	f023 0107 	bic.w	r1, r3, #7
 8008426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800842a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800842c:	4a92      	ldr	r2, [pc, #584]	@ (8008678 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800842e:	430b      	orrs	r3, r1
 8008430:	6553      	str	r3, [r2, #84]	@ 0x54
 8008432:	e003      	b.n	800843c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008434:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008438:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800843c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008444:	f002 0304 	and.w	r3, r2, #4
 8008448:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800844c:	2300      	movs	r3, #0
 800844e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008452:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008456:	460b      	mov	r3, r1
 8008458:	4313      	orrs	r3, r2
 800845a:	d044      	beq.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800845c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008460:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008464:	2b05      	cmp	r3, #5
 8008466:	d825      	bhi.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008468:	a201      	add	r2, pc, #4	@ (adr r2, 8008470 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800846a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800846e:	bf00      	nop
 8008470:	080084bd 	.word	0x080084bd
 8008474:	08008489 	.word	0x08008489
 8008478:	0800849f 	.word	0x0800849f
 800847c:	080084bd 	.word	0x080084bd
 8008480:	080084bd 	.word	0x080084bd
 8008484:	080084bd 	.word	0x080084bd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800848c:	3308      	adds	r3, #8
 800848e:	2101      	movs	r1, #1
 8008490:	4618      	mov	r0, r3
 8008492:	f001 fdef 	bl	800a074 <RCCEx_PLL2_Config>
 8008496:	4603      	mov	r3, r0
 8008498:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800849c:	e00f      	b.n	80084be <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800849e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084a2:	3328      	adds	r3, #40	@ 0x28
 80084a4:	2101      	movs	r1, #1
 80084a6:	4618      	mov	r0, r3
 80084a8:	f001 fe96 	bl	800a1d8 <RCCEx_PLL3_Config>
 80084ac:	4603      	mov	r3, r0
 80084ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80084b2:	e004      	b.n	80084be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084ba:	e000      	b.n	80084be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80084bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10b      	bne.n	80084de <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80084c6:	4b6c      	ldr	r3, [pc, #432]	@ (8008678 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80084c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084ca:	f023 0107 	bic.w	r1, r3, #7
 80084ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80084d6:	4a68      	ldr	r2, [pc, #416]	@ (8008678 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80084d8:	430b      	orrs	r3, r1
 80084da:	6593      	str	r3, [r2, #88]	@ 0x58
 80084dc:	e003      	b.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80084e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ee:	f002 0320 	and.w	r3, r2, #32
 80084f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80084f6:	2300      	movs	r3, #0
 80084f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80084fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008500:	460b      	mov	r3, r1
 8008502:	4313      	orrs	r3, r2
 8008504:	d055      	beq.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800850a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800850e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008512:	d033      	beq.n	800857c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008514:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008518:	d82c      	bhi.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800851a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800851e:	d02f      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008524:	d826      	bhi.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008526:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800852a:	d02b      	beq.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800852c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008530:	d820      	bhi.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008532:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008536:	d012      	beq.n	800855e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008538:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800853c:	d81a      	bhi.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800853e:	2b00      	cmp	r3, #0
 8008540:	d022      	beq.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008542:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008546:	d115      	bne.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800854c:	3308      	adds	r3, #8
 800854e:	2100      	movs	r1, #0
 8008550:	4618      	mov	r0, r3
 8008552:	f001 fd8f 	bl	800a074 <RCCEx_PLL2_Config>
 8008556:	4603      	mov	r3, r0
 8008558:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800855c:	e015      	b.n	800858a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800855e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008562:	3328      	adds	r3, #40	@ 0x28
 8008564:	2102      	movs	r1, #2
 8008566:	4618      	mov	r0, r3
 8008568:	f001 fe36 	bl	800a1d8 <RCCEx_PLL3_Config>
 800856c:	4603      	mov	r3, r0
 800856e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008572:	e00a      	b.n	800858a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800857a:	e006      	b.n	800858a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800857c:	bf00      	nop
 800857e:	e004      	b.n	800858a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008580:	bf00      	nop
 8008582:	e002      	b.n	800858a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008584:	bf00      	nop
 8008586:	e000      	b.n	800858a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800858a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800858e:	2b00      	cmp	r3, #0
 8008590:	d10b      	bne.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008592:	4b39      	ldr	r3, [pc, #228]	@ (8008678 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008596:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800859a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800859e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085a2:	4a35      	ldr	r2, [pc, #212]	@ (8008678 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80085a4:	430b      	orrs	r3, r1
 80085a6:	6553      	str	r3, [r2, #84]	@ 0x54
 80085a8:	e003      	b.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80085b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ba:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80085be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80085c2:	2300      	movs	r3, #0
 80085c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80085c8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80085cc:	460b      	mov	r3, r1
 80085ce:	4313      	orrs	r3, r2
 80085d0:	d058      	beq.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80085d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80085da:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80085de:	d033      	beq.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80085e0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80085e4:	d82c      	bhi.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80085e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085ea:	d02f      	beq.n	800864c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80085ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085f0:	d826      	bhi.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80085f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80085f6:	d02b      	beq.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80085f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80085fc:	d820      	bhi.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80085fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008602:	d012      	beq.n	800862a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008604:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008608:	d81a      	bhi.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800860a:	2b00      	cmp	r3, #0
 800860c:	d022      	beq.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800860e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008612:	d115      	bne.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008618:	3308      	adds	r3, #8
 800861a:	2100      	movs	r1, #0
 800861c:	4618      	mov	r0, r3
 800861e:	f001 fd29 	bl	800a074 <RCCEx_PLL2_Config>
 8008622:	4603      	mov	r3, r0
 8008624:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008628:	e015      	b.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800862a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800862e:	3328      	adds	r3, #40	@ 0x28
 8008630:	2102      	movs	r1, #2
 8008632:	4618      	mov	r0, r3
 8008634:	f001 fdd0 	bl	800a1d8 <RCCEx_PLL3_Config>
 8008638:	4603      	mov	r3, r0
 800863a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800863e:	e00a      	b.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008646:	e006      	b.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008648:	bf00      	nop
 800864a:	e004      	b.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800864c:	bf00      	nop
 800864e:	e002      	b.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008650:	bf00      	nop
 8008652:	e000      	b.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008656:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10e      	bne.n	800867c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800865e:	4b06      	ldr	r3, [pc, #24]	@ (8008678 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008662:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800866a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800866e:	4a02      	ldr	r2, [pc, #8]	@ (8008678 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008670:	430b      	orrs	r3, r1
 8008672:	6593      	str	r3, [r2, #88]	@ 0x58
 8008674:	e006      	b.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008676:	bf00      	nop
 8008678:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800867c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008680:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008690:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008694:	2300      	movs	r3, #0
 8008696:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800869a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800869e:	460b      	mov	r3, r1
 80086a0:	4313      	orrs	r3, r2
 80086a2:	d055      	beq.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80086a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80086ac:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80086b0:	d033      	beq.n	800871a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80086b2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80086b6:	d82c      	bhi.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80086b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80086bc:	d02f      	beq.n	800871e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80086be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80086c2:	d826      	bhi.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80086c4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80086c8:	d02b      	beq.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80086ca:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80086ce:	d820      	bhi.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80086d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80086d4:	d012      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80086d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80086da:	d81a      	bhi.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d022      	beq.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80086e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086e4:	d115      	bne.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80086e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086ea:	3308      	adds	r3, #8
 80086ec:	2100      	movs	r1, #0
 80086ee:	4618      	mov	r0, r3
 80086f0:	f001 fcc0 	bl	800a074 <RCCEx_PLL2_Config>
 80086f4:	4603      	mov	r3, r0
 80086f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80086fa:	e015      	b.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80086fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008700:	3328      	adds	r3, #40	@ 0x28
 8008702:	2102      	movs	r1, #2
 8008704:	4618      	mov	r0, r3
 8008706:	f001 fd67 	bl	800a1d8 <RCCEx_PLL3_Config>
 800870a:	4603      	mov	r3, r0
 800870c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008710:	e00a      	b.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008718:	e006      	b.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800871a:	bf00      	nop
 800871c:	e004      	b.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800871e:	bf00      	nop
 8008720:	e002      	b.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008722:	bf00      	nop
 8008724:	e000      	b.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008726:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008728:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800872c:	2b00      	cmp	r3, #0
 800872e:	d10b      	bne.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008730:	4ba1      	ldr	r3, [pc, #644]	@ (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008734:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800873c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008740:	4a9d      	ldr	r2, [pc, #628]	@ (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008742:	430b      	orrs	r3, r1
 8008744:	6593      	str	r3, [r2, #88]	@ 0x58
 8008746:	e003      	b.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008748:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800874c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008758:	f002 0308 	and.w	r3, r2, #8
 800875c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008760:	2300      	movs	r3, #0
 8008762:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008766:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800876a:	460b      	mov	r3, r1
 800876c:	4313      	orrs	r3, r2
 800876e:	d01e      	beq.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008774:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008778:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800877c:	d10c      	bne.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800877e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008782:	3328      	adds	r3, #40	@ 0x28
 8008784:	2102      	movs	r1, #2
 8008786:	4618      	mov	r0, r3
 8008788:	f001 fd26 	bl	800a1d8 <RCCEx_PLL3_Config>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d002      	beq.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008798:	4b87      	ldr	r3, [pc, #540]	@ (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800879a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800879c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80087a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087a8:	4a83      	ldr	r2, [pc, #524]	@ (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087aa:	430b      	orrs	r3, r1
 80087ac:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80087ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b6:	f002 0310 	and.w	r3, r2, #16
 80087ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80087be:	2300      	movs	r3, #0
 80087c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80087c4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80087c8:	460b      	mov	r3, r1
 80087ca:	4313      	orrs	r3, r2
 80087cc:	d01e      	beq.n	800880c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80087ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80087d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087da:	d10c      	bne.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80087dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087e0:	3328      	adds	r3, #40	@ 0x28
 80087e2:	2102      	movs	r1, #2
 80087e4:	4618      	mov	r0, r3
 80087e6:	f001 fcf7 	bl	800a1d8 <RCCEx_PLL3_Config>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d002      	beq.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80087f6:	4b70      	ldr	r3, [pc, #448]	@ (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80087fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008802:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008806:	4a6c      	ldr	r2, [pc, #432]	@ (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008808:	430b      	orrs	r3, r1
 800880a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800880c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008814:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008818:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800881c:	2300      	movs	r3, #0
 800881e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008822:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008826:	460b      	mov	r3, r1
 8008828:	4313      	orrs	r3, r2
 800882a:	d03e      	beq.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800882c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008830:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008834:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008838:	d022      	beq.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800883a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800883e:	d81b      	bhi.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008840:	2b00      	cmp	r3, #0
 8008842:	d003      	beq.n	800884c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008844:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008848:	d00b      	beq.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800884a:	e015      	b.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800884c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008850:	3308      	adds	r3, #8
 8008852:	2100      	movs	r1, #0
 8008854:	4618      	mov	r0, r3
 8008856:	f001 fc0d 	bl	800a074 <RCCEx_PLL2_Config>
 800885a:	4603      	mov	r3, r0
 800885c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008860:	e00f      	b.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008866:	3328      	adds	r3, #40	@ 0x28
 8008868:	2102      	movs	r1, #2
 800886a:	4618      	mov	r0, r3
 800886c:	f001 fcb4 	bl	800a1d8 <RCCEx_PLL3_Config>
 8008870:	4603      	mov	r3, r0
 8008872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008876:	e004      	b.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008878:	2301      	movs	r3, #1
 800887a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800887e:	e000      	b.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008880:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008882:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008886:	2b00      	cmp	r3, #0
 8008888:	d10b      	bne.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800888a:	4b4b      	ldr	r3, [pc, #300]	@ (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800888c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800888e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008896:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800889a:	4a47      	ldr	r2, [pc, #284]	@ (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800889c:	430b      	orrs	r3, r1
 800889e:	6593      	str	r3, [r2, #88]	@ 0x58
 80088a0:	e003      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80088aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80088b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80088b8:	2300      	movs	r3, #0
 80088ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80088bc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80088c0:	460b      	mov	r3, r1
 80088c2:	4313      	orrs	r3, r2
 80088c4:	d03b      	beq.n	800893e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80088c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80088d2:	d01f      	beq.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80088d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80088d8:	d818      	bhi.n	800890c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80088da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80088de:	d003      	beq.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80088e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80088e4:	d007      	beq.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80088e6:	e011      	b.n	800890c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088e8:	4b33      	ldr	r3, [pc, #204]	@ (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ec:	4a32      	ldr	r2, [pc, #200]	@ (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80088f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80088f4:	e00f      	b.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80088f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088fa:	3328      	adds	r3, #40	@ 0x28
 80088fc:	2101      	movs	r1, #1
 80088fe:	4618      	mov	r0, r3
 8008900:	f001 fc6a 	bl	800a1d8 <RCCEx_PLL3_Config>
 8008904:	4603      	mov	r3, r0
 8008906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800890a:	e004      	b.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800890c:	2301      	movs	r3, #1
 800890e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008912:	e000      	b.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008914:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008916:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10b      	bne.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800891e:	4b26      	ldr	r3, [pc, #152]	@ (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008922:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800892a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800892e:	4a22      	ldr	r2, [pc, #136]	@ (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008930:	430b      	orrs	r3, r1
 8008932:	6553      	str	r3, [r2, #84]	@ 0x54
 8008934:	e003      	b.n	800893e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008936:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800893a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800893e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008946:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800894a:	673b      	str	r3, [r7, #112]	@ 0x70
 800894c:	2300      	movs	r3, #0
 800894e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008950:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008954:	460b      	mov	r3, r1
 8008956:	4313      	orrs	r3, r2
 8008958:	d034      	beq.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800895a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800895e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008960:	2b00      	cmp	r3, #0
 8008962:	d003      	beq.n	800896c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008968:	d007      	beq.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800896a:	e011      	b.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800896c:	4b12      	ldr	r3, [pc, #72]	@ (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800896e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008970:	4a11      	ldr	r2, [pc, #68]	@ (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008972:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008976:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008978:	e00e      	b.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800897a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800897e:	3308      	adds	r3, #8
 8008980:	2102      	movs	r1, #2
 8008982:	4618      	mov	r0, r3
 8008984:	f001 fb76 	bl	800a074 <RCCEx_PLL2_Config>
 8008988:	4603      	mov	r3, r0
 800898a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800898e:	e003      	b.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008996:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008998:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800899c:	2b00      	cmp	r3, #0
 800899e:	d10d      	bne.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80089a0:	4b05      	ldr	r3, [pc, #20]	@ (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089a4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80089a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089ae:	4a02      	ldr	r2, [pc, #8]	@ (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089b0:	430b      	orrs	r3, r1
 80089b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80089b4:	e006      	b.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80089b6:	bf00      	nop
 80089b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80089c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089cc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80089d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80089d2:	2300      	movs	r3, #0
 80089d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80089d6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80089da:	460b      	mov	r3, r1
 80089dc:	4313      	orrs	r3, r2
 80089de:	d00c      	beq.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80089e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089e4:	3328      	adds	r3, #40	@ 0x28
 80089e6:	2102      	movs	r1, #2
 80089e8:	4618      	mov	r0, r3
 80089ea:	f001 fbf5 	bl	800a1d8 <RCCEx_PLL3_Config>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d002      	beq.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80089f4:	2301      	movs	r3, #1
 80089f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80089fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a02:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008a06:	663b      	str	r3, [r7, #96]	@ 0x60
 8008a08:	2300      	movs	r3, #0
 8008a0a:	667b      	str	r3, [r7, #100]	@ 0x64
 8008a0c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008a10:	460b      	mov	r3, r1
 8008a12:	4313      	orrs	r3, r2
 8008a14:	d038      	beq.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a22:	d018      	beq.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008a24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a28:	d811      	bhi.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008a2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a2e:	d014      	beq.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008a30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a34:	d80b      	bhi.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d011      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008a3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a3e:	d106      	bne.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a40:	4bc3      	ldr	r3, [pc, #780]	@ (8008d50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a44:	4ac2      	ldr	r2, [pc, #776]	@ (8008d50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008a4c:	e008      	b.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a54:	e004      	b.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008a56:	bf00      	nop
 8008a58:	e002      	b.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008a5a:	bf00      	nop
 8008a5c:	e000      	b.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008a5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d10b      	bne.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008a68:	4bb9      	ldr	r3, [pc, #740]	@ (8008d50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a6c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a78:	4ab5      	ldr	r2, [pc, #724]	@ (8008d50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a7a:	430b      	orrs	r3, r1
 8008a7c:	6553      	str	r3, [r2, #84]	@ 0x54
 8008a7e:	e003      	b.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a90:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008a94:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a96:	2300      	movs	r3, #0
 8008a98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008a9a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	d009      	beq.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008aa4:	4baa      	ldr	r3, [pc, #680]	@ (8008d50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008aa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008aa8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ab0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ab2:	4aa7      	ldr	r2, [pc, #668]	@ (8008d50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ab4:	430b      	orrs	r3, r1
 8008ab6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008ac4:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	657b      	str	r3, [r7, #84]	@ 0x54
 8008aca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008ace:	460b      	mov	r3, r1
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	d00a      	beq.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008ad4:	4b9e      	ldr	r3, [pc, #632]	@ (8008d50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ad6:	691b      	ldr	r3, [r3, #16]
 8008ad8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ae0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008ae4:	4a9a      	ldr	r2, [pc, #616]	@ (8008d50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ae6:	430b      	orrs	r3, r1
 8008ae8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008af6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008af8:	2300      	movs	r3, #0
 8008afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008afc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008b00:	460b      	mov	r3, r1
 8008b02:	4313      	orrs	r3, r2
 8008b04:	d009      	beq.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008b06:	4b92      	ldr	r3, [pc, #584]	@ (8008d50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b0a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b14:	4a8e      	ldr	r2, [pc, #568]	@ (8008d50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b16:	430b      	orrs	r3, r1
 8008b18:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b22:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008b26:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b28:	2300      	movs	r3, #0
 8008b2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b2c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008b30:	460b      	mov	r3, r1
 8008b32:	4313      	orrs	r3, r2
 8008b34:	d00e      	beq.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008b36:	4b86      	ldr	r3, [pc, #536]	@ (8008d50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	4a85      	ldr	r2, [pc, #532]	@ (8008d50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b3c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008b40:	6113      	str	r3, [r2, #16]
 8008b42:	4b83      	ldr	r3, [pc, #524]	@ (8008d50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b44:	6919      	ldr	r1, [r3, #16]
 8008b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b4a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008b4e:	4a80      	ldr	r2, [pc, #512]	@ (8008d50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b50:	430b      	orrs	r3, r1
 8008b52:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008b60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008b62:	2300      	movs	r3, #0
 8008b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b66:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	d009      	beq.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008b70:	4b77      	ldr	r3, [pc, #476]	@ (8008d50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b74:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b7e:	4a74      	ldr	r2, [pc, #464]	@ (8008d50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b80:	430b      	orrs	r3, r1
 8008b82:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008b90:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b92:	2300      	movs	r3, #0
 8008b94:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b96:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	d00a      	beq.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008ba0:	4b6b      	ldr	r3, [pc, #428]	@ (8008d50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ba4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008bb0:	4a67      	ldr	r2, [pc, #412]	@ (8008d50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bb2:	430b      	orrs	r3, r1
 8008bb4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bbe:	2100      	movs	r1, #0
 8008bc0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008bc2:	f003 0301 	and.w	r3, r3, #1
 8008bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008bc8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008bcc:	460b      	mov	r3, r1
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	d011      	beq.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bd6:	3308      	adds	r3, #8
 8008bd8:	2100      	movs	r1, #0
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f001 fa4a 	bl	800a074 <RCCEx_PLL2_Config>
 8008be0:	4603      	mov	r3, r0
 8008be2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008be6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d003      	beq.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bf2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bfe:	2100      	movs	r1, #0
 8008c00:	6239      	str	r1, [r7, #32]
 8008c02:	f003 0302 	and.w	r3, r3, #2
 8008c06:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c08:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	d011      	beq.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c16:	3308      	adds	r3, #8
 8008c18:	2101      	movs	r1, #1
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f001 fa2a 	bl	800a074 <RCCEx_PLL2_Config>
 8008c20:	4603      	mov	r3, r0
 8008c22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008c26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d003      	beq.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3e:	2100      	movs	r1, #0
 8008c40:	61b9      	str	r1, [r7, #24]
 8008c42:	f003 0304 	and.w	r3, r3, #4
 8008c46:	61fb      	str	r3, [r7, #28]
 8008c48:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	d011      	beq.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c56:	3308      	adds	r3, #8
 8008c58:	2102      	movs	r1, #2
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f001 fa0a 	bl	800a074 <RCCEx_PLL2_Config>
 8008c60:	4603      	mov	r3, r0
 8008c62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008c66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d003      	beq.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7e:	2100      	movs	r1, #0
 8008c80:	6139      	str	r1, [r7, #16]
 8008c82:	f003 0308 	and.w	r3, r3, #8
 8008c86:	617b      	str	r3, [r7, #20]
 8008c88:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	d011      	beq.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c96:	3328      	adds	r3, #40	@ 0x28
 8008c98:	2100      	movs	r1, #0
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f001 fa9c 	bl	800a1d8 <RCCEx_PLL3_Config>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d003      	beq.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	f003 0310 	and.w	r3, r3, #16
 8008cc6:	60fb      	str	r3, [r7, #12]
 8008cc8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008ccc:	460b      	mov	r3, r1
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	d011      	beq.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cd6:	3328      	adds	r3, #40	@ 0x28
 8008cd8:	2101      	movs	r1, #1
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f001 fa7c 	bl	800a1d8 <RCCEx_PLL3_Config>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d003      	beq.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cf2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfe:	2100      	movs	r1, #0
 8008d00:	6039      	str	r1, [r7, #0]
 8008d02:	f003 0320 	and.w	r3, r3, #32
 8008d06:	607b      	str	r3, [r7, #4]
 8008d08:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	d011      	beq.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d16:	3328      	adds	r3, #40	@ 0x28
 8008d18:	2102      	movs	r1, #2
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f001 fa5c 	bl	800a1d8 <RCCEx_PLL3_Config>
 8008d20:	4603      	mov	r3, r0
 8008d22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008d26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d003      	beq.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008d36:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d101      	bne.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	e000      	b.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008d42:	2301      	movs	r3, #1
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d50:	58024400 	.word	0x58024400

08008d54 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b090      	sub	sp, #64	@ 0x40
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008d5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d62:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008d66:	430b      	orrs	r3, r1
 8008d68:	f040 8094 	bne.w	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008d6c:	4b9e      	ldr	r3, [pc, #632]	@ (8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d70:	f003 0307 	and.w	r3, r3, #7
 8008d74:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d78:	2b04      	cmp	r3, #4
 8008d7a:	f200 8087 	bhi.w	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008d7e:	a201      	add	r2, pc, #4	@ (adr r2, 8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d84:	08008d99 	.word	0x08008d99
 8008d88:	08008dc1 	.word	0x08008dc1
 8008d8c:	08008de9 	.word	0x08008de9
 8008d90:	08008e85 	.word	0x08008e85
 8008d94:	08008e11 	.word	0x08008e11
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d98:	4b93      	ldr	r3, [pc, #588]	@ (8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008da0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008da4:	d108      	bne.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008da6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008daa:	4618      	mov	r0, r3
 8008dac:	f001 f810 	bl	8009dd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008db4:	f000 bd45 	b.w	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008db8:	2300      	movs	r3, #0
 8008dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dbc:	f000 bd41 	b.w	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008dc0:	4b89      	ldr	r3, [pc, #548]	@ (8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008dc8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008dcc:	d108      	bne.n	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dce:	f107 0318 	add.w	r3, r7, #24
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f000 fd54 	bl	8009880 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ddc:	f000 bd31 	b.w	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008de0:	2300      	movs	r3, #0
 8008de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008de4:	f000 bd2d 	b.w	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008de8:	4b7f      	ldr	r3, [pc, #508]	@ (8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008df0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008df4:	d108      	bne.n	8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008df6:	f107 030c 	add.w	r3, r7, #12
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f000 fe94 	bl	8009b28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e04:	f000 bd1d 	b.w	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e0c:	f000 bd19 	b.w	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008e10:	4b75      	ldr	r3, [pc, #468]	@ (8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008e18:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e1a:	4b73      	ldr	r3, [pc, #460]	@ (8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f003 0304 	and.w	r3, r3, #4
 8008e22:	2b04      	cmp	r3, #4
 8008e24:	d10c      	bne.n	8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d109      	bne.n	8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e2c:	4b6e      	ldr	r3, [pc, #440]	@ (8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	08db      	lsrs	r3, r3, #3
 8008e32:	f003 0303 	and.w	r3, r3, #3
 8008e36:	4a6d      	ldr	r2, [pc, #436]	@ (8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008e38:	fa22 f303 	lsr.w	r3, r2, r3
 8008e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e3e:	e01f      	b.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e40:	4b69      	ldr	r3, [pc, #420]	@ (8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e4c:	d106      	bne.n	8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e54:	d102      	bne.n	8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008e56:	4b66      	ldr	r3, [pc, #408]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e5a:	e011      	b.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e5c:	4b62      	ldr	r3, [pc, #392]	@ (8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e68:	d106      	bne.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e70:	d102      	bne.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008e72:	4b60      	ldr	r3, [pc, #384]	@ (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e76:	e003      	b.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008e7c:	f000 bce1 	b.w	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008e80:	f000 bcdf 	b.w	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008e84:	4b5c      	ldr	r3, [pc, #368]	@ (8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e88:	f000 bcdb 	b.w	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e90:	f000 bcd7 	b.w	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008e94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e98:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008e9c:	430b      	orrs	r3, r1
 8008e9e:	f040 80ad 	bne.w	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008ea2:	4b51      	ldr	r3, [pc, #324]	@ (8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ea4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ea6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008eaa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008eb2:	d056      	beq.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008eba:	f200 8090 	bhi.w	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec0:	2bc0      	cmp	r3, #192	@ 0xc0
 8008ec2:	f000 8088 	beq.w	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec8:	2bc0      	cmp	r3, #192	@ 0xc0
 8008eca:	f200 8088 	bhi.w	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed0:	2b80      	cmp	r3, #128	@ 0x80
 8008ed2:	d032      	beq.n	8008f3a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed6:	2b80      	cmp	r3, #128	@ 0x80
 8008ed8:	f200 8081 	bhi.w	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d003      	beq.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee4:	2b40      	cmp	r3, #64	@ 0x40
 8008ee6:	d014      	beq.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008ee8:	e079      	b.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008eea:	4b3f      	ldr	r3, [pc, #252]	@ (8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ef2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ef6:	d108      	bne.n	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ef8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008efc:	4618      	mov	r0, r3
 8008efe:	f000 ff67 	bl	8009dd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f06:	f000 bc9c 	b.w	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f0e:	f000 bc98 	b.w	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f12:	4b35      	ldr	r3, [pc, #212]	@ (8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f1e:	d108      	bne.n	8008f32 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f20:	f107 0318 	add.w	r3, r7, #24
 8008f24:	4618      	mov	r0, r3
 8008f26:	f000 fcab 	bl	8009880 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f2e:	f000 bc88 	b.w	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f32:	2300      	movs	r3, #0
 8008f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f36:	f000 bc84 	b.w	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f3a:	4b2b      	ldr	r3, [pc, #172]	@ (8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f46:	d108      	bne.n	8008f5a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f48:	f107 030c 	add.w	r3, r7, #12
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f000 fdeb 	bl	8009b28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f56:	f000 bc74 	b.w	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f5e:	f000 bc70 	b.w	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f62:	4b21      	ldr	r3, [pc, #132]	@ (8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f66:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008f6a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f6c:	4b1e      	ldr	r3, [pc, #120]	@ (8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 0304 	and.w	r3, r3, #4
 8008f74:	2b04      	cmp	r3, #4
 8008f76:	d10c      	bne.n	8008f92 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d109      	bne.n	8008f92 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	08db      	lsrs	r3, r3, #3
 8008f84:	f003 0303 	and.w	r3, r3, #3
 8008f88:	4a18      	ldr	r2, [pc, #96]	@ (8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f90:	e01f      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f92:	4b15      	ldr	r3, [pc, #84]	@ (8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f9e:	d106      	bne.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fa2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008fa6:	d102      	bne.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008fa8:	4b11      	ldr	r3, [pc, #68]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fac:	e011      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008fae:	4b0e      	ldr	r3, [pc, #56]	@ (8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008fba:	d106      	bne.n	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fc2:	d102      	bne.n	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fc8:	e003      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008fce:	f000 bc38 	b.w	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008fd2:	f000 bc36 	b.w	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008fd6:	4b08      	ldr	r3, [pc, #32]	@ (8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fda:	f000 bc32 	b.w	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fe2:	f000 bc2e 	b.w	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008fe6:	bf00      	nop
 8008fe8:	58024400 	.word	0x58024400
 8008fec:	03d09000 	.word	0x03d09000
 8008ff0:	003d0900 	.word	0x003d0900
 8008ff4:	017d7840 	.word	0x017d7840
 8008ff8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008ffc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009000:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009004:	430b      	orrs	r3, r1
 8009006:	f040 809c 	bne.w	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800900a:	4b9e      	ldr	r3, [pc, #632]	@ (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800900c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800900e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009012:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009016:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800901a:	d054      	beq.n	80090c6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800901c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800901e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009022:	f200 808b 	bhi.w	800913c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009028:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800902c:	f000 8083 	beq.w	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009032:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009036:	f200 8081 	bhi.w	800913c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800903a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800903c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009040:	d02f      	beq.n	80090a2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009044:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009048:	d878      	bhi.n	800913c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800904a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800904c:	2b00      	cmp	r3, #0
 800904e:	d004      	beq.n	800905a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009052:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009056:	d012      	beq.n	800907e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009058:	e070      	b.n	800913c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800905a:	4b8a      	ldr	r3, [pc, #552]	@ (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009062:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009066:	d107      	bne.n	8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009068:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800906c:	4618      	mov	r0, r3
 800906e:	f000 feaf 	bl	8009dd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009074:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009076:	e3e4      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009078:	2300      	movs	r3, #0
 800907a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800907c:	e3e1      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800907e:	4b81      	ldr	r3, [pc, #516]	@ (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009086:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800908a:	d107      	bne.n	800909c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800908c:	f107 0318 	add.w	r3, r7, #24
 8009090:	4618      	mov	r0, r3
 8009092:	f000 fbf5 	bl	8009880 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800909a:	e3d2      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800909c:	2300      	movs	r3, #0
 800909e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090a0:	e3cf      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090a2:	4b78      	ldr	r3, [pc, #480]	@ (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80090aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090ae:	d107      	bne.n	80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090b0:	f107 030c 	add.w	r3, r7, #12
 80090b4:	4618      	mov	r0, r3
 80090b6:	f000 fd37 	bl	8009b28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090be:	e3c0      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090c0:	2300      	movs	r3, #0
 80090c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090c4:	e3bd      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80090c6:	4b6f      	ldr	r3, [pc, #444]	@ (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80090c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80090ce:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090d0:	4b6c      	ldr	r3, [pc, #432]	@ (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f003 0304 	and.w	r3, r3, #4
 80090d8:	2b04      	cmp	r3, #4
 80090da:	d10c      	bne.n	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80090dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d109      	bne.n	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090e2:	4b68      	ldr	r3, [pc, #416]	@ (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	08db      	lsrs	r3, r3, #3
 80090e8:	f003 0303 	and.w	r3, r3, #3
 80090ec:	4a66      	ldr	r2, [pc, #408]	@ (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80090ee:	fa22 f303 	lsr.w	r3, r2, r3
 80090f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090f4:	e01e      	b.n	8009134 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80090f6:	4b63      	ldr	r3, [pc, #396]	@ (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009102:	d106      	bne.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009104:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009106:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800910a:	d102      	bne.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800910c:	4b5f      	ldr	r3, [pc, #380]	@ (800928c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800910e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009110:	e010      	b.n	8009134 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009112:	4b5c      	ldr	r3, [pc, #368]	@ (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800911a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800911e:	d106      	bne.n	800912e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009122:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009126:	d102      	bne.n	800912e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009128:	4b59      	ldr	r3, [pc, #356]	@ (8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800912a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800912c:	e002      	b.n	8009134 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800912e:	2300      	movs	r3, #0
 8009130:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009132:	e386      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009134:	e385      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009136:	4b57      	ldr	r3, [pc, #348]	@ (8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009138:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800913a:	e382      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800913c:	2300      	movs	r3, #0
 800913e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009140:	e37f      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009142:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009146:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800914a:	430b      	orrs	r3, r1
 800914c:	f040 80a7 	bne.w	800929e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009150:	4b4c      	ldr	r3, [pc, #304]	@ (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009154:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009158:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800915a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800915c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009160:	d055      	beq.n	800920e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009164:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009168:	f200 8096 	bhi.w	8009298 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800916c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009172:	f000 8084 	beq.w	800927e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009178:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800917c:	f200 808c 	bhi.w	8009298 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009182:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009186:	d030      	beq.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8009188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800918a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800918e:	f200 8083 	bhi.w	8009298 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009194:	2b00      	cmp	r3, #0
 8009196:	d004      	beq.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800919a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800919e:	d012      	beq.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80091a0:	e07a      	b.n	8009298 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091a2:	4b38      	ldr	r3, [pc, #224]	@ (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80091aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80091ae:	d107      	bne.n	80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80091b4:	4618      	mov	r0, r3
 80091b6:	f000 fe0b 	bl	8009dd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091be:	e340      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091c0:	2300      	movs	r3, #0
 80091c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091c4:	e33d      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091c6:	4b2f      	ldr	r3, [pc, #188]	@ (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80091d2:	d107      	bne.n	80091e4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091d4:	f107 0318 	add.w	r3, r7, #24
 80091d8:	4618      	mov	r0, r3
 80091da:	f000 fb51 	bl	8009880 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091e2:	e32e      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091e4:	2300      	movs	r3, #0
 80091e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091e8:	e32b      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091ea:	4b26      	ldr	r3, [pc, #152]	@ (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80091f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091f6:	d107      	bne.n	8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091f8:	f107 030c 	add.w	r3, r7, #12
 80091fc:	4618      	mov	r0, r3
 80091fe:	f000 fc93 	bl	8009b28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009206:	e31c      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009208:	2300      	movs	r3, #0
 800920a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800920c:	e319      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800920e:	4b1d      	ldr	r3, [pc, #116]	@ (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009212:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009216:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009218:	4b1a      	ldr	r3, [pc, #104]	@ (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f003 0304 	and.w	r3, r3, #4
 8009220:	2b04      	cmp	r3, #4
 8009222:	d10c      	bne.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009226:	2b00      	cmp	r3, #0
 8009228:	d109      	bne.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800922a:	4b16      	ldr	r3, [pc, #88]	@ (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	08db      	lsrs	r3, r3, #3
 8009230:	f003 0303 	and.w	r3, r3, #3
 8009234:	4a14      	ldr	r2, [pc, #80]	@ (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009236:	fa22 f303 	lsr.w	r3, r2, r3
 800923a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800923c:	e01e      	b.n	800927c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800923e:	4b11      	ldr	r3, [pc, #68]	@ (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009246:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800924a:	d106      	bne.n	800925a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800924c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800924e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009252:	d102      	bne.n	800925a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009254:	4b0d      	ldr	r3, [pc, #52]	@ (800928c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009256:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009258:	e010      	b.n	800927c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800925a:	4b0a      	ldr	r3, [pc, #40]	@ (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009262:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009266:	d106      	bne.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800926a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800926e:	d102      	bne.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009270:	4b07      	ldr	r3, [pc, #28]	@ (8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009272:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009274:	e002      	b.n	800927c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009276:	2300      	movs	r3, #0
 8009278:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800927a:	e2e2      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800927c:	e2e1      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800927e:	4b05      	ldr	r3, [pc, #20]	@ (8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009280:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009282:	e2de      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009284:	58024400 	.word	0x58024400
 8009288:	03d09000 	.word	0x03d09000
 800928c:	003d0900 	.word	0x003d0900
 8009290:	017d7840 	.word	0x017d7840
 8009294:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8009298:	2300      	movs	r3, #0
 800929a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800929c:	e2d1      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800929e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092a2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80092a6:	430b      	orrs	r3, r1
 80092a8:	f040 809c 	bne.w	80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80092ac:	4b93      	ldr	r3, [pc, #588]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092b0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80092b4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80092b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80092bc:	d054      	beq.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80092be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80092c4:	f200 808b 	bhi.w	80093de <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80092c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80092ce:	f000 8083 	beq.w	80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80092d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092d4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80092d8:	f200 8081 	bhi.w	80093de <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80092dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092e2:	d02f      	beq.n	8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80092e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092ea:	d878      	bhi.n	80093de <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80092ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d004      	beq.n	80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80092f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092f8:	d012      	beq.n	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80092fa:	e070      	b.n	80093de <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80092fc:	4b7f      	ldr	r3, [pc, #508]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009304:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009308:	d107      	bne.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800930a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800930e:	4618      	mov	r0, r3
 8009310:	f000 fd5e 	bl	8009dd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009318:	e293      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800931a:	2300      	movs	r3, #0
 800931c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800931e:	e290      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009320:	4b76      	ldr	r3, [pc, #472]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009328:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800932c:	d107      	bne.n	800933e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800932e:	f107 0318 	add.w	r3, r7, #24
 8009332:	4618      	mov	r0, r3
 8009334:	f000 faa4 	bl	8009880 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009338:	69bb      	ldr	r3, [r7, #24]
 800933a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800933c:	e281      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800933e:	2300      	movs	r3, #0
 8009340:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009342:	e27e      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009344:	4b6d      	ldr	r3, [pc, #436]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800934c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009350:	d107      	bne.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009352:	f107 030c 	add.w	r3, r7, #12
 8009356:	4618      	mov	r0, r3
 8009358:	f000 fbe6 	bl	8009b28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009360:	e26f      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009362:	2300      	movs	r3, #0
 8009364:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009366:	e26c      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009368:	4b64      	ldr	r3, [pc, #400]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800936a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800936c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009370:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009372:	4b62      	ldr	r3, [pc, #392]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f003 0304 	and.w	r3, r3, #4
 800937a:	2b04      	cmp	r3, #4
 800937c:	d10c      	bne.n	8009398 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800937e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009380:	2b00      	cmp	r3, #0
 8009382:	d109      	bne.n	8009398 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009384:	4b5d      	ldr	r3, [pc, #372]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	08db      	lsrs	r3, r3, #3
 800938a:	f003 0303 	and.w	r3, r3, #3
 800938e:	4a5c      	ldr	r2, [pc, #368]	@ (8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009390:	fa22 f303 	lsr.w	r3, r2, r3
 8009394:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009396:	e01e      	b.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009398:	4b58      	ldr	r3, [pc, #352]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093a4:	d106      	bne.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80093a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093ac:	d102      	bne.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80093ae:	4b55      	ldr	r3, [pc, #340]	@ (8009504 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80093b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093b2:	e010      	b.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80093b4:	4b51      	ldr	r3, [pc, #324]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093c0:	d106      	bne.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80093c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093c8:	d102      	bne.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80093ca:	4b4f      	ldr	r3, [pc, #316]	@ (8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80093cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093ce:	e002      	b.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80093d0:	2300      	movs	r3, #0
 80093d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80093d4:	e235      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80093d6:	e234      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80093d8:	4b4c      	ldr	r3, [pc, #304]	@ (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80093da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093dc:	e231      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80093de:	2300      	movs	r3, #0
 80093e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093e2:	e22e      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80093e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093e8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80093ec:	430b      	orrs	r3, r1
 80093ee:	f040 808f 	bne.w	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80093f2:	4b42      	ldr	r3, [pc, #264]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80093f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093f6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80093fa:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80093fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009402:	d06b      	beq.n	80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009406:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800940a:	d874      	bhi.n	80094f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800940c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800940e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009412:	d056      	beq.n	80094c2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009416:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800941a:	d86c      	bhi.n	80094f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800941c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800941e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009422:	d03b      	beq.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009426:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800942a:	d864      	bhi.n	80094f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800942c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800942e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009432:	d021      	beq.n	8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009436:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800943a:	d85c      	bhi.n	80094f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800943c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800943e:	2b00      	cmp	r3, #0
 8009440:	d004      	beq.n	800944c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009448:	d004      	beq.n	8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800944a:	e054      	b.n	80094f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800944c:	f7fe fa4c 	bl	80078e8 <HAL_RCC_GetPCLK1Freq>
 8009450:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009452:	e1f6      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009454:	4b29      	ldr	r3, [pc, #164]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800945c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009460:	d107      	bne.n	8009472 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009462:	f107 0318 	add.w	r3, r7, #24
 8009466:	4618      	mov	r0, r3
 8009468:	f000 fa0a 	bl	8009880 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009470:	e1e7      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009472:	2300      	movs	r3, #0
 8009474:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009476:	e1e4      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009478:	4b20      	ldr	r3, [pc, #128]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009480:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009484:	d107      	bne.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009486:	f107 030c 	add.w	r3, r7, #12
 800948a:	4618      	mov	r0, r3
 800948c:	f000 fb4c 	bl	8009b28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009494:	e1d5      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009496:	2300      	movs	r3, #0
 8009498:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800949a:	e1d2      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800949c:	4b17      	ldr	r3, [pc, #92]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f003 0304 	and.w	r3, r3, #4
 80094a4:	2b04      	cmp	r3, #4
 80094a6:	d109      	bne.n	80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80094a8:	4b14      	ldr	r3, [pc, #80]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	08db      	lsrs	r3, r3, #3
 80094ae:	f003 0303 	and.w	r3, r3, #3
 80094b2:	4a13      	ldr	r2, [pc, #76]	@ (8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80094b4:	fa22 f303 	lsr.w	r3, r2, r3
 80094b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094ba:	e1c2      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094bc:	2300      	movs	r3, #0
 80094be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094c0:	e1bf      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80094c2:	4b0e      	ldr	r3, [pc, #56]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094ce:	d102      	bne.n	80094d6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80094d0:	4b0c      	ldr	r3, [pc, #48]	@ (8009504 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80094d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094d4:	e1b5      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094d6:	2300      	movs	r3, #0
 80094d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094da:	e1b2      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80094dc:	4b07      	ldr	r3, [pc, #28]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094e8:	d102      	bne.n	80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80094ea:	4b07      	ldr	r3, [pc, #28]	@ (8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80094ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094ee:	e1a8      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094f0:	2300      	movs	r3, #0
 80094f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094f4:	e1a5      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80094f6:	2300      	movs	r3, #0
 80094f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094fa:	e1a2      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80094fc:	58024400 	.word	0x58024400
 8009500:	03d09000 	.word	0x03d09000
 8009504:	003d0900 	.word	0x003d0900
 8009508:	017d7840 	.word	0x017d7840
 800950c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009510:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009514:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009518:	430b      	orrs	r3, r1
 800951a:	d173      	bne.n	8009604 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800951c:	4b9c      	ldr	r3, [pc, #624]	@ (8009790 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800951e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009520:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009524:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009528:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800952c:	d02f      	beq.n	800958e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800952e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009530:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009534:	d863      	bhi.n	80095fe <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8009536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009538:	2b00      	cmp	r3, #0
 800953a:	d004      	beq.n	8009546 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800953c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800953e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009542:	d012      	beq.n	800956a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009544:	e05b      	b.n	80095fe <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009546:	4b92      	ldr	r3, [pc, #584]	@ (8009790 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800954e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009552:	d107      	bne.n	8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009554:	f107 0318 	add.w	r3, r7, #24
 8009558:	4618      	mov	r0, r3
 800955a:	f000 f991 	bl	8009880 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009562:	e16e      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009564:	2300      	movs	r3, #0
 8009566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009568:	e16b      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800956a:	4b89      	ldr	r3, [pc, #548]	@ (8009790 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009572:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009576:	d107      	bne.n	8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009578:	f107 030c 	add.w	r3, r7, #12
 800957c:	4618      	mov	r0, r3
 800957e:	f000 fad3 	bl	8009b28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009586:	e15c      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009588:	2300      	movs	r3, #0
 800958a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800958c:	e159      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800958e:	4b80      	ldr	r3, [pc, #512]	@ (8009790 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009592:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009596:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009598:	4b7d      	ldr	r3, [pc, #500]	@ (8009790 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f003 0304 	and.w	r3, r3, #4
 80095a0:	2b04      	cmp	r3, #4
 80095a2:	d10c      	bne.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80095a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d109      	bne.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095aa:	4b79      	ldr	r3, [pc, #484]	@ (8009790 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	08db      	lsrs	r3, r3, #3
 80095b0:	f003 0303 	and.w	r3, r3, #3
 80095b4:	4a77      	ldr	r2, [pc, #476]	@ (8009794 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80095b6:	fa22 f303 	lsr.w	r3, r2, r3
 80095ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095bc:	e01e      	b.n	80095fc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80095be:	4b74      	ldr	r3, [pc, #464]	@ (8009790 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095ca:	d106      	bne.n	80095da <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80095cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80095d2:	d102      	bne.n	80095da <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80095d4:	4b70      	ldr	r3, [pc, #448]	@ (8009798 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80095d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095d8:	e010      	b.n	80095fc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80095da:	4b6d      	ldr	r3, [pc, #436]	@ (8009790 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095e6:	d106      	bne.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80095e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095ee:	d102      	bne.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80095f0:	4b6a      	ldr	r3, [pc, #424]	@ (800979c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80095f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095f4:	e002      	b.n	80095fc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80095f6:	2300      	movs	r3, #0
 80095f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80095fa:	e122      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80095fc:	e121      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80095fe:	2300      	movs	r3, #0
 8009600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009602:	e11e      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009604:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009608:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800960c:	430b      	orrs	r3, r1
 800960e:	d133      	bne.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009610:	4b5f      	ldr	r3, [pc, #380]	@ (8009790 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009614:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009618:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800961a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800961c:	2b00      	cmp	r3, #0
 800961e:	d004      	beq.n	800962a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009622:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009626:	d012      	beq.n	800964e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009628:	e023      	b.n	8009672 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800962a:	4b59      	ldr	r3, [pc, #356]	@ (8009790 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009632:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009636:	d107      	bne.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009638:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800963c:	4618      	mov	r0, r3
 800963e:	f000 fbc7 	bl	8009dd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009644:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009646:	e0fc      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009648:	2300      	movs	r3, #0
 800964a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800964c:	e0f9      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800964e:	4b50      	ldr	r3, [pc, #320]	@ (8009790 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009656:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800965a:	d107      	bne.n	800966c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800965c:	f107 0318 	add.w	r3, r7, #24
 8009660:	4618      	mov	r0, r3
 8009662:	f000 f90d 	bl	8009880 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009666:	6a3b      	ldr	r3, [r7, #32]
 8009668:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800966a:	e0ea      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800966c:	2300      	movs	r3, #0
 800966e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009670:	e0e7      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009672:	2300      	movs	r3, #0
 8009674:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009676:	e0e4      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800967c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009680:	430b      	orrs	r3, r1
 8009682:	f040 808d 	bne.w	80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009686:	4b42      	ldr	r3, [pc, #264]	@ (8009790 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800968a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800968e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009692:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009696:	d06b      	beq.n	8009770 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800969a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800969e:	d874      	bhi.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80096a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096a6:	d056      	beq.n	8009756 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80096a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096ae:	d86c      	bhi.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80096b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80096b6:	d03b      	beq.n	8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80096b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80096be:	d864      	bhi.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80096c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096c6:	d021      	beq.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80096c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096ce:	d85c      	bhi.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80096d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d004      	beq.n	80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80096d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096dc:	d004      	beq.n	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80096de:	e054      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80096e0:	f000 f8b8 	bl	8009854 <HAL_RCCEx_GetD3PCLK1Freq>
 80096e4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80096e6:	e0ac      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80096e8:	4b29      	ldr	r3, [pc, #164]	@ (8009790 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80096f4:	d107      	bne.n	8009706 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096f6:	f107 0318 	add.w	r3, r7, #24
 80096fa:	4618      	mov	r0, r3
 80096fc:	f000 f8c0 	bl	8009880 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009704:	e09d      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009706:	2300      	movs	r3, #0
 8009708:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800970a:	e09a      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800970c:	4b20      	ldr	r3, [pc, #128]	@ (8009790 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009714:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009718:	d107      	bne.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800971a:	f107 030c 	add.w	r3, r7, #12
 800971e:	4618      	mov	r0, r3
 8009720:	f000 fa02 	bl	8009b28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009728:	e08b      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800972a:	2300      	movs	r3, #0
 800972c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800972e:	e088      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009730:	4b17      	ldr	r3, [pc, #92]	@ (8009790 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f003 0304 	and.w	r3, r3, #4
 8009738:	2b04      	cmp	r3, #4
 800973a:	d109      	bne.n	8009750 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800973c:	4b14      	ldr	r3, [pc, #80]	@ (8009790 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	08db      	lsrs	r3, r3, #3
 8009742:	f003 0303 	and.w	r3, r3, #3
 8009746:	4a13      	ldr	r2, [pc, #76]	@ (8009794 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009748:	fa22 f303 	lsr.w	r3, r2, r3
 800974c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800974e:	e078      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009750:	2300      	movs	r3, #0
 8009752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009754:	e075      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009756:	4b0e      	ldr	r3, [pc, #56]	@ (8009790 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800975e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009762:	d102      	bne.n	800976a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009764:	4b0c      	ldr	r3, [pc, #48]	@ (8009798 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009768:	e06b      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800976a:	2300      	movs	r3, #0
 800976c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800976e:	e068      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009770:	4b07      	ldr	r3, [pc, #28]	@ (8009790 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009778:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800977c:	d102      	bne.n	8009784 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800977e:	4b07      	ldr	r3, [pc, #28]	@ (800979c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009780:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009782:	e05e      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009784:	2300      	movs	r3, #0
 8009786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009788:	e05b      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800978a:	2300      	movs	r3, #0
 800978c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800978e:	e058      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009790:	58024400 	.word	0x58024400
 8009794:	03d09000 	.word	0x03d09000
 8009798:	003d0900 	.word	0x003d0900
 800979c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80097a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097a4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80097a8:	430b      	orrs	r3, r1
 80097aa:	d148      	bne.n	800983e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80097ac:	4b27      	ldr	r3, [pc, #156]	@ (800984c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80097ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80097b4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80097b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097bc:	d02a      	beq.n	8009814 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80097be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097c4:	d838      	bhi.n	8009838 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80097c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d004      	beq.n	80097d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80097cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097d2:	d00d      	beq.n	80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80097d4:	e030      	b.n	8009838 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80097d6:	4b1d      	ldr	r3, [pc, #116]	@ (800984c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097e2:	d102      	bne.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80097e4:	4b1a      	ldr	r3, [pc, #104]	@ (8009850 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80097e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097e8:	e02b      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097ea:	2300      	movs	r3, #0
 80097ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097ee:	e028      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80097f0:	4b16      	ldr	r3, [pc, #88]	@ (800984c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80097f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80097fc:	d107      	bne.n	800980e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80097fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009802:	4618      	mov	r0, r3
 8009804:	f000 fae4 	bl	8009dd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800980a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800980c:	e019      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800980e:	2300      	movs	r3, #0
 8009810:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009812:	e016      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009814:	4b0d      	ldr	r3, [pc, #52]	@ (800984c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800981c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009820:	d107      	bne.n	8009832 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009822:	f107 0318 	add.w	r3, r7, #24
 8009826:	4618      	mov	r0, r3
 8009828:	f000 f82a 	bl	8009880 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800982c:	69fb      	ldr	r3, [r7, #28]
 800982e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009830:	e007      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009832:	2300      	movs	r3, #0
 8009834:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009836:	e004      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009838:	2300      	movs	r3, #0
 800983a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800983c:	e001      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800983e:	2300      	movs	r3, #0
 8009840:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009844:	4618      	mov	r0, r3
 8009846:	3740      	adds	r7, #64	@ 0x40
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}
 800984c:	58024400 	.word	0x58024400
 8009850:	017d7840 	.word	0x017d7840

08009854 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009858:	f7fe f816 	bl	8007888 <HAL_RCC_GetHCLKFreq>
 800985c:	4602      	mov	r2, r0
 800985e:	4b06      	ldr	r3, [pc, #24]	@ (8009878 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009860:	6a1b      	ldr	r3, [r3, #32]
 8009862:	091b      	lsrs	r3, r3, #4
 8009864:	f003 0307 	and.w	r3, r3, #7
 8009868:	4904      	ldr	r1, [pc, #16]	@ (800987c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800986a:	5ccb      	ldrb	r3, [r1, r3]
 800986c:	f003 031f 	and.w	r3, r3, #31
 8009870:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009874:	4618      	mov	r0, r3
 8009876:	bd80      	pop	{r7, pc}
 8009878:	58024400 	.word	0x58024400
 800987c:	08012918 	.word	0x08012918

08009880 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009880:	b480      	push	{r7}
 8009882:	b089      	sub	sp, #36	@ 0x24
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009888:	4ba1      	ldr	r3, [pc, #644]	@ (8009b10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800988a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800988c:	f003 0303 	and.w	r3, r3, #3
 8009890:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009892:	4b9f      	ldr	r3, [pc, #636]	@ (8009b10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009896:	0b1b      	lsrs	r3, r3, #12
 8009898:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800989c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800989e:	4b9c      	ldr	r3, [pc, #624]	@ (8009b10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098a2:	091b      	lsrs	r3, r3, #4
 80098a4:	f003 0301 	and.w	r3, r3, #1
 80098a8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80098aa:	4b99      	ldr	r3, [pc, #612]	@ (8009b10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098ae:	08db      	lsrs	r3, r3, #3
 80098b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80098b4:	693a      	ldr	r2, [r7, #16]
 80098b6:	fb02 f303 	mul.w	r3, r2, r3
 80098ba:	ee07 3a90 	vmov	s15, r3
 80098be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	f000 8111 	beq.w	8009af0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80098ce:	69bb      	ldr	r3, [r7, #24]
 80098d0:	2b02      	cmp	r3, #2
 80098d2:	f000 8083 	beq.w	80099dc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80098d6:	69bb      	ldr	r3, [r7, #24]
 80098d8:	2b02      	cmp	r3, #2
 80098da:	f200 80a1 	bhi.w	8009a20 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80098de:	69bb      	ldr	r3, [r7, #24]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d003      	beq.n	80098ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80098e4:	69bb      	ldr	r3, [r7, #24]
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d056      	beq.n	8009998 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80098ea:	e099      	b.n	8009a20 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098ec:	4b88      	ldr	r3, [pc, #544]	@ (8009b10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f003 0320 	and.w	r3, r3, #32
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d02d      	beq.n	8009954 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098f8:	4b85      	ldr	r3, [pc, #532]	@ (8009b10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	08db      	lsrs	r3, r3, #3
 80098fe:	f003 0303 	and.w	r3, r3, #3
 8009902:	4a84      	ldr	r2, [pc, #528]	@ (8009b14 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009904:	fa22 f303 	lsr.w	r3, r2, r3
 8009908:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	ee07 3a90 	vmov	s15, r3
 8009910:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	ee07 3a90 	vmov	s15, r3
 800991a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800991e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009922:	4b7b      	ldr	r3, [pc, #492]	@ (8009b10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800992a:	ee07 3a90 	vmov	s15, r3
 800992e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009932:	ed97 6a03 	vldr	s12, [r7, #12]
 8009936:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009b18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800993a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800993e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009942:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800994a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800994e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009952:	e087      	b.n	8009a64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	ee07 3a90 	vmov	s15, r3
 800995a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800995e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009b1c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009966:	4b6a      	ldr	r3, [pc, #424]	@ (8009b10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800996a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800996e:	ee07 3a90 	vmov	s15, r3
 8009972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009976:	ed97 6a03 	vldr	s12, [r7, #12]
 800997a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009b18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800997e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009986:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800998a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800998e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009992:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009996:	e065      	b.n	8009a64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	ee07 3a90 	vmov	s15, r3
 800999e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099a2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80099a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099aa:	4b59      	ldr	r3, [pc, #356]	@ (8009b10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099b2:	ee07 3a90 	vmov	s15, r3
 80099b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80099be:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009b18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80099c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099da:	e043      	b.n	8009a64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	ee07 3a90 	vmov	s15, r3
 80099e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099e6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009b24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80099ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099ee:	4b48      	ldr	r3, [pc, #288]	@ (8009b10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099f6:	ee07 3a90 	vmov	s15, r3
 80099fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a02:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009b18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a1e:	e021      	b.n	8009a64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	ee07 3a90 	vmov	s15, r3
 8009a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a2a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a32:	4b37      	ldr	r3, [pc, #220]	@ (8009b10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a3a:	ee07 3a90 	vmov	s15, r3
 8009a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a42:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a46:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009b18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a62:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009a64:	4b2a      	ldr	r3, [pc, #168]	@ (8009b10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a68:	0a5b      	lsrs	r3, r3, #9
 8009a6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a6e:	ee07 3a90 	vmov	s15, r3
 8009a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a8a:	ee17 2a90 	vmov	r2, s15
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009a92:	4b1f      	ldr	r3, [pc, #124]	@ (8009b10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a96:	0c1b      	lsrs	r3, r3, #16
 8009a98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a9c:	ee07 3a90 	vmov	s15, r3
 8009aa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aa4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009aa8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009aac:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ab0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ab4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ab8:	ee17 2a90 	vmov	r2, s15
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009ac0:	4b13      	ldr	r3, [pc, #76]	@ (8009b10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ac4:	0e1b      	lsrs	r3, r3, #24
 8009ac6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009aca:	ee07 3a90 	vmov	s15, r3
 8009ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ad2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ad6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ada:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ade:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ae2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ae6:	ee17 2a90 	vmov	r2, s15
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009aee:	e008      	b.n	8009b02 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2200      	movs	r2, #0
 8009af4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	609a      	str	r2, [r3, #8]
}
 8009b02:	bf00      	nop
 8009b04:	3724      	adds	r7, #36	@ 0x24
 8009b06:	46bd      	mov	sp, r7
 8009b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0c:	4770      	bx	lr
 8009b0e:	bf00      	nop
 8009b10:	58024400 	.word	0x58024400
 8009b14:	03d09000 	.word	0x03d09000
 8009b18:	46000000 	.word	0x46000000
 8009b1c:	4c742400 	.word	0x4c742400
 8009b20:	4a742400 	.word	0x4a742400
 8009b24:	4bbebc20 	.word	0x4bbebc20

08009b28 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b089      	sub	sp, #36	@ 0x24
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b30:	4ba1      	ldr	r3, [pc, #644]	@ (8009db8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b34:	f003 0303 	and.w	r3, r3, #3
 8009b38:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009b3a:	4b9f      	ldr	r3, [pc, #636]	@ (8009db8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b3e:	0d1b      	lsrs	r3, r3, #20
 8009b40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b44:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009b46:	4b9c      	ldr	r3, [pc, #624]	@ (8009db8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b4a:	0a1b      	lsrs	r3, r3, #8
 8009b4c:	f003 0301 	and.w	r3, r3, #1
 8009b50:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009b52:	4b99      	ldr	r3, [pc, #612]	@ (8009db8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b56:	08db      	lsrs	r3, r3, #3
 8009b58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b5c:	693a      	ldr	r2, [r7, #16]
 8009b5e:	fb02 f303 	mul.w	r3, r2, r3
 8009b62:	ee07 3a90 	vmov	s15, r3
 8009b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	f000 8111 	beq.w	8009d98 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009b76:	69bb      	ldr	r3, [r7, #24]
 8009b78:	2b02      	cmp	r3, #2
 8009b7a:	f000 8083 	beq.w	8009c84 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	2b02      	cmp	r3, #2
 8009b82:	f200 80a1 	bhi.w	8009cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009b86:	69bb      	ldr	r3, [r7, #24]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d003      	beq.n	8009b94 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009b8c:	69bb      	ldr	r3, [r7, #24]
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d056      	beq.n	8009c40 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009b92:	e099      	b.n	8009cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b94:	4b88      	ldr	r3, [pc, #544]	@ (8009db8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f003 0320 	and.w	r3, r3, #32
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d02d      	beq.n	8009bfc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ba0:	4b85      	ldr	r3, [pc, #532]	@ (8009db8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	08db      	lsrs	r3, r3, #3
 8009ba6:	f003 0303 	and.w	r3, r3, #3
 8009baa:	4a84      	ldr	r2, [pc, #528]	@ (8009dbc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009bac:	fa22 f303 	lsr.w	r3, r2, r3
 8009bb0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	ee07 3a90 	vmov	s15, r3
 8009bb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	ee07 3a90 	vmov	s15, r3
 8009bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bca:	4b7b      	ldr	r3, [pc, #492]	@ (8009db8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bd2:	ee07 3a90 	vmov	s15, r3
 8009bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bda:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bde:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bf6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009bfa:	e087      	b.n	8009d0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	ee07 3a90 	vmov	s15, r3
 8009c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c06:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c0e:	4b6a      	ldr	r3, [pc, #424]	@ (8009db8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c16:	ee07 3a90 	vmov	s15, r3
 8009c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c22:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c3e:	e065      	b.n	8009d0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	ee07 3a90 	vmov	s15, r3
 8009c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c4a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c52:	4b59      	ldr	r3, [pc, #356]	@ (8009db8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c5a:	ee07 3a90 	vmov	s15, r3
 8009c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c62:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c66:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c82:	e043      	b.n	8009d0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	ee07 3a90 	vmov	s15, r3
 8009c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c8e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009dcc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c96:	4b48      	ldr	r3, [pc, #288]	@ (8009db8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c9e:	ee07 3a90 	vmov	s15, r3
 8009ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ca6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009caa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009cc6:	e021      	b.n	8009d0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	ee07 3a90 	vmov	s15, r3
 8009cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cd2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cda:	4b37      	ldr	r3, [pc, #220]	@ (8009db8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ce2:	ee07 3a90 	vmov	s15, r3
 8009ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cea:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d0a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009d0c:	4b2a      	ldr	r3, [pc, #168]	@ (8009db8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d10:	0a5b      	lsrs	r3, r3, #9
 8009d12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d16:	ee07 3a90 	vmov	s15, r3
 8009d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009d22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d26:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d32:	ee17 2a90 	vmov	r2, s15
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009d3a:	4b1f      	ldr	r3, [pc, #124]	@ (8009db8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d3e:	0c1b      	lsrs	r3, r3, #16
 8009d40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d44:	ee07 3a90 	vmov	s15, r3
 8009d48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009d50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d54:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d60:	ee17 2a90 	vmov	r2, s15
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009d68:	4b13      	ldr	r3, [pc, #76]	@ (8009db8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d6c:	0e1b      	lsrs	r3, r3, #24
 8009d6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d72:	ee07 3a90 	vmov	s15, r3
 8009d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009d7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d82:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d8e:	ee17 2a90 	vmov	r2, s15
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009d96:	e008      	b.n	8009daa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	609a      	str	r2, [r3, #8]
}
 8009daa:	bf00      	nop
 8009dac:	3724      	adds	r7, #36	@ 0x24
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr
 8009db6:	bf00      	nop
 8009db8:	58024400 	.word	0x58024400
 8009dbc:	03d09000 	.word	0x03d09000
 8009dc0:	46000000 	.word	0x46000000
 8009dc4:	4c742400 	.word	0x4c742400
 8009dc8:	4a742400 	.word	0x4a742400
 8009dcc:	4bbebc20 	.word	0x4bbebc20

08009dd0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b089      	sub	sp, #36	@ 0x24
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009dd8:	4ba0      	ldr	r3, [pc, #640]	@ (800a05c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ddc:	f003 0303 	and.w	r3, r3, #3
 8009de0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009de2:	4b9e      	ldr	r3, [pc, #632]	@ (800a05c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009de6:	091b      	lsrs	r3, r3, #4
 8009de8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009dec:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009dee:	4b9b      	ldr	r3, [pc, #620]	@ (800a05c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009df2:	f003 0301 	and.w	r3, r3, #1
 8009df6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009df8:	4b98      	ldr	r3, [pc, #608]	@ (800a05c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009dfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dfc:	08db      	lsrs	r3, r3, #3
 8009dfe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e02:	693a      	ldr	r2, [r7, #16]
 8009e04:	fb02 f303 	mul.w	r3, r2, r3
 8009e08:	ee07 3a90 	vmov	s15, r3
 8009e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e10:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	f000 8111 	beq.w	800a03e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009e1c:	69bb      	ldr	r3, [r7, #24]
 8009e1e:	2b02      	cmp	r3, #2
 8009e20:	f000 8083 	beq.w	8009f2a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009e24:	69bb      	ldr	r3, [r7, #24]
 8009e26:	2b02      	cmp	r3, #2
 8009e28:	f200 80a1 	bhi.w	8009f6e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009e2c:	69bb      	ldr	r3, [r7, #24]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d003      	beq.n	8009e3a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009e32:	69bb      	ldr	r3, [r7, #24]
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	d056      	beq.n	8009ee6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009e38:	e099      	b.n	8009f6e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e3a:	4b88      	ldr	r3, [pc, #544]	@ (800a05c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f003 0320 	and.w	r3, r3, #32
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d02d      	beq.n	8009ea2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e46:	4b85      	ldr	r3, [pc, #532]	@ (800a05c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	08db      	lsrs	r3, r3, #3
 8009e4c:	f003 0303 	and.w	r3, r3, #3
 8009e50:	4a83      	ldr	r2, [pc, #524]	@ (800a060 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009e52:	fa22 f303 	lsr.w	r3, r2, r3
 8009e56:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	ee07 3a90 	vmov	s15, r3
 8009e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	ee07 3a90 	vmov	s15, r3
 8009e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e70:	4b7a      	ldr	r3, [pc, #488]	@ (800a05c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e78:	ee07 3a90 	vmov	s15, r3
 8009e7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e80:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e84:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a064 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e9c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009ea0:	e087      	b.n	8009fb2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	ee07 3a90 	vmov	s15, r3
 8009ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eac:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a068 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009eb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eb4:	4b69      	ldr	r3, [pc, #420]	@ (800a05c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ebc:	ee07 3a90 	vmov	s15, r3
 8009ec0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ec4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ec8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a064 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ecc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ed0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ed4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ed8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ee0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ee4:	e065      	b.n	8009fb2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	ee07 3a90 	vmov	s15, r3
 8009eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ef0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a06c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009ef4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ef8:	4b58      	ldr	r3, [pc, #352]	@ (800a05c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f00:	ee07 3a90 	vmov	s15, r3
 8009f04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f08:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f0c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a064 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009f10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f28:	e043      	b.n	8009fb2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	ee07 3a90 	vmov	s15, r3
 8009f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f34:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a070 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009f38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f3c:	4b47      	ldr	r3, [pc, #284]	@ (800a05c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f44:	ee07 3a90 	vmov	s15, r3
 8009f48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f4c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f50:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a064 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009f54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f6c:	e021      	b.n	8009fb2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	ee07 3a90 	vmov	s15, r3
 8009f74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f78:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a068 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009f7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f80:	4b36      	ldr	r3, [pc, #216]	@ (800a05c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f88:	ee07 3a90 	vmov	s15, r3
 8009f8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f90:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f94:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a064 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009f98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fa0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009fa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009fb0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009fb2:	4b2a      	ldr	r3, [pc, #168]	@ (800a05c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fb6:	0a5b      	lsrs	r3, r3, #9
 8009fb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009fbc:	ee07 3a90 	vmov	s15, r3
 8009fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fc4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009fc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fd8:	ee17 2a90 	vmov	r2, s15
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009fe0:	4b1e      	ldr	r3, [pc, #120]	@ (800a05c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fe4:	0c1b      	lsrs	r3, r3, #16
 8009fe6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009fea:	ee07 3a90 	vmov	s15, r3
 8009fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ff2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ff6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ffa:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ffe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a002:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a006:	ee17 2a90 	vmov	r2, s15
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a00e:	4b13      	ldr	r3, [pc, #76]	@ (800a05c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a012:	0e1b      	lsrs	r3, r3, #24
 800a014:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a018:	ee07 3a90 	vmov	s15, r3
 800a01c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a020:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a024:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a028:	edd7 6a07 	vldr	s13, [r7, #28]
 800a02c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a030:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a034:	ee17 2a90 	vmov	r2, s15
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a03c:	e008      	b.n	800a050 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2200      	movs	r2, #0
 800a042:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2200      	movs	r2, #0
 800a048:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2200      	movs	r2, #0
 800a04e:	609a      	str	r2, [r3, #8]
}
 800a050:	bf00      	nop
 800a052:	3724      	adds	r7, #36	@ 0x24
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr
 800a05c:	58024400 	.word	0x58024400
 800a060:	03d09000 	.word	0x03d09000
 800a064:	46000000 	.word	0x46000000
 800a068:	4c742400 	.word	0x4c742400
 800a06c:	4a742400 	.word	0x4a742400
 800a070:	4bbebc20 	.word	0x4bbebc20

0800a074 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a07e:	2300      	movs	r3, #0
 800a080:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a082:	4b53      	ldr	r3, [pc, #332]	@ (800a1d0 <RCCEx_PLL2_Config+0x15c>)
 800a084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a086:	f003 0303 	and.w	r3, r3, #3
 800a08a:	2b03      	cmp	r3, #3
 800a08c:	d101      	bne.n	800a092 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a08e:	2301      	movs	r3, #1
 800a090:	e099      	b.n	800a1c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a092:	4b4f      	ldr	r3, [pc, #316]	@ (800a1d0 <RCCEx_PLL2_Config+0x15c>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4a4e      	ldr	r2, [pc, #312]	@ (800a1d0 <RCCEx_PLL2_Config+0x15c>)
 800a098:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a09c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a09e:	f7f7 fef9 	bl	8001e94 <HAL_GetTick>
 800a0a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a0a4:	e008      	b.n	800a0b8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a0a6:	f7f7 fef5 	bl	8001e94 <HAL_GetTick>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	1ad3      	subs	r3, r2, r3
 800a0b0:	2b02      	cmp	r3, #2
 800a0b2:	d901      	bls.n	800a0b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a0b4:	2303      	movs	r3, #3
 800a0b6:	e086      	b.n	800a1c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a0b8:	4b45      	ldr	r3, [pc, #276]	@ (800a1d0 <RCCEx_PLL2_Config+0x15c>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d1f0      	bne.n	800a0a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a0c4:	4b42      	ldr	r3, [pc, #264]	@ (800a1d0 <RCCEx_PLL2_Config+0x15c>)
 800a0c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0c8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	031b      	lsls	r3, r3, #12
 800a0d2:	493f      	ldr	r1, [pc, #252]	@ (800a1d0 <RCCEx_PLL2_Config+0x15c>)
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	628b      	str	r3, [r1, #40]	@ 0x28
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	689b      	ldr	r3, [r3, #8]
 800a0e6:	3b01      	subs	r3, #1
 800a0e8:	025b      	lsls	r3, r3, #9
 800a0ea:	b29b      	uxth	r3, r3
 800a0ec:	431a      	orrs	r2, r3
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	3b01      	subs	r3, #1
 800a0f4:	041b      	lsls	r3, r3, #16
 800a0f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a0fa:	431a      	orrs	r2, r3
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	691b      	ldr	r3, [r3, #16]
 800a100:	3b01      	subs	r3, #1
 800a102:	061b      	lsls	r3, r3, #24
 800a104:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a108:	4931      	ldr	r1, [pc, #196]	@ (800a1d0 <RCCEx_PLL2_Config+0x15c>)
 800a10a:	4313      	orrs	r3, r2
 800a10c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a10e:	4b30      	ldr	r3, [pc, #192]	@ (800a1d0 <RCCEx_PLL2_Config+0x15c>)
 800a110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a112:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	695b      	ldr	r3, [r3, #20]
 800a11a:	492d      	ldr	r1, [pc, #180]	@ (800a1d0 <RCCEx_PLL2_Config+0x15c>)
 800a11c:	4313      	orrs	r3, r2
 800a11e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a120:	4b2b      	ldr	r3, [pc, #172]	@ (800a1d0 <RCCEx_PLL2_Config+0x15c>)
 800a122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a124:	f023 0220 	bic.w	r2, r3, #32
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	699b      	ldr	r3, [r3, #24]
 800a12c:	4928      	ldr	r1, [pc, #160]	@ (800a1d0 <RCCEx_PLL2_Config+0x15c>)
 800a12e:	4313      	orrs	r3, r2
 800a130:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a132:	4b27      	ldr	r3, [pc, #156]	@ (800a1d0 <RCCEx_PLL2_Config+0x15c>)
 800a134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a136:	4a26      	ldr	r2, [pc, #152]	@ (800a1d0 <RCCEx_PLL2_Config+0x15c>)
 800a138:	f023 0310 	bic.w	r3, r3, #16
 800a13c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a13e:	4b24      	ldr	r3, [pc, #144]	@ (800a1d0 <RCCEx_PLL2_Config+0x15c>)
 800a140:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a142:	4b24      	ldr	r3, [pc, #144]	@ (800a1d4 <RCCEx_PLL2_Config+0x160>)
 800a144:	4013      	ands	r3, r2
 800a146:	687a      	ldr	r2, [r7, #4]
 800a148:	69d2      	ldr	r2, [r2, #28]
 800a14a:	00d2      	lsls	r2, r2, #3
 800a14c:	4920      	ldr	r1, [pc, #128]	@ (800a1d0 <RCCEx_PLL2_Config+0x15c>)
 800a14e:	4313      	orrs	r3, r2
 800a150:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a152:	4b1f      	ldr	r3, [pc, #124]	@ (800a1d0 <RCCEx_PLL2_Config+0x15c>)
 800a154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a156:	4a1e      	ldr	r2, [pc, #120]	@ (800a1d0 <RCCEx_PLL2_Config+0x15c>)
 800a158:	f043 0310 	orr.w	r3, r3, #16
 800a15c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d106      	bne.n	800a172 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a164:	4b1a      	ldr	r3, [pc, #104]	@ (800a1d0 <RCCEx_PLL2_Config+0x15c>)
 800a166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a168:	4a19      	ldr	r2, [pc, #100]	@ (800a1d0 <RCCEx_PLL2_Config+0x15c>)
 800a16a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a16e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a170:	e00f      	b.n	800a192 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	2b01      	cmp	r3, #1
 800a176:	d106      	bne.n	800a186 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a178:	4b15      	ldr	r3, [pc, #84]	@ (800a1d0 <RCCEx_PLL2_Config+0x15c>)
 800a17a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a17c:	4a14      	ldr	r2, [pc, #80]	@ (800a1d0 <RCCEx_PLL2_Config+0x15c>)
 800a17e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a182:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a184:	e005      	b.n	800a192 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a186:	4b12      	ldr	r3, [pc, #72]	@ (800a1d0 <RCCEx_PLL2_Config+0x15c>)
 800a188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a18a:	4a11      	ldr	r2, [pc, #68]	@ (800a1d0 <RCCEx_PLL2_Config+0x15c>)
 800a18c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a190:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a192:	4b0f      	ldr	r3, [pc, #60]	@ (800a1d0 <RCCEx_PLL2_Config+0x15c>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a0e      	ldr	r2, [pc, #56]	@ (800a1d0 <RCCEx_PLL2_Config+0x15c>)
 800a198:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a19c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a19e:	f7f7 fe79 	bl	8001e94 <HAL_GetTick>
 800a1a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a1a4:	e008      	b.n	800a1b8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a1a6:	f7f7 fe75 	bl	8001e94 <HAL_GetTick>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	1ad3      	subs	r3, r2, r3
 800a1b0:	2b02      	cmp	r3, #2
 800a1b2:	d901      	bls.n	800a1b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a1b4:	2303      	movs	r3, #3
 800a1b6:	e006      	b.n	800a1c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a1b8:	4b05      	ldr	r3, [pc, #20]	@ (800a1d0 <RCCEx_PLL2_Config+0x15c>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d0f0      	beq.n	800a1a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a1c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3710      	adds	r7, #16
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	58024400 	.word	0x58024400
 800a1d4:	ffff0007 	.word	0xffff0007

0800a1d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a1e6:	4b53      	ldr	r3, [pc, #332]	@ (800a334 <RCCEx_PLL3_Config+0x15c>)
 800a1e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1ea:	f003 0303 	and.w	r3, r3, #3
 800a1ee:	2b03      	cmp	r3, #3
 800a1f0:	d101      	bne.n	800a1f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	e099      	b.n	800a32a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a1f6:	4b4f      	ldr	r3, [pc, #316]	@ (800a334 <RCCEx_PLL3_Config+0x15c>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a4e      	ldr	r2, [pc, #312]	@ (800a334 <RCCEx_PLL3_Config+0x15c>)
 800a1fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a200:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a202:	f7f7 fe47 	bl	8001e94 <HAL_GetTick>
 800a206:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a208:	e008      	b.n	800a21c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a20a:	f7f7 fe43 	bl	8001e94 <HAL_GetTick>
 800a20e:	4602      	mov	r2, r0
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	1ad3      	subs	r3, r2, r3
 800a214:	2b02      	cmp	r3, #2
 800a216:	d901      	bls.n	800a21c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a218:	2303      	movs	r3, #3
 800a21a:	e086      	b.n	800a32a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a21c:	4b45      	ldr	r3, [pc, #276]	@ (800a334 <RCCEx_PLL3_Config+0x15c>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a224:	2b00      	cmp	r3, #0
 800a226:	d1f0      	bne.n	800a20a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a228:	4b42      	ldr	r3, [pc, #264]	@ (800a334 <RCCEx_PLL3_Config+0x15c>)
 800a22a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a22c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	051b      	lsls	r3, r3, #20
 800a236:	493f      	ldr	r1, [pc, #252]	@ (800a334 <RCCEx_PLL3_Config+0x15c>)
 800a238:	4313      	orrs	r3, r2
 800a23a:	628b      	str	r3, [r1, #40]	@ 0x28
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	3b01      	subs	r3, #1
 800a242:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	689b      	ldr	r3, [r3, #8]
 800a24a:	3b01      	subs	r3, #1
 800a24c:	025b      	lsls	r3, r3, #9
 800a24e:	b29b      	uxth	r3, r3
 800a250:	431a      	orrs	r2, r3
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	68db      	ldr	r3, [r3, #12]
 800a256:	3b01      	subs	r3, #1
 800a258:	041b      	lsls	r3, r3, #16
 800a25a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a25e:	431a      	orrs	r2, r3
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	691b      	ldr	r3, [r3, #16]
 800a264:	3b01      	subs	r3, #1
 800a266:	061b      	lsls	r3, r3, #24
 800a268:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a26c:	4931      	ldr	r1, [pc, #196]	@ (800a334 <RCCEx_PLL3_Config+0x15c>)
 800a26e:	4313      	orrs	r3, r2
 800a270:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a272:	4b30      	ldr	r3, [pc, #192]	@ (800a334 <RCCEx_PLL3_Config+0x15c>)
 800a274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a276:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	695b      	ldr	r3, [r3, #20]
 800a27e:	492d      	ldr	r1, [pc, #180]	@ (800a334 <RCCEx_PLL3_Config+0x15c>)
 800a280:	4313      	orrs	r3, r2
 800a282:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a284:	4b2b      	ldr	r3, [pc, #172]	@ (800a334 <RCCEx_PLL3_Config+0x15c>)
 800a286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a288:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	699b      	ldr	r3, [r3, #24]
 800a290:	4928      	ldr	r1, [pc, #160]	@ (800a334 <RCCEx_PLL3_Config+0x15c>)
 800a292:	4313      	orrs	r3, r2
 800a294:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a296:	4b27      	ldr	r3, [pc, #156]	@ (800a334 <RCCEx_PLL3_Config+0x15c>)
 800a298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a29a:	4a26      	ldr	r2, [pc, #152]	@ (800a334 <RCCEx_PLL3_Config+0x15c>)
 800a29c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a2a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a2a2:	4b24      	ldr	r3, [pc, #144]	@ (800a334 <RCCEx_PLL3_Config+0x15c>)
 800a2a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a2a6:	4b24      	ldr	r3, [pc, #144]	@ (800a338 <RCCEx_PLL3_Config+0x160>)
 800a2a8:	4013      	ands	r3, r2
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	69d2      	ldr	r2, [r2, #28]
 800a2ae:	00d2      	lsls	r2, r2, #3
 800a2b0:	4920      	ldr	r1, [pc, #128]	@ (800a334 <RCCEx_PLL3_Config+0x15c>)
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a2b6:	4b1f      	ldr	r3, [pc, #124]	@ (800a334 <RCCEx_PLL3_Config+0x15c>)
 800a2b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2ba:	4a1e      	ldr	r2, [pc, #120]	@ (800a334 <RCCEx_PLL3_Config+0x15c>)
 800a2bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a2c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d106      	bne.n	800a2d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a2c8:	4b1a      	ldr	r3, [pc, #104]	@ (800a334 <RCCEx_PLL3_Config+0x15c>)
 800a2ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2cc:	4a19      	ldr	r2, [pc, #100]	@ (800a334 <RCCEx_PLL3_Config+0x15c>)
 800a2ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a2d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a2d4:	e00f      	b.n	800a2f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	d106      	bne.n	800a2ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a2dc:	4b15      	ldr	r3, [pc, #84]	@ (800a334 <RCCEx_PLL3_Config+0x15c>)
 800a2de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2e0:	4a14      	ldr	r2, [pc, #80]	@ (800a334 <RCCEx_PLL3_Config+0x15c>)
 800a2e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a2e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a2e8:	e005      	b.n	800a2f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a2ea:	4b12      	ldr	r3, [pc, #72]	@ (800a334 <RCCEx_PLL3_Config+0x15c>)
 800a2ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2ee:	4a11      	ldr	r2, [pc, #68]	@ (800a334 <RCCEx_PLL3_Config+0x15c>)
 800a2f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a2f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a2f6:	4b0f      	ldr	r3, [pc, #60]	@ (800a334 <RCCEx_PLL3_Config+0x15c>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4a0e      	ldr	r2, [pc, #56]	@ (800a334 <RCCEx_PLL3_Config+0x15c>)
 800a2fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a300:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a302:	f7f7 fdc7 	bl	8001e94 <HAL_GetTick>
 800a306:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a308:	e008      	b.n	800a31c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a30a:	f7f7 fdc3 	bl	8001e94 <HAL_GetTick>
 800a30e:	4602      	mov	r2, r0
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	1ad3      	subs	r3, r2, r3
 800a314:	2b02      	cmp	r3, #2
 800a316:	d901      	bls.n	800a31c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a318:	2303      	movs	r3, #3
 800a31a:	e006      	b.n	800a32a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a31c:	4b05      	ldr	r3, [pc, #20]	@ (800a334 <RCCEx_PLL3_Config+0x15c>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a324:	2b00      	cmp	r3, #0
 800a326:	d0f0      	beq.n	800a30a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a328:	7bfb      	ldrb	r3, [r7, #15]
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3710      	adds	r7, #16
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
 800a332:	bf00      	nop
 800a334:	58024400 	.word	0x58024400
 800a338:	ffff0007 	.word	0xffff0007

0800a33c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b082      	sub	sp, #8
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d101      	bne.n	800a34e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a34a:	2301      	movs	r3, #1
 800a34c:	e049      	b.n	800a3e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a354:	b2db      	uxtb	r3, r3
 800a356:	2b00      	cmp	r3, #0
 800a358:	d106      	bne.n	800a368 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2200      	movs	r2, #0
 800a35e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f7f7 fbd0 	bl	8001b08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2202      	movs	r2, #2
 800a36c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681a      	ldr	r2, [r3, #0]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	3304      	adds	r3, #4
 800a378:	4619      	mov	r1, r3
 800a37a:	4610      	mov	r0, r2
 800a37c:	f000 fbfc 	bl	800ab78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2201      	movs	r2, #1
 800a384:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2201      	movs	r2, #1
 800a38c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2201      	movs	r2, #1
 800a394:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2201      	movs	r2, #1
 800a39c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a3e0:	2300      	movs	r3, #0
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3708      	adds	r7, #8
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}

0800a3ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a3ea:	b580      	push	{r7, lr}
 800a3ec:	b082      	sub	sp, #8
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d101      	bne.n	800a3fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	e049      	b.n	800a490 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a402:	b2db      	uxtb	r3, r3
 800a404:	2b00      	cmp	r3, #0
 800a406:	d106      	bne.n	800a416 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2200      	movs	r2, #0
 800a40c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f000 f841 	bl	800a498 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2202      	movs	r2, #2
 800a41a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	3304      	adds	r3, #4
 800a426:	4619      	mov	r1, r3
 800a428:	4610      	mov	r0, r2
 800a42a:	f000 fba5 	bl	800ab78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2201      	movs	r2, #1
 800a432:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2201      	movs	r2, #1
 800a43a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2201      	movs	r2, #1
 800a442:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2201      	movs	r2, #1
 800a44a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2201      	movs	r2, #1
 800a452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2201      	movs	r2, #1
 800a45a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2201      	movs	r2, #1
 800a462:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2201      	movs	r2, #1
 800a46a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2201      	movs	r2, #1
 800a472:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2201      	movs	r2, #1
 800a47a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2201      	movs	r2, #1
 800a482:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2201      	movs	r2, #1
 800a48a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a48e:	2300      	movs	r3, #0
}
 800a490:	4618      	mov	r0, r3
 800a492:	3708      	adds	r7, #8
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a498:	b480      	push	{r7}
 800a49a:	b083      	sub	sp, #12
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a4a0:	bf00      	nop
 800a4a2:	370c      	adds	r7, #12
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr

0800a4ac <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d109      	bne.n	800a4d4 <HAL_TIM_PWM_Start_IT+0x28>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	bf14      	ite	ne
 800a4cc:	2301      	movne	r3, #1
 800a4ce:	2300      	moveq	r3, #0
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	e03c      	b.n	800a54e <HAL_TIM_PWM_Start_IT+0xa2>
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	2b04      	cmp	r3, #4
 800a4d8:	d109      	bne.n	800a4ee <HAL_TIM_PWM_Start_IT+0x42>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	bf14      	ite	ne
 800a4e6:	2301      	movne	r3, #1
 800a4e8:	2300      	moveq	r3, #0
 800a4ea:	b2db      	uxtb	r3, r3
 800a4ec:	e02f      	b.n	800a54e <HAL_TIM_PWM_Start_IT+0xa2>
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	2b08      	cmp	r3, #8
 800a4f2:	d109      	bne.n	800a508 <HAL_TIM_PWM_Start_IT+0x5c>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	bf14      	ite	ne
 800a500:	2301      	movne	r3, #1
 800a502:	2300      	moveq	r3, #0
 800a504:	b2db      	uxtb	r3, r3
 800a506:	e022      	b.n	800a54e <HAL_TIM_PWM_Start_IT+0xa2>
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	2b0c      	cmp	r3, #12
 800a50c:	d109      	bne.n	800a522 <HAL_TIM_PWM_Start_IT+0x76>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a514:	b2db      	uxtb	r3, r3
 800a516:	2b01      	cmp	r3, #1
 800a518:	bf14      	ite	ne
 800a51a:	2301      	movne	r3, #1
 800a51c:	2300      	moveq	r3, #0
 800a51e:	b2db      	uxtb	r3, r3
 800a520:	e015      	b.n	800a54e <HAL_TIM_PWM_Start_IT+0xa2>
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	2b10      	cmp	r3, #16
 800a526:	d109      	bne.n	800a53c <HAL_TIM_PWM_Start_IT+0x90>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a52e:	b2db      	uxtb	r3, r3
 800a530:	2b01      	cmp	r3, #1
 800a532:	bf14      	ite	ne
 800a534:	2301      	movne	r3, #1
 800a536:	2300      	moveq	r3, #0
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	e008      	b.n	800a54e <HAL_TIM_PWM_Start_IT+0xa2>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a542:	b2db      	uxtb	r3, r3
 800a544:	2b01      	cmp	r3, #1
 800a546:	bf14      	ite	ne
 800a548:	2301      	movne	r3, #1
 800a54a:	2300      	moveq	r3, #0
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d001      	beq.n	800a556 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800a552:	2301      	movs	r3, #1
 800a554:	e0ec      	b.n	800a730 <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d104      	bne.n	800a566 <HAL_TIM_PWM_Start_IT+0xba>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2202      	movs	r2, #2
 800a560:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a564:	e023      	b.n	800a5ae <HAL_TIM_PWM_Start_IT+0x102>
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	2b04      	cmp	r3, #4
 800a56a:	d104      	bne.n	800a576 <HAL_TIM_PWM_Start_IT+0xca>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2202      	movs	r2, #2
 800a570:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a574:	e01b      	b.n	800a5ae <HAL_TIM_PWM_Start_IT+0x102>
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	2b08      	cmp	r3, #8
 800a57a:	d104      	bne.n	800a586 <HAL_TIM_PWM_Start_IT+0xda>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2202      	movs	r2, #2
 800a580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a584:	e013      	b.n	800a5ae <HAL_TIM_PWM_Start_IT+0x102>
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	2b0c      	cmp	r3, #12
 800a58a:	d104      	bne.n	800a596 <HAL_TIM_PWM_Start_IT+0xea>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2202      	movs	r2, #2
 800a590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a594:	e00b      	b.n	800a5ae <HAL_TIM_PWM_Start_IT+0x102>
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	2b10      	cmp	r3, #16
 800a59a:	d104      	bne.n	800a5a6 <HAL_TIM_PWM_Start_IT+0xfa>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2202      	movs	r2, #2
 800a5a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a5a4:	e003      	b.n	800a5ae <HAL_TIM_PWM_Start_IT+0x102>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2202      	movs	r2, #2
 800a5aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	2b0c      	cmp	r3, #12
 800a5b2:	d841      	bhi.n	800a638 <HAL_TIM_PWM_Start_IT+0x18c>
 800a5b4:	a201      	add	r2, pc, #4	@ (adr r2, 800a5bc <HAL_TIM_PWM_Start_IT+0x110>)
 800a5b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ba:	bf00      	nop
 800a5bc:	0800a5f1 	.word	0x0800a5f1
 800a5c0:	0800a639 	.word	0x0800a639
 800a5c4:	0800a639 	.word	0x0800a639
 800a5c8:	0800a639 	.word	0x0800a639
 800a5cc:	0800a603 	.word	0x0800a603
 800a5d0:	0800a639 	.word	0x0800a639
 800a5d4:	0800a639 	.word	0x0800a639
 800a5d8:	0800a639 	.word	0x0800a639
 800a5dc:	0800a615 	.word	0x0800a615
 800a5e0:	0800a639 	.word	0x0800a639
 800a5e4:	0800a639 	.word	0x0800a639
 800a5e8:	0800a639 	.word	0x0800a639
 800a5ec:	0800a627 	.word	0x0800a627
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	68da      	ldr	r2, [r3, #12]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f042 0202 	orr.w	r2, r2, #2
 800a5fe:	60da      	str	r2, [r3, #12]
      break;
 800a600:	e01d      	b.n	800a63e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	68da      	ldr	r2, [r3, #12]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f042 0204 	orr.w	r2, r2, #4
 800a610:	60da      	str	r2, [r3, #12]
      break;
 800a612:	e014      	b.n	800a63e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	68da      	ldr	r2, [r3, #12]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f042 0208 	orr.w	r2, r2, #8
 800a622:	60da      	str	r2, [r3, #12]
      break;
 800a624:	e00b      	b.n	800a63e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	68da      	ldr	r2, [r3, #12]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f042 0210 	orr.w	r2, r2, #16
 800a634:	60da      	str	r2, [r3, #12]
      break;
 800a636:	e002      	b.n	800a63e <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800a638:	2301      	movs	r3, #1
 800a63a:	73fb      	strb	r3, [r7, #15]
      break;
 800a63c:	bf00      	nop
  }

  if (status == HAL_OK)
 800a63e:	7bfb      	ldrb	r3, [r7, #15]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d174      	bne.n	800a72e <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2201      	movs	r2, #1
 800a64a:	6839      	ldr	r1, [r7, #0]
 800a64c:	4618      	mov	r0, r3
 800a64e:	f000 fead 	bl	800b3ac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4a38      	ldr	r2, [pc, #224]	@ (800a738 <HAL_TIM_PWM_Start_IT+0x28c>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d013      	beq.n	800a684 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	4a36      	ldr	r2, [pc, #216]	@ (800a73c <HAL_TIM_PWM_Start_IT+0x290>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d00e      	beq.n	800a684 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a35      	ldr	r2, [pc, #212]	@ (800a740 <HAL_TIM_PWM_Start_IT+0x294>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d009      	beq.n	800a684 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a33      	ldr	r2, [pc, #204]	@ (800a744 <HAL_TIM_PWM_Start_IT+0x298>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d004      	beq.n	800a684 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a32      	ldr	r2, [pc, #200]	@ (800a748 <HAL_TIM_PWM_Start_IT+0x29c>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d101      	bne.n	800a688 <HAL_TIM_PWM_Start_IT+0x1dc>
 800a684:	2301      	movs	r3, #1
 800a686:	e000      	b.n	800a68a <HAL_TIM_PWM_Start_IT+0x1de>
 800a688:	2300      	movs	r3, #0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d007      	beq.n	800a69e <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a69c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	4a25      	ldr	r2, [pc, #148]	@ (800a738 <HAL_TIM_PWM_Start_IT+0x28c>)
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d022      	beq.n	800a6ee <HAL_TIM_PWM_Start_IT+0x242>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6b0:	d01d      	beq.n	800a6ee <HAL_TIM_PWM_Start_IT+0x242>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4a25      	ldr	r2, [pc, #148]	@ (800a74c <HAL_TIM_PWM_Start_IT+0x2a0>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d018      	beq.n	800a6ee <HAL_TIM_PWM_Start_IT+0x242>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a23      	ldr	r2, [pc, #140]	@ (800a750 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d013      	beq.n	800a6ee <HAL_TIM_PWM_Start_IT+0x242>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a22      	ldr	r2, [pc, #136]	@ (800a754 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d00e      	beq.n	800a6ee <HAL_TIM_PWM_Start_IT+0x242>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4a19      	ldr	r2, [pc, #100]	@ (800a73c <HAL_TIM_PWM_Start_IT+0x290>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d009      	beq.n	800a6ee <HAL_TIM_PWM_Start_IT+0x242>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4a1e      	ldr	r2, [pc, #120]	@ (800a758 <HAL_TIM_PWM_Start_IT+0x2ac>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d004      	beq.n	800a6ee <HAL_TIM_PWM_Start_IT+0x242>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a15      	ldr	r2, [pc, #84]	@ (800a740 <HAL_TIM_PWM_Start_IT+0x294>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d115      	bne.n	800a71a <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	689a      	ldr	r2, [r3, #8]
 800a6f4:	4b19      	ldr	r3, [pc, #100]	@ (800a75c <HAL_TIM_PWM_Start_IT+0x2b0>)
 800a6f6:	4013      	ands	r3, r2
 800a6f8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	2b06      	cmp	r3, #6
 800a6fe:	d015      	beq.n	800a72c <HAL_TIM_PWM_Start_IT+0x280>
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a706:	d011      	beq.n	800a72c <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f042 0201 	orr.w	r2, r2, #1
 800a716:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a718:	e008      	b.n	800a72c <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	681a      	ldr	r2, [r3, #0]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f042 0201 	orr.w	r2, r2, #1
 800a728:	601a      	str	r2, [r3, #0]
 800a72a:	e000      	b.n	800a72e <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a72c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800a72e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a730:	4618      	mov	r0, r3
 800a732:	3710      	adds	r7, #16
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}
 800a738:	40010000 	.word	0x40010000
 800a73c:	40010400 	.word	0x40010400
 800a740:	40014000 	.word	0x40014000
 800a744:	40014400 	.word	0x40014400
 800a748:	40014800 	.word	0x40014800
 800a74c:	40000400 	.word	0x40000400
 800a750:	40000800 	.word	0x40000800
 800a754:	40000c00 	.word	0x40000c00
 800a758:	40001800 	.word	0x40001800
 800a75c:	00010007 	.word	0x00010007

0800a760 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b086      	sub	sp, #24
 800a764:	af00      	add	r7, sp, #0
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	60b9      	str	r1, [r7, #8]
 800a76a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a76c:	2300      	movs	r3, #0
 800a76e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a776:	2b01      	cmp	r3, #1
 800a778:	d101      	bne.n	800a77e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a77a:	2302      	movs	r3, #2
 800a77c:	e0ff      	b.n	800a97e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2201      	movs	r2, #1
 800a782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2b14      	cmp	r3, #20
 800a78a:	f200 80f0 	bhi.w	800a96e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a78e:	a201      	add	r2, pc, #4	@ (adr r2, 800a794 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a794:	0800a7e9 	.word	0x0800a7e9
 800a798:	0800a96f 	.word	0x0800a96f
 800a79c:	0800a96f 	.word	0x0800a96f
 800a7a0:	0800a96f 	.word	0x0800a96f
 800a7a4:	0800a829 	.word	0x0800a829
 800a7a8:	0800a96f 	.word	0x0800a96f
 800a7ac:	0800a96f 	.word	0x0800a96f
 800a7b0:	0800a96f 	.word	0x0800a96f
 800a7b4:	0800a86b 	.word	0x0800a86b
 800a7b8:	0800a96f 	.word	0x0800a96f
 800a7bc:	0800a96f 	.word	0x0800a96f
 800a7c0:	0800a96f 	.word	0x0800a96f
 800a7c4:	0800a8ab 	.word	0x0800a8ab
 800a7c8:	0800a96f 	.word	0x0800a96f
 800a7cc:	0800a96f 	.word	0x0800a96f
 800a7d0:	0800a96f 	.word	0x0800a96f
 800a7d4:	0800a8ed 	.word	0x0800a8ed
 800a7d8:	0800a96f 	.word	0x0800a96f
 800a7dc:	0800a96f 	.word	0x0800a96f
 800a7e0:	0800a96f 	.word	0x0800a96f
 800a7e4:	0800a92d 	.word	0x0800a92d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	68b9      	ldr	r1, [r7, #8]
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f000 fa68 	bl	800acc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	699a      	ldr	r2, [r3, #24]
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f042 0208 	orr.w	r2, r2, #8
 800a802:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	699a      	ldr	r2, [r3, #24]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f022 0204 	bic.w	r2, r2, #4
 800a812:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	6999      	ldr	r1, [r3, #24]
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	691a      	ldr	r2, [r3, #16]
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	430a      	orrs	r2, r1
 800a824:	619a      	str	r2, [r3, #24]
      break;
 800a826:	e0a5      	b.n	800a974 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	68b9      	ldr	r1, [r7, #8]
 800a82e:	4618      	mov	r0, r3
 800a830:	f000 fad8 	bl	800ade4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	699a      	ldr	r2, [r3, #24]
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a842:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	699a      	ldr	r2, [r3, #24]
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a852:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	6999      	ldr	r1, [r3, #24]
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	691b      	ldr	r3, [r3, #16]
 800a85e:	021a      	lsls	r2, r3, #8
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	430a      	orrs	r2, r1
 800a866:	619a      	str	r2, [r3, #24]
      break;
 800a868:	e084      	b.n	800a974 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	68b9      	ldr	r1, [r7, #8]
 800a870:	4618      	mov	r0, r3
 800a872:	f000 fb41 	bl	800aef8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	69da      	ldr	r2, [r3, #28]
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f042 0208 	orr.w	r2, r2, #8
 800a884:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	69da      	ldr	r2, [r3, #28]
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f022 0204 	bic.w	r2, r2, #4
 800a894:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	69d9      	ldr	r1, [r3, #28]
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	691a      	ldr	r2, [r3, #16]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	430a      	orrs	r2, r1
 800a8a6:	61da      	str	r2, [r3, #28]
      break;
 800a8a8:	e064      	b.n	800a974 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	68b9      	ldr	r1, [r7, #8]
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f000 fba9 	bl	800b008 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	69da      	ldr	r2, [r3, #28]
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a8c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	69da      	ldr	r2, [r3, #28]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a8d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	69d9      	ldr	r1, [r3, #28]
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	691b      	ldr	r3, [r3, #16]
 800a8e0:	021a      	lsls	r2, r3, #8
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	430a      	orrs	r2, r1
 800a8e8:	61da      	str	r2, [r3, #28]
      break;
 800a8ea:	e043      	b.n	800a974 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	68b9      	ldr	r1, [r7, #8]
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f000 fbf2 	bl	800b0dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f042 0208 	orr.w	r2, r2, #8
 800a906:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f022 0204 	bic.w	r2, r2, #4
 800a916:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	691a      	ldr	r2, [r3, #16]
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	430a      	orrs	r2, r1
 800a928:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a92a:	e023      	b.n	800a974 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	68b9      	ldr	r1, [r7, #8]
 800a932:	4618      	mov	r0, r3
 800a934:	f000 fc36 	bl	800b1a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a946:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a956:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	691b      	ldr	r3, [r3, #16]
 800a962:	021a      	lsls	r2, r3, #8
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	430a      	orrs	r2, r1
 800a96a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a96c:	e002      	b.n	800a974 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a96e:	2301      	movs	r3, #1
 800a970:	75fb      	strb	r3, [r7, #23]
      break;
 800a972:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2200      	movs	r2, #0
 800a978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a97c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3718      	adds	r7, #24
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}
 800a986:	bf00      	nop

0800a988 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a992:	2300      	movs	r3, #0
 800a994:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d101      	bne.n	800a9a4 <HAL_TIM_ConfigClockSource+0x1c>
 800a9a0:	2302      	movs	r3, #2
 800a9a2:	e0dc      	b.n	800ab5e <HAL_TIM_ConfigClockSource+0x1d6>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2202      	movs	r2, #2
 800a9b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	689b      	ldr	r3, [r3, #8]
 800a9ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a9bc:	68ba      	ldr	r2, [r7, #8]
 800a9be:	4b6a      	ldr	r3, [pc, #424]	@ (800ab68 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a9c0:	4013      	ands	r3, r2
 800a9c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a9ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	68ba      	ldr	r2, [r7, #8]
 800a9d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4a64      	ldr	r2, [pc, #400]	@ (800ab6c <HAL_TIM_ConfigClockSource+0x1e4>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	f000 80a9 	beq.w	800ab32 <HAL_TIM_ConfigClockSource+0x1aa>
 800a9e0:	4a62      	ldr	r2, [pc, #392]	@ (800ab6c <HAL_TIM_ConfigClockSource+0x1e4>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	f200 80ae 	bhi.w	800ab44 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9e8:	4a61      	ldr	r2, [pc, #388]	@ (800ab70 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	f000 80a1 	beq.w	800ab32 <HAL_TIM_ConfigClockSource+0x1aa>
 800a9f0:	4a5f      	ldr	r2, [pc, #380]	@ (800ab70 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	f200 80a6 	bhi.w	800ab44 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9f8:	4a5e      	ldr	r2, [pc, #376]	@ (800ab74 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	f000 8099 	beq.w	800ab32 <HAL_TIM_ConfigClockSource+0x1aa>
 800aa00:	4a5c      	ldr	r2, [pc, #368]	@ (800ab74 <HAL_TIM_ConfigClockSource+0x1ec>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	f200 809e 	bhi.w	800ab44 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa08:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800aa0c:	f000 8091 	beq.w	800ab32 <HAL_TIM_ConfigClockSource+0x1aa>
 800aa10:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800aa14:	f200 8096 	bhi.w	800ab44 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa1c:	f000 8089 	beq.w	800ab32 <HAL_TIM_ConfigClockSource+0x1aa>
 800aa20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa24:	f200 808e 	bhi.w	800ab44 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa2c:	d03e      	beq.n	800aaac <HAL_TIM_ConfigClockSource+0x124>
 800aa2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa32:	f200 8087 	bhi.w	800ab44 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa3a:	f000 8086 	beq.w	800ab4a <HAL_TIM_ConfigClockSource+0x1c2>
 800aa3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa42:	d87f      	bhi.n	800ab44 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa44:	2b70      	cmp	r3, #112	@ 0x70
 800aa46:	d01a      	beq.n	800aa7e <HAL_TIM_ConfigClockSource+0xf6>
 800aa48:	2b70      	cmp	r3, #112	@ 0x70
 800aa4a:	d87b      	bhi.n	800ab44 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa4c:	2b60      	cmp	r3, #96	@ 0x60
 800aa4e:	d050      	beq.n	800aaf2 <HAL_TIM_ConfigClockSource+0x16a>
 800aa50:	2b60      	cmp	r3, #96	@ 0x60
 800aa52:	d877      	bhi.n	800ab44 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa54:	2b50      	cmp	r3, #80	@ 0x50
 800aa56:	d03c      	beq.n	800aad2 <HAL_TIM_ConfigClockSource+0x14a>
 800aa58:	2b50      	cmp	r3, #80	@ 0x50
 800aa5a:	d873      	bhi.n	800ab44 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa5c:	2b40      	cmp	r3, #64	@ 0x40
 800aa5e:	d058      	beq.n	800ab12 <HAL_TIM_ConfigClockSource+0x18a>
 800aa60:	2b40      	cmp	r3, #64	@ 0x40
 800aa62:	d86f      	bhi.n	800ab44 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa64:	2b30      	cmp	r3, #48	@ 0x30
 800aa66:	d064      	beq.n	800ab32 <HAL_TIM_ConfigClockSource+0x1aa>
 800aa68:	2b30      	cmp	r3, #48	@ 0x30
 800aa6a:	d86b      	bhi.n	800ab44 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa6c:	2b20      	cmp	r3, #32
 800aa6e:	d060      	beq.n	800ab32 <HAL_TIM_ConfigClockSource+0x1aa>
 800aa70:	2b20      	cmp	r3, #32
 800aa72:	d867      	bhi.n	800ab44 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d05c      	beq.n	800ab32 <HAL_TIM_ConfigClockSource+0x1aa>
 800aa78:	2b10      	cmp	r3, #16
 800aa7a:	d05a      	beq.n	800ab32 <HAL_TIM_ConfigClockSource+0x1aa>
 800aa7c:	e062      	b.n	800ab44 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aa8e:	f000 fc6d 	bl	800b36c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	689b      	ldr	r3, [r3, #8]
 800aa98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800aaa0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	68ba      	ldr	r2, [r7, #8]
 800aaa8:	609a      	str	r2, [r3, #8]
      break;
 800aaaa:	e04f      	b.n	800ab4c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aabc:	f000 fc56 	bl	800b36c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	689a      	ldr	r2, [r3, #8]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aace:	609a      	str	r2, [r3, #8]
      break;
 800aad0:	e03c      	b.n	800ab4c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aade:	461a      	mov	r2, r3
 800aae0:	f000 fbc6 	bl	800b270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	2150      	movs	r1, #80	@ 0x50
 800aaea:	4618      	mov	r0, r3
 800aaec:	f000 fc20 	bl	800b330 <TIM_ITRx_SetConfig>
      break;
 800aaf0:	e02c      	b.n	800ab4c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aafe:	461a      	mov	r2, r3
 800ab00:	f000 fbe5 	bl	800b2ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	2160      	movs	r1, #96	@ 0x60
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f000 fc10 	bl	800b330 <TIM_ITRx_SetConfig>
      break;
 800ab10:	e01c      	b.n	800ab4c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab1e:	461a      	mov	r2, r3
 800ab20:	f000 fba6 	bl	800b270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	2140      	movs	r1, #64	@ 0x40
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f000 fc00 	bl	800b330 <TIM_ITRx_SetConfig>
      break;
 800ab30:	e00c      	b.n	800ab4c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681a      	ldr	r2, [r3, #0]
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	4610      	mov	r0, r2
 800ab3e:	f000 fbf7 	bl	800b330 <TIM_ITRx_SetConfig>
      break;
 800ab42:	e003      	b.n	800ab4c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ab44:	2301      	movs	r3, #1
 800ab46:	73fb      	strb	r3, [r7, #15]
      break;
 800ab48:	e000      	b.n	800ab4c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ab4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2201      	movs	r2, #1
 800ab50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2200      	movs	r2, #0
 800ab58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ab5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3710      	adds	r7, #16
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop
 800ab68:	ffceff88 	.word	0xffceff88
 800ab6c:	00100040 	.word	0x00100040
 800ab70:	00100030 	.word	0x00100030
 800ab74:	00100020 	.word	0x00100020

0800ab78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b085      	sub	sp, #20
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	4a46      	ldr	r2, [pc, #280]	@ (800aca4 <TIM_Base_SetConfig+0x12c>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d013      	beq.n	800abb8 <TIM_Base_SetConfig+0x40>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab96:	d00f      	beq.n	800abb8 <TIM_Base_SetConfig+0x40>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	4a43      	ldr	r2, [pc, #268]	@ (800aca8 <TIM_Base_SetConfig+0x130>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d00b      	beq.n	800abb8 <TIM_Base_SetConfig+0x40>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	4a42      	ldr	r2, [pc, #264]	@ (800acac <TIM_Base_SetConfig+0x134>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d007      	beq.n	800abb8 <TIM_Base_SetConfig+0x40>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	4a41      	ldr	r2, [pc, #260]	@ (800acb0 <TIM_Base_SetConfig+0x138>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d003      	beq.n	800abb8 <TIM_Base_SetConfig+0x40>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	4a40      	ldr	r2, [pc, #256]	@ (800acb4 <TIM_Base_SetConfig+0x13c>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d108      	bne.n	800abca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	68fa      	ldr	r2, [r7, #12]
 800abc6:	4313      	orrs	r3, r2
 800abc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4a35      	ldr	r2, [pc, #212]	@ (800aca4 <TIM_Base_SetConfig+0x12c>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d01f      	beq.n	800ac12 <TIM_Base_SetConfig+0x9a>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abd8:	d01b      	beq.n	800ac12 <TIM_Base_SetConfig+0x9a>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	4a32      	ldr	r2, [pc, #200]	@ (800aca8 <TIM_Base_SetConfig+0x130>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d017      	beq.n	800ac12 <TIM_Base_SetConfig+0x9a>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	4a31      	ldr	r2, [pc, #196]	@ (800acac <TIM_Base_SetConfig+0x134>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d013      	beq.n	800ac12 <TIM_Base_SetConfig+0x9a>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	4a30      	ldr	r2, [pc, #192]	@ (800acb0 <TIM_Base_SetConfig+0x138>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d00f      	beq.n	800ac12 <TIM_Base_SetConfig+0x9a>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	4a2f      	ldr	r2, [pc, #188]	@ (800acb4 <TIM_Base_SetConfig+0x13c>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d00b      	beq.n	800ac12 <TIM_Base_SetConfig+0x9a>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	4a2e      	ldr	r2, [pc, #184]	@ (800acb8 <TIM_Base_SetConfig+0x140>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d007      	beq.n	800ac12 <TIM_Base_SetConfig+0x9a>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	4a2d      	ldr	r2, [pc, #180]	@ (800acbc <TIM_Base_SetConfig+0x144>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d003      	beq.n	800ac12 <TIM_Base_SetConfig+0x9a>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	4a2c      	ldr	r2, [pc, #176]	@ (800acc0 <TIM_Base_SetConfig+0x148>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d108      	bne.n	800ac24 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ac18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	68db      	ldr	r3, [r3, #12]
 800ac1e:	68fa      	ldr	r2, [r7, #12]
 800ac20:	4313      	orrs	r3, r2
 800ac22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	695b      	ldr	r3, [r3, #20]
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	68fa      	ldr	r2, [r7, #12]
 800ac36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	689a      	ldr	r2, [r3, #8]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	681a      	ldr	r2, [r3, #0]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	4a16      	ldr	r2, [pc, #88]	@ (800aca4 <TIM_Base_SetConfig+0x12c>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d00f      	beq.n	800ac70 <TIM_Base_SetConfig+0xf8>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	4a18      	ldr	r2, [pc, #96]	@ (800acb4 <TIM_Base_SetConfig+0x13c>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d00b      	beq.n	800ac70 <TIM_Base_SetConfig+0xf8>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	4a17      	ldr	r2, [pc, #92]	@ (800acb8 <TIM_Base_SetConfig+0x140>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d007      	beq.n	800ac70 <TIM_Base_SetConfig+0xf8>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	4a16      	ldr	r2, [pc, #88]	@ (800acbc <TIM_Base_SetConfig+0x144>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d003      	beq.n	800ac70 <TIM_Base_SetConfig+0xf8>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	4a15      	ldr	r2, [pc, #84]	@ (800acc0 <TIM_Base_SetConfig+0x148>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d103      	bne.n	800ac78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	691a      	ldr	r2, [r3, #16]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	691b      	ldr	r3, [r3, #16]
 800ac82:	f003 0301 	and.w	r3, r3, #1
 800ac86:	2b01      	cmp	r3, #1
 800ac88:	d105      	bne.n	800ac96 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	691b      	ldr	r3, [r3, #16]
 800ac8e:	f023 0201 	bic.w	r2, r3, #1
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	611a      	str	r2, [r3, #16]
  }
}
 800ac96:	bf00      	nop
 800ac98:	3714      	adds	r7, #20
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca0:	4770      	bx	lr
 800aca2:	bf00      	nop
 800aca4:	40010000 	.word	0x40010000
 800aca8:	40000400 	.word	0x40000400
 800acac:	40000800 	.word	0x40000800
 800acb0:	40000c00 	.word	0x40000c00
 800acb4:	40010400 	.word	0x40010400
 800acb8:	40014000 	.word	0x40014000
 800acbc:	40014400 	.word	0x40014400
 800acc0:	40014800 	.word	0x40014800

0800acc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b087      	sub	sp, #28
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6a1b      	ldr	r3, [r3, #32]
 800acd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6a1b      	ldr	r3, [r3, #32]
 800acd8:	f023 0201 	bic.w	r2, r3, #1
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	699b      	ldr	r3, [r3, #24]
 800acea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800acec:	68fa      	ldr	r2, [r7, #12]
 800acee:	4b37      	ldr	r3, [pc, #220]	@ (800adcc <TIM_OC1_SetConfig+0x108>)
 800acf0:	4013      	ands	r3, r2
 800acf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f023 0303 	bic.w	r3, r3, #3
 800acfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	68fa      	ldr	r2, [r7, #12]
 800ad02:	4313      	orrs	r3, r2
 800ad04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	f023 0302 	bic.w	r3, r3, #2
 800ad0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	689b      	ldr	r3, [r3, #8]
 800ad12:	697a      	ldr	r2, [r7, #20]
 800ad14:	4313      	orrs	r3, r2
 800ad16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	4a2d      	ldr	r2, [pc, #180]	@ (800add0 <TIM_OC1_SetConfig+0x10c>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d00f      	beq.n	800ad40 <TIM_OC1_SetConfig+0x7c>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	4a2c      	ldr	r2, [pc, #176]	@ (800add4 <TIM_OC1_SetConfig+0x110>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d00b      	beq.n	800ad40 <TIM_OC1_SetConfig+0x7c>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	4a2b      	ldr	r2, [pc, #172]	@ (800add8 <TIM_OC1_SetConfig+0x114>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d007      	beq.n	800ad40 <TIM_OC1_SetConfig+0x7c>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	4a2a      	ldr	r2, [pc, #168]	@ (800addc <TIM_OC1_SetConfig+0x118>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d003      	beq.n	800ad40 <TIM_OC1_SetConfig+0x7c>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	4a29      	ldr	r2, [pc, #164]	@ (800ade0 <TIM_OC1_SetConfig+0x11c>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d10c      	bne.n	800ad5a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	f023 0308 	bic.w	r3, r3, #8
 800ad46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	68db      	ldr	r3, [r3, #12]
 800ad4c:	697a      	ldr	r2, [r7, #20]
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	f023 0304 	bic.w	r3, r3, #4
 800ad58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	4a1c      	ldr	r2, [pc, #112]	@ (800add0 <TIM_OC1_SetConfig+0x10c>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d00f      	beq.n	800ad82 <TIM_OC1_SetConfig+0xbe>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	4a1b      	ldr	r2, [pc, #108]	@ (800add4 <TIM_OC1_SetConfig+0x110>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d00b      	beq.n	800ad82 <TIM_OC1_SetConfig+0xbe>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	4a1a      	ldr	r2, [pc, #104]	@ (800add8 <TIM_OC1_SetConfig+0x114>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d007      	beq.n	800ad82 <TIM_OC1_SetConfig+0xbe>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	4a19      	ldr	r2, [pc, #100]	@ (800addc <TIM_OC1_SetConfig+0x118>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d003      	beq.n	800ad82 <TIM_OC1_SetConfig+0xbe>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	4a18      	ldr	r2, [pc, #96]	@ (800ade0 <TIM_OC1_SetConfig+0x11c>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d111      	bne.n	800ada6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ad88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ad90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	695b      	ldr	r3, [r3, #20]
 800ad96:	693a      	ldr	r2, [r7, #16]
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	699b      	ldr	r3, [r3, #24]
 800ada0:	693a      	ldr	r2, [r7, #16]
 800ada2:	4313      	orrs	r3, r2
 800ada4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	693a      	ldr	r2, [r7, #16]
 800adaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	68fa      	ldr	r2, [r7, #12]
 800adb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	685a      	ldr	r2, [r3, #4]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	697a      	ldr	r2, [r7, #20]
 800adbe:	621a      	str	r2, [r3, #32]
}
 800adc0:	bf00      	nop
 800adc2:	371c      	adds	r7, #28
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr
 800adcc:	fffeff8f 	.word	0xfffeff8f
 800add0:	40010000 	.word	0x40010000
 800add4:	40010400 	.word	0x40010400
 800add8:	40014000 	.word	0x40014000
 800addc:	40014400 	.word	0x40014400
 800ade0:	40014800 	.word	0x40014800

0800ade4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b087      	sub	sp, #28
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6a1b      	ldr	r3, [r3, #32]
 800adf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6a1b      	ldr	r3, [r3, #32]
 800adf8:	f023 0210 	bic.w	r2, r3, #16
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	699b      	ldr	r3, [r3, #24]
 800ae0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ae0c:	68fa      	ldr	r2, [r7, #12]
 800ae0e:	4b34      	ldr	r3, [pc, #208]	@ (800aee0 <TIM_OC2_SetConfig+0xfc>)
 800ae10:	4013      	ands	r3, r2
 800ae12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ae1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	021b      	lsls	r3, r3, #8
 800ae22:	68fa      	ldr	r2, [r7, #12]
 800ae24:	4313      	orrs	r3, r2
 800ae26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	f023 0320 	bic.w	r3, r3, #32
 800ae2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	011b      	lsls	r3, r3, #4
 800ae36:	697a      	ldr	r2, [r7, #20]
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	4a29      	ldr	r2, [pc, #164]	@ (800aee4 <TIM_OC2_SetConfig+0x100>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d003      	beq.n	800ae4c <TIM_OC2_SetConfig+0x68>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	4a28      	ldr	r2, [pc, #160]	@ (800aee8 <TIM_OC2_SetConfig+0x104>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d10d      	bne.n	800ae68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	68db      	ldr	r3, [r3, #12]
 800ae58:	011b      	lsls	r3, r3, #4
 800ae5a:	697a      	ldr	r2, [r7, #20]
 800ae5c:	4313      	orrs	r3, r2
 800ae5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	4a1e      	ldr	r2, [pc, #120]	@ (800aee4 <TIM_OC2_SetConfig+0x100>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d00f      	beq.n	800ae90 <TIM_OC2_SetConfig+0xac>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	4a1d      	ldr	r2, [pc, #116]	@ (800aee8 <TIM_OC2_SetConfig+0x104>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d00b      	beq.n	800ae90 <TIM_OC2_SetConfig+0xac>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	4a1c      	ldr	r2, [pc, #112]	@ (800aeec <TIM_OC2_SetConfig+0x108>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d007      	beq.n	800ae90 <TIM_OC2_SetConfig+0xac>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	4a1b      	ldr	r2, [pc, #108]	@ (800aef0 <TIM_OC2_SetConfig+0x10c>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d003      	beq.n	800ae90 <TIM_OC2_SetConfig+0xac>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	4a1a      	ldr	r2, [pc, #104]	@ (800aef4 <TIM_OC2_SetConfig+0x110>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d113      	bne.n	800aeb8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ae96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ae9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	695b      	ldr	r3, [r3, #20]
 800aea4:	009b      	lsls	r3, r3, #2
 800aea6:	693a      	ldr	r2, [r7, #16]
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	699b      	ldr	r3, [r3, #24]
 800aeb0:	009b      	lsls	r3, r3, #2
 800aeb2:	693a      	ldr	r2, [r7, #16]
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	693a      	ldr	r2, [r7, #16]
 800aebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	68fa      	ldr	r2, [r7, #12]
 800aec2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	685a      	ldr	r2, [r3, #4]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	697a      	ldr	r2, [r7, #20]
 800aed0:	621a      	str	r2, [r3, #32]
}
 800aed2:	bf00      	nop
 800aed4:	371c      	adds	r7, #28
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr
 800aede:	bf00      	nop
 800aee0:	feff8fff 	.word	0xfeff8fff
 800aee4:	40010000 	.word	0x40010000
 800aee8:	40010400 	.word	0x40010400
 800aeec:	40014000 	.word	0x40014000
 800aef0:	40014400 	.word	0x40014400
 800aef4:	40014800 	.word	0x40014800

0800aef8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b087      	sub	sp, #28
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6a1b      	ldr	r3, [r3, #32]
 800af06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6a1b      	ldr	r3, [r3, #32]
 800af0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	69db      	ldr	r3, [r3, #28]
 800af1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800af20:	68fa      	ldr	r2, [r7, #12]
 800af22:	4b33      	ldr	r3, [pc, #204]	@ (800aff0 <TIM_OC3_SetConfig+0xf8>)
 800af24:	4013      	ands	r3, r2
 800af26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f023 0303 	bic.w	r3, r3, #3
 800af2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	68fa      	ldr	r2, [r7, #12]
 800af36:	4313      	orrs	r3, r2
 800af38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800af40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	689b      	ldr	r3, [r3, #8]
 800af46:	021b      	lsls	r3, r3, #8
 800af48:	697a      	ldr	r2, [r7, #20]
 800af4a:	4313      	orrs	r3, r2
 800af4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	4a28      	ldr	r2, [pc, #160]	@ (800aff4 <TIM_OC3_SetConfig+0xfc>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d003      	beq.n	800af5e <TIM_OC3_SetConfig+0x66>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	4a27      	ldr	r2, [pc, #156]	@ (800aff8 <TIM_OC3_SetConfig+0x100>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d10d      	bne.n	800af7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800af64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	68db      	ldr	r3, [r3, #12]
 800af6a:	021b      	lsls	r3, r3, #8
 800af6c:	697a      	ldr	r2, [r7, #20]
 800af6e:	4313      	orrs	r3, r2
 800af70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800af78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	4a1d      	ldr	r2, [pc, #116]	@ (800aff4 <TIM_OC3_SetConfig+0xfc>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d00f      	beq.n	800afa2 <TIM_OC3_SetConfig+0xaa>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	4a1c      	ldr	r2, [pc, #112]	@ (800aff8 <TIM_OC3_SetConfig+0x100>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d00b      	beq.n	800afa2 <TIM_OC3_SetConfig+0xaa>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	4a1b      	ldr	r2, [pc, #108]	@ (800affc <TIM_OC3_SetConfig+0x104>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d007      	beq.n	800afa2 <TIM_OC3_SetConfig+0xaa>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	4a1a      	ldr	r2, [pc, #104]	@ (800b000 <TIM_OC3_SetConfig+0x108>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d003      	beq.n	800afa2 <TIM_OC3_SetConfig+0xaa>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	4a19      	ldr	r2, [pc, #100]	@ (800b004 <TIM_OC3_SetConfig+0x10c>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d113      	bne.n	800afca <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800afa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800afb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	695b      	ldr	r3, [r3, #20]
 800afb6:	011b      	lsls	r3, r3, #4
 800afb8:	693a      	ldr	r2, [r7, #16]
 800afba:	4313      	orrs	r3, r2
 800afbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	699b      	ldr	r3, [r3, #24]
 800afc2:	011b      	lsls	r3, r3, #4
 800afc4:	693a      	ldr	r2, [r7, #16]
 800afc6:	4313      	orrs	r3, r2
 800afc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	693a      	ldr	r2, [r7, #16]
 800afce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	68fa      	ldr	r2, [r7, #12]
 800afd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	685a      	ldr	r2, [r3, #4]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	697a      	ldr	r2, [r7, #20]
 800afe2:	621a      	str	r2, [r3, #32]
}
 800afe4:	bf00      	nop
 800afe6:	371c      	adds	r7, #28
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr
 800aff0:	fffeff8f 	.word	0xfffeff8f
 800aff4:	40010000 	.word	0x40010000
 800aff8:	40010400 	.word	0x40010400
 800affc:	40014000 	.word	0x40014000
 800b000:	40014400 	.word	0x40014400
 800b004:	40014800 	.word	0x40014800

0800b008 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b008:	b480      	push	{r7}
 800b00a:	b087      	sub	sp, #28
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6a1b      	ldr	r3, [r3, #32]
 800b016:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6a1b      	ldr	r3, [r3, #32]
 800b01c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	69db      	ldr	r3, [r3, #28]
 800b02e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b030:	68fa      	ldr	r2, [r7, #12]
 800b032:	4b24      	ldr	r3, [pc, #144]	@ (800b0c4 <TIM_OC4_SetConfig+0xbc>)
 800b034:	4013      	ands	r3, r2
 800b036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b03e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	021b      	lsls	r3, r3, #8
 800b046:	68fa      	ldr	r2, [r7, #12]
 800b048:	4313      	orrs	r3, r2
 800b04a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b052:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	689b      	ldr	r3, [r3, #8]
 800b058:	031b      	lsls	r3, r3, #12
 800b05a:	693a      	ldr	r2, [r7, #16]
 800b05c:	4313      	orrs	r3, r2
 800b05e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	4a19      	ldr	r2, [pc, #100]	@ (800b0c8 <TIM_OC4_SetConfig+0xc0>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d00f      	beq.n	800b088 <TIM_OC4_SetConfig+0x80>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	4a18      	ldr	r2, [pc, #96]	@ (800b0cc <TIM_OC4_SetConfig+0xc4>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d00b      	beq.n	800b088 <TIM_OC4_SetConfig+0x80>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	4a17      	ldr	r2, [pc, #92]	@ (800b0d0 <TIM_OC4_SetConfig+0xc8>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d007      	beq.n	800b088 <TIM_OC4_SetConfig+0x80>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	4a16      	ldr	r2, [pc, #88]	@ (800b0d4 <TIM_OC4_SetConfig+0xcc>)
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d003      	beq.n	800b088 <TIM_OC4_SetConfig+0x80>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	4a15      	ldr	r2, [pc, #84]	@ (800b0d8 <TIM_OC4_SetConfig+0xd0>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d109      	bne.n	800b09c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b08e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	695b      	ldr	r3, [r3, #20]
 800b094:	019b      	lsls	r3, r3, #6
 800b096:	697a      	ldr	r2, [r7, #20]
 800b098:	4313      	orrs	r3, r2
 800b09a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	697a      	ldr	r2, [r7, #20]
 800b0a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	68fa      	ldr	r2, [r7, #12]
 800b0a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	685a      	ldr	r2, [r3, #4]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	693a      	ldr	r2, [r7, #16]
 800b0b4:	621a      	str	r2, [r3, #32]
}
 800b0b6:	bf00      	nop
 800b0b8:	371c      	adds	r7, #28
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c0:	4770      	bx	lr
 800b0c2:	bf00      	nop
 800b0c4:	feff8fff 	.word	0xfeff8fff
 800b0c8:	40010000 	.word	0x40010000
 800b0cc:	40010400 	.word	0x40010400
 800b0d0:	40014000 	.word	0x40014000
 800b0d4:	40014400 	.word	0x40014400
 800b0d8:	40014800 	.word	0x40014800

0800b0dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b0dc:	b480      	push	{r7}
 800b0de:	b087      	sub	sp, #28
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6a1b      	ldr	r3, [r3, #32]
 800b0ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6a1b      	ldr	r3, [r3, #32]
 800b0f0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b104:	68fa      	ldr	r2, [r7, #12]
 800b106:	4b21      	ldr	r3, [pc, #132]	@ (800b18c <TIM_OC5_SetConfig+0xb0>)
 800b108:	4013      	ands	r3, r2
 800b10a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	68fa      	ldr	r2, [r7, #12]
 800b112:	4313      	orrs	r3, r2
 800b114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b11c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	689b      	ldr	r3, [r3, #8]
 800b122:	041b      	lsls	r3, r3, #16
 800b124:	693a      	ldr	r2, [r7, #16]
 800b126:	4313      	orrs	r3, r2
 800b128:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	4a18      	ldr	r2, [pc, #96]	@ (800b190 <TIM_OC5_SetConfig+0xb4>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d00f      	beq.n	800b152 <TIM_OC5_SetConfig+0x76>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	4a17      	ldr	r2, [pc, #92]	@ (800b194 <TIM_OC5_SetConfig+0xb8>)
 800b136:	4293      	cmp	r3, r2
 800b138:	d00b      	beq.n	800b152 <TIM_OC5_SetConfig+0x76>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	4a16      	ldr	r2, [pc, #88]	@ (800b198 <TIM_OC5_SetConfig+0xbc>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d007      	beq.n	800b152 <TIM_OC5_SetConfig+0x76>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	4a15      	ldr	r2, [pc, #84]	@ (800b19c <TIM_OC5_SetConfig+0xc0>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d003      	beq.n	800b152 <TIM_OC5_SetConfig+0x76>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	4a14      	ldr	r2, [pc, #80]	@ (800b1a0 <TIM_OC5_SetConfig+0xc4>)
 800b14e:	4293      	cmp	r3, r2
 800b150:	d109      	bne.n	800b166 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b158:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	695b      	ldr	r3, [r3, #20]
 800b15e:	021b      	lsls	r3, r3, #8
 800b160:	697a      	ldr	r2, [r7, #20]
 800b162:	4313      	orrs	r3, r2
 800b164:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	697a      	ldr	r2, [r7, #20]
 800b16a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	68fa      	ldr	r2, [r7, #12]
 800b170:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	685a      	ldr	r2, [r3, #4]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	693a      	ldr	r2, [r7, #16]
 800b17e:	621a      	str	r2, [r3, #32]
}
 800b180:	bf00      	nop
 800b182:	371c      	adds	r7, #28
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr
 800b18c:	fffeff8f 	.word	0xfffeff8f
 800b190:	40010000 	.word	0x40010000
 800b194:	40010400 	.word	0x40010400
 800b198:	40014000 	.word	0x40014000
 800b19c:	40014400 	.word	0x40014400
 800b1a0:	40014800 	.word	0x40014800

0800b1a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b087      	sub	sp, #28
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6a1b      	ldr	r3, [r3, #32]
 800b1b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6a1b      	ldr	r3, [r3, #32]
 800b1b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b1ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b1cc:	68fa      	ldr	r2, [r7, #12]
 800b1ce:	4b22      	ldr	r3, [pc, #136]	@ (800b258 <TIM_OC6_SetConfig+0xb4>)
 800b1d0:	4013      	ands	r3, r2
 800b1d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	021b      	lsls	r3, r3, #8
 800b1da:	68fa      	ldr	r2, [r7, #12]
 800b1dc:	4313      	orrs	r3, r2
 800b1de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b1e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	689b      	ldr	r3, [r3, #8]
 800b1ec:	051b      	lsls	r3, r3, #20
 800b1ee:	693a      	ldr	r2, [r7, #16]
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	4a19      	ldr	r2, [pc, #100]	@ (800b25c <TIM_OC6_SetConfig+0xb8>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d00f      	beq.n	800b21c <TIM_OC6_SetConfig+0x78>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	4a18      	ldr	r2, [pc, #96]	@ (800b260 <TIM_OC6_SetConfig+0xbc>)
 800b200:	4293      	cmp	r3, r2
 800b202:	d00b      	beq.n	800b21c <TIM_OC6_SetConfig+0x78>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	4a17      	ldr	r2, [pc, #92]	@ (800b264 <TIM_OC6_SetConfig+0xc0>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d007      	beq.n	800b21c <TIM_OC6_SetConfig+0x78>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	4a16      	ldr	r2, [pc, #88]	@ (800b268 <TIM_OC6_SetConfig+0xc4>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d003      	beq.n	800b21c <TIM_OC6_SetConfig+0x78>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	4a15      	ldr	r2, [pc, #84]	@ (800b26c <TIM_OC6_SetConfig+0xc8>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d109      	bne.n	800b230 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b222:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	695b      	ldr	r3, [r3, #20]
 800b228:	029b      	lsls	r3, r3, #10
 800b22a:	697a      	ldr	r2, [r7, #20]
 800b22c:	4313      	orrs	r3, r2
 800b22e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	697a      	ldr	r2, [r7, #20]
 800b234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	68fa      	ldr	r2, [r7, #12]
 800b23a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	685a      	ldr	r2, [r3, #4]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	693a      	ldr	r2, [r7, #16]
 800b248:	621a      	str	r2, [r3, #32]
}
 800b24a:	bf00      	nop
 800b24c:	371c      	adds	r7, #28
 800b24e:	46bd      	mov	sp, r7
 800b250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b254:	4770      	bx	lr
 800b256:	bf00      	nop
 800b258:	feff8fff 	.word	0xfeff8fff
 800b25c:	40010000 	.word	0x40010000
 800b260:	40010400 	.word	0x40010400
 800b264:	40014000 	.word	0x40014000
 800b268:	40014400 	.word	0x40014400
 800b26c:	40014800 	.word	0x40014800

0800b270 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b270:	b480      	push	{r7}
 800b272:	b087      	sub	sp, #28
 800b274:	af00      	add	r7, sp, #0
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	60b9      	str	r1, [r7, #8]
 800b27a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	6a1b      	ldr	r3, [r3, #32]
 800b280:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	6a1b      	ldr	r3, [r3, #32]
 800b286:	f023 0201 	bic.w	r2, r3, #1
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	699b      	ldr	r3, [r3, #24]
 800b292:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b29a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	011b      	lsls	r3, r3, #4
 800b2a0:	693a      	ldr	r2, [r7, #16]
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	f023 030a 	bic.w	r3, r3, #10
 800b2ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b2ae:	697a      	ldr	r2, [r7, #20]
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	693a      	ldr	r2, [r7, #16]
 800b2ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	697a      	ldr	r2, [r7, #20]
 800b2c0:	621a      	str	r2, [r3, #32]
}
 800b2c2:	bf00      	nop
 800b2c4:	371c      	adds	r7, #28
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr

0800b2ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b2ce:	b480      	push	{r7}
 800b2d0:	b087      	sub	sp, #28
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	60f8      	str	r0, [r7, #12]
 800b2d6:	60b9      	str	r1, [r7, #8]
 800b2d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	6a1b      	ldr	r3, [r3, #32]
 800b2de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	6a1b      	ldr	r3, [r3, #32]
 800b2e4:	f023 0210 	bic.w	r2, r3, #16
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	699b      	ldr	r3, [r3, #24]
 800b2f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b2f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	031b      	lsls	r3, r3, #12
 800b2fe:	693a      	ldr	r2, [r7, #16]
 800b300:	4313      	orrs	r3, r2
 800b302:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b30a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	011b      	lsls	r3, r3, #4
 800b310:	697a      	ldr	r2, [r7, #20]
 800b312:	4313      	orrs	r3, r2
 800b314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	693a      	ldr	r2, [r7, #16]
 800b31a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	697a      	ldr	r2, [r7, #20]
 800b320:	621a      	str	r2, [r3, #32]
}
 800b322:	bf00      	nop
 800b324:	371c      	adds	r7, #28
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr
	...

0800b330 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b330:	b480      	push	{r7}
 800b332:	b085      	sub	sp, #20
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	689b      	ldr	r3, [r3, #8]
 800b33e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b340:	68fa      	ldr	r2, [r7, #12]
 800b342:	4b09      	ldr	r3, [pc, #36]	@ (800b368 <TIM_ITRx_SetConfig+0x38>)
 800b344:	4013      	ands	r3, r2
 800b346:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b348:	683a      	ldr	r2, [r7, #0]
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	4313      	orrs	r3, r2
 800b34e:	f043 0307 	orr.w	r3, r3, #7
 800b352:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	68fa      	ldr	r2, [r7, #12]
 800b358:	609a      	str	r2, [r3, #8]
}
 800b35a:	bf00      	nop
 800b35c:	3714      	adds	r7, #20
 800b35e:	46bd      	mov	sp, r7
 800b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b364:	4770      	bx	lr
 800b366:	bf00      	nop
 800b368:	ffcfff8f 	.word	0xffcfff8f

0800b36c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b087      	sub	sp, #28
 800b370:	af00      	add	r7, sp, #0
 800b372:	60f8      	str	r0, [r7, #12]
 800b374:	60b9      	str	r1, [r7, #8]
 800b376:	607a      	str	r2, [r7, #4]
 800b378:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b386:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	021a      	lsls	r2, r3, #8
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	431a      	orrs	r2, r3
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	4313      	orrs	r3, r2
 800b394:	697a      	ldr	r2, [r7, #20]
 800b396:	4313      	orrs	r3, r2
 800b398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	697a      	ldr	r2, [r7, #20]
 800b39e:	609a      	str	r2, [r3, #8]
}
 800b3a0:	bf00      	nop
 800b3a2:	371c      	adds	r7, #28
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr

0800b3ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b087      	sub	sp, #28
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	60f8      	str	r0, [r7, #12]
 800b3b4:	60b9      	str	r1, [r7, #8]
 800b3b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	f003 031f 	and.w	r3, r3, #31
 800b3be:	2201      	movs	r2, #1
 800b3c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b3c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	6a1a      	ldr	r2, [r3, #32]
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	43db      	mvns	r3, r3
 800b3ce:	401a      	ands	r2, r3
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	6a1a      	ldr	r2, [r3, #32]
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	f003 031f 	and.w	r3, r3, #31
 800b3de:	6879      	ldr	r1, [r7, #4]
 800b3e0:	fa01 f303 	lsl.w	r3, r1, r3
 800b3e4:	431a      	orrs	r2, r3
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	621a      	str	r2, [r3, #32]
}
 800b3ea:	bf00      	nop
 800b3ec:	371c      	adds	r7, #28
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f4:	4770      	bx	lr
	...

0800b3f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b085      	sub	sp, #20
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b408:	2b01      	cmp	r3, #1
 800b40a:	d101      	bne.n	800b410 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b40c:	2302      	movs	r3, #2
 800b40e:	e06d      	b.n	800b4ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2201      	movs	r2, #1
 800b414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2202      	movs	r2, #2
 800b41c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	689b      	ldr	r3, [r3, #8]
 800b42e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4a30      	ldr	r2, [pc, #192]	@ (800b4f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d004      	beq.n	800b444 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	4a2f      	ldr	r2, [pc, #188]	@ (800b4fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b440:	4293      	cmp	r3, r2
 800b442:	d108      	bne.n	800b456 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b44a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	685b      	ldr	r3, [r3, #4]
 800b450:	68fa      	ldr	r2, [r7, #12]
 800b452:	4313      	orrs	r3, r2
 800b454:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b45c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	68fa      	ldr	r2, [r7, #12]
 800b464:	4313      	orrs	r3, r2
 800b466:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	4a20      	ldr	r2, [pc, #128]	@ (800b4f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d022      	beq.n	800b4c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b482:	d01d      	beq.n	800b4c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	4a1d      	ldr	r2, [pc, #116]	@ (800b500 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d018      	beq.n	800b4c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4a1c      	ldr	r2, [pc, #112]	@ (800b504 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b494:	4293      	cmp	r3, r2
 800b496:	d013      	beq.n	800b4c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	4a1a      	ldr	r2, [pc, #104]	@ (800b508 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d00e      	beq.n	800b4c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4a15      	ldr	r2, [pc, #84]	@ (800b4fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d009      	beq.n	800b4c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4a16      	ldr	r2, [pc, #88]	@ (800b50c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d004      	beq.n	800b4c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4a15      	ldr	r2, [pc, #84]	@ (800b510 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d10c      	bne.n	800b4da <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b4c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	689b      	ldr	r3, [r3, #8]
 800b4cc:	68ba      	ldr	r2, [r7, #8]
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	68ba      	ldr	r2, [r7, #8]
 800b4d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2201      	movs	r2, #1
 800b4de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b4ea:	2300      	movs	r3, #0
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3714      	adds	r7, #20
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr
 800b4f8:	40010000 	.word	0x40010000
 800b4fc:	40010400 	.word	0x40010400
 800b500:	40000400 	.word	0x40000400
 800b504:	40000800 	.word	0x40000800
 800b508:	40000c00 	.word	0x40000c00
 800b50c:	40001800 	.word	0x40001800
 800b510:	40014000 	.word	0x40014000

0800b514 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d101      	bne.n	800b526 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b522:	2301      	movs	r3, #1
 800b524:	e042      	b.n	800b5ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d106      	bne.n	800b53e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2200      	movs	r2, #0
 800b534:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f7f6 fb89 	bl	8001c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2224      	movs	r2, #36	@ 0x24
 800b542:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	681a      	ldr	r2, [r3, #0]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f022 0201 	bic.w	r2, r2, #1
 800b554:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d002      	beq.n	800b564 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f001 fa44 	bl	800c9ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f000 fcd9 	bl	800bf1c <UART_SetConfig>
 800b56a:	4603      	mov	r3, r0
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d101      	bne.n	800b574 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b570:	2301      	movs	r3, #1
 800b572:	e01b      	b.n	800b5ac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	685a      	ldr	r2, [r3, #4]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b582:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	689a      	ldr	r2, [r3, #8]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b592:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f042 0201 	orr.w	r2, r2, #1
 800b5a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f001 fac3 	bl	800cb30 <UART_CheckIdleState>
 800b5aa:	4603      	mov	r3, r0
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3708      	adds	r7, #8
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b08a      	sub	sp, #40	@ 0x28
 800b5b8:	af02      	add	r7, sp, #8
 800b5ba:	60f8      	str	r0, [r7, #12]
 800b5bc:	60b9      	str	r1, [r7, #8]
 800b5be:	603b      	str	r3, [r7, #0]
 800b5c0:	4613      	mov	r3, r2
 800b5c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5ca:	2b20      	cmp	r3, #32
 800b5cc:	d17b      	bne.n	800b6c6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d002      	beq.n	800b5da <HAL_UART_Transmit+0x26>
 800b5d4:	88fb      	ldrh	r3, [r7, #6]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d101      	bne.n	800b5de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b5da:	2301      	movs	r3, #1
 800b5dc:	e074      	b.n	800b6c8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2221      	movs	r2, #33	@ 0x21
 800b5ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b5ee:	f7f6 fc51 	bl	8001e94 <HAL_GetTick>
 800b5f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	88fa      	ldrh	r2, [r7, #6]
 800b5f8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	88fa      	ldrh	r2, [r7, #6]
 800b600:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	689b      	ldr	r3, [r3, #8]
 800b608:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b60c:	d108      	bne.n	800b620 <HAL_UART_Transmit+0x6c>
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	691b      	ldr	r3, [r3, #16]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d104      	bne.n	800b620 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b616:	2300      	movs	r3, #0
 800b618:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	61bb      	str	r3, [r7, #24]
 800b61e:	e003      	b.n	800b628 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b624:	2300      	movs	r3, #0
 800b626:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b628:	e030      	b.n	800b68c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	9300      	str	r3, [sp, #0]
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	2200      	movs	r2, #0
 800b632:	2180      	movs	r1, #128	@ 0x80
 800b634:	68f8      	ldr	r0, [r7, #12]
 800b636:	f001 fb25 	bl	800cc84 <UART_WaitOnFlagUntilTimeout>
 800b63a:	4603      	mov	r3, r0
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d005      	beq.n	800b64c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	2220      	movs	r2, #32
 800b644:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b648:	2303      	movs	r3, #3
 800b64a:	e03d      	b.n	800b6c8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b64c:	69fb      	ldr	r3, [r7, #28]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d10b      	bne.n	800b66a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b652:	69bb      	ldr	r3, [r7, #24]
 800b654:	881b      	ldrh	r3, [r3, #0]
 800b656:	461a      	mov	r2, r3
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b660:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b662:	69bb      	ldr	r3, [r7, #24]
 800b664:	3302      	adds	r3, #2
 800b666:	61bb      	str	r3, [r7, #24]
 800b668:	e007      	b.n	800b67a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b66a:	69fb      	ldr	r3, [r7, #28]
 800b66c:	781a      	ldrb	r2, [r3, #0]
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b674:	69fb      	ldr	r3, [r7, #28]
 800b676:	3301      	adds	r3, #1
 800b678:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b680:	b29b      	uxth	r3, r3
 800b682:	3b01      	subs	r3, #1
 800b684:	b29a      	uxth	r2, r3
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b692:	b29b      	uxth	r3, r3
 800b694:	2b00      	cmp	r3, #0
 800b696:	d1c8      	bne.n	800b62a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	9300      	str	r3, [sp, #0]
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	2140      	movs	r1, #64	@ 0x40
 800b6a2:	68f8      	ldr	r0, [r7, #12]
 800b6a4:	f001 faee 	bl	800cc84 <UART_WaitOnFlagUntilTimeout>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d005      	beq.n	800b6ba <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2220      	movs	r2, #32
 800b6b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b6b6:	2303      	movs	r3, #3
 800b6b8:	e006      	b.n	800b6c8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2220      	movs	r2, #32
 800b6be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	e000      	b.n	800b6c8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b6c6:	2302      	movs	r3, #2
  }
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3720      	adds	r7, #32
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b08a      	sub	sp, #40	@ 0x28
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	60f8      	str	r0, [r7, #12]
 800b6d8:	60b9      	str	r1, [r7, #8]
 800b6da:	4613      	mov	r3, r2
 800b6dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b6e4:	2b20      	cmp	r3, #32
 800b6e6:	d137      	bne.n	800b758 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d002      	beq.n	800b6f4 <HAL_UART_Receive_IT+0x24>
 800b6ee:	88fb      	ldrh	r3, [r7, #6]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d101      	bne.n	800b6f8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	e030      	b.n	800b75a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4a18      	ldr	r2, [pc, #96]	@ (800b764 <HAL_UART_Receive_IT+0x94>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d01f      	beq.n	800b748 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b712:	2b00      	cmp	r3, #0
 800b714:	d018      	beq.n	800b748 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	e853 3f00 	ldrex	r3, [r3]
 800b722:	613b      	str	r3, [r7, #16]
   return(result);
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b72a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	461a      	mov	r2, r3
 800b732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b734:	623b      	str	r3, [r7, #32]
 800b736:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b738:	69f9      	ldr	r1, [r7, #28]
 800b73a:	6a3a      	ldr	r2, [r7, #32]
 800b73c:	e841 2300 	strex	r3, r2, [r1]
 800b740:	61bb      	str	r3, [r7, #24]
   return(result);
 800b742:	69bb      	ldr	r3, [r7, #24]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d1e6      	bne.n	800b716 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b748:	88fb      	ldrh	r3, [r7, #6]
 800b74a:	461a      	mov	r2, r3
 800b74c:	68b9      	ldr	r1, [r7, #8]
 800b74e:	68f8      	ldr	r0, [r7, #12]
 800b750:	f001 fb06 	bl	800cd60 <UART_Start_Receive_IT>
 800b754:	4603      	mov	r3, r0
 800b756:	e000      	b.n	800b75a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b758:	2302      	movs	r3, #2
  }
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3728      	adds	r7, #40	@ 0x28
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}
 800b762:	bf00      	nop
 800b764:	58000c00 	.word	0x58000c00

0800b768 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b0ba      	sub	sp, #232	@ 0xe8
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	69db      	ldr	r3, [r3, #28]
 800b776:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	689b      	ldr	r3, [r3, #8]
 800b78a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b78e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b792:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b796:	4013      	ands	r3, r2
 800b798:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b79c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d11b      	bne.n	800b7dc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b7a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b7a8:	f003 0320 	and.w	r3, r3, #32
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d015      	beq.n	800b7dc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b7b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b7b4:	f003 0320 	and.w	r3, r3, #32
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d105      	bne.n	800b7c8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b7bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b7c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d009      	beq.n	800b7dc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f000 8377 	beq.w	800bec0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	4798      	blx	r3
      }
      return;
 800b7da:	e371      	b.n	800bec0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b7dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	f000 8123 	beq.w	800ba2c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b7e6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b7ea:	4b8d      	ldr	r3, [pc, #564]	@ (800ba20 <HAL_UART_IRQHandler+0x2b8>)
 800b7ec:	4013      	ands	r3, r2
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d106      	bne.n	800b800 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b7f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b7f6:	4b8b      	ldr	r3, [pc, #556]	@ (800ba24 <HAL_UART_IRQHandler+0x2bc>)
 800b7f8:	4013      	ands	r3, r2
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	f000 8116 	beq.w	800ba2c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b804:	f003 0301 	and.w	r3, r3, #1
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d011      	beq.n	800b830 <HAL_UART_IRQHandler+0xc8>
 800b80c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b814:	2b00      	cmp	r3, #0
 800b816:	d00b      	beq.n	800b830 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	2201      	movs	r2, #1
 800b81e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b826:	f043 0201 	orr.w	r2, r3, #1
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b834:	f003 0302 	and.w	r3, r3, #2
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d011      	beq.n	800b860 <HAL_UART_IRQHandler+0xf8>
 800b83c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b840:	f003 0301 	and.w	r3, r3, #1
 800b844:	2b00      	cmp	r3, #0
 800b846:	d00b      	beq.n	800b860 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	2202      	movs	r2, #2
 800b84e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b856:	f043 0204 	orr.w	r2, r3, #4
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b864:	f003 0304 	and.w	r3, r3, #4
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d011      	beq.n	800b890 <HAL_UART_IRQHandler+0x128>
 800b86c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b870:	f003 0301 	and.w	r3, r3, #1
 800b874:	2b00      	cmp	r3, #0
 800b876:	d00b      	beq.n	800b890 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	2204      	movs	r2, #4
 800b87e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b886:	f043 0202 	orr.w	r2, r3, #2
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b894:	f003 0308 	and.w	r3, r3, #8
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d017      	beq.n	800b8cc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b89c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b8a0:	f003 0320 	and.w	r3, r3, #32
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d105      	bne.n	800b8b4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b8a8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b8ac:	4b5c      	ldr	r3, [pc, #368]	@ (800ba20 <HAL_UART_IRQHandler+0x2b8>)
 800b8ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d00b      	beq.n	800b8cc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	2208      	movs	r2, #8
 800b8ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8c2:	f043 0208 	orr.w	r2, r3, #8
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b8cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b8d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d012      	beq.n	800b8fe <HAL_UART_IRQHandler+0x196>
 800b8d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b8dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d00c      	beq.n	800b8fe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b8ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8f4:	f043 0220 	orr.w	r2, r3, #32
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b904:	2b00      	cmp	r3, #0
 800b906:	f000 82dd 	beq.w	800bec4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b90a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b90e:	f003 0320 	and.w	r3, r3, #32
 800b912:	2b00      	cmp	r3, #0
 800b914:	d013      	beq.n	800b93e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b91a:	f003 0320 	and.w	r3, r3, #32
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d105      	bne.n	800b92e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d007      	beq.n	800b93e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b932:	2b00      	cmp	r3, #0
 800b934:	d003      	beq.n	800b93e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b944:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	689b      	ldr	r3, [r3, #8]
 800b94e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b952:	2b40      	cmp	r3, #64	@ 0x40
 800b954:	d005      	beq.n	800b962 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b956:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b95a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d054      	beq.n	800ba0c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f001 fb1e 	bl	800cfa4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	689b      	ldr	r3, [r3, #8]
 800b96e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b972:	2b40      	cmp	r3, #64	@ 0x40
 800b974:	d146      	bne.n	800ba04 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	3308      	adds	r3, #8
 800b97c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b980:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b984:	e853 3f00 	ldrex	r3, [r3]
 800b988:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b98c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b990:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b994:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	3308      	adds	r3, #8
 800b99e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b9a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b9a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b9ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b9b2:	e841 2300 	strex	r3, r2, [r1]
 800b9b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b9ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d1d9      	bne.n	800b976 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d017      	beq.n	800b9fc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b9d2:	4a15      	ldr	r2, [pc, #84]	@ (800ba28 <HAL_UART_IRQHandler+0x2c0>)
 800b9d4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f7f8 fd65 	bl	80044ac <HAL_DMA_Abort_IT>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d019      	beq.n	800ba1c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b9ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9f0:	687a      	ldr	r2, [r7, #4]
 800b9f2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b9f6:	4610      	mov	r0, r2
 800b9f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9fa:	e00f      	b.n	800ba1c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 fa77 	bl	800bef0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba02:	e00b      	b.n	800ba1c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f000 fa73 	bl	800bef0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba0a:	e007      	b.n	800ba1c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f000 fa6f 	bl	800bef0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2200      	movs	r2, #0
 800ba16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800ba1a:	e253      	b.n	800bec4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba1c:	bf00      	nop
    return;
 800ba1e:	e251      	b.n	800bec4 <HAL_UART_IRQHandler+0x75c>
 800ba20:	10000001 	.word	0x10000001
 800ba24:	04000120 	.word	0x04000120
 800ba28:	0800d071 	.word	0x0800d071

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba30:	2b01      	cmp	r3, #1
 800ba32:	f040 81e7 	bne.w	800be04 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ba36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba3a:	f003 0310 	and.w	r3, r3, #16
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	f000 81e0 	beq.w	800be04 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ba44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba48:	f003 0310 	and.w	r3, r3, #16
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	f000 81d9 	beq.w	800be04 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	2210      	movs	r2, #16
 800ba58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	689b      	ldr	r3, [r3, #8]
 800ba60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba64:	2b40      	cmp	r3, #64	@ 0x40
 800ba66:	f040 8151 	bne.w	800bd0c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	4a96      	ldr	r2, [pc, #600]	@ (800bccc <HAL_UART_IRQHandler+0x564>)
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d068      	beq.n	800bb4a <HAL_UART_IRQHandler+0x3e2>
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	4a93      	ldr	r2, [pc, #588]	@ (800bcd0 <HAL_UART_IRQHandler+0x568>)
 800ba82:	4293      	cmp	r3, r2
 800ba84:	d061      	beq.n	800bb4a <HAL_UART_IRQHandler+0x3e2>
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	4a91      	ldr	r2, [pc, #580]	@ (800bcd4 <HAL_UART_IRQHandler+0x56c>)
 800ba90:	4293      	cmp	r3, r2
 800ba92:	d05a      	beq.n	800bb4a <HAL_UART_IRQHandler+0x3e2>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	4a8e      	ldr	r2, [pc, #568]	@ (800bcd8 <HAL_UART_IRQHandler+0x570>)
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d053      	beq.n	800bb4a <HAL_UART_IRQHandler+0x3e2>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4a8c      	ldr	r2, [pc, #560]	@ (800bcdc <HAL_UART_IRQHandler+0x574>)
 800baac:	4293      	cmp	r3, r2
 800baae:	d04c      	beq.n	800bb4a <HAL_UART_IRQHandler+0x3e2>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4a89      	ldr	r2, [pc, #548]	@ (800bce0 <HAL_UART_IRQHandler+0x578>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d045      	beq.n	800bb4a <HAL_UART_IRQHandler+0x3e2>
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	4a87      	ldr	r2, [pc, #540]	@ (800bce4 <HAL_UART_IRQHandler+0x57c>)
 800bac8:	4293      	cmp	r3, r2
 800baca:	d03e      	beq.n	800bb4a <HAL_UART_IRQHandler+0x3e2>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	4a84      	ldr	r2, [pc, #528]	@ (800bce8 <HAL_UART_IRQHandler+0x580>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d037      	beq.n	800bb4a <HAL_UART_IRQHandler+0x3e2>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	4a82      	ldr	r2, [pc, #520]	@ (800bcec <HAL_UART_IRQHandler+0x584>)
 800bae4:	4293      	cmp	r3, r2
 800bae6:	d030      	beq.n	800bb4a <HAL_UART_IRQHandler+0x3e2>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4a7f      	ldr	r2, [pc, #508]	@ (800bcf0 <HAL_UART_IRQHandler+0x588>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d029      	beq.n	800bb4a <HAL_UART_IRQHandler+0x3e2>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	4a7d      	ldr	r2, [pc, #500]	@ (800bcf4 <HAL_UART_IRQHandler+0x58c>)
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d022      	beq.n	800bb4a <HAL_UART_IRQHandler+0x3e2>
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	4a7a      	ldr	r2, [pc, #488]	@ (800bcf8 <HAL_UART_IRQHandler+0x590>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d01b      	beq.n	800bb4a <HAL_UART_IRQHandler+0x3e2>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	4a78      	ldr	r2, [pc, #480]	@ (800bcfc <HAL_UART_IRQHandler+0x594>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d014      	beq.n	800bb4a <HAL_UART_IRQHandler+0x3e2>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	4a75      	ldr	r2, [pc, #468]	@ (800bd00 <HAL_UART_IRQHandler+0x598>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d00d      	beq.n	800bb4a <HAL_UART_IRQHandler+0x3e2>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4a73      	ldr	r2, [pc, #460]	@ (800bd04 <HAL_UART_IRQHandler+0x59c>)
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	d006      	beq.n	800bb4a <HAL_UART_IRQHandler+0x3e2>
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	4a70      	ldr	r2, [pc, #448]	@ (800bd08 <HAL_UART_IRQHandler+0x5a0>)
 800bb46:	4293      	cmp	r3, r2
 800bb48:	d106      	bne.n	800bb58 <HAL_UART_IRQHandler+0x3f0>
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	685b      	ldr	r3, [r3, #4]
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	e005      	b.n	800bb64 <HAL_UART_IRQHandler+0x3fc>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	b29b      	uxth	r3, r3
 800bb64:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bb68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	f000 81ab 	beq.w	800bec8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bb78:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	f080 81a3 	bcs.w	800bec8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bb88:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb92:	69db      	ldr	r3, [r3, #28]
 800bb94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb98:	f000 8087 	beq.w	800bcaa <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bba4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bba8:	e853 3f00 	ldrex	r3, [r3]
 800bbac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800bbb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bbb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bbb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	461a      	mov	r2, r3
 800bbc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bbc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bbca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800bbd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bbd6:	e841 2300 	strex	r3, r2, [r1]
 800bbda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800bbde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d1da      	bne.n	800bb9c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	3308      	adds	r3, #8
 800bbec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bbf0:	e853 3f00 	ldrex	r3, [r3]
 800bbf4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bbf6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bbf8:	f023 0301 	bic.w	r3, r3, #1
 800bbfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	3308      	adds	r3, #8
 800bc06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bc0a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bc0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc10:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bc12:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bc16:	e841 2300 	strex	r3, r2, [r1]
 800bc1a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bc1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d1e1      	bne.n	800bbe6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	3308      	adds	r3, #8
 800bc28:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bc2c:	e853 3f00 	ldrex	r3, [r3]
 800bc30:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bc32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	3308      	adds	r3, #8
 800bc42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bc46:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bc48:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc4a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bc4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bc4e:	e841 2300 	strex	r3, r2, [r1]
 800bc52:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bc54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d1e3      	bne.n	800bc22 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2220      	movs	r2, #32
 800bc5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2200      	movs	r2, #0
 800bc66:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc70:	e853 3f00 	ldrex	r3, [r3]
 800bc74:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bc76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc78:	f023 0310 	bic.w	r3, r3, #16
 800bc7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	461a      	mov	r2, r3
 800bc86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bc8c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc8e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bc90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bc92:	e841 2300 	strex	r3, r2, [r1]
 800bc96:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bc98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d1e4      	bne.n	800bc68 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bca4:	4618      	mov	r0, r3
 800bca6:	f7f8 f8e3 	bl	8003e70 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2202      	movs	r2, #2
 800bcae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bcbc:	b29b      	uxth	r3, r3
 800bcbe:	1ad3      	subs	r3, r2, r3
 800bcc0:	b29b      	uxth	r3, r3
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f000 f91d 	bl	800bf04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bcca:	e0fd      	b.n	800bec8 <HAL_UART_IRQHandler+0x760>
 800bccc:	40020010 	.word	0x40020010
 800bcd0:	40020028 	.word	0x40020028
 800bcd4:	40020040 	.word	0x40020040
 800bcd8:	40020058 	.word	0x40020058
 800bcdc:	40020070 	.word	0x40020070
 800bce0:	40020088 	.word	0x40020088
 800bce4:	400200a0 	.word	0x400200a0
 800bce8:	400200b8 	.word	0x400200b8
 800bcec:	40020410 	.word	0x40020410
 800bcf0:	40020428 	.word	0x40020428
 800bcf4:	40020440 	.word	0x40020440
 800bcf8:	40020458 	.word	0x40020458
 800bcfc:	40020470 	.word	0x40020470
 800bd00:	40020488 	.word	0x40020488
 800bd04:	400204a0 	.word	0x400204a0
 800bd08:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bd18:	b29b      	uxth	r3, r3
 800bd1a:	1ad3      	subs	r3, r2, r3
 800bd1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bd26:	b29b      	uxth	r3, r3
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	f000 80cf 	beq.w	800becc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800bd2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	f000 80ca 	beq.w	800becc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd40:	e853 3f00 	ldrex	r3, [r3]
 800bd44:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bd46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bd4c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	461a      	mov	r2, r3
 800bd56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bd5a:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd5c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd5e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bd60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bd62:	e841 2300 	strex	r3, r2, [r1]
 800bd66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bd68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d1e4      	bne.n	800bd38 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	3308      	adds	r3, #8
 800bd74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd78:	e853 3f00 	ldrex	r3, [r3]
 800bd7c:	623b      	str	r3, [r7, #32]
   return(result);
 800bd7e:	6a3a      	ldr	r2, [r7, #32]
 800bd80:	4b55      	ldr	r3, [pc, #340]	@ (800bed8 <HAL_UART_IRQHandler+0x770>)
 800bd82:	4013      	ands	r3, r2
 800bd84:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	3308      	adds	r3, #8
 800bd8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800bd92:	633a      	str	r2, [r7, #48]	@ 0x30
 800bd94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bd98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd9a:	e841 2300 	strex	r3, r2, [r1]
 800bd9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bda0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d1e3      	bne.n	800bd6e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2220      	movs	r2, #32
 800bdaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	e853 3f00 	ldrex	r3, [r3]
 800bdc6:	60fb      	str	r3, [r7, #12]
   return(result);
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	f023 0310 	bic.w	r3, r3, #16
 800bdce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	461a      	mov	r2, r3
 800bdd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bddc:	61fb      	str	r3, [r7, #28]
 800bdde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde0:	69b9      	ldr	r1, [r7, #24]
 800bde2:	69fa      	ldr	r2, [r7, #28]
 800bde4:	e841 2300 	strex	r3, r2, [r1]
 800bde8:	617b      	str	r3, [r7, #20]
   return(result);
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d1e4      	bne.n	800bdba <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2202      	movs	r2, #2
 800bdf4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bdf6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f000 f881 	bl	800bf04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800be02:	e063      	b.n	800becc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800be04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d00e      	beq.n	800be2e <HAL_UART_IRQHandler+0x6c6>
 800be10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d008      	beq.n	800be2e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800be24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f001 fe80 	bl	800db2c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800be2c:	e051      	b.n	800bed2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800be2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be36:	2b00      	cmp	r3, #0
 800be38:	d014      	beq.n	800be64 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800be3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be42:	2b00      	cmp	r3, #0
 800be44:	d105      	bne.n	800be52 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800be46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d008      	beq.n	800be64 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800be56:	2b00      	cmp	r3, #0
 800be58:	d03a      	beq.n	800bed0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	4798      	blx	r3
    }
    return;
 800be62:	e035      	b.n	800bed0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800be64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d009      	beq.n	800be84 <HAL_UART_IRQHandler+0x71c>
 800be70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d003      	beq.n	800be84 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f001 f90d 	bl	800d09c <UART_EndTransmit_IT>
    return;
 800be82:	e026      	b.n	800bed2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800be84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d009      	beq.n	800bea4 <HAL_UART_IRQHandler+0x73c>
 800be90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be94:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d003      	beq.n	800bea4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f001 fe59 	bl	800db54 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bea2:	e016      	b.n	800bed2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bea8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800beac:	2b00      	cmp	r3, #0
 800beae:	d010      	beq.n	800bed2 <HAL_UART_IRQHandler+0x76a>
 800beb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	da0c      	bge.n	800bed2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f001 fe41 	bl	800db40 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bebe:	e008      	b.n	800bed2 <HAL_UART_IRQHandler+0x76a>
      return;
 800bec0:	bf00      	nop
 800bec2:	e006      	b.n	800bed2 <HAL_UART_IRQHandler+0x76a>
    return;
 800bec4:	bf00      	nop
 800bec6:	e004      	b.n	800bed2 <HAL_UART_IRQHandler+0x76a>
      return;
 800bec8:	bf00      	nop
 800beca:	e002      	b.n	800bed2 <HAL_UART_IRQHandler+0x76a>
      return;
 800becc:	bf00      	nop
 800bece:	e000      	b.n	800bed2 <HAL_UART_IRQHandler+0x76a>
    return;
 800bed0:	bf00      	nop
  }
}
 800bed2:	37e8      	adds	r7, #232	@ 0xe8
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}
 800bed8:	effffffe 	.word	0xeffffffe

0800bedc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bedc:	b480      	push	{r7}
 800bede:	b083      	sub	sp, #12
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bee4:	bf00      	nop
 800bee6:	370c      	adds	r7, #12
 800bee8:	46bd      	mov	sp, r7
 800beea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beee:	4770      	bx	lr

0800bef0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b083      	sub	sp, #12
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bef8:	bf00      	nop
 800befa:	370c      	adds	r7, #12
 800befc:	46bd      	mov	sp, r7
 800befe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf02:	4770      	bx	lr

0800bf04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b083      	sub	sp, #12
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	460b      	mov	r3, r1
 800bf0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bf10:	bf00      	nop
 800bf12:	370c      	adds	r7, #12
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr

0800bf1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bf1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bf20:	b092      	sub	sp, #72	@ 0x48
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bf26:	2300      	movs	r3, #0
 800bf28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	689a      	ldr	r2, [r3, #8]
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	691b      	ldr	r3, [r3, #16]
 800bf34:	431a      	orrs	r2, r3
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	695b      	ldr	r3, [r3, #20]
 800bf3a:	431a      	orrs	r2, r3
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	69db      	ldr	r3, [r3, #28]
 800bf40:	4313      	orrs	r3, r2
 800bf42:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	681a      	ldr	r2, [r3, #0]
 800bf4a:	4bbe      	ldr	r3, [pc, #760]	@ (800c244 <UART_SetConfig+0x328>)
 800bf4c:	4013      	ands	r3, r2
 800bf4e:	697a      	ldr	r2, [r7, #20]
 800bf50:	6812      	ldr	r2, [r2, #0]
 800bf52:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bf54:	430b      	orrs	r3, r1
 800bf56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	68da      	ldr	r2, [r3, #12]
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	430a      	orrs	r2, r1
 800bf6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	699b      	ldr	r3, [r3, #24]
 800bf72:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	4ab3      	ldr	r2, [pc, #716]	@ (800c248 <UART_SetConfig+0x32c>)
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	d004      	beq.n	800bf88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	6a1b      	ldr	r3, [r3, #32]
 800bf82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bf84:	4313      	orrs	r3, r2
 800bf86:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	689a      	ldr	r2, [r3, #8]
 800bf8e:	4baf      	ldr	r3, [pc, #700]	@ (800c24c <UART_SetConfig+0x330>)
 800bf90:	4013      	ands	r3, r2
 800bf92:	697a      	ldr	r2, [r7, #20]
 800bf94:	6812      	ldr	r2, [r2, #0]
 800bf96:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bf98:	430b      	orrs	r3, r1
 800bf9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfa2:	f023 010f 	bic.w	r1, r3, #15
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	430a      	orrs	r2, r1
 800bfb0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bfb2:	697b      	ldr	r3, [r7, #20]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	4aa6      	ldr	r2, [pc, #664]	@ (800c250 <UART_SetConfig+0x334>)
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	d177      	bne.n	800c0ac <UART_SetConfig+0x190>
 800bfbc:	4ba5      	ldr	r3, [pc, #660]	@ (800c254 <UART_SetConfig+0x338>)
 800bfbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bfc4:	2b28      	cmp	r3, #40	@ 0x28
 800bfc6:	d86d      	bhi.n	800c0a4 <UART_SetConfig+0x188>
 800bfc8:	a201      	add	r2, pc, #4	@ (adr r2, 800bfd0 <UART_SetConfig+0xb4>)
 800bfca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfce:	bf00      	nop
 800bfd0:	0800c075 	.word	0x0800c075
 800bfd4:	0800c0a5 	.word	0x0800c0a5
 800bfd8:	0800c0a5 	.word	0x0800c0a5
 800bfdc:	0800c0a5 	.word	0x0800c0a5
 800bfe0:	0800c0a5 	.word	0x0800c0a5
 800bfe4:	0800c0a5 	.word	0x0800c0a5
 800bfe8:	0800c0a5 	.word	0x0800c0a5
 800bfec:	0800c0a5 	.word	0x0800c0a5
 800bff0:	0800c07d 	.word	0x0800c07d
 800bff4:	0800c0a5 	.word	0x0800c0a5
 800bff8:	0800c0a5 	.word	0x0800c0a5
 800bffc:	0800c0a5 	.word	0x0800c0a5
 800c000:	0800c0a5 	.word	0x0800c0a5
 800c004:	0800c0a5 	.word	0x0800c0a5
 800c008:	0800c0a5 	.word	0x0800c0a5
 800c00c:	0800c0a5 	.word	0x0800c0a5
 800c010:	0800c085 	.word	0x0800c085
 800c014:	0800c0a5 	.word	0x0800c0a5
 800c018:	0800c0a5 	.word	0x0800c0a5
 800c01c:	0800c0a5 	.word	0x0800c0a5
 800c020:	0800c0a5 	.word	0x0800c0a5
 800c024:	0800c0a5 	.word	0x0800c0a5
 800c028:	0800c0a5 	.word	0x0800c0a5
 800c02c:	0800c0a5 	.word	0x0800c0a5
 800c030:	0800c08d 	.word	0x0800c08d
 800c034:	0800c0a5 	.word	0x0800c0a5
 800c038:	0800c0a5 	.word	0x0800c0a5
 800c03c:	0800c0a5 	.word	0x0800c0a5
 800c040:	0800c0a5 	.word	0x0800c0a5
 800c044:	0800c0a5 	.word	0x0800c0a5
 800c048:	0800c0a5 	.word	0x0800c0a5
 800c04c:	0800c0a5 	.word	0x0800c0a5
 800c050:	0800c095 	.word	0x0800c095
 800c054:	0800c0a5 	.word	0x0800c0a5
 800c058:	0800c0a5 	.word	0x0800c0a5
 800c05c:	0800c0a5 	.word	0x0800c0a5
 800c060:	0800c0a5 	.word	0x0800c0a5
 800c064:	0800c0a5 	.word	0x0800c0a5
 800c068:	0800c0a5 	.word	0x0800c0a5
 800c06c:	0800c0a5 	.word	0x0800c0a5
 800c070:	0800c09d 	.word	0x0800c09d
 800c074:	2301      	movs	r3, #1
 800c076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c07a:	e222      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c07c:	2304      	movs	r3, #4
 800c07e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c082:	e21e      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c084:	2308      	movs	r3, #8
 800c086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c08a:	e21a      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c08c:	2310      	movs	r3, #16
 800c08e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c092:	e216      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c094:	2320      	movs	r3, #32
 800c096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c09a:	e212      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c09c:	2340      	movs	r3, #64	@ 0x40
 800c09e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0a2:	e20e      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c0a4:	2380      	movs	r3, #128	@ 0x80
 800c0a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0aa:	e20a      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c0ac:	697b      	ldr	r3, [r7, #20]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	4a69      	ldr	r2, [pc, #420]	@ (800c258 <UART_SetConfig+0x33c>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d130      	bne.n	800c118 <UART_SetConfig+0x1fc>
 800c0b6:	4b67      	ldr	r3, [pc, #412]	@ (800c254 <UART_SetConfig+0x338>)
 800c0b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0ba:	f003 0307 	and.w	r3, r3, #7
 800c0be:	2b05      	cmp	r3, #5
 800c0c0:	d826      	bhi.n	800c110 <UART_SetConfig+0x1f4>
 800c0c2:	a201      	add	r2, pc, #4	@ (adr r2, 800c0c8 <UART_SetConfig+0x1ac>)
 800c0c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0c8:	0800c0e1 	.word	0x0800c0e1
 800c0cc:	0800c0e9 	.word	0x0800c0e9
 800c0d0:	0800c0f1 	.word	0x0800c0f1
 800c0d4:	0800c0f9 	.word	0x0800c0f9
 800c0d8:	0800c101 	.word	0x0800c101
 800c0dc:	0800c109 	.word	0x0800c109
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0e6:	e1ec      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c0e8:	2304      	movs	r3, #4
 800c0ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0ee:	e1e8      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c0f0:	2308      	movs	r3, #8
 800c0f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0f6:	e1e4      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c0f8:	2310      	movs	r3, #16
 800c0fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0fe:	e1e0      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c100:	2320      	movs	r3, #32
 800c102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c106:	e1dc      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c108:	2340      	movs	r3, #64	@ 0x40
 800c10a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c10e:	e1d8      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c110:	2380      	movs	r3, #128	@ 0x80
 800c112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c116:	e1d4      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	4a4f      	ldr	r2, [pc, #316]	@ (800c25c <UART_SetConfig+0x340>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d130      	bne.n	800c184 <UART_SetConfig+0x268>
 800c122:	4b4c      	ldr	r3, [pc, #304]	@ (800c254 <UART_SetConfig+0x338>)
 800c124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c126:	f003 0307 	and.w	r3, r3, #7
 800c12a:	2b05      	cmp	r3, #5
 800c12c:	d826      	bhi.n	800c17c <UART_SetConfig+0x260>
 800c12e:	a201      	add	r2, pc, #4	@ (adr r2, 800c134 <UART_SetConfig+0x218>)
 800c130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c134:	0800c14d 	.word	0x0800c14d
 800c138:	0800c155 	.word	0x0800c155
 800c13c:	0800c15d 	.word	0x0800c15d
 800c140:	0800c165 	.word	0x0800c165
 800c144:	0800c16d 	.word	0x0800c16d
 800c148:	0800c175 	.word	0x0800c175
 800c14c:	2300      	movs	r3, #0
 800c14e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c152:	e1b6      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c154:	2304      	movs	r3, #4
 800c156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c15a:	e1b2      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c15c:	2308      	movs	r3, #8
 800c15e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c162:	e1ae      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c164:	2310      	movs	r3, #16
 800c166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c16a:	e1aa      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c16c:	2320      	movs	r3, #32
 800c16e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c172:	e1a6      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c174:	2340      	movs	r3, #64	@ 0x40
 800c176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c17a:	e1a2      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c17c:	2380      	movs	r3, #128	@ 0x80
 800c17e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c182:	e19e      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	4a35      	ldr	r2, [pc, #212]	@ (800c260 <UART_SetConfig+0x344>)
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d130      	bne.n	800c1f0 <UART_SetConfig+0x2d4>
 800c18e:	4b31      	ldr	r3, [pc, #196]	@ (800c254 <UART_SetConfig+0x338>)
 800c190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c192:	f003 0307 	and.w	r3, r3, #7
 800c196:	2b05      	cmp	r3, #5
 800c198:	d826      	bhi.n	800c1e8 <UART_SetConfig+0x2cc>
 800c19a:	a201      	add	r2, pc, #4	@ (adr r2, 800c1a0 <UART_SetConfig+0x284>)
 800c19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1a0:	0800c1b9 	.word	0x0800c1b9
 800c1a4:	0800c1c1 	.word	0x0800c1c1
 800c1a8:	0800c1c9 	.word	0x0800c1c9
 800c1ac:	0800c1d1 	.word	0x0800c1d1
 800c1b0:	0800c1d9 	.word	0x0800c1d9
 800c1b4:	0800c1e1 	.word	0x0800c1e1
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1be:	e180      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c1c0:	2304      	movs	r3, #4
 800c1c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1c6:	e17c      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c1c8:	2308      	movs	r3, #8
 800c1ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1ce:	e178      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c1d0:	2310      	movs	r3, #16
 800c1d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1d6:	e174      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c1d8:	2320      	movs	r3, #32
 800c1da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1de:	e170      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c1e0:	2340      	movs	r3, #64	@ 0x40
 800c1e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1e6:	e16c      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c1e8:	2380      	movs	r3, #128	@ 0x80
 800c1ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1ee:	e168      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	4a1b      	ldr	r2, [pc, #108]	@ (800c264 <UART_SetConfig+0x348>)
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d142      	bne.n	800c280 <UART_SetConfig+0x364>
 800c1fa:	4b16      	ldr	r3, [pc, #88]	@ (800c254 <UART_SetConfig+0x338>)
 800c1fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1fe:	f003 0307 	and.w	r3, r3, #7
 800c202:	2b05      	cmp	r3, #5
 800c204:	d838      	bhi.n	800c278 <UART_SetConfig+0x35c>
 800c206:	a201      	add	r2, pc, #4	@ (adr r2, 800c20c <UART_SetConfig+0x2f0>)
 800c208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c20c:	0800c225 	.word	0x0800c225
 800c210:	0800c22d 	.word	0x0800c22d
 800c214:	0800c235 	.word	0x0800c235
 800c218:	0800c23d 	.word	0x0800c23d
 800c21c:	0800c269 	.word	0x0800c269
 800c220:	0800c271 	.word	0x0800c271
 800c224:	2300      	movs	r3, #0
 800c226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c22a:	e14a      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c22c:	2304      	movs	r3, #4
 800c22e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c232:	e146      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c234:	2308      	movs	r3, #8
 800c236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c23a:	e142      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c23c:	2310      	movs	r3, #16
 800c23e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c242:	e13e      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c244:	cfff69f3 	.word	0xcfff69f3
 800c248:	58000c00 	.word	0x58000c00
 800c24c:	11fff4ff 	.word	0x11fff4ff
 800c250:	40011000 	.word	0x40011000
 800c254:	58024400 	.word	0x58024400
 800c258:	40004400 	.word	0x40004400
 800c25c:	40004800 	.word	0x40004800
 800c260:	40004c00 	.word	0x40004c00
 800c264:	40005000 	.word	0x40005000
 800c268:	2320      	movs	r3, #32
 800c26a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c26e:	e128      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c270:	2340      	movs	r3, #64	@ 0x40
 800c272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c276:	e124      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c278:	2380      	movs	r3, #128	@ 0x80
 800c27a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c27e:	e120      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4acb      	ldr	r2, [pc, #812]	@ (800c5b4 <UART_SetConfig+0x698>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d176      	bne.n	800c378 <UART_SetConfig+0x45c>
 800c28a:	4bcb      	ldr	r3, [pc, #812]	@ (800c5b8 <UART_SetConfig+0x69c>)
 800c28c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c28e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c292:	2b28      	cmp	r3, #40	@ 0x28
 800c294:	d86c      	bhi.n	800c370 <UART_SetConfig+0x454>
 800c296:	a201      	add	r2, pc, #4	@ (adr r2, 800c29c <UART_SetConfig+0x380>)
 800c298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c29c:	0800c341 	.word	0x0800c341
 800c2a0:	0800c371 	.word	0x0800c371
 800c2a4:	0800c371 	.word	0x0800c371
 800c2a8:	0800c371 	.word	0x0800c371
 800c2ac:	0800c371 	.word	0x0800c371
 800c2b0:	0800c371 	.word	0x0800c371
 800c2b4:	0800c371 	.word	0x0800c371
 800c2b8:	0800c371 	.word	0x0800c371
 800c2bc:	0800c349 	.word	0x0800c349
 800c2c0:	0800c371 	.word	0x0800c371
 800c2c4:	0800c371 	.word	0x0800c371
 800c2c8:	0800c371 	.word	0x0800c371
 800c2cc:	0800c371 	.word	0x0800c371
 800c2d0:	0800c371 	.word	0x0800c371
 800c2d4:	0800c371 	.word	0x0800c371
 800c2d8:	0800c371 	.word	0x0800c371
 800c2dc:	0800c351 	.word	0x0800c351
 800c2e0:	0800c371 	.word	0x0800c371
 800c2e4:	0800c371 	.word	0x0800c371
 800c2e8:	0800c371 	.word	0x0800c371
 800c2ec:	0800c371 	.word	0x0800c371
 800c2f0:	0800c371 	.word	0x0800c371
 800c2f4:	0800c371 	.word	0x0800c371
 800c2f8:	0800c371 	.word	0x0800c371
 800c2fc:	0800c359 	.word	0x0800c359
 800c300:	0800c371 	.word	0x0800c371
 800c304:	0800c371 	.word	0x0800c371
 800c308:	0800c371 	.word	0x0800c371
 800c30c:	0800c371 	.word	0x0800c371
 800c310:	0800c371 	.word	0x0800c371
 800c314:	0800c371 	.word	0x0800c371
 800c318:	0800c371 	.word	0x0800c371
 800c31c:	0800c361 	.word	0x0800c361
 800c320:	0800c371 	.word	0x0800c371
 800c324:	0800c371 	.word	0x0800c371
 800c328:	0800c371 	.word	0x0800c371
 800c32c:	0800c371 	.word	0x0800c371
 800c330:	0800c371 	.word	0x0800c371
 800c334:	0800c371 	.word	0x0800c371
 800c338:	0800c371 	.word	0x0800c371
 800c33c:	0800c369 	.word	0x0800c369
 800c340:	2301      	movs	r3, #1
 800c342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c346:	e0bc      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c348:	2304      	movs	r3, #4
 800c34a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c34e:	e0b8      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c350:	2308      	movs	r3, #8
 800c352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c356:	e0b4      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c358:	2310      	movs	r3, #16
 800c35a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c35e:	e0b0      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c360:	2320      	movs	r3, #32
 800c362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c366:	e0ac      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c368:	2340      	movs	r3, #64	@ 0x40
 800c36a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c36e:	e0a8      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c370:	2380      	movs	r3, #128	@ 0x80
 800c372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c376:	e0a4      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	4a8f      	ldr	r2, [pc, #572]	@ (800c5bc <UART_SetConfig+0x6a0>)
 800c37e:	4293      	cmp	r3, r2
 800c380:	d130      	bne.n	800c3e4 <UART_SetConfig+0x4c8>
 800c382:	4b8d      	ldr	r3, [pc, #564]	@ (800c5b8 <UART_SetConfig+0x69c>)
 800c384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c386:	f003 0307 	and.w	r3, r3, #7
 800c38a:	2b05      	cmp	r3, #5
 800c38c:	d826      	bhi.n	800c3dc <UART_SetConfig+0x4c0>
 800c38e:	a201      	add	r2, pc, #4	@ (adr r2, 800c394 <UART_SetConfig+0x478>)
 800c390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c394:	0800c3ad 	.word	0x0800c3ad
 800c398:	0800c3b5 	.word	0x0800c3b5
 800c39c:	0800c3bd 	.word	0x0800c3bd
 800c3a0:	0800c3c5 	.word	0x0800c3c5
 800c3a4:	0800c3cd 	.word	0x0800c3cd
 800c3a8:	0800c3d5 	.word	0x0800c3d5
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3b2:	e086      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c3b4:	2304      	movs	r3, #4
 800c3b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3ba:	e082      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c3bc:	2308      	movs	r3, #8
 800c3be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3c2:	e07e      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c3c4:	2310      	movs	r3, #16
 800c3c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3ca:	e07a      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c3cc:	2320      	movs	r3, #32
 800c3ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3d2:	e076      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c3d4:	2340      	movs	r3, #64	@ 0x40
 800c3d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3da:	e072      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c3dc:	2380      	movs	r3, #128	@ 0x80
 800c3de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3e2:	e06e      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	4a75      	ldr	r2, [pc, #468]	@ (800c5c0 <UART_SetConfig+0x6a4>)
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	d130      	bne.n	800c450 <UART_SetConfig+0x534>
 800c3ee:	4b72      	ldr	r3, [pc, #456]	@ (800c5b8 <UART_SetConfig+0x69c>)
 800c3f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3f2:	f003 0307 	and.w	r3, r3, #7
 800c3f6:	2b05      	cmp	r3, #5
 800c3f8:	d826      	bhi.n	800c448 <UART_SetConfig+0x52c>
 800c3fa:	a201      	add	r2, pc, #4	@ (adr r2, 800c400 <UART_SetConfig+0x4e4>)
 800c3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c400:	0800c419 	.word	0x0800c419
 800c404:	0800c421 	.word	0x0800c421
 800c408:	0800c429 	.word	0x0800c429
 800c40c:	0800c431 	.word	0x0800c431
 800c410:	0800c439 	.word	0x0800c439
 800c414:	0800c441 	.word	0x0800c441
 800c418:	2300      	movs	r3, #0
 800c41a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c41e:	e050      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c420:	2304      	movs	r3, #4
 800c422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c426:	e04c      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c428:	2308      	movs	r3, #8
 800c42a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c42e:	e048      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c430:	2310      	movs	r3, #16
 800c432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c436:	e044      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c438:	2320      	movs	r3, #32
 800c43a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c43e:	e040      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c440:	2340      	movs	r3, #64	@ 0x40
 800c442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c446:	e03c      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c448:	2380      	movs	r3, #128	@ 0x80
 800c44a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c44e:	e038      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c450:	697b      	ldr	r3, [r7, #20]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4a5b      	ldr	r2, [pc, #364]	@ (800c5c4 <UART_SetConfig+0x6a8>)
 800c456:	4293      	cmp	r3, r2
 800c458:	d130      	bne.n	800c4bc <UART_SetConfig+0x5a0>
 800c45a:	4b57      	ldr	r3, [pc, #348]	@ (800c5b8 <UART_SetConfig+0x69c>)
 800c45c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c45e:	f003 0307 	and.w	r3, r3, #7
 800c462:	2b05      	cmp	r3, #5
 800c464:	d826      	bhi.n	800c4b4 <UART_SetConfig+0x598>
 800c466:	a201      	add	r2, pc, #4	@ (adr r2, 800c46c <UART_SetConfig+0x550>)
 800c468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c46c:	0800c485 	.word	0x0800c485
 800c470:	0800c48d 	.word	0x0800c48d
 800c474:	0800c495 	.word	0x0800c495
 800c478:	0800c49d 	.word	0x0800c49d
 800c47c:	0800c4a5 	.word	0x0800c4a5
 800c480:	0800c4ad 	.word	0x0800c4ad
 800c484:	2302      	movs	r3, #2
 800c486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c48a:	e01a      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c48c:	2304      	movs	r3, #4
 800c48e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c492:	e016      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c494:	2308      	movs	r3, #8
 800c496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c49a:	e012      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c49c:	2310      	movs	r3, #16
 800c49e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4a2:	e00e      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c4a4:	2320      	movs	r3, #32
 800c4a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4aa:	e00a      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c4ac:	2340      	movs	r3, #64	@ 0x40
 800c4ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4b2:	e006      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c4b4:	2380      	movs	r3, #128	@ 0x80
 800c4b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4ba:	e002      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c4bc:	2380      	movs	r3, #128	@ 0x80
 800c4be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	4a3f      	ldr	r2, [pc, #252]	@ (800c5c4 <UART_SetConfig+0x6a8>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	f040 80f8 	bne.w	800c6be <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c4ce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c4d2:	2b20      	cmp	r3, #32
 800c4d4:	dc46      	bgt.n	800c564 <UART_SetConfig+0x648>
 800c4d6:	2b02      	cmp	r3, #2
 800c4d8:	f2c0 8082 	blt.w	800c5e0 <UART_SetConfig+0x6c4>
 800c4dc:	3b02      	subs	r3, #2
 800c4de:	2b1e      	cmp	r3, #30
 800c4e0:	d87e      	bhi.n	800c5e0 <UART_SetConfig+0x6c4>
 800c4e2:	a201      	add	r2, pc, #4	@ (adr r2, 800c4e8 <UART_SetConfig+0x5cc>)
 800c4e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4e8:	0800c56b 	.word	0x0800c56b
 800c4ec:	0800c5e1 	.word	0x0800c5e1
 800c4f0:	0800c573 	.word	0x0800c573
 800c4f4:	0800c5e1 	.word	0x0800c5e1
 800c4f8:	0800c5e1 	.word	0x0800c5e1
 800c4fc:	0800c5e1 	.word	0x0800c5e1
 800c500:	0800c583 	.word	0x0800c583
 800c504:	0800c5e1 	.word	0x0800c5e1
 800c508:	0800c5e1 	.word	0x0800c5e1
 800c50c:	0800c5e1 	.word	0x0800c5e1
 800c510:	0800c5e1 	.word	0x0800c5e1
 800c514:	0800c5e1 	.word	0x0800c5e1
 800c518:	0800c5e1 	.word	0x0800c5e1
 800c51c:	0800c5e1 	.word	0x0800c5e1
 800c520:	0800c593 	.word	0x0800c593
 800c524:	0800c5e1 	.word	0x0800c5e1
 800c528:	0800c5e1 	.word	0x0800c5e1
 800c52c:	0800c5e1 	.word	0x0800c5e1
 800c530:	0800c5e1 	.word	0x0800c5e1
 800c534:	0800c5e1 	.word	0x0800c5e1
 800c538:	0800c5e1 	.word	0x0800c5e1
 800c53c:	0800c5e1 	.word	0x0800c5e1
 800c540:	0800c5e1 	.word	0x0800c5e1
 800c544:	0800c5e1 	.word	0x0800c5e1
 800c548:	0800c5e1 	.word	0x0800c5e1
 800c54c:	0800c5e1 	.word	0x0800c5e1
 800c550:	0800c5e1 	.word	0x0800c5e1
 800c554:	0800c5e1 	.word	0x0800c5e1
 800c558:	0800c5e1 	.word	0x0800c5e1
 800c55c:	0800c5e1 	.word	0x0800c5e1
 800c560:	0800c5d3 	.word	0x0800c5d3
 800c564:	2b40      	cmp	r3, #64	@ 0x40
 800c566:	d037      	beq.n	800c5d8 <UART_SetConfig+0x6bc>
 800c568:	e03a      	b.n	800c5e0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c56a:	f7fd f973 	bl	8009854 <HAL_RCCEx_GetD3PCLK1Freq>
 800c56e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c570:	e03c      	b.n	800c5ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c572:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c576:	4618      	mov	r0, r3
 800c578:	f7fd f982 	bl	8009880 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c57c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c57e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c580:	e034      	b.n	800c5ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c582:	f107 0318 	add.w	r3, r7, #24
 800c586:	4618      	mov	r0, r3
 800c588:	f7fd face 	bl	8009b28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c58c:	69fb      	ldr	r3, [r7, #28]
 800c58e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c590:	e02c      	b.n	800c5ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c592:	4b09      	ldr	r3, [pc, #36]	@ (800c5b8 <UART_SetConfig+0x69c>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f003 0320 	and.w	r3, r3, #32
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d016      	beq.n	800c5cc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c59e:	4b06      	ldr	r3, [pc, #24]	@ (800c5b8 <UART_SetConfig+0x69c>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	08db      	lsrs	r3, r3, #3
 800c5a4:	f003 0303 	and.w	r3, r3, #3
 800c5a8:	4a07      	ldr	r2, [pc, #28]	@ (800c5c8 <UART_SetConfig+0x6ac>)
 800c5aa:	fa22 f303 	lsr.w	r3, r2, r3
 800c5ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c5b0:	e01c      	b.n	800c5ec <UART_SetConfig+0x6d0>
 800c5b2:	bf00      	nop
 800c5b4:	40011400 	.word	0x40011400
 800c5b8:	58024400 	.word	0x58024400
 800c5bc:	40007800 	.word	0x40007800
 800c5c0:	40007c00 	.word	0x40007c00
 800c5c4:	58000c00 	.word	0x58000c00
 800c5c8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c5cc:	4b9d      	ldr	r3, [pc, #628]	@ (800c844 <UART_SetConfig+0x928>)
 800c5ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5d0:	e00c      	b.n	800c5ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c5d2:	4b9d      	ldr	r3, [pc, #628]	@ (800c848 <UART_SetConfig+0x92c>)
 800c5d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5d6:	e009      	b.n	800c5ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c5d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c5dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5de:	e005      	b.n	800c5ec <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c5ea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c5ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	f000 81de 	beq.w	800c9b0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5f8:	4a94      	ldr	r2, [pc, #592]	@ (800c84c <UART_SetConfig+0x930>)
 800c5fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c5fe:	461a      	mov	r2, r3
 800c600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c602:	fbb3 f3f2 	udiv	r3, r3, r2
 800c606:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	685a      	ldr	r2, [r3, #4]
 800c60c:	4613      	mov	r3, r2
 800c60e:	005b      	lsls	r3, r3, #1
 800c610:	4413      	add	r3, r2
 800c612:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c614:	429a      	cmp	r2, r3
 800c616:	d305      	bcc.n	800c624 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	685b      	ldr	r3, [r3, #4]
 800c61c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c61e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c620:	429a      	cmp	r2, r3
 800c622:	d903      	bls.n	800c62c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c624:	2301      	movs	r3, #1
 800c626:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c62a:	e1c1      	b.n	800c9b0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c62c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c62e:	2200      	movs	r2, #0
 800c630:	60bb      	str	r3, [r7, #8]
 800c632:	60fa      	str	r2, [r7, #12]
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c638:	4a84      	ldr	r2, [pc, #528]	@ (800c84c <UART_SetConfig+0x930>)
 800c63a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c63e:	b29b      	uxth	r3, r3
 800c640:	2200      	movs	r2, #0
 800c642:	603b      	str	r3, [r7, #0]
 800c644:	607a      	str	r2, [r7, #4]
 800c646:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c64a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c64e:	f7f4 f85b 	bl	8000708 <__aeabi_uldivmod>
 800c652:	4602      	mov	r2, r0
 800c654:	460b      	mov	r3, r1
 800c656:	4610      	mov	r0, r2
 800c658:	4619      	mov	r1, r3
 800c65a:	f04f 0200 	mov.w	r2, #0
 800c65e:	f04f 0300 	mov.w	r3, #0
 800c662:	020b      	lsls	r3, r1, #8
 800c664:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c668:	0202      	lsls	r2, r0, #8
 800c66a:	6979      	ldr	r1, [r7, #20]
 800c66c:	6849      	ldr	r1, [r1, #4]
 800c66e:	0849      	lsrs	r1, r1, #1
 800c670:	2000      	movs	r0, #0
 800c672:	460c      	mov	r4, r1
 800c674:	4605      	mov	r5, r0
 800c676:	eb12 0804 	adds.w	r8, r2, r4
 800c67a:	eb43 0905 	adc.w	r9, r3, r5
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	685b      	ldr	r3, [r3, #4]
 800c682:	2200      	movs	r2, #0
 800c684:	469a      	mov	sl, r3
 800c686:	4693      	mov	fp, r2
 800c688:	4652      	mov	r2, sl
 800c68a:	465b      	mov	r3, fp
 800c68c:	4640      	mov	r0, r8
 800c68e:	4649      	mov	r1, r9
 800c690:	f7f4 f83a 	bl	8000708 <__aeabi_uldivmod>
 800c694:	4602      	mov	r2, r0
 800c696:	460b      	mov	r3, r1
 800c698:	4613      	mov	r3, r2
 800c69a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c69c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c69e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c6a2:	d308      	bcc.n	800c6b6 <UART_SetConfig+0x79a>
 800c6a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c6aa:	d204      	bcs.n	800c6b6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c6b2:	60da      	str	r2, [r3, #12]
 800c6b4:	e17c      	b.n	800c9b0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c6bc:	e178      	b.n	800c9b0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	69db      	ldr	r3, [r3, #28]
 800c6c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c6c6:	f040 80c5 	bne.w	800c854 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c6ca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c6ce:	2b20      	cmp	r3, #32
 800c6d0:	dc48      	bgt.n	800c764 <UART_SetConfig+0x848>
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	db7b      	blt.n	800c7ce <UART_SetConfig+0x8b2>
 800c6d6:	2b20      	cmp	r3, #32
 800c6d8:	d879      	bhi.n	800c7ce <UART_SetConfig+0x8b2>
 800c6da:	a201      	add	r2, pc, #4	@ (adr r2, 800c6e0 <UART_SetConfig+0x7c4>)
 800c6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6e0:	0800c76b 	.word	0x0800c76b
 800c6e4:	0800c773 	.word	0x0800c773
 800c6e8:	0800c7cf 	.word	0x0800c7cf
 800c6ec:	0800c7cf 	.word	0x0800c7cf
 800c6f0:	0800c77b 	.word	0x0800c77b
 800c6f4:	0800c7cf 	.word	0x0800c7cf
 800c6f8:	0800c7cf 	.word	0x0800c7cf
 800c6fc:	0800c7cf 	.word	0x0800c7cf
 800c700:	0800c78b 	.word	0x0800c78b
 800c704:	0800c7cf 	.word	0x0800c7cf
 800c708:	0800c7cf 	.word	0x0800c7cf
 800c70c:	0800c7cf 	.word	0x0800c7cf
 800c710:	0800c7cf 	.word	0x0800c7cf
 800c714:	0800c7cf 	.word	0x0800c7cf
 800c718:	0800c7cf 	.word	0x0800c7cf
 800c71c:	0800c7cf 	.word	0x0800c7cf
 800c720:	0800c79b 	.word	0x0800c79b
 800c724:	0800c7cf 	.word	0x0800c7cf
 800c728:	0800c7cf 	.word	0x0800c7cf
 800c72c:	0800c7cf 	.word	0x0800c7cf
 800c730:	0800c7cf 	.word	0x0800c7cf
 800c734:	0800c7cf 	.word	0x0800c7cf
 800c738:	0800c7cf 	.word	0x0800c7cf
 800c73c:	0800c7cf 	.word	0x0800c7cf
 800c740:	0800c7cf 	.word	0x0800c7cf
 800c744:	0800c7cf 	.word	0x0800c7cf
 800c748:	0800c7cf 	.word	0x0800c7cf
 800c74c:	0800c7cf 	.word	0x0800c7cf
 800c750:	0800c7cf 	.word	0x0800c7cf
 800c754:	0800c7cf 	.word	0x0800c7cf
 800c758:	0800c7cf 	.word	0x0800c7cf
 800c75c:	0800c7cf 	.word	0x0800c7cf
 800c760:	0800c7c1 	.word	0x0800c7c1
 800c764:	2b40      	cmp	r3, #64	@ 0x40
 800c766:	d02e      	beq.n	800c7c6 <UART_SetConfig+0x8aa>
 800c768:	e031      	b.n	800c7ce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c76a:	f7fb f8bd 	bl	80078e8 <HAL_RCC_GetPCLK1Freq>
 800c76e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c770:	e033      	b.n	800c7da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c772:	f7fb f8cf 	bl	8007914 <HAL_RCC_GetPCLK2Freq>
 800c776:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c778:	e02f      	b.n	800c7da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c77a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c77e:	4618      	mov	r0, r3
 800c780:	f7fd f87e 	bl	8009880 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c788:	e027      	b.n	800c7da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c78a:	f107 0318 	add.w	r3, r7, #24
 800c78e:	4618      	mov	r0, r3
 800c790:	f7fd f9ca 	bl	8009b28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c794:	69fb      	ldr	r3, [r7, #28]
 800c796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c798:	e01f      	b.n	800c7da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c79a:	4b2d      	ldr	r3, [pc, #180]	@ (800c850 <UART_SetConfig+0x934>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	f003 0320 	and.w	r3, r3, #32
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d009      	beq.n	800c7ba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c7a6:	4b2a      	ldr	r3, [pc, #168]	@ (800c850 <UART_SetConfig+0x934>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	08db      	lsrs	r3, r3, #3
 800c7ac:	f003 0303 	and.w	r3, r3, #3
 800c7b0:	4a24      	ldr	r2, [pc, #144]	@ (800c844 <UART_SetConfig+0x928>)
 800c7b2:	fa22 f303 	lsr.w	r3, r2, r3
 800c7b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c7b8:	e00f      	b.n	800c7da <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c7ba:	4b22      	ldr	r3, [pc, #136]	@ (800c844 <UART_SetConfig+0x928>)
 800c7bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7be:	e00c      	b.n	800c7da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c7c0:	4b21      	ldr	r3, [pc, #132]	@ (800c848 <UART_SetConfig+0x92c>)
 800c7c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7c4:	e009      	b.n	800c7da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c7c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c7ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7cc:	e005      	b.n	800c7da <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c7d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c7da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	f000 80e7 	beq.w	800c9b0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7e6:	4a19      	ldr	r2, [pc, #100]	@ (800c84c <UART_SetConfig+0x930>)
 800c7e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c7f4:	005a      	lsls	r2, r3, #1
 800c7f6:	697b      	ldr	r3, [r7, #20]
 800c7f8:	685b      	ldr	r3, [r3, #4]
 800c7fa:	085b      	lsrs	r3, r3, #1
 800c7fc:	441a      	add	r2, r3
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	fbb2 f3f3 	udiv	r3, r2, r3
 800c806:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c80a:	2b0f      	cmp	r3, #15
 800c80c:	d916      	bls.n	800c83c <UART_SetConfig+0x920>
 800c80e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c810:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c814:	d212      	bcs.n	800c83c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c818:	b29b      	uxth	r3, r3
 800c81a:	f023 030f 	bic.w	r3, r3, #15
 800c81e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c822:	085b      	lsrs	r3, r3, #1
 800c824:	b29b      	uxth	r3, r3
 800c826:	f003 0307 	and.w	r3, r3, #7
 800c82a:	b29a      	uxth	r2, r3
 800c82c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c82e:	4313      	orrs	r3, r2
 800c830:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c832:	697b      	ldr	r3, [r7, #20]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c838:	60da      	str	r2, [r3, #12]
 800c83a:	e0b9      	b.n	800c9b0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c83c:	2301      	movs	r3, #1
 800c83e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c842:	e0b5      	b.n	800c9b0 <UART_SetConfig+0xa94>
 800c844:	03d09000 	.word	0x03d09000
 800c848:	003d0900 	.word	0x003d0900
 800c84c:	08012930 	.word	0x08012930
 800c850:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c854:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c858:	2b20      	cmp	r3, #32
 800c85a:	dc49      	bgt.n	800c8f0 <UART_SetConfig+0x9d4>
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	db7c      	blt.n	800c95a <UART_SetConfig+0xa3e>
 800c860:	2b20      	cmp	r3, #32
 800c862:	d87a      	bhi.n	800c95a <UART_SetConfig+0xa3e>
 800c864:	a201      	add	r2, pc, #4	@ (adr r2, 800c86c <UART_SetConfig+0x950>)
 800c866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c86a:	bf00      	nop
 800c86c:	0800c8f7 	.word	0x0800c8f7
 800c870:	0800c8ff 	.word	0x0800c8ff
 800c874:	0800c95b 	.word	0x0800c95b
 800c878:	0800c95b 	.word	0x0800c95b
 800c87c:	0800c907 	.word	0x0800c907
 800c880:	0800c95b 	.word	0x0800c95b
 800c884:	0800c95b 	.word	0x0800c95b
 800c888:	0800c95b 	.word	0x0800c95b
 800c88c:	0800c917 	.word	0x0800c917
 800c890:	0800c95b 	.word	0x0800c95b
 800c894:	0800c95b 	.word	0x0800c95b
 800c898:	0800c95b 	.word	0x0800c95b
 800c89c:	0800c95b 	.word	0x0800c95b
 800c8a0:	0800c95b 	.word	0x0800c95b
 800c8a4:	0800c95b 	.word	0x0800c95b
 800c8a8:	0800c95b 	.word	0x0800c95b
 800c8ac:	0800c927 	.word	0x0800c927
 800c8b0:	0800c95b 	.word	0x0800c95b
 800c8b4:	0800c95b 	.word	0x0800c95b
 800c8b8:	0800c95b 	.word	0x0800c95b
 800c8bc:	0800c95b 	.word	0x0800c95b
 800c8c0:	0800c95b 	.word	0x0800c95b
 800c8c4:	0800c95b 	.word	0x0800c95b
 800c8c8:	0800c95b 	.word	0x0800c95b
 800c8cc:	0800c95b 	.word	0x0800c95b
 800c8d0:	0800c95b 	.word	0x0800c95b
 800c8d4:	0800c95b 	.word	0x0800c95b
 800c8d8:	0800c95b 	.word	0x0800c95b
 800c8dc:	0800c95b 	.word	0x0800c95b
 800c8e0:	0800c95b 	.word	0x0800c95b
 800c8e4:	0800c95b 	.word	0x0800c95b
 800c8e8:	0800c95b 	.word	0x0800c95b
 800c8ec:	0800c94d 	.word	0x0800c94d
 800c8f0:	2b40      	cmp	r3, #64	@ 0x40
 800c8f2:	d02e      	beq.n	800c952 <UART_SetConfig+0xa36>
 800c8f4:	e031      	b.n	800c95a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c8f6:	f7fa fff7 	bl	80078e8 <HAL_RCC_GetPCLK1Freq>
 800c8fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c8fc:	e033      	b.n	800c966 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c8fe:	f7fb f809 	bl	8007914 <HAL_RCC_GetPCLK2Freq>
 800c902:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c904:	e02f      	b.n	800c966 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c906:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c90a:	4618      	mov	r0, r3
 800c90c:	f7fc ffb8 	bl	8009880 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c914:	e027      	b.n	800c966 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c916:	f107 0318 	add.w	r3, r7, #24
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7fd f904 	bl	8009b28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c920:	69fb      	ldr	r3, [r7, #28]
 800c922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c924:	e01f      	b.n	800c966 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c926:	4b2d      	ldr	r3, [pc, #180]	@ (800c9dc <UART_SetConfig+0xac0>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	f003 0320 	and.w	r3, r3, #32
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d009      	beq.n	800c946 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c932:	4b2a      	ldr	r3, [pc, #168]	@ (800c9dc <UART_SetConfig+0xac0>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	08db      	lsrs	r3, r3, #3
 800c938:	f003 0303 	and.w	r3, r3, #3
 800c93c:	4a28      	ldr	r2, [pc, #160]	@ (800c9e0 <UART_SetConfig+0xac4>)
 800c93e:	fa22 f303 	lsr.w	r3, r2, r3
 800c942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c944:	e00f      	b.n	800c966 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c946:	4b26      	ldr	r3, [pc, #152]	@ (800c9e0 <UART_SetConfig+0xac4>)
 800c948:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c94a:	e00c      	b.n	800c966 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c94c:	4b25      	ldr	r3, [pc, #148]	@ (800c9e4 <UART_SetConfig+0xac8>)
 800c94e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c950:	e009      	b.n	800c966 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c952:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c958:	e005      	b.n	800c966 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c95a:	2300      	movs	r3, #0
 800c95c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c95e:	2301      	movs	r3, #1
 800c960:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c964:	bf00      	nop
    }

    if (pclk != 0U)
 800c966:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d021      	beq.n	800c9b0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c96c:	697b      	ldr	r3, [r7, #20]
 800c96e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c970:	4a1d      	ldr	r2, [pc, #116]	@ (800c9e8 <UART_SetConfig+0xacc>)
 800c972:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c976:	461a      	mov	r2, r3
 800c978:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c97a:	fbb3 f2f2 	udiv	r2, r3, r2
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	085b      	lsrs	r3, r3, #1
 800c984:	441a      	add	r2, r3
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	685b      	ldr	r3, [r3, #4]
 800c98a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c98e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c992:	2b0f      	cmp	r3, #15
 800c994:	d909      	bls.n	800c9aa <UART_SetConfig+0xa8e>
 800c996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c998:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c99c:	d205      	bcs.n	800c9aa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c99e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9a0:	b29a      	uxth	r2, r3
 800c9a2:	697b      	ldr	r3, [r7, #20]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	60da      	str	r2, [r3, #12]
 800c9a8:	e002      	b.n	800c9b0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c9b0:	697b      	ldr	r3, [r7, #20]
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c9b8:	697b      	ldr	r3, [r7, #20]
 800c9ba:	2201      	movs	r2, #1
 800c9bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c9cc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3748      	adds	r7, #72	@ 0x48
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c9da:	bf00      	nop
 800c9dc:	58024400 	.word	0x58024400
 800c9e0:	03d09000 	.word	0x03d09000
 800c9e4:	003d0900 	.word	0x003d0900
 800c9e8:	08012930 	.word	0x08012930

0800c9ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b083      	sub	sp, #12
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9f8:	f003 0308 	and.w	r3, r3, #8
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d00a      	beq.n	800ca16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	685b      	ldr	r3, [r3, #4]
 800ca06:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	430a      	orrs	r2, r1
 800ca14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca1a:	f003 0301 	and.w	r3, r3, #1
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d00a      	beq.n	800ca38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	685b      	ldr	r3, [r3, #4]
 800ca28:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	430a      	orrs	r2, r1
 800ca36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca3c:	f003 0302 	and.w	r3, r3, #2
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d00a      	beq.n	800ca5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	430a      	orrs	r2, r1
 800ca58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca5e:	f003 0304 	and.w	r3, r3, #4
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d00a      	beq.n	800ca7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	430a      	orrs	r2, r1
 800ca7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca80:	f003 0310 	and.w	r3, r3, #16
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d00a      	beq.n	800ca9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	689b      	ldr	r3, [r3, #8]
 800ca8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	430a      	orrs	r2, r1
 800ca9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800caa2:	f003 0320 	and.w	r3, r3, #32
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d00a      	beq.n	800cac0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	689b      	ldr	r3, [r3, #8]
 800cab0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	430a      	orrs	r2, r1
 800cabe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d01a      	beq.n	800cb02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	685b      	ldr	r3, [r3, #4]
 800cad2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	430a      	orrs	r2, r1
 800cae0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cae6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800caea:	d10a      	bne.n	800cb02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	685b      	ldr	r3, [r3, #4]
 800caf2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	430a      	orrs	r2, r1
 800cb00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d00a      	beq.n	800cb24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	685b      	ldr	r3, [r3, #4]
 800cb14:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	430a      	orrs	r2, r1
 800cb22:	605a      	str	r2, [r3, #4]
  }
}
 800cb24:	bf00      	nop
 800cb26:	370c      	adds	r7, #12
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2e:	4770      	bx	lr

0800cb30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b098      	sub	sp, #96	@ 0x60
 800cb34:	af02      	add	r7, sp, #8
 800cb36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cb40:	f7f5 f9a8 	bl	8001e94 <HAL_GetTick>
 800cb44:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	f003 0308 	and.w	r3, r3, #8
 800cb50:	2b08      	cmp	r3, #8
 800cb52:	d12f      	bne.n	800cbb4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cb58:	9300      	str	r3, [sp, #0]
 800cb5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f000 f88e 	bl	800cc84 <UART_WaitOnFlagUntilTimeout>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d022      	beq.n	800cbb4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb76:	e853 3f00 	ldrex	r3, [r3]
 800cb7a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cb7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cb82:	653b      	str	r3, [r7, #80]	@ 0x50
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	461a      	mov	r2, r3
 800cb8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb8c:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb8e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cb92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb94:	e841 2300 	strex	r3, r2, [r1]
 800cb98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cb9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d1e6      	bne.n	800cb6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2220      	movs	r2, #32
 800cba4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cbb0:	2303      	movs	r3, #3
 800cbb2:	e063      	b.n	800cc7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f003 0304 	and.w	r3, r3, #4
 800cbbe:	2b04      	cmp	r3, #4
 800cbc0:	d149      	bne.n	800cc56 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cbc2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cbc6:	9300      	str	r3, [sp, #0]
 800cbc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbca:	2200      	movs	r2, #0
 800cbcc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f000 f857 	bl	800cc84 <UART_WaitOnFlagUntilTimeout>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d03c      	beq.n	800cc56 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbe4:	e853 3f00 	ldrex	r3, [r3]
 800cbe8:	623b      	str	r3, [r7, #32]
   return(result);
 800cbea:	6a3b      	ldr	r3, [r7, #32]
 800cbec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cbf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbfa:	633b      	str	r3, [r7, #48]	@ 0x30
 800cbfc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cc00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc02:	e841 2300 	strex	r3, r2, [r1]
 800cc06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cc08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d1e6      	bne.n	800cbdc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	3308      	adds	r3, #8
 800cc14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	e853 3f00 	ldrex	r3, [r3]
 800cc1c:	60fb      	str	r3, [r7, #12]
   return(result);
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	f023 0301 	bic.w	r3, r3, #1
 800cc24:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	3308      	adds	r3, #8
 800cc2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cc2e:	61fa      	str	r2, [r7, #28]
 800cc30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc32:	69b9      	ldr	r1, [r7, #24]
 800cc34:	69fa      	ldr	r2, [r7, #28]
 800cc36:	e841 2300 	strex	r3, r2, [r1]
 800cc3a:	617b      	str	r3, [r7, #20]
   return(result);
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d1e5      	bne.n	800cc0e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2220      	movs	r2, #32
 800cc46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cc52:	2303      	movs	r3, #3
 800cc54:	e012      	b.n	800cc7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2220      	movs	r2, #32
 800cc5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2220      	movs	r2, #32
 800cc62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2200      	movs	r2, #0
 800cc76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cc7a:	2300      	movs	r3, #0
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3758      	adds	r7, #88	@ 0x58
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}

0800cc84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b084      	sub	sp, #16
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	60f8      	str	r0, [r7, #12]
 800cc8c:	60b9      	str	r1, [r7, #8]
 800cc8e:	603b      	str	r3, [r7, #0]
 800cc90:	4613      	mov	r3, r2
 800cc92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc94:	e04f      	b.n	800cd36 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cc96:	69bb      	ldr	r3, [r7, #24]
 800cc98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc9c:	d04b      	beq.n	800cd36 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cc9e:	f7f5 f8f9 	bl	8001e94 <HAL_GetTick>
 800cca2:	4602      	mov	r2, r0
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	1ad3      	subs	r3, r2, r3
 800cca8:	69ba      	ldr	r2, [r7, #24]
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	d302      	bcc.n	800ccb4 <UART_WaitOnFlagUntilTimeout+0x30>
 800ccae:	69bb      	ldr	r3, [r7, #24]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d101      	bne.n	800ccb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ccb4:	2303      	movs	r3, #3
 800ccb6:	e04e      	b.n	800cd56 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f003 0304 	and.w	r3, r3, #4
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d037      	beq.n	800cd36 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	2b80      	cmp	r3, #128	@ 0x80
 800ccca:	d034      	beq.n	800cd36 <UART_WaitOnFlagUntilTimeout+0xb2>
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	2b40      	cmp	r3, #64	@ 0x40
 800ccd0:	d031      	beq.n	800cd36 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	69db      	ldr	r3, [r3, #28]
 800ccd8:	f003 0308 	and.w	r3, r3, #8
 800ccdc:	2b08      	cmp	r3, #8
 800ccde:	d110      	bne.n	800cd02 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	2208      	movs	r2, #8
 800cce6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cce8:	68f8      	ldr	r0, [r7, #12]
 800ccea:	f000 f95b 	bl	800cfa4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	2208      	movs	r2, #8
 800ccf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ccfe:	2301      	movs	r3, #1
 800cd00:	e029      	b.n	800cd56 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	69db      	ldr	r3, [r3, #28]
 800cd08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cd0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cd10:	d111      	bne.n	800cd36 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cd1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cd1c:	68f8      	ldr	r0, [r7, #12]
 800cd1e:	f000 f941 	bl	800cfa4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	2220      	movs	r2, #32
 800cd26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800cd32:	2303      	movs	r3, #3
 800cd34:	e00f      	b.n	800cd56 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	69da      	ldr	r2, [r3, #28]
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	4013      	ands	r3, r2
 800cd40:	68ba      	ldr	r2, [r7, #8]
 800cd42:	429a      	cmp	r2, r3
 800cd44:	bf0c      	ite	eq
 800cd46:	2301      	moveq	r3, #1
 800cd48:	2300      	movne	r3, #0
 800cd4a:	b2db      	uxtb	r3, r3
 800cd4c:	461a      	mov	r2, r3
 800cd4e:	79fb      	ldrb	r3, [r7, #7]
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d0a0      	beq.n	800cc96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cd54:	2300      	movs	r3, #0
}
 800cd56:	4618      	mov	r0, r3
 800cd58:	3710      	adds	r7, #16
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}
	...

0800cd60 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cd60:	b480      	push	{r7}
 800cd62:	b0a3      	sub	sp, #140	@ 0x8c
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	60f8      	str	r0, [r7, #12]
 800cd68:	60b9      	str	r1, [r7, #8]
 800cd6a:	4613      	mov	r3, r2
 800cd6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	68ba      	ldr	r2, [r7, #8]
 800cd72:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	88fa      	ldrh	r2, [r7, #6]
 800cd78:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	88fa      	ldrh	r2, [r7, #6]
 800cd80:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	2200      	movs	r2, #0
 800cd88:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	689b      	ldr	r3, [r3, #8]
 800cd8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd92:	d10e      	bne.n	800cdb2 <UART_Start_Receive_IT+0x52>
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	691b      	ldr	r3, [r3, #16]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d105      	bne.n	800cda8 <UART_Start_Receive_IT+0x48>
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800cda2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cda6:	e02d      	b.n	800ce04 <UART_Start_Receive_IT+0xa4>
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	22ff      	movs	r2, #255	@ 0xff
 800cdac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cdb0:	e028      	b.n	800ce04 <UART_Start_Receive_IT+0xa4>
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	689b      	ldr	r3, [r3, #8]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d10d      	bne.n	800cdd6 <UART_Start_Receive_IT+0x76>
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	691b      	ldr	r3, [r3, #16]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d104      	bne.n	800cdcc <UART_Start_Receive_IT+0x6c>
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	22ff      	movs	r2, #255	@ 0xff
 800cdc6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cdca:	e01b      	b.n	800ce04 <UART_Start_Receive_IT+0xa4>
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	227f      	movs	r2, #127	@ 0x7f
 800cdd0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cdd4:	e016      	b.n	800ce04 <UART_Start_Receive_IT+0xa4>
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	689b      	ldr	r3, [r3, #8]
 800cdda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cdde:	d10d      	bne.n	800cdfc <UART_Start_Receive_IT+0x9c>
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	691b      	ldr	r3, [r3, #16]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d104      	bne.n	800cdf2 <UART_Start_Receive_IT+0x92>
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	227f      	movs	r2, #127	@ 0x7f
 800cdec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cdf0:	e008      	b.n	800ce04 <UART_Start_Receive_IT+0xa4>
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	223f      	movs	r2, #63	@ 0x3f
 800cdf6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cdfa:	e003      	b.n	800ce04 <UART_Start_Receive_IT+0xa4>
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	2200      	movs	r2, #0
 800ce08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	2222      	movs	r2, #34	@ 0x22
 800ce10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	3308      	adds	r3, #8
 800ce1a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ce1e:	e853 3f00 	ldrex	r3, [r3]
 800ce22:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ce24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ce26:	f043 0301 	orr.w	r3, r3, #1
 800ce2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	3308      	adds	r3, #8
 800ce34:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ce38:	673a      	str	r2, [r7, #112]	@ 0x70
 800ce3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce3c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ce3e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ce40:	e841 2300 	strex	r3, r2, [r1]
 800ce44:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800ce46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d1e3      	bne.n	800ce14 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ce54:	d14f      	bne.n	800cef6 <UART_Start_Receive_IT+0x196>
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ce5c:	88fa      	ldrh	r2, [r7, #6]
 800ce5e:	429a      	cmp	r2, r3
 800ce60:	d349      	bcc.n	800cef6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	689b      	ldr	r3, [r3, #8]
 800ce66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ce6a:	d107      	bne.n	800ce7c <UART_Start_Receive_IT+0x11c>
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	691b      	ldr	r3, [r3, #16]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d103      	bne.n	800ce7c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	4a47      	ldr	r2, [pc, #284]	@ (800cf94 <UART_Start_Receive_IT+0x234>)
 800ce78:	675a      	str	r2, [r3, #116]	@ 0x74
 800ce7a:	e002      	b.n	800ce82 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	4a46      	ldr	r2, [pc, #280]	@ (800cf98 <UART_Start_Receive_IT+0x238>)
 800ce80:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	691b      	ldr	r3, [r3, #16]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d01a      	beq.n	800cec0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce92:	e853 3f00 	ldrex	r3, [r3]
 800ce96:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ce98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ce9e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	461a      	mov	r2, r3
 800cea8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ceac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ceae:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceb0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ceb2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ceb4:	e841 2300 	strex	r3, r2, [r1]
 800ceb8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800ceba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d1e4      	bne.n	800ce8a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	3308      	adds	r3, #8
 800cec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cec8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ceca:	e853 3f00 	ldrex	r3, [r3]
 800cece:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ced0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ced2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ced6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	3308      	adds	r3, #8
 800cede:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800cee0:	64ba      	str	r2, [r7, #72]	@ 0x48
 800cee2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cee4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cee6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cee8:	e841 2300 	strex	r3, r2, [r1]
 800ceec:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ceee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d1e5      	bne.n	800cec0 <UART_Start_Receive_IT+0x160>
 800cef4:	e046      	b.n	800cf84 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	689b      	ldr	r3, [r3, #8]
 800cefa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cefe:	d107      	bne.n	800cf10 <UART_Start_Receive_IT+0x1b0>
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	691b      	ldr	r3, [r3, #16]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d103      	bne.n	800cf10 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	4a24      	ldr	r2, [pc, #144]	@ (800cf9c <UART_Start_Receive_IT+0x23c>)
 800cf0c:	675a      	str	r2, [r3, #116]	@ 0x74
 800cf0e:	e002      	b.n	800cf16 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	4a23      	ldr	r2, [pc, #140]	@ (800cfa0 <UART_Start_Receive_IT+0x240>)
 800cf14:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	691b      	ldr	r3, [r3, #16]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d019      	beq.n	800cf52 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf26:	e853 3f00 	ldrex	r3, [r3]
 800cf2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cf2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf2e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800cf32:	677b      	str	r3, [r7, #116]	@ 0x74
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	461a      	mov	r2, r3
 800cf3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cf3c:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf3e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf40:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cf42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cf44:	e841 2300 	strex	r3, r2, [r1]
 800cf48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800cf4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d1e6      	bne.n	800cf1e <UART_Start_Receive_IT+0x1be>
 800cf50:	e018      	b.n	800cf84 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf58:	697b      	ldr	r3, [r7, #20]
 800cf5a:	e853 3f00 	ldrex	r3, [r3]
 800cf5e:	613b      	str	r3, [r7, #16]
   return(result);
 800cf60:	693b      	ldr	r3, [r7, #16]
 800cf62:	f043 0320 	orr.w	r3, r3, #32
 800cf66:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	461a      	mov	r2, r3
 800cf6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cf70:	623b      	str	r3, [r7, #32]
 800cf72:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf74:	69f9      	ldr	r1, [r7, #28]
 800cf76:	6a3a      	ldr	r2, [r7, #32]
 800cf78:	e841 2300 	strex	r3, r2, [r1]
 800cf7c:	61bb      	str	r3, [r7, #24]
   return(result);
 800cf7e:	69bb      	ldr	r3, [r7, #24]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d1e6      	bne.n	800cf52 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800cf84:	2300      	movs	r3, #0
}
 800cf86:	4618      	mov	r0, r3
 800cf88:	378c      	adds	r7, #140	@ 0x8c
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf90:	4770      	bx	lr
 800cf92:	bf00      	nop
 800cf94:	0800d7c5 	.word	0x0800d7c5
 800cf98:	0800d465 	.word	0x0800d465
 800cf9c:	0800d2ad 	.word	0x0800d2ad
 800cfa0:	0800d0f5 	.word	0x0800d0f5

0800cfa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b095      	sub	sp, #84	@ 0x54
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfb4:	e853 3f00 	ldrex	r3, [r3]
 800cfb8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cfba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cfc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	461a      	mov	r2, r3
 800cfc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cfca:	643b      	str	r3, [r7, #64]	@ 0x40
 800cfcc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cfd0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cfd2:	e841 2300 	strex	r3, r2, [r1]
 800cfd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cfd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d1e6      	bne.n	800cfac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	3308      	adds	r3, #8
 800cfe4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfe6:	6a3b      	ldr	r3, [r7, #32]
 800cfe8:	e853 3f00 	ldrex	r3, [r3]
 800cfec:	61fb      	str	r3, [r7, #28]
   return(result);
 800cfee:	69fa      	ldr	r2, [r7, #28]
 800cff0:	4b1e      	ldr	r3, [pc, #120]	@ (800d06c <UART_EndRxTransfer+0xc8>)
 800cff2:	4013      	ands	r3, r2
 800cff4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	3308      	adds	r3, #8
 800cffc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cffe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d000:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d002:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d004:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d006:	e841 2300 	strex	r3, r2, [r1]
 800d00a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d00c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d1e5      	bne.n	800cfde <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d016:	2b01      	cmp	r3, #1
 800d018:	d118      	bne.n	800d04c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	e853 3f00 	ldrex	r3, [r3]
 800d026:	60bb      	str	r3, [r7, #8]
   return(result);
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	f023 0310 	bic.w	r3, r3, #16
 800d02e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	461a      	mov	r2, r3
 800d036:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d038:	61bb      	str	r3, [r7, #24]
 800d03a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d03c:	6979      	ldr	r1, [r7, #20]
 800d03e:	69ba      	ldr	r2, [r7, #24]
 800d040:	e841 2300 	strex	r3, r2, [r1]
 800d044:	613b      	str	r3, [r7, #16]
   return(result);
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d1e6      	bne.n	800d01a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2220      	movs	r2, #32
 800d050:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2200      	movs	r2, #0
 800d058:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2200      	movs	r2, #0
 800d05e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d060:	bf00      	nop
 800d062:	3754      	adds	r7, #84	@ 0x54
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr
 800d06c:	effffffe 	.word	0xeffffffe

0800d070 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b084      	sub	sp, #16
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d07c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	2200      	movs	r2, #0
 800d082:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	2200      	movs	r2, #0
 800d08a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d08e:	68f8      	ldr	r0, [r7, #12]
 800d090:	f7fe ff2e 	bl	800bef0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d094:	bf00      	nop
 800d096:	3710      	adds	r7, #16
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}

0800d09c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b088      	sub	sp, #32
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	e853 3f00 	ldrex	r3, [r3]
 800d0b0:	60bb      	str	r3, [r7, #8]
   return(result);
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d0b8:	61fb      	str	r3, [r7, #28]
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	461a      	mov	r2, r3
 800d0c0:	69fb      	ldr	r3, [r7, #28]
 800d0c2:	61bb      	str	r3, [r7, #24]
 800d0c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0c6:	6979      	ldr	r1, [r7, #20]
 800d0c8:	69ba      	ldr	r2, [r7, #24]
 800d0ca:	e841 2300 	strex	r3, r2, [r1]
 800d0ce:	613b      	str	r3, [r7, #16]
   return(result);
 800d0d0:	693b      	ldr	r3, [r7, #16]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d1e6      	bne.n	800d0a4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2220      	movs	r2, #32
 800d0da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f7fe fef9 	bl	800bedc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d0ea:	bf00      	nop
 800d0ec:	3720      	adds	r7, #32
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}
	...

0800d0f4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b09c      	sub	sp, #112	@ 0x70
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d102:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d10c:	2b22      	cmp	r3, #34	@ 0x22
 800d10e:	f040 80be 	bne.w	800d28e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d118:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d11c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d120:	b2d9      	uxtb	r1, r3
 800d122:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d126:	b2da      	uxtb	r2, r3
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d12c:	400a      	ands	r2, r1
 800d12e:	b2d2      	uxtb	r2, r2
 800d130:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d136:	1c5a      	adds	r2, r3, #1
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d142:	b29b      	uxth	r3, r3
 800d144:	3b01      	subs	r3, #1
 800d146:	b29a      	uxth	r2, r3
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d154:	b29b      	uxth	r3, r3
 800d156:	2b00      	cmp	r3, #0
 800d158:	f040 80a1 	bne.w	800d29e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d162:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d164:	e853 3f00 	ldrex	r3, [r3]
 800d168:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d16a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d16c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d170:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	461a      	mov	r2, r3
 800d178:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d17a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d17c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d17e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d180:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d182:	e841 2300 	strex	r3, r2, [r1]
 800d186:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d188:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d1e6      	bne.n	800d15c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	3308      	adds	r3, #8
 800d194:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d198:	e853 3f00 	ldrex	r3, [r3]
 800d19c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d19e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1a0:	f023 0301 	bic.w	r3, r3, #1
 800d1a4:	667b      	str	r3, [r7, #100]	@ 0x64
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	3308      	adds	r3, #8
 800d1ac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d1ae:	647a      	str	r2, [r7, #68]	@ 0x44
 800d1b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d1b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d1b6:	e841 2300 	strex	r3, r2, [r1]
 800d1ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d1bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d1e5      	bne.n	800d18e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2220      	movs	r2, #32
 800d1c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	4a33      	ldr	r2, [pc, #204]	@ (800d2a8 <UART_RxISR_8BIT+0x1b4>)
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	d01f      	beq.n	800d220 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	685b      	ldr	r3, [r3, #4]
 800d1e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d018      	beq.n	800d220 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1f6:	e853 3f00 	ldrex	r3, [r3]
 800d1fa:	623b      	str	r3, [r7, #32]
   return(result);
 800d1fc:	6a3b      	ldr	r3, [r7, #32]
 800d1fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d202:	663b      	str	r3, [r7, #96]	@ 0x60
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	461a      	mov	r2, r3
 800d20a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d20c:	633b      	str	r3, [r7, #48]	@ 0x30
 800d20e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d210:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d212:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d214:	e841 2300 	strex	r3, r2, [r1]
 800d218:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d21a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d1e6      	bne.n	800d1ee <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d224:	2b01      	cmp	r3, #1
 800d226:	d12e      	bne.n	800d286 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2200      	movs	r2, #0
 800d22c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	e853 3f00 	ldrex	r3, [r3]
 800d23a:	60fb      	str	r3, [r7, #12]
   return(result);
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	f023 0310 	bic.w	r3, r3, #16
 800d242:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	461a      	mov	r2, r3
 800d24a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d24c:	61fb      	str	r3, [r7, #28]
 800d24e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d250:	69b9      	ldr	r1, [r7, #24]
 800d252:	69fa      	ldr	r2, [r7, #28]
 800d254:	e841 2300 	strex	r3, r2, [r1]
 800d258:	617b      	str	r3, [r7, #20]
   return(result);
 800d25a:	697b      	ldr	r3, [r7, #20]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d1e6      	bne.n	800d22e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	69db      	ldr	r3, [r3, #28]
 800d266:	f003 0310 	and.w	r3, r3, #16
 800d26a:	2b10      	cmp	r3, #16
 800d26c:	d103      	bne.n	800d276 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	2210      	movs	r2, #16
 800d274:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d27c:	4619      	mov	r1, r3
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f7fe fe40 	bl	800bf04 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d284:	e00b      	b.n	800d29e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f7f4 f880 	bl	800138c <HAL_UART_RxCpltCallback>
}
 800d28c:	e007      	b.n	800d29e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	699a      	ldr	r2, [r3, #24]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	f042 0208 	orr.w	r2, r2, #8
 800d29c:	619a      	str	r2, [r3, #24]
}
 800d29e:	bf00      	nop
 800d2a0:	3770      	adds	r7, #112	@ 0x70
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}
 800d2a6:	bf00      	nop
 800d2a8:	58000c00 	.word	0x58000c00

0800d2ac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b09c      	sub	sp, #112	@ 0x70
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d2ba:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d2c4:	2b22      	cmp	r3, #34	@ 0x22
 800d2c6:	f040 80be 	bne.w	800d446 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2d0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2d8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800d2da:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800d2de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d2e2:	4013      	ands	r3, r2
 800d2e4:	b29a      	uxth	r2, r3
 800d2e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d2e8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2ee:	1c9a      	adds	r2, r3, #2
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d2fa:	b29b      	uxth	r3, r3
 800d2fc:	3b01      	subs	r3, #1
 800d2fe:	b29a      	uxth	r2, r3
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d30c:	b29b      	uxth	r3, r3
 800d30e:	2b00      	cmp	r3, #0
 800d310:	f040 80a1 	bne.w	800d456 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d31a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d31c:	e853 3f00 	ldrex	r3, [r3]
 800d320:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d322:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d324:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d328:	667b      	str	r3, [r7, #100]	@ 0x64
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	461a      	mov	r2, r3
 800d330:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d332:	657b      	str	r3, [r7, #84]	@ 0x54
 800d334:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d336:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d338:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d33a:	e841 2300 	strex	r3, r2, [r1]
 800d33e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d340:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d342:	2b00      	cmp	r3, #0
 800d344:	d1e6      	bne.n	800d314 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	3308      	adds	r3, #8
 800d34c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d34e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d350:	e853 3f00 	ldrex	r3, [r3]
 800d354:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d358:	f023 0301 	bic.w	r3, r3, #1
 800d35c:	663b      	str	r3, [r7, #96]	@ 0x60
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	3308      	adds	r3, #8
 800d364:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d366:	643a      	str	r2, [r7, #64]	@ 0x40
 800d368:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d36a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d36c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d36e:	e841 2300 	strex	r3, r2, [r1]
 800d372:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d376:	2b00      	cmp	r3, #0
 800d378:	d1e5      	bne.n	800d346 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2220      	movs	r2, #32
 800d37e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2200      	movs	r2, #0
 800d386:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2200      	movs	r2, #0
 800d38c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	4a33      	ldr	r2, [pc, #204]	@ (800d460 <UART_RxISR_16BIT+0x1b4>)
 800d394:	4293      	cmp	r3, r2
 800d396:	d01f      	beq.n	800d3d8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	685b      	ldr	r3, [r3, #4]
 800d39e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d018      	beq.n	800d3d8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3ac:	6a3b      	ldr	r3, [r7, #32]
 800d3ae:	e853 3f00 	ldrex	r3, [r3]
 800d3b2:	61fb      	str	r3, [r7, #28]
   return(result);
 800d3b4:	69fb      	ldr	r3, [r7, #28]
 800d3b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d3ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	461a      	mov	r2, r3
 800d3c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d3c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d3c6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d3ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d3cc:	e841 2300 	strex	r3, r2, [r1]
 800d3d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d3d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d1e6      	bne.n	800d3a6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3dc:	2b01      	cmp	r3, #1
 800d3de:	d12e      	bne.n	800d43e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	e853 3f00 	ldrex	r3, [r3]
 800d3f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	f023 0310 	bic.w	r3, r3, #16
 800d3fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	461a      	mov	r2, r3
 800d402:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d404:	61bb      	str	r3, [r7, #24]
 800d406:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d408:	6979      	ldr	r1, [r7, #20]
 800d40a:	69ba      	ldr	r2, [r7, #24]
 800d40c:	e841 2300 	strex	r3, r2, [r1]
 800d410:	613b      	str	r3, [r7, #16]
   return(result);
 800d412:	693b      	ldr	r3, [r7, #16]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d1e6      	bne.n	800d3e6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	69db      	ldr	r3, [r3, #28]
 800d41e:	f003 0310 	and.w	r3, r3, #16
 800d422:	2b10      	cmp	r3, #16
 800d424:	d103      	bne.n	800d42e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	2210      	movs	r2, #16
 800d42c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d434:	4619      	mov	r1, r3
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	f7fe fd64 	bl	800bf04 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d43c:	e00b      	b.n	800d456 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f7f3 ffa4 	bl	800138c <HAL_UART_RxCpltCallback>
}
 800d444:	e007      	b.n	800d456 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	699a      	ldr	r2, [r3, #24]
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	f042 0208 	orr.w	r2, r2, #8
 800d454:	619a      	str	r2, [r3, #24]
}
 800d456:	bf00      	nop
 800d458:	3770      	adds	r7, #112	@ 0x70
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	bf00      	nop
 800d460:	58000c00 	.word	0x58000c00

0800d464 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b0ac      	sub	sp, #176	@ 0xb0
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d472:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	69db      	ldr	r3, [r3, #28]
 800d47c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	689b      	ldr	r3, [r3, #8]
 800d490:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d49a:	2b22      	cmp	r3, #34	@ 0x22
 800d49c:	f040 8180 	bne.w	800d7a0 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d4a6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d4aa:	e123      	b.n	800d6f4 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4b2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d4b6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800d4ba:	b2d9      	uxtb	r1, r3
 800d4bc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800d4c0:	b2da      	uxtb	r2, r3
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d4c6:	400a      	ands	r2, r1
 800d4c8:	b2d2      	uxtb	r2, r2
 800d4ca:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d4d0:	1c5a      	adds	r2, r3, #1
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d4dc:	b29b      	uxth	r3, r3
 800d4de:	3b01      	subs	r3, #1
 800d4e0:	b29a      	uxth	r2, r3
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	69db      	ldr	r3, [r3, #28]
 800d4ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d4f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d4f6:	f003 0307 	and.w	r3, r3, #7
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d053      	beq.n	800d5a6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d4fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d502:	f003 0301 	and.w	r3, r3, #1
 800d506:	2b00      	cmp	r3, #0
 800d508:	d011      	beq.n	800d52e <UART_RxISR_8BIT_FIFOEN+0xca>
 800d50a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d50e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d512:	2b00      	cmp	r3, #0
 800d514:	d00b      	beq.n	800d52e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	2201      	movs	r2, #1
 800d51c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d524:	f043 0201 	orr.w	r2, r3, #1
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d52e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d532:	f003 0302 	and.w	r3, r3, #2
 800d536:	2b00      	cmp	r3, #0
 800d538:	d011      	beq.n	800d55e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800d53a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d53e:	f003 0301 	and.w	r3, r3, #1
 800d542:	2b00      	cmp	r3, #0
 800d544:	d00b      	beq.n	800d55e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	2202      	movs	r2, #2
 800d54c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d554:	f043 0204 	orr.w	r2, r3, #4
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d55e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d562:	f003 0304 	and.w	r3, r3, #4
 800d566:	2b00      	cmp	r3, #0
 800d568:	d011      	beq.n	800d58e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800d56a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d56e:	f003 0301 	and.w	r3, r3, #1
 800d572:	2b00      	cmp	r3, #0
 800d574:	d00b      	beq.n	800d58e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	2204      	movs	r2, #4
 800d57c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d584:	f043 0202 	orr.w	r2, r3, #2
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d594:	2b00      	cmp	r3, #0
 800d596:	d006      	beq.n	800d5a6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f7fe fca9 	bl	800bef0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d5ac:	b29b      	uxth	r3, r3
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	f040 80a0 	bne.w	800d6f4 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d5bc:	e853 3f00 	ldrex	r3, [r3]
 800d5c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800d5c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d5c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d5c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	461a      	mov	r2, r3
 800d5d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d5d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d5d8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5da:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800d5dc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d5de:	e841 2300 	strex	r3, r2, [r1]
 800d5e2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800d5e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d1e4      	bne.n	800d5b4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	3308      	adds	r3, #8
 800d5f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d5f4:	e853 3f00 	ldrex	r3, [r3]
 800d5f8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800d5fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d5fc:	4b6e      	ldr	r3, [pc, #440]	@ (800d7b8 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800d5fe:	4013      	ands	r3, r2
 800d600:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	3308      	adds	r3, #8
 800d60a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d60e:	66ba      	str	r2, [r7, #104]	@ 0x68
 800d610:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d612:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800d614:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d616:	e841 2300 	strex	r3, r2, [r1]
 800d61a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800d61c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d1e3      	bne.n	800d5ea <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2220      	movs	r2, #32
 800d626:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2200      	movs	r2, #0
 800d62e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2200      	movs	r2, #0
 800d634:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	4a60      	ldr	r2, [pc, #384]	@ (800d7bc <UART_RxISR_8BIT_FIFOEN+0x358>)
 800d63c:	4293      	cmp	r3, r2
 800d63e:	d021      	beq.n	800d684 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	685b      	ldr	r3, [r3, #4]
 800d646:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d01a      	beq.n	800d684 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d654:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d656:	e853 3f00 	ldrex	r3, [r3]
 800d65a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d65c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d65e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d662:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	461a      	mov	r2, r3
 800d66c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d670:	657b      	str	r3, [r7, #84]	@ 0x54
 800d672:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d674:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d676:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d678:	e841 2300 	strex	r3, r2, [r1]
 800d67c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d67e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d680:	2b00      	cmp	r3, #0
 800d682:	d1e4      	bne.n	800d64e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d688:	2b01      	cmp	r3, #1
 800d68a:	d130      	bne.n	800d6ee <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2200      	movs	r2, #0
 800d690:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d69a:	e853 3f00 	ldrex	r3, [r3]
 800d69e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d6a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6a2:	f023 0310 	bic.w	r3, r3, #16
 800d6a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	461a      	mov	r2, r3
 800d6b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d6b4:	643b      	str	r3, [r7, #64]	@ 0x40
 800d6b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d6ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d6bc:	e841 2300 	strex	r3, r2, [r1]
 800d6c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d6c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d1e4      	bne.n	800d692 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	69db      	ldr	r3, [r3, #28]
 800d6ce:	f003 0310 	and.w	r3, r3, #16
 800d6d2:	2b10      	cmp	r3, #16
 800d6d4:	d103      	bne.n	800d6de <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	2210      	movs	r2, #16
 800d6dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d6e4:	4619      	mov	r1, r3
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	f7fe fc0c 	bl	800bf04 <HAL_UARTEx_RxEventCallback>
 800d6ec:	e002      	b.n	800d6f4 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f7f3 fe4c 	bl	800138c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d6f4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d006      	beq.n	800d70a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800d6fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d700:	f003 0320 	and.w	r3, r3, #32
 800d704:	2b00      	cmp	r3, #0
 800d706:	f47f aed1 	bne.w	800d4ac <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d710:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d714:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d049      	beq.n	800d7b0 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d722:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800d726:	429a      	cmp	r2, r3
 800d728:	d242      	bcs.n	800d7b0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	3308      	adds	r3, #8
 800d730:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d732:	6a3b      	ldr	r3, [r7, #32]
 800d734:	e853 3f00 	ldrex	r3, [r3]
 800d738:	61fb      	str	r3, [r7, #28]
   return(result);
 800d73a:	69fb      	ldr	r3, [r7, #28]
 800d73c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d740:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	3308      	adds	r3, #8
 800d74a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d74e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d750:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d752:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d754:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d756:	e841 2300 	strex	r3, r2, [r1]
 800d75a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d75c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d1e3      	bne.n	800d72a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	4a16      	ldr	r2, [pc, #88]	@ (800d7c0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800d766:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	e853 3f00 	ldrex	r3, [r3]
 800d774:	60bb      	str	r3, [r7, #8]
   return(result);
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	f043 0320 	orr.w	r3, r3, #32
 800d77c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	461a      	mov	r2, r3
 800d786:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d78a:	61bb      	str	r3, [r7, #24]
 800d78c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d78e:	6979      	ldr	r1, [r7, #20]
 800d790:	69ba      	ldr	r2, [r7, #24]
 800d792:	e841 2300 	strex	r3, r2, [r1]
 800d796:	613b      	str	r3, [r7, #16]
   return(result);
 800d798:	693b      	ldr	r3, [r7, #16]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d1e4      	bne.n	800d768 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d79e:	e007      	b.n	800d7b0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	699a      	ldr	r2, [r3, #24]
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	f042 0208 	orr.w	r2, r2, #8
 800d7ae:	619a      	str	r2, [r3, #24]
}
 800d7b0:	bf00      	nop
 800d7b2:	37b0      	adds	r7, #176	@ 0xb0
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}
 800d7b8:	effffffe 	.word	0xeffffffe
 800d7bc:	58000c00 	.word	0x58000c00
 800d7c0:	0800d0f5 	.word	0x0800d0f5

0800d7c4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b0ae      	sub	sp, #184	@ 0xb8
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d7d2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	69db      	ldr	r3, [r3, #28]
 800d7dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	689b      	ldr	r3, [r3, #8]
 800d7f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d7fa:	2b22      	cmp	r3, #34	@ 0x22
 800d7fc:	f040 8184 	bne.w	800db08 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d806:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d80a:	e127      	b.n	800da5c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d812:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d81a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800d81e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800d822:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800d826:	4013      	ands	r3, r2
 800d828:	b29a      	uxth	r2, r3
 800d82a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d82e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d834:	1c9a      	adds	r2, r3, #2
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d840:	b29b      	uxth	r3, r3
 800d842:	3b01      	subs	r3, #1
 800d844:	b29a      	uxth	r2, r3
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	69db      	ldr	r3, [r3, #28]
 800d852:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d856:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d85a:	f003 0307 	and.w	r3, r3, #7
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d053      	beq.n	800d90a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d862:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d866:	f003 0301 	and.w	r3, r3, #1
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d011      	beq.n	800d892 <UART_RxISR_16BIT_FIFOEN+0xce>
 800d86e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d876:	2b00      	cmp	r3, #0
 800d878:	d00b      	beq.n	800d892 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	2201      	movs	r2, #1
 800d880:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d888:	f043 0201 	orr.w	r2, r3, #1
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d892:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d896:	f003 0302 	and.w	r3, r3, #2
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d011      	beq.n	800d8c2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800d89e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d8a2:	f003 0301 	and.w	r3, r3, #1
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d00b      	beq.n	800d8c2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	2202      	movs	r2, #2
 800d8b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d8b8:	f043 0204 	orr.w	r2, r3, #4
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d8c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d8c6:	f003 0304 	and.w	r3, r3, #4
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d011      	beq.n	800d8f2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800d8ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d8d2:	f003 0301 	and.w	r3, r3, #1
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d00b      	beq.n	800d8f2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	2204      	movs	r2, #4
 800d8e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d8e8:	f043 0202 	orr.w	r2, r3, #2
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d006      	beq.n	800d90a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d8fc:	6878      	ldr	r0, [r7, #4]
 800d8fe:	f7fe faf7 	bl	800bef0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2200      	movs	r2, #0
 800d906:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d910:	b29b      	uxth	r3, r3
 800d912:	2b00      	cmp	r3, #0
 800d914:	f040 80a2 	bne.w	800da5c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d91e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d920:	e853 3f00 	ldrex	r3, [r3]
 800d924:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d926:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d928:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d92c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	461a      	mov	r2, r3
 800d936:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d93a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d93e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d940:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d942:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d946:	e841 2300 	strex	r3, r2, [r1]
 800d94a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d94c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d1e2      	bne.n	800d918 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	3308      	adds	r3, #8
 800d958:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d95a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d95c:	e853 3f00 	ldrex	r3, [r3]
 800d960:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d962:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d964:	4b6e      	ldr	r3, [pc, #440]	@ (800db20 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800d966:	4013      	ands	r3, r2
 800d968:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	3308      	adds	r3, #8
 800d972:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d976:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d978:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d97a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d97c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d97e:	e841 2300 	strex	r3, r2, [r1]
 800d982:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d984:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d986:	2b00      	cmp	r3, #0
 800d988:	d1e3      	bne.n	800d952 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	2220      	movs	r2, #32
 800d98e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2200      	movs	r2, #0
 800d996:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2200      	movs	r2, #0
 800d99c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	4a60      	ldr	r2, [pc, #384]	@ (800db24 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800d9a4:	4293      	cmp	r3, r2
 800d9a6:	d021      	beq.n	800d9ec <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	685b      	ldr	r3, [r3, #4]
 800d9ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d01a      	beq.n	800d9ec <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d9be:	e853 3f00 	ldrex	r3, [r3]
 800d9c2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d9c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d9c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d9ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	461a      	mov	r2, r3
 800d9d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d9d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d9da:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d9de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d9e0:	e841 2300 	strex	r3, r2, [r1]
 800d9e4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d9e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d1e4      	bne.n	800d9b6 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d9f0:	2b01      	cmp	r3, #1
 800d9f2:	d130      	bne.n	800da56 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da02:	e853 3f00 	ldrex	r3, [r3]
 800da06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800da08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da0a:	f023 0310 	bic.w	r3, r3, #16
 800da0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	461a      	mov	r2, r3
 800da18:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800da1c:	647b      	str	r3, [r7, #68]	@ 0x44
 800da1e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800da22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800da24:	e841 2300 	strex	r3, r2, [r1]
 800da28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800da2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d1e4      	bne.n	800d9fa <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	69db      	ldr	r3, [r3, #28]
 800da36:	f003 0310 	and.w	r3, r3, #16
 800da3a:	2b10      	cmp	r3, #16
 800da3c:	d103      	bne.n	800da46 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	2210      	movs	r2, #16
 800da44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800da4c:	4619      	mov	r1, r3
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f7fe fa58 	bl	800bf04 <HAL_UARTEx_RxEventCallback>
 800da54:	e002      	b.n	800da5c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800da56:	6878      	ldr	r0, [r7, #4]
 800da58:	f7f3 fc98 	bl	800138c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800da5c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800da60:	2b00      	cmp	r3, #0
 800da62:	d006      	beq.n	800da72 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800da64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800da68:	f003 0320 	and.w	r3, r3, #32
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	f47f aecd 	bne.w	800d80c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800da78:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800da7c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800da80:	2b00      	cmp	r3, #0
 800da82:	d049      	beq.n	800db18 <UART_RxISR_16BIT_FIFOEN+0x354>
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800da8a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800da8e:	429a      	cmp	r2, r3
 800da90:	d242      	bcs.n	800db18 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	3308      	adds	r3, #8
 800da98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da9c:	e853 3f00 	ldrex	r3, [r3]
 800daa0:	623b      	str	r3, [r7, #32]
   return(result);
 800daa2:	6a3b      	ldr	r3, [r7, #32]
 800daa4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800daa8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	3308      	adds	r3, #8
 800dab2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800dab6:	633a      	str	r2, [r7, #48]	@ 0x30
 800dab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dabc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dabe:	e841 2300 	strex	r3, r2, [r1]
 800dac2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d1e3      	bne.n	800da92 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	4a16      	ldr	r2, [pc, #88]	@ (800db28 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800dace:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	e853 3f00 	ldrex	r3, [r3]
 800dadc:	60fb      	str	r3, [r7, #12]
   return(result);
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	f043 0320 	orr.w	r3, r3, #32
 800dae4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	461a      	mov	r2, r3
 800daee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800daf2:	61fb      	str	r3, [r7, #28]
 800daf4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daf6:	69b9      	ldr	r1, [r7, #24]
 800daf8:	69fa      	ldr	r2, [r7, #28]
 800dafa:	e841 2300 	strex	r3, r2, [r1]
 800dafe:	617b      	str	r3, [r7, #20]
   return(result);
 800db00:	697b      	ldr	r3, [r7, #20]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d1e4      	bne.n	800dad0 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800db06:	e007      	b.n	800db18 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	699a      	ldr	r2, [r3, #24]
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	f042 0208 	orr.w	r2, r2, #8
 800db16:	619a      	str	r2, [r3, #24]
}
 800db18:	bf00      	nop
 800db1a:	37b8      	adds	r7, #184	@ 0xb8
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}
 800db20:	effffffe 	.word	0xeffffffe
 800db24:	58000c00 	.word	0x58000c00
 800db28:	0800d2ad 	.word	0x0800d2ad

0800db2c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800db2c:	b480      	push	{r7}
 800db2e:	b083      	sub	sp, #12
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800db34:	bf00      	nop
 800db36:	370c      	adds	r7, #12
 800db38:	46bd      	mov	sp, r7
 800db3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3e:	4770      	bx	lr

0800db40 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800db40:	b480      	push	{r7}
 800db42:	b083      	sub	sp, #12
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800db48:	bf00      	nop
 800db4a:	370c      	adds	r7, #12
 800db4c:	46bd      	mov	sp, r7
 800db4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db52:	4770      	bx	lr

0800db54 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800db54:	b480      	push	{r7}
 800db56:	b083      	sub	sp, #12
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800db5c:	bf00      	nop
 800db5e:	370c      	adds	r7, #12
 800db60:	46bd      	mov	sp, r7
 800db62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db66:	4770      	bx	lr

0800db68 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800db68:	b480      	push	{r7}
 800db6a:	b085      	sub	sp, #20
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800db76:	2b01      	cmp	r3, #1
 800db78:	d101      	bne.n	800db7e <HAL_UARTEx_DisableFifoMode+0x16>
 800db7a:	2302      	movs	r3, #2
 800db7c:	e027      	b.n	800dbce <HAL_UARTEx_DisableFifoMode+0x66>
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2201      	movs	r2, #1
 800db82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	2224      	movs	r2, #36	@ 0x24
 800db8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	681a      	ldr	r2, [r3, #0]
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	f022 0201 	bic.w	r2, r2, #1
 800dba4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800dbac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	68fa      	ldr	r2, [r7, #12]
 800dbba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2220      	movs	r2, #32
 800dbc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dbcc:	2300      	movs	r3, #0
}
 800dbce:	4618      	mov	r0, r3
 800dbd0:	3714      	adds	r7, #20
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd8:	4770      	bx	lr

0800dbda <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dbda:	b580      	push	{r7, lr}
 800dbdc:	b084      	sub	sp, #16
 800dbde:	af00      	add	r7, sp, #0
 800dbe0:	6078      	str	r0, [r7, #4]
 800dbe2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dbea:	2b01      	cmp	r3, #1
 800dbec:	d101      	bne.n	800dbf2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dbee:	2302      	movs	r3, #2
 800dbf0:	e02d      	b.n	800dc4e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2201      	movs	r2, #1
 800dbf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	2224      	movs	r2, #36	@ 0x24
 800dbfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	681a      	ldr	r2, [r3, #0]
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	f022 0201 	bic.w	r2, r2, #1
 800dc18:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	689b      	ldr	r3, [r3, #8]
 800dc20:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	683a      	ldr	r2, [r7, #0]
 800dc2a:	430a      	orrs	r2, r1
 800dc2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f000 f850 	bl	800dcd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	68fa      	ldr	r2, [r7, #12]
 800dc3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2220      	movs	r2, #32
 800dc40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2200      	movs	r2, #0
 800dc48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dc4c:	2300      	movs	r3, #0
}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	3710      	adds	r7, #16
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}

0800dc56 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dc56:	b580      	push	{r7, lr}
 800dc58:	b084      	sub	sp, #16
 800dc5a:	af00      	add	r7, sp, #0
 800dc5c:	6078      	str	r0, [r7, #4]
 800dc5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dc66:	2b01      	cmp	r3, #1
 800dc68:	d101      	bne.n	800dc6e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dc6a:	2302      	movs	r3, #2
 800dc6c:	e02d      	b.n	800dcca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	2201      	movs	r2, #1
 800dc72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	2224      	movs	r2, #36	@ 0x24
 800dc7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	681a      	ldr	r2, [r3, #0]
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	f022 0201 	bic.w	r2, r2, #1
 800dc94:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	689b      	ldr	r3, [r3, #8]
 800dc9c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	683a      	ldr	r2, [r7, #0]
 800dca6:	430a      	orrs	r2, r1
 800dca8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f000 f812 	bl	800dcd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	68fa      	ldr	r2, [r7, #12]
 800dcb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2220      	movs	r2, #32
 800dcbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dcc8:	2300      	movs	r3, #0
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	3710      	adds	r7, #16
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}
	...

0800dcd4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b085      	sub	sp, #20
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d108      	bne.n	800dcf6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2201      	movs	r2, #1
 800dce8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2201      	movs	r2, #1
 800dcf0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dcf4:	e031      	b.n	800dd5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dcf6:	2310      	movs	r3, #16
 800dcf8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dcfa:	2310      	movs	r3, #16
 800dcfc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	689b      	ldr	r3, [r3, #8]
 800dd04:	0e5b      	lsrs	r3, r3, #25
 800dd06:	b2db      	uxtb	r3, r3
 800dd08:	f003 0307 	and.w	r3, r3, #7
 800dd0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	689b      	ldr	r3, [r3, #8]
 800dd14:	0f5b      	lsrs	r3, r3, #29
 800dd16:	b2db      	uxtb	r3, r3
 800dd18:	f003 0307 	and.w	r3, r3, #7
 800dd1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dd1e:	7bbb      	ldrb	r3, [r7, #14]
 800dd20:	7b3a      	ldrb	r2, [r7, #12]
 800dd22:	4911      	ldr	r1, [pc, #68]	@ (800dd68 <UARTEx_SetNbDataToProcess+0x94>)
 800dd24:	5c8a      	ldrb	r2, [r1, r2]
 800dd26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dd2a:	7b3a      	ldrb	r2, [r7, #12]
 800dd2c:	490f      	ldr	r1, [pc, #60]	@ (800dd6c <UARTEx_SetNbDataToProcess+0x98>)
 800dd2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dd30:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd34:	b29a      	uxth	r2, r3
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dd3c:	7bfb      	ldrb	r3, [r7, #15]
 800dd3e:	7b7a      	ldrb	r2, [r7, #13]
 800dd40:	4909      	ldr	r1, [pc, #36]	@ (800dd68 <UARTEx_SetNbDataToProcess+0x94>)
 800dd42:	5c8a      	ldrb	r2, [r1, r2]
 800dd44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dd48:	7b7a      	ldrb	r2, [r7, #13]
 800dd4a:	4908      	ldr	r1, [pc, #32]	@ (800dd6c <UARTEx_SetNbDataToProcess+0x98>)
 800dd4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dd4e:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd52:	b29a      	uxth	r2, r3
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800dd5a:	bf00      	nop
 800dd5c:	3714      	adds	r7, #20
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd64:	4770      	bx	lr
 800dd66:	bf00      	nop
 800dd68:	08012948 	.word	0x08012948
 800dd6c:	08012950 	.word	0x08012950

0800dd70 <__cvt>:
 800dd70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd72:	ed2d 8b02 	vpush	{d8}
 800dd76:	eeb0 8b40 	vmov.f64	d8, d0
 800dd7a:	b085      	sub	sp, #20
 800dd7c:	4617      	mov	r7, r2
 800dd7e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800dd80:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dd82:	ee18 2a90 	vmov	r2, s17
 800dd86:	f025 0520 	bic.w	r5, r5, #32
 800dd8a:	2a00      	cmp	r2, #0
 800dd8c:	bfb6      	itet	lt
 800dd8e:	222d      	movlt	r2, #45	@ 0x2d
 800dd90:	2200      	movge	r2, #0
 800dd92:	eeb1 8b40 	vneglt.f64	d8, d0
 800dd96:	2d46      	cmp	r5, #70	@ 0x46
 800dd98:	460c      	mov	r4, r1
 800dd9a:	701a      	strb	r2, [r3, #0]
 800dd9c:	d004      	beq.n	800dda8 <__cvt+0x38>
 800dd9e:	2d45      	cmp	r5, #69	@ 0x45
 800dda0:	d100      	bne.n	800dda4 <__cvt+0x34>
 800dda2:	3401      	adds	r4, #1
 800dda4:	2102      	movs	r1, #2
 800dda6:	e000      	b.n	800ddaa <__cvt+0x3a>
 800dda8:	2103      	movs	r1, #3
 800ddaa:	ab03      	add	r3, sp, #12
 800ddac:	9301      	str	r3, [sp, #4]
 800ddae:	ab02      	add	r3, sp, #8
 800ddb0:	9300      	str	r3, [sp, #0]
 800ddb2:	4622      	mov	r2, r4
 800ddb4:	4633      	mov	r3, r6
 800ddb6:	eeb0 0b48 	vmov.f64	d0, d8
 800ddba:	f001 f851 	bl	800ee60 <_dtoa_r>
 800ddbe:	2d47      	cmp	r5, #71	@ 0x47
 800ddc0:	d114      	bne.n	800ddec <__cvt+0x7c>
 800ddc2:	07fb      	lsls	r3, r7, #31
 800ddc4:	d50a      	bpl.n	800dddc <__cvt+0x6c>
 800ddc6:	1902      	adds	r2, r0, r4
 800ddc8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ddcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddd0:	bf08      	it	eq
 800ddd2:	9203      	streq	r2, [sp, #12]
 800ddd4:	2130      	movs	r1, #48	@ 0x30
 800ddd6:	9b03      	ldr	r3, [sp, #12]
 800ddd8:	4293      	cmp	r3, r2
 800ddda:	d319      	bcc.n	800de10 <__cvt+0xa0>
 800dddc:	9b03      	ldr	r3, [sp, #12]
 800ddde:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dde0:	1a1b      	subs	r3, r3, r0
 800dde2:	6013      	str	r3, [r2, #0]
 800dde4:	b005      	add	sp, #20
 800dde6:	ecbd 8b02 	vpop	{d8}
 800ddea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddec:	2d46      	cmp	r5, #70	@ 0x46
 800ddee:	eb00 0204 	add.w	r2, r0, r4
 800ddf2:	d1e9      	bne.n	800ddc8 <__cvt+0x58>
 800ddf4:	7803      	ldrb	r3, [r0, #0]
 800ddf6:	2b30      	cmp	r3, #48	@ 0x30
 800ddf8:	d107      	bne.n	800de0a <__cvt+0x9a>
 800ddfa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ddfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de02:	bf1c      	itt	ne
 800de04:	f1c4 0401 	rsbne	r4, r4, #1
 800de08:	6034      	strne	r4, [r6, #0]
 800de0a:	6833      	ldr	r3, [r6, #0]
 800de0c:	441a      	add	r2, r3
 800de0e:	e7db      	b.n	800ddc8 <__cvt+0x58>
 800de10:	1c5c      	adds	r4, r3, #1
 800de12:	9403      	str	r4, [sp, #12]
 800de14:	7019      	strb	r1, [r3, #0]
 800de16:	e7de      	b.n	800ddd6 <__cvt+0x66>

0800de18 <__exponent>:
 800de18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de1a:	2900      	cmp	r1, #0
 800de1c:	bfba      	itte	lt
 800de1e:	4249      	neglt	r1, r1
 800de20:	232d      	movlt	r3, #45	@ 0x2d
 800de22:	232b      	movge	r3, #43	@ 0x2b
 800de24:	2909      	cmp	r1, #9
 800de26:	7002      	strb	r2, [r0, #0]
 800de28:	7043      	strb	r3, [r0, #1]
 800de2a:	dd29      	ble.n	800de80 <__exponent+0x68>
 800de2c:	f10d 0307 	add.w	r3, sp, #7
 800de30:	461d      	mov	r5, r3
 800de32:	270a      	movs	r7, #10
 800de34:	461a      	mov	r2, r3
 800de36:	fbb1 f6f7 	udiv	r6, r1, r7
 800de3a:	fb07 1416 	mls	r4, r7, r6, r1
 800de3e:	3430      	adds	r4, #48	@ 0x30
 800de40:	f802 4c01 	strb.w	r4, [r2, #-1]
 800de44:	460c      	mov	r4, r1
 800de46:	2c63      	cmp	r4, #99	@ 0x63
 800de48:	f103 33ff 	add.w	r3, r3, #4294967295
 800de4c:	4631      	mov	r1, r6
 800de4e:	dcf1      	bgt.n	800de34 <__exponent+0x1c>
 800de50:	3130      	adds	r1, #48	@ 0x30
 800de52:	1e94      	subs	r4, r2, #2
 800de54:	f803 1c01 	strb.w	r1, [r3, #-1]
 800de58:	1c41      	adds	r1, r0, #1
 800de5a:	4623      	mov	r3, r4
 800de5c:	42ab      	cmp	r3, r5
 800de5e:	d30a      	bcc.n	800de76 <__exponent+0x5e>
 800de60:	f10d 0309 	add.w	r3, sp, #9
 800de64:	1a9b      	subs	r3, r3, r2
 800de66:	42ac      	cmp	r4, r5
 800de68:	bf88      	it	hi
 800de6a:	2300      	movhi	r3, #0
 800de6c:	3302      	adds	r3, #2
 800de6e:	4403      	add	r3, r0
 800de70:	1a18      	subs	r0, r3, r0
 800de72:	b003      	add	sp, #12
 800de74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de76:	f813 6b01 	ldrb.w	r6, [r3], #1
 800de7a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800de7e:	e7ed      	b.n	800de5c <__exponent+0x44>
 800de80:	2330      	movs	r3, #48	@ 0x30
 800de82:	3130      	adds	r1, #48	@ 0x30
 800de84:	7083      	strb	r3, [r0, #2]
 800de86:	70c1      	strb	r1, [r0, #3]
 800de88:	1d03      	adds	r3, r0, #4
 800de8a:	e7f1      	b.n	800de70 <__exponent+0x58>
 800de8c:	0000      	movs	r0, r0
	...

0800de90 <_printf_float>:
 800de90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de94:	b08d      	sub	sp, #52	@ 0x34
 800de96:	460c      	mov	r4, r1
 800de98:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800de9c:	4616      	mov	r6, r2
 800de9e:	461f      	mov	r7, r3
 800dea0:	4605      	mov	r5, r0
 800dea2:	f000 fed7 	bl	800ec54 <_localeconv_r>
 800dea6:	f8d0 b000 	ldr.w	fp, [r0]
 800deaa:	4658      	mov	r0, fp
 800deac:	f7f2 fa68 	bl	8000380 <strlen>
 800deb0:	2300      	movs	r3, #0
 800deb2:	930a      	str	r3, [sp, #40]	@ 0x28
 800deb4:	f8d8 3000 	ldr.w	r3, [r8]
 800deb8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800debc:	6822      	ldr	r2, [r4, #0]
 800debe:	9005      	str	r0, [sp, #20]
 800dec0:	3307      	adds	r3, #7
 800dec2:	f023 0307 	bic.w	r3, r3, #7
 800dec6:	f103 0108 	add.w	r1, r3, #8
 800deca:	f8c8 1000 	str.w	r1, [r8]
 800dece:	ed93 0b00 	vldr	d0, [r3]
 800ded2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800e130 <_printf_float+0x2a0>
 800ded6:	eeb0 7bc0 	vabs.f64	d7, d0
 800deda:	eeb4 7b46 	vcmp.f64	d7, d6
 800dede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dee2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800dee6:	dd24      	ble.n	800df32 <_printf_float+0xa2>
 800dee8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800deec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800def0:	d502      	bpl.n	800def8 <_printf_float+0x68>
 800def2:	232d      	movs	r3, #45	@ 0x2d
 800def4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800def8:	498f      	ldr	r1, [pc, #572]	@ (800e138 <_printf_float+0x2a8>)
 800defa:	4b90      	ldr	r3, [pc, #576]	@ (800e13c <_printf_float+0x2ac>)
 800defc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800df00:	bf94      	ite	ls
 800df02:	4688      	movls	r8, r1
 800df04:	4698      	movhi	r8, r3
 800df06:	f022 0204 	bic.w	r2, r2, #4
 800df0a:	2303      	movs	r3, #3
 800df0c:	6123      	str	r3, [r4, #16]
 800df0e:	6022      	str	r2, [r4, #0]
 800df10:	f04f 0a00 	mov.w	sl, #0
 800df14:	9700      	str	r7, [sp, #0]
 800df16:	4633      	mov	r3, r6
 800df18:	aa0b      	add	r2, sp, #44	@ 0x2c
 800df1a:	4621      	mov	r1, r4
 800df1c:	4628      	mov	r0, r5
 800df1e:	f000 f9d1 	bl	800e2c4 <_printf_common>
 800df22:	3001      	adds	r0, #1
 800df24:	f040 8089 	bne.w	800e03a <_printf_float+0x1aa>
 800df28:	f04f 30ff 	mov.w	r0, #4294967295
 800df2c:	b00d      	add	sp, #52	@ 0x34
 800df2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df32:	eeb4 0b40 	vcmp.f64	d0, d0
 800df36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df3a:	d709      	bvc.n	800df50 <_printf_float+0xc0>
 800df3c:	ee10 3a90 	vmov	r3, s1
 800df40:	2b00      	cmp	r3, #0
 800df42:	bfbc      	itt	lt
 800df44:	232d      	movlt	r3, #45	@ 0x2d
 800df46:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800df4a:	497d      	ldr	r1, [pc, #500]	@ (800e140 <_printf_float+0x2b0>)
 800df4c:	4b7d      	ldr	r3, [pc, #500]	@ (800e144 <_printf_float+0x2b4>)
 800df4e:	e7d5      	b.n	800defc <_printf_float+0x6c>
 800df50:	6863      	ldr	r3, [r4, #4]
 800df52:	1c59      	adds	r1, r3, #1
 800df54:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800df58:	d139      	bne.n	800dfce <_printf_float+0x13e>
 800df5a:	2306      	movs	r3, #6
 800df5c:	6063      	str	r3, [r4, #4]
 800df5e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800df62:	2300      	movs	r3, #0
 800df64:	6022      	str	r2, [r4, #0]
 800df66:	9303      	str	r3, [sp, #12]
 800df68:	ab0a      	add	r3, sp, #40	@ 0x28
 800df6a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800df6e:	ab09      	add	r3, sp, #36	@ 0x24
 800df70:	9300      	str	r3, [sp, #0]
 800df72:	6861      	ldr	r1, [r4, #4]
 800df74:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800df78:	4628      	mov	r0, r5
 800df7a:	f7ff fef9 	bl	800dd70 <__cvt>
 800df7e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800df82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800df84:	4680      	mov	r8, r0
 800df86:	d129      	bne.n	800dfdc <_printf_float+0x14c>
 800df88:	1cc8      	adds	r0, r1, #3
 800df8a:	db02      	blt.n	800df92 <_printf_float+0x102>
 800df8c:	6863      	ldr	r3, [r4, #4]
 800df8e:	4299      	cmp	r1, r3
 800df90:	dd41      	ble.n	800e016 <_printf_float+0x186>
 800df92:	f1a9 0902 	sub.w	r9, r9, #2
 800df96:	fa5f f989 	uxtb.w	r9, r9
 800df9a:	3901      	subs	r1, #1
 800df9c:	464a      	mov	r2, r9
 800df9e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800dfa2:	9109      	str	r1, [sp, #36]	@ 0x24
 800dfa4:	f7ff ff38 	bl	800de18 <__exponent>
 800dfa8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dfaa:	1813      	adds	r3, r2, r0
 800dfac:	2a01      	cmp	r2, #1
 800dfae:	4682      	mov	sl, r0
 800dfb0:	6123      	str	r3, [r4, #16]
 800dfb2:	dc02      	bgt.n	800dfba <_printf_float+0x12a>
 800dfb4:	6822      	ldr	r2, [r4, #0]
 800dfb6:	07d2      	lsls	r2, r2, #31
 800dfb8:	d501      	bpl.n	800dfbe <_printf_float+0x12e>
 800dfba:	3301      	adds	r3, #1
 800dfbc:	6123      	str	r3, [r4, #16]
 800dfbe:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d0a6      	beq.n	800df14 <_printf_float+0x84>
 800dfc6:	232d      	movs	r3, #45	@ 0x2d
 800dfc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dfcc:	e7a2      	b.n	800df14 <_printf_float+0x84>
 800dfce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800dfd2:	d1c4      	bne.n	800df5e <_printf_float+0xce>
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d1c2      	bne.n	800df5e <_printf_float+0xce>
 800dfd8:	2301      	movs	r3, #1
 800dfda:	e7bf      	b.n	800df5c <_printf_float+0xcc>
 800dfdc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800dfe0:	d9db      	bls.n	800df9a <_printf_float+0x10a>
 800dfe2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800dfe6:	d118      	bne.n	800e01a <_printf_float+0x18a>
 800dfe8:	2900      	cmp	r1, #0
 800dfea:	6863      	ldr	r3, [r4, #4]
 800dfec:	dd0b      	ble.n	800e006 <_printf_float+0x176>
 800dfee:	6121      	str	r1, [r4, #16]
 800dff0:	b913      	cbnz	r3, 800dff8 <_printf_float+0x168>
 800dff2:	6822      	ldr	r2, [r4, #0]
 800dff4:	07d0      	lsls	r0, r2, #31
 800dff6:	d502      	bpl.n	800dffe <_printf_float+0x16e>
 800dff8:	3301      	adds	r3, #1
 800dffa:	440b      	add	r3, r1
 800dffc:	6123      	str	r3, [r4, #16]
 800dffe:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e000:	f04f 0a00 	mov.w	sl, #0
 800e004:	e7db      	b.n	800dfbe <_printf_float+0x12e>
 800e006:	b913      	cbnz	r3, 800e00e <_printf_float+0x17e>
 800e008:	6822      	ldr	r2, [r4, #0]
 800e00a:	07d2      	lsls	r2, r2, #31
 800e00c:	d501      	bpl.n	800e012 <_printf_float+0x182>
 800e00e:	3302      	adds	r3, #2
 800e010:	e7f4      	b.n	800dffc <_printf_float+0x16c>
 800e012:	2301      	movs	r3, #1
 800e014:	e7f2      	b.n	800dffc <_printf_float+0x16c>
 800e016:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800e01a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e01c:	4299      	cmp	r1, r3
 800e01e:	db05      	blt.n	800e02c <_printf_float+0x19c>
 800e020:	6823      	ldr	r3, [r4, #0]
 800e022:	6121      	str	r1, [r4, #16]
 800e024:	07d8      	lsls	r0, r3, #31
 800e026:	d5ea      	bpl.n	800dffe <_printf_float+0x16e>
 800e028:	1c4b      	adds	r3, r1, #1
 800e02a:	e7e7      	b.n	800dffc <_printf_float+0x16c>
 800e02c:	2900      	cmp	r1, #0
 800e02e:	bfd4      	ite	le
 800e030:	f1c1 0202 	rsble	r2, r1, #2
 800e034:	2201      	movgt	r2, #1
 800e036:	4413      	add	r3, r2
 800e038:	e7e0      	b.n	800dffc <_printf_float+0x16c>
 800e03a:	6823      	ldr	r3, [r4, #0]
 800e03c:	055a      	lsls	r2, r3, #21
 800e03e:	d407      	bmi.n	800e050 <_printf_float+0x1c0>
 800e040:	6923      	ldr	r3, [r4, #16]
 800e042:	4642      	mov	r2, r8
 800e044:	4631      	mov	r1, r6
 800e046:	4628      	mov	r0, r5
 800e048:	47b8      	blx	r7
 800e04a:	3001      	adds	r0, #1
 800e04c:	d12a      	bne.n	800e0a4 <_printf_float+0x214>
 800e04e:	e76b      	b.n	800df28 <_printf_float+0x98>
 800e050:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800e054:	f240 80e0 	bls.w	800e218 <_printf_float+0x388>
 800e058:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800e05c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e064:	d133      	bne.n	800e0ce <_printf_float+0x23e>
 800e066:	4a38      	ldr	r2, [pc, #224]	@ (800e148 <_printf_float+0x2b8>)
 800e068:	2301      	movs	r3, #1
 800e06a:	4631      	mov	r1, r6
 800e06c:	4628      	mov	r0, r5
 800e06e:	47b8      	blx	r7
 800e070:	3001      	adds	r0, #1
 800e072:	f43f af59 	beq.w	800df28 <_printf_float+0x98>
 800e076:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e07a:	4543      	cmp	r3, r8
 800e07c:	db02      	blt.n	800e084 <_printf_float+0x1f4>
 800e07e:	6823      	ldr	r3, [r4, #0]
 800e080:	07d8      	lsls	r0, r3, #31
 800e082:	d50f      	bpl.n	800e0a4 <_printf_float+0x214>
 800e084:	9b05      	ldr	r3, [sp, #20]
 800e086:	465a      	mov	r2, fp
 800e088:	4631      	mov	r1, r6
 800e08a:	4628      	mov	r0, r5
 800e08c:	47b8      	blx	r7
 800e08e:	3001      	adds	r0, #1
 800e090:	f43f af4a 	beq.w	800df28 <_printf_float+0x98>
 800e094:	f04f 0900 	mov.w	r9, #0
 800e098:	f108 38ff 	add.w	r8, r8, #4294967295
 800e09c:	f104 0a1a 	add.w	sl, r4, #26
 800e0a0:	45c8      	cmp	r8, r9
 800e0a2:	dc09      	bgt.n	800e0b8 <_printf_float+0x228>
 800e0a4:	6823      	ldr	r3, [r4, #0]
 800e0a6:	079b      	lsls	r3, r3, #30
 800e0a8:	f100 8107 	bmi.w	800e2ba <_printf_float+0x42a>
 800e0ac:	68e0      	ldr	r0, [r4, #12]
 800e0ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e0b0:	4298      	cmp	r0, r3
 800e0b2:	bfb8      	it	lt
 800e0b4:	4618      	movlt	r0, r3
 800e0b6:	e739      	b.n	800df2c <_printf_float+0x9c>
 800e0b8:	2301      	movs	r3, #1
 800e0ba:	4652      	mov	r2, sl
 800e0bc:	4631      	mov	r1, r6
 800e0be:	4628      	mov	r0, r5
 800e0c0:	47b8      	blx	r7
 800e0c2:	3001      	adds	r0, #1
 800e0c4:	f43f af30 	beq.w	800df28 <_printf_float+0x98>
 800e0c8:	f109 0901 	add.w	r9, r9, #1
 800e0cc:	e7e8      	b.n	800e0a0 <_printf_float+0x210>
 800e0ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	dc3b      	bgt.n	800e14c <_printf_float+0x2bc>
 800e0d4:	4a1c      	ldr	r2, [pc, #112]	@ (800e148 <_printf_float+0x2b8>)
 800e0d6:	2301      	movs	r3, #1
 800e0d8:	4631      	mov	r1, r6
 800e0da:	4628      	mov	r0, r5
 800e0dc:	47b8      	blx	r7
 800e0de:	3001      	adds	r0, #1
 800e0e0:	f43f af22 	beq.w	800df28 <_printf_float+0x98>
 800e0e4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e0e8:	ea59 0303 	orrs.w	r3, r9, r3
 800e0ec:	d102      	bne.n	800e0f4 <_printf_float+0x264>
 800e0ee:	6823      	ldr	r3, [r4, #0]
 800e0f0:	07d9      	lsls	r1, r3, #31
 800e0f2:	d5d7      	bpl.n	800e0a4 <_printf_float+0x214>
 800e0f4:	9b05      	ldr	r3, [sp, #20]
 800e0f6:	465a      	mov	r2, fp
 800e0f8:	4631      	mov	r1, r6
 800e0fa:	4628      	mov	r0, r5
 800e0fc:	47b8      	blx	r7
 800e0fe:	3001      	adds	r0, #1
 800e100:	f43f af12 	beq.w	800df28 <_printf_float+0x98>
 800e104:	f04f 0a00 	mov.w	sl, #0
 800e108:	f104 0b1a 	add.w	fp, r4, #26
 800e10c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e10e:	425b      	negs	r3, r3
 800e110:	4553      	cmp	r3, sl
 800e112:	dc01      	bgt.n	800e118 <_printf_float+0x288>
 800e114:	464b      	mov	r3, r9
 800e116:	e794      	b.n	800e042 <_printf_float+0x1b2>
 800e118:	2301      	movs	r3, #1
 800e11a:	465a      	mov	r2, fp
 800e11c:	4631      	mov	r1, r6
 800e11e:	4628      	mov	r0, r5
 800e120:	47b8      	blx	r7
 800e122:	3001      	adds	r0, #1
 800e124:	f43f af00 	beq.w	800df28 <_printf_float+0x98>
 800e128:	f10a 0a01 	add.w	sl, sl, #1
 800e12c:	e7ee      	b.n	800e10c <_printf_float+0x27c>
 800e12e:	bf00      	nop
 800e130:	ffffffff 	.word	0xffffffff
 800e134:	7fefffff 	.word	0x7fefffff
 800e138:	08012958 	.word	0x08012958
 800e13c:	0801295c 	.word	0x0801295c
 800e140:	08012960 	.word	0x08012960
 800e144:	08012964 	.word	0x08012964
 800e148:	08012968 	.word	0x08012968
 800e14c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e14e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e152:	4553      	cmp	r3, sl
 800e154:	bfa8      	it	ge
 800e156:	4653      	movge	r3, sl
 800e158:	2b00      	cmp	r3, #0
 800e15a:	4699      	mov	r9, r3
 800e15c:	dc37      	bgt.n	800e1ce <_printf_float+0x33e>
 800e15e:	2300      	movs	r3, #0
 800e160:	9307      	str	r3, [sp, #28]
 800e162:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e166:	f104 021a 	add.w	r2, r4, #26
 800e16a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e16c:	9907      	ldr	r1, [sp, #28]
 800e16e:	9306      	str	r3, [sp, #24]
 800e170:	eba3 0309 	sub.w	r3, r3, r9
 800e174:	428b      	cmp	r3, r1
 800e176:	dc31      	bgt.n	800e1dc <_printf_float+0x34c>
 800e178:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e17a:	459a      	cmp	sl, r3
 800e17c:	dc3b      	bgt.n	800e1f6 <_printf_float+0x366>
 800e17e:	6823      	ldr	r3, [r4, #0]
 800e180:	07da      	lsls	r2, r3, #31
 800e182:	d438      	bmi.n	800e1f6 <_printf_float+0x366>
 800e184:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e186:	ebaa 0903 	sub.w	r9, sl, r3
 800e18a:	9b06      	ldr	r3, [sp, #24]
 800e18c:	ebaa 0303 	sub.w	r3, sl, r3
 800e190:	4599      	cmp	r9, r3
 800e192:	bfa8      	it	ge
 800e194:	4699      	movge	r9, r3
 800e196:	f1b9 0f00 	cmp.w	r9, #0
 800e19a:	dc34      	bgt.n	800e206 <_printf_float+0x376>
 800e19c:	f04f 0800 	mov.w	r8, #0
 800e1a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e1a4:	f104 0b1a 	add.w	fp, r4, #26
 800e1a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1aa:	ebaa 0303 	sub.w	r3, sl, r3
 800e1ae:	eba3 0309 	sub.w	r3, r3, r9
 800e1b2:	4543      	cmp	r3, r8
 800e1b4:	f77f af76 	ble.w	800e0a4 <_printf_float+0x214>
 800e1b8:	2301      	movs	r3, #1
 800e1ba:	465a      	mov	r2, fp
 800e1bc:	4631      	mov	r1, r6
 800e1be:	4628      	mov	r0, r5
 800e1c0:	47b8      	blx	r7
 800e1c2:	3001      	adds	r0, #1
 800e1c4:	f43f aeb0 	beq.w	800df28 <_printf_float+0x98>
 800e1c8:	f108 0801 	add.w	r8, r8, #1
 800e1cc:	e7ec      	b.n	800e1a8 <_printf_float+0x318>
 800e1ce:	4642      	mov	r2, r8
 800e1d0:	4631      	mov	r1, r6
 800e1d2:	4628      	mov	r0, r5
 800e1d4:	47b8      	blx	r7
 800e1d6:	3001      	adds	r0, #1
 800e1d8:	d1c1      	bne.n	800e15e <_printf_float+0x2ce>
 800e1da:	e6a5      	b.n	800df28 <_printf_float+0x98>
 800e1dc:	2301      	movs	r3, #1
 800e1de:	4631      	mov	r1, r6
 800e1e0:	4628      	mov	r0, r5
 800e1e2:	9206      	str	r2, [sp, #24]
 800e1e4:	47b8      	blx	r7
 800e1e6:	3001      	adds	r0, #1
 800e1e8:	f43f ae9e 	beq.w	800df28 <_printf_float+0x98>
 800e1ec:	9b07      	ldr	r3, [sp, #28]
 800e1ee:	9a06      	ldr	r2, [sp, #24]
 800e1f0:	3301      	adds	r3, #1
 800e1f2:	9307      	str	r3, [sp, #28]
 800e1f4:	e7b9      	b.n	800e16a <_printf_float+0x2da>
 800e1f6:	9b05      	ldr	r3, [sp, #20]
 800e1f8:	465a      	mov	r2, fp
 800e1fa:	4631      	mov	r1, r6
 800e1fc:	4628      	mov	r0, r5
 800e1fe:	47b8      	blx	r7
 800e200:	3001      	adds	r0, #1
 800e202:	d1bf      	bne.n	800e184 <_printf_float+0x2f4>
 800e204:	e690      	b.n	800df28 <_printf_float+0x98>
 800e206:	9a06      	ldr	r2, [sp, #24]
 800e208:	464b      	mov	r3, r9
 800e20a:	4442      	add	r2, r8
 800e20c:	4631      	mov	r1, r6
 800e20e:	4628      	mov	r0, r5
 800e210:	47b8      	blx	r7
 800e212:	3001      	adds	r0, #1
 800e214:	d1c2      	bne.n	800e19c <_printf_float+0x30c>
 800e216:	e687      	b.n	800df28 <_printf_float+0x98>
 800e218:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800e21c:	f1b9 0f01 	cmp.w	r9, #1
 800e220:	dc01      	bgt.n	800e226 <_printf_float+0x396>
 800e222:	07db      	lsls	r3, r3, #31
 800e224:	d536      	bpl.n	800e294 <_printf_float+0x404>
 800e226:	2301      	movs	r3, #1
 800e228:	4642      	mov	r2, r8
 800e22a:	4631      	mov	r1, r6
 800e22c:	4628      	mov	r0, r5
 800e22e:	47b8      	blx	r7
 800e230:	3001      	adds	r0, #1
 800e232:	f43f ae79 	beq.w	800df28 <_printf_float+0x98>
 800e236:	9b05      	ldr	r3, [sp, #20]
 800e238:	465a      	mov	r2, fp
 800e23a:	4631      	mov	r1, r6
 800e23c:	4628      	mov	r0, r5
 800e23e:	47b8      	blx	r7
 800e240:	3001      	adds	r0, #1
 800e242:	f43f ae71 	beq.w	800df28 <_printf_float+0x98>
 800e246:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800e24a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e24e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e252:	f109 39ff 	add.w	r9, r9, #4294967295
 800e256:	d018      	beq.n	800e28a <_printf_float+0x3fa>
 800e258:	464b      	mov	r3, r9
 800e25a:	f108 0201 	add.w	r2, r8, #1
 800e25e:	4631      	mov	r1, r6
 800e260:	4628      	mov	r0, r5
 800e262:	47b8      	blx	r7
 800e264:	3001      	adds	r0, #1
 800e266:	d10c      	bne.n	800e282 <_printf_float+0x3f2>
 800e268:	e65e      	b.n	800df28 <_printf_float+0x98>
 800e26a:	2301      	movs	r3, #1
 800e26c:	465a      	mov	r2, fp
 800e26e:	4631      	mov	r1, r6
 800e270:	4628      	mov	r0, r5
 800e272:	47b8      	blx	r7
 800e274:	3001      	adds	r0, #1
 800e276:	f43f ae57 	beq.w	800df28 <_printf_float+0x98>
 800e27a:	f108 0801 	add.w	r8, r8, #1
 800e27e:	45c8      	cmp	r8, r9
 800e280:	dbf3      	blt.n	800e26a <_printf_float+0x3da>
 800e282:	4653      	mov	r3, sl
 800e284:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e288:	e6dc      	b.n	800e044 <_printf_float+0x1b4>
 800e28a:	f04f 0800 	mov.w	r8, #0
 800e28e:	f104 0b1a 	add.w	fp, r4, #26
 800e292:	e7f4      	b.n	800e27e <_printf_float+0x3ee>
 800e294:	2301      	movs	r3, #1
 800e296:	4642      	mov	r2, r8
 800e298:	e7e1      	b.n	800e25e <_printf_float+0x3ce>
 800e29a:	2301      	movs	r3, #1
 800e29c:	464a      	mov	r2, r9
 800e29e:	4631      	mov	r1, r6
 800e2a0:	4628      	mov	r0, r5
 800e2a2:	47b8      	blx	r7
 800e2a4:	3001      	adds	r0, #1
 800e2a6:	f43f ae3f 	beq.w	800df28 <_printf_float+0x98>
 800e2aa:	f108 0801 	add.w	r8, r8, #1
 800e2ae:	68e3      	ldr	r3, [r4, #12]
 800e2b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e2b2:	1a5b      	subs	r3, r3, r1
 800e2b4:	4543      	cmp	r3, r8
 800e2b6:	dcf0      	bgt.n	800e29a <_printf_float+0x40a>
 800e2b8:	e6f8      	b.n	800e0ac <_printf_float+0x21c>
 800e2ba:	f04f 0800 	mov.w	r8, #0
 800e2be:	f104 0919 	add.w	r9, r4, #25
 800e2c2:	e7f4      	b.n	800e2ae <_printf_float+0x41e>

0800e2c4 <_printf_common>:
 800e2c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2c8:	4616      	mov	r6, r2
 800e2ca:	4698      	mov	r8, r3
 800e2cc:	688a      	ldr	r2, [r1, #8]
 800e2ce:	690b      	ldr	r3, [r1, #16]
 800e2d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e2d4:	4293      	cmp	r3, r2
 800e2d6:	bfb8      	it	lt
 800e2d8:	4613      	movlt	r3, r2
 800e2da:	6033      	str	r3, [r6, #0]
 800e2dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e2e0:	4607      	mov	r7, r0
 800e2e2:	460c      	mov	r4, r1
 800e2e4:	b10a      	cbz	r2, 800e2ea <_printf_common+0x26>
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	6033      	str	r3, [r6, #0]
 800e2ea:	6823      	ldr	r3, [r4, #0]
 800e2ec:	0699      	lsls	r1, r3, #26
 800e2ee:	bf42      	ittt	mi
 800e2f0:	6833      	ldrmi	r3, [r6, #0]
 800e2f2:	3302      	addmi	r3, #2
 800e2f4:	6033      	strmi	r3, [r6, #0]
 800e2f6:	6825      	ldr	r5, [r4, #0]
 800e2f8:	f015 0506 	ands.w	r5, r5, #6
 800e2fc:	d106      	bne.n	800e30c <_printf_common+0x48>
 800e2fe:	f104 0a19 	add.w	sl, r4, #25
 800e302:	68e3      	ldr	r3, [r4, #12]
 800e304:	6832      	ldr	r2, [r6, #0]
 800e306:	1a9b      	subs	r3, r3, r2
 800e308:	42ab      	cmp	r3, r5
 800e30a:	dc26      	bgt.n	800e35a <_printf_common+0x96>
 800e30c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e310:	6822      	ldr	r2, [r4, #0]
 800e312:	3b00      	subs	r3, #0
 800e314:	bf18      	it	ne
 800e316:	2301      	movne	r3, #1
 800e318:	0692      	lsls	r2, r2, #26
 800e31a:	d42b      	bmi.n	800e374 <_printf_common+0xb0>
 800e31c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e320:	4641      	mov	r1, r8
 800e322:	4638      	mov	r0, r7
 800e324:	47c8      	blx	r9
 800e326:	3001      	adds	r0, #1
 800e328:	d01e      	beq.n	800e368 <_printf_common+0xa4>
 800e32a:	6823      	ldr	r3, [r4, #0]
 800e32c:	6922      	ldr	r2, [r4, #16]
 800e32e:	f003 0306 	and.w	r3, r3, #6
 800e332:	2b04      	cmp	r3, #4
 800e334:	bf02      	ittt	eq
 800e336:	68e5      	ldreq	r5, [r4, #12]
 800e338:	6833      	ldreq	r3, [r6, #0]
 800e33a:	1aed      	subeq	r5, r5, r3
 800e33c:	68a3      	ldr	r3, [r4, #8]
 800e33e:	bf0c      	ite	eq
 800e340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e344:	2500      	movne	r5, #0
 800e346:	4293      	cmp	r3, r2
 800e348:	bfc4      	itt	gt
 800e34a:	1a9b      	subgt	r3, r3, r2
 800e34c:	18ed      	addgt	r5, r5, r3
 800e34e:	2600      	movs	r6, #0
 800e350:	341a      	adds	r4, #26
 800e352:	42b5      	cmp	r5, r6
 800e354:	d11a      	bne.n	800e38c <_printf_common+0xc8>
 800e356:	2000      	movs	r0, #0
 800e358:	e008      	b.n	800e36c <_printf_common+0xa8>
 800e35a:	2301      	movs	r3, #1
 800e35c:	4652      	mov	r2, sl
 800e35e:	4641      	mov	r1, r8
 800e360:	4638      	mov	r0, r7
 800e362:	47c8      	blx	r9
 800e364:	3001      	adds	r0, #1
 800e366:	d103      	bne.n	800e370 <_printf_common+0xac>
 800e368:	f04f 30ff 	mov.w	r0, #4294967295
 800e36c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e370:	3501      	adds	r5, #1
 800e372:	e7c6      	b.n	800e302 <_printf_common+0x3e>
 800e374:	18e1      	adds	r1, r4, r3
 800e376:	1c5a      	adds	r2, r3, #1
 800e378:	2030      	movs	r0, #48	@ 0x30
 800e37a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e37e:	4422      	add	r2, r4
 800e380:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e384:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e388:	3302      	adds	r3, #2
 800e38a:	e7c7      	b.n	800e31c <_printf_common+0x58>
 800e38c:	2301      	movs	r3, #1
 800e38e:	4622      	mov	r2, r4
 800e390:	4641      	mov	r1, r8
 800e392:	4638      	mov	r0, r7
 800e394:	47c8      	blx	r9
 800e396:	3001      	adds	r0, #1
 800e398:	d0e6      	beq.n	800e368 <_printf_common+0xa4>
 800e39a:	3601      	adds	r6, #1
 800e39c:	e7d9      	b.n	800e352 <_printf_common+0x8e>
	...

0800e3a0 <_printf_i>:
 800e3a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e3a4:	7e0f      	ldrb	r7, [r1, #24]
 800e3a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e3a8:	2f78      	cmp	r7, #120	@ 0x78
 800e3aa:	4691      	mov	r9, r2
 800e3ac:	4680      	mov	r8, r0
 800e3ae:	460c      	mov	r4, r1
 800e3b0:	469a      	mov	sl, r3
 800e3b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e3b6:	d807      	bhi.n	800e3c8 <_printf_i+0x28>
 800e3b8:	2f62      	cmp	r7, #98	@ 0x62
 800e3ba:	d80a      	bhi.n	800e3d2 <_printf_i+0x32>
 800e3bc:	2f00      	cmp	r7, #0
 800e3be:	f000 80d2 	beq.w	800e566 <_printf_i+0x1c6>
 800e3c2:	2f58      	cmp	r7, #88	@ 0x58
 800e3c4:	f000 80b9 	beq.w	800e53a <_printf_i+0x19a>
 800e3c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e3cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e3d0:	e03a      	b.n	800e448 <_printf_i+0xa8>
 800e3d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e3d6:	2b15      	cmp	r3, #21
 800e3d8:	d8f6      	bhi.n	800e3c8 <_printf_i+0x28>
 800e3da:	a101      	add	r1, pc, #4	@ (adr r1, 800e3e0 <_printf_i+0x40>)
 800e3dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e3e0:	0800e439 	.word	0x0800e439
 800e3e4:	0800e44d 	.word	0x0800e44d
 800e3e8:	0800e3c9 	.word	0x0800e3c9
 800e3ec:	0800e3c9 	.word	0x0800e3c9
 800e3f0:	0800e3c9 	.word	0x0800e3c9
 800e3f4:	0800e3c9 	.word	0x0800e3c9
 800e3f8:	0800e44d 	.word	0x0800e44d
 800e3fc:	0800e3c9 	.word	0x0800e3c9
 800e400:	0800e3c9 	.word	0x0800e3c9
 800e404:	0800e3c9 	.word	0x0800e3c9
 800e408:	0800e3c9 	.word	0x0800e3c9
 800e40c:	0800e54d 	.word	0x0800e54d
 800e410:	0800e477 	.word	0x0800e477
 800e414:	0800e507 	.word	0x0800e507
 800e418:	0800e3c9 	.word	0x0800e3c9
 800e41c:	0800e3c9 	.word	0x0800e3c9
 800e420:	0800e56f 	.word	0x0800e56f
 800e424:	0800e3c9 	.word	0x0800e3c9
 800e428:	0800e477 	.word	0x0800e477
 800e42c:	0800e3c9 	.word	0x0800e3c9
 800e430:	0800e3c9 	.word	0x0800e3c9
 800e434:	0800e50f 	.word	0x0800e50f
 800e438:	6833      	ldr	r3, [r6, #0]
 800e43a:	1d1a      	adds	r2, r3, #4
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	6032      	str	r2, [r6, #0]
 800e440:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e444:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e448:	2301      	movs	r3, #1
 800e44a:	e09d      	b.n	800e588 <_printf_i+0x1e8>
 800e44c:	6833      	ldr	r3, [r6, #0]
 800e44e:	6820      	ldr	r0, [r4, #0]
 800e450:	1d19      	adds	r1, r3, #4
 800e452:	6031      	str	r1, [r6, #0]
 800e454:	0606      	lsls	r6, r0, #24
 800e456:	d501      	bpl.n	800e45c <_printf_i+0xbc>
 800e458:	681d      	ldr	r5, [r3, #0]
 800e45a:	e003      	b.n	800e464 <_printf_i+0xc4>
 800e45c:	0645      	lsls	r5, r0, #25
 800e45e:	d5fb      	bpl.n	800e458 <_printf_i+0xb8>
 800e460:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e464:	2d00      	cmp	r5, #0
 800e466:	da03      	bge.n	800e470 <_printf_i+0xd0>
 800e468:	232d      	movs	r3, #45	@ 0x2d
 800e46a:	426d      	negs	r5, r5
 800e46c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e470:	4859      	ldr	r0, [pc, #356]	@ (800e5d8 <_printf_i+0x238>)
 800e472:	230a      	movs	r3, #10
 800e474:	e011      	b.n	800e49a <_printf_i+0xfa>
 800e476:	6821      	ldr	r1, [r4, #0]
 800e478:	6833      	ldr	r3, [r6, #0]
 800e47a:	0608      	lsls	r0, r1, #24
 800e47c:	f853 5b04 	ldr.w	r5, [r3], #4
 800e480:	d402      	bmi.n	800e488 <_printf_i+0xe8>
 800e482:	0649      	lsls	r1, r1, #25
 800e484:	bf48      	it	mi
 800e486:	b2ad      	uxthmi	r5, r5
 800e488:	2f6f      	cmp	r7, #111	@ 0x6f
 800e48a:	4853      	ldr	r0, [pc, #332]	@ (800e5d8 <_printf_i+0x238>)
 800e48c:	6033      	str	r3, [r6, #0]
 800e48e:	bf14      	ite	ne
 800e490:	230a      	movne	r3, #10
 800e492:	2308      	moveq	r3, #8
 800e494:	2100      	movs	r1, #0
 800e496:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e49a:	6866      	ldr	r6, [r4, #4]
 800e49c:	60a6      	str	r6, [r4, #8]
 800e49e:	2e00      	cmp	r6, #0
 800e4a0:	bfa2      	ittt	ge
 800e4a2:	6821      	ldrge	r1, [r4, #0]
 800e4a4:	f021 0104 	bicge.w	r1, r1, #4
 800e4a8:	6021      	strge	r1, [r4, #0]
 800e4aa:	b90d      	cbnz	r5, 800e4b0 <_printf_i+0x110>
 800e4ac:	2e00      	cmp	r6, #0
 800e4ae:	d04b      	beq.n	800e548 <_printf_i+0x1a8>
 800e4b0:	4616      	mov	r6, r2
 800e4b2:	fbb5 f1f3 	udiv	r1, r5, r3
 800e4b6:	fb03 5711 	mls	r7, r3, r1, r5
 800e4ba:	5dc7      	ldrb	r7, [r0, r7]
 800e4bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e4c0:	462f      	mov	r7, r5
 800e4c2:	42bb      	cmp	r3, r7
 800e4c4:	460d      	mov	r5, r1
 800e4c6:	d9f4      	bls.n	800e4b2 <_printf_i+0x112>
 800e4c8:	2b08      	cmp	r3, #8
 800e4ca:	d10b      	bne.n	800e4e4 <_printf_i+0x144>
 800e4cc:	6823      	ldr	r3, [r4, #0]
 800e4ce:	07df      	lsls	r7, r3, #31
 800e4d0:	d508      	bpl.n	800e4e4 <_printf_i+0x144>
 800e4d2:	6923      	ldr	r3, [r4, #16]
 800e4d4:	6861      	ldr	r1, [r4, #4]
 800e4d6:	4299      	cmp	r1, r3
 800e4d8:	bfde      	ittt	le
 800e4da:	2330      	movle	r3, #48	@ 0x30
 800e4dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e4e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e4e4:	1b92      	subs	r2, r2, r6
 800e4e6:	6122      	str	r2, [r4, #16]
 800e4e8:	f8cd a000 	str.w	sl, [sp]
 800e4ec:	464b      	mov	r3, r9
 800e4ee:	aa03      	add	r2, sp, #12
 800e4f0:	4621      	mov	r1, r4
 800e4f2:	4640      	mov	r0, r8
 800e4f4:	f7ff fee6 	bl	800e2c4 <_printf_common>
 800e4f8:	3001      	adds	r0, #1
 800e4fa:	d14a      	bne.n	800e592 <_printf_i+0x1f2>
 800e4fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e500:	b004      	add	sp, #16
 800e502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e506:	6823      	ldr	r3, [r4, #0]
 800e508:	f043 0320 	orr.w	r3, r3, #32
 800e50c:	6023      	str	r3, [r4, #0]
 800e50e:	4833      	ldr	r0, [pc, #204]	@ (800e5dc <_printf_i+0x23c>)
 800e510:	2778      	movs	r7, #120	@ 0x78
 800e512:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e516:	6823      	ldr	r3, [r4, #0]
 800e518:	6831      	ldr	r1, [r6, #0]
 800e51a:	061f      	lsls	r7, r3, #24
 800e51c:	f851 5b04 	ldr.w	r5, [r1], #4
 800e520:	d402      	bmi.n	800e528 <_printf_i+0x188>
 800e522:	065f      	lsls	r7, r3, #25
 800e524:	bf48      	it	mi
 800e526:	b2ad      	uxthmi	r5, r5
 800e528:	6031      	str	r1, [r6, #0]
 800e52a:	07d9      	lsls	r1, r3, #31
 800e52c:	bf44      	itt	mi
 800e52e:	f043 0320 	orrmi.w	r3, r3, #32
 800e532:	6023      	strmi	r3, [r4, #0]
 800e534:	b11d      	cbz	r5, 800e53e <_printf_i+0x19e>
 800e536:	2310      	movs	r3, #16
 800e538:	e7ac      	b.n	800e494 <_printf_i+0xf4>
 800e53a:	4827      	ldr	r0, [pc, #156]	@ (800e5d8 <_printf_i+0x238>)
 800e53c:	e7e9      	b.n	800e512 <_printf_i+0x172>
 800e53e:	6823      	ldr	r3, [r4, #0]
 800e540:	f023 0320 	bic.w	r3, r3, #32
 800e544:	6023      	str	r3, [r4, #0]
 800e546:	e7f6      	b.n	800e536 <_printf_i+0x196>
 800e548:	4616      	mov	r6, r2
 800e54a:	e7bd      	b.n	800e4c8 <_printf_i+0x128>
 800e54c:	6833      	ldr	r3, [r6, #0]
 800e54e:	6825      	ldr	r5, [r4, #0]
 800e550:	6961      	ldr	r1, [r4, #20]
 800e552:	1d18      	adds	r0, r3, #4
 800e554:	6030      	str	r0, [r6, #0]
 800e556:	062e      	lsls	r6, r5, #24
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	d501      	bpl.n	800e560 <_printf_i+0x1c0>
 800e55c:	6019      	str	r1, [r3, #0]
 800e55e:	e002      	b.n	800e566 <_printf_i+0x1c6>
 800e560:	0668      	lsls	r0, r5, #25
 800e562:	d5fb      	bpl.n	800e55c <_printf_i+0x1bc>
 800e564:	8019      	strh	r1, [r3, #0]
 800e566:	2300      	movs	r3, #0
 800e568:	6123      	str	r3, [r4, #16]
 800e56a:	4616      	mov	r6, r2
 800e56c:	e7bc      	b.n	800e4e8 <_printf_i+0x148>
 800e56e:	6833      	ldr	r3, [r6, #0]
 800e570:	1d1a      	adds	r2, r3, #4
 800e572:	6032      	str	r2, [r6, #0]
 800e574:	681e      	ldr	r6, [r3, #0]
 800e576:	6862      	ldr	r2, [r4, #4]
 800e578:	2100      	movs	r1, #0
 800e57a:	4630      	mov	r0, r6
 800e57c:	f7f1 feb0 	bl	80002e0 <memchr>
 800e580:	b108      	cbz	r0, 800e586 <_printf_i+0x1e6>
 800e582:	1b80      	subs	r0, r0, r6
 800e584:	6060      	str	r0, [r4, #4]
 800e586:	6863      	ldr	r3, [r4, #4]
 800e588:	6123      	str	r3, [r4, #16]
 800e58a:	2300      	movs	r3, #0
 800e58c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e590:	e7aa      	b.n	800e4e8 <_printf_i+0x148>
 800e592:	6923      	ldr	r3, [r4, #16]
 800e594:	4632      	mov	r2, r6
 800e596:	4649      	mov	r1, r9
 800e598:	4640      	mov	r0, r8
 800e59a:	47d0      	blx	sl
 800e59c:	3001      	adds	r0, #1
 800e59e:	d0ad      	beq.n	800e4fc <_printf_i+0x15c>
 800e5a0:	6823      	ldr	r3, [r4, #0]
 800e5a2:	079b      	lsls	r3, r3, #30
 800e5a4:	d413      	bmi.n	800e5ce <_printf_i+0x22e>
 800e5a6:	68e0      	ldr	r0, [r4, #12]
 800e5a8:	9b03      	ldr	r3, [sp, #12]
 800e5aa:	4298      	cmp	r0, r3
 800e5ac:	bfb8      	it	lt
 800e5ae:	4618      	movlt	r0, r3
 800e5b0:	e7a6      	b.n	800e500 <_printf_i+0x160>
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	4632      	mov	r2, r6
 800e5b6:	4649      	mov	r1, r9
 800e5b8:	4640      	mov	r0, r8
 800e5ba:	47d0      	blx	sl
 800e5bc:	3001      	adds	r0, #1
 800e5be:	d09d      	beq.n	800e4fc <_printf_i+0x15c>
 800e5c0:	3501      	adds	r5, #1
 800e5c2:	68e3      	ldr	r3, [r4, #12]
 800e5c4:	9903      	ldr	r1, [sp, #12]
 800e5c6:	1a5b      	subs	r3, r3, r1
 800e5c8:	42ab      	cmp	r3, r5
 800e5ca:	dcf2      	bgt.n	800e5b2 <_printf_i+0x212>
 800e5cc:	e7eb      	b.n	800e5a6 <_printf_i+0x206>
 800e5ce:	2500      	movs	r5, #0
 800e5d0:	f104 0619 	add.w	r6, r4, #25
 800e5d4:	e7f5      	b.n	800e5c2 <_printf_i+0x222>
 800e5d6:	bf00      	nop
 800e5d8:	0801296a 	.word	0x0801296a
 800e5dc:	0801297b 	.word	0x0801297b

0800e5e0 <_scanf_float>:
 800e5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5e4:	b087      	sub	sp, #28
 800e5e6:	4617      	mov	r7, r2
 800e5e8:	9303      	str	r3, [sp, #12]
 800e5ea:	688b      	ldr	r3, [r1, #8]
 800e5ec:	1e5a      	subs	r2, r3, #1
 800e5ee:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e5f2:	bf81      	itttt	hi
 800e5f4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e5f8:	eb03 0b05 	addhi.w	fp, r3, r5
 800e5fc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e600:	608b      	strhi	r3, [r1, #8]
 800e602:	680b      	ldr	r3, [r1, #0]
 800e604:	460a      	mov	r2, r1
 800e606:	f04f 0500 	mov.w	r5, #0
 800e60a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e60e:	f842 3b1c 	str.w	r3, [r2], #28
 800e612:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e616:	4680      	mov	r8, r0
 800e618:	460c      	mov	r4, r1
 800e61a:	bf98      	it	ls
 800e61c:	f04f 0b00 	movls.w	fp, #0
 800e620:	9201      	str	r2, [sp, #4]
 800e622:	4616      	mov	r6, r2
 800e624:	46aa      	mov	sl, r5
 800e626:	46a9      	mov	r9, r5
 800e628:	9502      	str	r5, [sp, #8]
 800e62a:	68a2      	ldr	r2, [r4, #8]
 800e62c:	b152      	cbz	r2, 800e644 <_scanf_float+0x64>
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	781b      	ldrb	r3, [r3, #0]
 800e632:	2b4e      	cmp	r3, #78	@ 0x4e
 800e634:	d864      	bhi.n	800e700 <_scanf_float+0x120>
 800e636:	2b40      	cmp	r3, #64	@ 0x40
 800e638:	d83c      	bhi.n	800e6b4 <_scanf_float+0xd4>
 800e63a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e63e:	b2c8      	uxtb	r0, r1
 800e640:	280e      	cmp	r0, #14
 800e642:	d93a      	bls.n	800e6ba <_scanf_float+0xda>
 800e644:	f1b9 0f00 	cmp.w	r9, #0
 800e648:	d003      	beq.n	800e652 <_scanf_float+0x72>
 800e64a:	6823      	ldr	r3, [r4, #0]
 800e64c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e650:	6023      	str	r3, [r4, #0]
 800e652:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e656:	f1ba 0f01 	cmp.w	sl, #1
 800e65a:	f200 8117 	bhi.w	800e88c <_scanf_float+0x2ac>
 800e65e:	9b01      	ldr	r3, [sp, #4]
 800e660:	429e      	cmp	r6, r3
 800e662:	f200 8108 	bhi.w	800e876 <_scanf_float+0x296>
 800e666:	2001      	movs	r0, #1
 800e668:	b007      	add	sp, #28
 800e66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e66e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e672:	2a0d      	cmp	r2, #13
 800e674:	d8e6      	bhi.n	800e644 <_scanf_float+0x64>
 800e676:	a101      	add	r1, pc, #4	@ (adr r1, 800e67c <_scanf_float+0x9c>)
 800e678:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e67c:	0800e7c3 	.word	0x0800e7c3
 800e680:	0800e645 	.word	0x0800e645
 800e684:	0800e645 	.word	0x0800e645
 800e688:	0800e645 	.word	0x0800e645
 800e68c:	0800e823 	.word	0x0800e823
 800e690:	0800e7fb 	.word	0x0800e7fb
 800e694:	0800e645 	.word	0x0800e645
 800e698:	0800e645 	.word	0x0800e645
 800e69c:	0800e7d1 	.word	0x0800e7d1
 800e6a0:	0800e645 	.word	0x0800e645
 800e6a4:	0800e645 	.word	0x0800e645
 800e6a8:	0800e645 	.word	0x0800e645
 800e6ac:	0800e645 	.word	0x0800e645
 800e6b0:	0800e789 	.word	0x0800e789
 800e6b4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800e6b8:	e7db      	b.n	800e672 <_scanf_float+0x92>
 800e6ba:	290e      	cmp	r1, #14
 800e6bc:	d8c2      	bhi.n	800e644 <_scanf_float+0x64>
 800e6be:	a001      	add	r0, pc, #4	@ (adr r0, 800e6c4 <_scanf_float+0xe4>)
 800e6c0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e6c4:	0800e779 	.word	0x0800e779
 800e6c8:	0800e645 	.word	0x0800e645
 800e6cc:	0800e779 	.word	0x0800e779
 800e6d0:	0800e80f 	.word	0x0800e80f
 800e6d4:	0800e645 	.word	0x0800e645
 800e6d8:	0800e721 	.word	0x0800e721
 800e6dc:	0800e75f 	.word	0x0800e75f
 800e6e0:	0800e75f 	.word	0x0800e75f
 800e6e4:	0800e75f 	.word	0x0800e75f
 800e6e8:	0800e75f 	.word	0x0800e75f
 800e6ec:	0800e75f 	.word	0x0800e75f
 800e6f0:	0800e75f 	.word	0x0800e75f
 800e6f4:	0800e75f 	.word	0x0800e75f
 800e6f8:	0800e75f 	.word	0x0800e75f
 800e6fc:	0800e75f 	.word	0x0800e75f
 800e700:	2b6e      	cmp	r3, #110	@ 0x6e
 800e702:	d809      	bhi.n	800e718 <_scanf_float+0x138>
 800e704:	2b60      	cmp	r3, #96	@ 0x60
 800e706:	d8b2      	bhi.n	800e66e <_scanf_float+0x8e>
 800e708:	2b54      	cmp	r3, #84	@ 0x54
 800e70a:	d07b      	beq.n	800e804 <_scanf_float+0x224>
 800e70c:	2b59      	cmp	r3, #89	@ 0x59
 800e70e:	d199      	bne.n	800e644 <_scanf_float+0x64>
 800e710:	2d07      	cmp	r5, #7
 800e712:	d197      	bne.n	800e644 <_scanf_float+0x64>
 800e714:	2508      	movs	r5, #8
 800e716:	e02c      	b.n	800e772 <_scanf_float+0x192>
 800e718:	2b74      	cmp	r3, #116	@ 0x74
 800e71a:	d073      	beq.n	800e804 <_scanf_float+0x224>
 800e71c:	2b79      	cmp	r3, #121	@ 0x79
 800e71e:	e7f6      	b.n	800e70e <_scanf_float+0x12e>
 800e720:	6821      	ldr	r1, [r4, #0]
 800e722:	05c8      	lsls	r0, r1, #23
 800e724:	d51b      	bpl.n	800e75e <_scanf_float+0x17e>
 800e726:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800e72a:	6021      	str	r1, [r4, #0]
 800e72c:	f109 0901 	add.w	r9, r9, #1
 800e730:	f1bb 0f00 	cmp.w	fp, #0
 800e734:	d003      	beq.n	800e73e <_scanf_float+0x15e>
 800e736:	3201      	adds	r2, #1
 800e738:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e73c:	60a2      	str	r2, [r4, #8]
 800e73e:	68a3      	ldr	r3, [r4, #8]
 800e740:	3b01      	subs	r3, #1
 800e742:	60a3      	str	r3, [r4, #8]
 800e744:	6923      	ldr	r3, [r4, #16]
 800e746:	3301      	adds	r3, #1
 800e748:	6123      	str	r3, [r4, #16]
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	3b01      	subs	r3, #1
 800e74e:	2b00      	cmp	r3, #0
 800e750:	607b      	str	r3, [r7, #4]
 800e752:	f340 8087 	ble.w	800e864 <_scanf_float+0x284>
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	3301      	adds	r3, #1
 800e75a:	603b      	str	r3, [r7, #0]
 800e75c:	e765      	b.n	800e62a <_scanf_float+0x4a>
 800e75e:	eb1a 0105 	adds.w	r1, sl, r5
 800e762:	f47f af6f 	bne.w	800e644 <_scanf_float+0x64>
 800e766:	6822      	ldr	r2, [r4, #0]
 800e768:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800e76c:	6022      	str	r2, [r4, #0]
 800e76e:	460d      	mov	r5, r1
 800e770:	468a      	mov	sl, r1
 800e772:	f806 3b01 	strb.w	r3, [r6], #1
 800e776:	e7e2      	b.n	800e73e <_scanf_float+0x15e>
 800e778:	6822      	ldr	r2, [r4, #0]
 800e77a:	0610      	lsls	r0, r2, #24
 800e77c:	f57f af62 	bpl.w	800e644 <_scanf_float+0x64>
 800e780:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e784:	6022      	str	r2, [r4, #0]
 800e786:	e7f4      	b.n	800e772 <_scanf_float+0x192>
 800e788:	f1ba 0f00 	cmp.w	sl, #0
 800e78c:	d10e      	bne.n	800e7ac <_scanf_float+0x1cc>
 800e78e:	f1b9 0f00 	cmp.w	r9, #0
 800e792:	d10e      	bne.n	800e7b2 <_scanf_float+0x1d2>
 800e794:	6822      	ldr	r2, [r4, #0]
 800e796:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e79a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e79e:	d108      	bne.n	800e7b2 <_scanf_float+0x1d2>
 800e7a0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e7a4:	6022      	str	r2, [r4, #0]
 800e7a6:	f04f 0a01 	mov.w	sl, #1
 800e7aa:	e7e2      	b.n	800e772 <_scanf_float+0x192>
 800e7ac:	f1ba 0f02 	cmp.w	sl, #2
 800e7b0:	d055      	beq.n	800e85e <_scanf_float+0x27e>
 800e7b2:	2d01      	cmp	r5, #1
 800e7b4:	d002      	beq.n	800e7bc <_scanf_float+0x1dc>
 800e7b6:	2d04      	cmp	r5, #4
 800e7b8:	f47f af44 	bne.w	800e644 <_scanf_float+0x64>
 800e7bc:	3501      	adds	r5, #1
 800e7be:	b2ed      	uxtb	r5, r5
 800e7c0:	e7d7      	b.n	800e772 <_scanf_float+0x192>
 800e7c2:	f1ba 0f01 	cmp.w	sl, #1
 800e7c6:	f47f af3d 	bne.w	800e644 <_scanf_float+0x64>
 800e7ca:	f04f 0a02 	mov.w	sl, #2
 800e7ce:	e7d0      	b.n	800e772 <_scanf_float+0x192>
 800e7d0:	b97d      	cbnz	r5, 800e7f2 <_scanf_float+0x212>
 800e7d2:	f1b9 0f00 	cmp.w	r9, #0
 800e7d6:	f47f af38 	bne.w	800e64a <_scanf_float+0x6a>
 800e7da:	6822      	ldr	r2, [r4, #0]
 800e7dc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e7e0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e7e4:	f040 8101 	bne.w	800e9ea <_scanf_float+0x40a>
 800e7e8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e7ec:	6022      	str	r2, [r4, #0]
 800e7ee:	2501      	movs	r5, #1
 800e7f0:	e7bf      	b.n	800e772 <_scanf_float+0x192>
 800e7f2:	2d03      	cmp	r5, #3
 800e7f4:	d0e2      	beq.n	800e7bc <_scanf_float+0x1dc>
 800e7f6:	2d05      	cmp	r5, #5
 800e7f8:	e7de      	b.n	800e7b8 <_scanf_float+0x1d8>
 800e7fa:	2d02      	cmp	r5, #2
 800e7fc:	f47f af22 	bne.w	800e644 <_scanf_float+0x64>
 800e800:	2503      	movs	r5, #3
 800e802:	e7b6      	b.n	800e772 <_scanf_float+0x192>
 800e804:	2d06      	cmp	r5, #6
 800e806:	f47f af1d 	bne.w	800e644 <_scanf_float+0x64>
 800e80a:	2507      	movs	r5, #7
 800e80c:	e7b1      	b.n	800e772 <_scanf_float+0x192>
 800e80e:	6822      	ldr	r2, [r4, #0]
 800e810:	0591      	lsls	r1, r2, #22
 800e812:	f57f af17 	bpl.w	800e644 <_scanf_float+0x64>
 800e816:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e81a:	6022      	str	r2, [r4, #0]
 800e81c:	f8cd 9008 	str.w	r9, [sp, #8]
 800e820:	e7a7      	b.n	800e772 <_scanf_float+0x192>
 800e822:	6822      	ldr	r2, [r4, #0]
 800e824:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e828:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e82c:	d006      	beq.n	800e83c <_scanf_float+0x25c>
 800e82e:	0550      	lsls	r0, r2, #21
 800e830:	f57f af08 	bpl.w	800e644 <_scanf_float+0x64>
 800e834:	f1b9 0f00 	cmp.w	r9, #0
 800e838:	f000 80d7 	beq.w	800e9ea <_scanf_float+0x40a>
 800e83c:	0591      	lsls	r1, r2, #22
 800e83e:	bf58      	it	pl
 800e840:	9902      	ldrpl	r1, [sp, #8]
 800e842:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e846:	bf58      	it	pl
 800e848:	eba9 0101 	subpl.w	r1, r9, r1
 800e84c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800e850:	bf58      	it	pl
 800e852:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e856:	6022      	str	r2, [r4, #0]
 800e858:	f04f 0900 	mov.w	r9, #0
 800e85c:	e789      	b.n	800e772 <_scanf_float+0x192>
 800e85e:	f04f 0a03 	mov.w	sl, #3
 800e862:	e786      	b.n	800e772 <_scanf_float+0x192>
 800e864:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e868:	4639      	mov	r1, r7
 800e86a:	4640      	mov	r0, r8
 800e86c:	4798      	blx	r3
 800e86e:	2800      	cmp	r0, #0
 800e870:	f43f aedb 	beq.w	800e62a <_scanf_float+0x4a>
 800e874:	e6e6      	b.n	800e644 <_scanf_float+0x64>
 800e876:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e87a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e87e:	463a      	mov	r2, r7
 800e880:	4640      	mov	r0, r8
 800e882:	4798      	blx	r3
 800e884:	6923      	ldr	r3, [r4, #16]
 800e886:	3b01      	subs	r3, #1
 800e888:	6123      	str	r3, [r4, #16]
 800e88a:	e6e8      	b.n	800e65e <_scanf_float+0x7e>
 800e88c:	1e6b      	subs	r3, r5, #1
 800e88e:	2b06      	cmp	r3, #6
 800e890:	d824      	bhi.n	800e8dc <_scanf_float+0x2fc>
 800e892:	2d02      	cmp	r5, #2
 800e894:	d836      	bhi.n	800e904 <_scanf_float+0x324>
 800e896:	9b01      	ldr	r3, [sp, #4]
 800e898:	429e      	cmp	r6, r3
 800e89a:	f67f aee4 	bls.w	800e666 <_scanf_float+0x86>
 800e89e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e8a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e8a6:	463a      	mov	r2, r7
 800e8a8:	4640      	mov	r0, r8
 800e8aa:	4798      	blx	r3
 800e8ac:	6923      	ldr	r3, [r4, #16]
 800e8ae:	3b01      	subs	r3, #1
 800e8b0:	6123      	str	r3, [r4, #16]
 800e8b2:	e7f0      	b.n	800e896 <_scanf_float+0x2b6>
 800e8b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e8b8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800e8bc:	463a      	mov	r2, r7
 800e8be:	4640      	mov	r0, r8
 800e8c0:	4798      	blx	r3
 800e8c2:	6923      	ldr	r3, [r4, #16]
 800e8c4:	3b01      	subs	r3, #1
 800e8c6:	6123      	str	r3, [r4, #16]
 800e8c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e8cc:	fa5f fa8a 	uxtb.w	sl, sl
 800e8d0:	f1ba 0f02 	cmp.w	sl, #2
 800e8d4:	d1ee      	bne.n	800e8b4 <_scanf_float+0x2d4>
 800e8d6:	3d03      	subs	r5, #3
 800e8d8:	b2ed      	uxtb	r5, r5
 800e8da:	1b76      	subs	r6, r6, r5
 800e8dc:	6823      	ldr	r3, [r4, #0]
 800e8de:	05da      	lsls	r2, r3, #23
 800e8e0:	d530      	bpl.n	800e944 <_scanf_float+0x364>
 800e8e2:	055b      	lsls	r3, r3, #21
 800e8e4:	d511      	bpl.n	800e90a <_scanf_float+0x32a>
 800e8e6:	9b01      	ldr	r3, [sp, #4]
 800e8e8:	429e      	cmp	r6, r3
 800e8ea:	f67f aebc 	bls.w	800e666 <_scanf_float+0x86>
 800e8ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e8f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e8f6:	463a      	mov	r2, r7
 800e8f8:	4640      	mov	r0, r8
 800e8fa:	4798      	blx	r3
 800e8fc:	6923      	ldr	r3, [r4, #16]
 800e8fe:	3b01      	subs	r3, #1
 800e900:	6123      	str	r3, [r4, #16]
 800e902:	e7f0      	b.n	800e8e6 <_scanf_float+0x306>
 800e904:	46aa      	mov	sl, r5
 800e906:	46b3      	mov	fp, r6
 800e908:	e7de      	b.n	800e8c8 <_scanf_float+0x2e8>
 800e90a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e90e:	6923      	ldr	r3, [r4, #16]
 800e910:	2965      	cmp	r1, #101	@ 0x65
 800e912:	f103 33ff 	add.w	r3, r3, #4294967295
 800e916:	f106 35ff 	add.w	r5, r6, #4294967295
 800e91a:	6123      	str	r3, [r4, #16]
 800e91c:	d00c      	beq.n	800e938 <_scanf_float+0x358>
 800e91e:	2945      	cmp	r1, #69	@ 0x45
 800e920:	d00a      	beq.n	800e938 <_scanf_float+0x358>
 800e922:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e926:	463a      	mov	r2, r7
 800e928:	4640      	mov	r0, r8
 800e92a:	4798      	blx	r3
 800e92c:	6923      	ldr	r3, [r4, #16]
 800e92e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e932:	3b01      	subs	r3, #1
 800e934:	1eb5      	subs	r5, r6, #2
 800e936:	6123      	str	r3, [r4, #16]
 800e938:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e93c:	463a      	mov	r2, r7
 800e93e:	4640      	mov	r0, r8
 800e940:	4798      	blx	r3
 800e942:	462e      	mov	r6, r5
 800e944:	6822      	ldr	r2, [r4, #0]
 800e946:	f012 0210 	ands.w	r2, r2, #16
 800e94a:	d001      	beq.n	800e950 <_scanf_float+0x370>
 800e94c:	2000      	movs	r0, #0
 800e94e:	e68b      	b.n	800e668 <_scanf_float+0x88>
 800e950:	7032      	strb	r2, [r6, #0]
 800e952:	6823      	ldr	r3, [r4, #0]
 800e954:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e958:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e95c:	d11a      	bne.n	800e994 <_scanf_float+0x3b4>
 800e95e:	9b02      	ldr	r3, [sp, #8]
 800e960:	454b      	cmp	r3, r9
 800e962:	eba3 0209 	sub.w	r2, r3, r9
 800e966:	d121      	bne.n	800e9ac <_scanf_float+0x3cc>
 800e968:	9901      	ldr	r1, [sp, #4]
 800e96a:	2200      	movs	r2, #0
 800e96c:	4640      	mov	r0, r8
 800e96e:	f002 fb2d 	bl	8010fcc <_strtod_r>
 800e972:	9b03      	ldr	r3, [sp, #12]
 800e974:	6821      	ldr	r1, [r4, #0]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	f011 0f02 	tst.w	r1, #2
 800e97c:	f103 0204 	add.w	r2, r3, #4
 800e980:	d01f      	beq.n	800e9c2 <_scanf_float+0x3e2>
 800e982:	9903      	ldr	r1, [sp, #12]
 800e984:	600a      	str	r2, [r1, #0]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	ed83 0b00 	vstr	d0, [r3]
 800e98c:	68e3      	ldr	r3, [r4, #12]
 800e98e:	3301      	adds	r3, #1
 800e990:	60e3      	str	r3, [r4, #12]
 800e992:	e7db      	b.n	800e94c <_scanf_float+0x36c>
 800e994:	9b04      	ldr	r3, [sp, #16]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d0e6      	beq.n	800e968 <_scanf_float+0x388>
 800e99a:	9905      	ldr	r1, [sp, #20]
 800e99c:	230a      	movs	r3, #10
 800e99e:	3101      	adds	r1, #1
 800e9a0:	4640      	mov	r0, r8
 800e9a2:	f002 fb93 	bl	80110cc <_strtol_r>
 800e9a6:	9b04      	ldr	r3, [sp, #16]
 800e9a8:	9e05      	ldr	r6, [sp, #20]
 800e9aa:	1ac2      	subs	r2, r0, r3
 800e9ac:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e9b0:	429e      	cmp	r6, r3
 800e9b2:	bf28      	it	cs
 800e9b4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e9b8:	490d      	ldr	r1, [pc, #52]	@ (800e9f0 <_scanf_float+0x410>)
 800e9ba:	4630      	mov	r0, r6
 800e9bc:	f000 f8de 	bl	800eb7c <siprintf>
 800e9c0:	e7d2      	b.n	800e968 <_scanf_float+0x388>
 800e9c2:	f011 0f04 	tst.w	r1, #4
 800e9c6:	9903      	ldr	r1, [sp, #12]
 800e9c8:	600a      	str	r2, [r1, #0]
 800e9ca:	d1dc      	bne.n	800e986 <_scanf_float+0x3a6>
 800e9cc:	eeb4 0b40 	vcmp.f64	d0, d0
 800e9d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9d4:	681d      	ldr	r5, [r3, #0]
 800e9d6:	d705      	bvc.n	800e9e4 <_scanf_float+0x404>
 800e9d8:	4806      	ldr	r0, [pc, #24]	@ (800e9f4 <_scanf_float+0x414>)
 800e9da:	f000 f9b3 	bl	800ed44 <nanf>
 800e9de:	ed85 0a00 	vstr	s0, [r5]
 800e9e2:	e7d3      	b.n	800e98c <_scanf_float+0x3ac>
 800e9e4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800e9e8:	e7f9      	b.n	800e9de <_scanf_float+0x3fe>
 800e9ea:	f04f 0900 	mov.w	r9, #0
 800e9ee:	e630      	b.n	800e652 <_scanf_float+0x72>
 800e9f0:	0801298c 	.word	0x0801298c
 800e9f4:	08012d25 	.word	0x08012d25

0800e9f8 <std>:
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	b510      	push	{r4, lr}
 800e9fc:	4604      	mov	r4, r0
 800e9fe:	e9c0 3300 	strd	r3, r3, [r0]
 800ea02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ea06:	6083      	str	r3, [r0, #8]
 800ea08:	8181      	strh	r1, [r0, #12]
 800ea0a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ea0c:	81c2      	strh	r2, [r0, #14]
 800ea0e:	6183      	str	r3, [r0, #24]
 800ea10:	4619      	mov	r1, r3
 800ea12:	2208      	movs	r2, #8
 800ea14:	305c      	adds	r0, #92	@ 0x5c
 800ea16:	f000 f914 	bl	800ec42 <memset>
 800ea1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ea50 <std+0x58>)
 800ea1c:	6263      	str	r3, [r4, #36]	@ 0x24
 800ea1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ea54 <std+0x5c>)
 800ea20:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ea22:	4b0d      	ldr	r3, [pc, #52]	@ (800ea58 <std+0x60>)
 800ea24:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ea26:	4b0d      	ldr	r3, [pc, #52]	@ (800ea5c <std+0x64>)
 800ea28:	6323      	str	r3, [r4, #48]	@ 0x30
 800ea2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ea60 <std+0x68>)
 800ea2c:	6224      	str	r4, [r4, #32]
 800ea2e:	429c      	cmp	r4, r3
 800ea30:	d006      	beq.n	800ea40 <std+0x48>
 800ea32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ea36:	4294      	cmp	r4, r2
 800ea38:	d002      	beq.n	800ea40 <std+0x48>
 800ea3a:	33d0      	adds	r3, #208	@ 0xd0
 800ea3c:	429c      	cmp	r4, r3
 800ea3e:	d105      	bne.n	800ea4c <std+0x54>
 800ea40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ea44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea48:	f000 b978 	b.w	800ed3c <__retarget_lock_init_recursive>
 800ea4c:	bd10      	pop	{r4, pc}
 800ea4e:	bf00      	nop
 800ea50:	0800ebbd 	.word	0x0800ebbd
 800ea54:	0800ebdf 	.word	0x0800ebdf
 800ea58:	0800ec17 	.word	0x0800ec17
 800ea5c:	0800ec3b 	.word	0x0800ec3b
 800ea60:	24000434 	.word	0x24000434

0800ea64 <stdio_exit_handler>:
 800ea64:	4a02      	ldr	r2, [pc, #8]	@ (800ea70 <stdio_exit_handler+0xc>)
 800ea66:	4903      	ldr	r1, [pc, #12]	@ (800ea74 <stdio_exit_handler+0x10>)
 800ea68:	4803      	ldr	r0, [pc, #12]	@ (800ea78 <stdio_exit_handler+0x14>)
 800ea6a:	f000 b869 	b.w	800eb40 <_fwalk_sglue>
 800ea6e:	bf00      	nop
 800ea70:	24000010 	.word	0x24000010
 800ea74:	08011489 	.word	0x08011489
 800ea78:	24000020 	.word	0x24000020

0800ea7c <cleanup_stdio>:
 800ea7c:	6841      	ldr	r1, [r0, #4]
 800ea7e:	4b0c      	ldr	r3, [pc, #48]	@ (800eab0 <cleanup_stdio+0x34>)
 800ea80:	4299      	cmp	r1, r3
 800ea82:	b510      	push	{r4, lr}
 800ea84:	4604      	mov	r4, r0
 800ea86:	d001      	beq.n	800ea8c <cleanup_stdio+0x10>
 800ea88:	f002 fcfe 	bl	8011488 <_fflush_r>
 800ea8c:	68a1      	ldr	r1, [r4, #8]
 800ea8e:	4b09      	ldr	r3, [pc, #36]	@ (800eab4 <cleanup_stdio+0x38>)
 800ea90:	4299      	cmp	r1, r3
 800ea92:	d002      	beq.n	800ea9a <cleanup_stdio+0x1e>
 800ea94:	4620      	mov	r0, r4
 800ea96:	f002 fcf7 	bl	8011488 <_fflush_r>
 800ea9a:	68e1      	ldr	r1, [r4, #12]
 800ea9c:	4b06      	ldr	r3, [pc, #24]	@ (800eab8 <cleanup_stdio+0x3c>)
 800ea9e:	4299      	cmp	r1, r3
 800eaa0:	d004      	beq.n	800eaac <cleanup_stdio+0x30>
 800eaa2:	4620      	mov	r0, r4
 800eaa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eaa8:	f002 bcee 	b.w	8011488 <_fflush_r>
 800eaac:	bd10      	pop	{r4, pc}
 800eaae:	bf00      	nop
 800eab0:	24000434 	.word	0x24000434
 800eab4:	2400049c 	.word	0x2400049c
 800eab8:	24000504 	.word	0x24000504

0800eabc <global_stdio_init.part.0>:
 800eabc:	b510      	push	{r4, lr}
 800eabe:	4b0b      	ldr	r3, [pc, #44]	@ (800eaec <global_stdio_init.part.0+0x30>)
 800eac0:	4c0b      	ldr	r4, [pc, #44]	@ (800eaf0 <global_stdio_init.part.0+0x34>)
 800eac2:	4a0c      	ldr	r2, [pc, #48]	@ (800eaf4 <global_stdio_init.part.0+0x38>)
 800eac4:	601a      	str	r2, [r3, #0]
 800eac6:	4620      	mov	r0, r4
 800eac8:	2200      	movs	r2, #0
 800eaca:	2104      	movs	r1, #4
 800eacc:	f7ff ff94 	bl	800e9f8 <std>
 800ead0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ead4:	2201      	movs	r2, #1
 800ead6:	2109      	movs	r1, #9
 800ead8:	f7ff ff8e 	bl	800e9f8 <std>
 800eadc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800eae0:	2202      	movs	r2, #2
 800eae2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eae6:	2112      	movs	r1, #18
 800eae8:	f7ff bf86 	b.w	800e9f8 <std>
 800eaec:	2400056c 	.word	0x2400056c
 800eaf0:	24000434 	.word	0x24000434
 800eaf4:	0800ea65 	.word	0x0800ea65

0800eaf8 <__sfp_lock_acquire>:
 800eaf8:	4801      	ldr	r0, [pc, #4]	@ (800eb00 <__sfp_lock_acquire+0x8>)
 800eafa:	f000 b920 	b.w	800ed3e <__retarget_lock_acquire_recursive>
 800eafe:	bf00      	nop
 800eb00:	24000575 	.word	0x24000575

0800eb04 <__sfp_lock_release>:
 800eb04:	4801      	ldr	r0, [pc, #4]	@ (800eb0c <__sfp_lock_release+0x8>)
 800eb06:	f000 b91b 	b.w	800ed40 <__retarget_lock_release_recursive>
 800eb0a:	bf00      	nop
 800eb0c:	24000575 	.word	0x24000575

0800eb10 <__sinit>:
 800eb10:	b510      	push	{r4, lr}
 800eb12:	4604      	mov	r4, r0
 800eb14:	f7ff fff0 	bl	800eaf8 <__sfp_lock_acquire>
 800eb18:	6a23      	ldr	r3, [r4, #32]
 800eb1a:	b11b      	cbz	r3, 800eb24 <__sinit+0x14>
 800eb1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb20:	f7ff bff0 	b.w	800eb04 <__sfp_lock_release>
 800eb24:	4b04      	ldr	r3, [pc, #16]	@ (800eb38 <__sinit+0x28>)
 800eb26:	6223      	str	r3, [r4, #32]
 800eb28:	4b04      	ldr	r3, [pc, #16]	@ (800eb3c <__sinit+0x2c>)
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d1f5      	bne.n	800eb1c <__sinit+0xc>
 800eb30:	f7ff ffc4 	bl	800eabc <global_stdio_init.part.0>
 800eb34:	e7f2      	b.n	800eb1c <__sinit+0xc>
 800eb36:	bf00      	nop
 800eb38:	0800ea7d 	.word	0x0800ea7d
 800eb3c:	2400056c 	.word	0x2400056c

0800eb40 <_fwalk_sglue>:
 800eb40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb44:	4607      	mov	r7, r0
 800eb46:	4688      	mov	r8, r1
 800eb48:	4614      	mov	r4, r2
 800eb4a:	2600      	movs	r6, #0
 800eb4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eb50:	f1b9 0901 	subs.w	r9, r9, #1
 800eb54:	d505      	bpl.n	800eb62 <_fwalk_sglue+0x22>
 800eb56:	6824      	ldr	r4, [r4, #0]
 800eb58:	2c00      	cmp	r4, #0
 800eb5a:	d1f7      	bne.n	800eb4c <_fwalk_sglue+0xc>
 800eb5c:	4630      	mov	r0, r6
 800eb5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb62:	89ab      	ldrh	r3, [r5, #12]
 800eb64:	2b01      	cmp	r3, #1
 800eb66:	d907      	bls.n	800eb78 <_fwalk_sglue+0x38>
 800eb68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eb6c:	3301      	adds	r3, #1
 800eb6e:	d003      	beq.n	800eb78 <_fwalk_sglue+0x38>
 800eb70:	4629      	mov	r1, r5
 800eb72:	4638      	mov	r0, r7
 800eb74:	47c0      	blx	r8
 800eb76:	4306      	orrs	r6, r0
 800eb78:	3568      	adds	r5, #104	@ 0x68
 800eb7a:	e7e9      	b.n	800eb50 <_fwalk_sglue+0x10>

0800eb7c <siprintf>:
 800eb7c:	b40e      	push	{r1, r2, r3}
 800eb7e:	b500      	push	{lr}
 800eb80:	b09c      	sub	sp, #112	@ 0x70
 800eb82:	ab1d      	add	r3, sp, #116	@ 0x74
 800eb84:	9002      	str	r0, [sp, #8]
 800eb86:	9006      	str	r0, [sp, #24]
 800eb88:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800eb8c:	4809      	ldr	r0, [pc, #36]	@ (800ebb4 <siprintf+0x38>)
 800eb8e:	9107      	str	r1, [sp, #28]
 800eb90:	9104      	str	r1, [sp, #16]
 800eb92:	4909      	ldr	r1, [pc, #36]	@ (800ebb8 <siprintf+0x3c>)
 800eb94:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb98:	9105      	str	r1, [sp, #20]
 800eb9a:	6800      	ldr	r0, [r0, #0]
 800eb9c:	9301      	str	r3, [sp, #4]
 800eb9e:	a902      	add	r1, sp, #8
 800eba0:	f002 faf2 	bl	8011188 <_svfiprintf_r>
 800eba4:	9b02      	ldr	r3, [sp, #8]
 800eba6:	2200      	movs	r2, #0
 800eba8:	701a      	strb	r2, [r3, #0]
 800ebaa:	b01c      	add	sp, #112	@ 0x70
 800ebac:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebb0:	b003      	add	sp, #12
 800ebb2:	4770      	bx	lr
 800ebb4:	2400001c 	.word	0x2400001c
 800ebb8:	ffff0208 	.word	0xffff0208

0800ebbc <__sread>:
 800ebbc:	b510      	push	{r4, lr}
 800ebbe:	460c      	mov	r4, r1
 800ebc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebc4:	f000 f86c 	bl	800eca0 <_read_r>
 800ebc8:	2800      	cmp	r0, #0
 800ebca:	bfab      	itete	ge
 800ebcc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ebce:	89a3      	ldrhlt	r3, [r4, #12]
 800ebd0:	181b      	addge	r3, r3, r0
 800ebd2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ebd6:	bfac      	ite	ge
 800ebd8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ebda:	81a3      	strhlt	r3, [r4, #12]
 800ebdc:	bd10      	pop	{r4, pc}

0800ebde <__swrite>:
 800ebde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebe2:	461f      	mov	r7, r3
 800ebe4:	898b      	ldrh	r3, [r1, #12]
 800ebe6:	05db      	lsls	r3, r3, #23
 800ebe8:	4605      	mov	r5, r0
 800ebea:	460c      	mov	r4, r1
 800ebec:	4616      	mov	r6, r2
 800ebee:	d505      	bpl.n	800ebfc <__swrite+0x1e>
 800ebf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebf4:	2302      	movs	r3, #2
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	f000 f840 	bl	800ec7c <_lseek_r>
 800ebfc:	89a3      	ldrh	r3, [r4, #12]
 800ebfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ec06:	81a3      	strh	r3, [r4, #12]
 800ec08:	4632      	mov	r2, r6
 800ec0a:	463b      	mov	r3, r7
 800ec0c:	4628      	mov	r0, r5
 800ec0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec12:	f000 b857 	b.w	800ecc4 <_write_r>

0800ec16 <__sseek>:
 800ec16:	b510      	push	{r4, lr}
 800ec18:	460c      	mov	r4, r1
 800ec1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec1e:	f000 f82d 	bl	800ec7c <_lseek_r>
 800ec22:	1c43      	adds	r3, r0, #1
 800ec24:	89a3      	ldrh	r3, [r4, #12]
 800ec26:	bf15      	itete	ne
 800ec28:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ec2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ec2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ec32:	81a3      	strheq	r3, [r4, #12]
 800ec34:	bf18      	it	ne
 800ec36:	81a3      	strhne	r3, [r4, #12]
 800ec38:	bd10      	pop	{r4, pc}

0800ec3a <__sclose>:
 800ec3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec3e:	f000 b80d 	b.w	800ec5c <_close_r>

0800ec42 <memset>:
 800ec42:	4402      	add	r2, r0
 800ec44:	4603      	mov	r3, r0
 800ec46:	4293      	cmp	r3, r2
 800ec48:	d100      	bne.n	800ec4c <memset+0xa>
 800ec4a:	4770      	bx	lr
 800ec4c:	f803 1b01 	strb.w	r1, [r3], #1
 800ec50:	e7f9      	b.n	800ec46 <memset+0x4>
	...

0800ec54 <_localeconv_r>:
 800ec54:	4800      	ldr	r0, [pc, #0]	@ (800ec58 <_localeconv_r+0x4>)
 800ec56:	4770      	bx	lr
 800ec58:	2400015c 	.word	0x2400015c

0800ec5c <_close_r>:
 800ec5c:	b538      	push	{r3, r4, r5, lr}
 800ec5e:	4d06      	ldr	r5, [pc, #24]	@ (800ec78 <_close_r+0x1c>)
 800ec60:	2300      	movs	r3, #0
 800ec62:	4604      	mov	r4, r0
 800ec64:	4608      	mov	r0, r1
 800ec66:	602b      	str	r3, [r5, #0]
 800ec68:	f7f2 fe6e 	bl	8001948 <_close>
 800ec6c:	1c43      	adds	r3, r0, #1
 800ec6e:	d102      	bne.n	800ec76 <_close_r+0x1a>
 800ec70:	682b      	ldr	r3, [r5, #0]
 800ec72:	b103      	cbz	r3, 800ec76 <_close_r+0x1a>
 800ec74:	6023      	str	r3, [r4, #0]
 800ec76:	bd38      	pop	{r3, r4, r5, pc}
 800ec78:	24000570 	.word	0x24000570

0800ec7c <_lseek_r>:
 800ec7c:	b538      	push	{r3, r4, r5, lr}
 800ec7e:	4d07      	ldr	r5, [pc, #28]	@ (800ec9c <_lseek_r+0x20>)
 800ec80:	4604      	mov	r4, r0
 800ec82:	4608      	mov	r0, r1
 800ec84:	4611      	mov	r1, r2
 800ec86:	2200      	movs	r2, #0
 800ec88:	602a      	str	r2, [r5, #0]
 800ec8a:	461a      	mov	r2, r3
 800ec8c:	f7f2 fe83 	bl	8001996 <_lseek>
 800ec90:	1c43      	adds	r3, r0, #1
 800ec92:	d102      	bne.n	800ec9a <_lseek_r+0x1e>
 800ec94:	682b      	ldr	r3, [r5, #0]
 800ec96:	b103      	cbz	r3, 800ec9a <_lseek_r+0x1e>
 800ec98:	6023      	str	r3, [r4, #0]
 800ec9a:	bd38      	pop	{r3, r4, r5, pc}
 800ec9c:	24000570 	.word	0x24000570

0800eca0 <_read_r>:
 800eca0:	b538      	push	{r3, r4, r5, lr}
 800eca2:	4d07      	ldr	r5, [pc, #28]	@ (800ecc0 <_read_r+0x20>)
 800eca4:	4604      	mov	r4, r0
 800eca6:	4608      	mov	r0, r1
 800eca8:	4611      	mov	r1, r2
 800ecaa:	2200      	movs	r2, #0
 800ecac:	602a      	str	r2, [r5, #0]
 800ecae:	461a      	mov	r2, r3
 800ecb0:	f7f2 fe11 	bl	80018d6 <_read>
 800ecb4:	1c43      	adds	r3, r0, #1
 800ecb6:	d102      	bne.n	800ecbe <_read_r+0x1e>
 800ecb8:	682b      	ldr	r3, [r5, #0]
 800ecba:	b103      	cbz	r3, 800ecbe <_read_r+0x1e>
 800ecbc:	6023      	str	r3, [r4, #0]
 800ecbe:	bd38      	pop	{r3, r4, r5, pc}
 800ecc0:	24000570 	.word	0x24000570

0800ecc4 <_write_r>:
 800ecc4:	b538      	push	{r3, r4, r5, lr}
 800ecc6:	4d07      	ldr	r5, [pc, #28]	@ (800ece4 <_write_r+0x20>)
 800ecc8:	4604      	mov	r4, r0
 800ecca:	4608      	mov	r0, r1
 800eccc:	4611      	mov	r1, r2
 800ecce:	2200      	movs	r2, #0
 800ecd0:	602a      	str	r2, [r5, #0]
 800ecd2:	461a      	mov	r2, r3
 800ecd4:	f7f2 fe1c 	bl	8001910 <_write>
 800ecd8:	1c43      	adds	r3, r0, #1
 800ecda:	d102      	bne.n	800ece2 <_write_r+0x1e>
 800ecdc:	682b      	ldr	r3, [r5, #0]
 800ecde:	b103      	cbz	r3, 800ece2 <_write_r+0x1e>
 800ece0:	6023      	str	r3, [r4, #0]
 800ece2:	bd38      	pop	{r3, r4, r5, pc}
 800ece4:	24000570 	.word	0x24000570

0800ece8 <__errno>:
 800ece8:	4b01      	ldr	r3, [pc, #4]	@ (800ecf0 <__errno+0x8>)
 800ecea:	6818      	ldr	r0, [r3, #0]
 800ecec:	4770      	bx	lr
 800ecee:	bf00      	nop
 800ecf0:	2400001c 	.word	0x2400001c

0800ecf4 <__libc_init_array>:
 800ecf4:	b570      	push	{r4, r5, r6, lr}
 800ecf6:	4d0d      	ldr	r5, [pc, #52]	@ (800ed2c <__libc_init_array+0x38>)
 800ecf8:	4c0d      	ldr	r4, [pc, #52]	@ (800ed30 <__libc_init_array+0x3c>)
 800ecfa:	1b64      	subs	r4, r4, r5
 800ecfc:	10a4      	asrs	r4, r4, #2
 800ecfe:	2600      	movs	r6, #0
 800ed00:	42a6      	cmp	r6, r4
 800ed02:	d109      	bne.n	800ed18 <__libc_init_array+0x24>
 800ed04:	4d0b      	ldr	r5, [pc, #44]	@ (800ed34 <__libc_init_array+0x40>)
 800ed06:	4c0c      	ldr	r4, [pc, #48]	@ (800ed38 <__libc_init_array+0x44>)
 800ed08:	f003 fdf2 	bl	80128f0 <_init>
 800ed0c:	1b64      	subs	r4, r4, r5
 800ed0e:	10a4      	asrs	r4, r4, #2
 800ed10:	2600      	movs	r6, #0
 800ed12:	42a6      	cmp	r6, r4
 800ed14:	d105      	bne.n	800ed22 <__libc_init_array+0x2e>
 800ed16:	bd70      	pop	{r4, r5, r6, pc}
 800ed18:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed1c:	4798      	blx	r3
 800ed1e:	3601      	adds	r6, #1
 800ed20:	e7ee      	b.n	800ed00 <__libc_init_array+0xc>
 800ed22:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed26:	4798      	blx	r3
 800ed28:	3601      	adds	r6, #1
 800ed2a:	e7f2      	b.n	800ed12 <__libc_init_array+0x1e>
 800ed2c:	08014648 	.word	0x08014648
 800ed30:	08014648 	.word	0x08014648
 800ed34:	08014648 	.word	0x08014648
 800ed38:	0801464c 	.word	0x0801464c

0800ed3c <__retarget_lock_init_recursive>:
 800ed3c:	4770      	bx	lr

0800ed3e <__retarget_lock_acquire_recursive>:
 800ed3e:	4770      	bx	lr

0800ed40 <__retarget_lock_release_recursive>:
 800ed40:	4770      	bx	lr
	...

0800ed44 <nanf>:
 800ed44:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ed4c <nanf+0x8>
 800ed48:	4770      	bx	lr
 800ed4a:	bf00      	nop
 800ed4c:	7fc00000 	.word	0x7fc00000

0800ed50 <quorem>:
 800ed50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed54:	6903      	ldr	r3, [r0, #16]
 800ed56:	690c      	ldr	r4, [r1, #16]
 800ed58:	42a3      	cmp	r3, r4
 800ed5a:	4607      	mov	r7, r0
 800ed5c:	db7e      	blt.n	800ee5c <quorem+0x10c>
 800ed5e:	3c01      	subs	r4, #1
 800ed60:	f101 0814 	add.w	r8, r1, #20
 800ed64:	00a3      	lsls	r3, r4, #2
 800ed66:	f100 0514 	add.w	r5, r0, #20
 800ed6a:	9300      	str	r3, [sp, #0]
 800ed6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ed70:	9301      	str	r3, [sp, #4]
 800ed72:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ed76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ed7a:	3301      	adds	r3, #1
 800ed7c:	429a      	cmp	r2, r3
 800ed7e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ed82:	fbb2 f6f3 	udiv	r6, r2, r3
 800ed86:	d32e      	bcc.n	800ede6 <quorem+0x96>
 800ed88:	f04f 0a00 	mov.w	sl, #0
 800ed8c:	46c4      	mov	ip, r8
 800ed8e:	46ae      	mov	lr, r5
 800ed90:	46d3      	mov	fp, sl
 800ed92:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ed96:	b298      	uxth	r0, r3
 800ed98:	fb06 a000 	mla	r0, r6, r0, sl
 800ed9c:	0c02      	lsrs	r2, r0, #16
 800ed9e:	0c1b      	lsrs	r3, r3, #16
 800eda0:	fb06 2303 	mla	r3, r6, r3, r2
 800eda4:	f8de 2000 	ldr.w	r2, [lr]
 800eda8:	b280      	uxth	r0, r0
 800edaa:	b292      	uxth	r2, r2
 800edac:	1a12      	subs	r2, r2, r0
 800edae:	445a      	add	r2, fp
 800edb0:	f8de 0000 	ldr.w	r0, [lr]
 800edb4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800edb8:	b29b      	uxth	r3, r3
 800edba:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800edbe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800edc2:	b292      	uxth	r2, r2
 800edc4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800edc8:	45e1      	cmp	r9, ip
 800edca:	f84e 2b04 	str.w	r2, [lr], #4
 800edce:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800edd2:	d2de      	bcs.n	800ed92 <quorem+0x42>
 800edd4:	9b00      	ldr	r3, [sp, #0]
 800edd6:	58eb      	ldr	r3, [r5, r3]
 800edd8:	b92b      	cbnz	r3, 800ede6 <quorem+0x96>
 800edda:	9b01      	ldr	r3, [sp, #4]
 800eddc:	3b04      	subs	r3, #4
 800edde:	429d      	cmp	r5, r3
 800ede0:	461a      	mov	r2, r3
 800ede2:	d32f      	bcc.n	800ee44 <quorem+0xf4>
 800ede4:	613c      	str	r4, [r7, #16]
 800ede6:	4638      	mov	r0, r7
 800ede8:	f001 f954 	bl	8010094 <__mcmp>
 800edec:	2800      	cmp	r0, #0
 800edee:	db25      	blt.n	800ee3c <quorem+0xec>
 800edf0:	4629      	mov	r1, r5
 800edf2:	2000      	movs	r0, #0
 800edf4:	f858 2b04 	ldr.w	r2, [r8], #4
 800edf8:	f8d1 c000 	ldr.w	ip, [r1]
 800edfc:	fa1f fe82 	uxth.w	lr, r2
 800ee00:	fa1f f38c 	uxth.w	r3, ip
 800ee04:	eba3 030e 	sub.w	r3, r3, lr
 800ee08:	4403      	add	r3, r0
 800ee0a:	0c12      	lsrs	r2, r2, #16
 800ee0c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ee10:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ee14:	b29b      	uxth	r3, r3
 800ee16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ee1a:	45c1      	cmp	r9, r8
 800ee1c:	f841 3b04 	str.w	r3, [r1], #4
 800ee20:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ee24:	d2e6      	bcs.n	800edf4 <quorem+0xa4>
 800ee26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ee2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ee2e:	b922      	cbnz	r2, 800ee3a <quorem+0xea>
 800ee30:	3b04      	subs	r3, #4
 800ee32:	429d      	cmp	r5, r3
 800ee34:	461a      	mov	r2, r3
 800ee36:	d30b      	bcc.n	800ee50 <quorem+0x100>
 800ee38:	613c      	str	r4, [r7, #16]
 800ee3a:	3601      	adds	r6, #1
 800ee3c:	4630      	mov	r0, r6
 800ee3e:	b003      	add	sp, #12
 800ee40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee44:	6812      	ldr	r2, [r2, #0]
 800ee46:	3b04      	subs	r3, #4
 800ee48:	2a00      	cmp	r2, #0
 800ee4a:	d1cb      	bne.n	800ede4 <quorem+0x94>
 800ee4c:	3c01      	subs	r4, #1
 800ee4e:	e7c6      	b.n	800edde <quorem+0x8e>
 800ee50:	6812      	ldr	r2, [r2, #0]
 800ee52:	3b04      	subs	r3, #4
 800ee54:	2a00      	cmp	r2, #0
 800ee56:	d1ef      	bne.n	800ee38 <quorem+0xe8>
 800ee58:	3c01      	subs	r4, #1
 800ee5a:	e7ea      	b.n	800ee32 <quorem+0xe2>
 800ee5c:	2000      	movs	r0, #0
 800ee5e:	e7ee      	b.n	800ee3e <quorem+0xee>

0800ee60 <_dtoa_r>:
 800ee60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee64:	ed2d 8b02 	vpush	{d8}
 800ee68:	69c7      	ldr	r7, [r0, #28]
 800ee6a:	b091      	sub	sp, #68	@ 0x44
 800ee6c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ee70:	ec55 4b10 	vmov	r4, r5, d0
 800ee74:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800ee76:	9107      	str	r1, [sp, #28]
 800ee78:	4681      	mov	r9, r0
 800ee7a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ee7c:	930d      	str	r3, [sp, #52]	@ 0x34
 800ee7e:	b97f      	cbnz	r7, 800eea0 <_dtoa_r+0x40>
 800ee80:	2010      	movs	r0, #16
 800ee82:	f000 fd8d 	bl	800f9a0 <malloc>
 800ee86:	4602      	mov	r2, r0
 800ee88:	f8c9 001c 	str.w	r0, [r9, #28]
 800ee8c:	b920      	cbnz	r0, 800ee98 <_dtoa_r+0x38>
 800ee8e:	4ba0      	ldr	r3, [pc, #640]	@ (800f110 <_dtoa_r+0x2b0>)
 800ee90:	21ef      	movs	r1, #239	@ 0xef
 800ee92:	48a0      	ldr	r0, [pc, #640]	@ (800f114 <_dtoa_r+0x2b4>)
 800ee94:	f002 fb74 	bl	8011580 <__assert_func>
 800ee98:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ee9c:	6007      	str	r7, [r0, #0]
 800ee9e:	60c7      	str	r7, [r0, #12]
 800eea0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800eea4:	6819      	ldr	r1, [r3, #0]
 800eea6:	b159      	cbz	r1, 800eec0 <_dtoa_r+0x60>
 800eea8:	685a      	ldr	r2, [r3, #4]
 800eeaa:	604a      	str	r2, [r1, #4]
 800eeac:	2301      	movs	r3, #1
 800eeae:	4093      	lsls	r3, r2
 800eeb0:	608b      	str	r3, [r1, #8]
 800eeb2:	4648      	mov	r0, r9
 800eeb4:	f000 fe6a 	bl	800fb8c <_Bfree>
 800eeb8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800eebc:	2200      	movs	r2, #0
 800eebe:	601a      	str	r2, [r3, #0]
 800eec0:	1e2b      	subs	r3, r5, #0
 800eec2:	bfbb      	ittet	lt
 800eec4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800eec8:	9303      	strlt	r3, [sp, #12]
 800eeca:	2300      	movge	r3, #0
 800eecc:	2201      	movlt	r2, #1
 800eece:	bfac      	ite	ge
 800eed0:	6033      	strge	r3, [r6, #0]
 800eed2:	6032      	strlt	r2, [r6, #0]
 800eed4:	4b90      	ldr	r3, [pc, #576]	@ (800f118 <_dtoa_r+0x2b8>)
 800eed6:	9e03      	ldr	r6, [sp, #12]
 800eed8:	43b3      	bics	r3, r6
 800eeda:	d110      	bne.n	800eefe <_dtoa_r+0x9e>
 800eedc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800eede:	f242 730f 	movw	r3, #9999	@ 0x270f
 800eee2:	6013      	str	r3, [r2, #0]
 800eee4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800eee8:	4323      	orrs	r3, r4
 800eeea:	f000 84de 	beq.w	800f8aa <_dtoa_r+0xa4a>
 800eeee:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800eef0:	4f8a      	ldr	r7, [pc, #552]	@ (800f11c <_dtoa_r+0x2bc>)
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	f000 84e0 	beq.w	800f8b8 <_dtoa_r+0xa58>
 800eef8:	1cfb      	adds	r3, r7, #3
 800eefa:	f000 bcdb 	b.w	800f8b4 <_dtoa_r+0xa54>
 800eefe:	ed9d 8b02 	vldr	d8, [sp, #8]
 800ef02:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ef06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef0a:	d10a      	bne.n	800ef22 <_dtoa_r+0xc2>
 800ef0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ef0e:	2301      	movs	r3, #1
 800ef10:	6013      	str	r3, [r2, #0]
 800ef12:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ef14:	b113      	cbz	r3, 800ef1c <_dtoa_r+0xbc>
 800ef16:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800ef18:	4b81      	ldr	r3, [pc, #516]	@ (800f120 <_dtoa_r+0x2c0>)
 800ef1a:	6013      	str	r3, [r2, #0]
 800ef1c:	4f81      	ldr	r7, [pc, #516]	@ (800f124 <_dtoa_r+0x2c4>)
 800ef1e:	f000 bccb 	b.w	800f8b8 <_dtoa_r+0xa58>
 800ef22:	aa0e      	add	r2, sp, #56	@ 0x38
 800ef24:	a90f      	add	r1, sp, #60	@ 0x3c
 800ef26:	4648      	mov	r0, r9
 800ef28:	eeb0 0b48 	vmov.f64	d0, d8
 800ef2c:	f001 f9d2 	bl	80102d4 <__d2b>
 800ef30:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800ef34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ef36:	9001      	str	r0, [sp, #4]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d045      	beq.n	800efc8 <_dtoa_r+0x168>
 800ef3c:	eeb0 7b48 	vmov.f64	d7, d8
 800ef40:	ee18 1a90 	vmov	r1, s17
 800ef44:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ef48:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800ef4c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800ef50:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800ef54:	2500      	movs	r5, #0
 800ef56:	ee07 1a90 	vmov	s15, r1
 800ef5a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800ef5e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f0f8 <_dtoa_r+0x298>
 800ef62:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ef66:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800f100 <_dtoa_r+0x2a0>
 800ef6a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ef6e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f108 <_dtoa_r+0x2a8>
 800ef72:	ee07 3a90 	vmov	s15, r3
 800ef76:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800ef7a:	eeb0 7b46 	vmov.f64	d7, d6
 800ef7e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800ef82:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800ef86:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ef8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef8e:	ee16 8a90 	vmov	r8, s13
 800ef92:	d508      	bpl.n	800efa6 <_dtoa_r+0x146>
 800ef94:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ef98:	eeb4 6b47 	vcmp.f64	d6, d7
 800ef9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efa0:	bf18      	it	ne
 800efa2:	f108 38ff 	addne.w	r8, r8, #4294967295
 800efa6:	f1b8 0f16 	cmp.w	r8, #22
 800efaa:	d82b      	bhi.n	800f004 <_dtoa_r+0x1a4>
 800efac:	495e      	ldr	r1, [pc, #376]	@ (800f128 <_dtoa_r+0x2c8>)
 800efae:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800efb2:	ed91 7b00 	vldr	d7, [r1]
 800efb6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800efba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efbe:	d501      	bpl.n	800efc4 <_dtoa_r+0x164>
 800efc0:	f108 38ff 	add.w	r8, r8, #4294967295
 800efc4:	2100      	movs	r1, #0
 800efc6:	e01e      	b.n	800f006 <_dtoa_r+0x1a6>
 800efc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800efca:	4413      	add	r3, r2
 800efcc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800efd0:	2920      	cmp	r1, #32
 800efd2:	bfc1      	itttt	gt
 800efd4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800efd8:	408e      	lslgt	r6, r1
 800efda:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800efde:	fa24 f101 	lsrgt.w	r1, r4, r1
 800efe2:	bfd6      	itet	le
 800efe4:	f1c1 0120 	rsble	r1, r1, #32
 800efe8:	4331      	orrgt	r1, r6
 800efea:	fa04 f101 	lslle.w	r1, r4, r1
 800efee:	ee07 1a90 	vmov	s15, r1
 800eff2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800eff6:	3b01      	subs	r3, #1
 800eff8:	ee17 1a90 	vmov	r1, s15
 800effc:	2501      	movs	r5, #1
 800effe:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800f002:	e7a8      	b.n	800ef56 <_dtoa_r+0xf6>
 800f004:	2101      	movs	r1, #1
 800f006:	1ad2      	subs	r2, r2, r3
 800f008:	1e53      	subs	r3, r2, #1
 800f00a:	9306      	str	r3, [sp, #24]
 800f00c:	bf45      	ittet	mi
 800f00e:	f1c2 0301 	rsbmi	r3, r2, #1
 800f012:	9305      	strmi	r3, [sp, #20]
 800f014:	2300      	movpl	r3, #0
 800f016:	2300      	movmi	r3, #0
 800f018:	bf4c      	ite	mi
 800f01a:	9306      	strmi	r3, [sp, #24]
 800f01c:	9305      	strpl	r3, [sp, #20]
 800f01e:	f1b8 0f00 	cmp.w	r8, #0
 800f022:	910c      	str	r1, [sp, #48]	@ 0x30
 800f024:	db18      	blt.n	800f058 <_dtoa_r+0x1f8>
 800f026:	9b06      	ldr	r3, [sp, #24]
 800f028:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800f02c:	4443      	add	r3, r8
 800f02e:	9306      	str	r3, [sp, #24]
 800f030:	2300      	movs	r3, #0
 800f032:	9a07      	ldr	r2, [sp, #28]
 800f034:	2a09      	cmp	r2, #9
 800f036:	d849      	bhi.n	800f0cc <_dtoa_r+0x26c>
 800f038:	2a05      	cmp	r2, #5
 800f03a:	bfc4      	itt	gt
 800f03c:	3a04      	subgt	r2, #4
 800f03e:	9207      	strgt	r2, [sp, #28]
 800f040:	9a07      	ldr	r2, [sp, #28]
 800f042:	f1a2 0202 	sub.w	r2, r2, #2
 800f046:	bfcc      	ite	gt
 800f048:	2400      	movgt	r4, #0
 800f04a:	2401      	movle	r4, #1
 800f04c:	2a03      	cmp	r2, #3
 800f04e:	d848      	bhi.n	800f0e2 <_dtoa_r+0x282>
 800f050:	e8df f002 	tbb	[pc, r2]
 800f054:	3a2c2e0b 	.word	0x3a2c2e0b
 800f058:	9b05      	ldr	r3, [sp, #20]
 800f05a:	2200      	movs	r2, #0
 800f05c:	eba3 0308 	sub.w	r3, r3, r8
 800f060:	9305      	str	r3, [sp, #20]
 800f062:	920a      	str	r2, [sp, #40]	@ 0x28
 800f064:	f1c8 0300 	rsb	r3, r8, #0
 800f068:	e7e3      	b.n	800f032 <_dtoa_r+0x1d2>
 800f06a:	2200      	movs	r2, #0
 800f06c:	9208      	str	r2, [sp, #32]
 800f06e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f070:	2a00      	cmp	r2, #0
 800f072:	dc39      	bgt.n	800f0e8 <_dtoa_r+0x288>
 800f074:	f04f 0b01 	mov.w	fp, #1
 800f078:	46da      	mov	sl, fp
 800f07a:	465a      	mov	r2, fp
 800f07c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800f080:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800f084:	2100      	movs	r1, #0
 800f086:	2004      	movs	r0, #4
 800f088:	f100 0614 	add.w	r6, r0, #20
 800f08c:	4296      	cmp	r6, r2
 800f08e:	d930      	bls.n	800f0f2 <_dtoa_r+0x292>
 800f090:	6079      	str	r1, [r7, #4]
 800f092:	4648      	mov	r0, r9
 800f094:	9304      	str	r3, [sp, #16]
 800f096:	f000 fd39 	bl	800fb0c <_Balloc>
 800f09a:	9b04      	ldr	r3, [sp, #16]
 800f09c:	4607      	mov	r7, r0
 800f09e:	2800      	cmp	r0, #0
 800f0a0:	d146      	bne.n	800f130 <_dtoa_r+0x2d0>
 800f0a2:	4b22      	ldr	r3, [pc, #136]	@ (800f12c <_dtoa_r+0x2cc>)
 800f0a4:	4602      	mov	r2, r0
 800f0a6:	f240 11af 	movw	r1, #431	@ 0x1af
 800f0aa:	e6f2      	b.n	800ee92 <_dtoa_r+0x32>
 800f0ac:	2201      	movs	r2, #1
 800f0ae:	e7dd      	b.n	800f06c <_dtoa_r+0x20c>
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	9208      	str	r2, [sp, #32]
 800f0b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f0b6:	eb08 0b02 	add.w	fp, r8, r2
 800f0ba:	f10b 0a01 	add.w	sl, fp, #1
 800f0be:	4652      	mov	r2, sl
 800f0c0:	2a01      	cmp	r2, #1
 800f0c2:	bfb8      	it	lt
 800f0c4:	2201      	movlt	r2, #1
 800f0c6:	e7db      	b.n	800f080 <_dtoa_r+0x220>
 800f0c8:	2201      	movs	r2, #1
 800f0ca:	e7f2      	b.n	800f0b2 <_dtoa_r+0x252>
 800f0cc:	2401      	movs	r4, #1
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800f0d4:	f04f 3bff 	mov.w	fp, #4294967295
 800f0d8:	2100      	movs	r1, #0
 800f0da:	46da      	mov	sl, fp
 800f0dc:	2212      	movs	r2, #18
 800f0de:	9109      	str	r1, [sp, #36]	@ 0x24
 800f0e0:	e7ce      	b.n	800f080 <_dtoa_r+0x220>
 800f0e2:	2201      	movs	r2, #1
 800f0e4:	9208      	str	r2, [sp, #32]
 800f0e6:	e7f5      	b.n	800f0d4 <_dtoa_r+0x274>
 800f0e8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800f0ec:	46da      	mov	sl, fp
 800f0ee:	465a      	mov	r2, fp
 800f0f0:	e7c6      	b.n	800f080 <_dtoa_r+0x220>
 800f0f2:	3101      	adds	r1, #1
 800f0f4:	0040      	lsls	r0, r0, #1
 800f0f6:	e7c7      	b.n	800f088 <_dtoa_r+0x228>
 800f0f8:	636f4361 	.word	0x636f4361
 800f0fc:	3fd287a7 	.word	0x3fd287a7
 800f100:	8b60c8b3 	.word	0x8b60c8b3
 800f104:	3fc68a28 	.word	0x3fc68a28
 800f108:	509f79fb 	.word	0x509f79fb
 800f10c:	3fd34413 	.word	0x3fd34413
 800f110:	0801299e 	.word	0x0801299e
 800f114:	080129b5 	.word	0x080129b5
 800f118:	7ff00000 	.word	0x7ff00000
 800f11c:	0801299a 	.word	0x0801299a
 800f120:	08012969 	.word	0x08012969
 800f124:	08012968 	.word	0x08012968
 800f128:	08012ab0 	.word	0x08012ab0
 800f12c:	08012a0d 	.word	0x08012a0d
 800f130:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800f134:	f1ba 0f0e 	cmp.w	sl, #14
 800f138:	6010      	str	r0, [r2, #0]
 800f13a:	d86f      	bhi.n	800f21c <_dtoa_r+0x3bc>
 800f13c:	2c00      	cmp	r4, #0
 800f13e:	d06d      	beq.n	800f21c <_dtoa_r+0x3bc>
 800f140:	f1b8 0f00 	cmp.w	r8, #0
 800f144:	f340 80c2 	ble.w	800f2cc <_dtoa_r+0x46c>
 800f148:	4aca      	ldr	r2, [pc, #808]	@ (800f474 <_dtoa_r+0x614>)
 800f14a:	f008 010f 	and.w	r1, r8, #15
 800f14e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f152:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800f156:	ed92 7b00 	vldr	d7, [r2]
 800f15a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800f15e:	f000 80a9 	beq.w	800f2b4 <_dtoa_r+0x454>
 800f162:	4ac5      	ldr	r2, [pc, #788]	@ (800f478 <_dtoa_r+0x618>)
 800f164:	ed92 6b08 	vldr	d6, [r2, #32]
 800f168:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800f16c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f170:	f001 010f 	and.w	r1, r1, #15
 800f174:	2203      	movs	r2, #3
 800f176:	48c0      	ldr	r0, [pc, #768]	@ (800f478 <_dtoa_r+0x618>)
 800f178:	2900      	cmp	r1, #0
 800f17a:	f040 809d 	bne.w	800f2b8 <_dtoa_r+0x458>
 800f17e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f182:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f186:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f18a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f18c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f190:	2900      	cmp	r1, #0
 800f192:	f000 80c1 	beq.w	800f318 <_dtoa_r+0x4b8>
 800f196:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800f19a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f19e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1a2:	f140 80b9 	bpl.w	800f318 <_dtoa_r+0x4b8>
 800f1a6:	f1ba 0f00 	cmp.w	sl, #0
 800f1aa:	f000 80b5 	beq.w	800f318 <_dtoa_r+0x4b8>
 800f1ae:	f1bb 0f00 	cmp.w	fp, #0
 800f1b2:	dd31      	ble.n	800f218 <_dtoa_r+0x3b8>
 800f1b4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800f1b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f1bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f1c0:	f108 31ff 	add.w	r1, r8, #4294967295
 800f1c4:	9104      	str	r1, [sp, #16]
 800f1c6:	3201      	adds	r2, #1
 800f1c8:	465c      	mov	r4, fp
 800f1ca:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f1ce:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800f1d2:	ee07 2a90 	vmov	s15, r2
 800f1d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f1da:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f1de:	ee15 2a90 	vmov	r2, s11
 800f1e2:	ec51 0b15 	vmov	r0, r1, d5
 800f1e6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800f1ea:	2c00      	cmp	r4, #0
 800f1ec:	f040 8098 	bne.w	800f320 <_dtoa_r+0x4c0>
 800f1f0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f1f4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f1f8:	ec41 0b17 	vmov	d7, r0, r1
 800f1fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f204:	f300 8261 	bgt.w	800f6ca <_dtoa_r+0x86a>
 800f208:	eeb1 7b47 	vneg.f64	d7, d7
 800f20c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f214:	f100 80f5 	bmi.w	800f402 <_dtoa_r+0x5a2>
 800f218:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f21c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f21e:	2a00      	cmp	r2, #0
 800f220:	f2c0 812c 	blt.w	800f47c <_dtoa_r+0x61c>
 800f224:	f1b8 0f0e 	cmp.w	r8, #14
 800f228:	f300 8128 	bgt.w	800f47c <_dtoa_r+0x61c>
 800f22c:	4b91      	ldr	r3, [pc, #580]	@ (800f474 <_dtoa_r+0x614>)
 800f22e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f232:	ed93 6b00 	vldr	d6, [r3]
 800f236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f238:	2b00      	cmp	r3, #0
 800f23a:	da03      	bge.n	800f244 <_dtoa_r+0x3e4>
 800f23c:	f1ba 0f00 	cmp.w	sl, #0
 800f240:	f340 80d2 	ble.w	800f3e8 <_dtoa_r+0x588>
 800f244:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800f248:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f24c:	463e      	mov	r6, r7
 800f24e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f252:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f256:	ee15 3a10 	vmov	r3, s10
 800f25a:	3330      	adds	r3, #48	@ 0x30
 800f25c:	f806 3b01 	strb.w	r3, [r6], #1
 800f260:	1bf3      	subs	r3, r6, r7
 800f262:	459a      	cmp	sl, r3
 800f264:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f268:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f26c:	f040 80f8 	bne.w	800f460 <_dtoa_r+0x600>
 800f270:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f274:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f27c:	f300 80dd 	bgt.w	800f43a <_dtoa_r+0x5da>
 800f280:	eeb4 7b46 	vcmp.f64	d7, d6
 800f284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f288:	d104      	bne.n	800f294 <_dtoa_r+0x434>
 800f28a:	ee15 3a10 	vmov	r3, s10
 800f28e:	07db      	lsls	r3, r3, #31
 800f290:	f100 80d3 	bmi.w	800f43a <_dtoa_r+0x5da>
 800f294:	9901      	ldr	r1, [sp, #4]
 800f296:	4648      	mov	r0, r9
 800f298:	f000 fc78 	bl	800fb8c <_Bfree>
 800f29c:	2300      	movs	r3, #0
 800f29e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f2a0:	7033      	strb	r3, [r6, #0]
 800f2a2:	f108 0301 	add.w	r3, r8, #1
 800f2a6:	6013      	str	r3, [r2, #0]
 800f2a8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	f000 8304 	beq.w	800f8b8 <_dtoa_r+0xa58>
 800f2b0:	601e      	str	r6, [r3, #0]
 800f2b2:	e301      	b.n	800f8b8 <_dtoa_r+0xa58>
 800f2b4:	2202      	movs	r2, #2
 800f2b6:	e75e      	b.n	800f176 <_dtoa_r+0x316>
 800f2b8:	07cc      	lsls	r4, r1, #31
 800f2ba:	d504      	bpl.n	800f2c6 <_dtoa_r+0x466>
 800f2bc:	ed90 6b00 	vldr	d6, [r0]
 800f2c0:	3201      	adds	r2, #1
 800f2c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f2c6:	1049      	asrs	r1, r1, #1
 800f2c8:	3008      	adds	r0, #8
 800f2ca:	e755      	b.n	800f178 <_dtoa_r+0x318>
 800f2cc:	d022      	beq.n	800f314 <_dtoa_r+0x4b4>
 800f2ce:	f1c8 0100 	rsb	r1, r8, #0
 800f2d2:	4a68      	ldr	r2, [pc, #416]	@ (800f474 <_dtoa_r+0x614>)
 800f2d4:	f001 000f 	and.w	r0, r1, #15
 800f2d8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f2dc:	ed92 7b00 	vldr	d7, [r2]
 800f2e0:	ee28 7b07 	vmul.f64	d7, d8, d7
 800f2e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f2e8:	4863      	ldr	r0, [pc, #396]	@ (800f478 <_dtoa_r+0x618>)
 800f2ea:	1109      	asrs	r1, r1, #4
 800f2ec:	2400      	movs	r4, #0
 800f2ee:	2202      	movs	r2, #2
 800f2f0:	b929      	cbnz	r1, 800f2fe <_dtoa_r+0x49e>
 800f2f2:	2c00      	cmp	r4, #0
 800f2f4:	f43f af49 	beq.w	800f18a <_dtoa_r+0x32a>
 800f2f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f2fc:	e745      	b.n	800f18a <_dtoa_r+0x32a>
 800f2fe:	07ce      	lsls	r6, r1, #31
 800f300:	d505      	bpl.n	800f30e <_dtoa_r+0x4ae>
 800f302:	ed90 6b00 	vldr	d6, [r0]
 800f306:	3201      	adds	r2, #1
 800f308:	2401      	movs	r4, #1
 800f30a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f30e:	1049      	asrs	r1, r1, #1
 800f310:	3008      	adds	r0, #8
 800f312:	e7ed      	b.n	800f2f0 <_dtoa_r+0x490>
 800f314:	2202      	movs	r2, #2
 800f316:	e738      	b.n	800f18a <_dtoa_r+0x32a>
 800f318:	f8cd 8010 	str.w	r8, [sp, #16]
 800f31c:	4654      	mov	r4, sl
 800f31e:	e754      	b.n	800f1ca <_dtoa_r+0x36a>
 800f320:	4a54      	ldr	r2, [pc, #336]	@ (800f474 <_dtoa_r+0x614>)
 800f322:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800f326:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f32a:	9a08      	ldr	r2, [sp, #32]
 800f32c:	ec41 0b17 	vmov	d7, r0, r1
 800f330:	443c      	add	r4, r7
 800f332:	b34a      	cbz	r2, 800f388 <_dtoa_r+0x528>
 800f334:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800f338:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800f33c:	463e      	mov	r6, r7
 800f33e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f342:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f346:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f34a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f34e:	ee14 2a90 	vmov	r2, s9
 800f352:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f356:	3230      	adds	r2, #48	@ 0x30
 800f358:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f35c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f364:	f806 2b01 	strb.w	r2, [r6], #1
 800f368:	d438      	bmi.n	800f3dc <_dtoa_r+0x57c>
 800f36a:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f36e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f376:	d462      	bmi.n	800f43e <_dtoa_r+0x5de>
 800f378:	42a6      	cmp	r6, r4
 800f37a:	f43f af4d 	beq.w	800f218 <_dtoa_r+0x3b8>
 800f37e:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f382:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f386:	e7e0      	b.n	800f34a <_dtoa_r+0x4ea>
 800f388:	4621      	mov	r1, r4
 800f38a:	463e      	mov	r6, r7
 800f38c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f390:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f394:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f398:	ee14 2a90 	vmov	r2, s9
 800f39c:	3230      	adds	r2, #48	@ 0x30
 800f39e:	f806 2b01 	strb.w	r2, [r6], #1
 800f3a2:	42a6      	cmp	r6, r4
 800f3a4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f3a8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f3ac:	d119      	bne.n	800f3e2 <_dtoa_r+0x582>
 800f3ae:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800f3b2:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f3b6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f3ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3be:	dc3e      	bgt.n	800f43e <_dtoa_r+0x5de>
 800f3c0:	ee35 5b47 	vsub.f64	d5, d5, d7
 800f3c4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800f3c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3cc:	f57f af24 	bpl.w	800f218 <_dtoa_r+0x3b8>
 800f3d0:	460e      	mov	r6, r1
 800f3d2:	3901      	subs	r1, #1
 800f3d4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f3d8:	2b30      	cmp	r3, #48	@ 0x30
 800f3da:	d0f9      	beq.n	800f3d0 <_dtoa_r+0x570>
 800f3dc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f3e0:	e758      	b.n	800f294 <_dtoa_r+0x434>
 800f3e2:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f3e6:	e7d5      	b.n	800f394 <_dtoa_r+0x534>
 800f3e8:	d10b      	bne.n	800f402 <_dtoa_r+0x5a2>
 800f3ea:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f3ee:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f3f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f3f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f3fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3fe:	f2c0 8161 	blt.w	800f6c4 <_dtoa_r+0x864>
 800f402:	2400      	movs	r4, #0
 800f404:	4625      	mov	r5, r4
 800f406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f408:	43db      	mvns	r3, r3
 800f40a:	9304      	str	r3, [sp, #16]
 800f40c:	463e      	mov	r6, r7
 800f40e:	f04f 0800 	mov.w	r8, #0
 800f412:	4621      	mov	r1, r4
 800f414:	4648      	mov	r0, r9
 800f416:	f000 fbb9 	bl	800fb8c <_Bfree>
 800f41a:	2d00      	cmp	r5, #0
 800f41c:	d0de      	beq.n	800f3dc <_dtoa_r+0x57c>
 800f41e:	f1b8 0f00 	cmp.w	r8, #0
 800f422:	d005      	beq.n	800f430 <_dtoa_r+0x5d0>
 800f424:	45a8      	cmp	r8, r5
 800f426:	d003      	beq.n	800f430 <_dtoa_r+0x5d0>
 800f428:	4641      	mov	r1, r8
 800f42a:	4648      	mov	r0, r9
 800f42c:	f000 fbae 	bl	800fb8c <_Bfree>
 800f430:	4629      	mov	r1, r5
 800f432:	4648      	mov	r0, r9
 800f434:	f000 fbaa 	bl	800fb8c <_Bfree>
 800f438:	e7d0      	b.n	800f3dc <_dtoa_r+0x57c>
 800f43a:	f8cd 8010 	str.w	r8, [sp, #16]
 800f43e:	4633      	mov	r3, r6
 800f440:	461e      	mov	r6, r3
 800f442:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f446:	2a39      	cmp	r2, #57	@ 0x39
 800f448:	d106      	bne.n	800f458 <_dtoa_r+0x5f8>
 800f44a:	429f      	cmp	r7, r3
 800f44c:	d1f8      	bne.n	800f440 <_dtoa_r+0x5e0>
 800f44e:	9a04      	ldr	r2, [sp, #16]
 800f450:	3201      	adds	r2, #1
 800f452:	9204      	str	r2, [sp, #16]
 800f454:	2230      	movs	r2, #48	@ 0x30
 800f456:	703a      	strb	r2, [r7, #0]
 800f458:	781a      	ldrb	r2, [r3, #0]
 800f45a:	3201      	adds	r2, #1
 800f45c:	701a      	strb	r2, [r3, #0]
 800f45e:	e7bd      	b.n	800f3dc <_dtoa_r+0x57c>
 800f460:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f464:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f46c:	f47f aeef 	bne.w	800f24e <_dtoa_r+0x3ee>
 800f470:	e710      	b.n	800f294 <_dtoa_r+0x434>
 800f472:	bf00      	nop
 800f474:	08012ab0 	.word	0x08012ab0
 800f478:	08012a88 	.word	0x08012a88
 800f47c:	9908      	ldr	r1, [sp, #32]
 800f47e:	2900      	cmp	r1, #0
 800f480:	f000 80e3 	beq.w	800f64a <_dtoa_r+0x7ea>
 800f484:	9907      	ldr	r1, [sp, #28]
 800f486:	2901      	cmp	r1, #1
 800f488:	f300 80c8 	bgt.w	800f61c <_dtoa_r+0x7bc>
 800f48c:	2d00      	cmp	r5, #0
 800f48e:	f000 80c1 	beq.w	800f614 <_dtoa_r+0x7b4>
 800f492:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f496:	9e05      	ldr	r6, [sp, #20]
 800f498:	461c      	mov	r4, r3
 800f49a:	9304      	str	r3, [sp, #16]
 800f49c:	9b05      	ldr	r3, [sp, #20]
 800f49e:	4413      	add	r3, r2
 800f4a0:	9305      	str	r3, [sp, #20]
 800f4a2:	9b06      	ldr	r3, [sp, #24]
 800f4a4:	2101      	movs	r1, #1
 800f4a6:	4413      	add	r3, r2
 800f4a8:	4648      	mov	r0, r9
 800f4aa:	9306      	str	r3, [sp, #24]
 800f4ac:	f000 fc6c 	bl	800fd88 <__i2b>
 800f4b0:	9b04      	ldr	r3, [sp, #16]
 800f4b2:	4605      	mov	r5, r0
 800f4b4:	b166      	cbz	r6, 800f4d0 <_dtoa_r+0x670>
 800f4b6:	9a06      	ldr	r2, [sp, #24]
 800f4b8:	2a00      	cmp	r2, #0
 800f4ba:	dd09      	ble.n	800f4d0 <_dtoa_r+0x670>
 800f4bc:	42b2      	cmp	r2, r6
 800f4be:	9905      	ldr	r1, [sp, #20]
 800f4c0:	bfa8      	it	ge
 800f4c2:	4632      	movge	r2, r6
 800f4c4:	1a89      	subs	r1, r1, r2
 800f4c6:	9105      	str	r1, [sp, #20]
 800f4c8:	9906      	ldr	r1, [sp, #24]
 800f4ca:	1ab6      	subs	r6, r6, r2
 800f4cc:	1a8a      	subs	r2, r1, r2
 800f4ce:	9206      	str	r2, [sp, #24]
 800f4d0:	b1fb      	cbz	r3, 800f512 <_dtoa_r+0x6b2>
 800f4d2:	9a08      	ldr	r2, [sp, #32]
 800f4d4:	2a00      	cmp	r2, #0
 800f4d6:	f000 80bc 	beq.w	800f652 <_dtoa_r+0x7f2>
 800f4da:	b19c      	cbz	r4, 800f504 <_dtoa_r+0x6a4>
 800f4dc:	4629      	mov	r1, r5
 800f4de:	4622      	mov	r2, r4
 800f4e0:	4648      	mov	r0, r9
 800f4e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f4e4:	f000 fd10 	bl	800ff08 <__pow5mult>
 800f4e8:	9a01      	ldr	r2, [sp, #4]
 800f4ea:	4601      	mov	r1, r0
 800f4ec:	4605      	mov	r5, r0
 800f4ee:	4648      	mov	r0, r9
 800f4f0:	f000 fc60 	bl	800fdb4 <__multiply>
 800f4f4:	9901      	ldr	r1, [sp, #4]
 800f4f6:	9004      	str	r0, [sp, #16]
 800f4f8:	4648      	mov	r0, r9
 800f4fa:	f000 fb47 	bl	800fb8c <_Bfree>
 800f4fe:	9a04      	ldr	r2, [sp, #16]
 800f500:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f502:	9201      	str	r2, [sp, #4]
 800f504:	1b1a      	subs	r2, r3, r4
 800f506:	d004      	beq.n	800f512 <_dtoa_r+0x6b2>
 800f508:	9901      	ldr	r1, [sp, #4]
 800f50a:	4648      	mov	r0, r9
 800f50c:	f000 fcfc 	bl	800ff08 <__pow5mult>
 800f510:	9001      	str	r0, [sp, #4]
 800f512:	2101      	movs	r1, #1
 800f514:	4648      	mov	r0, r9
 800f516:	f000 fc37 	bl	800fd88 <__i2b>
 800f51a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f51c:	4604      	mov	r4, r0
 800f51e:	2b00      	cmp	r3, #0
 800f520:	f000 81d0 	beq.w	800f8c4 <_dtoa_r+0xa64>
 800f524:	461a      	mov	r2, r3
 800f526:	4601      	mov	r1, r0
 800f528:	4648      	mov	r0, r9
 800f52a:	f000 fced 	bl	800ff08 <__pow5mult>
 800f52e:	9b07      	ldr	r3, [sp, #28]
 800f530:	2b01      	cmp	r3, #1
 800f532:	4604      	mov	r4, r0
 800f534:	f300 8095 	bgt.w	800f662 <_dtoa_r+0x802>
 800f538:	9b02      	ldr	r3, [sp, #8]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	f040 808b 	bne.w	800f656 <_dtoa_r+0x7f6>
 800f540:	9b03      	ldr	r3, [sp, #12]
 800f542:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800f546:	2a00      	cmp	r2, #0
 800f548:	f040 8087 	bne.w	800f65a <_dtoa_r+0x7fa>
 800f54c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800f550:	0d12      	lsrs	r2, r2, #20
 800f552:	0512      	lsls	r2, r2, #20
 800f554:	2a00      	cmp	r2, #0
 800f556:	f000 8082 	beq.w	800f65e <_dtoa_r+0x7fe>
 800f55a:	9b05      	ldr	r3, [sp, #20]
 800f55c:	3301      	adds	r3, #1
 800f55e:	9305      	str	r3, [sp, #20]
 800f560:	9b06      	ldr	r3, [sp, #24]
 800f562:	3301      	adds	r3, #1
 800f564:	9306      	str	r3, [sp, #24]
 800f566:	2301      	movs	r3, #1
 800f568:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f56a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	f000 81af 	beq.w	800f8d0 <_dtoa_r+0xa70>
 800f572:	6922      	ldr	r2, [r4, #16]
 800f574:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f578:	6910      	ldr	r0, [r2, #16]
 800f57a:	f000 fbb9 	bl	800fcf0 <__hi0bits>
 800f57e:	f1c0 0020 	rsb	r0, r0, #32
 800f582:	9b06      	ldr	r3, [sp, #24]
 800f584:	4418      	add	r0, r3
 800f586:	f010 001f 	ands.w	r0, r0, #31
 800f58a:	d076      	beq.n	800f67a <_dtoa_r+0x81a>
 800f58c:	f1c0 0220 	rsb	r2, r0, #32
 800f590:	2a04      	cmp	r2, #4
 800f592:	dd69      	ble.n	800f668 <_dtoa_r+0x808>
 800f594:	9b05      	ldr	r3, [sp, #20]
 800f596:	f1c0 001c 	rsb	r0, r0, #28
 800f59a:	4403      	add	r3, r0
 800f59c:	9305      	str	r3, [sp, #20]
 800f59e:	9b06      	ldr	r3, [sp, #24]
 800f5a0:	4406      	add	r6, r0
 800f5a2:	4403      	add	r3, r0
 800f5a4:	9306      	str	r3, [sp, #24]
 800f5a6:	9b05      	ldr	r3, [sp, #20]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	dd05      	ble.n	800f5b8 <_dtoa_r+0x758>
 800f5ac:	9901      	ldr	r1, [sp, #4]
 800f5ae:	461a      	mov	r2, r3
 800f5b0:	4648      	mov	r0, r9
 800f5b2:	f000 fd03 	bl	800ffbc <__lshift>
 800f5b6:	9001      	str	r0, [sp, #4]
 800f5b8:	9b06      	ldr	r3, [sp, #24]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	dd05      	ble.n	800f5ca <_dtoa_r+0x76a>
 800f5be:	4621      	mov	r1, r4
 800f5c0:	461a      	mov	r2, r3
 800f5c2:	4648      	mov	r0, r9
 800f5c4:	f000 fcfa 	bl	800ffbc <__lshift>
 800f5c8:	4604      	mov	r4, r0
 800f5ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d056      	beq.n	800f67e <_dtoa_r+0x81e>
 800f5d0:	9801      	ldr	r0, [sp, #4]
 800f5d2:	4621      	mov	r1, r4
 800f5d4:	f000 fd5e 	bl	8010094 <__mcmp>
 800f5d8:	2800      	cmp	r0, #0
 800f5da:	da50      	bge.n	800f67e <_dtoa_r+0x81e>
 800f5dc:	f108 33ff 	add.w	r3, r8, #4294967295
 800f5e0:	9304      	str	r3, [sp, #16]
 800f5e2:	9901      	ldr	r1, [sp, #4]
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	220a      	movs	r2, #10
 800f5e8:	4648      	mov	r0, r9
 800f5ea:	f000 faf1 	bl	800fbd0 <__multadd>
 800f5ee:	9b08      	ldr	r3, [sp, #32]
 800f5f0:	9001      	str	r0, [sp, #4]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	f000 816e 	beq.w	800f8d4 <_dtoa_r+0xa74>
 800f5f8:	4629      	mov	r1, r5
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	220a      	movs	r2, #10
 800f5fe:	4648      	mov	r0, r9
 800f600:	f000 fae6 	bl	800fbd0 <__multadd>
 800f604:	f1bb 0f00 	cmp.w	fp, #0
 800f608:	4605      	mov	r5, r0
 800f60a:	dc64      	bgt.n	800f6d6 <_dtoa_r+0x876>
 800f60c:	9b07      	ldr	r3, [sp, #28]
 800f60e:	2b02      	cmp	r3, #2
 800f610:	dc3e      	bgt.n	800f690 <_dtoa_r+0x830>
 800f612:	e060      	b.n	800f6d6 <_dtoa_r+0x876>
 800f614:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f616:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f61a:	e73c      	b.n	800f496 <_dtoa_r+0x636>
 800f61c:	f10a 34ff 	add.w	r4, sl, #4294967295
 800f620:	42a3      	cmp	r3, r4
 800f622:	bfbf      	itttt	lt
 800f624:	1ae2      	sublt	r2, r4, r3
 800f626:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f628:	189b      	addlt	r3, r3, r2
 800f62a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800f62c:	bfae      	itee	ge
 800f62e:	1b1c      	subge	r4, r3, r4
 800f630:	4623      	movlt	r3, r4
 800f632:	2400      	movlt	r4, #0
 800f634:	f1ba 0f00 	cmp.w	sl, #0
 800f638:	bfb5      	itete	lt
 800f63a:	9a05      	ldrlt	r2, [sp, #20]
 800f63c:	9e05      	ldrge	r6, [sp, #20]
 800f63e:	eba2 060a 	sublt.w	r6, r2, sl
 800f642:	4652      	movge	r2, sl
 800f644:	bfb8      	it	lt
 800f646:	2200      	movlt	r2, #0
 800f648:	e727      	b.n	800f49a <_dtoa_r+0x63a>
 800f64a:	9e05      	ldr	r6, [sp, #20]
 800f64c:	9d08      	ldr	r5, [sp, #32]
 800f64e:	461c      	mov	r4, r3
 800f650:	e730      	b.n	800f4b4 <_dtoa_r+0x654>
 800f652:	461a      	mov	r2, r3
 800f654:	e758      	b.n	800f508 <_dtoa_r+0x6a8>
 800f656:	2300      	movs	r3, #0
 800f658:	e786      	b.n	800f568 <_dtoa_r+0x708>
 800f65a:	9b02      	ldr	r3, [sp, #8]
 800f65c:	e784      	b.n	800f568 <_dtoa_r+0x708>
 800f65e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f660:	e783      	b.n	800f56a <_dtoa_r+0x70a>
 800f662:	2300      	movs	r3, #0
 800f664:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f666:	e784      	b.n	800f572 <_dtoa_r+0x712>
 800f668:	d09d      	beq.n	800f5a6 <_dtoa_r+0x746>
 800f66a:	9b05      	ldr	r3, [sp, #20]
 800f66c:	321c      	adds	r2, #28
 800f66e:	4413      	add	r3, r2
 800f670:	9305      	str	r3, [sp, #20]
 800f672:	9b06      	ldr	r3, [sp, #24]
 800f674:	4416      	add	r6, r2
 800f676:	4413      	add	r3, r2
 800f678:	e794      	b.n	800f5a4 <_dtoa_r+0x744>
 800f67a:	4602      	mov	r2, r0
 800f67c:	e7f5      	b.n	800f66a <_dtoa_r+0x80a>
 800f67e:	f1ba 0f00 	cmp.w	sl, #0
 800f682:	f8cd 8010 	str.w	r8, [sp, #16]
 800f686:	46d3      	mov	fp, sl
 800f688:	dc21      	bgt.n	800f6ce <_dtoa_r+0x86e>
 800f68a:	9b07      	ldr	r3, [sp, #28]
 800f68c:	2b02      	cmp	r3, #2
 800f68e:	dd1e      	ble.n	800f6ce <_dtoa_r+0x86e>
 800f690:	f1bb 0f00 	cmp.w	fp, #0
 800f694:	f47f aeb7 	bne.w	800f406 <_dtoa_r+0x5a6>
 800f698:	4621      	mov	r1, r4
 800f69a:	465b      	mov	r3, fp
 800f69c:	2205      	movs	r2, #5
 800f69e:	4648      	mov	r0, r9
 800f6a0:	f000 fa96 	bl	800fbd0 <__multadd>
 800f6a4:	4601      	mov	r1, r0
 800f6a6:	4604      	mov	r4, r0
 800f6a8:	9801      	ldr	r0, [sp, #4]
 800f6aa:	f000 fcf3 	bl	8010094 <__mcmp>
 800f6ae:	2800      	cmp	r0, #0
 800f6b0:	f77f aea9 	ble.w	800f406 <_dtoa_r+0x5a6>
 800f6b4:	463e      	mov	r6, r7
 800f6b6:	2331      	movs	r3, #49	@ 0x31
 800f6b8:	f806 3b01 	strb.w	r3, [r6], #1
 800f6bc:	9b04      	ldr	r3, [sp, #16]
 800f6be:	3301      	adds	r3, #1
 800f6c0:	9304      	str	r3, [sp, #16]
 800f6c2:	e6a4      	b.n	800f40e <_dtoa_r+0x5ae>
 800f6c4:	f8cd 8010 	str.w	r8, [sp, #16]
 800f6c8:	4654      	mov	r4, sl
 800f6ca:	4625      	mov	r5, r4
 800f6cc:	e7f2      	b.n	800f6b4 <_dtoa_r+0x854>
 800f6ce:	9b08      	ldr	r3, [sp, #32]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	f000 8103 	beq.w	800f8dc <_dtoa_r+0xa7c>
 800f6d6:	2e00      	cmp	r6, #0
 800f6d8:	dd05      	ble.n	800f6e6 <_dtoa_r+0x886>
 800f6da:	4629      	mov	r1, r5
 800f6dc:	4632      	mov	r2, r6
 800f6de:	4648      	mov	r0, r9
 800f6e0:	f000 fc6c 	bl	800ffbc <__lshift>
 800f6e4:	4605      	mov	r5, r0
 800f6e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d058      	beq.n	800f79e <_dtoa_r+0x93e>
 800f6ec:	6869      	ldr	r1, [r5, #4]
 800f6ee:	4648      	mov	r0, r9
 800f6f0:	f000 fa0c 	bl	800fb0c <_Balloc>
 800f6f4:	4606      	mov	r6, r0
 800f6f6:	b928      	cbnz	r0, 800f704 <_dtoa_r+0x8a4>
 800f6f8:	4b82      	ldr	r3, [pc, #520]	@ (800f904 <_dtoa_r+0xaa4>)
 800f6fa:	4602      	mov	r2, r0
 800f6fc:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f700:	f7ff bbc7 	b.w	800ee92 <_dtoa_r+0x32>
 800f704:	692a      	ldr	r2, [r5, #16]
 800f706:	3202      	adds	r2, #2
 800f708:	0092      	lsls	r2, r2, #2
 800f70a:	f105 010c 	add.w	r1, r5, #12
 800f70e:	300c      	adds	r0, #12
 800f710:	f001 ff1e 	bl	8011550 <memcpy>
 800f714:	2201      	movs	r2, #1
 800f716:	4631      	mov	r1, r6
 800f718:	4648      	mov	r0, r9
 800f71a:	f000 fc4f 	bl	800ffbc <__lshift>
 800f71e:	1c7b      	adds	r3, r7, #1
 800f720:	9305      	str	r3, [sp, #20]
 800f722:	eb07 030b 	add.w	r3, r7, fp
 800f726:	9309      	str	r3, [sp, #36]	@ 0x24
 800f728:	9b02      	ldr	r3, [sp, #8]
 800f72a:	f003 0301 	and.w	r3, r3, #1
 800f72e:	46a8      	mov	r8, r5
 800f730:	9308      	str	r3, [sp, #32]
 800f732:	4605      	mov	r5, r0
 800f734:	9b05      	ldr	r3, [sp, #20]
 800f736:	9801      	ldr	r0, [sp, #4]
 800f738:	4621      	mov	r1, r4
 800f73a:	f103 3bff 	add.w	fp, r3, #4294967295
 800f73e:	f7ff fb07 	bl	800ed50 <quorem>
 800f742:	4641      	mov	r1, r8
 800f744:	9002      	str	r0, [sp, #8]
 800f746:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800f74a:	9801      	ldr	r0, [sp, #4]
 800f74c:	f000 fca2 	bl	8010094 <__mcmp>
 800f750:	462a      	mov	r2, r5
 800f752:	9006      	str	r0, [sp, #24]
 800f754:	4621      	mov	r1, r4
 800f756:	4648      	mov	r0, r9
 800f758:	f000 fcb8 	bl	80100cc <__mdiff>
 800f75c:	68c2      	ldr	r2, [r0, #12]
 800f75e:	4606      	mov	r6, r0
 800f760:	b9fa      	cbnz	r2, 800f7a2 <_dtoa_r+0x942>
 800f762:	4601      	mov	r1, r0
 800f764:	9801      	ldr	r0, [sp, #4]
 800f766:	f000 fc95 	bl	8010094 <__mcmp>
 800f76a:	4602      	mov	r2, r0
 800f76c:	4631      	mov	r1, r6
 800f76e:	4648      	mov	r0, r9
 800f770:	920a      	str	r2, [sp, #40]	@ 0x28
 800f772:	f000 fa0b 	bl	800fb8c <_Bfree>
 800f776:	9b07      	ldr	r3, [sp, #28]
 800f778:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f77a:	9e05      	ldr	r6, [sp, #20]
 800f77c:	ea43 0102 	orr.w	r1, r3, r2
 800f780:	9b08      	ldr	r3, [sp, #32]
 800f782:	4319      	orrs	r1, r3
 800f784:	d10f      	bne.n	800f7a6 <_dtoa_r+0x946>
 800f786:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f78a:	d028      	beq.n	800f7de <_dtoa_r+0x97e>
 800f78c:	9b06      	ldr	r3, [sp, #24]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	dd02      	ble.n	800f798 <_dtoa_r+0x938>
 800f792:	9b02      	ldr	r3, [sp, #8]
 800f794:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800f798:	f88b a000 	strb.w	sl, [fp]
 800f79c:	e639      	b.n	800f412 <_dtoa_r+0x5b2>
 800f79e:	4628      	mov	r0, r5
 800f7a0:	e7bd      	b.n	800f71e <_dtoa_r+0x8be>
 800f7a2:	2201      	movs	r2, #1
 800f7a4:	e7e2      	b.n	800f76c <_dtoa_r+0x90c>
 800f7a6:	9b06      	ldr	r3, [sp, #24]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	db04      	blt.n	800f7b6 <_dtoa_r+0x956>
 800f7ac:	9907      	ldr	r1, [sp, #28]
 800f7ae:	430b      	orrs	r3, r1
 800f7b0:	9908      	ldr	r1, [sp, #32]
 800f7b2:	430b      	orrs	r3, r1
 800f7b4:	d120      	bne.n	800f7f8 <_dtoa_r+0x998>
 800f7b6:	2a00      	cmp	r2, #0
 800f7b8:	ddee      	ble.n	800f798 <_dtoa_r+0x938>
 800f7ba:	9901      	ldr	r1, [sp, #4]
 800f7bc:	2201      	movs	r2, #1
 800f7be:	4648      	mov	r0, r9
 800f7c0:	f000 fbfc 	bl	800ffbc <__lshift>
 800f7c4:	4621      	mov	r1, r4
 800f7c6:	9001      	str	r0, [sp, #4]
 800f7c8:	f000 fc64 	bl	8010094 <__mcmp>
 800f7cc:	2800      	cmp	r0, #0
 800f7ce:	dc03      	bgt.n	800f7d8 <_dtoa_r+0x978>
 800f7d0:	d1e2      	bne.n	800f798 <_dtoa_r+0x938>
 800f7d2:	f01a 0f01 	tst.w	sl, #1
 800f7d6:	d0df      	beq.n	800f798 <_dtoa_r+0x938>
 800f7d8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f7dc:	d1d9      	bne.n	800f792 <_dtoa_r+0x932>
 800f7de:	2339      	movs	r3, #57	@ 0x39
 800f7e0:	f88b 3000 	strb.w	r3, [fp]
 800f7e4:	4633      	mov	r3, r6
 800f7e6:	461e      	mov	r6, r3
 800f7e8:	3b01      	subs	r3, #1
 800f7ea:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f7ee:	2a39      	cmp	r2, #57	@ 0x39
 800f7f0:	d053      	beq.n	800f89a <_dtoa_r+0xa3a>
 800f7f2:	3201      	adds	r2, #1
 800f7f4:	701a      	strb	r2, [r3, #0]
 800f7f6:	e60c      	b.n	800f412 <_dtoa_r+0x5b2>
 800f7f8:	2a00      	cmp	r2, #0
 800f7fa:	dd07      	ble.n	800f80c <_dtoa_r+0x9ac>
 800f7fc:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f800:	d0ed      	beq.n	800f7de <_dtoa_r+0x97e>
 800f802:	f10a 0301 	add.w	r3, sl, #1
 800f806:	f88b 3000 	strb.w	r3, [fp]
 800f80a:	e602      	b.n	800f412 <_dtoa_r+0x5b2>
 800f80c:	9b05      	ldr	r3, [sp, #20]
 800f80e:	9a05      	ldr	r2, [sp, #20]
 800f810:	f803 ac01 	strb.w	sl, [r3, #-1]
 800f814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f816:	4293      	cmp	r3, r2
 800f818:	d029      	beq.n	800f86e <_dtoa_r+0xa0e>
 800f81a:	9901      	ldr	r1, [sp, #4]
 800f81c:	2300      	movs	r3, #0
 800f81e:	220a      	movs	r2, #10
 800f820:	4648      	mov	r0, r9
 800f822:	f000 f9d5 	bl	800fbd0 <__multadd>
 800f826:	45a8      	cmp	r8, r5
 800f828:	9001      	str	r0, [sp, #4]
 800f82a:	f04f 0300 	mov.w	r3, #0
 800f82e:	f04f 020a 	mov.w	r2, #10
 800f832:	4641      	mov	r1, r8
 800f834:	4648      	mov	r0, r9
 800f836:	d107      	bne.n	800f848 <_dtoa_r+0x9e8>
 800f838:	f000 f9ca 	bl	800fbd0 <__multadd>
 800f83c:	4680      	mov	r8, r0
 800f83e:	4605      	mov	r5, r0
 800f840:	9b05      	ldr	r3, [sp, #20]
 800f842:	3301      	adds	r3, #1
 800f844:	9305      	str	r3, [sp, #20]
 800f846:	e775      	b.n	800f734 <_dtoa_r+0x8d4>
 800f848:	f000 f9c2 	bl	800fbd0 <__multadd>
 800f84c:	4629      	mov	r1, r5
 800f84e:	4680      	mov	r8, r0
 800f850:	2300      	movs	r3, #0
 800f852:	220a      	movs	r2, #10
 800f854:	4648      	mov	r0, r9
 800f856:	f000 f9bb 	bl	800fbd0 <__multadd>
 800f85a:	4605      	mov	r5, r0
 800f85c:	e7f0      	b.n	800f840 <_dtoa_r+0x9e0>
 800f85e:	f1bb 0f00 	cmp.w	fp, #0
 800f862:	bfcc      	ite	gt
 800f864:	465e      	movgt	r6, fp
 800f866:	2601      	movle	r6, #1
 800f868:	443e      	add	r6, r7
 800f86a:	f04f 0800 	mov.w	r8, #0
 800f86e:	9901      	ldr	r1, [sp, #4]
 800f870:	2201      	movs	r2, #1
 800f872:	4648      	mov	r0, r9
 800f874:	f000 fba2 	bl	800ffbc <__lshift>
 800f878:	4621      	mov	r1, r4
 800f87a:	9001      	str	r0, [sp, #4]
 800f87c:	f000 fc0a 	bl	8010094 <__mcmp>
 800f880:	2800      	cmp	r0, #0
 800f882:	dcaf      	bgt.n	800f7e4 <_dtoa_r+0x984>
 800f884:	d102      	bne.n	800f88c <_dtoa_r+0xa2c>
 800f886:	f01a 0f01 	tst.w	sl, #1
 800f88a:	d1ab      	bne.n	800f7e4 <_dtoa_r+0x984>
 800f88c:	4633      	mov	r3, r6
 800f88e:	461e      	mov	r6, r3
 800f890:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f894:	2a30      	cmp	r2, #48	@ 0x30
 800f896:	d0fa      	beq.n	800f88e <_dtoa_r+0xa2e>
 800f898:	e5bb      	b.n	800f412 <_dtoa_r+0x5b2>
 800f89a:	429f      	cmp	r7, r3
 800f89c:	d1a3      	bne.n	800f7e6 <_dtoa_r+0x986>
 800f89e:	9b04      	ldr	r3, [sp, #16]
 800f8a0:	3301      	adds	r3, #1
 800f8a2:	9304      	str	r3, [sp, #16]
 800f8a4:	2331      	movs	r3, #49	@ 0x31
 800f8a6:	703b      	strb	r3, [r7, #0]
 800f8a8:	e5b3      	b.n	800f412 <_dtoa_r+0x5b2>
 800f8aa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f8ac:	4f16      	ldr	r7, [pc, #88]	@ (800f908 <_dtoa_r+0xaa8>)
 800f8ae:	b11b      	cbz	r3, 800f8b8 <_dtoa_r+0xa58>
 800f8b0:	f107 0308 	add.w	r3, r7, #8
 800f8b4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800f8b6:	6013      	str	r3, [r2, #0]
 800f8b8:	4638      	mov	r0, r7
 800f8ba:	b011      	add	sp, #68	@ 0x44
 800f8bc:	ecbd 8b02 	vpop	{d8}
 800f8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8c4:	9b07      	ldr	r3, [sp, #28]
 800f8c6:	2b01      	cmp	r3, #1
 800f8c8:	f77f ae36 	ble.w	800f538 <_dtoa_r+0x6d8>
 800f8cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f8ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f8d0:	2001      	movs	r0, #1
 800f8d2:	e656      	b.n	800f582 <_dtoa_r+0x722>
 800f8d4:	f1bb 0f00 	cmp.w	fp, #0
 800f8d8:	f77f aed7 	ble.w	800f68a <_dtoa_r+0x82a>
 800f8dc:	463e      	mov	r6, r7
 800f8de:	9801      	ldr	r0, [sp, #4]
 800f8e0:	4621      	mov	r1, r4
 800f8e2:	f7ff fa35 	bl	800ed50 <quorem>
 800f8e6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800f8ea:	f806 ab01 	strb.w	sl, [r6], #1
 800f8ee:	1bf2      	subs	r2, r6, r7
 800f8f0:	4593      	cmp	fp, r2
 800f8f2:	ddb4      	ble.n	800f85e <_dtoa_r+0x9fe>
 800f8f4:	9901      	ldr	r1, [sp, #4]
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	220a      	movs	r2, #10
 800f8fa:	4648      	mov	r0, r9
 800f8fc:	f000 f968 	bl	800fbd0 <__multadd>
 800f900:	9001      	str	r0, [sp, #4]
 800f902:	e7ec      	b.n	800f8de <_dtoa_r+0xa7e>
 800f904:	08012a0d 	.word	0x08012a0d
 800f908:	08012991 	.word	0x08012991

0800f90c <_free_r>:
 800f90c:	b538      	push	{r3, r4, r5, lr}
 800f90e:	4605      	mov	r5, r0
 800f910:	2900      	cmp	r1, #0
 800f912:	d041      	beq.n	800f998 <_free_r+0x8c>
 800f914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f918:	1f0c      	subs	r4, r1, #4
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	bfb8      	it	lt
 800f91e:	18e4      	addlt	r4, r4, r3
 800f920:	f000 f8e8 	bl	800faf4 <__malloc_lock>
 800f924:	4a1d      	ldr	r2, [pc, #116]	@ (800f99c <_free_r+0x90>)
 800f926:	6813      	ldr	r3, [r2, #0]
 800f928:	b933      	cbnz	r3, 800f938 <_free_r+0x2c>
 800f92a:	6063      	str	r3, [r4, #4]
 800f92c:	6014      	str	r4, [r2, #0]
 800f92e:	4628      	mov	r0, r5
 800f930:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f934:	f000 b8e4 	b.w	800fb00 <__malloc_unlock>
 800f938:	42a3      	cmp	r3, r4
 800f93a:	d908      	bls.n	800f94e <_free_r+0x42>
 800f93c:	6820      	ldr	r0, [r4, #0]
 800f93e:	1821      	adds	r1, r4, r0
 800f940:	428b      	cmp	r3, r1
 800f942:	bf01      	itttt	eq
 800f944:	6819      	ldreq	r1, [r3, #0]
 800f946:	685b      	ldreq	r3, [r3, #4]
 800f948:	1809      	addeq	r1, r1, r0
 800f94a:	6021      	streq	r1, [r4, #0]
 800f94c:	e7ed      	b.n	800f92a <_free_r+0x1e>
 800f94e:	461a      	mov	r2, r3
 800f950:	685b      	ldr	r3, [r3, #4]
 800f952:	b10b      	cbz	r3, 800f958 <_free_r+0x4c>
 800f954:	42a3      	cmp	r3, r4
 800f956:	d9fa      	bls.n	800f94e <_free_r+0x42>
 800f958:	6811      	ldr	r1, [r2, #0]
 800f95a:	1850      	adds	r0, r2, r1
 800f95c:	42a0      	cmp	r0, r4
 800f95e:	d10b      	bne.n	800f978 <_free_r+0x6c>
 800f960:	6820      	ldr	r0, [r4, #0]
 800f962:	4401      	add	r1, r0
 800f964:	1850      	adds	r0, r2, r1
 800f966:	4283      	cmp	r3, r0
 800f968:	6011      	str	r1, [r2, #0]
 800f96a:	d1e0      	bne.n	800f92e <_free_r+0x22>
 800f96c:	6818      	ldr	r0, [r3, #0]
 800f96e:	685b      	ldr	r3, [r3, #4]
 800f970:	6053      	str	r3, [r2, #4]
 800f972:	4408      	add	r0, r1
 800f974:	6010      	str	r0, [r2, #0]
 800f976:	e7da      	b.n	800f92e <_free_r+0x22>
 800f978:	d902      	bls.n	800f980 <_free_r+0x74>
 800f97a:	230c      	movs	r3, #12
 800f97c:	602b      	str	r3, [r5, #0]
 800f97e:	e7d6      	b.n	800f92e <_free_r+0x22>
 800f980:	6820      	ldr	r0, [r4, #0]
 800f982:	1821      	adds	r1, r4, r0
 800f984:	428b      	cmp	r3, r1
 800f986:	bf04      	itt	eq
 800f988:	6819      	ldreq	r1, [r3, #0]
 800f98a:	685b      	ldreq	r3, [r3, #4]
 800f98c:	6063      	str	r3, [r4, #4]
 800f98e:	bf04      	itt	eq
 800f990:	1809      	addeq	r1, r1, r0
 800f992:	6021      	streq	r1, [r4, #0]
 800f994:	6054      	str	r4, [r2, #4]
 800f996:	e7ca      	b.n	800f92e <_free_r+0x22>
 800f998:	bd38      	pop	{r3, r4, r5, pc}
 800f99a:	bf00      	nop
 800f99c:	2400057c 	.word	0x2400057c

0800f9a0 <malloc>:
 800f9a0:	4b02      	ldr	r3, [pc, #8]	@ (800f9ac <malloc+0xc>)
 800f9a2:	4601      	mov	r1, r0
 800f9a4:	6818      	ldr	r0, [r3, #0]
 800f9a6:	f000 b825 	b.w	800f9f4 <_malloc_r>
 800f9aa:	bf00      	nop
 800f9ac:	2400001c 	.word	0x2400001c

0800f9b0 <sbrk_aligned>:
 800f9b0:	b570      	push	{r4, r5, r6, lr}
 800f9b2:	4e0f      	ldr	r6, [pc, #60]	@ (800f9f0 <sbrk_aligned+0x40>)
 800f9b4:	460c      	mov	r4, r1
 800f9b6:	6831      	ldr	r1, [r6, #0]
 800f9b8:	4605      	mov	r5, r0
 800f9ba:	b911      	cbnz	r1, 800f9c2 <sbrk_aligned+0x12>
 800f9bc:	f001 fdb8 	bl	8011530 <_sbrk_r>
 800f9c0:	6030      	str	r0, [r6, #0]
 800f9c2:	4621      	mov	r1, r4
 800f9c4:	4628      	mov	r0, r5
 800f9c6:	f001 fdb3 	bl	8011530 <_sbrk_r>
 800f9ca:	1c43      	adds	r3, r0, #1
 800f9cc:	d103      	bne.n	800f9d6 <sbrk_aligned+0x26>
 800f9ce:	f04f 34ff 	mov.w	r4, #4294967295
 800f9d2:	4620      	mov	r0, r4
 800f9d4:	bd70      	pop	{r4, r5, r6, pc}
 800f9d6:	1cc4      	adds	r4, r0, #3
 800f9d8:	f024 0403 	bic.w	r4, r4, #3
 800f9dc:	42a0      	cmp	r0, r4
 800f9de:	d0f8      	beq.n	800f9d2 <sbrk_aligned+0x22>
 800f9e0:	1a21      	subs	r1, r4, r0
 800f9e2:	4628      	mov	r0, r5
 800f9e4:	f001 fda4 	bl	8011530 <_sbrk_r>
 800f9e8:	3001      	adds	r0, #1
 800f9ea:	d1f2      	bne.n	800f9d2 <sbrk_aligned+0x22>
 800f9ec:	e7ef      	b.n	800f9ce <sbrk_aligned+0x1e>
 800f9ee:	bf00      	nop
 800f9f0:	24000578 	.word	0x24000578

0800f9f4 <_malloc_r>:
 800f9f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9f8:	1ccd      	adds	r5, r1, #3
 800f9fa:	f025 0503 	bic.w	r5, r5, #3
 800f9fe:	3508      	adds	r5, #8
 800fa00:	2d0c      	cmp	r5, #12
 800fa02:	bf38      	it	cc
 800fa04:	250c      	movcc	r5, #12
 800fa06:	2d00      	cmp	r5, #0
 800fa08:	4606      	mov	r6, r0
 800fa0a:	db01      	blt.n	800fa10 <_malloc_r+0x1c>
 800fa0c:	42a9      	cmp	r1, r5
 800fa0e:	d904      	bls.n	800fa1a <_malloc_r+0x26>
 800fa10:	230c      	movs	r3, #12
 800fa12:	6033      	str	r3, [r6, #0]
 800fa14:	2000      	movs	r0, #0
 800fa16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800faf0 <_malloc_r+0xfc>
 800fa1e:	f000 f869 	bl	800faf4 <__malloc_lock>
 800fa22:	f8d8 3000 	ldr.w	r3, [r8]
 800fa26:	461c      	mov	r4, r3
 800fa28:	bb44      	cbnz	r4, 800fa7c <_malloc_r+0x88>
 800fa2a:	4629      	mov	r1, r5
 800fa2c:	4630      	mov	r0, r6
 800fa2e:	f7ff ffbf 	bl	800f9b0 <sbrk_aligned>
 800fa32:	1c43      	adds	r3, r0, #1
 800fa34:	4604      	mov	r4, r0
 800fa36:	d158      	bne.n	800faea <_malloc_r+0xf6>
 800fa38:	f8d8 4000 	ldr.w	r4, [r8]
 800fa3c:	4627      	mov	r7, r4
 800fa3e:	2f00      	cmp	r7, #0
 800fa40:	d143      	bne.n	800faca <_malloc_r+0xd6>
 800fa42:	2c00      	cmp	r4, #0
 800fa44:	d04b      	beq.n	800fade <_malloc_r+0xea>
 800fa46:	6823      	ldr	r3, [r4, #0]
 800fa48:	4639      	mov	r1, r7
 800fa4a:	4630      	mov	r0, r6
 800fa4c:	eb04 0903 	add.w	r9, r4, r3
 800fa50:	f001 fd6e 	bl	8011530 <_sbrk_r>
 800fa54:	4581      	cmp	r9, r0
 800fa56:	d142      	bne.n	800fade <_malloc_r+0xea>
 800fa58:	6821      	ldr	r1, [r4, #0]
 800fa5a:	1a6d      	subs	r5, r5, r1
 800fa5c:	4629      	mov	r1, r5
 800fa5e:	4630      	mov	r0, r6
 800fa60:	f7ff ffa6 	bl	800f9b0 <sbrk_aligned>
 800fa64:	3001      	adds	r0, #1
 800fa66:	d03a      	beq.n	800fade <_malloc_r+0xea>
 800fa68:	6823      	ldr	r3, [r4, #0]
 800fa6a:	442b      	add	r3, r5
 800fa6c:	6023      	str	r3, [r4, #0]
 800fa6e:	f8d8 3000 	ldr.w	r3, [r8]
 800fa72:	685a      	ldr	r2, [r3, #4]
 800fa74:	bb62      	cbnz	r2, 800fad0 <_malloc_r+0xdc>
 800fa76:	f8c8 7000 	str.w	r7, [r8]
 800fa7a:	e00f      	b.n	800fa9c <_malloc_r+0xa8>
 800fa7c:	6822      	ldr	r2, [r4, #0]
 800fa7e:	1b52      	subs	r2, r2, r5
 800fa80:	d420      	bmi.n	800fac4 <_malloc_r+0xd0>
 800fa82:	2a0b      	cmp	r2, #11
 800fa84:	d917      	bls.n	800fab6 <_malloc_r+0xc2>
 800fa86:	1961      	adds	r1, r4, r5
 800fa88:	42a3      	cmp	r3, r4
 800fa8a:	6025      	str	r5, [r4, #0]
 800fa8c:	bf18      	it	ne
 800fa8e:	6059      	strne	r1, [r3, #4]
 800fa90:	6863      	ldr	r3, [r4, #4]
 800fa92:	bf08      	it	eq
 800fa94:	f8c8 1000 	streq.w	r1, [r8]
 800fa98:	5162      	str	r2, [r4, r5]
 800fa9a:	604b      	str	r3, [r1, #4]
 800fa9c:	4630      	mov	r0, r6
 800fa9e:	f000 f82f 	bl	800fb00 <__malloc_unlock>
 800faa2:	f104 000b 	add.w	r0, r4, #11
 800faa6:	1d23      	adds	r3, r4, #4
 800faa8:	f020 0007 	bic.w	r0, r0, #7
 800faac:	1ac2      	subs	r2, r0, r3
 800faae:	bf1c      	itt	ne
 800fab0:	1a1b      	subne	r3, r3, r0
 800fab2:	50a3      	strne	r3, [r4, r2]
 800fab4:	e7af      	b.n	800fa16 <_malloc_r+0x22>
 800fab6:	6862      	ldr	r2, [r4, #4]
 800fab8:	42a3      	cmp	r3, r4
 800faba:	bf0c      	ite	eq
 800fabc:	f8c8 2000 	streq.w	r2, [r8]
 800fac0:	605a      	strne	r2, [r3, #4]
 800fac2:	e7eb      	b.n	800fa9c <_malloc_r+0xa8>
 800fac4:	4623      	mov	r3, r4
 800fac6:	6864      	ldr	r4, [r4, #4]
 800fac8:	e7ae      	b.n	800fa28 <_malloc_r+0x34>
 800faca:	463c      	mov	r4, r7
 800facc:	687f      	ldr	r7, [r7, #4]
 800face:	e7b6      	b.n	800fa3e <_malloc_r+0x4a>
 800fad0:	461a      	mov	r2, r3
 800fad2:	685b      	ldr	r3, [r3, #4]
 800fad4:	42a3      	cmp	r3, r4
 800fad6:	d1fb      	bne.n	800fad0 <_malloc_r+0xdc>
 800fad8:	2300      	movs	r3, #0
 800fada:	6053      	str	r3, [r2, #4]
 800fadc:	e7de      	b.n	800fa9c <_malloc_r+0xa8>
 800fade:	230c      	movs	r3, #12
 800fae0:	6033      	str	r3, [r6, #0]
 800fae2:	4630      	mov	r0, r6
 800fae4:	f000 f80c 	bl	800fb00 <__malloc_unlock>
 800fae8:	e794      	b.n	800fa14 <_malloc_r+0x20>
 800faea:	6005      	str	r5, [r0, #0]
 800faec:	e7d6      	b.n	800fa9c <_malloc_r+0xa8>
 800faee:	bf00      	nop
 800faf0:	2400057c 	.word	0x2400057c

0800faf4 <__malloc_lock>:
 800faf4:	4801      	ldr	r0, [pc, #4]	@ (800fafc <__malloc_lock+0x8>)
 800faf6:	f7ff b922 	b.w	800ed3e <__retarget_lock_acquire_recursive>
 800fafa:	bf00      	nop
 800fafc:	24000574 	.word	0x24000574

0800fb00 <__malloc_unlock>:
 800fb00:	4801      	ldr	r0, [pc, #4]	@ (800fb08 <__malloc_unlock+0x8>)
 800fb02:	f7ff b91d 	b.w	800ed40 <__retarget_lock_release_recursive>
 800fb06:	bf00      	nop
 800fb08:	24000574 	.word	0x24000574

0800fb0c <_Balloc>:
 800fb0c:	b570      	push	{r4, r5, r6, lr}
 800fb0e:	69c6      	ldr	r6, [r0, #28]
 800fb10:	4604      	mov	r4, r0
 800fb12:	460d      	mov	r5, r1
 800fb14:	b976      	cbnz	r6, 800fb34 <_Balloc+0x28>
 800fb16:	2010      	movs	r0, #16
 800fb18:	f7ff ff42 	bl	800f9a0 <malloc>
 800fb1c:	4602      	mov	r2, r0
 800fb1e:	61e0      	str	r0, [r4, #28]
 800fb20:	b920      	cbnz	r0, 800fb2c <_Balloc+0x20>
 800fb22:	4b18      	ldr	r3, [pc, #96]	@ (800fb84 <_Balloc+0x78>)
 800fb24:	4818      	ldr	r0, [pc, #96]	@ (800fb88 <_Balloc+0x7c>)
 800fb26:	216b      	movs	r1, #107	@ 0x6b
 800fb28:	f001 fd2a 	bl	8011580 <__assert_func>
 800fb2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fb30:	6006      	str	r6, [r0, #0]
 800fb32:	60c6      	str	r6, [r0, #12]
 800fb34:	69e6      	ldr	r6, [r4, #28]
 800fb36:	68f3      	ldr	r3, [r6, #12]
 800fb38:	b183      	cbz	r3, 800fb5c <_Balloc+0x50>
 800fb3a:	69e3      	ldr	r3, [r4, #28]
 800fb3c:	68db      	ldr	r3, [r3, #12]
 800fb3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fb42:	b9b8      	cbnz	r0, 800fb74 <_Balloc+0x68>
 800fb44:	2101      	movs	r1, #1
 800fb46:	fa01 f605 	lsl.w	r6, r1, r5
 800fb4a:	1d72      	adds	r2, r6, #5
 800fb4c:	0092      	lsls	r2, r2, #2
 800fb4e:	4620      	mov	r0, r4
 800fb50:	f001 fd34 	bl	80115bc <_calloc_r>
 800fb54:	b160      	cbz	r0, 800fb70 <_Balloc+0x64>
 800fb56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fb5a:	e00e      	b.n	800fb7a <_Balloc+0x6e>
 800fb5c:	2221      	movs	r2, #33	@ 0x21
 800fb5e:	2104      	movs	r1, #4
 800fb60:	4620      	mov	r0, r4
 800fb62:	f001 fd2b 	bl	80115bc <_calloc_r>
 800fb66:	69e3      	ldr	r3, [r4, #28]
 800fb68:	60f0      	str	r0, [r6, #12]
 800fb6a:	68db      	ldr	r3, [r3, #12]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d1e4      	bne.n	800fb3a <_Balloc+0x2e>
 800fb70:	2000      	movs	r0, #0
 800fb72:	bd70      	pop	{r4, r5, r6, pc}
 800fb74:	6802      	ldr	r2, [r0, #0]
 800fb76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fb80:	e7f7      	b.n	800fb72 <_Balloc+0x66>
 800fb82:	bf00      	nop
 800fb84:	0801299e 	.word	0x0801299e
 800fb88:	08012a1e 	.word	0x08012a1e

0800fb8c <_Bfree>:
 800fb8c:	b570      	push	{r4, r5, r6, lr}
 800fb8e:	69c6      	ldr	r6, [r0, #28]
 800fb90:	4605      	mov	r5, r0
 800fb92:	460c      	mov	r4, r1
 800fb94:	b976      	cbnz	r6, 800fbb4 <_Bfree+0x28>
 800fb96:	2010      	movs	r0, #16
 800fb98:	f7ff ff02 	bl	800f9a0 <malloc>
 800fb9c:	4602      	mov	r2, r0
 800fb9e:	61e8      	str	r0, [r5, #28]
 800fba0:	b920      	cbnz	r0, 800fbac <_Bfree+0x20>
 800fba2:	4b09      	ldr	r3, [pc, #36]	@ (800fbc8 <_Bfree+0x3c>)
 800fba4:	4809      	ldr	r0, [pc, #36]	@ (800fbcc <_Bfree+0x40>)
 800fba6:	218f      	movs	r1, #143	@ 0x8f
 800fba8:	f001 fcea 	bl	8011580 <__assert_func>
 800fbac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fbb0:	6006      	str	r6, [r0, #0]
 800fbb2:	60c6      	str	r6, [r0, #12]
 800fbb4:	b13c      	cbz	r4, 800fbc6 <_Bfree+0x3a>
 800fbb6:	69eb      	ldr	r3, [r5, #28]
 800fbb8:	6862      	ldr	r2, [r4, #4]
 800fbba:	68db      	ldr	r3, [r3, #12]
 800fbbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fbc0:	6021      	str	r1, [r4, #0]
 800fbc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fbc6:	bd70      	pop	{r4, r5, r6, pc}
 800fbc8:	0801299e 	.word	0x0801299e
 800fbcc:	08012a1e 	.word	0x08012a1e

0800fbd0 <__multadd>:
 800fbd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbd4:	690d      	ldr	r5, [r1, #16]
 800fbd6:	4607      	mov	r7, r0
 800fbd8:	460c      	mov	r4, r1
 800fbda:	461e      	mov	r6, r3
 800fbdc:	f101 0c14 	add.w	ip, r1, #20
 800fbe0:	2000      	movs	r0, #0
 800fbe2:	f8dc 3000 	ldr.w	r3, [ip]
 800fbe6:	b299      	uxth	r1, r3
 800fbe8:	fb02 6101 	mla	r1, r2, r1, r6
 800fbec:	0c1e      	lsrs	r6, r3, #16
 800fbee:	0c0b      	lsrs	r3, r1, #16
 800fbf0:	fb02 3306 	mla	r3, r2, r6, r3
 800fbf4:	b289      	uxth	r1, r1
 800fbf6:	3001      	adds	r0, #1
 800fbf8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fbfc:	4285      	cmp	r5, r0
 800fbfe:	f84c 1b04 	str.w	r1, [ip], #4
 800fc02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fc06:	dcec      	bgt.n	800fbe2 <__multadd+0x12>
 800fc08:	b30e      	cbz	r6, 800fc4e <__multadd+0x7e>
 800fc0a:	68a3      	ldr	r3, [r4, #8]
 800fc0c:	42ab      	cmp	r3, r5
 800fc0e:	dc19      	bgt.n	800fc44 <__multadd+0x74>
 800fc10:	6861      	ldr	r1, [r4, #4]
 800fc12:	4638      	mov	r0, r7
 800fc14:	3101      	adds	r1, #1
 800fc16:	f7ff ff79 	bl	800fb0c <_Balloc>
 800fc1a:	4680      	mov	r8, r0
 800fc1c:	b928      	cbnz	r0, 800fc2a <__multadd+0x5a>
 800fc1e:	4602      	mov	r2, r0
 800fc20:	4b0c      	ldr	r3, [pc, #48]	@ (800fc54 <__multadd+0x84>)
 800fc22:	480d      	ldr	r0, [pc, #52]	@ (800fc58 <__multadd+0x88>)
 800fc24:	21ba      	movs	r1, #186	@ 0xba
 800fc26:	f001 fcab 	bl	8011580 <__assert_func>
 800fc2a:	6922      	ldr	r2, [r4, #16]
 800fc2c:	3202      	adds	r2, #2
 800fc2e:	f104 010c 	add.w	r1, r4, #12
 800fc32:	0092      	lsls	r2, r2, #2
 800fc34:	300c      	adds	r0, #12
 800fc36:	f001 fc8b 	bl	8011550 <memcpy>
 800fc3a:	4621      	mov	r1, r4
 800fc3c:	4638      	mov	r0, r7
 800fc3e:	f7ff ffa5 	bl	800fb8c <_Bfree>
 800fc42:	4644      	mov	r4, r8
 800fc44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fc48:	3501      	adds	r5, #1
 800fc4a:	615e      	str	r6, [r3, #20]
 800fc4c:	6125      	str	r5, [r4, #16]
 800fc4e:	4620      	mov	r0, r4
 800fc50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc54:	08012a0d 	.word	0x08012a0d
 800fc58:	08012a1e 	.word	0x08012a1e

0800fc5c <__s2b>:
 800fc5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc60:	460c      	mov	r4, r1
 800fc62:	4615      	mov	r5, r2
 800fc64:	461f      	mov	r7, r3
 800fc66:	2209      	movs	r2, #9
 800fc68:	3308      	adds	r3, #8
 800fc6a:	4606      	mov	r6, r0
 800fc6c:	fb93 f3f2 	sdiv	r3, r3, r2
 800fc70:	2100      	movs	r1, #0
 800fc72:	2201      	movs	r2, #1
 800fc74:	429a      	cmp	r2, r3
 800fc76:	db09      	blt.n	800fc8c <__s2b+0x30>
 800fc78:	4630      	mov	r0, r6
 800fc7a:	f7ff ff47 	bl	800fb0c <_Balloc>
 800fc7e:	b940      	cbnz	r0, 800fc92 <__s2b+0x36>
 800fc80:	4602      	mov	r2, r0
 800fc82:	4b19      	ldr	r3, [pc, #100]	@ (800fce8 <__s2b+0x8c>)
 800fc84:	4819      	ldr	r0, [pc, #100]	@ (800fcec <__s2b+0x90>)
 800fc86:	21d3      	movs	r1, #211	@ 0xd3
 800fc88:	f001 fc7a 	bl	8011580 <__assert_func>
 800fc8c:	0052      	lsls	r2, r2, #1
 800fc8e:	3101      	adds	r1, #1
 800fc90:	e7f0      	b.n	800fc74 <__s2b+0x18>
 800fc92:	9b08      	ldr	r3, [sp, #32]
 800fc94:	6143      	str	r3, [r0, #20]
 800fc96:	2d09      	cmp	r5, #9
 800fc98:	f04f 0301 	mov.w	r3, #1
 800fc9c:	6103      	str	r3, [r0, #16]
 800fc9e:	dd16      	ble.n	800fcce <__s2b+0x72>
 800fca0:	f104 0909 	add.w	r9, r4, #9
 800fca4:	46c8      	mov	r8, r9
 800fca6:	442c      	add	r4, r5
 800fca8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fcac:	4601      	mov	r1, r0
 800fcae:	3b30      	subs	r3, #48	@ 0x30
 800fcb0:	220a      	movs	r2, #10
 800fcb2:	4630      	mov	r0, r6
 800fcb4:	f7ff ff8c 	bl	800fbd0 <__multadd>
 800fcb8:	45a0      	cmp	r8, r4
 800fcba:	d1f5      	bne.n	800fca8 <__s2b+0x4c>
 800fcbc:	f1a5 0408 	sub.w	r4, r5, #8
 800fcc0:	444c      	add	r4, r9
 800fcc2:	1b2d      	subs	r5, r5, r4
 800fcc4:	1963      	adds	r3, r4, r5
 800fcc6:	42bb      	cmp	r3, r7
 800fcc8:	db04      	blt.n	800fcd4 <__s2b+0x78>
 800fcca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcce:	340a      	adds	r4, #10
 800fcd0:	2509      	movs	r5, #9
 800fcd2:	e7f6      	b.n	800fcc2 <__s2b+0x66>
 800fcd4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fcd8:	4601      	mov	r1, r0
 800fcda:	3b30      	subs	r3, #48	@ 0x30
 800fcdc:	220a      	movs	r2, #10
 800fcde:	4630      	mov	r0, r6
 800fce0:	f7ff ff76 	bl	800fbd0 <__multadd>
 800fce4:	e7ee      	b.n	800fcc4 <__s2b+0x68>
 800fce6:	bf00      	nop
 800fce8:	08012a0d 	.word	0x08012a0d
 800fcec:	08012a1e 	.word	0x08012a1e

0800fcf0 <__hi0bits>:
 800fcf0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fcf4:	4603      	mov	r3, r0
 800fcf6:	bf36      	itet	cc
 800fcf8:	0403      	lslcc	r3, r0, #16
 800fcfa:	2000      	movcs	r0, #0
 800fcfc:	2010      	movcc	r0, #16
 800fcfe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fd02:	bf3c      	itt	cc
 800fd04:	021b      	lslcc	r3, r3, #8
 800fd06:	3008      	addcc	r0, #8
 800fd08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fd0c:	bf3c      	itt	cc
 800fd0e:	011b      	lslcc	r3, r3, #4
 800fd10:	3004      	addcc	r0, #4
 800fd12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fd16:	bf3c      	itt	cc
 800fd18:	009b      	lslcc	r3, r3, #2
 800fd1a:	3002      	addcc	r0, #2
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	db05      	blt.n	800fd2c <__hi0bits+0x3c>
 800fd20:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fd24:	f100 0001 	add.w	r0, r0, #1
 800fd28:	bf08      	it	eq
 800fd2a:	2020      	moveq	r0, #32
 800fd2c:	4770      	bx	lr

0800fd2e <__lo0bits>:
 800fd2e:	6803      	ldr	r3, [r0, #0]
 800fd30:	4602      	mov	r2, r0
 800fd32:	f013 0007 	ands.w	r0, r3, #7
 800fd36:	d00b      	beq.n	800fd50 <__lo0bits+0x22>
 800fd38:	07d9      	lsls	r1, r3, #31
 800fd3a:	d421      	bmi.n	800fd80 <__lo0bits+0x52>
 800fd3c:	0798      	lsls	r0, r3, #30
 800fd3e:	bf49      	itett	mi
 800fd40:	085b      	lsrmi	r3, r3, #1
 800fd42:	089b      	lsrpl	r3, r3, #2
 800fd44:	2001      	movmi	r0, #1
 800fd46:	6013      	strmi	r3, [r2, #0]
 800fd48:	bf5c      	itt	pl
 800fd4a:	6013      	strpl	r3, [r2, #0]
 800fd4c:	2002      	movpl	r0, #2
 800fd4e:	4770      	bx	lr
 800fd50:	b299      	uxth	r1, r3
 800fd52:	b909      	cbnz	r1, 800fd58 <__lo0bits+0x2a>
 800fd54:	0c1b      	lsrs	r3, r3, #16
 800fd56:	2010      	movs	r0, #16
 800fd58:	b2d9      	uxtb	r1, r3
 800fd5a:	b909      	cbnz	r1, 800fd60 <__lo0bits+0x32>
 800fd5c:	3008      	adds	r0, #8
 800fd5e:	0a1b      	lsrs	r3, r3, #8
 800fd60:	0719      	lsls	r1, r3, #28
 800fd62:	bf04      	itt	eq
 800fd64:	091b      	lsreq	r3, r3, #4
 800fd66:	3004      	addeq	r0, #4
 800fd68:	0799      	lsls	r1, r3, #30
 800fd6a:	bf04      	itt	eq
 800fd6c:	089b      	lsreq	r3, r3, #2
 800fd6e:	3002      	addeq	r0, #2
 800fd70:	07d9      	lsls	r1, r3, #31
 800fd72:	d403      	bmi.n	800fd7c <__lo0bits+0x4e>
 800fd74:	085b      	lsrs	r3, r3, #1
 800fd76:	f100 0001 	add.w	r0, r0, #1
 800fd7a:	d003      	beq.n	800fd84 <__lo0bits+0x56>
 800fd7c:	6013      	str	r3, [r2, #0]
 800fd7e:	4770      	bx	lr
 800fd80:	2000      	movs	r0, #0
 800fd82:	4770      	bx	lr
 800fd84:	2020      	movs	r0, #32
 800fd86:	4770      	bx	lr

0800fd88 <__i2b>:
 800fd88:	b510      	push	{r4, lr}
 800fd8a:	460c      	mov	r4, r1
 800fd8c:	2101      	movs	r1, #1
 800fd8e:	f7ff febd 	bl	800fb0c <_Balloc>
 800fd92:	4602      	mov	r2, r0
 800fd94:	b928      	cbnz	r0, 800fda2 <__i2b+0x1a>
 800fd96:	4b05      	ldr	r3, [pc, #20]	@ (800fdac <__i2b+0x24>)
 800fd98:	4805      	ldr	r0, [pc, #20]	@ (800fdb0 <__i2b+0x28>)
 800fd9a:	f240 1145 	movw	r1, #325	@ 0x145
 800fd9e:	f001 fbef 	bl	8011580 <__assert_func>
 800fda2:	2301      	movs	r3, #1
 800fda4:	6144      	str	r4, [r0, #20]
 800fda6:	6103      	str	r3, [r0, #16]
 800fda8:	bd10      	pop	{r4, pc}
 800fdaa:	bf00      	nop
 800fdac:	08012a0d 	.word	0x08012a0d
 800fdb0:	08012a1e 	.word	0x08012a1e

0800fdb4 <__multiply>:
 800fdb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdb8:	4614      	mov	r4, r2
 800fdba:	690a      	ldr	r2, [r1, #16]
 800fdbc:	6923      	ldr	r3, [r4, #16]
 800fdbe:	429a      	cmp	r2, r3
 800fdc0:	bfa8      	it	ge
 800fdc2:	4623      	movge	r3, r4
 800fdc4:	460f      	mov	r7, r1
 800fdc6:	bfa4      	itt	ge
 800fdc8:	460c      	movge	r4, r1
 800fdca:	461f      	movge	r7, r3
 800fdcc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800fdd0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800fdd4:	68a3      	ldr	r3, [r4, #8]
 800fdd6:	6861      	ldr	r1, [r4, #4]
 800fdd8:	eb0a 0609 	add.w	r6, sl, r9
 800fddc:	42b3      	cmp	r3, r6
 800fdde:	b085      	sub	sp, #20
 800fde0:	bfb8      	it	lt
 800fde2:	3101      	addlt	r1, #1
 800fde4:	f7ff fe92 	bl	800fb0c <_Balloc>
 800fde8:	b930      	cbnz	r0, 800fdf8 <__multiply+0x44>
 800fdea:	4602      	mov	r2, r0
 800fdec:	4b44      	ldr	r3, [pc, #272]	@ (800ff00 <__multiply+0x14c>)
 800fdee:	4845      	ldr	r0, [pc, #276]	@ (800ff04 <__multiply+0x150>)
 800fdf0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fdf4:	f001 fbc4 	bl	8011580 <__assert_func>
 800fdf8:	f100 0514 	add.w	r5, r0, #20
 800fdfc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fe00:	462b      	mov	r3, r5
 800fe02:	2200      	movs	r2, #0
 800fe04:	4543      	cmp	r3, r8
 800fe06:	d321      	bcc.n	800fe4c <__multiply+0x98>
 800fe08:	f107 0114 	add.w	r1, r7, #20
 800fe0c:	f104 0214 	add.w	r2, r4, #20
 800fe10:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800fe14:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800fe18:	9302      	str	r3, [sp, #8]
 800fe1a:	1b13      	subs	r3, r2, r4
 800fe1c:	3b15      	subs	r3, #21
 800fe1e:	f023 0303 	bic.w	r3, r3, #3
 800fe22:	3304      	adds	r3, #4
 800fe24:	f104 0715 	add.w	r7, r4, #21
 800fe28:	42ba      	cmp	r2, r7
 800fe2a:	bf38      	it	cc
 800fe2c:	2304      	movcc	r3, #4
 800fe2e:	9301      	str	r3, [sp, #4]
 800fe30:	9b02      	ldr	r3, [sp, #8]
 800fe32:	9103      	str	r1, [sp, #12]
 800fe34:	428b      	cmp	r3, r1
 800fe36:	d80c      	bhi.n	800fe52 <__multiply+0x9e>
 800fe38:	2e00      	cmp	r6, #0
 800fe3a:	dd03      	ble.n	800fe44 <__multiply+0x90>
 800fe3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d05b      	beq.n	800fefc <__multiply+0x148>
 800fe44:	6106      	str	r6, [r0, #16]
 800fe46:	b005      	add	sp, #20
 800fe48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe4c:	f843 2b04 	str.w	r2, [r3], #4
 800fe50:	e7d8      	b.n	800fe04 <__multiply+0x50>
 800fe52:	f8b1 a000 	ldrh.w	sl, [r1]
 800fe56:	f1ba 0f00 	cmp.w	sl, #0
 800fe5a:	d024      	beq.n	800fea6 <__multiply+0xf2>
 800fe5c:	f104 0e14 	add.w	lr, r4, #20
 800fe60:	46a9      	mov	r9, r5
 800fe62:	f04f 0c00 	mov.w	ip, #0
 800fe66:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fe6a:	f8d9 3000 	ldr.w	r3, [r9]
 800fe6e:	fa1f fb87 	uxth.w	fp, r7
 800fe72:	b29b      	uxth	r3, r3
 800fe74:	fb0a 330b 	mla	r3, sl, fp, r3
 800fe78:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800fe7c:	f8d9 7000 	ldr.w	r7, [r9]
 800fe80:	4463      	add	r3, ip
 800fe82:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fe86:	fb0a c70b 	mla	r7, sl, fp, ip
 800fe8a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800fe8e:	b29b      	uxth	r3, r3
 800fe90:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fe94:	4572      	cmp	r2, lr
 800fe96:	f849 3b04 	str.w	r3, [r9], #4
 800fe9a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fe9e:	d8e2      	bhi.n	800fe66 <__multiply+0xb2>
 800fea0:	9b01      	ldr	r3, [sp, #4]
 800fea2:	f845 c003 	str.w	ip, [r5, r3]
 800fea6:	9b03      	ldr	r3, [sp, #12]
 800fea8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800feac:	3104      	adds	r1, #4
 800feae:	f1b9 0f00 	cmp.w	r9, #0
 800feb2:	d021      	beq.n	800fef8 <__multiply+0x144>
 800feb4:	682b      	ldr	r3, [r5, #0]
 800feb6:	f104 0c14 	add.w	ip, r4, #20
 800feba:	46ae      	mov	lr, r5
 800febc:	f04f 0a00 	mov.w	sl, #0
 800fec0:	f8bc b000 	ldrh.w	fp, [ip]
 800fec4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800fec8:	fb09 770b 	mla	r7, r9, fp, r7
 800fecc:	4457      	add	r7, sl
 800fece:	b29b      	uxth	r3, r3
 800fed0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fed4:	f84e 3b04 	str.w	r3, [lr], #4
 800fed8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fedc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fee0:	f8be 3000 	ldrh.w	r3, [lr]
 800fee4:	fb09 330a 	mla	r3, r9, sl, r3
 800fee8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800feec:	4562      	cmp	r2, ip
 800feee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fef2:	d8e5      	bhi.n	800fec0 <__multiply+0x10c>
 800fef4:	9f01      	ldr	r7, [sp, #4]
 800fef6:	51eb      	str	r3, [r5, r7]
 800fef8:	3504      	adds	r5, #4
 800fefa:	e799      	b.n	800fe30 <__multiply+0x7c>
 800fefc:	3e01      	subs	r6, #1
 800fefe:	e79b      	b.n	800fe38 <__multiply+0x84>
 800ff00:	08012a0d 	.word	0x08012a0d
 800ff04:	08012a1e 	.word	0x08012a1e

0800ff08 <__pow5mult>:
 800ff08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff0c:	4615      	mov	r5, r2
 800ff0e:	f012 0203 	ands.w	r2, r2, #3
 800ff12:	4607      	mov	r7, r0
 800ff14:	460e      	mov	r6, r1
 800ff16:	d007      	beq.n	800ff28 <__pow5mult+0x20>
 800ff18:	4c25      	ldr	r4, [pc, #148]	@ (800ffb0 <__pow5mult+0xa8>)
 800ff1a:	3a01      	subs	r2, #1
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ff22:	f7ff fe55 	bl	800fbd0 <__multadd>
 800ff26:	4606      	mov	r6, r0
 800ff28:	10ad      	asrs	r5, r5, #2
 800ff2a:	d03d      	beq.n	800ffa8 <__pow5mult+0xa0>
 800ff2c:	69fc      	ldr	r4, [r7, #28]
 800ff2e:	b97c      	cbnz	r4, 800ff50 <__pow5mult+0x48>
 800ff30:	2010      	movs	r0, #16
 800ff32:	f7ff fd35 	bl	800f9a0 <malloc>
 800ff36:	4602      	mov	r2, r0
 800ff38:	61f8      	str	r0, [r7, #28]
 800ff3a:	b928      	cbnz	r0, 800ff48 <__pow5mult+0x40>
 800ff3c:	4b1d      	ldr	r3, [pc, #116]	@ (800ffb4 <__pow5mult+0xac>)
 800ff3e:	481e      	ldr	r0, [pc, #120]	@ (800ffb8 <__pow5mult+0xb0>)
 800ff40:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ff44:	f001 fb1c 	bl	8011580 <__assert_func>
 800ff48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ff4c:	6004      	str	r4, [r0, #0]
 800ff4e:	60c4      	str	r4, [r0, #12]
 800ff50:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ff54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ff58:	b94c      	cbnz	r4, 800ff6e <__pow5mult+0x66>
 800ff5a:	f240 2171 	movw	r1, #625	@ 0x271
 800ff5e:	4638      	mov	r0, r7
 800ff60:	f7ff ff12 	bl	800fd88 <__i2b>
 800ff64:	2300      	movs	r3, #0
 800ff66:	f8c8 0008 	str.w	r0, [r8, #8]
 800ff6a:	4604      	mov	r4, r0
 800ff6c:	6003      	str	r3, [r0, #0]
 800ff6e:	f04f 0900 	mov.w	r9, #0
 800ff72:	07eb      	lsls	r3, r5, #31
 800ff74:	d50a      	bpl.n	800ff8c <__pow5mult+0x84>
 800ff76:	4631      	mov	r1, r6
 800ff78:	4622      	mov	r2, r4
 800ff7a:	4638      	mov	r0, r7
 800ff7c:	f7ff ff1a 	bl	800fdb4 <__multiply>
 800ff80:	4631      	mov	r1, r6
 800ff82:	4680      	mov	r8, r0
 800ff84:	4638      	mov	r0, r7
 800ff86:	f7ff fe01 	bl	800fb8c <_Bfree>
 800ff8a:	4646      	mov	r6, r8
 800ff8c:	106d      	asrs	r5, r5, #1
 800ff8e:	d00b      	beq.n	800ffa8 <__pow5mult+0xa0>
 800ff90:	6820      	ldr	r0, [r4, #0]
 800ff92:	b938      	cbnz	r0, 800ffa4 <__pow5mult+0x9c>
 800ff94:	4622      	mov	r2, r4
 800ff96:	4621      	mov	r1, r4
 800ff98:	4638      	mov	r0, r7
 800ff9a:	f7ff ff0b 	bl	800fdb4 <__multiply>
 800ff9e:	6020      	str	r0, [r4, #0]
 800ffa0:	f8c0 9000 	str.w	r9, [r0]
 800ffa4:	4604      	mov	r4, r0
 800ffa6:	e7e4      	b.n	800ff72 <__pow5mult+0x6a>
 800ffa8:	4630      	mov	r0, r6
 800ffaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffae:	bf00      	nop
 800ffb0:	08012a78 	.word	0x08012a78
 800ffb4:	0801299e 	.word	0x0801299e
 800ffb8:	08012a1e 	.word	0x08012a1e

0800ffbc <__lshift>:
 800ffbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffc0:	460c      	mov	r4, r1
 800ffc2:	6849      	ldr	r1, [r1, #4]
 800ffc4:	6923      	ldr	r3, [r4, #16]
 800ffc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ffca:	68a3      	ldr	r3, [r4, #8]
 800ffcc:	4607      	mov	r7, r0
 800ffce:	4691      	mov	r9, r2
 800ffd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ffd4:	f108 0601 	add.w	r6, r8, #1
 800ffd8:	42b3      	cmp	r3, r6
 800ffda:	db0b      	blt.n	800fff4 <__lshift+0x38>
 800ffdc:	4638      	mov	r0, r7
 800ffde:	f7ff fd95 	bl	800fb0c <_Balloc>
 800ffe2:	4605      	mov	r5, r0
 800ffe4:	b948      	cbnz	r0, 800fffa <__lshift+0x3e>
 800ffe6:	4602      	mov	r2, r0
 800ffe8:	4b28      	ldr	r3, [pc, #160]	@ (801008c <__lshift+0xd0>)
 800ffea:	4829      	ldr	r0, [pc, #164]	@ (8010090 <__lshift+0xd4>)
 800ffec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fff0:	f001 fac6 	bl	8011580 <__assert_func>
 800fff4:	3101      	adds	r1, #1
 800fff6:	005b      	lsls	r3, r3, #1
 800fff8:	e7ee      	b.n	800ffd8 <__lshift+0x1c>
 800fffa:	2300      	movs	r3, #0
 800fffc:	f100 0114 	add.w	r1, r0, #20
 8010000:	f100 0210 	add.w	r2, r0, #16
 8010004:	4618      	mov	r0, r3
 8010006:	4553      	cmp	r3, sl
 8010008:	db33      	blt.n	8010072 <__lshift+0xb6>
 801000a:	6920      	ldr	r0, [r4, #16]
 801000c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010010:	f104 0314 	add.w	r3, r4, #20
 8010014:	f019 091f 	ands.w	r9, r9, #31
 8010018:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801001c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010020:	d02b      	beq.n	801007a <__lshift+0xbe>
 8010022:	f1c9 0e20 	rsb	lr, r9, #32
 8010026:	468a      	mov	sl, r1
 8010028:	2200      	movs	r2, #0
 801002a:	6818      	ldr	r0, [r3, #0]
 801002c:	fa00 f009 	lsl.w	r0, r0, r9
 8010030:	4310      	orrs	r0, r2
 8010032:	f84a 0b04 	str.w	r0, [sl], #4
 8010036:	f853 2b04 	ldr.w	r2, [r3], #4
 801003a:	459c      	cmp	ip, r3
 801003c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010040:	d8f3      	bhi.n	801002a <__lshift+0x6e>
 8010042:	ebac 0304 	sub.w	r3, ip, r4
 8010046:	3b15      	subs	r3, #21
 8010048:	f023 0303 	bic.w	r3, r3, #3
 801004c:	3304      	adds	r3, #4
 801004e:	f104 0015 	add.w	r0, r4, #21
 8010052:	4584      	cmp	ip, r0
 8010054:	bf38      	it	cc
 8010056:	2304      	movcc	r3, #4
 8010058:	50ca      	str	r2, [r1, r3]
 801005a:	b10a      	cbz	r2, 8010060 <__lshift+0xa4>
 801005c:	f108 0602 	add.w	r6, r8, #2
 8010060:	3e01      	subs	r6, #1
 8010062:	4638      	mov	r0, r7
 8010064:	612e      	str	r6, [r5, #16]
 8010066:	4621      	mov	r1, r4
 8010068:	f7ff fd90 	bl	800fb8c <_Bfree>
 801006c:	4628      	mov	r0, r5
 801006e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010072:	f842 0f04 	str.w	r0, [r2, #4]!
 8010076:	3301      	adds	r3, #1
 8010078:	e7c5      	b.n	8010006 <__lshift+0x4a>
 801007a:	3904      	subs	r1, #4
 801007c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010080:	f841 2f04 	str.w	r2, [r1, #4]!
 8010084:	459c      	cmp	ip, r3
 8010086:	d8f9      	bhi.n	801007c <__lshift+0xc0>
 8010088:	e7ea      	b.n	8010060 <__lshift+0xa4>
 801008a:	bf00      	nop
 801008c:	08012a0d 	.word	0x08012a0d
 8010090:	08012a1e 	.word	0x08012a1e

08010094 <__mcmp>:
 8010094:	690a      	ldr	r2, [r1, #16]
 8010096:	4603      	mov	r3, r0
 8010098:	6900      	ldr	r0, [r0, #16]
 801009a:	1a80      	subs	r0, r0, r2
 801009c:	b530      	push	{r4, r5, lr}
 801009e:	d10e      	bne.n	80100be <__mcmp+0x2a>
 80100a0:	3314      	adds	r3, #20
 80100a2:	3114      	adds	r1, #20
 80100a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80100a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80100ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80100b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80100b4:	4295      	cmp	r5, r2
 80100b6:	d003      	beq.n	80100c0 <__mcmp+0x2c>
 80100b8:	d205      	bcs.n	80100c6 <__mcmp+0x32>
 80100ba:	f04f 30ff 	mov.w	r0, #4294967295
 80100be:	bd30      	pop	{r4, r5, pc}
 80100c0:	42a3      	cmp	r3, r4
 80100c2:	d3f3      	bcc.n	80100ac <__mcmp+0x18>
 80100c4:	e7fb      	b.n	80100be <__mcmp+0x2a>
 80100c6:	2001      	movs	r0, #1
 80100c8:	e7f9      	b.n	80100be <__mcmp+0x2a>
	...

080100cc <__mdiff>:
 80100cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100d0:	4689      	mov	r9, r1
 80100d2:	4606      	mov	r6, r0
 80100d4:	4611      	mov	r1, r2
 80100d6:	4648      	mov	r0, r9
 80100d8:	4614      	mov	r4, r2
 80100da:	f7ff ffdb 	bl	8010094 <__mcmp>
 80100de:	1e05      	subs	r5, r0, #0
 80100e0:	d112      	bne.n	8010108 <__mdiff+0x3c>
 80100e2:	4629      	mov	r1, r5
 80100e4:	4630      	mov	r0, r6
 80100e6:	f7ff fd11 	bl	800fb0c <_Balloc>
 80100ea:	4602      	mov	r2, r0
 80100ec:	b928      	cbnz	r0, 80100fa <__mdiff+0x2e>
 80100ee:	4b3f      	ldr	r3, [pc, #252]	@ (80101ec <__mdiff+0x120>)
 80100f0:	f240 2137 	movw	r1, #567	@ 0x237
 80100f4:	483e      	ldr	r0, [pc, #248]	@ (80101f0 <__mdiff+0x124>)
 80100f6:	f001 fa43 	bl	8011580 <__assert_func>
 80100fa:	2301      	movs	r3, #1
 80100fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010100:	4610      	mov	r0, r2
 8010102:	b003      	add	sp, #12
 8010104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010108:	bfbc      	itt	lt
 801010a:	464b      	movlt	r3, r9
 801010c:	46a1      	movlt	r9, r4
 801010e:	4630      	mov	r0, r6
 8010110:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010114:	bfba      	itte	lt
 8010116:	461c      	movlt	r4, r3
 8010118:	2501      	movlt	r5, #1
 801011a:	2500      	movge	r5, #0
 801011c:	f7ff fcf6 	bl	800fb0c <_Balloc>
 8010120:	4602      	mov	r2, r0
 8010122:	b918      	cbnz	r0, 801012c <__mdiff+0x60>
 8010124:	4b31      	ldr	r3, [pc, #196]	@ (80101ec <__mdiff+0x120>)
 8010126:	f240 2145 	movw	r1, #581	@ 0x245
 801012a:	e7e3      	b.n	80100f4 <__mdiff+0x28>
 801012c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010130:	6926      	ldr	r6, [r4, #16]
 8010132:	60c5      	str	r5, [r0, #12]
 8010134:	f109 0310 	add.w	r3, r9, #16
 8010138:	f109 0514 	add.w	r5, r9, #20
 801013c:	f104 0e14 	add.w	lr, r4, #20
 8010140:	f100 0b14 	add.w	fp, r0, #20
 8010144:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010148:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801014c:	9301      	str	r3, [sp, #4]
 801014e:	46d9      	mov	r9, fp
 8010150:	f04f 0c00 	mov.w	ip, #0
 8010154:	9b01      	ldr	r3, [sp, #4]
 8010156:	f85e 0b04 	ldr.w	r0, [lr], #4
 801015a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801015e:	9301      	str	r3, [sp, #4]
 8010160:	fa1f f38a 	uxth.w	r3, sl
 8010164:	4619      	mov	r1, r3
 8010166:	b283      	uxth	r3, r0
 8010168:	1acb      	subs	r3, r1, r3
 801016a:	0c00      	lsrs	r0, r0, #16
 801016c:	4463      	add	r3, ip
 801016e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010172:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010176:	b29b      	uxth	r3, r3
 8010178:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801017c:	4576      	cmp	r6, lr
 801017e:	f849 3b04 	str.w	r3, [r9], #4
 8010182:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010186:	d8e5      	bhi.n	8010154 <__mdiff+0x88>
 8010188:	1b33      	subs	r3, r6, r4
 801018a:	3b15      	subs	r3, #21
 801018c:	f023 0303 	bic.w	r3, r3, #3
 8010190:	3415      	adds	r4, #21
 8010192:	3304      	adds	r3, #4
 8010194:	42a6      	cmp	r6, r4
 8010196:	bf38      	it	cc
 8010198:	2304      	movcc	r3, #4
 801019a:	441d      	add	r5, r3
 801019c:	445b      	add	r3, fp
 801019e:	461e      	mov	r6, r3
 80101a0:	462c      	mov	r4, r5
 80101a2:	4544      	cmp	r4, r8
 80101a4:	d30e      	bcc.n	80101c4 <__mdiff+0xf8>
 80101a6:	f108 0103 	add.w	r1, r8, #3
 80101aa:	1b49      	subs	r1, r1, r5
 80101ac:	f021 0103 	bic.w	r1, r1, #3
 80101b0:	3d03      	subs	r5, #3
 80101b2:	45a8      	cmp	r8, r5
 80101b4:	bf38      	it	cc
 80101b6:	2100      	movcc	r1, #0
 80101b8:	440b      	add	r3, r1
 80101ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80101be:	b191      	cbz	r1, 80101e6 <__mdiff+0x11a>
 80101c0:	6117      	str	r7, [r2, #16]
 80101c2:	e79d      	b.n	8010100 <__mdiff+0x34>
 80101c4:	f854 1b04 	ldr.w	r1, [r4], #4
 80101c8:	46e6      	mov	lr, ip
 80101ca:	0c08      	lsrs	r0, r1, #16
 80101cc:	fa1c fc81 	uxtah	ip, ip, r1
 80101d0:	4471      	add	r1, lr
 80101d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80101d6:	b289      	uxth	r1, r1
 80101d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80101dc:	f846 1b04 	str.w	r1, [r6], #4
 80101e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80101e4:	e7dd      	b.n	80101a2 <__mdiff+0xd6>
 80101e6:	3f01      	subs	r7, #1
 80101e8:	e7e7      	b.n	80101ba <__mdiff+0xee>
 80101ea:	bf00      	nop
 80101ec:	08012a0d 	.word	0x08012a0d
 80101f0:	08012a1e 	.word	0x08012a1e

080101f4 <__ulp>:
 80101f4:	b082      	sub	sp, #8
 80101f6:	ed8d 0b00 	vstr	d0, [sp]
 80101fa:	9a01      	ldr	r2, [sp, #4]
 80101fc:	4b0f      	ldr	r3, [pc, #60]	@ (801023c <__ulp+0x48>)
 80101fe:	4013      	ands	r3, r2
 8010200:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010204:	2b00      	cmp	r3, #0
 8010206:	dc08      	bgt.n	801021a <__ulp+0x26>
 8010208:	425b      	negs	r3, r3
 801020a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801020e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010212:	da04      	bge.n	801021e <__ulp+0x2a>
 8010214:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010218:	4113      	asrs	r3, r2
 801021a:	2200      	movs	r2, #0
 801021c:	e008      	b.n	8010230 <__ulp+0x3c>
 801021e:	f1a2 0314 	sub.w	r3, r2, #20
 8010222:	2b1e      	cmp	r3, #30
 8010224:	bfda      	itte	le
 8010226:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801022a:	40da      	lsrle	r2, r3
 801022c:	2201      	movgt	r2, #1
 801022e:	2300      	movs	r3, #0
 8010230:	4619      	mov	r1, r3
 8010232:	4610      	mov	r0, r2
 8010234:	ec41 0b10 	vmov	d0, r0, r1
 8010238:	b002      	add	sp, #8
 801023a:	4770      	bx	lr
 801023c:	7ff00000 	.word	0x7ff00000

08010240 <__b2d>:
 8010240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010244:	6906      	ldr	r6, [r0, #16]
 8010246:	f100 0814 	add.w	r8, r0, #20
 801024a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801024e:	1f37      	subs	r7, r6, #4
 8010250:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010254:	4610      	mov	r0, r2
 8010256:	f7ff fd4b 	bl	800fcf0 <__hi0bits>
 801025a:	f1c0 0320 	rsb	r3, r0, #32
 801025e:	280a      	cmp	r0, #10
 8010260:	600b      	str	r3, [r1, #0]
 8010262:	491b      	ldr	r1, [pc, #108]	@ (80102d0 <__b2d+0x90>)
 8010264:	dc15      	bgt.n	8010292 <__b2d+0x52>
 8010266:	f1c0 0c0b 	rsb	ip, r0, #11
 801026a:	fa22 f30c 	lsr.w	r3, r2, ip
 801026e:	45b8      	cmp	r8, r7
 8010270:	ea43 0501 	orr.w	r5, r3, r1
 8010274:	bf34      	ite	cc
 8010276:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801027a:	2300      	movcs	r3, #0
 801027c:	3015      	adds	r0, #21
 801027e:	fa02 f000 	lsl.w	r0, r2, r0
 8010282:	fa23 f30c 	lsr.w	r3, r3, ip
 8010286:	4303      	orrs	r3, r0
 8010288:	461c      	mov	r4, r3
 801028a:	ec45 4b10 	vmov	d0, r4, r5
 801028e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010292:	45b8      	cmp	r8, r7
 8010294:	bf3a      	itte	cc
 8010296:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801029a:	f1a6 0708 	subcc.w	r7, r6, #8
 801029e:	2300      	movcs	r3, #0
 80102a0:	380b      	subs	r0, #11
 80102a2:	d012      	beq.n	80102ca <__b2d+0x8a>
 80102a4:	f1c0 0120 	rsb	r1, r0, #32
 80102a8:	fa23 f401 	lsr.w	r4, r3, r1
 80102ac:	4082      	lsls	r2, r0
 80102ae:	4322      	orrs	r2, r4
 80102b0:	4547      	cmp	r7, r8
 80102b2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80102b6:	bf8c      	ite	hi
 80102b8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80102bc:	2200      	movls	r2, #0
 80102be:	4083      	lsls	r3, r0
 80102c0:	40ca      	lsrs	r2, r1
 80102c2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80102c6:	4313      	orrs	r3, r2
 80102c8:	e7de      	b.n	8010288 <__b2d+0x48>
 80102ca:	ea42 0501 	orr.w	r5, r2, r1
 80102ce:	e7db      	b.n	8010288 <__b2d+0x48>
 80102d0:	3ff00000 	.word	0x3ff00000

080102d4 <__d2b>:
 80102d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80102d8:	460f      	mov	r7, r1
 80102da:	2101      	movs	r1, #1
 80102dc:	ec59 8b10 	vmov	r8, r9, d0
 80102e0:	4616      	mov	r6, r2
 80102e2:	f7ff fc13 	bl	800fb0c <_Balloc>
 80102e6:	4604      	mov	r4, r0
 80102e8:	b930      	cbnz	r0, 80102f8 <__d2b+0x24>
 80102ea:	4602      	mov	r2, r0
 80102ec:	4b23      	ldr	r3, [pc, #140]	@ (801037c <__d2b+0xa8>)
 80102ee:	4824      	ldr	r0, [pc, #144]	@ (8010380 <__d2b+0xac>)
 80102f0:	f240 310f 	movw	r1, #783	@ 0x30f
 80102f4:	f001 f944 	bl	8011580 <__assert_func>
 80102f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80102fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010300:	b10d      	cbz	r5, 8010306 <__d2b+0x32>
 8010302:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010306:	9301      	str	r3, [sp, #4]
 8010308:	f1b8 0300 	subs.w	r3, r8, #0
 801030c:	d023      	beq.n	8010356 <__d2b+0x82>
 801030e:	4668      	mov	r0, sp
 8010310:	9300      	str	r3, [sp, #0]
 8010312:	f7ff fd0c 	bl	800fd2e <__lo0bits>
 8010316:	e9dd 1200 	ldrd	r1, r2, [sp]
 801031a:	b1d0      	cbz	r0, 8010352 <__d2b+0x7e>
 801031c:	f1c0 0320 	rsb	r3, r0, #32
 8010320:	fa02 f303 	lsl.w	r3, r2, r3
 8010324:	430b      	orrs	r3, r1
 8010326:	40c2      	lsrs	r2, r0
 8010328:	6163      	str	r3, [r4, #20]
 801032a:	9201      	str	r2, [sp, #4]
 801032c:	9b01      	ldr	r3, [sp, #4]
 801032e:	61a3      	str	r3, [r4, #24]
 8010330:	2b00      	cmp	r3, #0
 8010332:	bf0c      	ite	eq
 8010334:	2201      	moveq	r2, #1
 8010336:	2202      	movne	r2, #2
 8010338:	6122      	str	r2, [r4, #16]
 801033a:	b1a5      	cbz	r5, 8010366 <__d2b+0x92>
 801033c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010340:	4405      	add	r5, r0
 8010342:	603d      	str	r5, [r7, #0]
 8010344:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010348:	6030      	str	r0, [r6, #0]
 801034a:	4620      	mov	r0, r4
 801034c:	b003      	add	sp, #12
 801034e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010352:	6161      	str	r1, [r4, #20]
 8010354:	e7ea      	b.n	801032c <__d2b+0x58>
 8010356:	a801      	add	r0, sp, #4
 8010358:	f7ff fce9 	bl	800fd2e <__lo0bits>
 801035c:	9b01      	ldr	r3, [sp, #4]
 801035e:	6163      	str	r3, [r4, #20]
 8010360:	3020      	adds	r0, #32
 8010362:	2201      	movs	r2, #1
 8010364:	e7e8      	b.n	8010338 <__d2b+0x64>
 8010366:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801036a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801036e:	6038      	str	r0, [r7, #0]
 8010370:	6918      	ldr	r0, [r3, #16]
 8010372:	f7ff fcbd 	bl	800fcf0 <__hi0bits>
 8010376:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801037a:	e7e5      	b.n	8010348 <__d2b+0x74>
 801037c:	08012a0d 	.word	0x08012a0d
 8010380:	08012a1e 	.word	0x08012a1e

08010384 <__ratio>:
 8010384:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010388:	4688      	mov	r8, r1
 801038a:	4669      	mov	r1, sp
 801038c:	4681      	mov	r9, r0
 801038e:	f7ff ff57 	bl	8010240 <__b2d>
 8010392:	a901      	add	r1, sp, #4
 8010394:	4640      	mov	r0, r8
 8010396:	ec55 4b10 	vmov	r4, r5, d0
 801039a:	f7ff ff51 	bl	8010240 <__b2d>
 801039e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80103a2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80103a6:	1ad2      	subs	r2, r2, r3
 80103a8:	e9dd 3100 	ldrd	r3, r1, [sp]
 80103ac:	1a5b      	subs	r3, r3, r1
 80103ae:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80103b2:	ec57 6b10 	vmov	r6, r7, d0
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	bfd6      	itet	le
 80103ba:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80103be:	462a      	movgt	r2, r5
 80103c0:	463a      	movle	r2, r7
 80103c2:	46ab      	mov	fp, r5
 80103c4:	46a2      	mov	sl, r4
 80103c6:	bfce      	itee	gt
 80103c8:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80103cc:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80103d0:	ee00 3a90 	vmovle	s1, r3
 80103d4:	ec4b ab17 	vmov	d7, sl, fp
 80103d8:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80103dc:	b003      	add	sp, #12
 80103de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080103e2 <__copybits>:
 80103e2:	3901      	subs	r1, #1
 80103e4:	b570      	push	{r4, r5, r6, lr}
 80103e6:	1149      	asrs	r1, r1, #5
 80103e8:	6914      	ldr	r4, [r2, #16]
 80103ea:	3101      	adds	r1, #1
 80103ec:	f102 0314 	add.w	r3, r2, #20
 80103f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80103f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80103f8:	1f05      	subs	r5, r0, #4
 80103fa:	42a3      	cmp	r3, r4
 80103fc:	d30c      	bcc.n	8010418 <__copybits+0x36>
 80103fe:	1aa3      	subs	r3, r4, r2
 8010400:	3b11      	subs	r3, #17
 8010402:	f023 0303 	bic.w	r3, r3, #3
 8010406:	3211      	adds	r2, #17
 8010408:	42a2      	cmp	r2, r4
 801040a:	bf88      	it	hi
 801040c:	2300      	movhi	r3, #0
 801040e:	4418      	add	r0, r3
 8010410:	2300      	movs	r3, #0
 8010412:	4288      	cmp	r0, r1
 8010414:	d305      	bcc.n	8010422 <__copybits+0x40>
 8010416:	bd70      	pop	{r4, r5, r6, pc}
 8010418:	f853 6b04 	ldr.w	r6, [r3], #4
 801041c:	f845 6f04 	str.w	r6, [r5, #4]!
 8010420:	e7eb      	b.n	80103fa <__copybits+0x18>
 8010422:	f840 3b04 	str.w	r3, [r0], #4
 8010426:	e7f4      	b.n	8010412 <__copybits+0x30>

08010428 <__any_on>:
 8010428:	f100 0214 	add.w	r2, r0, #20
 801042c:	6900      	ldr	r0, [r0, #16]
 801042e:	114b      	asrs	r3, r1, #5
 8010430:	4298      	cmp	r0, r3
 8010432:	b510      	push	{r4, lr}
 8010434:	db11      	blt.n	801045a <__any_on+0x32>
 8010436:	dd0a      	ble.n	801044e <__any_on+0x26>
 8010438:	f011 011f 	ands.w	r1, r1, #31
 801043c:	d007      	beq.n	801044e <__any_on+0x26>
 801043e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010442:	fa24 f001 	lsr.w	r0, r4, r1
 8010446:	fa00 f101 	lsl.w	r1, r0, r1
 801044a:	428c      	cmp	r4, r1
 801044c:	d10b      	bne.n	8010466 <__any_on+0x3e>
 801044e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010452:	4293      	cmp	r3, r2
 8010454:	d803      	bhi.n	801045e <__any_on+0x36>
 8010456:	2000      	movs	r0, #0
 8010458:	bd10      	pop	{r4, pc}
 801045a:	4603      	mov	r3, r0
 801045c:	e7f7      	b.n	801044e <__any_on+0x26>
 801045e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010462:	2900      	cmp	r1, #0
 8010464:	d0f5      	beq.n	8010452 <__any_on+0x2a>
 8010466:	2001      	movs	r0, #1
 8010468:	e7f6      	b.n	8010458 <__any_on+0x30>

0801046a <sulp>:
 801046a:	b570      	push	{r4, r5, r6, lr}
 801046c:	4604      	mov	r4, r0
 801046e:	460d      	mov	r5, r1
 8010470:	4616      	mov	r6, r2
 8010472:	ec45 4b10 	vmov	d0, r4, r5
 8010476:	f7ff febd 	bl	80101f4 <__ulp>
 801047a:	b17e      	cbz	r6, 801049c <sulp+0x32>
 801047c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010480:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010484:	2b00      	cmp	r3, #0
 8010486:	dd09      	ble.n	801049c <sulp+0x32>
 8010488:	051b      	lsls	r3, r3, #20
 801048a:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801048e:	2000      	movs	r0, #0
 8010490:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8010494:	ec41 0b17 	vmov	d7, r0, r1
 8010498:	ee20 0b07 	vmul.f64	d0, d0, d7
 801049c:	bd70      	pop	{r4, r5, r6, pc}
	...

080104a0 <_strtod_l>:
 80104a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104a4:	ed2d 8b0a 	vpush	{d8-d12}
 80104a8:	b097      	sub	sp, #92	@ 0x5c
 80104aa:	4688      	mov	r8, r1
 80104ac:	920e      	str	r2, [sp, #56]	@ 0x38
 80104ae:	2200      	movs	r2, #0
 80104b0:	9212      	str	r2, [sp, #72]	@ 0x48
 80104b2:	9005      	str	r0, [sp, #20]
 80104b4:	f04f 0a00 	mov.w	sl, #0
 80104b8:	f04f 0b00 	mov.w	fp, #0
 80104bc:	460a      	mov	r2, r1
 80104be:	9211      	str	r2, [sp, #68]	@ 0x44
 80104c0:	7811      	ldrb	r1, [r2, #0]
 80104c2:	292b      	cmp	r1, #43	@ 0x2b
 80104c4:	d04c      	beq.n	8010560 <_strtod_l+0xc0>
 80104c6:	d839      	bhi.n	801053c <_strtod_l+0x9c>
 80104c8:	290d      	cmp	r1, #13
 80104ca:	d833      	bhi.n	8010534 <_strtod_l+0x94>
 80104cc:	2908      	cmp	r1, #8
 80104ce:	d833      	bhi.n	8010538 <_strtod_l+0x98>
 80104d0:	2900      	cmp	r1, #0
 80104d2:	d03c      	beq.n	801054e <_strtod_l+0xae>
 80104d4:	2200      	movs	r2, #0
 80104d6:	9208      	str	r2, [sp, #32]
 80104d8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80104da:	782a      	ldrb	r2, [r5, #0]
 80104dc:	2a30      	cmp	r2, #48	@ 0x30
 80104de:	f040 80b5 	bne.w	801064c <_strtod_l+0x1ac>
 80104e2:	786a      	ldrb	r2, [r5, #1]
 80104e4:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80104e8:	2a58      	cmp	r2, #88	@ 0x58
 80104ea:	d170      	bne.n	80105ce <_strtod_l+0x12e>
 80104ec:	9302      	str	r3, [sp, #8]
 80104ee:	9b08      	ldr	r3, [sp, #32]
 80104f0:	9301      	str	r3, [sp, #4]
 80104f2:	ab12      	add	r3, sp, #72	@ 0x48
 80104f4:	9300      	str	r3, [sp, #0]
 80104f6:	4a8b      	ldr	r2, [pc, #556]	@ (8010724 <_strtod_l+0x284>)
 80104f8:	9805      	ldr	r0, [sp, #20]
 80104fa:	ab13      	add	r3, sp, #76	@ 0x4c
 80104fc:	a911      	add	r1, sp, #68	@ 0x44
 80104fe:	f001 f8d9 	bl	80116b4 <__gethex>
 8010502:	f010 060f 	ands.w	r6, r0, #15
 8010506:	4604      	mov	r4, r0
 8010508:	d005      	beq.n	8010516 <_strtod_l+0x76>
 801050a:	2e06      	cmp	r6, #6
 801050c:	d12a      	bne.n	8010564 <_strtod_l+0xc4>
 801050e:	3501      	adds	r5, #1
 8010510:	2300      	movs	r3, #0
 8010512:	9511      	str	r5, [sp, #68]	@ 0x44
 8010514:	9308      	str	r3, [sp, #32]
 8010516:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010518:	2b00      	cmp	r3, #0
 801051a:	f040 852f 	bne.w	8010f7c <_strtod_l+0xadc>
 801051e:	9b08      	ldr	r3, [sp, #32]
 8010520:	ec4b ab10 	vmov	d0, sl, fp
 8010524:	b1cb      	cbz	r3, 801055a <_strtod_l+0xba>
 8010526:	eeb1 0b40 	vneg.f64	d0, d0
 801052a:	b017      	add	sp, #92	@ 0x5c
 801052c:	ecbd 8b0a 	vpop	{d8-d12}
 8010530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010534:	2920      	cmp	r1, #32
 8010536:	d1cd      	bne.n	80104d4 <_strtod_l+0x34>
 8010538:	3201      	adds	r2, #1
 801053a:	e7c0      	b.n	80104be <_strtod_l+0x1e>
 801053c:	292d      	cmp	r1, #45	@ 0x2d
 801053e:	d1c9      	bne.n	80104d4 <_strtod_l+0x34>
 8010540:	2101      	movs	r1, #1
 8010542:	9108      	str	r1, [sp, #32]
 8010544:	1c51      	adds	r1, r2, #1
 8010546:	9111      	str	r1, [sp, #68]	@ 0x44
 8010548:	7852      	ldrb	r2, [r2, #1]
 801054a:	2a00      	cmp	r2, #0
 801054c:	d1c4      	bne.n	80104d8 <_strtod_l+0x38>
 801054e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010550:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8010554:	2b00      	cmp	r3, #0
 8010556:	f040 850f 	bne.w	8010f78 <_strtod_l+0xad8>
 801055a:	ec4b ab10 	vmov	d0, sl, fp
 801055e:	e7e4      	b.n	801052a <_strtod_l+0x8a>
 8010560:	2100      	movs	r1, #0
 8010562:	e7ee      	b.n	8010542 <_strtod_l+0xa2>
 8010564:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010566:	b13a      	cbz	r2, 8010578 <_strtod_l+0xd8>
 8010568:	2135      	movs	r1, #53	@ 0x35
 801056a:	a814      	add	r0, sp, #80	@ 0x50
 801056c:	f7ff ff39 	bl	80103e2 <__copybits>
 8010570:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010572:	9805      	ldr	r0, [sp, #20]
 8010574:	f7ff fb0a 	bl	800fb8c <_Bfree>
 8010578:	1e73      	subs	r3, r6, #1
 801057a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801057c:	2b04      	cmp	r3, #4
 801057e:	d806      	bhi.n	801058e <_strtod_l+0xee>
 8010580:	e8df f003 	tbb	[pc, r3]
 8010584:	201d0314 	.word	0x201d0314
 8010588:	14          	.byte	0x14
 8010589:	00          	.byte	0x00
 801058a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 801058e:	05e3      	lsls	r3, r4, #23
 8010590:	bf48      	it	mi
 8010592:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8010596:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801059a:	0d1b      	lsrs	r3, r3, #20
 801059c:	051b      	lsls	r3, r3, #20
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d1b9      	bne.n	8010516 <_strtod_l+0x76>
 80105a2:	f7fe fba1 	bl	800ece8 <__errno>
 80105a6:	2322      	movs	r3, #34	@ 0x22
 80105a8:	6003      	str	r3, [r0, #0]
 80105aa:	e7b4      	b.n	8010516 <_strtod_l+0x76>
 80105ac:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 80105b0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80105b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80105b8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80105bc:	e7e7      	b.n	801058e <_strtod_l+0xee>
 80105be:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 801072c <_strtod_l+0x28c>
 80105c2:	e7e4      	b.n	801058e <_strtod_l+0xee>
 80105c4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80105c8:	f04f 3aff 	mov.w	sl, #4294967295
 80105cc:	e7df      	b.n	801058e <_strtod_l+0xee>
 80105ce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80105d0:	1c5a      	adds	r2, r3, #1
 80105d2:	9211      	str	r2, [sp, #68]	@ 0x44
 80105d4:	785b      	ldrb	r3, [r3, #1]
 80105d6:	2b30      	cmp	r3, #48	@ 0x30
 80105d8:	d0f9      	beq.n	80105ce <_strtod_l+0x12e>
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d09b      	beq.n	8010516 <_strtod_l+0x76>
 80105de:	2301      	movs	r3, #1
 80105e0:	2600      	movs	r6, #0
 80105e2:	9307      	str	r3, [sp, #28]
 80105e4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80105e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80105e8:	46b1      	mov	r9, r6
 80105ea:	4635      	mov	r5, r6
 80105ec:	220a      	movs	r2, #10
 80105ee:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80105f0:	7804      	ldrb	r4, [r0, #0]
 80105f2:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80105f6:	b2d9      	uxtb	r1, r3
 80105f8:	2909      	cmp	r1, #9
 80105fa:	d929      	bls.n	8010650 <_strtod_l+0x1b0>
 80105fc:	494a      	ldr	r1, [pc, #296]	@ (8010728 <_strtod_l+0x288>)
 80105fe:	2201      	movs	r2, #1
 8010600:	f000 ff84 	bl	801150c <strncmp>
 8010604:	b378      	cbz	r0, 8010666 <_strtod_l+0x1c6>
 8010606:	2000      	movs	r0, #0
 8010608:	4622      	mov	r2, r4
 801060a:	462b      	mov	r3, r5
 801060c:	4607      	mov	r7, r0
 801060e:	9006      	str	r0, [sp, #24]
 8010610:	2a65      	cmp	r2, #101	@ 0x65
 8010612:	d001      	beq.n	8010618 <_strtod_l+0x178>
 8010614:	2a45      	cmp	r2, #69	@ 0x45
 8010616:	d117      	bne.n	8010648 <_strtod_l+0x1a8>
 8010618:	b91b      	cbnz	r3, 8010622 <_strtod_l+0x182>
 801061a:	9b07      	ldr	r3, [sp, #28]
 801061c:	4303      	orrs	r3, r0
 801061e:	d096      	beq.n	801054e <_strtod_l+0xae>
 8010620:	2300      	movs	r3, #0
 8010622:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8010626:	f108 0201 	add.w	r2, r8, #1
 801062a:	9211      	str	r2, [sp, #68]	@ 0x44
 801062c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8010630:	2a2b      	cmp	r2, #43	@ 0x2b
 8010632:	d06b      	beq.n	801070c <_strtod_l+0x26c>
 8010634:	2a2d      	cmp	r2, #45	@ 0x2d
 8010636:	d071      	beq.n	801071c <_strtod_l+0x27c>
 8010638:	f04f 0e00 	mov.w	lr, #0
 801063c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8010640:	2c09      	cmp	r4, #9
 8010642:	d979      	bls.n	8010738 <_strtod_l+0x298>
 8010644:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8010648:	2400      	movs	r4, #0
 801064a:	e094      	b.n	8010776 <_strtod_l+0x2d6>
 801064c:	2300      	movs	r3, #0
 801064e:	e7c7      	b.n	80105e0 <_strtod_l+0x140>
 8010650:	2d08      	cmp	r5, #8
 8010652:	f100 0001 	add.w	r0, r0, #1
 8010656:	bfd4      	ite	le
 8010658:	fb02 3909 	mlale	r9, r2, r9, r3
 801065c:	fb02 3606 	mlagt	r6, r2, r6, r3
 8010660:	3501      	adds	r5, #1
 8010662:	9011      	str	r0, [sp, #68]	@ 0x44
 8010664:	e7c3      	b.n	80105ee <_strtod_l+0x14e>
 8010666:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010668:	1c5a      	adds	r2, r3, #1
 801066a:	9211      	str	r2, [sp, #68]	@ 0x44
 801066c:	785a      	ldrb	r2, [r3, #1]
 801066e:	b375      	cbz	r5, 80106ce <_strtod_l+0x22e>
 8010670:	4607      	mov	r7, r0
 8010672:	462b      	mov	r3, r5
 8010674:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8010678:	2909      	cmp	r1, #9
 801067a:	d913      	bls.n	80106a4 <_strtod_l+0x204>
 801067c:	2101      	movs	r1, #1
 801067e:	9106      	str	r1, [sp, #24]
 8010680:	e7c6      	b.n	8010610 <_strtod_l+0x170>
 8010682:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010684:	1c5a      	adds	r2, r3, #1
 8010686:	9211      	str	r2, [sp, #68]	@ 0x44
 8010688:	785a      	ldrb	r2, [r3, #1]
 801068a:	3001      	adds	r0, #1
 801068c:	2a30      	cmp	r2, #48	@ 0x30
 801068e:	d0f8      	beq.n	8010682 <_strtod_l+0x1e2>
 8010690:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8010694:	2b08      	cmp	r3, #8
 8010696:	f200 8476 	bhi.w	8010f86 <_strtod_l+0xae6>
 801069a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801069c:	930a      	str	r3, [sp, #40]	@ 0x28
 801069e:	4607      	mov	r7, r0
 80106a0:	2000      	movs	r0, #0
 80106a2:	4603      	mov	r3, r0
 80106a4:	3a30      	subs	r2, #48	@ 0x30
 80106a6:	f100 0101 	add.w	r1, r0, #1
 80106aa:	d023      	beq.n	80106f4 <_strtod_l+0x254>
 80106ac:	440f      	add	r7, r1
 80106ae:	eb00 0c03 	add.w	ip, r0, r3
 80106b2:	4619      	mov	r1, r3
 80106b4:	240a      	movs	r4, #10
 80106b6:	4561      	cmp	r1, ip
 80106b8:	d10b      	bne.n	80106d2 <_strtod_l+0x232>
 80106ba:	1c5c      	adds	r4, r3, #1
 80106bc:	4403      	add	r3, r0
 80106be:	2b08      	cmp	r3, #8
 80106c0:	4404      	add	r4, r0
 80106c2:	dc11      	bgt.n	80106e8 <_strtod_l+0x248>
 80106c4:	230a      	movs	r3, #10
 80106c6:	fb03 2909 	mla	r9, r3, r9, r2
 80106ca:	2100      	movs	r1, #0
 80106cc:	e013      	b.n	80106f6 <_strtod_l+0x256>
 80106ce:	4628      	mov	r0, r5
 80106d0:	e7dc      	b.n	801068c <_strtod_l+0x1ec>
 80106d2:	2908      	cmp	r1, #8
 80106d4:	f101 0101 	add.w	r1, r1, #1
 80106d8:	dc02      	bgt.n	80106e0 <_strtod_l+0x240>
 80106da:	fb04 f909 	mul.w	r9, r4, r9
 80106de:	e7ea      	b.n	80106b6 <_strtod_l+0x216>
 80106e0:	2910      	cmp	r1, #16
 80106e2:	bfd8      	it	le
 80106e4:	4366      	mulle	r6, r4
 80106e6:	e7e6      	b.n	80106b6 <_strtod_l+0x216>
 80106e8:	2b0f      	cmp	r3, #15
 80106ea:	dcee      	bgt.n	80106ca <_strtod_l+0x22a>
 80106ec:	230a      	movs	r3, #10
 80106ee:	fb03 2606 	mla	r6, r3, r6, r2
 80106f2:	e7ea      	b.n	80106ca <_strtod_l+0x22a>
 80106f4:	461c      	mov	r4, r3
 80106f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80106f8:	1c5a      	adds	r2, r3, #1
 80106fa:	9211      	str	r2, [sp, #68]	@ 0x44
 80106fc:	785a      	ldrb	r2, [r3, #1]
 80106fe:	4608      	mov	r0, r1
 8010700:	4623      	mov	r3, r4
 8010702:	e7b7      	b.n	8010674 <_strtod_l+0x1d4>
 8010704:	2301      	movs	r3, #1
 8010706:	2700      	movs	r7, #0
 8010708:	9306      	str	r3, [sp, #24]
 801070a:	e786      	b.n	801061a <_strtod_l+0x17a>
 801070c:	f04f 0e00 	mov.w	lr, #0
 8010710:	f108 0202 	add.w	r2, r8, #2
 8010714:	9211      	str	r2, [sp, #68]	@ 0x44
 8010716:	f898 2002 	ldrb.w	r2, [r8, #2]
 801071a:	e78f      	b.n	801063c <_strtod_l+0x19c>
 801071c:	f04f 0e01 	mov.w	lr, #1
 8010720:	e7f6      	b.n	8010710 <_strtod_l+0x270>
 8010722:	bf00      	nop
 8010724:	08012b90 	.word	0x08012b90
 8010728:	08012b78 	.word	0x08012b78
 801072c:	7ff00000 	.word	0x7ff00000
 8010730:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010732:	1c54      	adds	r4, r2, #1
 8010734:	9411      	str	r4, [sp, #68]	@ 0x44
 8010736:	7852      	ldrb	r2, [r2, #1]
 8010738:	2a30      	cmp	r2, #48	@ 0x30
 801073a:	d0f9      	beq.n	8010730 <_strtod_l+0x290>
 801073c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8010740:	2c08      	cmp	r4, #8
 8010742:	d881      	bhi.n	8010648 <_strtod_l+0x1a8>
 8010744:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8010748:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801074a:	9209      	str	r2, [sp, #36]	@ 0x24
 801074c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801074e:	1c51      	adds	r1, r2, #1
 8010750:	9111      	str	r1, [sp, #68]	@ 0x44
 8010752:	7852      	ldrb	r2, [r2, #1]
 8010754:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8010758:	2c09      	cmp	r4, #9
 801075a:	d938      	bls.n	80107ce <_strtod_l+0x32e>
 801075c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801075e:	1b0c      	subs	r4, r1, r4
 8010760:	2c08      	cmp	r4, #8
 8010762:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8010766:	dc02      	bgt.n	801076e <_strtod_l+0x2ce>
 8010768:	4564      	cmp	r4, ip
 801076a:	bfa8      	it	ge
 801076c:	4664      	movge	r4, ip
 801076e:	f1be 0f00 	cmp.w	lr, #0
 8010772:	d000      	beq.n	8010776 <_strtod_l+0x2d6>
 8010774:	4264      	negs	r4, r4
 8010776:	2b00      	cmp	r3, #0
 8010778:	d14e      	bne.n	8010818 <_strtod_l+0x378>
 801077a:	9b07      	ldr	r3, [sp, #28]
 801077c:	4318      	orrs	r0, r3
 801077e:	f47f aeca 	bne.w	8010516 <_strtod_l+0x76>
 8010782:	9b06      	ldr	r3, [sp, #24]
 8010784:	2b00      	cmp	r3, #0
 8010786:	f47f aee2 	bne.w	801054e <_strtod_l+0xae>
 801078a:	2a69      	cmp	r2, #105	@ 0x69
 801078c:	d027      	beq.n	80107de <_strtod_l+0x33e>
 801078e:	dc24      	bgt.n	80107da <_strtod_l+0x33a>
 8010790:	2a49      	cmp	r2, #73	@ 0x49
 8010792:	d024      	beq.n	80107de <_strtod_l+0x33e>
 8010794:	2a4e      	cmp	r2, #78	@ 0x4e
 8010796:	f47f aeda 	bne.w	801054e <_strtod_l+0xae>
 801079a:	4997      	ldr	r1, [pc, #604]	@ (80109f8 <_strtod_l+0x558>)
 801079c:	a811      	add	r0, sp, #68	@ 0x44
 801079e:	f001 f9ab 	bl	8011af8 <__match>
 80107a2:	2800      	cmp	r0, #0
 80107a4:	f43f aed3 	beq.w	801054e <_strtod_l+0xae>
 80107a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80107aa:	781b      	ldrb	r3, [r3, #0]
 80107ac:	2b28      	cmp	r3, #40	@ 0x28
 80107ae:	d12d      	bne.n	801080c <_strtod_l+0x36c>
 80107b0:	4992      	ldr	r1, [pc, #584]	@ (80109fc <_strtod_l+0x55c>)
 80107b2:	aa14      	add	r2, sp, #80	@ 0x50
 80107b4:	a811      	add	r0, sp, #68	@ 0x44
 80107b6:	f001 f9b3 	bl	8011b20 <__hexnan>
 80107ba:	2805      	cmp	r0, #5
 80107bc:	d126      	bne.n	801080c <_strtod_l+0x36c>
 80107be:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80107c0:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 80107c4:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80107c8:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80107cc:	e6a3      	b.n	8010516 <_strtod_l+0x76>
 80107ce:	240a      	movs	r4, #10
 80107d0:	fb04 2c0c 	mla	ip, r4, ip, r2
 80107d4:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 80107d8:	e7b8      	b.n	801074c <_strtod_l+0x2ac>
 80107da:	2a6e      	cmp	r2, #110	@ 0x6e
 80107dc:	e7db      	b.n	8010796 <_strtod_l+0x2f6>
 80107de:	4988      	ldr	r1, [pc, #544]	@ (8010a00 <_strtod_l+0x560>)
 80107e0:	a811      	add	r0, sp, #68	@ 0x44
 80107e2:	f001 f989 	bl	8011af8 <__match>
 80107e6:	2800      	cmp	r0, #0
 80107e8:	f43f aeb1 	beq.w	801054e <_strtod_l+0xae>
 80107ec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80107ee:	4985      	ldr	r1, [pc, #532]	@ (8010a04 <_strtod_l+0x564>)
 80107f0:	3b01      	subs	r3, #1
 80107f2:	a811      	add	r0, sp, #68	@ 0x44
 80107f4:	9311      	str	r3, [sp, #68]	@ 0x44
 80107f6:	f001 f97f 	bl	8011af8 <__match>
 80107fa:	b910      	cbnz	r0, 8010802 <_strtod_l+0x362>
 80107fc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80107fe:	3301      	adds	r3, #1
 8010800:	9311      	str	r3, [sp, #68]	@ 0x44
 8010802:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8010a18 <_strtod_l+0x578>
 8010806:	f04f 0a00 	mov.w	sl, #0
 801080a:	e684      	b.n	8010516 <_strtod_l+0x76>
 801080c:	487e      	ldr	r0, [pc, #504]	@ (8010a08 <_strtod_l+0x568>)
 801080e:	f000 feaf 	bl	8011570 <nan>
 8010812:	ec5b ab10 	vmov	sl, fp, d0
 8010816:	e67e      	b.n	8010516 <_strtod_l+0x76>
 8010818:	ee07 9a90 	vmov	s15, r9
 801081c:	1be2      	subs	r2, r4, r7
 801081e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010822:	2d00      	cmp	r5, #0
 8010824:	bf08      	it	eq
 8010826:	461d      	moveq	r5, r3
 8010828:	2b10      	cmp	r3, #16
 801082a:	9209      	str	r2, [sp, #36]	@ 0x24
 801082c:	461a      	mov	r2, r3
 801082e:	bfa8      	it	ge
 8010830:	2210      	movge	r2, #16
 8010832:	2b09      	cmp	r3, #9
 8010834:	ec5b ab17 	vmov	sl, fp, d7
 8010838:	dc15      	bgt.n	8010866 <_strtod_l+0x3c6>
 801083a:	1be1      	subs	r1, r4, r7
 801083c:	2900      	cmp	r1, #0
 801083e:	f43f ae6a 	beq.w	8010516 <_strtod_l+0x76>
 8010842:	eba4 0107 	sub.w	r1, r4, r7
 8010846:	dd72      	ble.n	801092e <_strtod_l+0x48e>
 8010848:	2916      	cmp	r1, #22
 801084a:	dc59      	bgt.n	8010900 <_strtod_l+0x460>
 801084c:	4b6f      	ldr	r3, [pc, #444]	@ (8010a0c <_strtod_l+0x56c>)
 801084e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010850:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010854:	ed93 7b00 	vldr	d7, [r3]
 8010858:	ec4b ab16 	vmov	d6, sl, fp
 801085c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010860:	ec5b ab17 	vmov	sl, fp, d7
 8010864:	e657      	b.n	8010516 <_strtod_l+0x76>
 8010866:	4969      	ldr	r1, [pc, #420]	@ (8010a0c <_strtod_l+0x56c>)
 8010868:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801086c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8010870:	ee06 6a90 	vmov	s13, r6
 8010874:	2b0f      	cmp	r3, #15
 8010876:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801087a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801087e:	ec5b ab16 	vmov	sl, fp, d6
 8010882:	ddda      	ble.n	801083a <_strtod_l+0x39a>
 8010884:	1a9a      	subs	r2, r3, r2
 8010886:	1be1      	subs	r1, r4, r7
 8010888:	440a      	add	r2, r1
 801088a:	2a00      	cmp	r2, #0
 801088c:	f340 8094 	ble.w	80109b8 <_strtod_l+0x518>
 8010890:	f012 000f 	ands.w	r0, r2, #15
 8010894:	d00a      	beq.n	80108ac <_strtod_l+0x40c>
 8010896:	495d      	ldr	r1, [pc, #372]	@ (8010a0c <_strtod_l+0x56c>)
 8010898:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801089c:	ed91 7b00 	vldr	d7, [r1]
 80108a0:	ec4b ab16 	vmov	d6, sl, fp
 80108a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80108a8:	ec5b ab17 	vmov	sl, fp, d7
 80108ac:	f032 020f 	bics.w	r2, r2, #15
 80108b0:	d073      	beq.n	801099a <_strtod_l+0x4fa>
 80108b2:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 80108b6:	dd47      	ble.n	8010948 <_strtod_l+0x4a8>
 80108b8:	2400      	movs	r4, #0
 80108ba:	4625      	mov	r5, r4
 80108bc:	9407      	str	r4, [sp, #28]
 80108be:	4626      	mov	r6, r4
 80108c0:	9a05      	ldr	r2, [sp, #20]
 80108c2:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8010a18 <_strtod_l+0x578>
 80108c6:	2322      	movs	r3, #34	@ 0x22
 80108c8:	6013      	str	r3, [r2, #0]
 80108ca:	f04f 0a00 	mov.w	sl, #0
 80108ce:	9b07      	ldr	r3, [sp, #28]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	f43f ae20 	beq.w	8010516 <_strtod_l+0x76>
 80108d6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80108d8:	9805      	ldr	r0, [sp, #20]
 80108da:	f7ff f957 	bl	800fb8c <_Bfree>
 80108de:	9805      	ldr	r0, [sp, #20]
 80108e0:	4631      	mov	r1, r6
 80108e2:	f7ff f953 	bl	800fb8c <_Bfree>
 80108e6:	9805      	ldr	r0, [sp, #20]
 80108e8:	4629      	mov	r1, r5
 80108ea:	f7ff f94f 	bl	800fb8c <_Bfree>
 80108ee:	9907      	ldr	r1, [sp, #28]
 80108f0:	9805      	ldr	r0, [sp, #20]
 80108f2:	f7ff f94b 	bl	800fb8c <_Bfree>
 80108f6:	9805      	ldr	r0, [sp, #20]
 80108f8:	4621      	mov	r1, r4
 80108fa:	f7ff f947 	bl	800fb8c <_Bfree>
 80108fe:	e60a      	b.n	8010516 <_strtod_l+0x76>
 8010900:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8010904:	1be0      	subs	r0, r4, r7
 8010906:	4281      	cmp	r1, r0
 8010908:	dbbc      	blt.n	8010884 <_strtod_l+0x3e4>
 801090a:	4a40      	ldr	r2, [pc, #256]	@ (8010a0c <_strtod_l+0x56c>)
 801090c:	f1c3 030f 	rsb	r3, r3, #15
 8010910:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8010914:	ed91 7b00 	vldr	d7, [r1]
 8010918:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801091a:	ec4b ab16 	vmov	d6, sl, fp
 801091e:	1acb      	subs	r3, r1, r3
 8010920:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010924:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010928:	ed92 6b00 	vldr	d6, [r2]
 801092c:	e796      	b.n	801085c <_strtod_l+0x3bc>
 801092e:	3116      	adds	r1, #22
 8010930:	dba8      	blt.n	8010884 <_strtod_l+0x3e4>
 8010932:	4b36      	ldr	r3, [pc, #216]	@ (8010a0c <_strtod_l+0x56c>)
 8010934:	1b3c      	subs	r4, r7, r4
 8010936:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801093a:	ed94 7b00 	vldr	d7, [r4]
 801093e:	ec4b ab16 	vmov	d6, sl, fp
 8010942:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010946:	e78b      	b.n	8010860 <_strtod_l+0x3c0>
 8010948:	2000      	movs	r0, #0
 801094a:	ec4b ab17 	vmov	d7, sl, fp
 801094e:	4e30      	ldr	r6, [pc, #192]	@ (8010a10 <_strtod_l+0x570>)
 8010950:	1112      	asrs	r2, r2, #4
 8010952:	4601      	mov	r1, r0
 8010954:	2a01      	cmp	r2, #1
 8010956:	dc23      	bgt.n	80109a0 <_strtod_l+0x500>
 8010958:	b108      	cbz	r0, 801095e <_strtod_l+0x4be>
 801095a:	ec5b ab17 	vmov	sl, fp, d7
 801095e:	4a2c      	ldr	r2, [pc, #176]	@ (8010a10 <_strtod_l+0x570>)
 8010960:	482c      	ldr	r0, [pc, #176]	@ (8010a14 <_strtod_l+0x574>)
 8010962:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8010966:	ed92 7b00 	vldr	d7, [r2]
 801096a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801096e:	ec4b ab16 	vmov	d6, sl, fp
 8010972:	4a29      	ldr	r2, [pc, #164]	@ (8010a18 <_strtod_l+0x578>)
 8010974:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010978:	ee17 1a90 	vmov	r1, s15
 801097c:	400a      	ands	r2, r1
 801097e:	4282      	cmp	r2, r0
 8010980:	ec5b ab17 	vmov	sl, fp, d7
 8010984:	d898      	bhi.n	80108b8 <_strtod_l+0x418>
 8010986:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 801098a:	4282      	cmp	r2, r0
 801098c:	bf86      	itte	hi
 801098e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8010a1c <_strtod_l+0x57c>
 8010992:	f04f 3aff 	movhi.w	sl, #4294967295
 8010996:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 801099a:	2200      	movs	r2, #0
 801099c:	9206      	str	r2, [sp, #24]
 801099e:	e076      	b.n	8010a8e <_strtod_l+0x5ee>
 80109a0:	f012 0f01 	tst.w	r2, #1
 80109a4:	d004      	beq.n	80109b0 <_strtod_l+0x510>
 80109a6:	ed96 6b00 	vldr	d6, [r6]
 80109aa:	2001      	movs	r0, #1
 80109ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80109b0:	3101      	adds	r1, #1
 80109b2:	1052      	asrs	r2, r2, #1
 80109b4:	3608      	adds	r6, #8
 80109b6:	e7cd      	b.n	8010954 <_strtod_l+0x4b4>
 80109b8:	d0ef      	beq.n	801099a <_strtod_l+0x4fa>
 80109ba:	4252      	negs	r2, r2
 80109bc:	f012 000f 	ands.w	r0, r2, #15
 80109c0:	d00a      	beq.n	80109d8 <_strtod_l+0x538>
 80109c2:	4912      	ldr	r1, [pc, #72]	@ (8010a0c <_strtod_l+0x56c>)
 80109c4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80109c8:	ed91 7b00 	vldr	d7, [r1]
 80109cc:	ec4b ab16 	vmov	d6, sl, fp
 80109d0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80109d4:	ec5b ab17 	vmov	sl, fp, d7
 80109d8:	1112      	asrs	r2, r2, #4
 80109da:	d0de      	beq.n	801099a <_strtod_l+0x4fa>
 80109dc:	2a1f      	cmp	r2, #31
 80109de:	dd1f      	ble.n	8010a20 <_strtod_l+0x580>
 80109e0:	2400      	movs	r4, #0
 80109e2:	4625      	mov	r5, r4
 80109e4:	9407      	str	r4, [sp, #28]
 80109e6:	4626      	mov	r6, r4
 80109e8:	9a05      	ldr	r2, [sp, #20]
 80109ea:	2322      	movs	r3, #34	@ 0x22
 80109ec:	f04f 0a00 	mov.w	sl, #0
 80109f0:	f04f 0b00 	mov.w	fp, #0
 80109f4:	6013      	str	r3, [r2, #0]
 80109f6:	e76a      	b.n	80108ce <_strtod_l+0x42e>
 80109f8:	08012965 	.word	0x08012965
 80109fc:	08012b7c 	.word	0x08012b7c
 8010a00:	0801295d 	.word	0x0801295d
 8010a04:	08012994 	.word	0x08012994
 8010a08:	08012d25 	.word	0x08012d25
 8010a0c:	08012ab0 	.word	0x08012ab0
 8010a10:	08012a88 	.word	0x08012a88
 8010a14:	7ca00000 	.word	0x7ca00000
 8010a18:	7ff00000 	.word	0x7ff00000
 8010a1c:	7fefffff 	.word	0x7fefffff
 8010a20:	f012 0110 	ands.w	r1, r2, #16
 8010a24:	bf18      	it	ne
 8010a26:	216a      	movne	r1, #106	@ 0x6a
 8010a28:	9106      	str	r1, [sp, #24]
 8010a2a:	ec4b ab17 	vmov	d7, sl, fp
 8010a2e:	49b0      	ldr	r1, [pc, #704]	@ (8010cf0 <_strtod_l+0x850>)
 8010a30:	2000      	movs	r0, #0
 8010a32:	07d6      	lsls	r6, r2, #31
 8010a34:	d504      	bpl.n	8010a40 <_strtod_l+0x5a0>
 8010a36:	ed91 6b00 	vldr	d6, [r1]
 8010a3a:	2001      	movs	r0, #1
 8010a3c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010a40:	1052      	asrs	r2, r2, #1
 8010a42:	f101 0108 	add.w	r1, r1, #8
 8010a46:	d1f4      	bne.n	8010a32 <_strtod_l+0x592>
 8010a48:	b108      	cbz	r0, 8010a4e <_strtod_l+0x5ae>
 8010a4a:	ec5b ab17 	vmov	sl, fp, d7
 8010a4e:	9a06      	ldr	r2, [sp, #24]
 8010a50:	b1b2      	cbz	r2, 8010a80 <_strtod_l+0x5e0>
 8010a52:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8010a56:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8010a5a:	2a00      	cmp	r2, #0
 8010a5c:	4658      	mov	r0, fp
 8010a5e:	dd0f      	ble.n	8010a80 <_strtod_l+0x5e0>
 8010a60:	2a1f      	cmp	r2, #31
 8010a62:	dd55      	ble.n	8010b10 <_strtod_l+0x670>
 8010a64:	2a34      	cmp	r2, #52	@ 0x34
 8010a66:	bfde      	ittt	le
 8010a68:	f04f 32ff 	movle.w	r2, #4294967295
 8010a6c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8010a70:	408a      	lslle	r2, r1
 8010a72:	f04f 0a00 	mov.w	sl, #0
 8010a76:	bfcc      	ite	gt
 8010a78:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8010a7c:	ea02 0b00 	andle.w	fp, r2, r0
 8010a80:	ec4b ab17 	vmov	d7, sl, fp
 8010a84:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a8c:	d0a8      	beq.n	80109e0 <_strtod_l+0x540>
 8010a8e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010a90:	9805      	ldr	r0, [sp, #20]
 8010a92:	f8cd 9000 	str.w	r9, [sp]
 8010a96:	462a      	mov	r2, r5
 8010a98:	f7ff f8e0 	bl	800fc5c <__s2b>
 8010a9c:	9007      	str	r0, [sp, #28]
 8010a9e:	2800      	cmp	r0, #0
 8010aa0:	f43f af0a 	beq.w	80108b8 <_strtod_l+0x418>
 8010aa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010aa6:	1b3f      	subs	r7, r7, r4
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	bfb4      	ite	lt
 8010aac:	463b      	movlt	r3, r7
 8010aae:	2300      	movge	r3, #0
 8010ab0:	930a      	str	r3, [sp, #40]	@ 0x28
 8010ab2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ab4:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8010ce0 <_strtod_l+0x840>
 8010ab8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010abc:	2400      	movs	r4, #0
 8010abe:	930d      	str	r3, [sp, #52]	@ 0x34
 8010ac0:	4625      	mov	r5, r4
 8010ac2:	9b07      	ldr	r3, [sp, #28]
 8010ac4:	9805      	ldr	r0, [sp, #20]
 8010ac6:	6859      	ldr	r1, [r3, #4]
 8010ac8:	f7ff f820 	bl	800fb0c <_Balloc>
 8010acc:	4606      	mov	r6, r0
 8010ace:	2800      	cmp	r0, #0
 8010ad0:	f43f aef6 	beq.w	80108c0 <_strtod_l+0x420>
 8010ad4:	9b07      	ldr	r3, [sp, #28]
 8010ad6:	691a      	ldr	r2, [r3, #16]
 8010ad8:	ec4b ab19 	vmov	d9, sl, fp
 8010adc:	3202      	adds	r2, #2
 8010ade:	f103 010c 	add.w	r1, r3, #12
 8010ae2:	0092      	lsls	r2, r2, #2
 8010ae4:	300c      	adds	r0, #12
 8010ae6:	f000 fd33 	bl	8011550 <memcpy>
 8010aea:	eeb0 0b49 	vmov.f64	d0, d9
 8010aee:	9805      	ldr	r0, [sp, #20]
 8010af0:	aa14      	add	r2, sp, #80	@ 0x50
 8010af2:	a913      	add	r1, sp, #76	@ 0x4c
 8010af4:	f7ff fbee 	bl	80102d4 <__d2b>
 8010af8:	9012      	str	r0, [sp, #72]	@ 0x48
 8010afa:	2800      	cmp	r0, #0
 8010afc:	f43f aee0 	beq.w	80108c0 <_strtod_l+0x420>
 8010b00:	9805      	ldr	r0, [sp, #20]
 8010b02:	2101      	movs	r1, #1
 8010b04:	f7ff f940 	bl	800fd88 <__i2b>
 8010b08:	4605      	mov	r5, r0
 8010b0a:	b940      	cbnz	r0, 8010b1e <_strtod_l+0x67e>
 8010b0c:	2500      	movs	r5, #0
 8010b0e:	e6d7      	b.n	80108c0 <_strtod_l+0x420>
 8010b10:	f04f 31ff 	mov.w	r1, #4294967295
 8010b14:	fa01 f202 	lsl.w	r2, r1, r2
 8010b18:	ea02 0a0a 	and.w	sl, r2, sl
 8010b1c:	e7b0      	b.n	8010a80 <_strtod_l+0x5e0>
 8010b1e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8010b20:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010b22:	2f00      	cmp	r7, #0
 8010b24:	bfab      	itete	ge
 8010b26:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8010b28:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8010b2a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8010b2e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8010b32:	bfac      	ite	ge
 8010b34:	eb07 0903 	addge.w	r9, r7, r3
 8010b38:	eba3 0807 	sublt.w	r8, r3, r7
 8010b3c:	9b06      	ldr	r3, [sp, #24]
 8010b3e:	1aff      	subs	r7, r7, r3
 8010b40:	4417      	add	r7, r2
 8010b42:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8010b46:	4a6b      	ldr	r2, [pc, #428]	@ (8010cf4 <_strtod_l+0x854>)
 8010b48:	3f01      	subs	r7, #1
 8010b4a:	4297      	cmp	r7, r2
 8010b4c:	da51      	bge.n	8010bf2 <_strtod_l+0x752>
 8010b4e:	1bd1      	subs	r1, r2, r7
 8010b50:	291f      	cmp	r1, #31
 8010b52:	eba3 0301 	sub.w	r3, r3, r1
 8010b56:	f04f 0201 	mov.w	r2, #1
 8010b5a:	dc3e      	bgt.n	8010bda <_strtod_l+0x73a>
 8010b5c:	408a      	lsls	r2, r1
 8010b5e:	920c      	str	r2, [sp, #48]	@ 0x30
 8010b60:	2200      	movs	r2, #0
 8010b62:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010b64:	eb09 0703 	add.w	r7, r9, r3
 8010b68:	4498      	add	r8, r3
 8010b6a:	9b06      	ldr	r3, [sp, #24]
 8010b6c:	45b9      	cmp	r9, r7
 8010b6e:	4498      	add	r8, r3
 8010b70:	464b      	mov	r3, r9
 8010b72:	bfa8      	it	ge
 8010b74:	463b      	movge	r3, r7
 8010b76:	4543      	cmp	r3, r8
 8010b78:	bfa8      	it	ge
 8010b7a:	4643      	movge	r3, r8
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	bfc2      	ittt	gt
 8010b80:	1aff      	subgt	r7, r7, r3
 8010b82:	eba8 0803 	subgt.w	r8, r8, r3
 8010b86:	eba9 0903 	subgt.w	r9, r9, r3
 8010b8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	dd16      	ble.n	8010bbe <_strtod_l+0x71e>
 8010b90:	4629      	mov	r1, r5
 8010b92:	9805      	ldr	r0, [sp, #20]
 8010b94:	461a      	mov	r2, r3
 8010b96:	f7ff f9b7 	bl	800ff08 <__pow5mult>
 8010b9a:	4605      	mov	r5, r0
 8010b9c:	2800      	cmp	r0, #0
 8010b9e:	d0b5      	beq.n	8010b0c <_strtod_l+0x66c>
 8010ba0:	4601      	mov	r1, r0
 8010ba2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010ba4:	9805      	ldr	r0, [sp, #20]
 8010ba6:	f7ff f905 	bl	800fdb4 <__multiply>
 8010baa:	900f      	str	r0, [sp, #60]	@ 0x3c
 8010bac:	2800      	cmp	r0, #0
 8010bae:	f43f ae87 	beq.w	80108c0 <_strtod_l+0x420>
 8010bb2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010bb4:	9805      	ldr	r0, [sp, #20]
 8010bb6:	f7fe ffe9 	bl	800fb8c <_Bfree>
 8010bba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010bbc:	9312      	str	r3, [sp, #72]	@ 0x48
 8010bbe:	2f00      	cmp	r7, #0
 8010bc0:	dc1b      	bgt.n	8010bfa <_strtod_l+0x75a>
 8010bc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	dd21      	ble.n	8010c0c <_strtod_l+0x76c>
 8010bc8:	4631      	mov	r1, r6
 8010bca:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010bcc:	9805      	ldr	r0, [sp, #20]
 8010bce:	f7ff f99b 	bl	800ff08 <__pow5mult>
 8010bd2:	4606      	mov	r6, r0
 8010bd4:	b9d0      	cbnz	r0, 8010c0c <_strtod_l+0x76c>
 8010bd6:	2600      	movs	r6, #0
 8010bd8:	e672      	b.n	80108c0 <_strtod_l+0x420>
 8010bda:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8010bde:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8010be2:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8010be6:	37e2      	adds	r7, #226	@ 0xe2
 8010be8:	fa02 f107 	lsl.w	r1, r2, r7
 8010bec:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010bee:	920c      	str	r2, [sp, #48]	@ 0x30
 8010bf0:	e7b8      	b.n	8010b64 <_strtod_l+0x6c4>
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010bf6:	2201      	movs	r2, #1
 8010bf8:	e7f9      	b.n	8010bee <_strtod_l+0x74e>
 8010bfa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010bfc:	9805      	ldr	r0, [sp, #20]
 8010bfe:	463a      	mov	r2, r7
 8010c00:	f7ff f9dc 	bl	800ffbc <__lshift>
 8010c04:	9012      	str	r0, [sp, #72]	@ 0x48
 8010c06:	2800      	cmp	r0, #0
 8010c08:	d1db      	bne.n	8010bc2 <_strtod_l+0x722>
 8010c0a:	e659      	b.n	80108c0 <_strtod_l+0x420>
 8010c0c:	f1b8 0f00 	cmp.w	r8, #0
 8010c10:	dd07      	ble.n	8010c22 <_strtod_l+0x782>
 8010c12:	4631      	mov	r1, r6
 8010c14:	9805      	ldr	r0, [sp, #20]
 8010c16:	4642      	mov	r2, r8
 8010c18:	f7ff f9d0 	bl	800ffbc <__lshift>
 8010c1c:	4606      	mov	r6, r0
 8010c1e:	2800      	cmp	r0, #0
 8010c20:	d0d9      	beq.n	8010bd6 <_strtod_l+0x736>
 8010c22:	f1b9 0f00 	cmp.w	r9, #0
 8010c26:	dd08      	ble.n	8010c3a <_strtod_l+0x79a>
 8010c28:	4629      	mov	r1, r5
 8010c2a:	9805      	ldr	r0, [sp, #20]
 8010c2c:	464a      	mov	r2, r9
 8010c2e:	f7ff f9c5 	bl	800ffbc <__lshift>
 8010c32:	4605      	mov	r5, r0
 8010c34:	2800      	cmp	r0, #0
 8010c36:	f43f ae43 	beq.w	80108c0 <_strtod_l+0x420>
 8010c3a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010c3c:	9805      	ldr	r0, [sp, #20]
 8010c3e:	4632      	mov	r2, r6
 8010c40:	f7ff fa44 	bl	80100cc <__mdiff>
 8010c44:	4604      	mov	r4, r0
 8010c46:	2800      	cmp	r0, #0
 8010c48:	f43f ae3a 	beq.w	80108c0 <_strtod_l+0x420>
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8010c52:	60c3      	str	r3, [r0, #12]
 8010c54:	4629      	mov	r1, r5
 8010c56:	f7ff fa1d 	bl	8010094 <__mcmp>
 8010c5a:	2800      	cmp	r0, #0
 8010c5c:	da4e      	bge.n	8010cfc <_strtod_l+0x85c>
 8010c5e:	ea58 080a 	orrs.w	r8, r8, sl
 8010c62:	d174      	bne.n	8010d4e <_strtod_l+0x8ae>
 8010c64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d170      	bne.n	8010d4e <_strtod_l+0x8ae>
 8010c6c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010c70:	0d1b      	lsrs	r3, r3, #20
 8010c72:	051b      	lsls	r3, r3, #20
 8010c74:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010c78:	d969      	bls.n	8010d4e <_strtod_l+0x8ae>
 8010c7a:	6963      	ldr	r3, [r4, #20]
 8010c7c:	b913      	cbnz	r3, 8010c84 <_strtod_l+0x7e4>
 8010c7e:	6923      	ldr	r3, [r4, #16]
 8010c80:	2b01      	cmp	r3, #1
 8010c82:	dd64      	ble.n	8010d4e <_strtod_l+0x8ae>
 8010c84:	4621      	mov	r1, r4
 8010c86:	2201      	movs	r2, #1
 8010c88:	9805      	ldr	r0, [sp, #20]
 8010c8a:	f7ff f997 	bl	800ffbc <__lshift>
 8010c8e:	4629      	mov	r1, r5
 8010c90:	4604      	mov	r4, r0
 8010c92:	f7ff f9ff 	bl	8010094 <__mcmp>
 8010c96:	2800      	cmp	r0, #0
 8010c98:	dd59      	ble.n	8010d4e <_strtod_l+0x8ae>
 8010c9a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010c9e:	9a06      	ldr	r2, [sp, #24]
 8010ca0:	0d1b      	lsrs	r3, r3, #20
 8010ca2:	051b      	lsls	r3, r3, #20
 8010ca4:	2a00      	cmp	r2, #0
 8010ca6:	d070      	beq.n	8010d8a <_strtod_l+0x8ea>
 8010ca8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010cac:	d86d      	bhi.n	8010d8a <_strtod_l+0x8ea>
 8010cae:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8010cb2:	f67f ae99 	bls.w	80109e8 <_strtod_l+0x548>
 8010cb6:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8010ce8 <_strtod_l+0x848>
 8010cba:	ec4b ab16 	vmov	d6, sl, fp
 8010cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8010cf8 <_strtod_l+0x858>)
 8010cc0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010cc4:	ee17 2a90 	vmov	r2, s15
 8010cc8:	4013      	ands	r3, r2
 8010cca:	ec5b ab17 	vmov	sl, fp, d7
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	f47f ae01 	bne.w	80108d6 <_strtod_l+0x436>
 8010cd4:	9a05      	ldr	r2, [sp, #20]
 8010cd6:	2322      	movs	r3, #34	@ 0x22
 8010cd8:	6013      	str	r3, [r2, #0]
 8010cda:	e5fc      	b.n	80108d6 <_strtod_l+0x436>
 8010cdc:	f3af 8000 	nop.w
 8010ce0:	ffc00000 	.word	0xffc00000
 8010ce4:	41dfffff 	.word	0x41dfffff
 8010ce8:	00000000 	.word	0x00000000
 8010cec:	39500000 	.word	0x39500000
 8010cf0:	08012ba8 	.word	0x08012ba8
 8010cf4:	fffffc02 	.word	0xfffffc02
 8010cf8:	7ff00000 	.word	0x7ff00000
 8010cfc:	46d9      	mov	r9, fp
 8010cfe:	d15d      	bne.n	8010dbc <_strtod_l+0x91c>
 8010d00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010d04:	f1b8 0f00 	cmp.w	r8, #0
 8010d08:	d02a      	beq.n	8010d60 <_strtod_l+0x8c0>
 8010d0a:	4aab      	ldr	r2, [pc, #684]	@ (8010fb8 <_strtod_l+0xb18>)
 8010d0c:	4293      	cmp	r3, r2
 8010d0e:	d12a      	bne.n	8010d66 <_strtod_l+0x8c6>
 8010d10:	9b06      	ldr	r3, [sp, #24]
 8010d12:	4652      	mov	r2, sl
 8010d14:	b1fb      	cbz	r3, 8010d56 <_strtod_l+0x8b6>
 8010d16:	4ba9      	ldr	r3, [pc, #676]	@ (8010fbc <_strtod_l+0xb1c>)
 8010d18:	ea0b 0303 	and.w	r3, fp, r3
 8010d1c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010d20:	f04f 31ff 	mov.w	r1, #4294967295
 8010d24:	d81a      	bhi.n	8010d5c <_strtod_l+0x8bc>
 8010d26:	0d1b      	lsrs	r3, r3, #20
 8010d28:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8010d30:	429a      	cmp	r2, r3
 8010d32:	d118      	bne.n	8010d66 <_strtod_l+0x8c6>
 8010d34:	4ba2      	ldr	r3, [pc, #648]	@ (8010fc0 <_strtod_l+0xb20>)
 8010d36:	4599      	cmp	r9, r3
 8010d38:	d102      	bne.n	8010d40 <_strtod_l+0x8a0>
 8010d3a:	3201      	adds	r2, #1
 8010d3c:	f43f adc0 	beq.w	80108c0 <_strtod_l+0x420>
 8010d40:	4b9e      	ldr	r3, [pc, #632]	@ (8010fbc <_strtod_l+0xb1c>)
 8010d42:	ea09 0303 	and.w	r3, r9, r3
 8010d46:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8010d4a:	f04f 0a00 	mov.w	sl, #0
 8010d4e:	9b06      	ldr	r3, [sp, #24]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d1b0      	bne.n	8010cb6 <_strtod_l+0x816>
 8010d54:	e5bf      	b.n	80108d6 <_strtod_l+0x436>
 8010d56:	f04f 33ff 	mov.w	r3, #4294967295
 8010d5a:	e7e9      	b.n	8010d30 <_strtod_l+0x890>
 8010d5c:	460b      	mov	r3, r1
 8010d5e:	e7e7      	b.n	8010d30 <_strtod_l+0x890>
 8010d60:	ea53 030a 	orrs.w	r3, r3, sl
 8010d64:	d099      	beq.n	8010c9a <_strtod_l+0x7fa>
 8010d66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010d68:	b1c3      	cbz	r3, 8010d9c <_strtod_l+0x8fc>
 8010d6a:	ea13 0f09 	tst.w	r3, r9
 8010d6e:	d0ee      	beq.n	8010d4e <_strtod_l+0x8ae>
 8010d70:	9a06      	ldr	r2, [sp, #24]
 8010d72:	4650      	mov	r0, sl
 8010d74:	4659      	mov	r1, fp
 8010d76:	f1b8 0f00 	cmp.w	r8, #0
 8010d7a:	d013      	beq.n	8010da4 <_strtod_l+0x904>
 8010d7c:	f7ff fb75 	bl	801046a <sulp>
 8010d80:	ee39 7b00 	vadd.f64	d7, d9, d0
 8010d84:	ec5b ab17 	vmov	sl, fp, d7
 8010d88:	e7e1      	b.n	8010d4e <_strtod_l+0x8ae>
 8010d8a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8010d8e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010d92:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010d96:	f04f 3aff 	mov.w	sl, #4294967295
 8010d9a:	e7d8      	b.n	8010d4e <_strtod_l+0x8ae>
 8010d9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010d9e:	ea13 0f0a 	tst.w	r3, sl
 8010da2:	e7e4      	b.n	8010d6e <_strtod_l+0x8ce>
 8010da4:	f7ff fb61 	bl	801046a <sulp>
 8010da8:	ee39 0b40 	vsub.f64	d0, d9, d0
 8010dac:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8010db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010db4:	ec5b ab10 	vmov	sl, fp, d0
 8010db8:	d1c9      	bne.n	8010d4e <_strtod_l+0x8ae>
 8010dba:	e615      	b.n	80109e8 <_strtod_l+0x548>
 8010dbc:	4629      	mov	r1, r5
 8010dbe:	4620      	mov	r0, r4
 8010dc0:	f7ff fae0 	bl	8010384 <__ratio>
 8010dc4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8010dc8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8010dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dd0:	d85d      	bhi.n	8010e8e <_strtod_l+0x9ee>
 8010dd2:	f1b8 0f00 	cmp.w	r8, #0
 8010dd6:	d164      	bne.n	8010ea2 <_strtod_l+0xa02>
 8010dd8:	f1ba 0f00 	cmp.w	sl, #0
 8010ddc:	d14b      	bne.n	8010e76 <_strtod_l+0x9d6>
 8010dde:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010de2:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d160      	bne.n	8010eac <_strtod_l+0xa0c>
 8010dea:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8010dee:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8010df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010df6:	d401      	bmi.n	8010dfc <_strtod_l+0x95c>
 8010df8:	ee20 8b08 	vmul.f64	d8, d0, d8
 8010dfc:	eeb1 ab48 	vneg.f64	d10, d8
 8010e00:	486e      	ldr	r0, [pc, #440]	@ (8010fbc <_strtod_l+0xb1c>)
 8010e02:	4970      	ldr	r1, [pc, #448]	@ (8010fc4 <_strtod_l+0xb24>)
 8010e04:	ea09 0700 	and.w	r7, r9, r0
 8010e08:	428f      	cmp	r7, r1
 8010e0a:	ec53 2b1a 	vmov	r2, r3, d10
 8010e0e:	d17d      	bne.n	8010f0c <_strtod_l+0xa6c>
 8010e10:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8010e14:	ec4b ab1c 	vmov	d12, sl, fp
 8010e18:	eeb0 0b4c 	vmov.f64	d0, d12
 8010e1c:	f7ff f9ea 	bl	80101f4 <__ulp>
 8010e20:	4866      	ldr	r0, [pc, #408]	@ (8010fbc <_strtod_l+0xb1c>)
 8010e22:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8010e26:	ee1c 3a90 	vmov	r3, s25
 8010e2a:	4a67      	ldr	r2, [pc, #412]	@ (8010fc8 <_strtod_l+0xb28>)
 8010e2c:	ea03 0100 	and.w	r1, r3, r0
 8010e30:	4291      	cmp	r1, r2
 8010e32:	ec5b ab1c 	vmov	sl, fp, d12
 8010e36:	d93c      	bls.n	8010eb2 <_strtod_l+0xa12>
 8010e38:	ee19 2a90 	vmov	r2, s19
 8010e3c:	4b60      	ldr	r3, [pc, #384]	@ (8010fc0 <_strtod_l+0xb20>)
 8010e3e:	429a      	cmp	r2, r3
 8010e40:	d104      	bne.n	8010e4c <_strtod_l+0x9ac>
 8010e42:	ee19 3a10 	vmov	r3, s18
 8010e46:	3301      	adds	r3, #1
 8010e48:	f43f ad3a 	beq.w	80108c0 <_strtod_l+0x420>
 8010e4c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8010fc0 <_strtod_l+0xb20>
 8010e50:	f04f 3aff 	mov.w	sl, #4294967295
 8010e54:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010e56:	9805      	ldr	r0, [sp, #20]
 8010e58:	f7fe fe98 	bl	800fb8c <_Bfree>
 8010e5c:	9805      	ldr	r0, [sp, #20]
 8010e5e:	4631      	mov	r1, r6
 8010e60:	f7fe fe94 	bl	800fb8c <_Bfree>
 8010e64:	9805      	ldr	r0, [sp, #20]
 8010e66:	4629      	mov	r1, r5
 8010e68:	f7fe fe90 	bl	800fb8c <_Bfree>
 8010e6c:	9805      	ldr	r0, [sp, #20]
 8010e6e:	4621      	mov	r1, r4
 8010e70:	f7fe fe8c 	bl	800fb8c <_Bfree>
 8010e74:	e625      	b.n	8010ac2 <_strtod_l+0x622>
 8010e76:	f1ba 0f01 	cmp.w	sl, #1
 8010e7a:	d103      	bne.n	8010e84 <_strtod_l+0x9e4>
 8010e7c:	f1bb 0f00 	cmp.w	fp, #0
 8010e80:	f43f adb2 	beq.w	80109e8 <_strtod_l+0x548>
 8010e84:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8010e88:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8010e8c:	e7b8      	b.n	8010e00 <_strtod_l+0x960>
 8010e8e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8010e92:	ee20 8b08 	vmul.f64	d8, d0, d8
 8010e96:	f1b8 0f00 	cmp.w	r8, #0
 8010e9a:	d0af      	beq.n	8010dfc <_strtod_l+0x95c>
 8010e9c:	eeb0 ab48 	vmov.f64	d10, d8
 8010ea0:	e7ae      	b.n	8010e00 <_strtod_l+0x960>
 8010ea2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8010ea6:	eeb0 8b4a 	vmov.f64	d8, d10
 8010eaa:	e7a9      	b.n	8010e00 <_strtod_l+0x960>
 8010eac:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8010eb0:	e7a6      	b.n	8010e00 <_strtod_l+0x960>
 8010eb2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8010eb6:	9b06      	ldr	r3, [sp, #24]
 8010eb8:	46d9      	mov	r9, fp
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d1ca      	bne.n	8010e54 <_strtod_l+0x9b4>
 8010ebe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010ec2:	0d1b      	lsrs	r3, r3, #20
 8010ec4:	051b      	lsls	r3, r3, #20
 8010ec6:	429f      	cmp	r7, r3
 8010ec8:	d1c4      	bne.n	8010e54 <_strtod_l+0x9b4>
 8010eca:	ec51 0b18 	vmov	r0, r1, d8
 8010ece:	f7ef fc33 	bl	8000738 <__aeabi_d2lz>
 8010ed2:	f7ef fbeb 	bl	80006ac <__aeabi_l2d>
 8010ed6:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8010eda:	ec41 0b17 	vmov	d7, r0, r1
 8010ede:	ea49 090a 	orr.w	r9, r9, sl
 8010ee2:	ea59 0908 	orrs.w	r9, r9, r8
 8010ee6:	ee38 8b47 	vsub.f64	d8, d8, d7
 8010eea:	d03c      	beq.n	8010f66 <_strtod_l+0xac6>
 8010eec:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8010fa0 <_strtod_l+0xb00>
 8010ef0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ef8:	f53f aced 	bmi.w	80108d6 <_strtod_l+0x436>
 8010efc:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8010fa8 <_strtod_l+0xb08>
 8010f00:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f08:	dda4      	ble.n	8010e54 <_strtod_l+0x9b4>
 8010f0a:	e4e4      	b.n	80108d6 <_strtod_l+0x436>
 8010f0c:	9906      	ldr	r1, [sp, #24]
 8010f0e:	b1e1      	cbz	r1, 8010f4a <_strtod_l+0xaaa>
 8010f10:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8010f14:	d819      	bhi.n	8010f4a <_strtod_l+0xaaa>
 8010f16:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8010f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f1e:	d811      	bhi.n	8010f44 <_strtod_l+0xaa4>
 8010f20:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8010f24:	ee18 3a10 	vmov	r3, s16
 8010f28:	2b01      	cmp	r3, #1
 8010f2a:	bf38      	it	cc
 8010f2c:	2301      	movcc	r3, #1
 8010f2e:	ee08 3a10 	vmov	s16, r3
 8010f32:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8010f36:	f1b8 0f00 	cmp.w	r8, #0
 8010f3a:	d111      	bne.n	8010f60 <_strtod_l+0xac0>
 8010f3c:	eeb1 7b48 	vneg.f64	d7, d8
 8010f40:	ec53 2b17 	vmov	r2, r3, d7
 8010f44:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8010f48:	1bcb      	subs	r3, r1, r7
 8010f4a:	eeb0 0b49 	vmov.f64	d0, d9
 8010f4e:	ec43 2b1a 	vmov	d10, r2, r3
 8010f52:	f7ff f94f 	bl	80101f4 <__ulp>
 8010f56:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8010f5a:	ec5b ab19 	vmov	sl, fp, d9
 8010f5e:	e7aa      	b.n	8010eb6 <_strtod_l+0xa16>
 8010f60:	eeb0 7b48 	vmov.f64	d7, d8
 8010f64:	e7ec      	b.n	8010f40 <_strtod_l+0xaa0>
 8010f66:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8010fb0 <_strtod_l+0xb10>
 8010f6a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f72:	f57f af6f 	bpl.w	8010e54 <_strtod_l+0x9b4>
 8010f76:	e4ae      	b.n	80108d6 <_strtod_l+0x436>
 8010f78:	2300      	movs	r3, #0
 8010f7a:	9308      	str	r3, [sp, #32]
 8010f7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010f7e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010f80:	6013      	str	r3, [r2, #0]
 8010f82:	f7ff bacc 	b.w	801051e <_strtod_l+0x7e>
 8010f86:	2a65      	cmp	r2, #101	@ 0x65
 8010f88:	f43f abbc 	beq.w	8010704 <_strtod_l+0x264>
 8010f8c:	2a45      	cmp	r2, #69	@ 0x45
 8010f8e:	f43f abb9 	beq.w	8010704 <_strtod_l+0x264>
 8010f92:	2301      	movs	r3, #1
 8010f94:	9306      	str	r3, [sp, #24]
 8010f96:	f7ff bbf0 	b.w	801077a <_strtod_l+0x2da>
 8010f9a:	bf00      	nop
 8010f9c:	f3af 8000 	nop.w
 8010fa0:	94a03595 	.word	0x94a03595
 8010fa4:	3fdfffff 	.word	0x3fdfffff
 8010fa8:	35afe535 	.word	0x35afe535
 8010fac:	3fe00000 	.word	0x3fe00000
 8010fb0:	94a03595 	.word	0x94a03595
 8010fb4:	3fcfffff 	.word	0x3fcfffff
 8010fb8:	000fffff 	.word	0x000fffff
 8010fbc:	7ff00000 	.word	0x7ff00000
 8010fc0:	7fefffff 	.word	0x7fefffff
 8010fc4:	7fe00000 	.word	0x7fe00000
 8010fc8:	7c9fffff 	.word	0x7c9fffff

08010fcc <_strtod_r>:
 8010fcc:	4b01      	ldr	r3, [pc, #4]	@ (8010fd4 <_strtod_r+0x8>)
 8010fce:	f7ff ba67 	b.w	80104a0 <_strtod_l>
 8010fd2:	bf00      	nop
 8010fd4:	2400006c 	.word	0x2400006c

08010fd8 <_strtol_l.constprop.0>:
 8010fd8:	2b24      	cmp	r3, #36	@ 0x24
 8010fda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fde:	4686      	mov	lr, r0
 8010fe0:	4690      	mov	r8, r2
 8010fe2:	d801      	bhi.n	8010fe8 <_strtol_l.constprop.0+0x10>
 8010fe4:	2b01      	cmp	r3, #1
 8010fe6:	d106      	bne.n	8010ff6 <_strtol_l.constprop.0+0x1e>
 8010fe8:	f7fd fe7e 	bl	800ece8 <__errno>
 8010fec:	2316      	movs	r3, #22
 8010fee:	6003      	str	r3, [r0, #0]
 8010ff0:	2000      	movs	r0, #0
 8010ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ff6:	4834      	ldr	r0, [pc, #208]	@ (80110c8 <_strtol_l.constprop.0+0xf0>)
 8010ff8:	460d      	mov	r5, r1
 8010ffa:	462a      	mov	r2, r5
 8010ffc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011000:	5d06      	ldrb	r6, [r0, r4]
 8011002:	f016 0608 	ands.w	r6, r6, #8
 8011006:	d1f8      	bne.n	8010ffa <_strtol_l.constprop.0+0x22>
 8011008:	2c2d      	cmp	r4, #45	@ 0x2d
 801100a:	d12d      	bne.n	8011068 <_strtol_l.constprop.0+0x90>
 801100c:	782c      	ldrb	r4, [r5, #0]
 801100e:	2601      	movs	r6, #1
 8011010:	1c95      	adds	r5, r2, #2
 8011012:	f033 0210 	bics.w	r2, r3, #16
 8011016:	d109      	bne.n	801102c <_strtol_l.constprop.0+0x54>
 8011018:	2c30      	cmp	r4, #48	@ 0x30
 801101a:	d12a      	bne.n	8011072 <_strtol_l.constprop.0+0x9a>
 801101c:	782a      	ldrb	r2, [r5, #0]
 801101e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011022:	2a58      	cmp	r2, #88	@ 0x58
 8011024:	d125      	bne.n	8011072 <_strtol_l.constprop.0+0x9a>
 8011026:	786c      	ldrb	r4, [r5, #1]
 8011028:	2310      	movs	r3, #16
 801102a:	3502      	adds	r5, #2
 801102c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011030:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011034:	2200      	movs	r2, #0
 8011036:	fbbc f9f3 	udiv	r9, ip, r3
 801103a:	4610      	mov	r0, r2
 801103c:	fb03 ca19 	mls	sl, r3, r9, ip
 8011040:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011044:	2f09      	cmp	r7, #9
 8011046:	d81b      	bhi.n	8011080 <_strtol_l.constprop.0+0xa8>
 8011048:	463c      	mov	r4, r7
 801104a:	42a3      	cmp	r3, r4
 801104c:	dd27      	ble.n	801109e <_strtol_l.constprop.0+0xc6>
 801104e:	1c57      	adds	r7, r2, #1
 8011050:	d007      	beq.n	8011062 <_strtol_l.constprop.0+0x8a>
 8011052:	4581      	cmp	r9, r0
 8011054:	d320      	bcc.n	8011098 <_strtol_l.constprop.0+0xc0>
 8011056:	d101      	bne.n	801105c <_strtol_l.constprop.0+0x84>
 8011058:	45a2      	cmp	sl, r4
 801105a:	db1d      	blt.n	8011098 <_strtol_l.constprop.0+0xc0>
 801105c:	fb00 4003 	mla	r0, r0, r3, r4
 8011060:	2201      	movs	r2, #1
 8011062:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011066:	e7eb      	b.n	8011040 <_strtol_l.constprop.0+0x68>
 8011068:	2c2b      	cmp	r4, #43	@ 0x2b
 801106a:	bf04      	itt	eq
 801106c:	782c      	ldrbeq	r4, [r5, #0]
 801106e:	1c95      	addeq	r5, r2, #2
 8011070:	e7cf      	b.n	8011012 <_strtol_l.constprop.0+0x3a>
 8011072:	2b00      	cmp	r3, #0
 8011074:	d1da      	bne.n	801102c <_strtol_l.constprop.0+0x54>
 8011076:	2c30      	cmp	r4, #48	@ 0x30
 8011078:	bf0c      	ite	eq
 801107a:	2308      	moveq	r3, #8
 801107c:	230a      	movne	r3, #10
 801107e:	e7d5      	b.n	801102c <_strtol_l.constprop.0+0x54>
 8011080:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011084:	2f19      	cmp	r7, #25
 8011086:	d801      	bhi.n	801108c <_strtol_l.constprop.0+0xb4>
 8011088:	3c37      	subs	r4, #55	@ 0x37
 801108a:	e7de      	b.n	801104a <_strtol_l.constprop.0+0x72>
 801108c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011090:	2f19      	cmp	r7, #25
 8011092:	d804      	bhi.n	801109e <_strtol_l.constprop.0+0xc6>
 8011094:	3c57      	subs	r4, #87	@ 0x57
 8011096:	e7d8      	b.n	801104a <_strtol_l.constprop.0+0x72>
 8011098:	f04f 32ff 	mov.w	r2, #4294967295
 801109c:	e7e1      	b.n	8011062 <_strtol_l.constprop.0+0x8a>
 801109e:	1c53      	adds	r3, r2, #1
 80110a0:	d108      	bne.n	80110b4 <_strtol_l.constprop.0+0xdc>
 80110a2:	2322      	movs	r3, #34	@ 0x22
 80110a4:	f8ce 3000 	str.w	r3, [lr]
 80110a8:	4660      	mov	r0, ip
 80110aa:	f1b8 0f00 	cmp.w	r8, #0
 80110ae:	d0a0      	beq.n	8010ff2 <_strtol_l.constprop.0+0x1a>
 80110b0:	1e69      	subs	r1, r5, #1
 80110b2:	e006      	b.n	80110c2 <_strtol_l.constprop.0+0xea>
 80110b4:	b106      	cbz	r6, 80110b8 <_strtol_l.constprop.0+0xe0>
 80110b6:	4240      	negs	r0, r0
 80110b8:	f1b8 0f00 	cmp.w	r8, #0
 80110bc:	d099      	beq.n	8010ff2 <_strtol_l.constprop.0+0x1a>
 80110be:	2a00      	cmp	r2, #0
 80110c0:	d1f6      	bne.n	80110b0 <_strtol_l.constprop.0+0xd8>
 80110c2:	f8c8 1000 	str.w	r1, [r8]
 80110c6:	e794      	b.n	8010ff2 <_strtol_l.constprop.0+0x1a>
 80110c8:	08012bd1 	.word	0x08012bd1

080110cc <_strtol_r>:
 80110cc:	f7ff bf84 	b.w	8010fd8 <_strtol_l.constprop.0>

080110d0 <__ssputs_r>:
 80110d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110d4:	688e      	ldr	r6, [r1, #8]
 80110d6:	461f      	mov	r7, r3
 80110d8:	42be      	cmp	r6, r7
 80110da:	680b      	ldr	r3, [r1, #0]
 80110dc:	4682      	mov	sl, r0
 80110de:	460c      	mov	r4, r1
 80110e0:	4690      	mov	r8, r2
 80110e2:	d82d      	bhi.n	8011140 <__ssputs_r+0x70>
 80110e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80110e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80110ec:	d026      	beq.n	801113c <__ssputs_r+0x6c>
 80110ee:	6965      	ldr	r5, [r4, #20]
 80110f0:	6909      	ldr	r1, [r1, #16]
 80110f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80110f6:	eba3 0901 	sub.w	r9, r3, r1
 80110fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80110fe:	1c7b      	adds	r3, r7, #1
 8011100:	444b      	add	r3, r9
 8011102:	106d      	asrs	r5, r5, #1
 8011104:	429d      	cmp	r5, r3
 8011106:	bf38      	it	cc
 8011108:	461d      	movcc	r5, r3
 801110a:	0553      	lsls	r3, r2, #21
 801110c:	d527      	bpl.n	801115e <__ssputs_r+0x8e>
 801110e:	4629      	mov	r1, r5
 8011110:	f7fe fc70 	bl	800f9f4 <_malloc_r>
 8011114:	4606      	mov	r6, r0
 8011116:	b360      	cbz	r0, 8011172 <__ssputs_r+0xa2>
 8011118:	6921      	ldr	r1, [r4, #16]
 801111a:	464a      	mov	r2, r9
 801111c:	f000 fa18 	bl	8011550 <memcpy>
 8011120:	89a3      	ldrh	r3, [r4, #12]
 8011122:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011126:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801112a:	81a3      	strh	r3, [r4, #12]
 801112c:	6126      	str	r6, [r4, #16]
 801112e:	6165      	str	r5, [r4, #20]
 8011130:	444e      	add	r6, r9
 8011132:	eba5 0509 	sub.w	r5, r5, r9
 8011136:	6026      	str	r6, [r4, #0]
 8011138:	60a5      	str	r5, [r4, #8]
 801113a:	463e      	mov	r6, r7
 801113c:	42be      	cmp	r6, r7
 801113e:	d900      	bls.n	8011142 <__ssputs_r+0x72>
 8011140:	463e      	mov	r6, r7
 8011142:	6820      	ldr	r0, [r4, #0]
 8011144:	4632      	mov	r2, r6
 8011146:	4641      	mov	r1, r8
 8011148:	f000 f9c6 	bl	80114d8 <memmove>
 801114c:	68a3      	ldr	r3, [r4, #8]
 801114e:	1b9b      	subs	r3, r3, r6
 8011150:	60a3      	str	r3, [r4, #8]
 8011152:	6823      	ldr	r3, [r4, #0]
 8011154:	4433      	add	r3, r6
 8011156:	6023      	str	r3, [r4, #0]
 8011158:	2000      	movs	r0, #0
 801115a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801115e:	462a      	mov	r2, r5
 8011160:	f000 fd8b 	bl	8011c7a <_realloc_r>
 8011164:	4606      	mov	r6, r0
 8011166:	2800      	cmp	r0, #0
 8011168:	d1e0      	bne.n	801112c <__ssputs_r+0x5c>
 801116a:	6921      	ldr	r1, [r4, #16]
 801116c:	4650      	mov	r0, sl
 801116e:	f7fe fbcd 	bl	800f90c <_free_r>
 8011172:	230c      	movs	r3, #12
 8011174:	f8ca 3000 	str.w	r3, [sl]
 8011178:	89a3      	ldrh	r3, [r4, #12]
 801117a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801117e:	81a3      	strh	r3, [r4, #12]
 8011180:	f04f 30ff 	mov.w	r0, #4294967295
 8011184:	e7e9      	b.n	801115a <__ssputs_r+0x8a>
	...

08011188 <_svfiprintf_r>:
 8011188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801118c:	4698      	mov	r8, r3
 801118e:	898b      	ldrh	r3, [r1, #12]
 8011190:	061b      	lsls	r3, r3, #24
 8011192:	b09d      	sub	sp, #116	@ 0x74
 8011194:	4607      	mov	r7, r0
 8011196:	460d      	mov	r5, r1
 8011198:	4614      	mov	r4, r2
 801119a:	d510      	bpl.n	80111be <_svfiprintf_r+0x36>
 801119c:	690b      	ldr	r3, [r1, #16]
 801119e:	b973      	cbnz	r3, 80111be <_svfiprintf_r+0x36>
 80111a0:	2140      	movs	r1, #64	@ 0x40
 80111a2:	f7fe fc27 	bl	800f9f4 <_malloc_r>
 80111a6:	6028      	str	r0, [r5, #0]
 80111a8:	6128      	str	r0, [r5, #16]
 80111aa:	b930      	cbnz	r0, 80111ba <_svfiprintf_r+0x32>
 80111ac:	230c      	movs	r3, #12
 80111ae:	603b      	str	r3, [r7, #0]
 80111b0:	f04f 30ff 	mov.w	r0, #4294967295
 80111b4:	b01d      	add	sp, #116	@ 0x74
 80111b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111ba:	2340      	movs	r3, #64	@ 0x40
 80111bc:	616b      	str	r3, [r5, #20]
 80111be:	2300      	movs	r3, #0
 80111c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80111c2:	2320      	movs	r3, #32
 80111c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80111c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80111cc:	2330      	movs	r3, #48	@ 0x30
 80111ce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801136c <_svfiprintf_r+0x1e4>
 80111d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80111d6:	f04f 0901 	mov.w	r9, #1
 80111da:	4623      	mov	r3, r4
 80111dc:	469a      	mov	sl, r3
 80111de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111e2:	b10a      	cbz	r2, 80111e8 <_svfiprintf_r+0x60>
 80111e4:	2a25      	cmp	r2, #37	@ 0x25
 80111e6:	d1f9      	bne.n	80111dc <_svfiprintf_r+0x54>
 80111e8:	ebba 0b04 	subs.w	fp, sl, r4
 80111ec:	d00b      	beq.n	8011206 <_svfiprintf_r+0x7e>
 80111ee:	465b      	mov	r3, fp
 80111f0:	4622      	mov	r2, r4
 80111f2:	4629      	mov	r1, r5
 80111f4:	4638      	mov	r0, r7
 80111f6:	f7ff ff6b 	bl	80110d0 <__ssputs_r>
 80111fa:	3001      	adds	r0, #1
 80111fc:	f000 80a7 	beq.w	801134e <_svfiprintf_r+0x1c6>
 8011200:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011202:	445a      	add	r2, fp
 8011204:	9209      	str	r2, [sp, #36]	@ 0x24
 8011206:	f89a 3000 	ldrb.w	r3, [sl]
 801120a:	2b00      	cmp	r3, #0
 801120c:	f000 809f 	beq.w	801134e <_svfiprintf_r+0x1c6>
 8011210:	2300      	movs	r3, #0
 8011212:	f04f 32ff 	mov.w	r2, #4294967295
 8011216:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801121a:	f10a 0a01 	add.w	sl, sl, #1
 801121e:	9304      	str	r3, [sp, #16]
 8011220:	9307      	str	r3, [sp, #28]
 8011222:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011226:	931a      	str	r3, [sp, #104]	@ 0x68
 8011228:	4654      	mov	r4, sl
 801122a:	2205      	movs	r2, #5
 801122c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011230:	484e      	ldr	r0, [pc, #312]	@ (801136c <_svfiprintf_r+0x1e4>)
 8011232:	f7ef f855 	bl	80002e0 <memchr>
 8011236:	9a04      	ldr	r2, [sp, #16]
 8011238:	b9d8      	cbnz	r0, 8011272 <_svfiprintf_r+0xea>
 801123a:	06d0      	lsls	r0, r2, #27
 801123c:	bf44      	itt	mi
 801123e:	2320      	movmi	r3, #32
 8011240:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011244:	0711      	lsls	r1, r2, #28
 8011246:	bf44      	itt	mi
 8011248:	232b      	movmi	r3, #43	@ 0x2b
 801124a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801124e:	f89a 3000 	ldrb.w	r3, [sl]
 8011252:	2b2a      	cmp	r3, #42	@ 0x2a
 8011254:	d015      	beq.n	8011282 <_svfiprintf_r+0xfa>
 8011256:	9a07      	ldr	r2, [sp, #28]
 8011258:	4654      	mov	r4, sl
 801125a:	2000      	movs	r0, #0
 801125c:	f04f 0c0a 	mov.w	ip, #10
 8011260:	4621      	mov	r1, r4
 8011262:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011266:	3b30      	subs	r3, #48	@ 0x30
 8011268:	2b09      	cmp	r3, #9
 801126a:	d94b      	bls.n	8011304 <_svfiprintf_r+0x17c>
 801126c:	b1b0      	cbz	r0, 801129c <_svfiprintf_r+0x114>
 801126e:	9207      	str	r2, [sp, #28]
 8011270:	e014      	b.n	801129c <_svfiprintf_r+0x114>
 8011272:	eba0 0308 	sub.w	r3, r0, r8
 8011276:	fa09 f303 	lsl.w	r3, r9, r3
 801127a:	4313      	orrs	r3, r2
 801127c:	9304      	str	r3, [sp, #16]
 801127e:	46a2      	mov	sl, r4
 8011280:	e7d2      	b.n	8011228 <_svfiprintf_r+0xa0>
 8011282:	9b03      	ldr	r3, [sp, #12]
 8011284:	1d19      	adds	r1, r3, #4
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	9103      	str	r1, [sp, #12]
 801128a:	2b00      	cmp	r3, #0
 801128c:	bfbb      	ittet	lt
 801128e:	425b      	neglt	r3, r3
 8011290:	f042 0202 	orrlt.w	r2, r2, #2
 8011294:	9307      	strge	r3, [sp, #28]
 8011296:	9307      	strlt	r3, [sp, #28]
 8011298:	bfb8      	it	lt
 801129a:	9204      	strlt	r2, [sp, #16]
 801129c:	7823      	ldrb	r3, [r4, #0]
 801129e:	2b2e      	cmp	r3, #46	@ 0x2e
 80112a0:	d10a      	bne.n	80112b8 <_svfiprintf_r+0x130>
 80112a2:	7863      	ldrb	r3, [r4, #1]
 80112a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80112a6:	d132      	bne.n	801130e <_svfiprintf_r+0x186>
 80112a8:	9b03      	ldr	r3, [sp, #12]
 80112aa:	1d1a      	adds	r2, r3, #4
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	9203      	str	r2, [sp, #12]
 80112b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80112b4:	3402      	adds	r4, #2
 80112b6:	9305      	str	r3, [sp, #20]
 80112b8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801137c <_svfiprintf_r+0x1f4>
 80112bc:	7821      	ldrb	r1, [r4, #0]
 80112be:	2203      	movs	r2, #3
 80112c0:	4650      	mov	r0, sl
 80112c2:	f7ef f80d 	bl	80002e0 <memchr>
 80112c6:	b138      	cbz	r0, 80112d8 <_svfiprintf_r+0x150>
 80112c8:	9b04      	ldr	r3, [sp, #16]
 80112ca:	eba0 000a 	sub.w	r0, r0, sl
 80112ce:	2240      	movs	r2, #64	@ 0x40
 80112d0:	4082      	lsls	r2, r0
 80112d2:	4313      	orrs	r3, r2
 80112d4:	3401      	adds	r4, #1
 80112d6:	9304      	str	r3, [sp, #16]
 80112d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112dc:	4824      	ldr	r0, [pc, #144]	@ (8011370 <_svfiprintf_r+0x1e8>)
 80112de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80112e2:	2206      	movs	r2, #6
 80112e4:	f7ee fffc 	bl	80002e0 <memchr>
 80112e8:	2800      	cmp	r0, #0
 80112ea:	d036      	beq.n	801135a <_svfiprintf_r+0x1d2>
 80112ec:	4b21      	ldr	r3, [pc, #132]	@ (8011374 <_svfiprintf_r+0x1ec>)
 80112ee:	bb1b      	cbnz	r3, 8011338 <_svfiprintf_r+0x1b0>
 80112f0:	9b03      	ldr	r3, [sp, #12]
 80112f2:	3307      	adds	r3, #7
 80112f4:	f023 0307 	bic.w	r3, r3, #7
 80112f8:	3308      	adds	r3, #8
 80112fa:	9303      	str	r3, [sp, #12]
 80112fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112fe:	4433      	add	r3, r6
 8011300:	9309      	str	r3, [sp, #36]	@ 0x24
 8011302:	e76a      	b.n	80111da <_svfiprintf_r+0x52>
 8011304:	fb0c 3202 	mla	r2, ip, r2, r3
 8011308:	460c      	mov	r4, r1
 801130a:	2001      	movs	r0, #1
 801130c:	e7a8      	b.n	8011260 <_svfiprintf_r+0xd8>
 801130e:	2300      	movs	r3, #0
 8011310:	3401      	adds	r4, #1
 8011312:	9305      	str	r3, [sp, #20]
 8011314:	4619      	mov	r1, r3
 8011316:	f04f 0c0a 	mov.w	ip, #10
 801131a:	4620      	mov	r0, r4
 801131c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011320:	3a30      	subs	r2, #48	@ 0x30
 8011322:	2a09      	cmp	r2, #9
 8011324:	d903      	bls.n	801132e <_svfiprintf_r+0x1a6>
 8011326:	2b00      	cmp	r3, #0
 8011328:	d0c6      	beq.n	80112b8 <_svfiprintf_r+0x130>
 801132a:	9105      	str	r1, [sp, #20]
 801132c:	e7c4      	b.n	80112b8 <_svfiprintf_r+0x130>
 801132e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011332:	4604      	mov	r4, r0
 8011334:	2301      	movs	r3, #1
 8011336:	e7f0      	b.n	801131a <_svfiprintf_r+0x192>
 8011338:	ab03      	add	r3, sp, #12
 801133a:	9300      	str	r3, [sp, #0]
 801133c:	462a      	mov	r2, r5
 801133e:	4b0e      	ldr	r3, [pc, #56]	@ (8011378 <_svfiprintf_r+0x1f0>)
 8011340:	a904      	add	r1, sp, #16
 8011342:	4638      	mov	r0, r7
 8011344:	f7fc fda4 	bl	800de90 <_printf_float>
 8011348:	1c42      	adds	r2, r0, #1
 801134a:	4606      	mov	r6, r0
 801134c:	d1d6      	bne.n	80112fc <_svfiprintf_r+0x174>
 801134e:	89ab      	ldrh	r3, [r5, #12]
 8011350:	065b      	lsls	r3, r3, #25
 8011352:	f53f af2d 	bmi.w	80111b0 <_svfiprintf_r+0x28>
 8011356:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011358:	e72c      	b.n	80111b4 <_svfiprintf_r+0x2c>
 801135a:	ab03      	add	r3, sp, #12
 801135c:	9300      	str	r3, [sp, #0]
 801135e:	462a      	mov	r2, r5
 8011360:	4b05      	ldr	r3, [pc, #20]	@ (8011378 <_svfiprintf_r+0x1f0>)
 8011362:	a904      	add	r1, sp, #16
 8011364:	4638      	mov	r0, r7
 8011366:	f7fd f81b 	bl	800e3a0 <_printf_i>
 801136a:	e7ed      	b.n	8011348 <_svfiprintf_r+0x1c0>
 801136c:	08012cd1 	.word	0x08012cd1
 8011370:	08012cdb 	.word	0x08012cdb
 8011374:	0800de91 	.word	0x0800de91
 8011378:	080110d1 	.word	0x080110d1
 801137c:	08012cd7 	.word	0x08012cd7

08011380 <__sflush_r>:
 8011380:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011388:	0716      	lsls	r6, r2, #28
 801138a:	4605      	mov	r5, r0
 801138c:	460c      	mov	r4, r1
 801138e:	d454      	bmi.n	801143a <__sflush_r+0xba>
 8011390:	684b      	ldr	r3, [r1, #4]
 8011392:	2b00      	cmp	r3, #0
 8011394:	dc02      	bgt.n	801139c <__sflush_r+0x1c>
 8011396:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011398:	2b00      	cmp	r3, #0
 801139a:	dd48      	ble.n	801142e <__sflush_r+0xae>
 801139c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801139e:	2e00      	cmp	r6, #0
 80113a0:	d045      	beq.n	801142e <__sflush_r+0xae>
 80113a2:	2300      	movs	r3, #0
 80113a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80113a8:	682f      	ldr	r7, [r5, #0]
 80113aa:	6a21      	ldr	r1, [r4, #32]
 80113ac:	602b      	str	r3, [r5, #0]
 80113ae:	d030      	beq.n	8011412 <__sflush_r+0x92>
 80113b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80113b2:	89a3      	ldrh	r3, [r4, #12]
 80113b4:	0759      	lsls	r1, r3, #29
 80113b6:	d505      	bpl.n	80113c4 <__sflush_r+0x44>
 80113b8:	6863      	ldr	r3, [r4, #4]
 80113ba:	1ad2      	subs	r2, r2, r3
 80113bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80113be:	b10b      	cbz	r3, 80113c4 <__sflush_r+0x44>
 80113c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80113c2:	1ad2      	subs	r2, r2, r3
 80113c4:	2300      	movs	r3, #0
 80113c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80113c8:	6a21      	ldr	r1, [r4, #32]
 80113ca:	4628      	mov	r0, r5
 80113cc:	47b0      	blx	r6
 80113ce:	1c43      	adds	r3, r0, #1
 80113d0:	89a3      	ldrh	r3, [r4, #12]
 80113d2:	d106      	bne.n	80113e2 <__sflush_r+0x62>
 80113d4:	6829      	ldr	r1, [r5, #0]
 80113d6:	291d      	cmp	r1, #29
 80113d8:	d82b      	bhi.n	8011432 <__sflush_r+0xb2>
 80113da:	4a2a      	ldr	r2, [pc, #168]	@ (8011484 <__sflush_r+0x104>)
 80113dc:	410a      	asrs	r2, r1
 80113de:	07d6      	lsls	r6, r2, #31
 80113e0:	d427      	bmi.n	8011432 <__sflush_r+0xb2>
 80113e2:	2200      	movs	r2, #0
 80113e4:	6062      	str	r2, [r4, #4]
 80113e6:	04d9      	lsls	r1, r3, #19
 80113e8:	6922      	ldr	r2, [r4, #16]
 80113ea:	6022      	str	r2, [r4, #0]
 80113ec:	d504      	bpl.n	80113f8 <__sflush_r+0x78>
 80113ee:	1c42      	adds	r2, r0, #1
 80113f0:	d101      	bne.n	80113f6 <__sflush_r+0x76>
 80113f2:	682b      	ldr	r3, [r5, #0]
 80113f4:	b903      	cbnz	r3, 80113f8 <__sflush_r+0x78>
 80113f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80113f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80113fa:	602f      	str	r7, [r5, #0]
 80113fc:	b1b9      	cbz	r1, 801142e <__sflush_r+0xae>
 80113fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011402:	4299      	cmp	r1, r3
 8011404:	d002      	beq.n	801140c <__sflush_r+0x8c>
 8011406:	4628      	mov	r0, r5
 8011408:	f7fe fa80 	bl	800f90c <_free_r>
 801140c:	2300      	movs	r3, #0
 801140e:	6363      	str	r3, [r4, #52]	@ 0x34
 8011410:	e00d      	b.n	801142e <__sflush_r+0xae>
 8011412:	2301      	movs	r3, #1
 8011414:	4628      	mov	r0, r5
 8011416:	47b0      	blx	r6
 8011418:	4602      	mov	r2, r0
 801141a:	1c50      	adds	r0, r2, #1
 801141c:	d1c9      	bne.n	80113b2 <__sflush_r+0x32>
 801141e:	682b      	ldr	r3, [r5, #0]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d0c6      	beq.n	80113b2 <__sflush_r+0x32>
 8011424:	2b1d      	cmp	r3, #29
 8011426:	d001      	beq.n	801142c <__sflush_r+0xac>
 8011428:	2b16      	cmp	r3, #22
 801142a:	d11e      	bne.n	801146a <__sflush_r+0xea>
 801142c:	602f      	str	r7, [r5, #0]
 801142e:	2000      	movs	r0, #0
 8011430:	e022      	b.n	8011478 <__sflush_r+0xf8>
 8011432:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011436:	b21b      	sxth	r3, r3
 8011438:	e01b      	b.n	8011472 <__sflush_r+0xf2>
 801143a:	690f      	ldr	r7, [r1, #16]
 801143c:	2f00      	cmp	r7, #0
 801143e:	d0f6      	beq.n	801142e <__sflush_r+0xae>
 8011440:	0793      	lsls	r3, r2, #30
 8011442:	680e      	ldr	r6, [r1, #0]
 8011444:	bf08      	it	eq
 8011446:	694b      	ldreq	r3, [r1, #20]
 8011448:	600f      	str	r7, [r1, #0]
 801144a:	bf18      	it	ne
 801144c:	2300      	movne	r3, #0
 801144e:	eba6 0807 	sub.w	r8, r6, r7
 8011452:	608b      	str	r3, [r1, #8]
 8011454:	f1b8 0f00 	cmp.w	r8, #0
 8011458:	dde9      	ble.n	801142e <__sflush_r+0xae>
 801145a:	6a21      	ldr	r1, [r4, #32]
 801145c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801145e:	4643      	mov	r3, r8
 8011460:	463a      	mov	r2, r7
 8011462:	4628      	mov	r0, r5
 8011464:	47b0      	blx	r6
 8011466:	2800      	cmp	r0, #0
 8011468:	dc08      	bgt.n	801147c <__sflush_r+0xfc>
 801146a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801146e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011472:	81a3      	strh	r3, [r4, #12]
 8011474:	f04f 30ff 	mov.w	r0, #4294967295
 8011478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801147c:	4407      	add	r7, r0
 801147e:	eba8 0800 	sub.w	r8, r8, r0
 8011482:	e7e7      	b.n	8011454 <__sflush_r+0xd4>
 8011484:	dfbffffe 	.word	0xdfbffffe

08011488 <_fflush_r>:
 8011488:	b538      	push	{r3, r4, r5, lr}
 801148a:	690b      	ldr	r3, [r1, #16]
 801148c:	4605      	mov	r5, r0
 801148e:	460c      	mov	r4, r1
 8011490:	b913      	cbnz	r3, 8011498 <_fflush_r+0x10>
 8011492:	2500      	movs	r5, #0
 8011494:	4628      	mov	r0, r5
 8011496:	bd38      	pop	{r3, r4, r5, pc}
 8011498:	b118      	cbz	r0, 80114a2 <_fflush_r+0x1a>
 801149a:	6a03      	ldr	r3, [r0, #32]
 801149c:	b90b      	cbnz	r3, 80114a2 <_fflush_r+0x1a>
 801149e:	f7fd fb37 	bl	800eb10 <__sinit>
 80114a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d0f3      	beq.n	8011492 <_fflush_r+0xa>
 80114aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80114ac:	07d0      	lsls	r0, r2, #31
 80114ae:	d404      	bmi.n	80114ba <_fflush_r+0x32>
 80114b0:	0599      	lsls	r1, r3, #22
 80114b2:	d402      	bmi.n	80114ba <_fflush_r+0x32>
 80114b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80114b6:	f7fd fc42 	bl	800ed3e <__retarget_lock_acquire_recursive>
 80114ba:	4628      	mov	r0, r5
 80114bc:	4621      	mov	r1, r4
 80114be:	f7ff ff5f 	bl	8011380 <__sflush_r>
 80114c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80114c4:	07da      	lsls	r2, r3, #31
 80114c6:	4605      	mov	r5, r0
 80114c8:	d4e4      	bmi.n	8011494 <_fflush_r+0xc>
 80114ca:	89a3      	ldrh	r3, [r4, #12]
 80114cc:	059b      	lsls	r3, r3, #22
 80114ce:	d4e1      	bmi.n	8011494 <_fflush_r+0xc>
 80114d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80114d2:	f7fd fc35 	bl	800ed40 <__retarget_lock_release_recursive>
 80114d6:	e7dd      	b.n	8011494 <_fflush_r+0xc>

080114d8 <memmove>:
 80114d8:	4288      	cmp	r0, r1
 80114da:	b510      	push	{r4, lr}
 80114dc:	eb01 0402 	add.w	r4, r1, r2
 80114e0:	d902      	bls.n	80114e8 <memmove+0x10>
 80114e2:	4284      	cmp	r4, r0
 80114e4:	4623      	mov	r3, r4
 80114e6:	d807      	bhi.n	80114f8 <memmove+0x20>
 80114e8:	1e43      	subs	r3, r0, #1
 80114ea:	42a1      	cmp	r1, r4
 80114ec:	d008      	beq.n	8011500 <memmove+0x28>
 80114ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80114f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80114f6:	e7f8      	b.n	80114ea <memmove+0x12>
 80114f8:	4402      	add	r2, r0
 80114fa:	4601      	mov	r1, r0
 80114fc:	428a      	cmp	r2, r1
 80114fe:	d100      	bne.n	8011502 <memmove+0x2a>
 8011500:	bd10      	pop	{r4, pc}
 8011502:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011506:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801150a:	e7f7      	b.n	80114fc <memmove+0x24>

0801150c <strncmp>:
 801150c:	b510      	push	{r4, lr}
 801150e:	b16a      	cbz	r2, 801152c <strncmp+0x20>
 8011510:	3901      	subs	r1, #1
 8011512:	1884      	adds	r4, r0, r2
 8011514:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011518:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801151c:	429a      	cmp	r2, r3
 801151e:	d103      	bne.n	8011528 <strncmp+0x1c>
 8011520:	42a0      	cmp	r0, r4
 8011522:	d001      	beq.n	8011528 <strncmp+0x1c>
 8011524:	2a00      	cmp	r2, #0
 8011526:	d1f5      	bne.n	8011514 <strncmp+0x8>
 8011528:	1ad0      	subs	r0, r2, r3
 801152a:	bd10      	pop	{r4, pc}
 801152c:	4610      	mov	r0, r2
 801152e:	e7fc      	b.n	801152a <strncmp+0x1e>

08011530 <_sbrk_r>:
 8011530:	b538      	push	{r3, r4, r5, lr}
 8011532:	4d06      	ldr	r5, [pc, #24]	@ (801154c <_sbrk_r+0x1c>)
 8011534:	2300      	movs	r3, #0
 8011536:	4604      	mov	r4, r0
 8011538:	4608      	mov	r0, r1
 801153a:	602b      	str	r3, [r5, #0]
 801153c:	f7f0 fa38 	bl	80019b0 <_sbrk>
 8011540:	1c43      	adds	r3, r0, #1
 8011542:	d102      	bne.n	801154a <_sbrk_r+0x1a>
 8011544:	682b      	ldr	r3, [r5, #0]
 8011546:	b103      	cbz	r3, 801154a <_sbrk_r+0x1a>
 8011548:	6023      	str	r3, [r4, #0]
 801154a:	bd38      	pop	{r3, r4, r5, pc}
 801154c:	24000570 	.word	0x24000570

08011550 <memcpy>:
 8011550:	440a      	add	r2, r1
 8011552:	4291      	cmp	r1, r2
 8011554:	f100 33ff 	add.w	r3, r0, #4294967295
 8011558:	d100      	bne.n	801155c <memcpy+0xc>
 801155a:	4770      	bx	lr
 801155c:	b510      	push	{r4, lr}
 801155e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011562:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011566:	4291      	cmp	r1, r2
 8011568:	d1f9      	bne.n	801155e <memcpy+0xe>
 801156a:	bd10      	pop	{r4, pc}
 801156c:	0000      	movs	r0, r0
	...

08011570 <nan>:
 8011570:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011578 <nan+0x8>
 8011574:	4770      	bx	lr
 8011576:	bf00      	nop
 8011578:	00000000 	.word	0x00000000
 801157c:	7ff80000 	.word	0x7ff80000

08011580 <__assert_func>:
 8011580:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011582:	4614      	mov	r4, r2
 8011584:	461a      	mov	r2, r3
 8011586:	4b09      	ldr	r3, [pc, #36]	@ (80115ac <__assert_func+0x2c>)
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	4605      	mov	r5, r0
 801158c:	68d8      	ldr	r0, [r3, #12]
 801158e:	b954      	cbnz	r4, 80115a6 <__assert_func+0x26>
 8011590:	4b07      	ldr	r3, [pc, #28]	@ (80115b0 <__assert_func+0x30>)
 8011592:	461c      	mov	r4, r3
 8011594:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011598:	9100      	str	r1, [sp, #0]
 801159a:	462b      	mov	r3, r5
 801159c:	4905      	ldr	r1, [pc, #20]	@ (80115b4 <__assert_func+0x34>)
 801159e:	f000 fba7 	bl	8011cf0 <fiprintf>
 80115a2:	f000 fbb7 	bl	8011d14 <abort>
 80115a6:	4b04      	ldr	r3, [pc, #16]	@ (80115b8 <__assert_func+0x38>)
 80115a8:	e7f4      	b.n	8011594 <__assert_func+0x14>
 80115aa:	bf00      	nop
 80115ac:	2400001c 	.word	0x2400001c
 80115b0:	08012d25 	.word	0x08012d25
 80115b4:	08012cf7 	.word	0x08012cf7
 80115b8:	08012cea 	.word	0x08012cea

080115bc <_calloc_r>:
 80115bc:	b570      	push	{r4, r5, r6, lr}
 80115be:	fba1 5402 	umull	r5, r4, r1, r2
 80115c2:	b93c      	cbnz	r4, 80115d4 <_calloc_r+0x18>
 80115c4:	4629      	mov	r1, r5
 80115c6:	f7fe fa15 	bl	800f9f4 <_malloc_r>
 80115ca:	4606      	mov	r6, r0
 80115cc:	b928      	cbnz	r0, 80115da <_calloc_r+0x1e>
 80115ce:	2600      	movs	r6, #0
 80115d0:	4630      	mov	r0, r6
 80115d2:	bd70      	pop	{r4, r5, r6, pc}
 80115d4:	220c      	movs	r2, #12
 80115d6:	6002      	str	r2, [r0, #0]
 80115d8:	e7f9      	b.n	80115ce <_calloc_r+0x12>
 80115da:	462a      	mov	r2, r5
 80115dc:	4621      	mov	r1, r4
 80115de:	f7fd fb30 	bl	800ec42 <memset>
 80115e2:	e7f5      	b.n	80115d0 <_calloc_r+0x14>

080115e4 <rshift>:
 80115e4:	6903      	ldr	r3, [r0, #16]
 80115e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80115ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80115ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 80115f2:	f100 0414 	add.w	r4, r0, #20
 80115f6:	dd45      	ble.n	8011684 <rshift+0xa0>
 80115f8:	f011 011f 	ands.w	r1, r1, #31
 80115fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011600:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011604:	d10c      	bne.n	8011620 <rshift+0x3c>
 8011606:	f100 0710 	add.w	r7, r0, #16
 801160a:	4629      	mov	r1, r5
 801160c:	42b1      	cmp	r1, r6
 801160e:	d334      	bcc.n	801167a <rshift+0x96>
 8011610:	1a9b      	subs	r3, r3, r2
 8011612:	009b      	lsls	r3, r3, #2
 8011614:	1eea      	subs	r2, r5, #3
 8011616:	4296      	cmp	r6, r2
 8011618:	bf38      	it	cc
 801161a:	2300      	movcc	r3, #0
 801161c:	4423      	add	r3, r4
 801161e:	e015      	b.n	801164c <rshift+0x68>
 8011620:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011624:	f1c1 0820 	rsb	r8, r1, #32
 8011628:	40cf      	lsrs	r7, r1
 801162a:	f105 0e04 	add.w	lr, r5, #4
 801162e:	46a1      	mov	r9, r4
 8011630:	4576      	cmp	r6, lr
 8011632:	46f4      	mov	ip, lr
 8011634:	d815      	bhi.n	8011662 <rshift+0x7e>
 8011636:	1a9a      	subs	r2, r3, r2
 8011638:	0092      	lsls	r2, r2, #2
 801163a:	3a04      	subs	r2, #4
 801163c:	3501      	adds	r5, #1
 801163e:	42ae      	cmp	r6, r5
 8011640:	bf38      	it	cc
 8011642:	2200      	movcc	r2, #0
 8011644:	18a3      	adds	r3, r4, r2
 8011646:	50a7      	str	r7, [r4, r2]
 8011648:	b107      	cbz	r7, 801164c <rshift+0x68>
 801164a:	3304      	adds	r3, #4
 801164c:	1b1a      	subs	r2, r3, r4
 801164e:	42a3      	cmp	r3, r4
 8011650:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011654:	bf08      	it	eq
 8011656:	2300      	moveq	r3, #0
 8011658:	6102      	str	r2, [r0, #16]
 801165a:	bf08      	it	eq
 801165c:	6143      	streq	r3, [r0, #20]
 801165e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011662:	f8dc c000 	ldr.w	ip, [ip]
 8011666:	fa0c fc08 	lsl.w	ip, ip, r8
 801166a:	ea4c 0707 	orr.w	r7, ip, r7
 801166e:	f849 7b04 	str.w	r7, [r9], #4
 8011672:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011676:	40cf      	lsrs	r7, r1
 8011678:	e7da      	b.n	8011630 <rshift+0x4c>
 801167a:	f851 cb04 	ldr.w	ip, [r1], #4
 801167e:	f847 cf04 	str.w	ip, [r7, #4]!
 8011682:	e7c3      	b.n	801160c <rshift+0x28>
 8011684:	4623      	mov	r3, r4
 8011686:	e7e1      	b.n	801164c <rshift+0x68>

08011688 <__hexdig_fun>:
 8011688:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801168c:	2b09      	cmp	r3, #9
 801168e:	d802      	bhi.n	8011696 <__hexdig_fun+0xe>
 8011690:	3820      	subs	r0, #32
 8011692:	b2c0      	uxtb	r0, r0
 8011694:	4770      	bx	lr
 8011696:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801169a:	2b05      	cmp	r3, #5
 801169c:	d801      	bhi.n	80116a2 <__hexdig_fun+0x1a>
 801169e:	3847      	subs	r0, #71	@ 0x47
 80116a0:	e7f7      	b.n	8011692 <__hexdig_fun+0xa>
 80116a2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80116a6:	2b05      	cmp	r3, #5
 80116a8:	d801      	bhi.n	80116ae <__hexdig_fun+0x26>
 80116aa:	3827      	subs	r0, #39	@ 0x27
 80116ac:	e7f1      	b.n	8011692 <__hexdig_fun+0xa>
 80116ae:	2000      	movs	r0, #0
 80116b0:	4770      	bx	lr
	...

080116b4 <__gethex>:
 80116b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116b8:	b085      	sub	sp, #20
 80116ba:	468a      	mov	sl, r1
 80116bc:	9302      	str	r3, [sp, #8]
 80116be:	680b      	ldr	r3, [r1, #0]
 80116c0:	9001      	str	r0, [sp, #4]
 80116c2:	4690      	mov	r8, r2
 80116c4:	1c9c      	adds	r4, r3, #2
 80116c6:	46a1      	mov	r9, r4
 80116c8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80116cc:	2830      	cmp	r0, #48	@ 0x30
 80116ce:	d0fa      	beq.n	80116c6 <__gethex+0x12>
 80116d0:	eba9 0303 	sub.w	r3, r9, r3
 80116d4:	f1a3 0b02 	sub.w	fp, r3, #2
 80116d8:	f7ff ffd6 	bl	8011688 <__hexdig_fun>
 80116dc:	4605      	mov	r5, r0
 80116de:	2800      	cmp	r0, #0
 80116e0:	d168      	bne.n	80117b4 <__gethex+0x100>
 80116e2:	49a0      	ldr	r1, [pc, #640]	@ (8011964 <__gethex+0x2b0>)
 80116e4:	2201      	movs	r2, #1
 80116e6:	4648      	mov	r0, r9
 80116e8:	f7ff ff10 	bl	801150c <strncmp>
 80116ec:	4607      	mov	r7, r0
 80116ee:	2800      	cmp	r0, #0
 80116f0:	d167      	bne.n	80117c2 <__gethex+0x10e>
 80116f2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80116f6:	4626      	mov	r6, r4
 80116f8:	f7ff ffc6 	bl	8011688 <__hexdig_fun>
 80116fc:	2800      	cmp	r0, #0
 80116fe:	d062      	beq.n	80117c6 <__gethex+0x112>
 8011700:	4623      	mov	r3, r4
 8011702:	7818      	ldrb	r0, [r3, #0]
 8011704:	2830      	cmp	r0, #48	@ 0x30
 8011706:	4699      	mov	r9, r3
 8011708:	f103 0301 	add.w	r3, r3, #1
 801170c:	d0f9      	beq.n	8011702 <__gethex+0x4e>
 801170e:	f7ff ffbb 	bl	8011688 <__hexdig_fun>
 8011712:	fab0 f580 	clz	r5, r0
 8011716:	096d      	lsrs	r5, r5, #5
 8011718:	f04f 0b01 	mov.w	fp, #1
 801171c:	464a      	mov	r2, r9
 801171e:	4616      	mov	r6, r2
 8011720:	3201      	adds	r2, #1
 8011722:	7830      	ldrb	r0, [r6, #0]
 8011724:	f7ff ffb0 	bl	8011688 <__hexdig_fun>
 8011728:	2800      	cmp	r0, #0
 801172a:	d1f8      	bne.n	801171e <__gethex+0x6a>
 801172c:	498d      	ldr	r1, [pc, #564]	@ (8011964 <__gethex+0x2b0>)
 801172e:	2201      	movs	r2, #1
 8011730:	4630      	mov	r0, r6
 8011732:	f7ff feeb 	bl	801150c <strncmp>
 8011736:	2800      	cmp	r0, #0
 8011738:	d13f      	bne.n	80117ba <__gethex+0x106>
 801173a:	b944      	cbnz	r4, 801174e <__gethex+0x9a>
 801173c:	1c74      	adds	r4, r6, #1
 801173e:	4622      	mov	r2, r4
 8011740:	4616      	mov	r6, r2
 8011742:	3201      	adds	r2, #1
 8011744:	7830      	ldrb	r0, [r6, #0]
 8011746:	f7ff ff9f 	bl	8011688 <__hexdig_fun>
 801174a:	2800      	cmp	r0, #0
 801174c:	d1f8      	bne.n	8011740 <__gethex+0x8c>
 801174e:	1ba4      	subs	r4, r4, r6
 8011750:	00a7      	lsls	r7, r4, #2
 8011752:	7833      	ldrb	r3, [r6, #0]
 8011754:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011758:	2b50      	cmp	r3, #80	@ 0x50
 801175a:	d13e      	bne.n	80117da <__gethex+0x126>
 801175c:	7873      	ldrb	r3, [r6, #1]
 801175e:	2b2b      	cmp	r3, #43	@ 0x2b
 8011760:	d033      	beq.n	80117ca <__gethex+0x116>
 8011762:	2b2d      	cmp	r3, #45	@ 0x2d
 8011764:	d034      	beq.n	80117d0 <__gethex+0x11c>
 8011766:	1c71      	adds	r1, r6, #1
 8011768:	2400      	movs	r4, #0
 801176a:	7808      	ldrb	r0, [r1, #0]
 801176c:	f7ff ff8c 	bl	8011688 <__hexdig_fun>
 8011770:	1e43      	subs	r3, r0, #1
 8011772:	b2db      	uxtb	r3, r3
 8011774:	2b18      	cmp	r3, #24
 8011776:	d830      	bhi.n	80117da <__gethex+0x126>
 8011778:	f1a0 0210 	sub.w	r2, r0, #16
 801177c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011780:	f7ff ff82 	bl	8011688 <__hexdig_fun>
 8011784:	f100 3cff 	add.w	ip, r0, #4294967295
 8011788:	fa5f fc8c 	uxtb.w	ip, ip
 801178c:	f1bc 0f18 	cmp.w	ip, #24
 8011790:	f04f 030a 	mov.w	r3, #10
 8011794:	d91e      	bls.n	80117d4 <__gethex+0x120>
 8011796:	b104      	cbz	r4, 801179a <__gethex+0xe6>
 8011798:	4252      	negs	r2, r2
 801179a:	4417      	add	r7, r2
 801179c:	f8ca 1000 	str.w	r1, [sl]
 80117a0:	b1ed      	cbz	r5, 80117de <__gethex+0x12a>
 80117a2:	f1bb 0f00 	cmp.w	fp, #0
 80117a6:	bf0c      	ite	eq
 80117a8:	2506      	moveq	r5, #6
 80117aa:	2500      	movne	r5, #0
 80117ac:	4628      	mov	r0, r5
 80117ae:	b005      	add	sp, #20
 80117b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117b4:	2500      	movs	r5, #0
 80117b6:	462c      	mov	r4, r5
 80117b8:	e7b0      	b.n	801171c <__gethex+0x68>
 80117ba:	2c00      	cmp	r4, #0
 80117bc:	d1c7      	bne.n	801174e <__gethex+0x9a>
 80117be:	4627      	mov	r7, r4
 80117c0:	e7c7      	b.n	8011752 <__gethex+0x9e>
 80117c2:	464e      	mov	r6, r9
 80117c4:	462f      	mov	r7, r5
 80117c6:	2501      	movs	r5, #1
 80117c8:	e7c3      	b.n	8011752 <__gethex+0x9e>
 80117ca:	2400      	movs	r4, #0
 80117cc:	1cb1      	adds	r1, r6, #2
 80117ce:	e7cc      	b.n	801176a <__gethex+0xb6>
 80117d0:	2401      	movs	r4, #1
 80117d2:	e7fb      	b.n	80117cc <__gethex+0x118>
 80117d4:	fb03 0002 	mla	r0, r3, r2, r0
 80117d8:	e7ce      	b.n	8011778 <__gethex+0xc4>
 80117da:	4631      	mov	r1, r6
 80117dc:	e7de      	b.n	801179c <__gethex+0xe8>
 80117de:	eba6 0309 	sub.w	r3, r6, r9
 80117e2:	3b01      	subs	r3, #1
 80117e4:	4629      	mov	r1, r5
 80117e6:	2b07      	cmp	r3, #7
 80117e8:	dc0a      	bgt.n	8011800 <__gethex+0x14c>
 80117ea:	9801      	ldr	r0, [sp, #4]
 80117ec:	f7fe f98e 	bl	800fb0c <_Balloc>
 80117f0:	4604      	mov	r4, r0
 80117f2:	b940      	cbnz	r0, 8011806 <__gethex+0x152>
 80117f4:	4b5c      	ldr	r3, [pc, #368]	@ (8011968 <__gethex+0x2b4>)
 80117f6:	4602      	mov	r2, r0
 80117f8:	21e4      	movs	r1, #228	@ 0xe4
 80117fa:	485c      	ldr	r0, [pc, #368]	@ (801196c <__gethex+0x2b8>)
 80117fc:	f7ff fec0 	bl	8011580 <__assert_func>
 8011800:	3101      	adds	r1, #1
 8011802:	105b      	asrs	r3, r3, #1
 8011804:	e7ef      	b.n	80117e6 <__gethex+0x132>
 8011806:	f100 0a14 	add.w	sl, r0, #20
 801180a:	2300      	movs	r3, #0
 801180c:	4655      	mov	r5, sl
 801180e:	469b      	mov	fp, r3
 8011810:	45b1      	cmp	r9, r6
 8011812:	d337      	bcc.n	8011884 <__gethex+0x1d0>
 8011814:	f845 bb04 	str.w	fp, [r5], #4
 8011818:	eba5 050a 	sub.w	r5, r5, sl
 801181c:	10ad      	asrs	r5, r5, #2
 801181e:	6125      	str	r5, [r4, #16]
 8011820:	4658      	mov	r0, fp
 8011822:	f7fe fa65 	bl	800fcf0 <__hi0bits>
 8011826:	016d      	lsls	r5, r5, #5
 8011828:	f8d8 6000 	ldr.w	r6, [r8]
 801182c:	1a2d      	subs	r5, r5, r0
 801182e:	42b5      	cmp	r5, r6
 8011830:	dd54      	ble.n	80118dc <__gethex+0x228>
 8011832:	1bad      	subs	r5, r5, r6
 8011834:	4629      	mov	r1, r5
 8011836:	4620      	mov	r0, r4
 8011838:	f7fe fdf6 	bl	8010428 <__any_on>
 801183c:	4681      	mov	r9, r0
 801183e:	b178      	cbz	r0, 8011860 <__gethex+0x1ac>
 8011840:	1e6b      	subs	r3, r5, #1
 8011842:	1159      	asrs	r1, r3, #5
 8011844:	f003 021f 	and.w	r2, r3, #31
 8011848:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801184c:	f04f 0901 	mov.w	r9, #1
 8011850:	fa09 f202 	lsl.w	r2, r9, r2
 8011854:	420a      	tst	r2, r1
 8011856:	d003      	beq.n	8011860 <__gethex+0x1ac>
 8011858:	454b      	cmp	r3, r9
 801185a:	dc36      	bgt.n	80118ca <__gethex+0x216>
 801185c:	f04f 0902 	mov.w	r9, #2
 8011860:	4629      	mov	r1, r5
 8011862:	4620      	mov	r0, r4
 8011864:	f7ff febe 	bl	80115e4 <rshift>
 8011868:	442f      	add	r7, r5
 801186a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801186e:	42bb      	cmp	r3, r7
 8011870:	da42      	bge.n	80118f8 <__gethex+0x244>
 8011872:	9801      	ldr	r0, [sp, #4]
 8011874:	4621      	mov	r1, r4
 8011876:	f7fe f989 	bl	800fb8c <_Bfree>
 801187a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801187c:	2300      	movs	r3, #0
 801187e:	6013      	str	r3, [r2, #0]
 8011880:	25a3      	movs	r5, #163	@ 0xa3
 8011882:	e793      	b.n	80117ac <__gethex+0xf8>
 8011884:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011888:	2a2e      	cmp	r2, #46	@ 0x2e
 801188a:	d012      	beq.n	80118b2 <__gethex+0x1fe>
 801188c:	2b20      	cmp	r3, #32
 801188e:	d104      	bne.n	801189a <__gethex+0x1e6>
 8011890:	f845 bb04 	str.w	fp, [r5], #4
 8011894:	f04f 0b00 	mov.w	fp, #0
 8011898:	465b      	mov	r3, fp
 801189a:	7830      	ldrb	r0, [r6, #0]
 801189c:	9303      	str	r3, [sp, #12]
 801189e:	f7ff fef3 	bl	8011688 <__hexdig_fun>
 80118a2:	9b03      	ldr	r3, [sp, #12]
 80118a4:	f000 000f 	and.w	r0, r0, #15
 80118a8:	4098      	lsls	r0, r3
 80118aa:	ea4b 0b00 	orr.w	fp, fp, r0
 80118ae:	3304      	adds	r3, #4
 80118b0:	e7ae      	b.n	8011810 <__gethex+0x15c>
 80118b2:	45b1      	cmp	r9, r6
 80118b4:	d8ea      	bhi.n	801188c <__gethex+0x1d8>
 80118b6:	492b      	ldr	r1, [pc, #172]	@ (8011964 <__gethex+0x2b0>)
 80118b8:	9303      	str	r3, [sp, #12]
 80118ba:	2201      	movs	r2, #1
 80118bc:	4630      	mov	r0, r6
 80118be:	f7ff fe25 	bl	801150c <strncmp>
 80118c2:	9b03      	ldr	r3, [sp, #12]
 80118c4:	2800      	cmp	r0, #0
 80118c6:	d1e1      	bne.n	801188c <__gethex+0x1d8>
 80118c8:	e7a2      	b.n	8011810 <__gethex+0x15c>
 80118ca:	1ea9      	subs	r1, r5, #2
 80118cc:	4620      	mov	r0, r4
 80118ce:	f7fe fdab 	bl	8010428 <__any_on>
 80118d2:	2800      	cmp	r0, #0
 80118d4:	d0c2      	beq.n	801185c <__gethex+0x1a8>
 80118d6:	f04f 0903 	mov.w	r9, #3
 80118da:	e7c1      	b.n	8011860 <__gethex+0x1ac>
 80118dc:	da09      	bge.n	80118f2 <__gethex+0x23e>
 80118de:	1b75      	subs	r5, r6, r5
 80118e0:	4621      	mov	r1, r4
 80118e2:	9801      	ldr	r0, [sp, #4]
 80118e4:	462a      	mov	r2, r5
 80118e6:	f7fe fb69 	bl	800ffbc <__lshift>
 80118ea:	1b7f      	subs	r7, r7, r5
 80118ec:	4604      	mov	r4, r0
 80118ee:	f100 0a14 	add.w	sl, r0, #20
 80118f2:	f04f 0900 	mov.w	r9, #0
 80118f6:	e7b8      	b.n	801186a <__gethex+0x1b6>
 80118f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80118fc:	42bd      	cmp	r5, r7
 80118fe:	dd6f      	ble.n	80119e0 <__gethex+0x32c>
 8011900:	1bed      	subs	r5, r5, r7
 8011902:	42ae      	cmp	r6, r5
 8011904:	dc34      	bgt.n	8011970 <__gethex+0x2bc>
 8011906:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801190a:	2b02      	cmp	r3, #2
 801190c:	d022      	beq.n	8011954 <__gethex+0x2a0>
 801190e:	2b03      	cmp	r3, #3
 8011910:	d024      	beq.n	801195c <__gethex+0x2a8>
 8011912:	2b01      	cmp	r3, #1
 8011914:	d115      	bne.n	8011942 <__gethex+0x28e>
 8011916:	42ae      	cmp	r6, r5
 8011918:	d113      	bne.n	8011942 <__gethex+0x28e>
 801191a:	2e01      	cmp	r6, #1
 801191c:	d10b      	bne.n	8011936 <__gethex+0x282>
 801191e:	9a02      	ldr	r2, [sp, #8]
 8011920:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011924:	6013      	str	r3, [r2, #0]
 8011926:	2301      	movs	r3, #1
 8011928:	6123      	str	r3, [r4, #16]
 801192a:	f8ca 3000 	str.w	r3, [sl]
 801192e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011930:	2562      	movs	r5, #98	@ 0x62
 8011932:	601c      	str	r4, [r3, #0]
 8011934:	e73a      	b.n	80117ac <__gethex+0xf8>
 8011936:	1e71      	subs	r1, r6, #1
 8011938:	4620      	mov	r0, r4
 801193a:	f7fe fd75 	bl	8010428 <__any_on>
 801193e:	2800      	cmp	r0, #0
 8011940:	d1ed      	bne.n	801191e <__gethex+0x26a>
 8011942:	9801      	ldr	r0, [sp, #4]
 8011944:	4621      	mov	r1, r4
 8011946:	f7fe f921 	bl	800fb8c <_Bfree>
 801194a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801194c:	2300      	movs	r3, #0
 801194e:	6013      	str	r3, [r2, #0]
 8011950:	2550      	movs	r5, #80	@ 0x50
 8011952:	e72b      	b.n	80117ac <__gethex+0xf8>
 8011954:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011956:	2b00      	cmp	r3, #0
 8011958:	d1f3      	bne.n	8011942 <__gethex+0x28e>
 801195a:	e7e0      	b.n	801191e <__gethex+0x26a>
 801195c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801195e:	2b00      	cmp	r3, #0
 8011960:	d1dd      	bne.n	801191e <__gethex+0x26a>
 8011962:	e7ee      	b.n	8011942 <__gethex+0x28e>
 8011964:	08012b78 	.word	0x08012b78
 8011968:	08012a0d 	.word	0x08012a0d
 801196c:	08012d26 	.word	0x08012d26
 8011970:	1e6f      	subs	r7, r5, #1
 8011972:	f1b9 0f00 	cmp.w	r9, #0
 8011976:	d130      	bne.n	80119da <__gethex+0x326>
 8011978:	b127      	cbz	r7, 8011984 <__gethex+0x2d0>
 801197a:	4639      	mov	r1, r7
 801197c:	4620      	mov	r0, r4
 801197e:	f7fe fd53 	bl	8010428 <__any_on>
 8011982:	4681      	mov	r9, r0
 8011984:	117a      	asrs	r2, r7, #5
 8011986:	2301      	movs	r3, #1
 8011988:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801198c:	f007 071f 	and.w	r7, r7, #31
 8011990:	40bb      	lsls	r3, r7
 8011992:	4213      	tst	r3, r2
 8011994:	4629      	mov	r1, r5
 8011996:	4620      	mov	r0, r4
 8011998:	bf18      	it	ne
 801199a:	f049 0902 	orrne.w	r9, r9, #2
 801199e:	f7ff fe21 	bl	80115e4 <rshift>
 80119a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80119a6:	1b76      	subs	r6, r6, r5
 80119a8:	2502      	movs	r5, #2
 80119aa:	f1b9 0f00 	cmp.w	r9, #0
 80119ae:	d047      	beq.n	8011a40 <__gethex+0x38c>
 80119b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80119b4:	2b02      	cmp	r3, #2
 80119b6:	d015      	beq.n	80119e4 <__gethex+0x330>
 80119b8:	2b03      	cmp	r3, #3
 80119ba:	d017      	beq.n	80119ec <__gethex+0x338>
 80119bc:	2b01      	cmp	r3, #1
 80119be:	d109      	bne.n	80119d4 <__gethex+0x320>
 80119c0:	f019 0f02 	tst.w	r9, #2
 80119c4:	d006      	beq.n	80119d4 <__gethex+0x320>
 80119c6:	f8da 3000 	ldr.w	r3, [sl]
 80119ca:	ea49 0903 	orr.w	r9, r9, r3
 80119ce:	f019 0f01 	tst.w	r9, #1
 80119d2:	d10e      	bne.n	80119f2 <__gethex+0x33e>
 80119d4:	f045 0510 	orr.w	r5, r5, #16
 80119d8:	e032      	b.n	8011a40 <__gethex+0x38c>
 80119da:	f04f 0901 	mov.w	r9, #1
 80119de:	e7d1      	b.n	8011984 <__gethex+0x2d0>
 80119e0:	2501      	movs	r5, #1
 80119e2:	e7e2      	b.n	80119aa <__gethex+0x2f6>
 80119e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80119e6:	f1c3 0301 	rsb	r3, r3, #1
 80119ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80119ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d0f0      	beq.n	80119d4 <__gethex+0x320>
 80119f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80119f6:	f104 0314 	add.w	r3, r4, #20
 80119fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80119fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011a02:	f04f 0c00 	mov.w	ip, #0
 8011a06:	4618      	mov	r0, r3
 8011a08:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a0c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011a10:	d01b      	beq.n	8011a4a <__gethex+0x396>
 8011a12:	3201      	adds	r2, #1
 8011a14:	6002      	str	r2, [r0, #0]
 8011a16:	2d02      	cmp	r5, #2
 8011a18:	f104 0314 	add.w	r3, r4, #20
 8011a1c:	d13c      	bne.n	8011a98 <__gethex+0x3e4>
 8011a1e:	f8d8 2000 	ldr.w	r2, [r8]
 8011a22:	3a01      	subs	r2, #1
 8011a24:	42b2      	cmp	r2, r6
 8011a26:	d109      	bne.n	8011a3c <__gethex+0x388>
 8011a28:	1171      	asrs	r1, r6, #5
 8011a2a:	2201      	movs	r2, #1
 8011a2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011a30:	f006 061f 	and.w	r6, r6, #31
 8011a34:	fa02 f606 	lsl.w	r6, r2, r6
 8011a38:	421e      	tst	r6, r3
 8011a3a:	d13a      	bne.n	8011ab2 <__gethex+0x3fe>
 8011a3c:	f045 0520 	orr.w	r5, r5, #32
 8011a40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011a42:	601c      	str	r4, [r3, #0]
 8011a44:	9b02      	ldr	r3, [sp, #8]
 8011a46:	601f      	str	r7, [r3, #0]
 8011a48:	e6b0      	b.n	80117ac <__gethex+0xf8>
 8011a4a:	4299      	cmp	r1, r3
 8011a4c:	f843 cc04 	str.w	ip, [r3, #-4]
 8011a50:	d8d9      	bhi.n	8011a06 <__gethex+0x352>
 8011a52:	68a3      	ldr	r3, [r4, #8]
 8011a54:	459b      	cmp	fp, r3
 8011a56:	db17      	blt.n	8011a88 <__gethex+0x3d4>
 8011a58:	6861      	ldr	r1, [r4, #4]
 8011a5a:	9801      	ldr	r0, [sp, #4]
 8011a5c:	3101      	adds	r1, #1
 8011a5e:	f7fe f855 	bl	800fb0c <_Balloc>
 8011a62:	4681      	mov	r9, r0
 8011a64:	b918      	cbnz	r0, 8011a6e <__gethex+0x3ba>
 8011a66:	4b1a      	ldr	r3, [pc, #104]	@ (8011ad0 <__gethex+0x41c>)
 8011a68:	4602      	mov	r2, r0
 8011a6a:	2184      	movs	r1, #132	@ 0x84
 8011a6c:	e6c5      	b.n	80117fa <__gethex+0x146>
 8011a6e:	6922      	ldr	r2, [r4, #16]
 8011a70:	3202      	adds	r2, #2
 8011a72:	f104 010c 	add.w	r1, r4, #12
 8011a76:	0092      	lsls	r2, r2, #2
 8011a78:	300c      	adds	r0, #12
 8011a7a:	f7ff fd69 	bl	8011550 <memcpy>
 8011a7e:	4621      	mov	r1, r4
 8011a80:	9801      	ldr	r0, [sp, #4]
 8011a82:	f7fe f883 	bl	800fb8c <_Bfree>
 8011a86:	464c      	mov	r4, r9
 8011a88:	6923      	ldr	r3, [r4, #16]
 8011a8a:	1c5a      	adds	r2, r3, #1
 8011a8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011a90:	6122      	str	r2, [r4, #16]
 8011a92:	2201      	movs	r2, #1
 8011a94:	615a      	str	r2, [r3, #20]
 8011a96:	e7be      	b.n	8011a16 <__gethex+0x362>
 8011a98:	6922      	ldr	r2, [r4, #16]
 8011a9a:	455a      	cmp	r2, fp
 8011a9c:	dd0b      	ble.n	8011ab6 <__gethex+0x402>
 8011a9e:	2101      	movs	r1, #1
 8011aa0:	4620      	mov	r0, r4
 8011aa2:	f7ff fd9f 	bl	80115e4 <rshift>
 8011aa6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011aaa:	3701      	adds	r7, #1
 8011aac:	42bb      	cmp	r3, r7
 8011aae:	f6ff aee0 	blt.w	8011872 <__gethex+0x1be>
 8011ab2:	2501      	movs	r5, #1
 8011ab4:	e7c2      	b.n	8011a3c <__gethex+0x388>
 8011ab6:	f016 061f 	ands.w	r6, r6, #31
 8011aba:	d0fa      	beq.n	8011ab2 <__gethex+0x3fe>
 8011abc:	4453      	add	r3, sl
 8011abe:	f1c6 0620 	rsb	r6, r6, #32
 8011ac2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011ac6:	f7fe f913 	bl	800fcf0 <__hi0bits>
 8011aca:	42b0      	cmp	r0, r6
 8011acc:	dbe7      	blt.n	8011a9e <__gethex+0x3ea>
 8011ace:	e7f0      	b.n	8011ab2 <__gethex+0x3fe>
 8011ad0:	08012a0d 	.word	0x08012a0d

08011ad4 <L_shift>:
 8011ad4:	f1c2 0208 	rsb	r2, r2, #8
 8011ad8:	0092      	lsls	r2, r2, #2
 8011ada:	b570      	push	{r4, r5, r6, lr}
 8011adc:	f1c2 0620 	rsb	r6, r2, #32
 8011ae0:	6843      	ldr	r3, [r0, #4]
 8011ae2:	6804      	ldr	r4, [r0, #0]
 8011ae4:	fa03 f506 	lsl.w	r5, r3, r6
 8011ae8:	432c      	orrs	r4, r5
 8011aea:	40d3      	lsrs	r3, r2
 8011aec:	6004      	str	r4, [r0, #0]
 8011aee:	f840 3f04 	str.w	r3, [r0, #4]!
 8011af2:	4288      	cmp	r0, r1
 8011af4:	d3f4      	bcc.n	8011ae0 <L_shift+0xc>
 8011af6:	bd70      	pop	{r4, r5, r6, pc}

08011af8 <__match>:
 8011af8:	b530      	push	{r4, r5, lr}
 8011afa:	6803      	ldr	r3, [r0, #0]
 8011afc:	3301      	adds	r3, #1
 8011afe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011b02:	b914      	cbnz	r4, 8011b0a <__match+0x12>
 8011b04:	6003      	str	r3, [r0, #0]
 8011b06:	2001      	movs	r0, #1
 8011b08:	bd30      	pop	{r4, r5, pc}
 8011b0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b0e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011b12:	2d19      	cmp	r5, #25
 8011b14:	bf98      	it	ls
 8011b16:	3220      	addls	r2, #32
 8011b18:	42a2      	cmp	r2, r4
 8011b1a:	d0f0      	beq.n	8011afe <__match+0x6>
 8011b1c:	2000      	movs	r0, #0
 8011b1e:	e7f3      	b.n	8011b08 <__match+0x10>

08011b20 <__hexnan>:
 8011b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b24:	680b      	ldr	r3, [r1, #0]
 8011b26:	6801      	ldr	r1, [r0, #0]
 8011b28:	115e      	asrs	r6, r3, #5
 8011b2a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011b2e:	f013 031f 	ands.w	r3, r3, #31
 8011b32:	b087      	sub	sp, #28
 8011b34:	bf18      	it	ne
 8011b36:	3604      	addne	r6, #4
 8011b38:	2500      	movs	r5, #0
 8011b3a:	1f37      	subs	r7, r6, #4
 8011b3c:	4682      	mov	sl, r0
 8011b3e:	4690      	mov	r8, r2
 8011b40:	9301      	str	r3, [sp, #4]
 8011b42:	f846 5c04 	str.w	r5, [r6, #-4]
 8011b46:	46b9      	mov	r9, r7
 8011b48:	463c      	mov	r4, r7
 8011b4a:	9502      	str	r5, [sp, #8]
 8011b4c:	46ab      	mov	fp, r5
 8011b4e:	784a      	ldrb	r2, [r1, #1]
 8011b50:	1c4b      	adds	r3, r1, #1
 8011b52:	9303      	str	r3, [sp, #12]
 8011b54:	b342      	cbz	r2, 8011ba8 <__hexnan+0x88>
 8011b56:	4610      	mov	r0, r2
 8011b58:	9105      	str	r1, [sp, #20]
 8011b5a:	9204      	str	r2, [sp, #16]
 8011b5c:	f7ff fd94 	bl	8011688 <__hexdig_fun>
 8011b60:	2800      	cmp	r0, #0
 8011b62:	d151      	bne.n	8011c08 <__hexnan+0xe8>
 8011b64:	9a04      	ldr	r2, [sp, #16]
 8011b66:	9905      	ldr	r1, [sp, #20]
 8011b68:	2a20      	cmp	r2, #32
 8011b6a:	d818      	bhi.n	8011b9e <__hexnan+0x7e>
 8011b6c:	9b02      	ldr	r3, [sp, #8]
 8011b6e:	459b      	cmp	fp, r3
 8011b70:	dd13      	ble.n	8011b9a <__hexnan+0x7a>
 8011b72:	454c      	cmp	r4, r9
 8011b74:	d206      	bcs.n	8011b84 <__hexnan+0x64>
 8011b76:	2d07      	cmp	r5, #7
 8011b78:	dc04      	bgt.n	8011b84 <__hexnan+0x64>
 8011b7a:	462a      	mov	r2, r5
 8011b7c:	4649      	mov	r1, r9
 8011b7e:	4620      	mov	r0, r4
 8011b80:	f7ff ffa8 	bl	8011ad4 <L_shift>
 8011b84:	4544      	cmp	r4, r8
 8011b86:	d952      	bls.n	8011c2e <__hexnan+0x10e>
 8011b88:	2300      	movs	r3, #0
 8011b8a:	f1a4 0904 	sub.w	r9, r4, #4
 8011b8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8011b92:	f8cd b008 	str.w	fp, [sp, #8]
 8011b96:	464c      	mov	r4, r9
 8011b98:	461d      	mov	r5, r3
 8011b9a:	9903      	ldr	r1, [sp, #12]
 8011b9c:	e7d7      	b.n	8011b4e <__hexnan+0x2e>
 8011b9e:	2a29      	cmp	r2, #41	@ 0x29
 8011ba0:	d157      	bne.n	8011c52 <__hexnan+0x132>
 8011ba2:	3102      	adds	r1, #2
 8011ba4:	f8ca 1000 	str.w	r1, [sl]
 8011ba8:	f1bb 0f00 	cmp.w	fp, #0
 8011bac:	d051      	beq.n	8011c52 <__hexnan+0x132>
 8011bae:	454c      	cmp	r4, r9
 8011bb0:	d206      	bcs.n	8011bc0 <__hexnan+0xa0>
 8011bb2:	2d07      	cmp	r5, #7
 8011bb4:	dc04      	bgt.n	8011bc0 <__hexnan+0xa0>
 8011bb6:	462a      	mov	r2, r5
 8011bb8:	4649      	mov	r1, r9
 8011bba:	4620      	mov	r0, r4
 8011bbc:	f7ff ff8a 	bl	8011ad4 <L_shift>
 8011bc0:	4544      	cmp	r4, r8
 8011bc2:	d936      	bls.n	8011c32 <__hexnan+0x112>
 8011bc4:	f1a8 0204 	sub.w	r2, r8, #4
 8011bc8:	4623      	mov	r3, r4
 8011bca:	f853 1b04 	ldr.w	r1, [r3], #4
 8011bce:	f842 1f04 	str.w	r1, [r2, #4]!
 8011bd2:	429f      	cmp	r7, r3
 8011bd4:	d2f9      	bcs.n	8011bca <__hexnan+0xaa>
 8011bd6:	1b3b      	subs	r3, r7, r4
 8011bd8:	f023 0303 	bic.w	r3, r3, #3
 8011bdc:	3304      	adds	r3, #4
 8011bde:	3401      	adds	r4, #1
 8011be0:	3e03      	subs	r6, #3
 8011be2:	42b4      	cmp	r4, r6
 8011be4:	bf88      	it	hi
 8011be6:	2304      	movhi	r3, #4
 8011be8:	4443      	add	r3, r8
 8011bea:	2200      	movs	r2, #0
 8011bec:	f843 2b04 	str.w	r2, [r3], #4
 8011bf0:	429f      	cmp	r7, r3
 8011bf2:	d2fb      	bcs.n	8011bec <__hexnan+0xcc>
 8011bf4:	683b      	ldr	r3, [r7, #0]
 8011bf6:	b91b      	cbnz	r3, 8011c00 <__hexnan+0xe0>
 8011bf8:	4547      	cmp	r7, r8
 8011bfa:	d128      	bne.n	8011c4e <__hexnan+0x12e>
 8011bfc:	2301      	movs	r3, #1
 8011bfe:	603b      	str	r3, [r7, #0]
 8011c00:	2005      	movs	r0, #5
 8011c02:	b007      	add	sp, #28
 8011c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c08:	3501      	adds	r5, #1
 8011c0a:	2d08      	cmp	r5, #8
 8011c0c:	f10b 0b01 	add.w	fp, fp, #1
 8011c10:	dd06      	ble.n	8011c20 <__hexnan+0x100>
 8011c12:	4544      	cmp	r4, r8
 8011c14:	d9c1      	bls.n	8011b9a <__hexnan+0x7a>
 8011c16:	2300      	movs	r3, #0
 8011c18:	f844 3c04 	str.w	r3, [r4, #-4]
 8011c1c:	2501      	movs	r5, #1
 8011c1e:	3c04      	subs	r4, #4
 8011c20:	6822      	ldr	r2, [r4, #0]
 8011c22:	f000 000f 	and.w	r0, r0, #15
 8011c26:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011c2a:	6020      	str	r0, [r4, #0]
 8011c2c:	e7b5      	b.n	8011b9a <__hexnan+0x7a>
 8011c2e:	2508      	movs	r5, #8
 8011c30:	e7b3      	b.n	8011b9a <__hexnan+0x7a>
 8011c32:	9b01      	ldr	r3, [sp, #4]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d0dd      	beq.n	8011bf4 <__hexnan+0xd4>
 8011c38:	f1c3 0320 	rsb	r3, r3, #32
 8011c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8011c40:	40da      	lsrs	r2, r3
 8011c42:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011c46:	4013      	ands	r3, r2
 8011c48:	f846 3c04 	str.w	r3, [r6, #-4]
 8011c4c:	e7d2      	b.n	8011bf4 <__hexnan+0xd4>
 8011c4e:	3f04      	subs	r7, #4
 8011c50:	e7d0      	b.n	8011bf4 <__hexnan+0xd4>
 8011c52:	2004      	movs	r0, #4
 8011c54:	e7d5      	b.n	8011c02 <__hexnan+0xe2>

08011c56 <__ascii_mbtowc>:
 8011c56:	b082      	sub	sp, #8
 8011c58:	b901      	cbnz	r1, 8011c5c <__ascii_mbtowc+0x6>
 8011c5a:	a901      	add	r1, sp, #4
 8011c5c:	b142      	cbz	r2, 8011c70 <__ascii_mbtowc+0x1a>
 8011c5e:	b14b      	cbz	r3, 8011c74 <__ascii_mbtowc+0x1e>
 8011c60:	7813      	ldrb	r3, [r2, #0]
 8011c62:	600b      	str	r3, [r1, #0]
 8011c64:	7812      	ldrb	r2, [r2, #0]
 8011c66:	1e10      	subs	r0, r2, #0
 8011c68:	bf18      	it	ne
 8011c6a:	2001      	movne	r0, #1
 8011c6c:	b002      	add	sp, #8
 8011c6e:	4770      	bx	lr
 8011c70:	4610      	mov	r0, r2
 8011c72:	e7fb      	b.n	8011c6c <__ascii_mbtowc+0x16>
 8011c74:	f06f 0001 	mvn.w	r0, #1
 8011c78:	e7f8      	b.n	8011c6c <__ascii_mbtowc+0x16>

08011c7a <_realloc_r>:
 8011c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c7e:	4680      	mov	r8, r0
 8011c80:	4615      	mov	r5, r2
 8011c82:	460c      	mov	r4, r1
 8011c84:	b921      	cbnz	r1, 8011c90 <_realloc_r+0x16>
 8011c86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c8a:	4611      	mov	r1, r2
 8011c8c:	f7fd beb2 	b.w	800f9f4 <_malloc_r>
 8011c90:	b92a      	cbnz	r2, 8011c9e <_realloc_r+0x24>
 8011c92:	f7fd fe3b 	bl	800f90c <_free_r>
 8011c96:	2400      	movs	r4, #0
 8011c98:	4620      	mov	r0, r4
 8011c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c9e:	f000 f840 	bl	8011d22 <_malloc_usable_size_r>
 8011ca2:	4285      	cmp	r5, r0
 8011ca4:	4606      	mov	r6, r0
 8011ca6:	d802      	bhi.n	8011cae <_realloc_r+0x34>
 8011ca8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011cac:	d8f4      	bhi.n	8011c98 <_realloc_r+0x1e>
 8011cae:	4629      	mov	r1, r5
 8011cb0:	4640      	mov	r0, r8
 8011cb2:	f7fd fe9f 	bl	800f9f4 <_malloc_r>
 8011cb6:	4607      	mov	r7, r0
 8011cb8:	2800      	cmp	r0, #0
 8011cba:	d0ec      	beq.n	8011c96 <_realloc_r+0x1c>
 8011cbc:	42b5      	cmp	r5, r6
 8011cbe:	462a      	mov	r2, r5
 8011cc0:	4621      	mov	r1, r4
 8011cc2:	bf28      	it	cs
 8011cc4:	4632      	movcs	r2, r6
 8011cc6:	f7ff fc43 	bl	8011550 <memcpy>
 8011cca:	4621      	mov	r1, r4
 8011ccc:	4640      	mov	r0, r8
 8011cce:	f7fd fe1d 	bl	800f90c <_free_r>
 8011cd2:	463c      	mov	r4, r7
 8011cd4:	e7e0      	b.n	8011c98 <_realloc_r+0x1e>

08011cd6 <__ascii_wctomb>:
 8011cd6:	4603      	mov	r3, r0
 8011cd8:	4608      	mov	r0, r1
 8011cda:	b141      	cbz	r1, 8011cee <__ascii_wctomb+0x18>
 8011cdc:	2aff      	cmp	r2, #255	@ 0xff
 8011cde:	d904      	bls.n	8011cea <__ascii_wctomb+0x14>
 8011ce0:	228a      	movs	r2, #138	@ 0x8a
 8011ce2:	601a      	str	r2, [r3, #0]
 8011ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8011ce8:	4770      	bx	lr
 8011cea:	700a      	strb	r2, [r1, #0]
 8011cec:	2001      	movs	r0, #1
 8011cee:	4770      	bx	lr

08011cf0 <fiprintf>:
 8011cf0:	b40e      	push	{r1, r2, r3}
 8011cf2:	b503      	push	{r0, r1, lr}
 8011cf4:	4601      	mov	r1, r0
 8011cf6:	ab03      	add	r3, sp, #12
 8011cf8:	4805      	ldr	r0, [pc, #20]	@ (8011d10 <fiprintf+0x20>)
 8011cfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8011cfe:	6800      	ldr	r0, [r0, #0]
 8011d00:	9301      	str	r3, [sp, #4]
 8011d02:	f000 f83f 	bl	8011d84 <_vfiprintf_r>
 8011d06:	b002      	add	sp, #8
 8011d08:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d0c:	b003      	add	sp, #12
 8011d0e:	4770      	bx	lr
 8011d10:	2400001c 	.word	0x2400001c

08011d14 <abort>:
 8011d14:	b508      	push	{r3, lr}
 8011d16:	2006      	movs	r0, #6
 8011d18:	f000 fa08 	bl	801212c <raise>
 8011d1c:	2001      	movs	r0, #1
 8011d1e:	f7ef fdcf 	bl	80018c0 <_exit>

08011d22 <_malloc_usable_size_r>:
 8011d22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d26:	1f18      	subs	r0, r3, #4
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	bfbc      	itt	lt
 8011d2c:	580b      	ldrlt	r3, [r1, r0]
 8011d2e:	18c0      	addlt	r0, r0, r3
 8011d30:	4770      	bx	lr

08011d32 <__sfputc_r>:
 8011d32:	6893      	ldr	r3, [r2, #8]
 8011d34:	3b01      	subs	r3, #1
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	b410      	push	{r4}
 8011d3a:	6093      	str	r3, [r2, #8]
 8011d3c:	da08      	bge.n	8011d50 <__sfputc_r+0x1e>
 8011d3e:	6994      	ldr	r4, [r2, #24]
 8011d40:	42a3      	cmp	r3, r4
 8011d42:	db01      	blt.n	8011d48 <__sfputc_r+0x16>
 8011d44:	290a      	cmp	r1, #10
 8011d46:	d103      	bne.n	8011d50 <__sfputc_r+0x1e>
 8011d48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d4c:	f000 b932 	b.w	8011fb4 <__swbuf_r>
 8011d50:	6813      	ldr	r3, [r2, #0]
 8011d52:	1c58      	adds	r0, r3, #1
 8011d54:	6010      	str	r0, [r2, #0]
 8011d56:	7019      	strb	r1, [r3, #0]
 8011d58:	4608      	mov	r0, r1
 8011d5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d5e:	4770      	bx	lr

08011d60 <__sfputs_r>:
 8011d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d62:	4606      	mov	r6, r0
 8011d64:	460f      	mov	r7, r1
 8011d66:	4614      	mov	r4, r2
 8011d68:	18d5      	adds	r5, r2, r3
 8011d6a:	42ac      	cmp	r4, r5
 8011d6c:	d101      	bne.n	8011d72 <__sfputs_r+0x12>
 8011d6e:	2000      	movs	r0, #0
 8011d70:	e007      	b.n	8011d82 <__sfputs_r+0x22>
 8011d72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d76:	463a      	mov	r2, r7
 8011d78:	4630      	mov	r0, r6
 8011d7a:	f7ff ffda 	bl	8011d32 <__sfputc_r>
 8011d7e:	1c43      	adds	r3, r0, #1
 8011d80:	d1f3      	bne.n	8011d6a <__sfputs_r+0xa>
 8011d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011d84 <_vfiprintf_r>:
 8011d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d88:	460d      	mov	r5, r1
 8011d8a:	b09d      	sub	sp, #116	@ 0x74
 8011d8c:	4614      	mov	r4, r2
 8011d8e:	4698      	mov	r8, r3
 8011d90:	4606      	mov	r6, r0
 8011d92:	b118      	cbz	r0, 8011d9c <_vfiprintf_r+0x18>
 8011d94:	6a03      	ldr	r3, [r0, #32]
 8011d96:	b90b      	cbnz	r3, 8011d9c <_vfiprintf_r+0x18>
 8011d98:	f7fc feba 	bl	800eb10 <__sinit>
 8011d9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011d9e:	07d9      	lsls	r1, r3, #31
 8011da0:	d405      	bmi.n	8011dae <_vfiprintf_r+0x2a>
 8011da2:	89ab      	ldrh	r3, [r5, #12]
 8011da4:	059a      	lsls	r2, r3, #22
 8011da6:	d402      	bmi.n	8011dae <_vfiprintf_r+0x2a>
 8011da8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011daa:	f7fc ffc8 	bl	800ed3e <__retarget_lock_acquire_recursive>
 8011dae:	89ab      	ldrh	r3, [r5, #12]
 8011db0:	071b      	lsls	r3, r3, #28
 8011db2:	d501      	bpl.n	8011db8 <_vfiprintf_r+0x34>
 8011db4:	692b      	ldr	r3, [r5, #16]
 8011db6:	b99b      	cbnz	r3, 8011de0 <_vfiprintf_r+0x5c>
 8011db8:	4629      	mov	r1, r5
 8011dba:	4630      	mov	r0, r6
 8011dbc:	f000 f938 	bl	8012030 <__swsetup_r>
 8011dc0:	b170      	cbz	r0, 8011de0 <_vfiprintf_r+0x5c>
 8011dc2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011dc4:	07dc      	lsls	r4, r3, #31
 8011dc6:	d504      	bpl.n	8011dd2 <_vfiprintf_r+0x4e>
 8011dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8011dcc:	b01d      	add	sp, #116	@ 0x74
 8011dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dd2:	89ab      	ldrh	r3, [r5, #12]
 8011dd4:	0598      	lsls	r0, r3, #22
 8011dd6:	d4f7      	bmi.n	8011dc8 <_vfiprintf_r+0x44>
 8011dd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011dda:	f7fc ffb1 	bl	800ed40 <__retarget_lock_release_recursive>
 8011dde:	e7f3      	b.n	8011dc8 <_vfiprintf_r+0x44>
 8011de0:	2300      	movs	r3, #0
 8011de2:	9309      	str	r3, [sp, #36]	@ 0x24
 8011de4:	2320      	movs	r3, #32
 8011de6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011dea:	f8cd 800c 	str.w	r8, [sp, #12]
 8011dee:	2330      	movs	r3, #48	@ 0x30
 8011df0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011fa0 <_vfiprintf_r+0x21c>
 8011df4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011df8:	f04f 0901 	mov.w	r9, #1
 8011dfc:	4623      	mov	r3, r4
 8011dfe:	469a      	mov	sl, r3
 8011e00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e04:	b10a      	cbz	r2, 8011e0a <_vfiprintf_r+0x86>
 8011e06:	2a25      	cmp	r2, #37	@ 0x25
 8011e08:	d1f9      	bne.n	8011dfe <_vfiprintf_r+0x7a>
 8011e0a:	ebba 0b04 	subs.w	fp, sl, r4
 8011e0e:	d00b      	beq.n	8011e28 <_vfiprintf_r+0xa4>
 8011e10:	465b      	mov	r3, fp
 8011e12:	4622      	mov	r2, r4
 8011e14:	4629      	mov	r1, r5
 8011e16:	4630      	mov	r0, r6
 8011e18:	f7ff ffa2 	bl	8011d60 <__sfputs_r>
 8011e1c:	3001      	adds	r0, #1
 8011e1e:	f000 80a7 	beq.w	8011f70 <_vfiprintf_r+0x1ec>
 8011e22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011e24:	445a      	add	r2, fp
 8011e26:	9209      	str	r2, [sp, #36]	@ 0x24
 8011e28:	f89a 3000 	ldrb.w	r3, [sl]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	f000 809f 	beq.w	8011f70 <_vfiprintf_r+0x1ec>
 8011e32:	2300      	movs	r3, #0
 8011e34:	f04f 32ff 	mov.w	r2, #4294967295
 8011e38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011e3c:	f10a 0a01 	add.w	sl, sl, #1
 8011e40:	9304      	str	r3, [sp, #16]
 8011e42:	9307      	str	r3, [sp, #28]
 8011e44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011e48:	931a      	str	r3, [sp, #104]	@ 0x68
 8011e4a:	4654      	mov	r4, sl
 8011e4c:	2205      	movs	r2, #5
 8011e4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e52:	4853      	ldr	r0, [pc, #332]	@ (8011fa0 <_vfiprintf_r+0x21c>)
 8011e54:	f7ee fa44 	bl	80002e0 <memchr>
 8011e58:	9a04      	ldr	r2, [sp, #16]
 8011e5a:	b9d8      	cbnz	r0, 8011e94 <_vfiprintf_r+0x110>
 8011e5c:	06d1      	lsls	r1, r2, #27
 8011e5e:	bf44      	itt	mi
 8011e60:	2320      	movmi	r3, #32
 8011e62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011e66:	0713      	lsls	r3, r2, #28
 8011e68:	bf44      	itt	mi
 8011e6a:	232b      	movmi	r3, #43	@ 0x2b
 8011e6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011e70:	f89a 3000 	ldrb.w	r3, [sl]
 8011e74:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e76:	d015      	beq.n	8011ea4 <_vfiprintf_r+0x120>
 8011e78:	9a07      	ldr	r2, [sp, #28]
 8011e7a:	4654      	mov	r4, sl
 8011e7c:	2000      	movs	r0, #0
 8011e7e:	f04f 0c0a 	mov.w	ip, #10
 8011e82:	4621      	mov	r1, r4
 8011e84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e88:	3b30      	subs	r3, #48	@ 0x30
 8011e8a:	2b09      	cmp	r3, #9
 8011e8c:	d94b      	bls.n	8011f26 <_vfiprintf_r+0x1a2>
 8011e8e:	b1b0      	cbz	r0, 8011ebe <_vfiprintf_r+0x13a>
 8011e90:	9207      	str	r2, [sp, #28]
 8011e92:	e014      	b.n	8011ebe <_vfiprintf_r+0x13a>
 8011e94:	eba0 0308 	sub.w	r3, r0, r8
 8011e98:	fa09 f303 	lsl.w	r3, r9, r3
 8011e9c:	4313      	orrs	r3, r2
 8011e9e:	9304      	str	r3, [sp, #16]
 8011ea0:	46a2      	mov	sl, r4
 8011ea2:	e7d2      	b.n	8011e4a <_vfiprintf_r+0xc6>
 8011ea4:	9b03      	ldr	r3, [sp, #12]
 8011ea6:	1d19      	adds	r1, r3, #4
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	9103      	str	r1, [sp, #12]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	bfbb      	ittet	lt
 8011eb0:	425b      	neglt	r3, r3
 8011eb2:	f042 0202 	orrlt.w	r2, r2, #2
 8011eb6:	9307      	strge	r3, [sp, #28]
 8011eb8:	9307      	strlt	r3, [sp, #28]
 8011eba:	bfb8      	it	lt
 8011ebc:	9204      	strlt	r2, [sp, #16]
 8011ebe:	7823      	ldrb	r3, [r4, #0]
 8011ec0:	2b2e      	cmp	r3, #46	@ 0x2e
 8011ec2:	d10a      	bne.n	8011eda <_vfiprintf_r+0x156>
 8011ec4:	7863      	ldrb	r3, [r4, #1]
 8011ec6:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ec8:	d132      	bne.n	8011f30 <_vfiprintf_r+0x1ac>
 8011eca:	9b03      	ldr	r3, [sp, #12]
 8011ecc:	1d1a      	adds	r2, r3, #4
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	9203      	str	r2, [sp, #12]
 8011ed2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011ed6:	3402      	adds	r4, #2
 8011ed8:	9305      	str	r3, [sp, #20]
 8011eda:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011fb0 <_vfiprintf_r+0x22c>
 8011ede:	7821      	ldrb	r1, [r4, #0]
 8011ee0:	2203      	movs	r2, #3
 8011ee2:	4650      	mov	r0, sl
 8011ee4:	f7ee f9fc 	bl	80002e0 <memchr>
 8011ee8:	b138      	cbz	r0, 8011efa <_vfiprintf_r+0x176>
 8011eea:	9b04      	ldr	r3, [sp, #16]
 8011eec:	eba0 000a 	sub.w	r0, r0, sl
 8011ef0:	2240      	movs	r2, #64	@ 0x40
 8011ef2:	4082      	lsls	r2, r0
 8011ef4:	4313      	orrs	r3, r2
 8011ef6:	3401      	adds	r4, #1
 8011ef8:	9304      	str	r3, [sp, #16]
 8011efa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011efe:	4829      	ldr	r0, [pc, #164]	@ (8011fa4 <_vfiprintf_r+0x220>)
 8011f00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011f04:	2206      	movs	r2, #6
 8011f06:	f7ee f9eb 	bl	80002e0 <memchr>
 8011f0a:	2800      	cmp	r0, #0
 8011f0c:	d03f      	beq.n	8011f8e <_vfiprintf_r+0x20a>
 8011f0e:	4b26      	ldr	r3, [pc, #152]	@ (8011fa8 <_vfiprintf_r+0x224>)
 8011f10:	bb1b      	cbnz	r3, 8011f5a <_vfiprintf_r+0x1d6>
 8011f12:	9b03      	ldr	r3, [sp, #12]
 8011f14:	3307      	adds	r3, #7
 8011f16:	f023 0307 	bic.w	r3, r3, #7
 8011f1a:	3308      	adds	r3, #8
 8011f1c:	9303      	str	r3, [sp, #12]
 8011f1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f20:	443b      	add	r3, r7
 8011f22:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f24:	e76a      	b.n	8011dfc <_vfiprintf_r+0x78>
 8011f26:	fb0c 3202 	mla	r2, ip, r2, r3
 8011f2a:	460c      	mov	r4, r1
 8011f2c:	2001      	movs	r0, #1
 8011f2e:	e7a8      	b.n	8011e82 <_vfiprintf_r+0xfe>
 8011f30:	2300      	movs	r3, #0
 8011f32:	3401      	adds	r4, #1
 8011f34:	9305      	str	r3, [sp, #20]
 8011f36:	4619      	mov	r1, r3
 8011f38:	f04f 0c0a 	mov.w	ip, #10
 8011f3c:	4620      	mov	r0, r4
 8011f3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f42:	3a30      	subs	r2, #48	@ 0x30
 8011f44:	2a09      	cmp	r2, #9
 8011f46:	d903      	bls.n	8011f50 <_vfiprintf_r+0x1cc>
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d0c6      	beq.n	8011eda <_vfiprintf_r+0x156>
 8011f4c:	9105      	str	r1, [sp, #20]
 8011f4e:	e7c4      	b.n	8011eda <_vfiprintf_r+0x156>
 8011f50:	fb0c 2101 	mla	r1, ip, r1, r2
 8011f54:	4604      	mov	r4, r0
 8011f56:	2301      	movs	r3, #1
 8011f58:	e7f0      	b.n	8011f3c <_vfiprintf_r+0x1b8>
 8011f5a:	ab03      	add	r3, sp, #12
 8011f5c:	9300      	str	r3, [sp, #0]
 8011f5e:	462a      	mov	r2, r5
 8011f60:	4b12      	ldr	r3, [pc, #72]	@ (8011fac <_vfiprintf_r+0x228>)
 8011f62:	a904      	add	r1, sp, #16
 8011f64:	4630      	mov	r0, r6
 8011f66:	f7fb ff93 	bl	800de90 <_printf_float>
 8011f6a:	4607      	mov	r7, r0
 8011f6c:	1c78      	adds	r0, r7, #1
 8011f6e:	d1d6      	bne.n	8011f1e <_vfiprintf_r+0x19a>
 8011f70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011f72:	07d9      	lsls	r1, r3, #31
 8011f74:	d405      	bmi.n	8011f82 <_vfiprintf_r+0x1fe>
 8011f76:	89ab      	ldrh	r3, [r5, #12]
 8011f78:	059a      	lsls	r2, r3, #22
 8011f7a:	d402      	bmi.n	8011f82 <_vfiprintf_r+0x1fe>
 8011f7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011f7e:	f7fc fedf 	bl	800ed40 <__retarget_lock_release_recursive>
 8011f82:	89ab      	ldrh	r3, [r5, #12]
 8011f84:	065b      	lsls	r3, r3, #25
 8011f86:	f53f af1f 	bmi.w	8011dc8 <_vfiprintf_r+0x44>
 8011f8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011f8c:	e71e      	b.n	8011dcc <_vfiprintf_r+0x48>
 8011f8e:	ab03      	add	r3, sp, #12
 8011f90:	9300      	str	r3, [sp, #0]
 8011f92:	462a      	mov	r2, r5
 8011f94:	4b05      	ldr	r3, [pc, #20]	@ (8011fac <_vfiprintf_r+0x228>)
 8011f96:	a904      	add	r1, sp, #16
 8011f98:	4630      	mov	r0, r6
 8011f9a:	f7fc fa01 	bl	800e3a0 <_printf_i>
 8011f9e:	e7e4      	b.n	8011f6a <_vfiprintf_r+0x1e6>
 8011fa0:	08012cd1 	.word	0x08012cd1
 8011fa4:	08012cdb 	.word	0x08012cdb
 8011fa8:	0800de91 	.word	0x0800de91
 8011fac:	08011d61 	.word	0x08011d61
 8011fb0:	08012cd7 	.word	0x08012cd7

08011fb4 <__swbuf_r>:
 8011fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fb6:	460e      	mov	r6, r1
 8011fb8:	4614      	mov	r4, r2
 8011fba:	4605      	mov	r5, r0
 8011fbc:	b118      	cbz	r0, 8011fc6 <__swbuf_r+0x12>
 8011fbe:	6a03      	ldr	r3, [r0, #32]
 8011fc0:	b90b      	cbnz	r3, 8011fc6 <__swbuf_r+0x12>
 8011fc2:	f7fc fda5 	bl	800eb10 <__sinit>
 8011fc6:	69a3      	ldr	r3, [r4, #24]
 8011fc8:	60a3      	str	r3, [r4, #8]
 8011fca:	89a3      	ldrh	r3, [r4, #12]
 8011fcc:	071a      	lsls	r2, r3, #28
 8011fce:	d501      	bpl.n	8011fd4 <__swbuf_r+0x20>
 8011fd0:	6923      	ldr	r3, [r4, #16]
 8011fd2:	b943      	cbnz	r3, 8011fe6 <__swbuf_r+0x32>
 8011fd4:	4621      	mov	r1, r4
 8011fd6:	4628      	mov	r0, r5
 8011fd8:	f000 f82a 	bl	8012030 <__swsetup_r>
 8011fdc:	b118      	cbz	r0, 8011fe6 <__swbuf_r+0x32>
 8011fde:	f04f 37ff 	mov.w	r7, #4294967295
 8011fe2:	4638      	mov	r0, r7
 8011fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011fe6:	6823      	ldr	r3, [r4, #0]
 8011fe8:	6922      	ldr	r2, [r4, #16]
 8011fea:	1a98      	subs	r0, r3, r2
 8011fec:	6963      	ldr	r3, [r4, #20]
 8011fee:	b2f6      	uxtb	r6, r6
 8011ff0:	4283      	cmp	r3, r0
 8011ff2:	4637      	mov	r7, r6
 8011ff4:	dc05      	bgt.n	8012002 <__swbuf_r+0x4e>
 8011ff6:	4621      	mov	r1, r4
 8011ff8:	4628      	mov	r0, r5
 8011ffa:	f7ff fa45 	bl	8011488 <_fflush_r>
 8011ffe:	2800      	cmp	r0, #0
 8012000:	d1ed      	bne.n	8011fde <__swbuf_r+0x2a>
 8012002:	68a3      	ldr	r3, [r4, #8]
 8012004:	3b01      	subs	r3, #1
 8012006:	60a3      	str	r3, [r4, #8]
 8012008:	6823      	ldr	r3, [r4, #0]
 801200a:	1c5a      	adds	r2, r3, #1
 801200c:	6022      	str	r2, [r4, #0]
 801200e:	701e      	strb	r6, [r3, #0]
 8012010:	6962      	ldr	r2, [r4, #20]
 8012012:	1c43      	adds	r3, r0, #1
 8012014:	429a      	cmp	r2, r3
 8012016:	d004      	beq.n	8012022 <__swbuf_r+0x6e>
 8012018:	89a3      	ldrh	r3, [r4, #12]
 801201a:	07db      	lsls	r3, r3, #31
 801201c:	d5e1      	bpl.n	8011fe2 <__swbuf_r+0x2e>
 801201e:	2e0a      	cmp	r6, #10
 8012020:	d1df      	bne.n	8011fe2 <__swbuf_r+0x2e>
 8012022:	4621      	mov	r1, r4
 8012024:	4628      	mov	r0, r5
 8012026:	f7ff fa2f 	bl	8011488 <_fflush_r>
 801202a:	2800      	cmp	r0, #0
 801202c:	d0d9      	beq.n	8011fe2 <__swbuf_r+0x2e>
 801202e:	e7d6      	b.n	8011fde <__swbuf_r+0x2a>

08012030 <__swsetup_r>:
 8012030:	b538      	push	{r3, r4, r5, lr}
 8012032:	4b29      	ldr	r3, [pc, #164]	@ (80120d8 <__swsetup_r+0xa8>)
 8012034:	4605      	mov	r5, r0
 8012036:	6818      	ldr	r0, [r3, #0]
 8012038:	460c      	mov	r4, r1
 801203a:	b118      	cbz	r0, 8012044 <__swsetup_r+0x14>
 801203c:	6a03      	ldr	r3, [r0, #32]
 801203e:	b90b      	cbnz	r3, 8012044 <__swsetup_r+0x14>
 8012040:	f7fc fd66 	bl	800eb10 <__sinit>
 8012044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012048:	0719      	lsls	r1, r3, #28
 801204a:	d422      	bmi.n	8012092 <__swsetup_r+0x62>
 801204c:	06da      	lsls	r2, r3, #27
 801204e:	d407      	bmi.n	8012060 <__swsetup_r+0x30>
 8012050:	2209      	movs	r2, #9
 8012052:	602a      	str	r2, [r5, #0]
 8012054:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012058:	81a3      	strh	r3, [r4, #12]
 801205a:	f04f 30ff 	mov.w	r0, #4294967295
 801205e:	e033      	b.n	80120c8 <__swsetup_r+0x98>
 8012060:	0758      	lsls	r0, r3, #29
 8012062:	d512      	bpl.n	801208a <__swsetup_r+0x5a>
 8012064:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012066:	b141      	cbz	r1, 801207a <__swsetup_r+0x4a>
 8012068:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801206c:	4299      	cmp	r1, r3
 801206e:	d002      	beq.n	8012076 <__swsetup_r+0x46>
 8012070:	4628      	mov	r0, r5
 8012072:	f7fd fc4b 	bl	800f90c <_free_r>
 8012076:	2300      	movs	r3, #0
 8012078:	6363      	str	r3, [r4, #52]	@ 0x34
 801207a:	89a3      	ldrh	r3, [r4, #12]
 801207c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012080:	81a3      	strh	r3, [r4, #12]
 8012082:	2300      	movs	r3, #0
 8012084:	6063      	str	r3, [r4, #4]
 8012086:	6923      	ldr	r3, [r4, #16]
 8012088:	6023      	str	r3, [r4, #0]
 801208a:	89a3      	ldrh	r3, [r4, #12]
 801208c:	f043 0308 	orr.w	r3, r3, #8
 8012090:	81a3      	strh	r3, [r4, #12]
 8012092:	6923      	ldr	r3, [r4, #16]
 8012094:	b94b      	cbnz	r3, 80120aa <__swsetup_r+0x7a>
 8012096:	89a3      	ldrh	r3, [r4, #12]
 8012098:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801209c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80120a0:	d003      	beq.n	80120aa <__swsetup_r+0x7a>
 80120a2:	4621      	mov	r1, r4
 80120a4:	4628      	mov	r0, r5
 80120a6:	f000 f883 	bl	80121b0 <__smakebuf_r>
 80120aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120ae:	f013 0201 	ands.w	r2, r3, #1
 80120b2:	d00a      	beq.n	80120ca <__swsetup_r+0x9a>
 80120b4:	2200      	movs	r2, #0
 80120b6:	60a2      	str	r2, [r4, #8]
 80120b8:	6962      	ldr	r2, [r4, #20]
 80120ba:	4252      	negs	r2, r2
 80120bc:	61a2      	str	r2, [r4, #24]
 80120be:	6922      	ldr	r2, [r4, #16]
 80120c0:	b942      	cbnz	r2, 80120d4 <__swsetup_r+0xa4>
 80120c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80120c6:	d1c5      	bne.n	8012054 <__swsetup_r+0x24>
 80120c8:	bd38      	pop	{r3, r4, r5, pc}
 80120ca:	0799      	lsls	r1, r3, #30
 80120cc:	bf58      	it	pl
 80120ce:	6962      	ldrpl	r2, [r4, #20]
 80120d0:	60a2      	str	r2, [r4, #8]
 80120d2:	e7f4      	b.n	80120be <__swsetup_r+0x8e>
 80120d4:	2000      	movs	r0, #0
 80120d6:	e7f7      	b.n	80120c8 <__swsetup_r+0x98>
 80120d8:	2400001c 	.word	0x2400001c

080120dc <_raise_r>:
 80120dc:	291f      	cmp	r1, #31
 80120de:	b538      	push	{r3, r4, r5, lr}
 80120e0:	4605      	mov	r5, r0
 80120e2:	460c      	mov	r4, r1
 80120e4:	d904      	bls.n	80120f0 <_raise_r+0x14>
 80120e6:	2316      	movs	r3, #22
 80120e8:	6003      	str	r3, [r0, #0]
 80120ea:	f04f 30ff 	mov.w	r0, #4294967295
 80120ee:	bd38      	pop	{r3, r4, r5, pc}
 80120f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80120f2:	b112      	cbz	r2, 80120fa <_raise_r+0x1e>
 80120f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80120f8:	b94b      	cbnz	r3, 801210e <_raise_r+0x32>
 80120fa:	4628      	mov	r0, r5
 80120fc:	f000 f830 	bl	8012160 <_getpid_r>
 8012100:	4622      	mov	r2, r4
 8012102:	4601      	mov	r1, r0
 8012104:	4628      	mov	r0, r5
 8012106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801210a:	f000 b817 	b.w	801213c <_kill_r>
 801210e:	2b01      	cmp	r3, #1
 8012110:	d00a      	beq.n	8012128 <_raise_r+0x4c>
 8012112:	1c59      	adds	r1, r3, #1
 8012114:	d103      	bne.n	801211e <_raise_r+0x42>
 8012116:	2316      	movs	r3, #22
 8012118:	6003      	str	r3, [r0, #0]
 801211a:	2001      	movs	r0, #1
 801211c:	e7e7      	b.n	80120ee <_raise_r+0x12>
 801211e:	2100      	movs	r1, #0
 8012120:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012124:	4620      	mov	r0, r4
 8012126:	4798      	blx	r3
 8012128:	2000      	movs	r0, #0
 801212a:	e7e0      	b.n	80120ee <_raise_r+0x12>

0801212c <raise>:
 801212c:	4b02      	ldr	r3, [pc, #8]	@ (8012138 <raise+0xc>)
 801212e:	4601      	mov	r1, r0
 8012130:	6818      	ldr	r0, [r3, #0]
 8012132:	f7ff bfd3 	b.w	80120dc <_raise_r>
 8012136:	bf00      	nop
 8012138:	2400001c 	.word	0x2400001c

0801213c <_kill_r>:
 801213c:	b538      	push	{r3, r4, r5, lr}
 801213e:	4d07      	ldr	r5, [pc, #28]	@ (801215c <_kill_r+0x20>)
 8012140:	2300      	movs	r3, #0
 8012142:	4604      	mov	r4, r0
 8012144:	4608      	mov	r0, r1
 8012146:	4611      	mov	r1, r2
 8012148:	602b      	str	r3, [r5, #0]
 801214a:	f7ef fba9 	bl	80018a0 <_kill>
 801214e:	1c43      	adds	r3, r0, #1
 8012150:	d102      	bne.n	8012158 <_kill_r+0x1c>
 8012152:	682b      	ldr	r3, [r5, #0]
 8012154:	b103      	cbz	r3, 8012158 <_kill_r+0x1c>
 8012156:	6023      	str	r3, [r4, #0]
 8012158:	bd38      	pop	{r3, r4, r5, pc}
 801215a:	bf00      	nop
 801215c:	24000570 	.word	0x24000570

08012160 <_getpid_r>:
 8012160:	f7ef bb96 	b.w	8001890 <_getpid>

08012164 <__swhatbuf_r>:
 8012164:	b570      	push	{r4, r5, r6, lr}
 8012166:	460c      	mov	r4, r1
 8012168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801216c:	2900      	cmp	r1, #0
 801216e:	b096      	sub	sp, #88	@ 0x58
 8012170:	4615      	mov	r5, r2
 8012172:	461e      	mov	r6, r3
 8012174:	da0d      	bge.n	8012192 <__swhatbuf_r+0x2e>
 8012176:	89a3      	ldrh	r3, [r4, #12]
 8012178:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801217c:	f04f 0100 	mov.w	r1, #0
 8012180:	bf14      	ite	ne
 8012182:	2340      	movne	r3, #64	@ 0x40
 8012184:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012188:	2000      	movs	r0, #0
 801218a:	6031      	str	r1, [r6, #0]
 801218c:	602b      	str	r3, [r5, #0]
 801218e:	b016      	add	sp, #88	@ 0x58
 8012190:	bd70      	pop	{r4, r5, r6, pc}
 8012192:	466a      	mov	r2, sp
 8012194:	f000 f848 	bl	8012228 <_fstat_r>
 8012198:	2800      	cmp	r0, #0
 801219a:	dbec      	blt.n	8012176 <__swhatbuf_r+0x12>
 801219c:	9901      	ldr	r1, [sp, #4]
 801219e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80121a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80121a6:	4259      	negs	r1, r3
 80121a8:	4159      	adcs	r1, r3
 80121aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80121ae:	e7eb      	b.n	8012188 <__swhatbuf_r+0x24>

080121b0 <__smakebuf_r>:
 80121b0:	898b      	ldrh	r3, [r1, #12]
 80121b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80121b4:	079d      	lsls	r5, r3, #30
 80121b6:	4606      	mov	r6, r0
 80121b8:	460c      	mov	r4, r1
 80121ba:	d507      	bpl.n	80121cc <__smakebuf_r+0x1c>
 80121bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80121c0:	6023      	str	r3, [r4, #0]
 80121c2:	6123      	str	r3, [r4, #16]
 80121c4:	2301      	movs	r3, #1
 80121c6:	6163      	str	r3, [r4, #20]
 80121c8:	b003      	add	sp, #12
 80121ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121cc:	ab01      	add	r3, sp, #4
 80121ce:	466a      	mov	r2, sp
 80121d0:	f7ff ffc8 	bl	8012164 <__swhatbuf_r>
 80121d4:	9f00      	ldr	r7, [sp, #0]
 80121d6:	4605      	mov	r5, r0
 80121d8:	4639      	mov	r1, r7
 80121da:	4630      	mov	r0, r6
 80121dc:	f7fd fc0a 	bl	800f9f4 <_malloc_r>
 80121e0:	b948      	cbnz	r0, 80121f6 <__smakebuf_r+0x46>
 80121e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80121e6:	059a      	lsls	r2, r3, #22
 80121e8:	d4ee      	bmi.n	80121c8 <__smakebuf_r+0x18>
 80121ea:	f023 0303 	bic.w	r3, r3, #3
 80121ee:	f043 0302 	orr.w	r3, r3, #2
 80121f2:	81a3      	strh	r3, [r4, #12]
 80121f4:	e7e2      	b.n	80121bc <__smakebuf_r+0xc>
 80121f6:	89a3      	ldrh	r3, [r4, #12]
 80121f8:	6020      	str	r0, [r4, #0]
 80121fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80121fe:	81a3      	strh	r3, [r4, #12]
 8012200:	9b01      	ldr	r3, [sp, #4]
 8012202:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012206:	b15b      	cbz	r3, 8012220 <__smakebuf_r+0x70>
 8012208:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801220c:	4630      	mov	r0, r6
 801220e:	f000 f81d 	bl	801224c <_isatty_r>
 8012212:	b128      	cbz	r0, 8012220 <__smakebuf_r+0x70>
 8012214:	89a3      	ldrh	r3, [r4, #12]
 8012216:	f023 0303 	bic.w	r3, r3, #3
 801221a:	f043 0301 	orr.w	r3, r3, #1
 801221e:	81a3      	strh	r3, [r4, #12]
 8012220:	89a3      	ldrh	r3, [r4, #12]
 8012222:	431d      	orrs	r5, r3
 8012224:	81a5      	strh	r5, [r4, #12]
 8012226:	e7cf      	b.n	80121c8 <__smakebuf_r+0x18>

08012228 <_fstat_r>:
 8012228:	b538      	push	{r3, r4, r5, lr}
 801222a:	4d07      	ldr	r5, [pc, #28]	@ (8012248 <_fstat_r+0x20>)
 801222c:	2300      	movs	r3, #0
 801222e:	4604      	mov	r4, r0
 8012230:	4608      	mov	r0, r1
 8012232:	4611      	mov	r1, r2
 8012234:	602b      	str	r3, [r5, #0]
 8012236:	f7ef fb93 	bl	8001960 <_fstat>
 801223a:	1c43      	adds	r3, r0, #1
 801223c:	d102      	bne.n	8012244 <_fstat_r+0x1c>
 801223e:	682b      	ldr	r3, [r5, #0]
 8012240:	b103      	cbz	r3, 8012244 <_fstat_r+0x1c>
 8012242:	6023      	str	r3, [r4, #0]
 8012244:	bd38      	pop	{r3, r4, r5, pc}
 8012246:	bf00      	nop
 8012248:	24000570 	.word	0x24000570

0801224c <_isatty_r>:
 801224c:	b538      	push	{r3, r4, r5, lr}
 801224e:	4d06      	ldr	r5, [pc, #24]	@ (8012268 <_isatty_r+0x1c>)
 8012250:	2300      	movs	r3, #0
 8012252:	4604      	mov	r4, r0
 8012254:	4608      	mov	r0, r1
 8012256:	602b      	str	r3, [r5, #0]
 8012258:	f7ef fb92 	bl	8001980 <_isatty>
 801225c:	1c43      	adds	r3, r0, #1
 801225e:	d102      	bne.n	8012266 <_isatty_r+0x1a>
 8012260:	682b      	ldr	r3, [r5, #0]
 8012262:	b103      	cbz	r3, 8012266 <_isatty_r+0x1a>
 8012264:	6023      	str	r3, [r4, #0]
 8012266:	bd38      	pop	{r3, r4, r5, pc}
 8012268:	24000570 	.word	0x24000570

0801226c <fmax>:
 801226c:	b508      	push	{r3, lr}
 801226e:	ed2d 8b04 	vpush	{d8-d9}
 8012272:	eeb0 8b40 	vmov.f64	d8, d0
 8012276:	eeb0 9b41 	vmov.f64	d9, d1
 801227a:	f000 f815 	bl	80122a8 <__fpclassifyd>
 801227e:	b930      	cbnz	r0, 801228e <fmax+0x22>
 8012280:	eeb0 8b49 	vmov.f64	d8, d9
 8012284:	eeb0 0b48 	vmov.f64	d0, d8
 8012288:	ecbd 8b04 	vpop	{d8-d9}
 801228c:	bd08      	pop	{r3, pc}
 801228e:	eeb0 0b49 	vmov.f64	d0, d9
 8012292:	f000 f809 	bl	80122a8 <__fpclassifyd>
 8012296:	2800      	cmp	r0, #0
 8012298:	d0f4      	beq.n	8012284 <fmax+0x18>
 801229a:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801229e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122a2:	dded      	ble.n	8012280 <fmax+0x14>
 80122a4:	e7ee      	b.n	8012284 <fmax+0x18>
	...

080122a8 <__fpclassifyd>:
 80122a8:	ec51 0b10 	vmov	r0, r1, d0
 80122ac:	b510      	push	{r4, lr}
 80122ae:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 80122b2:	460b      	mov	r3, r1
 80122b4:	d019      	beq.n	80122ea <__fpclassifyd+0x42>
 80122b6:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 80122ba:	490e      	ldr	r1, [pc, #56]	@ (80122f4 <__fpclassifyd+0x4c>)
 80122bc:	428a      	cmp	r2, r1
 80122be:	d90e      	bls.n	80122de <__fpclassifyd+0x36>
 80122c0:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 80122c4:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 80122c8:	428a      	cmp	r2, r1
 80122ca:	d908      	bls.n	80122de <__fpclassifyd+0x36>
 80122cc:	4a0a      	ldr	r2, [pc, #40]	@ (80122f8 <__fpclassifyd+0x50>)
 80122ce:	4213      	tst	r3, r2
 80122d0:	d007      	beq.n	80122e2 <__fpclassifyd+0x3a>
 80122d2:	4294      	cmp	r4, r2
 80122d4:	d107      	bne.n	80122e6 <__fpclassifyd+0x3e>
 80122d6:	fab0 f080 	clz	r0, r0
 80122da:	0940      	lsrs	r0, r0, #5
 80122dc:	bd10      	pop	{r4, pc}
 80122de:	2004      	movs	r0, #4
 80122e0:	e7fc      	b.n	80122dc <__fpclassifyd+0x34>
 80122e2:	2003      	movs	r0, #3
 80122e4:	e7fa      	b.n	80122dc <__fpclassifyd+0x34>
 80122e6:	2000      	movs	r0, #0
 80122e8:	e7f8      	b.n	80122dc <__fpclassifyd+0x34>
 80122ea:	2800      	cmp	r0, #0
 80122ec:	d1ee      	bne.n	80122cc <__fpclassifyd+0x24>
 80122ee:	2002      	movs	r0, #2
 80122f0:	e7f4      	b.n	80122dc <__fpclassifyd+0x34>
 80122f2:	bf00      	nop
 80122f4:	7fdfffff 	.word	0x7fdfffff
 80122f8:	7ff00000 	.word	0x7ff00000

080122fc <checkint>:
 80122fc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012300:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 8012304:	429a      	cmp	r2, r3
 8012306:	b570      	push	{r4, r5, r6, lr}
 8012308:	dd2a      	ble.n	8012360 <checkint+0x64>
 801230a:	f240 4333 	movw	r3, #1075	@ 0x433
 801230e:	429a      	cmp	r2, r3
 8012310:	dc24      	bgt.n	801235c <checkint+0x60>
 8012312:	1a9b      	subs	r3, r3, r2
 8012314:	f1a3 0620 	sub.w	r6, r3, #32
 8012318:	f04f 32ff 	mov.w	r2, #4294967295
 801231c:	fa02 f403 	lsl.w	r4, r2, r3
 8012320:	fa02 f606 	lsl.w	r6, r2, r6
 8012324:	f1c3 0520 	rsb	r5, r3, #32
 8012328:	fa22 f505 	lsr.w	r5, r2, r5
 801232c:	4334      	orrs	r4, r6
 801232e:	432c      	orrs	r4, r5
 8012330:	409a      	lsls	r2, r3
 8012332:	ea20 0202 	bic.w	r2, r0, r2
 8012336:	ea21 0404 	bic.w	r4, r1, r4
 801233a:	4322      	orrs	r2, r4
 801233c:	f1a3 0420 	sub.w	r4, r3, #32
 8012340:	f1c3 0220 	rsb	r2, r3, #32
 8012344:	d10c      	bne.n	8012360 <checkint+0x64>
 8012346:	40d8      	lsrs	r0, r3
 8012348:	fa01 f302 	lsl.w	r3, r1, r2
 801234c:	4318      	orrs	r0, r3
 801234e:	40e1      	lsrs	r1, r4
 8012350:	4308      	orrs	r0, r1
 8012352:	f000 0001 	and.w	r0, r0, #1
 8012356:	f1d0 0002 	rsbs	r0, r0, #2
 801235a:	bd70      	pop	{r4, r5, r6, pc}
 801235c:	2002      	movs	r0, #2
 801235e:	e7fc      	b.n	801235a <checkint+0x5e>
 8012360:	2000      	movs	r0, #0
 8012362:	e7fa      	b.n	801235a <checkint+0x5e>
 8012364:	0000      	movs	r0, r0
	...

08012368 <pow>:
 8012368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801236c:	ee10 4a90 	vmov	r4, s1
 8012370:	ed2d 8b0a 	vpush	{d8-d12}
 8012374:	ea4f 5814 	mov.w	r8, r4, lsr #20
 8012378:	ee11 aa90 	vmov	sl, s3
 801237c:	f108 32ff 	add.w	r2, r8, #4294967295
 8012380:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 8012384:	429a      	cmp	r2, r3
 8012386:	ee10 5a10 	vmov	r5, s0
 801238a:	ee11 0a10 	vmov	r0, s2
 801238e:	b087      	sub	sp, #28
 8012390:	46c4      	mov	ip, r8
 8012392:	ea4f 561a 	mov.w	r6, sl, lsr #20
 8012396:	d806      	bhi.n	80123a6 <pow+0x3e>
 8012398:	f3c6 030a 	ubfx	r3, r6, #0, #11
 801239c:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 80123a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80123a2:	f240 8157 	bls.w	8012654 <pow+0x2ec>
 80123a6:	1802      	adds	r2, r0, r0
 80123a8:	eb4a 010a 	adc.w	r1, sl, sl
 80123ac:	f06f 0b01 	mvn.w	fp, #1
 80123b0:	1e57      	subs	r7, r2, #1
 80123b2:	f141 33ff 	adc.w	r3, r1, #4294967295
 80123b6:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 80123ba:	45bb      	cmp	fp, r7
 80123bc:	eb7e 0303 	sbcs.w	r3, lr, r3
 80123c0:	d242      	bcs.n	8012448 <pow+0xe0>
 80123c2:	ea52 0301 	orrs.w	r3, r2, r1
 80123c6:	f04f 0300 	mov.w	r3, #0
 80123ca:	d10c      	bne.n	80123e6 <pow+0x7e>
 80123cc:	196d      	adds	r5, r5, r5
 80123ce:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 80123d2:	4164      	adcs	r4, r4
 80123d4:	42ab      	cmp	r3, r5
 80123d6:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80123da:	41a3      	sbcs	r3, r4
 80123dc:	f0c0 808f 	bcc.w	80124fe <pow+0x196>
 80123e0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80123e4:	e02b      	b.n	801243e <pow+0xd6>
 80123e6:	4ed4      	ldr	r6, [pc, #848]	@ (8012738 <pow+0x3d0>)
 80123e8:	42b4      	cmp	r4, r6
 80123ea:	bf08      	it	eq
 80123ec:	429d      	cmpeq	r5, r3
 80123ee:	d109      	bne.n	8012404 <pow+0x9c>
 80123f0:	1800      	adds	r0, r0, r0
 80123f2:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 80123f6:	eb4a 0a0a 	adc.w	sl, sl, sl
 80123fa:	4283      	cmp	r3, r0
 80123fc:	4bcf      	ldr	r3, [pc, #828]	@ (801273c <pow+0x3d4>)
 80123fe:	eb73 030a 	sbcs.w	r3, r3, sl
 8012402:	e7eb      	b.n	80123dc <pow+0x74>
 8012404:	196d      	adds	r5, r5, r5
 8012406:	48ce      	ldr	r0, [pc, #824]	@ (8012740 <pow+0x3d8>)
 8012408:	4164      	adcs	r4, r4
 801240a:	42ab      	cmp	r3, r5
 801240c:	eb70 0604 	sbcs.w	r6, r0, r4
 8012410:	d375      	bcc.n	80124fe <pow+0x196>
 8012412:	4281      	cmp	r1, r0
 8012414:	bf08      	it	eq
 8012416:	429a      	cmpeq	r2, r3
 8012418:	d171      	bne.n	80124fe <pow+0x196>
 801241a:	4aca      	ldr	r2, [pc, #808]	@ (8012744 <pow+0x3dc>)
 801241c:	4294      	cmp	r4, r2
 801241e:	bf08      	it	eq
 8012420:	429d      	cmpeq	r5, r3
 8012422:	d0dd      	beq.n	80123e0 <pow+0x78>
 8012424:	4294      	cmp	r4, r2
 8012426:	ea6f 0a0a 	mvn.w	sl, sl
 801242a:	bf34      	ite	cc
 801242c:	2400      	movcc	r4, #0
 801242e:	2401      	movcs	r4, #1
 8012430:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8012434:	4554      	cmp	r4, sl
 8012436:	f040 81dc 	bne.w	80127f2 <pow+0x48a>
 801243a:	ee21 0b01 	vmul.f64	d0, d1, d1
 801243e:	b007      	add	sp, #28
 8012440:	ecbd 8b0a 	vpop	{d8-d12}
 8012444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012448:	196f      	adds	r7, r5, r5
 801244a:	eb44 0904 	adc.w	r9, r4, r4
 801244e:	1e7a      	subs	r2, r7, #1
 8012450:	f169 0300 	sbc.w	r3, r9, #0
 8012454:	4593      	cmp	fp, r2
 8012456:	eb7e 0303 	sbcs.w	r3, lr, r3
 801245a:	d225      	bcs.n	80124a8 <pow+0x140>
 801245c:	ee20 0b00 	vmul.f64	d0, d0, d0
 8012460:	2c00      	cmp	r4, #0
 8012462:	da13      	bge.n	801248c <pow+0x124>
 8012464:	4651      	mov	r1, sl
 8012466:	f7ff ff49 	bl	80122fc <checkint>
 801246a:	2801      	cmp	r0, #1
 801246c:	d10e      	bne.n	801248c <pow+0x124>
 801246e:	eeb1 0b40 	vneg.f64	d0, d0
 8012472:	ea57 0909 	orrs.w	r9, r7, r9
 8012476:	d10b      	bne.n	8012490 <pow+0x128>
 8012478:	f1ba 0f00 	cmp.w	sl, #0
 801247c:	dadf      	bge.n	801243e <pow+0xd6>
 801247e:	b007      	add	sp, #28
 8012480:	ecbd 8b0a 	vpop	{d8-d12}
 8012484:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012488:	f000 b9ee 	b.w	8012868 <__math_divzero>
 801248c:	2000      	movs	r0, #0
 801248e:	e7f0      	b.n	8012472 <pow+0x10a>
 8012490:	f1ba 0f00 	cmp.w	sl, #0
 8012494:	dad3      	bge.n	801243e <pow+0xd6>
 8012496:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801249a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801249e:	ed8d 7b00 	vstr	d7, [sp]
 80124a2:	ed9d 0b00 	vldr	d0, [sp]
 80124a6:	e7ca      	b.n	801243e <pow+0xd6>
 80124a8:	2c00      	cmp	r4, #0
 80124aa:	da2b      	bge.n	8012504 <pow+0x19c>
 80124ac:	4651      	mov	r1, sl
 80124ae:	f7ff ff25 	bl	80122fc <checkint>
 80124b2:	b930      	cbnz	r0, 80124c2 <pow+0x15a>
 80124b4:	b007      	add	sp, #28
 80124b6:	ecbd 8b0a 	vpop	{d8-d12}
 80124ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124be:	f000 b9eb 	b.w	8012898 <__math_invalid>
 80124c2:	1e41      	subs	r1, r0, #1
 80124c4:	4248      	negs	r0, r1
 80124c6:	4148      	adcs	r0, r1
 80124c8:	0480      	lsls	r0, r0, #18
 80124ca:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80124ce:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 80124d2:	f3c6 020a 	ubfx	r2, r6, #0, #11
 80124d6:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 80124da:	2b7f      	cmp	r3, #127	@ 0x7f
 80124dc:	d92d      	bls.n	801253a <pow+0x1d2>
 80124de:	4b96      	ldr	r3, [pc, #600]	@ (8012738 <pow+0x3d0>)
 80124e0:	2000      	movs	r0, #0
 80124e2:	429c      	cmp	r4, r3
 80124e4:	bf08      	it	eq
 80124e6:	4285      	cmpeq	r5, r0
 80124e8:	f43f af7a 	beq.w	80123e0 <pow+0x78>
 80124ec:	f240 31bd 	movw	r1, #957	@ 0x3bd
 80124f0:	428a      	cmp	r2, r1
 80124f2:	d80c      	bhi.n	801250e <pow+0x1a6>
 80124f4:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80124f8:	42a8      	cmp	r0, r5
 80124fa:	41a3      	sbcs	r3, r4
 80124fc:	d204      	bcs.n	8012508 <pow+0x1a0>
 80124fe:	ee31 0b00 	vadd.f64	d0, d1, d0
 8012502:	e79c      	b.n	801243e <pow+0xd6>
 8012504:	2000      	movs	r0, #0
 8012506:	e7e4      	b.n	80124d2 <pow+0x16a>
 8012508:	ee30 0b41 	vsub.f64	d0, d0, d1
 801250c:	e797      	b.n	801243e <pow+0xd6>
 801250e:	2d01      	cmp	r5, #1
 8012510:	eb74 0303 	sbcs.w	r3, r4, r3
 8012514:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8012518:	bf34      	ite	cc
 801251a:	2301      	movcc	r3, #1
 801251c:	2300      	movcs	r3, #0
 801251e:	4296      	cmp	r6, r2
 8012520:	bf8c      	ite	hi
 8012522:	2600      	movhi	r6, #0
 8012524:	2601      	movls	r6, #1
 8012526:	42b3      	cmp	r3, r6
 8012528:	f000 809c 	beq.w	8012664 <pow+0x2fc>
 801252c:	b007      	add	sp, #28
 801252e:	ecbd 8b0a 	vpop	{d8-d12}
 8012532:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012536:	f000 b98f 	b.w	8012858 <__math_oflow>
 801253a:	f1bc 0f00 	cmp.w	ip, #0
 801253e:	d10a      	bne.n	8012556 <pow+0x1ee>
 8012540:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 8012728 <pow+0x3c0>
 8012544:	ee20 7b07 	vmul.f64	d7, d0, d7
 8012548:	ec53 2b17 	vmov	r2, r3, d7
 801254c:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8012550:	4615      	mov	r5, r2
 8012552:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 8012556:	4a7c      	ldr	r2, [pc, #496]	@ (8012748 <pow+0x3e0>)
 8012558:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801255c:	4422      	add	r2, r4
 801255e:	1513      	asrs	r3, r2, #20
 8012560:	f3c2 3146 	ubfx	r1, r2, #13, #7
 8012564:	ee03 3a10 	vmov	s6, r3
 8012568:	0d12      	lsrs	r2, r2, #20
 801256a:	4b78      	ldr	r3, [pc, #480]	@ (801274c <pow+0x3e4>)
 801256c:	0512      	lsls	r2, r2, #20
 801256e:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 8012572:	1aa7      	subs	r7, r4, r2
 8012574:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 8012578:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 801257c:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 8012580:	1e2e      	subs	r6, r5, #0
 8012582:	ec47 6b14 	vmov	d4, r6, r7
 8012586:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 801258a:	eea4 6b05 	vfma.f64	d6, d4, d5
 801258e:	ed93 5b00 	vldr	d5, [r3]
 8012592:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8012596:	eea3 2b05 	vfma.f64	d2, d3, d5
 801259a:	ed93 5b02 	vldr	d5, [r3, #8]
 801259e:	ee36 4b02 	vadd.f64	d4, d6, d2
 80125a2:	ee32 2b44 	vsub.f64	d2, d2, d4
 80125a6:	eea3 7b05 	vfma.f64	d7, d3, d5
 80125aa:	ed93 5b04 	vldr	d5, [r3, #16]
 80125ae:	ee32 2b06 	vadd.f64	d2, d2, d6
 80125b2:	ee37 7b02 	vadd.f64	d7, d7, d2
 80125b6:	ee26 5b05 	vmul.f64	d5, d6, d5
 80125ba:	ee26 0b05 	vmul.f64	d0, d6, d5
 80125be:	ee34 8b00 	vadd.f64	d8, d4, d0
 80125c2:	eeb0 9b40 	vmov.f64	d9, d0
 80125c6:	ee34 4b48 	vsub.f64	d4, d4, d8
 80125ca:	ee96 9b05 	vfnms.f64	d9, d6, d5
 80125ce:	ee34 ab00 	vadd.f64	d10, d4, d0
 80125d2:	ed93 5b06 	vldr	d5, [r3, #24]
 80125d6:	ee26 bb00 	vmul.f64	d11, d6, d0
 80125da:	ee37 7b09 	vadd.f64	d7, d7, d9
 80125de:	ed93 4b08 	vldr	d4, [r3, #32]
 80125e2:	ee37 7b0a 	vadd.f64	d7, d7, d10
 80125e6:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 80125ea:	eea6 5b04 	vfma.f64	d5, d6, d4
 80125ee:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 80125f2:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 80125f6:	eea6 4b03 	vfma.f64	d4, d6, d3
 80125fa:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 80125fe:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8012602:	eea0 4b03 	vfma.f64	d4, d0, d3
 8012606:	eea0 5b04 	vfma.f64	d5, d0, d4
 801260a:	eeab 7b05 	vfma.f64	d7, d11, d5
 801260e:	ee38 4b07 	vadd.f64	d4, d8, d7
 8012612:	ee21 6b04 	vmul.f64	d6, d1, d4
 8012616:	ee16 3a90 	vmov	r3, s13
 801261a:	eeb0 5b46 	vmov.f64	d5, d6
 801261e:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8012622:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 8012626:	18b2      	adds	r2, r6, r2
 8012628:	2a3e      	cmp	r2, #62	@ 0x3e
 801262a:	ee91 5b04 	vfnms.f64	d5, d1, d4
 801262e:	ee38 8b44 	vsub.f64	d8, d8, d4
 8012632:	ee38 8b07 	vadd.f64	d8, d8, d7
 8012636:	eea1 5b08 	vfma.f64	d5, d1, d8
 801263a:	d91b      	bls.n	8012674 <pow+0x30c>
 801263c:	2a00      	cmp	r2, #0
 801263e:	da0b      	bge.n	8012658 <pow+0x2f0>
 8012640:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8012644:	ee36 0b00 	vadd.f64	d0, d6, d0
 8012648:	2800      	cmp	r0, #0
 801264a:	f43f aef8 	beq.w	801243e <pow+0xd6>
 801264e:	eeb1 0b40 	vneg.f64	d0, d0
 8012652:	e6f4      	b.n	801243e <pow+0xd6>
 8012654:	2000      	movs	r0, #0
 8012656:	e77e      	b.n	8012556 <pow+0x1ee>
 8012658:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 801265c:	d909      	bls.n	8012672 <pow+0x30a>
 801265e:	2b00      	cmp	r3, #0
 8012660:	f6bf af64 	bge.w	801252c <pow+0x1c4>
 8012664:	b007      	add	sp, #28
 8012666:	ecbd 8b0a 	vpop	{d8-d12}
 801266a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801266e:	f000 b8eb 	b.w	8012848 <__math_uflow>
 8012672:	2600      	movs	r6, #0
 8012674:	4936      	ldr	r1, [pc, #216]	@ (8012750 <pow+0x3e8>)
 8012676:	ed91 4b02 	vldr	d4, [r1, #8]
 801267a:	ed91 3b00 	vldr	d3, [r1]
 801267e:	eeb0 7b44 	vmov.f64	d7, d4
 8012682:	eea6 7b03 	vfma.f64	d7, d6, d3
 8012686:	ee17 5a10 	vmov	r5, s14
 801268a:	ee37 7b44 	vsub.f64	d7, d7, d4
 801268e:	ed91 4b04 	vldr	d4, [r1, #16]
 8012692:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 8012696:	eea7 6b04 	vfma.f64	d6, d7, d4
 801269a:	ed91 4b06 	vldr	d4, [r1, #24]
 801269e:	18dc      	adds	r4, r3, r3
 80126a0:	f104 030f 	add.w	r3, r4, #15
 80126a4:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80126a8:	eea7 6b04 	vfma.f64	d6, d7, d4
 80126ac:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 80126b0:	ee35 5b06 	vadd.f64	d5, d5, d6
 80126b4:	ee25 6b05 	vmul.f64	d6, d5, d5
 80126b8:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 80126bc:	ed91 4b08 	vldr	d4, [r1, #32]
 80126c0:	ee35 7b07 	vadd.f64	d7, d5, d7
 80126c4:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 80126c8:	eea5 4b03 	vfma.f64	d4, d5, d3
 80126cc:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 80126d0:	eea6 7b04 	vfma.f64	d7, d6, d4
 80126d4:	ee26 6b06 	vmul.f64	d6, d6, d6
 80126d8:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 80126dc:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 80126e0:	f8d2 e004 	ldr.w	lr, [r2, #4]
 80126e4:	eea5 4b03 	vfma.f64	d4, d5, d3
 80126e8:	1940      	adds	r0, r0, r5
 80126ea:	2700      	movs	r7, #0
 80126ec:	eb17 020c 	adds.w	r2, r7, ip
 80126f0:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 80126f4:	eea6 7b04 	vfma.f64	d7, d6, d4
 80126f8:	2e00      	cmp	r6, #0
 80126fa:	d175      	bne.n	80127e8 <pow+0x480>
 80126fc:	42bd      	cmp	r5, r7
 80126fe:	db29      	blt.n	8012754 <pow+0x3ec>
 8012700:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 8012704:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 8012708:	4610      	mov	r0, r2
 801270a:	ec41 0b10 	vmov	d0, r0, r1
 801270e:	eea7 0b00 	vfma.f64	d0, d7, d0
 8012712:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8012730 <pow+0x3c8>
 8012716:	ee20 0b07 	vmul.f64	d0, d0, d7
 801271a:	b007      	add	sp, #28
 801271c:	ecbd 8b0a 	vpop	{d8-d12}
 8012720:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012724:	f000 b8d0 	b.w	80128c8 <__math_check_oflow>
 8012728:	00000000 	.word	0x00000000
 801272c:	43300000 	.word	0x43300000
 8012730:	00000000 	.word	0x00000000
 8012734:	7f000000 	.word	0x7f000000
 8012738:	3ff00000 	.word	0x3ff00000
 801273c:	fff00000 	.word	0xfff00000
 8012740:	ffe00000 	.word	0xffe00000
 8012744:	7fe00000 	.word	0x7fe00000
 8012748:	c0196aab 	.word	0xc0196aab
 801274c:	08012d88 	.word	0x08012d88
 8012750:	08013dd0 	.word	0x08013dd0
 8012754:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8012758:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 801275c:	4610      	mov	r0, r2
 801275e:	ec41 0b15 	vmov	d5, r0, r1
 8012762:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 8012766:	ee27 6b05 	vmul.f64	d6, d7, d5
 801276a:	ee35 7b06 	vadd.f64	d7, d5, d6
 801276e:	eeb0 4bc7 	vabs.f64	d4, d7
 8012772:	eeb4 4bc3 	vcmpe.f64	d4, d3
 8012776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801277a:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 80127f8 <pow+0x490>
 801277e:	d52a      	bpl.n	80127d6 <pow+0x46e>
 8012780:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012784:	ee35 5b47 	vsub.f64	d5, d5, d7
 8012788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801278c:	ee35 5b06 	vadd.f64	d5, d5, d6
 8012790:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 8012794:	bf58      	it	pl
 8012796:	eeb0 4b43 	vmovpl.f64	d4, d3
 801279a:	ee37 3b04 	vadd.f64	d3, d7, d4
 801279e:	ee34 6b43 	vsub.f64	d6, d4, d3
 80127a2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80127a6:	ee36 6b05 	vadd.f64	d6, d6, d5
 80127aa:	ee36 6b03 	vadd.f64	d6, d6, d3
 80127ae:	ee36 7b44 	vsub.f64	d7, d6, d4
 80127b2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80127b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127ba:	d104      	bne.n	80127c6 <pow+0x45e>
 80127bc:	4632      	mov	r2, r6
 80127be:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 80127c2:	ec43 2b17 	vmov	d7, r2, r3
 80127c6:	ed8d 0b02 	vstr	d0, [sp, #8]
 80127ca:	ed9d 6b02 	vldr	d6, [sp, #8]
 80127ce:	ee26 6b00 	vmul.f64	d6, d6, d0
 80127d2:	ed8d 6b04 	vstr	d6, [sp, #16]
 80127d6:	ee27 0b00 	vmul.f64	d0, d7, d0
 80127da:	b007      	add	sp, #28
 80127dc:	ecbd 8b0a 	vpop	{d8-d12}
 80127e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127e4:	f000 b867 	b.w	80128b6 <__math_check_uflow>
 80127e8:	ec43 2b10 	vmov	d0, r2, r3
 80127ec:	eea7 0b00 	vfma.f64	d0, d7, d0
 80127f0:	e625      	b.n	801243e <pow+0xd6>
 80127f2:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 8012800 <pow+0x498>
 80127f6:	e622      	b.n	801243e <pow+0xd6>
 80127f8:	00000000 	.word	0x00000000
 80127fc:	00100000 	.word	0x00100000
	...

08012808 <with_errno>:
 8012808:	b510      	push	{r4, lr}
 801280a:	ed2d 8b02 	vpush	{d8}
 801280e:	eeb0 8b40 	vmov.f64	d8, d0
 8012812:	4604      	mov	r4, r0
 8012814:	f7fc fa68 	bl	800ece8 <__errno>
 8012818:	eeb0 0b48 	vmov.f64	d0, d8
 801281c:	ecbd 8b02 	vpop	{d8}
 8012820:	6004      	str	r4, [r0, #0]
 8012822:	bd10      	pop	{r4, pc}

08012824 <xflow>:
 8012824:	b082      	sub	sp, #8
 8012826:	b158      	cbz	r0, 8012840 <xflow+0x1c>
 8012828:	eeb1 7b40 	vneg.f64	d7, d0
 801282c:	ed8d 7b00 	vstr	d7, [sp]
 8012830:	ed9d 7b00 	vldr	d7, [sp]
 8012834:	2022      	movs	r0, #34	@ 0x22
 8012836:	ee20 0b07 	vmul.f64	d0, d0, d7
 801283a:	b002      	add	sp, #8
 801283c:	f7ff bfe4 	b.w	8012808 <with_errno>
 8012840:	eeb0 7b40 	vmov.f64	d7, d0
 8012844:	e7f2      	b.n	801282c <xflow+0x8>
	...

08012848 <__math_uflow>:
 8012848:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012850 <__math_uflow+0x8>
 801284c:	f7ff bfea 	b.w	8012824 <xflow>
 8012850:	00000000 	.word	0x00000000
 8012854:	10000000 	.word	0x10000000

08012858 <__math_oflow>:
 8012858:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012860 <__math_oflow+0x8>
 801285c:	f7ff bfe2 	b.w	8012824 <xflow>
 8012860:	00000000 	.word	0x00000000
 8012864:	70000000 	.word	0x70000000

08012868 <__math_divzero>:
 8012868:	b082      	sub	sp, #8
 801286a:	2800      	cmp	r0, #0
 801286c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8012870:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8012874:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8012878:	ed8d 7b00 	vstr	d7, [sp]
 801287c:	ed9d 0b00 	vldr	d0, [sp]
 8012880:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8012890 <__math_divzero+0x28>
 8012884:	2022      	movs	r0, #34	@ 0x22
 8012886:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801288a:	b002      	add	sp, #8
 801288c:	f7ff bfbc 	b.w	8012808 <with_errno>
	...

08012898 <__math_invalid>:
 8012898:	eeb0 7b40 	vmov.f64	d7, d0
 801289c:	eeb4 7b47 	vcmp.f64	d7, d7
 80128a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128a4:	ee30 6b40 	vsub.f64	d6, d0, d0
 80128a8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80128ac:	d602      	bvs.n	80128b4 <__math_invalid+0x1c>
 80128ae:	2021      	movs	r0, #33	@ 0x21
 80128b0:	f7ff bfaa 	b.w	8012808 <with_errno>
 80128b4:	4770      	bx	lr

080128b6 <__math_check_uflow>:
 80128b6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80128ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128be:	d102      	bne.n	80128c6 <__math_check_uflow+0x10>
 80128c0:	2022      	movs	r0, #34	@ 0x22
 80128c2:	f7ff bfa1 	b.w	8012808 <with_errno>
 80128c6:	4770      	bx	lr

080128c8 <__math_check_oflow>:
 80128c8:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 80128e8 <__math_check_oflow+0x20>
 80128cc:	eeb0 7bc0 	vabs.f64	d7, d0
 80128d0:	eeb4 7b46 	vcmp.f64	d7, d6
 80128d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128d8:	dd02      	ble.n	80128e0 <__math_check_oflow+0x18>
 80128da:	2022      	movs	r0, #34	@ 0x22
 80128dc:	f7ff bf94 	b.w	8012808 <with_errno>
 80128e0:	4770      	bx	lr
 80128e2:	bf00      	nop
 80128e4:	f3af 8000 	nop.w
 80128e8:	ffffffff 	.word	0xffffffff
 80128ec:	7fefffff 	.word	0x7fefffff

080128f0 <_init>:
 80128f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128f2:	bf00      	nop
 80128f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128f6:	bc08      	pop	{r3}
 80128f8:	469e      	mov	lr, r3
 80128fa:	4770      	bx	lr

080128fc <_fini>:
 80128fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128fe:	bf00      	nop
 8012900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012902:	bc08      	pop	{r3}
 8012904:	469e      	mov	lr, r3
 8012906:	4770      	bx	lr
