
projekt_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d264  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  0800d508  0800d508  0000e508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d970  0800d970  0000f1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d970  0800d970  0000e970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d978  0800d978  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d978  0800d978  0000e978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d97c  0800d97c  0000e97c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  24000000  0800d980  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  240001d8  0800db58  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400042c  0800db58  0000f42c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000169df  00000000  00000000  0000f206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029bb  00000000  00000000  00025be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  000285a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e31  00000000  00000000  000297d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b6f3  00000000  00000000  0002a601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000189be  00000000  00000000  00065cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00188e50  00000000  00000000  0007e6b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00207502  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060a0  00000000  00000000  00207548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0020d5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d4ec 	.word	0x0800d4ec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800d4ec 	.word	0x0800d4ec

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a6c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b64 <SystemInit+0xfc>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a72:	4a3c      	ldr	r2, [pc, #240]	@ (8000b64 <SystemInit+0xfc>)
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a7c:	4b39      	ldr	r3, [pc, #228]	@ (8000b64 <SystemInit+0xfc>)
 8000a7e:	691b      	ldr	r3, [r3, #16]
 8000a80:	4a38      	ldr	r2, [pc, #224]	@ (8000b64 <SystemInit+0xfc>)
 8000a82:	f043 0310 	orr.w	r3, r3, #16
 8000a86:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a88:	4b37      	ldr	r3, [pc, #220]	@ (8000b68 <SystemInit+0x100>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f003 030f 	and.w	r3, r3, #15
 8000a90:	2b06      	cmp	r3, #6
 8000a92:	d807      	bhi.n	8000aa4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a94:	4b34      	ldr	r3, [pc, #208]	@ (8000b68 <SystemInit+0x100>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f023 030f 	bic.w	r3, r3, #15
 8000a9c:	4a32      	ldr	r2, [pc, #200]	@ (8000b68 <SystemInit+0x100>)
 8000a9e:	f043 0307 	orr.w	r3, r3, #7
 8000aa2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aa4:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <SystemInit+0x104>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a30      	ldr	r2, [pc, #192]	@ (8000b6c <SystemInit+0x104>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <SystemInit+0x104>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b6c <SystemInit+0x104>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	492c      	ldr	r1, [pc, #176]	@ (8000b6c <SystemInit+0x104>)
 8000abc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b70 <SystemInit+0x108>)
 8000abe:	4013      	ands	r3, r2
 8000ac0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ac2:	4b29      	ldr	r3, [pc, #164]	@ (8000b68 <SystemInit+0x100>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f003 0308 	and.w	r3, r3, #8
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d007      	beq.n	8000ade <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ace:	4b26      	ldr	r3, [pc, #152]	@ (8000b68 <SystemInit+0x100>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f023 030f 	bic.w	r3, r3, #15
 8000ad6:	4a24      	ldr	r2, [pc, #144]	@ (8000b68 <SystemInit+0x100>)
 8000ad8:	f043 0307 	orr.w	r3, r3, #7
 8000adc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ade:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <SystemInit+0x104>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <SystemInit+0x104>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000aea:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <SystemInit+0x104>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000af0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b6c <SystemInit+0x104>)
 8000af2:	4a20      	ldr	r2, [pc, #128]	@ (8000b74 <SystemInit+0x10c>)
 8000af4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000af6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <SystemInit+0x104>)
 8000af8:	4a1f      	ldr	r2, [pc, #124]	@ (8000b78 <SystemInit+0x110>)
 8000afa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <SystemInit+0x104>)
 8000afe:	4a1f      	ldr	r2, [pc, #124]	@ (8000b7c <SystemInit+0x114>)
 8000b00:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <SystemInit+0x104>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b08:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <SystemInit+0x104>)
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b7c <SystemInit+0x114>)
 8000b0c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b0e:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <SystemInit+0x104>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b14:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <SystemInit+0x104>)
 8000b16:	4a19      	ldr	r2, [pc, #100]	@ (8000b7c <SystemInit+0x114>)
 8000b18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <SystemInit+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <SystemInit+0x104>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a11      	ldr	r2, [pc, #68]	@ (8000b6c <SystemInit+0x104>)
 8000b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <SystemInit+0x104>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <SystemInit+0x118>)
 8000b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b36:	4a12      	ldr	r2, [pc, #72]	@ (8000b80 <SystemInit+0x118>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <SystemInit+0x11c>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <SystemInit+0x120>)
 8000b44:	4013      	ands	r3, r2
 8000b46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b4a:	d202      	bcs.n	8000b52 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <SystemInit+0x124>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b52:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <SystemInit+0x128>)
 8000b54:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b58:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00
 8000b68:	52002000 	.word	0x52002000
 8000b6c:	58024400 	.word	0x58024400
 8000b70:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b74:	02020200 	.word	0x02020200
 8000b78:	01ff0000 	.word	0x01ff0000
 8000b7c:	01010280 	.word	0x01010280
 8000b80:	580000c0 	.word	0x580000c0
 8000b84:	5c001000 	.word	0x5c001000
 8000b88:	ffff0000 	.word	0xffff0000
 8000b8c:	51008108 	.word	0x51008108
 8000b90:	52004000 	.word	0x52004000

08000b94 <SendDebugMessage>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void SendDebugMessage(const char* message) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff fbef 	bl	8000380 <strlen>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	4803      	ldr	r0, [pc, #12]	@ (8000bbc <SendDebugMessage+0x28>)
 8000bae:	f005 fe41 	bl	8006834 <HAL_UART_Transmit>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	24000240 	.word	0x24000240

08000bc0 <HAL_UART_RxCpltCallback>:
    snprintf(buffer, sizeof(buffer), "%.2f", value);
    SendDebugMessage(buffer);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	SendDebugMessage(rx_data);
 8000bc8:	4811      	ldr	r0, [pc, #68]	@ (8000c10 <HAL_UART_RxCpltCallback+0x50>)
 8000bca:	f7ff ffe3 	bl	8000b94 <SendDebugMessage>
	int rx_data_int = 100*(rx_data[0]-'0') + 10*(rx_data[1]-'0') + (rx_data[2]-'0');
 8000bce:	4b10      	ldr	r3, [pc, #64]	@ (8000c10 <HAL_UART_RxCpltCallback+0x50>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	3b30      	subs	r3, #48	@ 0x30
 8000bd4:	2264      	movs	r2, #100	@ 0x64
 8000bd6:	fb02 f103 	mul.w	r1, r2, r3
 8000bda:	4b0d      	ldr	r3, [pc, #52]	@ (8000c10 <HAL_UART_RxCpltCallback+0x50>)
 8000bdc:	785b      	ldrb	r3, [r3, #1]
 8000bde:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8000be2:	4613      	mov	r3, r2
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	4413      	add	r3, r2
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	18ca      	adds	r2, r1, r3
 8000bec:	4b08      	ldr	r3, [pc, #32]	@ (8000c10 <HAL_UART_RxCpltCallback+0x50>)
 8000bee:	789b      	ldrb	r3, [r3, #2]
 8000bf0:	3b30      	subs	r3, #48	@ 0x30
 8000bf2:	4413      	add	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, rx_data_int);
 8000bf6:	4b07      	ldr	r3, [pc, #28]	@ (8000c14 <HAL_UART_RxCpltCallback+0x54>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_UART_Receive_IT(&huart3, &rx_data, 3);
 8000bfe:	2203      	movs	r2, #3
 8000c00:	4903      	ldr	r1, [pc, #12]	@ (8000c10 <HAL_UART_RxCpltCallback+0x50>)
 8000c02:	4805      	ldr	r0, [pc, #20]	@ (8000c18 <HAL_UART_RxCpltCallback+0x58>)
 8000c04:	f005 fea4 	bl	8006950 <HAL_UART_Receive_IT>
}
 8000c08:	bf00      	nop
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	240002d4 	.word	0x240002d4
 8000c14:	240001f4 	.word	0x240001f4
 8000c18:	24000240 	.word	0x24000240

08000c1c <HAL_Delay>:

void HAL_Delay(uint32_t Delay)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c24:	f000 fdda 	bl	80017dc <HAL_GetTick>
 8000c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c34:	d005      	beq.n	8000c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c36:	4b0a      	ldr	r3, [pc, #40]	@ (8000c60 <HAL_Delay+0x44>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4413      	add	r3, r2
 8000c40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c42:	bf00      	nop
 8000c44:	f000 fdca 	bl	80017dc <HAL_GetTick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d8f7      	bhi.n	8000c44 <HAL_Delay+0x28>
  {
  }
}
 8000c54:	bf00      	nop
 8000c56:	bf00      	nop
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	2400000c 	.word	0x2400000c

08000c64 <Servo_SetPulse>:

void Servo_SetPulse(uint16_t pulse)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse);
 8000c6e:	4b05      	ldr	r3, [pc, #20]	@ (8000c84 <Servo_SetPulse+0x20>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	88fa      	ldrh	r2, [r7, #6]
 8000c74:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	240001f4 	.word	0x240001f4

08000c88 <Servo_Rotate>:

void Servo_Rotate(float angle)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	ed87 0a01 	vstr	s0, [r7, #4]
    float time = fabs(angle) / DEG_PER_SEC;
 8000c92:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c96:	eeb0 7ae7 	vabs.f32	s14, s15
 8000c9a:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8000cf4 <Servo_Rotate+0x6c>
 8000c9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ca2:	edc7 7a03 	vstr	s15, [r7, #12]
    uint16_t pulse = (angle > 0) ? SERVO_CW : SERVO_CCW;
 8000ca6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000caa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cb2:	dd01      	ble.n	8000cb8 <Servo_Rotate+0x30>
 8000cb4:	2332      	movs	r3, #50	@ 0x32
 8000cb6:	e000      	b.n	8000cba <Servo_Rotate+0x32>
 8000cb8:	2364      	movs	r3, #100	@ 0x64
 8000cba:	817b      	strh	r3, [r7, #10]
    Servo_SetPulse(pulse);
 8000cbc:	897b      	ldrh	r3, [r7, #10]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff ffd0 	bl	8000c64 <Servo_SetPulse>
    HAL_Delay((uint32_t)(time * 1000));
 8000cc4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cc8:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8000cf8 <Servo_Rotate+0x70>
 8000ccc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cd4:	ee17 0a90 	vmov	r0, s15
 8000cd8:	f7ff ffa0 	bl	8000c1c <HAL_Delay>
    Servo_SetPulse(SERVO_NEUTRAL);
 8000cdc:	204b      	movs	r0, #75	@ 0x4b
 8000cde:	f7ff ffc1 	bl	8000c64 <Servo_SetPulse>
    HAL_Delay(500);
 8000ce2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ce6:	f7ff ff99 	bl	8000c1c <HAL_Delay>
}
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	444a8000 	.word	0x444a8000
 8000cf8:	447a0000 	.word	0x447a0000

08000cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000d02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d06:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000d08:	bf00      	nop
 8000d0a:	4b35      	ldr	r3, [pc, #212]	@ (8000de0 <main+0xe4>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d004      	beq.n	8000d20 <main+0x24>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	1e5a      	subs	r2, r3, #1
 8000d1a:	607a      	str	r2, [r7, #4]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	dcf4      	bgt.n	8000d0a <main+0xe>
  if ( timeout < 0 )
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	da01      	bge.n	8000d2a <main+0x2e>
  {
  Error_Handler();
 8000d26:	f000 fa9d 	bl	8001264 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d2a:	f000 fcd1 	bl	80016d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d2e:	f000 f863 	bl	8000df8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000d32:	4b2b      	ldr	r3, [pc, #172]	@ (8000de0 <main+0xe4>)
 8000d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d38:	4a29      	ldr	r2, [pc, #164]	@ (8000de0 <main+0xe4>)
 8000d3a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d42:	4b27      	ldr	r3, [pc, #156]	@ (8000de0 <main+0xe4>)
 8000d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d4c:	603b      	str	r3, [r7, #0]
 8000d4e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000d50:	2000      	movs	r0, #0
 8000d52:	f001 fd99 	bl	8002888 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000d56:	2100      	movs	r1, #0
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f001 fdaf 	bl	80028bc <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000d5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d62:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000d64:	bf00      	nop
 8000d66:	4b1e      	ldr	r3, [pc, #120]	@ (8000de0 <main+0xe4>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d104      	bne.n	8000d7c <main+0x80>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	1e5a      	subs	r2, r3, #1
 8000d76:	607a      	str	r2, [r7, #4]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	dcf4      	bgt.n	8000d66 <main+0x6a>
if ( timeout < 0 )
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	da01      	bge.n	8000d86 <main+0x8a>
{
Error_Handler();
 8000d82:	f000 fa6f 	bl	8001264 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d86:	f000 f96f 	bl	8001068 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d8a:	f000 f89f 	bl	8000ecc <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000d8e:	f000 f91f 	bl	8000fd0 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  TIM2->CCR1 = 50;
 8000d92:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d96:	2232      	movs	r2, #50	@ 0x32
 8000d98:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2->CCR2 = 50;
 8000d9a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d9e:	2232      	movs	r2, #50	@ 0x32
 8000da0:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8000da2:	2100      	movs	r1, #0
 8000da4:	480f      	ldr	r0, [pc, #60]	@ (8000de4 <main+0xe8>)
 8000da6:	f004 fcc1 	bl	800572c <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 8000daa:	2104      	movs	r1, #4
 8000dac:	480d      	ldr	r0, [pc, #52]	@ (8000de4 <main+0xe8>)
 8000dae:	f004 fcbd 	bl	800572c <HAL_TIM_PWM_Start_IT>
  HAL_UART_Receive_IT(&huart3, &rx_data, 3);
 8000db2:	2203      	movs	r2, #3
 8000db4:	490c      	ldr	r1, [pc, #48]	@ (8000de8 <main+0xec>)
 8000db6:	480d      	ldr	r0, [pc, #52]	@ (8000dec <main+0xf0>)
 8000db8:	f005 fdca 	bl	8006950 <HAL_UART_Receive_IT>
  while (1)
  {
	  Servo_Rotate(90);
 8000dbc:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8000df0 <main+0xf4>
 8000dc0:	f7ff ff62 	bl	8000c88 <Servo_Rotate>
	  HAL_Delay(2000);
 8000dc4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000dc8:	f7ff ff28 	bl	8000c1c <HAL_Delay>
	  Servo_Rotate(-90);
 8000dcc:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8000df4 <main+0xf8>
 8000dd0:	f7ff ff5a 	bl	8000c88 <Servo_Rotate>
	  HAL_Delay(2000);
 8000dd4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000dd8:	f7ff ff20 	bl	8000c1c <HAL_Delay>
	  Servo_Rotate(90);
 8000ddc:	bf00      	nop
 8000dde:	e7ed      	b.n	8000dbc <main+0xc0>
 8000de0:	58024400 	.word	0x58024400
 8000de4:	240001f4 	.word	0x240001f4
 8000de8:	240002d4 	.word	0x240002d4
 8000dec:	24000240 	.word	0x24000240
 8000df0:	42b40000 	.word	0x42b40000
 8000df4:	c2b40000 	.word	0xc2b40000

08000df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b09c      	sub	sp, #112	@ 0x70
 8000dfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e02:	224c      	movs	r2, #76	@ 0x4c
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f009 f85b 	bl	8009ec2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	2220      	movs	r2, #32
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f009 f855 	bl	8009ec2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e18:	2004      	movs	r0, #4
 8000e1a:	f001 fd63 	bl	80028e4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e1e:	2300      	movs	r3, #0
 8000e20:	603b      	str	r3, [r7, #0]
 8000e22:	4b28      	ldr	r3, [pc, #160]	@ (8000ec4 <SystemClock_Config+0xcc>)
 8000e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e26:	4a27      	ldr	r2, [pc, #156]	@ (8000ec4 <SystemClock_Config+0xcc>)
 8000e28:	f023 0301 	bic.w	r3, r3, #1
 8000e2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000e2e:	4b25      	ldr	r3, [pc, #148]	@ (8000ec4 <SystemClock_Config+0xcc>)
 8000e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	4b23      	ldr	r3, [pc, #140]	@ (8000ec8 <SystemClock_Config+0xd0>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e40:	4a21      	ldr	r2, [pc, #132]	@ (8000ec8 <SystemClock_Config+0xd0>)
 8000e42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e46:	6193      	str	r3, [r2, #24]
 8000e48:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec8 <SystemClock_Config+0xd0>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e50:	603b      	str	r3, [r7, #0]
 8000e52:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e54:	bf00      	nop
 8000e56:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec8 <SystemClock_Config+0xd0>)
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e62:	d1f8      	bne.n	8000e56 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e64:	2302      	movs	r3, #2
 8000e66:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e6c:	2340      	movs	r3, #64	@ 0x40
 8000e6e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f001 fd8d 	bl	8002998 <HAL_RCC_OscConfig>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000e84:	f000 f9ee 	bl	8001264 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e88:	233f      	movs	r3, #63	@ 0x3f
 8000e8a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e9c:	2340      	movs	r3, #64	@ 0x40
 8000e9e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	2101      	movs	r1, #1
 8000eac:	4618      	mov	r0, r3
 8000eae:	f002 f9cd 	bl	800324c <HAL_RCC_ClockConfig>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000eb8:	f000 f9d4 	bl	8001264 <Error_Handler>
  }
}
 8000ebc:	bf00      	nop
 8000ebe:	3770      	adds	r7, #112	@ 0x70
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	58000400 	.word	0x58000400
 8000ec8:	58024800 	.word	0x58024800

08000ecc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08e      	sub	sp, #56	@ 0x38
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ed2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee0:	f107 031c 	add.w	r3, r7, #28
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eec:	463b      	mov	r3, r7
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
 8000ef8:	611a      	str	r2, [r3, #16]
 8000efa:	615a      	str	r2, [r3, #20]
 8000efc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000efe:	4b33      	ldr	r3, [pc, #204]	@ (8000fcc <MX_TIM2_Init+0x100>)
 8000f00:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f04:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1280;
 8000f06:	4b31      	ldr	r3, [pc, #196]	@ (8000fcc <MX_TIM2_Init+0x100>)
 8000f08:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000f0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0e:	4b2f      	ldr	r3, [pc, #188]	@ (8000fcc <MX_TIM2_Init+0x100>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000f14:	4b2d      	ldr	r3, [pc, #180]	@ (8000fcc <MX_TIM2_Init+0x100>)
 8000f16:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8000fcc <MX_TIM2_Init+0x100>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f22:	4b2a      	ldr	r3, [pc, #168]	@ (8000fcc <MX_TIM2_Init+0x100>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f28:	4828      	ldr	r0, [pc, #160]	@ (8000fcc <MX_TIM2_Init+0x100>)
 8000f2a:	f004 fb47 	bl	80055bc <HAL_TIM_Base_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000f34:	f000 f996 	bl	8001264 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f42:	4619      	mov	r1, r3
 8000f44:	4821      	ldr	r0, [pc, #132]	@ (8000fcc <MX_TIM2_Init+0x100>)
 8000f46:	f004 fe5f 	bl	8005c08 <HAL_TIM_ConfigClockSource>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000f50:	f000 f988 	bl	8001264 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f54:	481d      	ldr	r0, [pc, #116]	@ (8000fcc <MX_TIM2_Init+0x100>)
 8000f56:	f004 fb88 	bl	800566a <HAL_TIM_PWM_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000f60:	f000 f980 	bl	8001264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	4619      	mov	r1, r3
 8000f72:	4816      	ldr	r0, [pc, #88]	@ (8000fcc <MX_TIM2_Init+0x100>)
 8000f74:	f005 fb80 	bl	8006678 <HAL_TIMEx_MasterConfigSynchronization>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000f7e:	f000 f971 	bl	8001264 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f82:	2360      	movs	r3, #96	@ 0x60
 8000f84:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f92:	463b      	mov	r3, r7
 8000f94:	2200      	movs	r2, #0
 8000f96:	4619      	mov	r1, r3
 8000f98:	480c      	ldr	r0, [pc, #48]	@ (8000fcc <MX_TIM2_Init+0x100>)
 8000f9a:	f004 fd21 	bl	80059e0 <HAL_TIM_PWM_ConfigChannel>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000fa4:	f000 f95e 	bl	8001264 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fa8:	463b      	mov	r3, r7
 8000faa:	2204      	movs	r2, #4
 8000fac:	4619      	mov	r1, r3
 8000fae:	4807      	ldr	r0, [pc, #28]	@ (8000fcc <MX_TIM2_Init+0x100>)
 8000fb0:	f004 fd16 	bl	80059e0 <HAL_TIM_PWM_ConfigChannel>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000fba:	f000 f953 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000fbe:	4803      	ldr	r0, [pc, #12]	@ (8000fcc <MX_TIM2_Init+0x100>)
 8000fc0:	f000 f990 	bl	80012e4 <HAL_TIM_MspPostInit>

}
 8000fc4:	bf00      	nop
 8000fc6:	3738      	adds	r7, #56	@ 0x38
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	240001f4 	.word	0x240001f4

08000fd0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fd4:	4b22      	ldr	r3, [pc, #136]	@ (8001060 <MX_USART3_UART_Init+0x90>)
 8000fd6:	4a23      	ldr	r2, [pc, #140]	@ (8001064 <MX_USART3_UART_Init+0x94>)
 8000fd8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000fda:	4b21      	ldr	r3, [pc, #132]	@ (8001060 <MX_USART3_UART_Init+0x90>)
 8000fdc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000fe0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe2:	4b1f      	ldr	r3, [pc, #124]	@ (8001060 <MX_USART3_UART_Init+0x90>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8001060 <MX_USART3_UART_Init+0x90>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fee:	4b1c      	ldr	r3, [pc, #112]	@ (8001060 <MX_USART3_UART_Init+0x90>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8001060 <MX_USART3_UART_Init+0x90>)
 8000ff6:	220c      	movs	r2, #12
 8000ff8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffa:	4b19      	ldr	r3, [pc, #100]	@ (8001060 <MX_USART3_UART_Init+0x90>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001000:	4b17      	ldr	r3, [pc, #92]	@ (8001060 <MX_USART3_UART_Init+0x90>)
 8001002:	2200      	movs	r2, #0
 8001004:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001006:	4b16      	ldr	r3, [pc, #88]	@ (8001060 <MX_USART3_UART_Init+0x90>)
 8001008:	2200      	movs	r2, #0
 800100a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800100c:	4b14      	ldr	r3, [pc, #80]	@ (8001060 <MX_USART3_UART_Init+0x90>)
 800100e:	2200      	movs	r2, #0
 8001010:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001012:	4b13      	ldr	r3, [pc, #76]	@ (8001060 <MX_USART3_UART_Init+0x90>)
 8001014:	2200      	movs	r2, #0
 8001016:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001018:	4811      	ldr	r0, [pc, #68]	@ (8001060 <MX_USART3_UART_Init+0x90>)
 800101a:	f005 fbbb 	bl	8006794 <HAL_UART_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001024:	f000 f91e 	bl	8001264 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001028:	2100      	movs	r1, #0
 800102a:	480d      	ldr	r0, [pc, #52]	@ (8001060 <MX_USART3_UART_Init+0x90>)
 800102c:	f007 ff15 	bl	8008e5a <HAL_UARTEx_SetTxFifoThreshold>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001036:	f000 f915 	bl	8001264 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800103a:	2100      	movs	r1, #0
 800103c:	4808      	ldr	r0, [pc, #32]	@ (8001060 <MX_USART3_UART_Init+0x90>)
 800103e:	f007 ff4a 	bl	8008ed6 <HAL_UARTEx_SetRxFifoThreshold>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001048:	f000 f90c 	bl	8001264 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800104c:	4804      	ldr	r0, [pc, #16]	@ (8001060 <MX_USART3_UART_Init+0x90>)
 800104e:	f007 fecb 	bl	8008de8 <HAL_UARTEx_DisableFifoMode>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001058:	f000 f904 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}
 8001060:	24000240 	.word	0x24000240
 8001064:	40004800 	.word	0x40004800

08001068 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08c      	sub	sp, #48	@ 0x30
 800106c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106e:	f107 031c 	add.w	r3, r7, #28
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800107e:	4b73      	ldr	r3, [pc, #460]	@ (800124c <MX_GPIO_Init+0x1e4>)
 8001080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001084:	4a71      	ldr	r2, [pc, #452]	@ (800124c <MX_GPIO_Init+0x1e4>)
 8001086:	f043 0304 	orr.w	r3, r3, #4
 800108a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800108e:	4b6f      	ldr	r3, [pc, #444]	@ (800124c <MX_GPIO_Init+0x1e4>)
 8001090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	61bb      	str	r3, [r7, #24]
 800109a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800109c:	4b6b      	ldr	r3, [pc, #428]	@ (800124c <MX_GPIO_Init+0x1e4>)
 800109e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a2:	4a6a      	ldr	r2, [pc, #424]	@ (800124c <MX_GPIO_Init+0x1e4>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ac:	4b67      	ldr	r3, [pc, #412]	@ (800124c <MX_GPIO_Init+0x1e4>)
 80010ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ba:	4b64      	ldr	r3, [pc, #400]	@ (800124c <MX_GPIO_Init+0x1e4>)
 80010bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c0:	4a62      	ldr	r2, [pc, #392]	@ (800124c <MX_GPIO_Init+0x1e4>)
 80010c2:	f043 0302 	orr.w	r3, r3, #2
 80010c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ca:	4b60      	ldr	r3, [pc, #384]	@ (800124c <MX_GPIO_Init+0x1e4>)
 80010cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d8:	4b5c      	ldr	r3, [pc, #368]	@ (800124c <MX_GPIO_Init+0x1e4>)
 80010da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010de:	4a5b      	ldr	r2, [pc, #364]	@ (800124c <MX_GPIO_Init+0x1e4>)
 80010e0:	f043 0308 	orr.w	r3, r3, #8
 80010e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010e8:	4b58      	ldr	r3, [pc, #352]	@ (800124c <MX_GPIO_Init+0x1e4>)
 80010ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010f6:	4b55      	ldr	r3, [pc, #340]	@ (800124c <MX_GPIO_Init+0x1e4>)
 80010f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010fc:	4a53      	ldr	r2, [pc, #332]	@ (800124c <MX_GPIO_Init+0x1e4>)
 80010fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001102:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001106:	4b51      	ldr	r3, [pc, #324]	@ (800124c <MX_GPIO_Init+0x1e4>)
 8001108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800110c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001114:	4b4d      	ldr	r3, [pc, #308]	@ (800124c <MX_GPIO_Init+0x1e4>)
 8001116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800111a:	4a4c      	ldr	r2, [pc, #304]	@ (800124c <MX_GPIO_Init+0x1e4>)
 800111c:	f043 0310 	orr.w	r3, r3, #16
 8001120:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001124:	4b49      	ldr	r3, [pc, #292]	@ (800124c <MX_GPIO_Init+0x1e4>)
 8001126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800112a:	f003 0310 	and.w	r3, r3, #16
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001132:	2200      	movs	r2, #0
 8001134:	f244 0101 	movw	r1, #16385	@ 0x4001
 8001138:	4845      	ldr	r0, [pc, #276]	@ (8001250 <MX_GPIO_Init+0x1e8>)
 800113a:	f001 fb8b 	bl	8002854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	2102      	movs	r1, #2
 8001142:	4844      	ldr	r0, [pc, #272]	@ (8001254 <MX_GPIO_Init+0x1ec>)
 8001144:	f001 fb86 	bl	8002854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001148:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800114c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800114e:	2300      	movs	r3, #0
 8001150:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001156:	f107 031c 	add.w	r3, r7, #28
 800115a:	4619      	mov	r1, r3
 800115c:	483e      	ldr	r0, [pc, #248]	@ (8001258 <MX_GPIO_Init+0x1f0>)
 800115e:	f001 f9c9 	bl	80024f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001162:	2332      	movs	r3, #50	@ 0x32
 8001164:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001172:	230b      	movs	r3, #11
 8001174:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	4619      	mov	r1, r3
 800117c:	4836      	ldr	r0, [pc, #216]	@ (8001258 <MX_GPIO_Init+0x1f0>)
 800117e:	f001 f9b9 	bl	80024f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001182:	2386      	movs	r3, #134	@ 0x86
 8001184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001192:	230b      	movs	r3, #11
 8001194:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001196:	f107 031c 	add.w	r3, r7, #28
 800119a:	4619      	mov	r1, r3
 800119c:	482f      	ldr	r0, [pc, #188]	@ (800125c <MX_GPIO_Init+0x1f4>)
 800119e:	f001 f9a9 	bl	80024f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin;
 80011a2:	f244 0301 	movw	r3, #16385	@ 0x4001
 80011a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a8:	2301      	movs	r3, #1
 80011aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b0:	2300      	movs	r3, #0
 80011b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	4619      	mov	r1, r3
 80011ba:	4825      	ldr	r0, [pc, #148]	@ (8001250 <MX_GPIO_Init+0x1e8>)
 80011bc:	f001 f99a 	bl	80024f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011d2:	230b      	movs	r3, #11
 80011d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	4619      	mov	r1, r3
 80011dc:	481c      	ldr	r0, [pc, #112]	@ (8001250 <MX_GPIO_Init+0x1e8>)
 80011de:	f001 f989 	bl	80024f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80011e2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80011e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80011f4:	230a      	movs	r3, #10
 80011f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f8:	f107 031c 	add.w	r3, r7, #28
 80011fc:	4619      	mov	r1, r3
 80011fe:	4817      	ldr	r0, [pc, #92]	@ (800125c <MX_GPIO_Init+0x1f4>)
 8001200:	f001 f978 	bl	80024f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001204:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001212:	2300      	movs	r3, #0
 8001214:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001216:	230b      	movs	r3, #11
 8001218:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	4619      	mov	r1, r3
 8001220:	480f      	ldr	r0, [pc, #60]	@ (8001260 <MX_GPIO_Init+0x1f8>)
 8001222:	f001 f967 	bl	80024f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8001226:	2302      	movs	r3, #2
 8001228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122a:	2301      	movs	r3, #1
 800122c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2300      	movs	r3, #0
 8001234:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	4619      	mov	r1, r3
 800123c:	4805      	ldr	r0, [pc, #20]	@ (8001254 <MX_GPIO_Init+0x1ec>)
 800123e:	f001 f959 	bl	80024f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001242:	bf00      	nop
 8001244:	3730      	adds	r7, #48	@ 0x30
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	58024400 	.word	0x58024400
 8001250:	58020400 	.word	0x58020400
 8001254:	58021000 	.word	0x58021000
 8001258:	58020800 	.word	0x58020800
 800125c:	58020000 	.word	0x58020000
 8001260:	58021800 	.word	0x58021800

08001264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001268:	b672      	cpsid	i
}
 800126a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <Error_Handler+0x8>

08001270 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001276:	4b0a      	ldr	r3, [pc, #40]	@ (80012a0 <HAL_MspInit+0x30>)
 8001278:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800127c:	4a08      	ldr	r2, [pc, #32]	@ (80012a0 <HAL_MspInit+0x30>)
 800127e:	f043 0302 	orr.w	r3, r3, #2
 8001282:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001286:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <HAL_MspInit+0x30>)
 8001288:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	58024400 	.word	0x58024400

080012a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012b4:	d10e      	bne.n	80012d4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012b6:	4b0a      	ldr	r3, [pc, #40]	@ (80012e0 <HAL_TIM_Base_MspInit+0x3c>)
 80012b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012bc:	4a08      	ldr	r2, [pc, #32]	@ (80012e0 <HAL_TIM_Base_MspInit+0x3c>)
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80012c6:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <HAL_TIM_Base_MspInit+0x3c>)
 80012c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	58024400 	.word	0x58024400

080012e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	@ 0x28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001304:	d13d      	bne.n	8001382 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	4b21      	ldr	r3, [pc, #132]	@ (800138c <HAL_TIM_MspPostInit+0xa8>)
 8001308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130c:	4a1f      	ldr	r2, [pc, #124]	@ (800138c <HAL_TIM_MspPostInit+0xa8>)
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001316:	4b1d      	ldr	r3, [pc, #116]	@ (800138c <HAL_TIM_MspPostInit+0xa8>)
 8001318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001324:	4b19      	ldr	r3, [pc, #100]	@ (800138c <HAL_TIM_MspPostInit+0xa8>)
 8001326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800132a:	4a18      	ldr	r2, [pc, #96]	@ (800138c <HAL_TIM_MspPostInit+0xa8>)
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001334:	4b15      	ldr	r3, [pc, #84]	@ (800138c <HAL_TIM_MspPostInit+0xa8>)
 8001336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001342:	2301      	movs	r3, #1
 8001344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2300      	movs	r3, #0
 8001350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001352:	2301      	movs	r3, #1
 8001354:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4619      	mov	r1, r3
 800135c:	480c      	ldr	r0, [pc, #48]	@ (8001390 <HAL_TIM_MspPostInit+0xac>)
 800135e:	f001 f8c9 	bl	80024f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001362:	2308      	movs	r3, #8
 8001364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001372:	2301      	movs	r3, #1
 8001374:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	4619      	mov	r1, r3
 800137c:	4805      	ldr	r0, [pc, #20]	@ (8001394 <HAL_TIM_MspPostInit+0xb0>)
 800137e:	f001 f8b9 	bl	80024f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001382:	bf00      	nop
 8001384:	3728      	adds	r7, #40	@ 0x28
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	58024400 	.word	0x58024400
 8001390:	58020000 	.word	0x58020000
 8001394:	58020400 	.word	0x58020400

08001398 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b0ba      	sub	sp, #232	@ 0xe8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b0:	f107 0310 	add.w	r3, r7, #16
 80013b4:	22c0      	movs	r2, #192	@ 0xc0
 80013b6:	2100      	movs	r1, #0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f008 fd82 	bl	8009ec2 <memset>
  if(huart->Instance==USART3)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a2b      	ldr	r2, [pc, #172]	@ (8001470 <HAL_UART_MspInit+0xd8>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d14e      	bne.n	8001466 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013c8:	f04f 0202 	mov.w	r2, #2
 80013cc:	f04f 0300 	mov.w	r3, #0
 80013d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013da:	f107 0310 	add.w	r3, r7, #16
 80013de:	4618      	mov	r0, r3
 80013e0:	f002 fac0 	bl	8003964 <HAL_RCCEx_PeriphCLKConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80013ea:	f7ff ff3b 	bl	8001264 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013ee:	4b21      	ldr	r3, [pc, #132]	@ (8001474 <HAL_UART_MspInit+0xdc>)
 80013f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013f4:	4a1f      	ldr	r2, [pc, #124]	@ (8001474 <HAL_UART_MspInit+0xdc>)
 80013f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013fa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001474 <HAL_UART_MspInit+0xdc>)
 8001400:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001404:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800140c:	4b19      	ldr	r3, [pc, #100]	@ (8001474 <HAL_UART_MspInit+0xdc>)
 800140e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001412:	4a18      	ldr	r2, [pc, #96]	@ (8001474 <HAL_UART_MspInit+0xdc>)
 8001414:	f043 0308 	orr.w	r3, r3, #8
 8001418:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800141c:	4b15      	ldr	r3, [pc, #84]	@ (8001474 <HAL_UART_MspInit+0xdc>)
 800141e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800142a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800142e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001444:	2307      	movs	r3, #7
 8001446:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800144a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800144e:	4619      	mov	r1, r3
 8001450:	4809      	ldr	r0, [pc, #36]	@ (8001478 <HAL_UART_MspInit+0xe0>)
 8001452:	f001 f84f 	bl	80024f4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2100      	movs	r1, #0
 800145a:	2027      	movs	r0, #39	@ 0x27
 800145c:	f000 fab1 	bl	80019c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001460:	2027      	movs	r0, #39	@ 0x27
 8001462:	f000 fac8 	bl	80019f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001466:	bf00      	nop
 8001468:	37e8      	adds	r7, #232	@ 0xe8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40004800 	.word	0x40004800
 8001474:	58024400 	.word	0x58024400
 8001478:	58020c00 	.word	0x58020c00

0800147c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <NMI_Handler+0x4>

08001484 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <HardFault_Handler+0x4>

0800148c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <MemManage_Handler+0x4>

08001494 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001498:	bf00      	nop
 800149a:	e7fd      	b.n	8001498 <BusFault_Handler+0x4>

0800149c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <UsageFault_Handler+0x4>

080014a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d2:	f000 f96f 	bl	80017b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80014e0:	4802      	ldr	r0, [pc, #8]	@ (80014ec <USART3_IRQHandler+0x10>)
 80014e2:	f005 fa81 	bl	80069e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	24000240 	.word	0x24000240

080014f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return 1;
 80014f4:	2301      	movs	r3, #1
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <_kill>:

int _kill(int pid, int sig)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800150a:	f008 fd2d 	bl	8009f68 <__errno>
 800150e:	4603      	mov	r3, r0
 8001510:	2216      	movs	r2, #22
 8001512:	601a      	str	r2, [r3, #0]
  return -1;
 8001514:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <_exit>:

void _exit (int status)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001528:	f04f 31ff 	mov.w	r1, #4294967295
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ffe7 	bl	8001500 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001532:	bf00      	nop
 8001534:	e7fd      	b.n	8001532 <_exit+0x12>

08001536 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b086      	sub	sp, #24
 800153a:	af00      	add	r7, sp, #0
 800153c:	60f8      	str	r0, [r7, #12]
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	e00a      	b.n	800155e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001548:	f3af 8000 	nop.w
 800154c:	4601      	mov	r1, r0
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	1c5a      	adds	r2, r3, #1
 8001552:	60ba      	str	r2, [r7, #8]
 8001554:	b2ca      	uxtb	r2, r1
 8001556:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	3301      	adds	r3, #1
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	429a      	cmp	r2, r3
 8001564:	dbf0      	blt.n	8001548 <_read+0x12>
  }

  return len;
 8001566:	687b      	ldr	r3, [r7, #4]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	e009      	b.n	8001596 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	1c5a      	adds	r2, r3, #1
 8001586:	60ba      	str	r2, [r7, #8]
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	3301      	adds	r3, #1
 8001594:	617b      	str	r3, [r7, #20]
 8001596:	697a      	ldr	r2, [r7, #20]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	429a      	cmp	r2, r3
 800159c:	dbf1      	blt.n	8001582 <_write+0x12>
  }
  return len;
 800159e:	687b      	ldr	r3, [r7, #4]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <_close>:

int _close(int file)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015d0:	605a      	str	r2, [r3, #4]
  return 0;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <_isatty>:

int _isatty(int file)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015e8:	2301      	movs	r3, #1
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b085      	sub	sp, #20
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	60f8      	str	r0, [r7, #12]
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001618:	4a14      	ldr	r2, [pc, #80]	@ (800166c <_sbrk+0x5c>)
 800161a:	4b15      	ldr	r3, [pc, #84]	@ (8001670 <_sbrk+0x60>)
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001624:	4b13      	ldr	r3, [pc, #76]	@ (8001674 <_sbrk+0x64>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d102      	bne.n	8001632 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800162c:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <_sbrk+0x64>)
 800162e:	4a12      	ldr	r2, [pc, #72]	@ (8001678 <_sbrk+0x68>)
 8001630:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001632:	4b10      	ldr	r3, [pc, #64]	@ (8001674 <_sbrk+0x64>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	429a      	cmp	r2, r3
 800163e:	d207      	bcs.n	8001650 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001640:	f008 fc92 	bl	8009f68 <__errno>
 8001644:	4603      	mov	r3, r0
 8001646:	220c      	movs	r2, #12
 8001648:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
 800164e:	e009      	b.n	8001664 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001650:	4b08      	ldr	r3, [pc, #32]	@ (8001674 <_sbrk+0x64>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001656:	4b07      	ldr	r3, [pc, #28]	@ (8001674 <_sbrk+0x64>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4413      	add	r3, r2
 800165e:	4a05      	ldr	r2, [pc, #20]	@ (8001674 <_sbrk+0x64>)
 8001660:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001662:	68fb      	ldr	r3, [r7, #12]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	24080000 	.word	0x24080000
 8001670:	00000400 	.word	0x00000400
 8001674:	240002d8 	.word	0x240002d8
 8001678:	24000430 	.word	0x24000430

0800167c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800167c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001680:	f7ff f9f2 	bl	8000a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001684:	480c      	ldr	r0, [pc, #48]	@ (80016b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001686:	490d      	ldr	r1, [pc, #52]	@ (80016bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001688:	4a0d      	ldr	r2, [pc, #52]	@ (80016c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800168a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800168c:	e002      	b.n	8001694 <LoopCopyDataInit>

0800168e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800168e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001692:	3304      	adds	r3, #4

08001694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001698:	d3f9      	bcc.n	800168e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800169a:	4a0a      	ldr	r2, [pc, #40]	@ (80016c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800169c:	4c0a      	ldr	r4, [pc, #40]	@ (80016c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800169e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a0:	e001      	b.n	80016a6 <LoopFillZerobss>

080016a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a4:	3204      	adds	r2, #4

080016a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a8:	d3fb      	bcc.n	80016a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016aa:	f008 fc63 	bl	8009f74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ae:	f7ff fb25 	bl	8000cfc <main>
  bx  lr
 80016b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016b4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80016b8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016bc:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 80016c0:	0800d980 	.word	0x0800d980
  ldr r2, =_sbss
 80016c4:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 80016c8:	2400042c 	.word	0x2400042c

080016cc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016cc:	e7fe      	b.n	80016cc <ADC3_IRQHandler>
	...

080016d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d6:	2003      	movs	r0, #3
 80016d8:	f000 f968 	bl	80019ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016dc:	f001 ff6c 	bl	80035b8 <HAL_RCC_GetSysClockFreq>
 80016e0:	4602      	mov	r2, r0
 80016e2:	4b15      	ldr	r3, [pc, #84]	@ (8001738 <HAL_Init+0x68>)
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	0a1b      	lsrs	r3, r3, #8
 80016e8:	f003 030f 	and.w	r3, r3, #15
 80016ec:	4913      	ldr	r1, [pc, #76]	@ (800173c <HAL_Init+0x6c>)
 80016ee:	5ccb      	ldrb	r3, [r1, r3]
 80016f0:	f003 031f 	and.w	r3, r3, #31
 80016f4:	fa22 f303 	lsr.w	r3, r2, r3
 80016f8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001738 <HAL_Init+0x68>)
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	4a0e      	ldr	r2, [pc, #56]	@ (800173c <HAL_Init+0x6c>)
 8001704:	5cd3      	ldrb	r3, [r2, r3]
 8001706:	f003 031f 	and.w	r3, r3, #31
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	fa22 f303 	lsr.w	r3, r2, r3
 8001710:	4a0b      	ldr	r2, [pc, #44]	@ (8001740 <HAL_Init+0x70>)
 8001712:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001714:	4a0b      	ldr	r2, [pc, #44]	@ (8001744 <HAL_Init+0x74>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800171a:	2000      	movs	r0, #0
 800171c:	f000 f814 	bl	8001748 <HAL_InitTick>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e002      	b.n	8001730 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800172a:	f7ff fda1 	bl	8001270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	58024400 	.word	0x58024400
 800173c:	0800d508 	.word	0x0800d508
 8001740:	24000004 	.word	0x24000004
 8001744:	24000000 	.word	0x24000000

08001748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001750:	4b15      	ldr	r3, [pc, #84]	@ (80017a8 <HAL_InitTick+0x60>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e021      	b.n	80017a0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800175c:	4b13      	ldr	r3, [pc, #76]	@ (80017ac <HAL_InitTick+0x64>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4b11      	ldr	r3, [pc, #68]	@ (80017a8 <HAL_InitTick+0x60>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	4619      	mov	r1, r3
 8001766:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800176a:	fbb3 f3f1 	udiv	r3, r3, r1
 800176e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001772:	4618      	mov	r0, r3
 8001774:	f000 f94d 	bl	8001a12 <HAL_SYSTICK_Config>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e00e      	b.n	80017a0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b0f      	cmp	r3, #15
 8001786:	d80a      	bhi.n	800179e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001788:	2200      	movs	r2, #0
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	f04f 30ff 	mov.w	r0, #4294967295
 8001790:	f000 f917 	bl	80019c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001794:	4a06      	ldr	r2, [pc, #24]	@ (80017b0 <HAL_InitTick+0x68>)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800179a:	2300      	movs	r3, #0
 800179c:	e000      	b.n	80017a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	2400000c 	.word	0x2400000c
 80017ac:	24000000 	.word	0x24000000
 80017b0:	24000008 	.word	0x24000008

080017b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017b8:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <HAL_IncTick+0x20>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	461a      	mov	r2, r3
 80017be:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <HAL_IncTick+0x24>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4413      	add	r3, r2
 80017c4:	4a04      	ldr	r2, [pc, #16]	@ (80017d8 <HAL_IncTick+0x24>)
 80017c6:	6013      	str	r3, [r2, #0]
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	2400000c 	.word	0x2400000c
 80017d8:	240002dc 	.word	0x240002dc

080017dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return uwTick;
 80017e0:	4b03      	ldr	r3, [pc, #12]	@ (80017f0 <HAL_GetTick+0x14>)
 80017e2:	681b      	ldr	r3, [r3, #0]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	240002dc 	.word	0x240002dc

080017f4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017f8:	4b03      	ldr	r3, [pc, #12]	@ (8001808 <HAL_GetREVID+0x14>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	0c1b      	lsrs	r3, r3, #16
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	5c001000 	.word	0x5c001000

0800180c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800181c:	4b0b      	ldr	r3, [pc, #44]	@ (800184c <__NVIC_SetPriorityGrouping+0x40>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001828:	4013      	ands	r3, r2
 800182a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001834:	4b06      	ldr	r3, [pc, #24]	@ (8001850 <__NVIC_SetPriorityGrouping+0x44>)
 8001836:	4313      	orrs	r3, r2
 8001838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800183a:	4a04      	ldr	r2, [pc, #16]	@ (800184c <__NVIC_SetPriorityGrouping+0x40>)
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	60d3      	str	r3, [r2, #12]
}
 8001840:	bf00      	nop
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00
 8001850:	05fa0000 	.word	0x05fa0000

08001854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001858:	4b04      	ldr	r3, [pc, #16]	@ (800186c <__NVIC_GetPriorityGrouping+0x18>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	0a1b      	lsrs	r3, r3, #8
 800185e:	f003 0307 	and.w	r3, r3, #7
}
 8001862:	4618      	mov	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800187a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800187e:	2b00      	cmp	r3, #0
 8001880:	db0b      	blt.n	800189a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001882:	88fb      	ldrh	r3, [r7, #6]
 8001884:	f003 021f 	and.w	r2, r3, #31
 8001888:	4907      	ldr	r1, [pc, #28]	@ (80018a8 <__NVIC_EnableIRQ+0x38>)
 800188a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800188e:	095b      	lsrs	r3, r3, #5
 8001890:	2001      	movs	r0, #1
 8001892:	fa00 f202 	lsl.w	r2, r0, r2
 8001896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000e100 	.word	0xe000e100

080018ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	6039      	str	r1, [r7, #0]
 80018b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	db0a      	blt.n	80018d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	490c      	ldr	r1, [pc, #48]	@ (80018f8 <__NVIC_SetPriority+0x4c>)
 80018c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ca:	0112      	lsls	r2, r2, #4
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	440b      	add	r3, r1
 80018d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d4:	e00a      	b.n	80018ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	4908      	ldr	r1, [pc, #32]	@ (80018fc <__NVIC_SetPriority+0x50>)
 80018dc:	88fb      	ldrh	r3, [r7, #6]
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	3b04      	subs	r3, #4
 80018e4:	0112      	lsls	r2, r2, #4
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	440b      	add	r3, r1
 80018ea:	761a      	strb	r2, [r3, #24]
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000e100 	.word	0xe000e100
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001900:	b480      	push	{r7}
 8001902:	b089      	sub	sp, #36	@ 0x24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f1c3 0307 	rsb	r3, r3, #7
 800191a:	2b04      	cmp	r3, #4
 800191c:	bf28      	it	cs
 800191e:	2304      	movcs	r3, #4
 8001920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3304      	adds	r3, #4
 8001926:	2b06      	cmp	r3, #6
 8001928:	d902      	bls.n	8001930 <NVIC_EncodePriority+0x30>
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3b03      	subs	r3, #3
 800192e:	e000      	b.n	8001932 <NVIC_EncodePriority+0x32>
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001934:	f04f 32ff 	mov.w	r2, #4294967295
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43da      	mvns	r2, r3
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	401a      	ands	r2, r3
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001948:	f04f 31ff 	mov.w	r1, #4294967295
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	fa01 f303 	lsl.w	r3, r1, r3
 8001952:	43d9      	mvns	r1, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001958:	4313      	orrs	r3, r2
         );
}
 800195a:	4618      	mov	r0, r3
 800195c:	3724      	adds	r7, #36	@ 0x24
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3b01      	subs	r3, #1
 8001974:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001978:	d301      	bcc.n	800197e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800197a:	2301      	movs	r3, #1
 800197c:	e00f      	b.n	800199e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800197e:	4a0a      	ldr	r2, [pc, #40]	@ (80019a8 <SysTick_Config+0x40>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3b01      	subs	r3, #1
 8001984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001986:	210f      	movs	r1, #15
 8001988:	f04f 30ff 	mov.w	r0, #4294967295
 800198c:	f7ff ff8e 	bl	80018ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001990:	4b05      	ldr	r3, [pc, #20]	@ (80019a8 <SysTick_Config+0x40>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001996:	4b04      	ldr	r3, [pc, #16]	@ (80019a8 <SysTick_Config+0x40>)
 8001998:	2207      	movs	r2, #7
 800199a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	e000e010 	.word	0xe000e010

080019ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff ff29 	bl	800180c <__NVIC_SetPriorityGrouping>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b086      	sub	sp, #24
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	607a      	str	r2, [r7, #4]
 80019ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019d0:	f7ff ff40 	bl	8001854 <__NVIC_GetPriorityGrouping>
 80019d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	68b9      	ldr	r1, [r7, #8]
 80019da:	6978      	ldr	r0, [r7, #20]
 80019dc:	f7ff ff90 	bl	8001900 <NVIC_EncodePriority>
 80019e0:	4602      	mov	r2, r0
 80019e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff5f 	bl	80018ac <__NVIC_SetPriority>
}
 80019ee:	bf00      	nop
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	4603      	mov	r3, r0
 80019fe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff33 	bl	8001870 <__NVIC_EnableIRQ>
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff ffa4 	bl	8001968 <SysTick_Config>
 8001a20:	4603      	mov	r3, r0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
	...

08001a2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001a34:	f7ff fed2 	bl	80017dc <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e2dc      	b.n	8001ffe <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d008      	beq.n	8001a62 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2280      	movs	r2, #128	@ 0x80
 8001a54:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e2cd      	b.n	8001ffe <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a76      	ldr	r2, [pc, #472]	@ (8001c40 <HAL_DMA_Abort+0x214>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d04a      	beq.n	8001b02 <HAL_DMA_Abort+0xd6>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a74      	ldr	r2, [pc, #464]	@ (8001c44 <HAL_DMA_Abort+0x218>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d045      	beq.n	8001b02 <HAL_DMA_Abort+0xd6>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a73      	ldr	r2, [pc, #460]	@ (8001c48 <HAL_DMA_Abort+0x21c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d040      	beq.n	8001b02 <HAL_DMA_Abort+0xd6>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a71      	ldr	r2, [pc, #452]	@ (8001c4c <HAL_DMA_Abort+0x220>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d03b      	beq.n	8001b02 <HAL_DMA_Abort+0xd6>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a70      	ldr	r2, [pc, #448]	@ (8001c50 <HAL_DMA_Abort+0x224>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d036      	beq.n	8001b02 <HAL_DMA_Abort+0xd6>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a6e      	ldr	r2, [pc, #440]	@ (8001c54 <HAL_DMA_Abort+0x228>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d031      	beq.n	8001b02 <HAL_DMA_Abort+0xd6>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a6d      	ldr	r2, [pc, #436]	@ (8001c58 <HAL_DMA_Abort+0x22c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d02c      	beq.n	8001b02 <HAL_DMA_Abort+0xd6>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a6b      	ldr	r2, [pc, #428]	@ (8001c5c <HAL_DMA_Abort+0x230>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d027      	beq.n	8001b02 <HAL_DMA_Abort+0xd6>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a6a      	ldr	r2, [pc, #424]	@ (8001c60 <HAL_DMA_Abort+0x234>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d022      	beq.n	8001b02 <HAL_DMA_Abort+0xd6>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a68      	ldr	r2, [pc, #416]	@ (8001c64 <HAL_DMA_Abort+0x238>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d01d      	beq.n	8001b02 <HAL_DMA_Abort+0xd6>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a67      	ldr	r2, [pc, #412]	@ (8001c68 <HAL_DMA_Abort+0x23c>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d018      	beq.n	8001b02 <HAL_DMA_Abort+0xd6>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a65      	ldr	r2, [pc, #404]	@ (8001c6c <HAL_DMA_Abort+0x240>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d013      	beq.n	8001b02 <HAL_DMA_Abort+0xd6>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a64      	ldr	r2, [pc, #400]	@ (8001c70 <HAL_DMA_Abort+0x244>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d00e      	beq.n	8001b02 <HAL_DMA_Abort+0xd6>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a62      	ldr	r2, [pc, #392]	@ (8001c74 <HAL_DMA_Abort+0x248>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d009      	beq.n	8001b02 <HAL_DMA_Abort+0xd6>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a61      	ldr	r2, [pc, #388]	@ (8001c78 <HAL_DMA_Abort+0x24c>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d004      	beq.n	8001b02 <HAL_DMA_Abort+0xd6>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a5f      	ldr	r2, [pc, #380]	@ (8001c7c <HAL_DMA_Abort+0x250>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d101      	bne.n	8001b06 <HAL_DMA_Abort+0xda>
 8001b02:	2301      	movs	r3, #1
 8001b04:	e000      	b.n	8001b08 <HAL_DMA_Abort+0xdc>
 8001b06:	2300      	movs	r3, #0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d013      	beq.n	8001b34 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 021e 	bic.w	r2, r2, #30
 8001b1a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	695a      	ldr	r2, [r3, #20]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b2a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	e00a      	b.n	8001b4a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 020e 	bic.w	r2, r2, #14
 8001b42:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a3c      	ldr	r2, [pc, #240]	@ (8001c40 <HAL_DMA_Abort+0x214>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d072      	beq.n	8001c3a <HAL_DMA_Abort+0x20e>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a3a      	ldr	r2, [pc, #232]	@ (8001c44 <HAL_DMA_Abort+0x218>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d06d      	beq.n	8001c3a <HAL_DMA_Abort+0x20e>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a39      	ldr	r2, [pc, #228]	@ (8001c48 <HAL_DMA_Abort+0x21c>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d068      	beq.n	8001c3a <HAL_DMA_Abort+0x20e>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a37      	ldr	r2, [pc, #220]	@ (8001c4c <HAL_DMA_Abort+0x220>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d063      	beq.n	8001c3a <HAL_DMA_Abort+0x20e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a36      	ldr	r2, [pc, #216]	@ (8001c50 <HAL_DMA_Abort+0x224>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d05e      	beq.n	8001c3a <HAL_DMA_Abort+0x20e>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a34      	ldr	r2, [pc, #208]	@ (8001c54 <HAL_DMA_Abort+0x228>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d059      	beq.n	8001c3a <HAL_DMA_Abort+0x20e>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a33      	ldr	r2, [pc, #204]	@ (8001c58 <HAL_DMA_Abort+0x22c>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d054      	beq.n	8001c3a <HAL_DMA_Abort+0x20e>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a31      	ldr	r2, [pc, #196]	@ (8001c5c <HAL_DMA_Abort+0x230>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d04f      	beq.n	8001c3a <HAL_DMA_Abort+0x20e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a30      	ldr	r2, [pc, #192]	@ (8001c60 <HAL_DMA_Abort+0x234>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d04a      	beq.n	8001c3a <HAL_DMA_Abort+0x20e>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a2e      	ldr	r2, [pc, #184]	@ (8001c64 <HAL_DMA_Abort+0x238>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d045      	beq.n	8001c3a <HAL_DMA_Abort+0x20e>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a2d      	ldr	r2, [pc, #180]	@ (8001c68 <HAL_DMA_Abort+0x23c>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d040      	beq.n	8001c3a <HAL_DMA_Abort+0x20e>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a2b      	ldr	r2, [pc, #172]	@ (8001c6c <HAL_DMA_Abort+0x240>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d03b      	beq.n	8001c3a <HAL_DMA_Abort+0x20e>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a2a      	ldr	r2, [pc, #168]	@ (8001c70 <HAL_DMA_Abort+0x244>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d036      	beq.n	8001c3a <HAL_DMA_Abort+0x20e>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a28      	ldr	r2, [pc, #160]	@ (8001c74 <HAL_DMA_Abort+0x248>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d031      	beq.n	8001c3a <HAL_DMA_Abort+0x20e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a27      	ldr	r2, [pc, #156]	@ (8001c78 <HAL_DMA_Abort+0x24c>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d02c      	beq.n	8001c3a <HAL_DMA_Abort+0x20e>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a25      	ldr	r2, [pc, #148]	@ (8001c7c <HAL_DMA_Abort+0x250>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d027      	beq.n	8001c3a <HAL_DMA_Abort+0x20e>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a24      	ldr	r2, [pc, #144]	@ (8001c80 <HAL_DMA_Abort+0x254>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d022      	beq.n	8001c3a <HAL_DMA_Abort+0x20e>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a22      	ldr	r2, [pc, #136]	@ (8001c84 <HAL_DMA_Abort+0x258>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d01d      	beq.n	8001c3a <HAL_DMA_Abort+0x20e>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a21      	ldr	r2, [pc, #132]	@ (8001c88 <HAL_DMA_Abort+0x25c>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d018      	beq.n	8001c3a <HAL_DMA_Abort+0x20e>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a1f      	ldr	r2, [pc, #124]	@ (8001c8c <HAL_DMA_Abort+0x260>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d013      	beq.n	8001c3a <HAL_DMA_Abort+0x20e>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a1e      	ldr	r2, [pc, #120]	@ (8001c90 <HAL_DMA_Abort+0x264>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d00e      	beq.n	8001c3a <HAL_DMA_Abort+0x20e>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a1c      	ldr	r2, [pc, #112]	@ (8001c94 <HAL_DMA_Abort+0x268>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d009      	beq.n	8001c3a <HAL_DMA_Abort+0x20e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a1b      	ldr	r2, [pc, #108]	@ (8001c98 <HAL_DMA_Abort+0x26c>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d004      	beq.n	8001c3a <HAL_DMA_Abort+0x20e>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a19      	ldr	r2, [pc, #100]	@ (8001c9c <HAL_DMA_Abort+0x270>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d132      	bne.n	8001ca0 <HAL_DMA_Abort+0x274>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e031      	b.n	8001ca2 <HAL_DMA_Abort+0x276>
 8001c3e:	bf00      	nop
 8001c40:	40020010 	.word	0x40020010
 8001c44:	40020028 	.word	0x40020028
 8001c48:	40020040 	.word	0x40020040
 8001c4c:	40020058 	.word	0x40020058
 8001c50:	40020070 	.word	0x40020070
 8001c54:	40020088 	.word	0x40020088
 8001c58:	400200a0 	.word	0x400200a0
 8001c5c:	400200b8 	.word	0x400200b8
 8001c60:	40020410 	.word	0x40020410
 8001c64:	40020428 	.word	0x40020428
 8001c68:	40020440 	.word	0x40020440
 8001c6c:	40020458 	.word	0x40020458
 8001c70:	40020470 	.word	0x40020470
 8001c74:	40020488 	.word	0x40020488
 8001c78:	400204a0 	.word	0x400204a0
 8001c7c:	400204b8 	.word	0x400204b8
 8001c80:	58025408 	.word	0x58025408
 8001c84:	5802541c 	.word	0x5802541c
 8001c88:	58025430 	.word	0x58025430
 8001c8c:	58025444 	.word	0x58025444
 8001c90:	58025458 	.word	0x58025458
 8001c94:	5802546c 	.word	0x5802546c
 8001c98:	58025480 	.word	0x58025480
 8001c9c:	58025494 	.word	0x58025494
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d007      	beq.n	8001cb6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001cb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a6d      	ldr	r2, [pc, #436]	@ (8001e70 <HAL_DMA_Abort+0x444>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d04a      	beq.n	8001d56 <HAL_DMA_Abort+0x32a>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a6b      	ldr	r2, [pc, #428]	@ (8001e74 <HAL_DMA_Abort+0x448>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d045      	beq.n	8001d56 <HAL_DMA_Abort+0x32a>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a6a      	ldr	r2, [pc, #424]	@ (8001e78 <HAL_DMA_Abort+0x44c>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d040      	beq.n	8001d56 <HAL_DMA_Abort+0x32a>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a68      	ldr	r2, [pc, #416]	@ (8001e7c <HAL_DMA_Abort+0x450>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d03b      	beq.n	8001d56 <HAL_DMA_Abort+0x32a>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a67      	ldr	r2, [pc, #412]	@ (8001e80 <HAL_DMA_Abort+0x454>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d036      	beq.n	8001d56 <HAL_DMA_Abort+0x32a>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a65      	ldr	r2, [pc, #404]	@ (8001e84 <HAL_DMA_Abort+0x458>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d031      	beq.n	8001d56 <HAL_DMA_Abort+0x32a>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a64      	ldr	r2, [pc, #400]	@ (8001e88 <HAL_DMA_Abort+0x45c>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d02c      	beq.n	8001d56 <HAL_DMA_Abort+0x32a>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a62      	ldr	r2, [pc, #392]	@ (8001e8c <HAL_DMA_Abort+0x460>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d027      	beq.n	8001d56 <HAL_DMA_Abort+0x32a>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a61      	ldr	r2, [pc, #388]	@ (8001e90 <HAL_DMA_Abort+0x464>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d022      	beq.n	8001d56 <HAL_DMA_Abort+0x32a>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a5f      	ldr	r2, [pc, #380]	@ (8001e94 <HAL_DMA_Abort+0x468>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d01d      	beq.n	8001d56 <HAL_DMA_Abort+0x32a>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a5e      	ldr	r2, [pc, #376]	@ (8001e98 <HAL_DMA_Abort+0x46c>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d018      	beq.n	8001d56 <HAL_DMA_Abort+0x32a>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a5c      	ldr	r2, [pc, #368]	@ (8001e9c <HAL_DMA_Abort+0x470>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d013      	beq.n	8001d56 <HAL_DMA_Abort+0x32a>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a5b      	ldr	r2, [pc, #364]	@ (8001ea0 <HAL_DMA_Abort+0x474>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d00e      	beq.n	8001d56 <HAL_DMA_Abort+0x32a>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a59      	ldr	r2, [pc, #356]	@ (8001ea4 <HAL_DMA_Abort+0x478>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d009      	beq.n	8001d56 <HAL_DMA_Abort+0x32a>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a58      	ldr	r2, [pc, #352]	@ (8001ea8 <HAL_DMA_Abort+0x47c>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d004      	beq.n	8001d56 <HAL_DMA_Abort+0x32a>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a56      	ldr	r2, [pc, #344]	@ (8001eac <HAL_DMA_Abort+0x480>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d108      	bne.n	8001d68 <HAL_DMA_Abort+0x33c>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 0201 	bic.w	r2, r2, #1
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	e007      	b.n	8001d78 <HAL_DMA_Abort+0x34c>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0201 	bic.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001d78:	e013      	b.n	8001da2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d7a:	f7ff fd2f 	bl	80017dc <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b05      	cmp	r3, #5
 8001d86:	d90c      	bls.n	8001da2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2220      	movs	r2, #32
 8001d8c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2203      	movs	r2, #3
 8001d92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e12d      	b.n	8001ffe <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1e5      	bne.n	8001d7a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a2f      	ldr	r2, [pc, #188]	@ (8001e70 <HAL_DMA_Abort+0x444>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d04a      	beq.n	8001e4e <HAL_DMA_Abort+0x422>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a2d      	ldr	r2, [pc, #180]	@ (8001e74 <HAL_DMA_Abort+0x448>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d045      	beq.n	8001e4e <HAL_DMA_Abort+0x422>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a2c      	ldr	r2, [pc, #176]	@ (8001e78 <HAL_DMA_Abort+0x44c>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d040      	beq.n	8001e4e <HAL_DMA_Abort+0x422>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a2a      	ldr	r2, [pc, #168]	@ (8001e7c <HAL_DMA_Abort+0x450>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d03b      	beq.n	8001e4e <HAL_DMA_Abort+0x422>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a29      	ldr	r2, [pc, #164]	@ (8001e80 <HAL_DMA_Abort+0x454>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d036      	beq.n	8001e4e <HAL_DMA_Abort+0x422>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a27      	ldr	r2, [pc, #156]	@ (8001e84 <HAL_DMA_Abort+0x458>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d031      	beq.n	8001e4e <HAL_DMA_Abort+0x422>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a26      	ldr	r2, [pc, #152]	@ (8001e88 <HAL_DMA_Abort+0x45c>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d02c      	beq.n	8001e4e <HAL_DMA_Abort+0x422>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a24      	ldr	r2, [pc, #144]	@ (8001e8c <HAL_DMA_Abort+0x460>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d027      	beq.n	8001e4e <HAL_DMA_Abort+0x422>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a23      	ldr	r2, [pc, #140]	@ (8001e90 <HAL_DMA_Abort+0x464>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d022      	beq.n	8001e4e <HAL_DMA_Abort+0x422>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a21      	ldr	r2, [pc, #132]	@ (8001e94 <HAL_DMA_Abort+0x468>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d01d      	beq.n	8001e4e <HAL_DMA_Abort+0x422>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a20      	ldr	r2, [pc, #128]	@ (8001e98 <HAL_DMA_Abort+0x46c>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d018      	beq.n	8001e4e <HAL_DMA_Abort+0x422>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a1e      	ldr	r2, [pc, #120]	@ (8001e9c <HAL_DMA_Abort+0x470>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d013      	beq.n	8001e4e <HAL_DMA_Abort+0x422>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ea0 <HAL_DMA_Abort+0x474>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d00e      	beq.n	8001e4e <HAL_DMA_Abort+0x422>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a1b      	ldr	r2, [pc, #108]	@ (8001ea4 <HAL_DMA_Abort+0x478>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d009      	beq.n	8001e4e <HAL_DMA_Abort+0x422>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a1a      	ldr	r2, [pc, #104]	@ (8001ea8 <HAL_DMA_Abort+0x47c>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d004      	beq.n	8001e4e <HAL_DMA_Abort+0x422>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a18      	ldr	r2, [pc, #96]	@ (8001eac <HAL_DMA_Abort+0x480>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d101      	bne.n	8001e52 <HAL_DMA_Abort+0x426>
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e000      	b.n	8001e54 <HAL_DMA_Abort+0x428>
 8001e52:	2300      	movs	r3, #0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d02b      	beq.n	8001eb0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e62:	f003 031f 	and.w	r3, r3, #31
 8001e66:	223f      	movs	r2, #63	@ 0x3f
 8001e68:	409a      	lsls	r2, r3
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	609a      	str	r2, [r3, #8]
 8001e6e:	e02a      	b.n	8001ec6 <HAL_DMA_Abort+0x49a>
 8001e70:	40020010 	.word	0x40020010
 8001e74:	40020028 	.word	0x40020028
 8001e78:	40020040 	.word	0x40020040
 8001e7c:	40020058 	.word	0x40020058
 8001e80:	40020070 	.word	0x40020070
 8001e84:	40020088 	.word	0x40020088
 8001e88:	400200a0 	.word	0x400200a0
 8001e8c:	400200b8 	.word	0x400200b8
 8001e90:	40020410 	.word	0x40020410
 8001e94:	40020428 	.word	0x40020428
 8001e98:	40020440 	.word	0x40020440
 8001e9c:	40020458 	.word	0x40020458
 8001ea0:	40020470 	.word	0x40020470
 8001ea4:	40020488 	.word	0x40020488
 8001ea8:	400204a0 	.word	0x400204a0
 8001eac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eba:	f003 031f 	and.w	r3, r3, #31
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	409a      	lsls	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a4f      	ldr	r2, [pc, #316]	@ (8002008 <HAL_DMA_Abort+0x5dc>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d072      	beq.n	8001fb6 <HAL_DMA_Abort+0x58a>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a4d      	ldr	r2, [pc, #308]	@ (800200c <HAL_DMA_Abort+0x5e0>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d06d      	beq.n	8001fb6 <HAL_DMA_Abort+0x58a>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a4c      	ldr	r2, [pc, #304]	@ (8002010 <HAL_DMA_Abort+0x5e4>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d068      	beq.n	8001fb6 <HAL_DMA_Abort+0x58a>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a4a      	ldr	r2, [pc, #296]	@ (8002014 <HAL_DMA_Abort+0x5e8>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d063      	beq.n	8001fb6 <HAL_DMA_Abort+0x58a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a49      	ldr	r2, [pc, #292]	@ (8002018 <HAL_DMA_Abort+0x5ec>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d05e      	beq.n	8001fb6 <HAL_DMA_Abort+0x58a>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a47      	ldr	r2, [pc, #284]	@ (800201c <HAL_DMA_Abort+0x5f0>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d059      	beq.n	8001fb6 <HAL_DMA_Abort+0x58a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a46      	ldr	r2, [pc, #280]	@ (8002020 <HAL_DMA_Abort+0x5f4>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d054      	beq.n	8001fb6 <HAL_DMA_Abort+0x58a>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a44      	ldr	r2, [pc, #272]	@ (8002024 <HAL_DMA_Abort+0x5f8>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d04f      	beq.n	8001fb6 <HAL_DMA_Abort+0x58a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a43      	ldr	r2, [pc, #268]	@ (8002028 <HAL_DMA_Abort+0x5fc>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d04a      	beq.n	8001fb6 <HAL_DMA_Abort+0x58a>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a41      	ldr	r2, [pc, #260]	@ (800202c <HAL_DMA_Abort+0x600>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d045      	beq.n	8001fb6 <HAL_DMA_Abort+0x58a>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a40      	ldr	r2, [pc, #256]	@ (8002030 <HAL_DMA_Abort+0x604>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d040      	beq.n	8001fb6 <HAL_DMA_Abort+0x58a>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a3e      	ldr	r2, [pc, #248]	@ (8002034 <HAL_DMA_Abort+0x608>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d03b      	beq.n	8001fb6 <HAL_DMA_Abort+0x58a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a3d      	ldr	r2, [pc, #244]	@ (8002038 <HAL_DMA_Abort+0x60c>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d036      	beq.n	8001fb6 <HAL_DMA_Abort+0x58a>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a3b      	ldr	r2, [pc, #236]	@ (800203c <HAL_DMA_Abort+0x610>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d031      	beq.n	8001fb6 <HAL_DMA_Abort+0x58a>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a3a      	ldr	r2, [pc, #232]	@ (8002040 <HAL_DMA_Abort+0x614>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d02c      	beq.n	8001fb6 <HAL_DMA_Abort+0x58a>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a38      	ldr	r2, [pc, #224]	@ (8002044 <HAL_DMA_Abort+0x618>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d027      	beq.n	8001fb6 <HAL_DMA_Abort+0x58a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a37      	ldr	r2, [pc, #220]	@ (8002048 <HAL_DMA_Abort+0x61c>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d022      	beq.n	8001fb6 <HAL_DMA_Abort+0x58a>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a35      	ldr	r2, [pc, #212]	@ (800204c <HAL_DMA_Abort+0x620>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d01d      	beq.n	8001fb6 <HAL_DMA_Abort+0x58a>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a34      	ldr	r2, [pc, #208]	@ (8002050 <HAL_DMA_Abort+0x624>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d018      	beq.n	8001fb6 <HAL_DMA_Abort+0x58a>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a32      	ldr	r2, [pc, #200]	@ (8002054 <HAL_DMA_Abort+0x628>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d013      	beq.n	8001fb6 <HAL_DMA_Abort+0x58a>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a31      	ldr	r2, [pc, #196]	@ (8002058 <HAL_DMA_Abort+0x62c>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d00e      	beq.n	8001fb6 <HAL_DMA_Abort+0x58a>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a2f      	ldr	r2, [pc, #188]	@ (800205c <HAL_DMA_Abort+0x630>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d009      	beq.n	8001fb6 <HAL_DMA_Abort+0x58a>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a2e      	ldr	r2, [pc, #184]	@ (8002060 <HAL_DMA_Abort+0x634>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d004      	beq.n	8001fb6 <HAL_DMA_Abort+0x58a>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a2c      	ldr	r2, [pc, #176]	@ (8002064 <HAL_DMA_Abort+0x638>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d101      	bne.n	8001fba <HAL_DMA_Abort+0x58e>
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e000      	b.n	8001fbc <HAL_DMA_Abort+0x590>
 8001fba:	2300      	movs	r3, #0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d015      	beq.n	8001fec <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001fc8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00c      	beq.n	8001fec <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fdc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fe0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001fea:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40020010 	.word	0x40020010
 800200c:	40020028 	.word	0x40020028
 8002010:	40020040 	.word	0x40020040
 8002014:	40020058 	.word	0x40020058
 8002018:	40020070 	.word	0x40020070
 800201c:	40020088 	.word	0x40020088
 8002020:	400200a0 	.word	0x400200a0
 8002024:	400200b8 	.word	0x400200b8
 8002028:	40020410 	.word	0x40020410
 800202c:	40020428 	.word	0x40020428
 8002030:	40020440 	.word	0x40020440
 8002034:	40020458 	.word	0x40020458
 8002038:	40020470 	.word	0x40020470
 800203c:	40020488 	.word	0x40020488
 8002040:	400204a0 	.word	0x400204a0
 8002044:	400204b8 	.word	0x400204b8
 8002048:	58025408 	.word	0x58025408
 800204c:	5802541c 	.word	0x5802541c
 8002050:	58025430 	.word	0x58025430
 8002054:	58025444 	.word	0x58025444
 8002058:	58025458 	.word	0x58025458
 800205c:	5802546c 	.word	0x5802546c
 8002060:	58025480 	.word	0x58025480
 8002064:	58025494 	.word	0x58025494

08002068 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e237      	b.n	80024ea <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d004      	beq.n	8002090 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2280      	movs	r2, #128	@ 0x80
 800208a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e22c      	b.n	80024ea <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a5c      	ldr	r2, [pc, #368]	@ (8002208 <HAL_DMA_Abort_IT+0x1a0>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d04a      	beq.n	8002130 <HAL_DMA_Abort_IT+0xc8>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a5b      	ldr	r2, [pc, #364]	@ (800220c <HAL_DMA_Abort_IT+0x1a4>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d045      	beq.n	8002130 <HAL_DMA_Abort_IT+0xc8>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a59      	ldr	r2, [pc, #356]	@ (8002210 <HAL_DMA_Abort_IT+0x1a8>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d040      	beq.n	8002130 <HAL_DMA_Abort_IT+0xc8>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a58      	ldr	r2, [pc, #352]	@ (8002214 <HAL_DMA_Abort_IT+0x1ac>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d03b      	beq.n	8002130 <HAL_DMA_Abort_IT+0xc8>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a56      	ldr	r2, [pc, #344]	@ (8002218 <HAL_DMA_Abort_IT+0x1b0>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d036      	beq.n	8002130 <HAL_DMA_Abort_IT+0xc8>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a55      	ldr	r2, [pc, #340]	@ (800221c <HAL_DMA_Abort_IT+0x1b4>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d031      	beq.n	8002130 <HAL_DMA_Abort_IT+0xc8>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a53      	ldr	r2, [pc, #332]	@ (8002220 <HAL_DMA_Abort_IT+0x1b8>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d02c      	beq.n	8002130 <HAL_DMA_Abort_IT+0xc8>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a52      	ldr	r2, [pc, #328]	@ (8002224 <HAL_DMA_Abort_IT+0x1bc>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d027      	beq.n	8002130 <HAL_DMA_Abort_IT+0xc8>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a50      	ldr	r2, [pc, #320]	@ (8002228 <HAL_DMA_Abort_IT+0x1c0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d022      	beq.n	8002130 <HAL_DMA_Abort_IT+0xc8>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a4f      	ldr	r2, [pc, #316]	@ (800222c <HAL_DMA_Abort_IT+0x1c4>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d01d      	beq.n	8002130 <HAL_DMA_Abort_IT+0xc8>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a4d      	ldr	r2, [pc, #308]	@ (8002230 <HAL_DMA_Abort_IT+0x1c8>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d018      	beq.n	8002130 <HAL_DMA_Abort_IT+0xc8>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a4c      	ldr	r2, [pc, #304]	@ (8002234 <HAL_DMA_Abort_IT+0x1cc>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d013      	beq.n	8002130 <HAL_DMA_Abort_IT+0xc8>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a4a      	ldr	r2, [pc, #296]	@ (8002238 <HAL_DMA_Abort_IT+0x1d0>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d00e      	beq.n	8002130 <HAL_DMA_Abort_IT+0xc8>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a49      	ldr	r2, [pc, #292]	@ (800223c <HAL_DMA_Abort_IT+0x1d4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d009      	beq.n	8002130 <HAL_DMA_Abort_IT+0xc8>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a47      	ldr	r2, [pc, #284]	@ (8002240 <HAL_DMA_Abort_IT+0x1d8>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d004      	beq.n	8002130 <HAL_DMA_Abort_IT+0xc8>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a46      	ldr	r2, [pc, #280]	@ (8002244 <HAL_DMA_Abort_IT+0x1dc>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d101      	bne.n	8002134 <HAL_DMA_Abort_IT+0xcc>
 8002130:	2301      	movs	r3, #1
 8002132:	e000      	b.n	8002136 <HAL_DMA_Abort_IT+0xce>
 8002134:	2300      	movs	r3, #0
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 8086 	beq.w	8002248 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2204      	movs	r2, #4
 8002140:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a2f      	ldr	r2, [pc, #188]	@ (8002208 <HAL_DMA_Abort_IT+0x1a0>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d04a      	beq.n	80021e4 <HAL_DMA_Abort_IT+0x17c>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a2e      	ldr	r2, [pc, #184]	@ (800220c <HAL_DMA_Abort_IT+0x1a4>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d045      	beq.n	80021e4 <HAL_DMA_Abort_IT+0x17c>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a2c      	ldr	r2, [pc, #176]	@ (8002210 <HAL_DMA_Abort_IT+0x1a8>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d040      	beq.n	80021e4 <HAL_DMA_Abort_IT+0x17c>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a2b      	ldr	r2, [pc, #172]	@ (8002214 <HAL_DMA_Abort_IT+0x1ac>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d03b      	beq.n	80021e4 <HAL_DMA_Abort_IT+0x17c>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a29      	ldr	r2, [pc, #164]	@ (8002218 <HAL_DMA_Abort_IT+0x1b0>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d036      	beq.n	80021e4 <HAL_DMA_Abort_IT+0x17c>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a28      	ldr	r2, [pc, #160]	@ (800221c <HAL_DMA_Abort_IT+0x1b4>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d031      	beq.n	80021e4 <HAL_DMA_Abort_IT+0x17c>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a26      	ldr	r2, [pc, #152]	@ (8002220 <HAL_DMA_Abort_IT+0x1b8>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d02c      	beq.n	80021e4 <HAL_DMA_Abort_IT+0x17c>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a25      	ldr	r2, [pc, #148]	@ (8002224 <HAL_DMA_Abort_IT+0x1bc>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d027      	beq.n	80021e4 <HAL_DMA_Abort_IT+0x17c>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a23      	ldr	r2, [pc, #140]	@ (8002228 <HAL_DMA_Abort_IT+0x1c0>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d022      	beq.n	80021e4 <HAL_DMA_Abort_IT+0x17c>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a22      	ldr	r2, [pc, #136]	@ (800222c <HAL_DMA_Abort_IT+0x1c4>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d01d      	beq.n	80021e4 <HAL_DMA_Abort_IT+0x17c>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a20      	ldr	r2, [pc, #128]	@ (8002230 <HAL_DMA_Abort_IT+0x1c8>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d018      	beq.n	80021e4 <HAL_DMA_Abort_IT+0x17c>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a1f      	ldr	r2, [pc, #124]	@ (8002234 <HAL_DMA_Abort_IT+0x1cc>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d013      	beq.n	80021e4 <HAL_DMA_Abort_IT+0x17c>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002238 <HAL_DMA_Abort_IT+0x1d0>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d00e      	beq.n	80021e4 <HAL_DMA_Abort_IT+0x17c>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a1c      	ldr	r2, [pc, #112]	@ (800223c <HAL_DMA_Abort_IT+0x1d4>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d009      	beq.n	80021e4 <HAL_DMA_Abort_IT+0x17c>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a1a      	ldr	r2, [pc, #104]	@ (8002240 <HAL_DMA_Abort_IT+0x1d8>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d004      	beq.n	80021e4 <HAL_DMA_Abort_IT+0x17c>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a19      	ldr	r2, [pc, #100]	@ (8002244 <HAL_DMA_Abort_IT+0x1dc>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d108      	bne.n	80021f6 <HAL_DMA_Abort_IT+0x18e>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 0201 	bic.w	r2, r2, #1
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	e178      	b.n	80024e8 <HAL_DMA_Abort_IT+0x480>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0201 	bic.w	r2, r2, #1
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	e16f      	b.n	80024e8 <HAL_DMA_Abort_IT+0x480>
 8002208:	40020010 	.word	0x40020010
 800220c:	40020028 	.word	0x40020028
 8002210:	40020040 	.word	0x40020040
 8002214:	40020058 	.word	0x40020058
 8002218:	40020070 	.word	0x40020070
 800221c:	40020088 	.word	0x40020088
 8002220:	400200a0 	.word	0x400200a0
 8002224:	400200b8 	.word	0x400200b8
 8002228:	40020410 	.word	0x40020410
 800222c:	40020428 	.word	0x40020428
 8002230:	40020440 	.word	0x40020440
 8002234:	40020458 	.word	0x40020458
 8002238:	40020470 	.word	0x40020470
 800223c:	40020488 	.word	0x40020488
 8002240:	400204a0 	.word	0x400204a0
 8002244:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 020e 	bic.w	r2, r2, #14
 8002256:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a6c      	ldr	r2, [pc, #432]	@ (8002410 <HAL_DMA_Abort_IT+0x3a8>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d04a      	beq.n	80022f8 <HAL_DMA_Abort_IT+0x290>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a6b      	ldr	r2, [pc, #428]	@ (8002414 <HAL_DMA_Abort_IT+0x3ac>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d045      	beq.n	80022f8 <HAL_DMA_Abort_IT+0x290>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a69      	ldr	r2, [pc, #420]	@ (8002418 <HAL_DMA_Abort_IT+0x3b0>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d040      	beq.n	80022f8 <HAL_DMA_Abort_IT+0x290>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a68      	ldr	r2, [pc, #416]	@ (800241c <HAL_DMA_Abort_IT+0x3b4>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d03b      	beq.n	80022f8 <HAL_DMA_Abort_IT+0x290>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a66      	ldr	r2, [pc, #408]	@ (8002420 <HAL_DMA_Abort_IT+0x3b8>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d036      	beq.n	80022f8 <HAL_DMA_Abort_IT+0x290>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a65      	ldr	r2, [pc, #404]	@ (8002424 <HAL_DMA_Abort_IT+0x3bc>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d031      	beq.n	80022f8 <HAL_DMA_Abort_IT+0x290>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a63      	ldr	r2, [pc, #396]	@ (8002428 <HAL_DMA_Abort_IT+0x3c0>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d02c      	beq.n	80022f8 <HAL_DMA_Abort_IT+0x290>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a62      	ldr	r2, [pc, #392]	@ (800242c <HAL_DMA_Abort_IT+0x3c4>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d027      	beq.n	80022f8 <HAL_DMA_Abort_IT+0x290>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a60      	ldr	r2, [pc, #384]	@ (8002430 <HAL_DMA_Abort_IT+0x3c8>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d022      	beq.n	80022f8 <HAL_DMA_Abort_IT+0x290>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a5f      	ldr	r2, [pc, #380]	@ (8002434 <HAL_DMA_Abort_IT+0x3cc>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d01d      	beq.n	80022f8 <HAL_DMA_Abort_IT+0x290>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a5d      	ldr	r2, [pc, #372]	@ (8002438 <HAL_DMA_Abort_IT+0x3d0>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d018      	beq.n	80022f8 <HAL_DMA_Abort_IT+0x290>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a5c      	ldr	r2, [pc, #368]	@ (800243c <HAL_DMA_Abort_IT+0x3d4>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d013      	beq.n	80022f8 <HAL_DMA_Abort_IT+0x290>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a5a      	ldr	r2, [pc, #360]	@ (8002440 <HAL_DMA_Abort_IT+0x3d8>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d00e      	beq.n	80022f8 <HAL_DMA_Abort_IT+0x290>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a59      	ldr	r2, [pc, #356]	@ (8002444 <HAL_DMA_Abort_IT+0x3dc>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d009      	beq.n	80022f8 <HAL_DMA_Abort_IT+0x290>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a57      	ldr	r2, [pc, #348]	@ (8002448 <HAL_DMA_Abort_IT+0x3e0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d004      	beq.n	80022f8 <HAL_DMA_Abort_IT+0x290>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a56      	ldr	r2, [pc, #344]	@ (800244c <HAL_DMA_Abort_IT+0x3e4>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d108      	bne.n	800230a <HAL_DMA_Abort_IT+0x2a2>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0201 	bic.w	r2, r2, #1
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	e007      	b.n	800231a <HAL_DMA_Abort_IT+0x2b2>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 0201 	bic.w	r2, r2, #1
 8002318:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a3c      	ldr	r2, [pc, #240]	@ (8002410 <HAL_DMA_Abort_IT+0x3a8>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d072      	beq.n	800240a <HAL_DMA_Abort_IT+0x3a2>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a3a      	ldr	r2, [pc, #232]	@ (8002414 <HAL_DMA_Abort_IT+0x3ac>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d06d      	beq.n	800240a <HAL_DMA_Abort_IT+0x3a2>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a39      	ldr	r2, [pc, #228]	@ (8002418 <HAL_DMA_Abort_IT+0x3b0>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d068      	beq.n	800240a <HAL_DMA_Abort_IT+0x3a2>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a37      	ldr	r2, [pc, #220]	@ (800241c <HAL_DMA_Abort_IT+0x3b4>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d063      	beq.n	800240a <HAL_DMA_Abort_IT+0x3a2>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a36      	ldr	r2, [pc, #216]	@ (8002420 <HAL_DMA_Abort_IT+0x3b8>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d05e      	beq.n	800240a <HAL_DMA_Abort_IT+0x3a2>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a34      	ldr	r2, [pc, #208]	@ (8002424 <HAL_DMA_Abort_IT+0x3bc>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d059      	beq.n	800240a <HAL_DMA_Abort_IT+0x3a2>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a33      	ldr	r2, [pc, #204]	@ (8002428 <HAL_DMA_Abort_IT+0x3c0>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d054      	beq.n	800240a <HAL_DMA_Abort_IT+0x3a2>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a31      	ldr	r2, [pc, #196]	@ (800242c <HAL_DMA_Abort_IT+0x3c4>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d04f      	beq.n	800240a <HAL_DMA_Abort_IT+0x3a2>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a30      	ldr	r2, [pc, #192]	@ (8002430 <HAL_DMA_Abort_IT+0x3c8>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d04a      	beq.n	800240a <HAL_DMA_Abort_IT+0x3a2>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a2e      	ldr	r2, [pc, #184]	@ (8002434 <HAL_DMA_Abort_IT+0x3cc>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d045      	beq.n	800240a <HAL_DMA_Abort_IT+0x3a2>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a2d      	ldr	r2, [pc, #180]	@ (8002438 <HAL_DMA_Abort_IT+0x3d0>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d040      	beq.n	800240a <HAL_DMA_Abort_IT+0x3a2>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a2b      	ldr	r2, [pc, #172]	@ (800243c <HAL_DMA_Abort_IT+0x3d4>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d03b      	beq.n	800240a <HAL_DMA_Abort_IT+0x3a2>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a2a      	ldr	r2, [pc, #168]	@ (8002440 <HAL_DMA_Abort_IT+0x3d8>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d036      	beq.n	800240a <HAL_DMA_Abort_IT+0x3a2>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a28      	ldr	r2, [pc, #160]	@ (8002444 <HAL_DMA_Abort_IT+0x3dc>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d031      	beq.n	800240a <HAL_DMA_Abort_IT+0x3a2>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a27      	ldr	r2, [pc, #156]	@ (8002448 <HAL_DMA_Abort_IT+0x3e0>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d02c      	beq.n	800240a <HAL_DMA_Abort_IT+0x3a2>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a25      	ldr	r2, [pc, #148]	@ (800244c <HAL_DMA_Abort_IT+0x3e4>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d027      	beq.n	800240a <HAL_DMA_Abort_IT+0x3a2>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a24      	ldr	r2, [pc, #144]	@ (8002450 <HAL_DMA_Abort_IT+0x3e8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d022      	beq.n	800240a <HAL_DMA_Abort_IT+0x3a2>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a22      	ldr	r2, [pc, #136]	@ (8002454 <HAL_DMA_Abort_IT+0x3ec>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d01d      	beq.n	800240a <HAL_DMA_Abort_IT+0x3a2>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a21      	ldr	r2, [pc, #132]	@ (8002458 <HAL_DMA_Abort_IT+0x3f0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d018      	beq.n	800240a <HAL_DMA_Abort_IT+0x3a2>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a1f      	ldr	r2, [pc, #124]	@ (800245c <HAL_DMA_Abort_IT+0x3f4>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d013      	beq.n	800240a <HAL_DMA_Abort_IT+0x3a2>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a1e      	ldr	r2, [pc, #120]	@ (8002460 <HAL_DMA_Abort_IT+0x3f8>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d00e      	beq.n	800240a <HAL_DMA_Abort_IT+0x3a2>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a1c      	ldr	r2, [pc, #112]	@ (8002464 <HAL_DMA_Abort_IT+0x3fc>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d009      	beq.n	800240a <HAL_DMA_Abort_IT+0x3a2>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a1b      	ldr	r2, [pc, #108]	@ (8002468 <HAL_DMA_Abort_IT+0x400>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d004      	beq.n	800240a <HAL_DMA_Abort_IT+0x3a2>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a19      	ldr	r2, [pc, #100]	@ (800246c <HAL_DMA_Abort_IT+0x404>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d132      	bne.n	8002470 <HAL_DMA_Abort_IT+0x408>
 800240a:	2301      	movs	r3, #1
 800240c:	e031      	b.n	8002472 <HAL_DMA_Abort_IT+0x40a>
 800240e:	bf00      	nop
 8002410:	40020010 	.word	0x40020010
 8002414:	40020028 	.word	0x40020028
 8002418:	40020040 	.word	0x40020040
 800241c:	40020058 	.word	0x40020058
 8002420:	40020070 	.word	0x40020070
 8002424:	40020088 	.word	0x40020088
 8002428:	400200a0 	.word	0x400200a0
 800242c:	400200b8 	.word	0x400200b8
 8002430:	40020410 	.word	0x40020410
 8002434:	40020428 	.word	0x40020428
 8002438:	40020440 	.word	0x40020440
 800243c:	40020458 	.word	0x40020458
 8002440:	40020470 	.word	0x40020470
 8002444:	40020488 	.word	0x40020488
 8002448:	400204a0 	.word	0x400204a0
 800244c:	400204b8 	.word	0x400204b8
 8002450:	58025408 	.word	0x58025408
 8002454:	5802541c 	.word	0x5802541c
 8002458:	58025430 	.word	0x58025430
 800245c:	58025444 	.word	0x58025444
 8002460:	58025458 	.word	0x58025458
 8002464:	5802546c 	.word	0x5802546c
 8002468:	58025480 	.word	0x58025480
 800246c:	58025494 	.word	0x58025494
 8002470:	2300      	movs	r3, #0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d028      	beq.n	80024c8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002480:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002484:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800248a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002490:	f003 031f 	and.w	r3, r3, #31
 8002494:	2201      	movs	r2, #1
 8002496:	409a      	lsls	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80024a4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00c      	beq.n	80024c8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024bc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80024c6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d003      	beq.n	80024e8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop

080024f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b089      	sub	sp, #36	@ 0x24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002502:	4b89      	ldr	r3, [pc, #548]	@ (8002728 <HAL_GPIO_Init+0x234>)
 8002504:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002506:	e194      	b.n	8002832 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	2101      	movs	r1, #1
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	fa01 f303 	lsl.w	r3, r1, r3
 8002514:	4013      	ands	r3, r2
 8002516:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 8186 	beq.w	800282c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 0303 	and.w	r3, r3, #3
 8002528:	2b01      	cmp	r3, #1
 800252a:	d005      	beq.n	8002538 <HAL_GPIO_Init+0x44>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 0303 	and.w	r3, r3, #3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d130      	bne.n	800259a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	2203      	movs	r2, #3
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	68da      	ldr	r2, [r3, #12]
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800256e:	2201      	movs	r2, #1
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43db      	mvns	r3, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4013      	ands	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	091b      	lsrs	r3, r3, #4
 8002584:	f003 0201 	and.w	r2, r3, #1
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	2b03      	cmp	r3, #3
 80025a4:	d017      	beq.n	80025d6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	2203      	movs	r2, #3
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4013      	ands	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d123      	bne.n	800262a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	08da      	lsrs	r2, r3, #3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	3208      	adds	r2, #8
 80025ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	220f      	movs	r2, #15
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	43db      	mvns	r3, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4013      	ands	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	691a      	ldr	r2, [r3, #16]
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4313      	orrs	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	08da      	lsrs	r2, r3, #3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3208      	adds	r2, #8
 8002624:	69b9      	ldr	r1, [r7, #24]
 8002626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	2203      	movs	r2, #3
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f003 0203 	and.w	r2, r3, #3
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 80e0 	beq.w	800282c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800266c:	4b2f      	ldr	r3, [pc, #188]	@ (800272c <HAL_GPIO_Init+0x238>)
 800266e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002672:	4a2e      	ldr	r2, [pc, #184]	@ (800272c <HAL_GPIO_Init+0x238>)
 8002674:	f043 0302 	orr.w	r3, r3, #2
 8002678:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800267c:	4b2b      	ldr	r3, [pc, #172]	@ (800272c <HAL_GPIO_Init+0x238>)
 800267e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800268a:	4a29      	ldr	r2, [pc, #164]	@ (8002730 <HAL_GPIO_Init+0x23c>)
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	089b      	lsrs	r3, r3, #2
 8002690:	3302      	adds	r3, #2
 8002692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002696:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	220f      	movs	r2, #15
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a20      	ldr	r2, [pc, #128]	@ (8002734 <HAL_GPIO_Init+0x240>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d052      	beq.n	800275c <HAL_GPIO_Init+0x268>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a1f      	ldr	r2, [pc, #124]	@ (8002738 <HAL_GPIO_Init+0x244>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d031      	beq.n	8002722 <HAL_GPIO_Init+0x22e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a1e      	ldr	r2, [pc, #120]	@ (800273c <HAL_GPIO_Init+0x248>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d02b      	beq.n	800271e <HAL_GPIO_Init+0x22a>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002740 <HAL_GPIO_Init+0x24c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d025      	beq.n	800271a <HAL_GPIO_Init+0x226>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002744 <HAL_GPIO_Init+0x250>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d01f      	beq.n	8002716 <HAL_GPIO_Init+0x222>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002748 <HAL_GPIO_Init+0x254>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d019      	beq.n	8002712 <HAL_GPIO_Init+0x21e>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a1a      	ldr	r2, [pc, #104]	@ (800274c <HAL_GPIO_Init+0x258>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d013      	beq.n	800270e <HAL_GPIO_Init+0x21a>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a19      	ldr	r2, [pc, #100]	@ (8002750 <HAL_GPIO_Init+0x25c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d00d      	beq.n	800270a <HAL_GPIO_Init+0x216>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a18      	ldr	r2, [pc, #96]	@ (8002754 <HAL_GPIO_Init+0x260>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d007      	beq.n	8002706 <HAL_GPIO_Init+0x212>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a17      	ldr	r2, [pc, #92]	@ (8002758 <HAL_GPIO_Init+0x264>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d101      	bne.n	8002702 <HAL_GPIO_Init+0x20e>
 80026fe:	2309      	movs	r3, #9
 8002700:	e02d      	b.n	800275e <HAL_GPIO_Init+0x26a>
 8002702:	230a      	movs	r3, #10
 8002704:	e02b      	b.n	800275e <HAL_GPIO_Init+0x26a>
 8002706:	2308      	movs	r3, #8
 8002708:	e029      	b.n	800275e <HAL_GPIO_Init+0x26a>
 800270a:	2307      	movs	r3, #7
 800270c:	e027      	b.n	800275e <HAL_GPIO_Init+0x26a>
 800270e:	2306      	movs	r3, #6
 8002710:	e025      	b.n	800275e <HAL_GPIO_Init+0x26a>
 8002712:	2305      	movs	r3, #5
 8002714:	e023      	b.n	800275e <HAL_GPIO_Init+0x26a>
 8002716:	2304      	movs	r3, #4
 8002718:	e021      	b.n	800275e <HAL_GPIO_Init+0x26a>
 800271a:	2303      	movs	r3, #3
 800271c:	e01f      	b.n	800275e <HAL_GPIO_Init+0x26a>
 800271e:	2302      	movs	r3, #2
 8002720:	e01d      	b.n	800275e <HAL_GPIO_Init+0x26a>
 8002722:	2301      	movs	r3, #1
 8002724:	e01b      	b.n	800275e <HAL_GPIO_Init+0x26a>
 8002726:	bf00      	nop
 8002728:	58000080 	.word	0x58000080
 800272c:	58024400 	.word	0x58024400
 8002730:	58000400 	.word	0x58000400
 8002734:	58020000 	.word	0x58020000
 8002738:	58020400 	.word	0x58020400
 800273c:	58020800 	.word	0x58020800
 8002740:	58020c00 	.word	0x58020c00
 8002744:	58021000 	.word	0x58021000
 8002748:	58021400 	.word	0x58021400
 800274c:	58021800 	.word	0x58021800
 8002750:	58021c00 	.word	0x58021c00
 8002754:	58022000 	.word	0x58022000
 8002758:	58022400 	.word	0x58022400
 800275c:	2300      	movs	r3, #0
 800275e:	69fa      	ldr	r2, [r7, #28]
 8002760:	f002 0203 	and.w	r2, r2, #3
 8002764:	0092      	lsls	r2, r2, #2
 8002766:	4093      	lsls	r3, r2
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800276e:	4938      	ldr	r1, [pc, #224]	@ (8002850 <HAL_GPIO_Init+0x35c>)
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	089b      	lsrs	r3, r3, #2
 8002774:	3302      	adds	r3, #2
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800277c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80027a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80027aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d003      	beq.n	80027d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80027d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	43db      	mvns	r3, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4013      	ands	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	3301      	adds	r3, #1
 8002830:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	fa22 f303 	lsr.w	r3, r2, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	f47f ae63 	bne.w	8002508 <HAL_GPIO_Init+0x14>
  }
}
 8002842:	bf00      	nop
 8002844:	bf00      	nop
 8002846:	3724      	adds	r7, #36	@ 0x24
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	58000400 	.word	0x58000400

08002854 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	460b      	mov	r3, r1
 800285e:	807b      	strh	r3, [r7, #2]
 8002860:	4613      	mov	r3, r2
 8002862:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002864:	787b      	ldrb	r3, [r7, #1]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800286a:	887a      	ldrh	r2, [r7, #2]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002870:	e003      	b.n	800287a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002872:	887b      	ldrh	r3, [r7, #2]
 8002874:	041a      	lsls	r2, r3, #16
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	619a      	str	r2, [r3, #24]
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
	...

08002888 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002890:	4a08      	ldr	r2, [pc, #32]	@ (80028b4 <HAL_HSEM_FastTake+0x2c>)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3320      	adds	r3, #32
 8002896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800289a:	4a07      	ldr	r2, [pc, #28]	@ (80028b8 <HAL_HSEM_FastTake+0x30>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d101      	bne.n	80028a4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80028a0:	2300      	movs	r3, #0
 80028a2:	e000      	b.n	80028a6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	58026400 	.word	0x58026400
 80028b8:	80000300 	.word	0x80000300

080028bc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80028c6:	4906      	ldr	r1, [pc, #24]	@ (80028e0 <HAL_HSEM_Release+0x24>)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	58026400 	.word	0x58026400

080028e4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80028ec:	4b29      	ldr	r3, [pc, #164]	@ (8002994 <HAL_PWREx_ConfigSupply+0xb0>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	2b06      	cmp	r3, #6
 80028f6:	d00a      	beq.n	800290e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80028f8:	4b26      	ldr	r3, [pc, #152]	@ (8002994 <HAL_PWREx_ConfigSupply+0xb0>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	429a      	cmp	r2, r3
 8002904:	d001      	beq.n	800290a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e040      	b.n	800298c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	e03e      	b.n	800298c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800290e:	4b21      	ldr	r3, [pc, #132]	@ (8002994 <HAL_PWREx_ConfigSupply+0xb0>)
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002916:	491f      	ldr	r1, [pc, #124]	@ (8002994 <HAL_PWREx_ConfigSupply+0xb0>)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4313      	orrs	r3, r2
 800291c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800291e:	f7fe ff5d 	bl	80017dc <HAL_GetTick>
 8002922:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002924:	e009      	b.n	800293a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002926:	f7fe ff59 	bl	80017dc <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002934:	d901      	bls.n	800293a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e028      	b.n	800298c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800293a:	4b16      	ldr	r3, [pc, #88]	@ (8002994 <HAL_PWREx_ConfigSupply+0xb0>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002942:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002946:	d1ee      	bne.n	8002926 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b1e      	cmp	r3, #30
 800294c:	d008      	beq.n	8002960 <HAL_PWREx_ConfigSupply+0x7c>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b2e      	cmp	r3, #46	@ 0x2e
 8002952:	d005      	beq.n	8002960 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b1d      	cmp	r3, #29
 8002958:	d002      	beq.n	8002960 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b2d      	cmp	r3, #45	@ 0x2d
 800295e:	d114      	bne.n	800298a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002960:	f7fe ff3c 	bl	80017dc <HAL_GetTick>
 8002964:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002966:	e009      	b.n	800297c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002968:	f7fe ff38 	bl	80017dc <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002976:	d901      	bls.n	800297c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e007      	b.n	800298c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800297c:	4b05      	ldr	r3, [pc, #20]	@ (8002994 <HAL_PWREx_ConfigSupply+0xb0>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002984:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002988:	d1ee      	bne.n	8002968 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	58024800 	.word	0x58024800

08002998 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08c      	sub	sp, #48	@ 0x30
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d102      	bne.n	80029ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	f000 bc48 	b.w	800323c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 8088 	beq.w	8002aca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029ba:	4b99      	ldr	r3, [pc, #612]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029c4:	4b96      	ldr	r3, [pc, #600]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 80029c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80029ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029cc:	2b10      	cmp	r3, #16
 80029ce:	d007      	beq.n	80029e0 <HAL_RCC_OscConfig+0x48>
 80029d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029d2:	2b18      	cmp	r3, #24
 80029d4:	d111      	bne.n	80029fa <HAL_RCC_OscConfig+0x62>
 80029d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d8:	f003 0303 	and.w	r3, r3, #3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d10c      	bne.n	80029fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e0:	4b8f      	ldr	r3, [pc, #572]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d06d      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x130>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d169      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	f000 bc21 	b.w	800323c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a02:	d106      	bne.n	8002a12 <HAL_RCC_OscConfig+0x7a>
 8002a04:	4b86      	ldr	r3, [pc, #536]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a85      	ldr	r2, [pc, #532]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 8002a0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a0e:	6013      	str	r3, [r2, #0]
 8002a10:	e02e      	b.n	8002a70 <HAL_RCC_OscConfig+0xd8>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10c      	bne.n	8002a34 <HAL_RCC_OscConfig+0x9c>
 8002a1a:	4b81      	ldr	r3, [pc, #516]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a80      	ldr	r2, [pc, #512]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 8002a20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	4b7e      	ldr	r3, [pc, #504]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a7d      	ldr	r2, [pc, #500]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 8002a2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	e01d      	b.n	8002a70 <HAL_RCC_OscConfig+0xd8>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a3c:	d10c      	bne.n	8002a58 <HAL_RCC_OscConfig+0xc0>
 8002a3e:	4b78      	ldr	r3, [pc, #480]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a77      	ldr	r2, [pc, #476]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 8002a44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	4b75      	ldr	r3, [pc, #468]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a74      	ldr	r2, [pc, #464]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 8002a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	e00b      	b.n	8002a70 <HAL_RCC_OscConfig+0xd8>
 8002a58:	4b71      	ldr	r3, [pc, #452]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a70      	ldr	r2, [pc, #448]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 8002a5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a62:	6013      	str	r3, [r2, #0]
 8002a64:	4b6e      	ldr	r3, [pc, #440]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a6d      	ldr	r2, [pc, #436]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 8002a6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d013      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a78:	f7fe feb0 	bl	80017dc <HAL_GetTick>
 8002a7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a80:	f7fe feac 	bl	80017dc <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b64      	cmp	r3, #100	@ 0x64
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e3d4      	b.n	800323c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a92:	4b63      	ldr	r3, [pc, #396]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0f0      	beq.n	8002a80 <HAL_RCC_OscConfig+0xe8>
 8002a9e:	e014      	b.n	8002aca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa0:	f7fe fe9c 	bl	80017dc <HAL_GetTick>
 8002aa4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa8:	f7fe fe98 	bl	80017dc <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b64      	cmp	r3, #100	@ 0x64
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e3c0      	b.n	800323c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002aba:	4b59      	ldr	r3, [pc, #356]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f0      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x110>
 8002ac6:	e000      	b.n	8002aca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 80ca 	beq.w	8002c6c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ad8:	4b51      	ldr	r3, [pc, #324]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ae0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ae2:	4b4f      	ldr	r3, [pc, #316]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 8002ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d007      	beq.n	8002afe <HAL_RCC_OscConfig+0x166>
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	2b18      	cmp	r3, #24
 8002af2:	d156      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x20a>
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d151      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002afe:	4b48      	ldr	r3, [pc, #288]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d005      	beq.n	8002b16 <HAL_RCC_OscConfig+0x17e>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e392      	b.n	800323c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b16:	4b42      	ldr	r3, [pc, #264]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f023 0219 	bic.w	r2, r3, #25
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	493f      	ldr	r1, [pc, #252]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b28:	f7fe fe58 	bl	80017dc <HAL_GetTick>
 8002b2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b30:	f7fe fe54 	bl	80017dc <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e37c      	b.n	800323c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b42:	4b37      	ldr	r3, [pc, #220]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0f0      	beq.n	8002b30 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b4e:	f7fe fe51 	bl	80017f4 <HAL_GetREVID>
 8002b52:	4603      	mov	r3, r0
 8002b54:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d817      	bhi.n	8002b8c <HAL_RCC_OscConfig+0x1f4>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	2b40      	cmp	r3, #64	@ 0x40
 8002b62:	d108      	bne.n	8002b76 <HAL_RCC_OscConfig+0x1de>
 8002b64:	4b2e      	ldr	r3, [pc, #184]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002b6c:	4a2c      	ldr	r2, [pc, #176]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 8002b6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b72:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b74:	e07a      	b.n	8002c6c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b76:	4b2a      	ldr	r3, [pc, #168]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	031b      	lsls	r3, r3, #12
 8002b84:	4926      	ldr	r1, [pc, #152]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b8a:	e06f      	b.n	8002c6c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8c:	4b24      	ldr	r3, [pc, #144]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	061b      	lsls	r3, r3, #24
 8002b9a:	4921      	ldr	r1, [pc, #132]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ba0:	e064      	b.n	8002c6c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d047      	beq.n	8002c3a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002baa:	4b1d      	ldr	r3, [pc, #116]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f023 0219 	bic.w	r2, r3, #25
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	491a      	ldr	r1, [pc, #104]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bbc:	f7fe fe0e 	bl	80017dc <HAL_GetTick>
 8002bc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc4:	f7fe fe0a 	bl	80017dc <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e332      	b.n	800323c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bd6:	4b12      	ldr	r3, [pc, #72]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0304 	and.w	r3, r3, #4
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0f0      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be2:	f7fe fe07 	bl	80017f4 <HAL_GetREVID>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d819      	bhi.n	8002c24 <HAL_RCC_OscConfig+0x28c>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	2b40      	cmp	r3, #64	@ 0x40
 8002bf6:	d108      	bne.n	8002c0a <HAL_RCC_OscConfig+0x272>
 8002bf8:	4b09      	ldr	r3, [pc, #36]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002c00:	4a07      	ldr	r2, [pc, #28]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 8002c02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c06:	6053      	str	r3, [r2, #4]
 8002c08:	e030      	b.n	8002c6c <HAL_RCC_OscConfig+0x2d4>
 8002c0a:	4b05      	ldr	r3, [pc, #20]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	031b      	lsls	r3, r3, #12
 8002c18:	4901      	ldr	r1, [pc, #4]	@ (8002c20 <HAL_RCC_OscConfig+0x288>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	604b      	str	r3, [r1, #4]
 8002c1e:	e025      	b.n	8002c6c <HAL_RCC_OscConfig+0x2d4>
 8002c20:	58024400 	.word	0x58024400
 8002c24:	4b9a      	ldr	r3, [pc, #616]	@ (8002e90 <HAL_RCC_OscConfig+0x4f8>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	061b      	lsls	r3, r3, #24
 8002c32:	4997      	ldr	r1, [pc, #604]	@ (8002e90 <HAL_RCC_OscConfig+0x4f8>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	604b      	str	r3, [r1, #4]
 8002c38:	e018      	b.n	8002c6c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c3a:	4b95      	ldr	r3, [pc, #596]	@ (8002e90 <HAL_RCC_OscConfig+0x4f8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a94      	ldr	r2, [pc, #592]	@ (8002e90 <HAL_RCC_OscConfig+0x4f8>)
 8002c40:	f023 0301 	bic.w	r3, r3, #1
 8002c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c46:	f7fe fdc9 	bl	80017dc <HAL_GetTick>
 8002c4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c4e:	f7fe fdc5 	bl	80017dc <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e2ed      	b.n	800323c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c60:	4b8b      	ldr	r3, [pc, #556]	@ (8002e90 <HAL_RCC_OscConfig+0x4f8>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1f0      	bne.n	8002c4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0310 	and.w	r3, r3, #16
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 80a9 	beq.w	8002dcc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c7a:	4b85      	ldr	r3, [pc, #532]	@ (8002e90 <HAL_RCC_OscConfig+0x4f8>)
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c82:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c84:	4b82      	ldr	r3, [pc, #520]	@ (8002e90 <HAL_RCC_OscConfig+0x4f8>)
 8002c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c88:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	d007      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x308>
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	2b18      	cmp	r3, #24
 8002c94:	d13a      	bne.n	8002d0c <HAL_RCC_OscConfig+0x374>
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d135      	bne.n	8002d0c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ca0:	4b7b      	ldr	r3, [pc, #492]	@ (8002e90 <HAL_RCC_OscConfig+0x4f8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x320>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	69db      	ldr	r3, [r3, #28]
 8002cb0:	2b80      	cmp	r3, #128	@ 0x80
 8002cb2:	d001      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e2c1      	b.n	800323c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cb8:	f7fe fd9c 	bl	80017f4 <HAL_GetREVID>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d817      	bhi.n	8002cf6 <HAL_RCC_OscConfig+0x35e>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	2b20      	cmp	r3, #32
 8002ccc:	d108      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x348>
 8002cce:	4b70      	ldr	r3, [pc, #448]	@ (8002e90 <HAL_RCC_OscConfig+0x4f8>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002cd6:	4a6e      	ldr	r2, [pc, #440]	@ (8002e90 <HAL_RCC_OscConfig+0x4f8>)
 8002cd8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002cdc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002cde:	e075      	b.n	8002dcc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ce0:	4b6b      	ldr	r3, [pc, #428]	@ (8002e90 <HAL_RCC_OscConfig+0x4f8>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	069b      	lsls	r3, r3, #26
 8002cee:	4968      	ldr	r1, [pc, #416]	@ (8002e90 <HAL_RCC_OscConfig+0x4f8>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002cf4:	e06a      	b.n	8002dcc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cf6:	4b66      	ldr	r3, [pc, #408]	@ (8002e90 <HAL_RCC_OscConfig+0x4f8>)
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	061b      	lsls	r3, r3, #24
 8002d04:	4962      	ldr	r1, [pc, #392]	@ (8002e90 <HAL_RCC_OscConfig+0x4f8>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d0a:	e05f      	b.n	8002dcc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d042      	beq.n	8002d9a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002d14:	4b5e      	ldr	r3, [pc, #376]	@ (8002e90 <HAL_RCC_OscConfig+0x4f8>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a5d      	ldr	r2, [pc, #372]	@ (8002e90 <HAL_RCC_OscConfig+0x4f8>)
 8002d1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7fe fd5c 	bl	80017dc <HAL_GetTick>
 8002d24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002d28:	f7fe fd58 	bl	80017dc <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e280      	b.n	800323c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d3a:	4b55      	ldr	r3, [pc, #340]	@ (8002e90 <HAL_RCC_OscConfig+0x4f8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0f0      	beq.n	8002d28 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d46:	f7fe fd55 	bl	80017f4 <HAL_GetREVID>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d817      	bhi.n	8002d84 <HAL_RCC_OscConfig+0x3ec>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	2b20      	cmp	r3, #32
 8002d5a:	d108      	bne.n	8002d6e <HAL_RCC_OscConfig+0x3d6>
 8002d5c:	4b4c      	ldr	r3, [pc, #304]	@ (8002e90 <HAL_RCC_OscConfig+0x4f8>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002d64:	4a4a      	ldr	r2, [pc, #296]	@ (8002e90 <HAL_RCC_OscConfig+0x4f8>)
 8002d66:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002d6a:	6053      	str	r3, [r2, #4]
 8002d6c:	e02e      	b.n	8002dcc <HAL_RCC_OscConfig+0x434>
 8002d6e:	4b48      	ldr	r3, [pc, #288]	@ (8002e90 <HAL_RCC_OscConfig+0x4f8>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	069b      	lsls	r3, r3, #26
 8002d7c:	4944      	ldr	r1, [pc, #272]	@ (8002e90 <HAL_RCC_OscConfig+0x4f8>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	604b      	str	r3, [r1, #4]
 8002d82:	e023      	b.n	8002dcc <HAL_RCC_OscConfig+0x434>
 8002d84:	4b42      	ldr	r3, [pc, #264]	@ (8002e90 <HAL_RCC_OscConfig+0x4f8>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	061b      	lsls	r3, r3, #24
 8002d92:	493f      	ldr	r1, [pc, #252]	@ (8002e90 <HAL_RCC_OscConfig+0x4f8>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	60cb      	str	r3, [r1, #12]
 8002d98:	e018      	b.n	8002dcc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002d9a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e90 <HAL_RCC_OscConfig+0x4f8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a3c      	ldr	r2, [pc, #240]	@ (8002e90 <HAL_RCC_OscConfig+0x4f8>)
 8002da0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002da4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da6:	f7fe fd19 	bl	80017dc <HAL_GetTick>
 8002daa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002dae:	f7fe fd15 	bl	80017dc <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e23d      	b.n	800323c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002dc0:	4b33      	ldr	r3, [pc, #204]	@ (8002e90 <HAL_RCC_OscConfig+0x4f8>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1f0      	bne.n	8002dae <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d036      	beq.n	8002e46 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d019      	beq.n	8002e14 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002de0:	4b2b      	ldr	r3, [pc, #172]	@ (8002e90 <HAL_RCC_OscConfig+0x4f8>)
 8002de2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002de4:	4a2a      	ldr	r2, [pc, #168]	@ (8002e90 <HAL_RCC_OscConfig+0x4f8>)
 8002de6:	f043 0301 	orr.w	r3, r3, #1
 8002dea:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dec:	f7fe fcf6 	bl	80017dc <HAL_GetTick>
 8002df0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df4:	f7fe fcf2 	bl	80017dc <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e21a      	b.n	800323c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e06:	4b22      	ldr	r3, [pc, #136]	@ (8002e90 <HAL_RCC_OscConfig+0x4f8>)
 8002e08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0f0      	beq.n	8002df4 <HAL_RCC_OscConfig+0x45c>
 8002e12:	e018      	b.n	8002e46 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e14:	4b1e      	ldr	r3, [pc, #120]	@ (8002e90 <HAL_RCC_OscConfig+0x4f8>)
 8002e16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e18:	4a1d      	ldr	r2, [pc, #116]	@ (8002e90 <HAL_RCC_OscConfig+0x4f8>)
 8002e1a:	f023 0301 	bic.w	r3, r3, #1
 8002e1e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e20:	f7fe fcdc 	bl	80017dc <HAL_GetTick>
 8002e24:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e28:	f7fe fcd8 	bl	80017dc <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e200      	b.n	800323c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e3a:	4b15      	ldr	r3, [pc, #84]	@ (8002e90 <HAL_RCC_OscConfig+0x4f8>)
 8002e3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f0      	bne.n	8002e28 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0320 	and.w	r3, r3, #32
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d039      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d01c      	beq.n	8002e94 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e90 <HAL_RCC_OscConfig+0x4f8>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a0c      	ldr	r2, [pc, #48]	@ (8002e90 <HAL_RCC_OscConfig+0x4f8>)
 8002e60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e64:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e66:	f7fe fcb9 	bl	80017dc <HAL_GetTick>
 8002e6a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e6e:	f7fe fcb5 	bl	80017dc <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e1dd      	b.n	800323c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e80:	4b03      	ldr	r3, [pc, #12]	@ (8002e90 <HAL_RCC_OscConfig+0x4f8>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0f0      	beq.n	8002e6e <HAL_RCC_OscConfig+0x4d6>
 8002e8c:	e01b      	b.n	8002ec6 <HAL_RCC_OscConfig+0x52e>
 8002e8e:	bf00      	nop
 8002e90:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e94:	4b9b      	ldr	r3, [pc, #620]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a9a      	ldr	r2, [pc, #616]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 8002e9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e9e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ea0:	f7fe fc9c 	bl	80017dc <HAL_GetTick>
 8002ea4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ea8:	f7fe fc98 	bl	80017dc <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e1c0      	b.n	800323c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002eba:	4b92      	ldr	r3, [pc, #584]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f0      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0304 	and.w	r3, r3, #4
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 8081 	beq.w	8002fd6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ed4:	4b8c      	ldr	r3, [pc, #560]	@ (8003108 <HAL_RCC_OscConfig+0x770>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a8b      	ldr	r2, [pc, #556]	@ (8003108 <HAL_RCC_OscConfig+0x770>)
 8002eda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ede:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ee0:	f7fe fc7c 	bl	80017dc <HAL_GetTick>
 8002ee4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee8:	f7fe fc78 	bl	80017dc <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b64      	cmp	r3, #100	@ 0x64
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e1a0      	b.n	800323c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002efa:	4b83      	ldr	r3, [pc, #524]	@ (8003108 <HAL_RCC_OscConfig+0x770>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0f0      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d106      	bne.n	8002f1c <HAL_RCC_OscConfig+0x584>
 8002f0e:	4b7d      	ldr	r3, [pc, #500]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 8002f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f12:	4a7c      	ldr	r2, [pc, #496]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 8002f14:	f043 0301 	orr.w	r3, r3, #1
 8002f18:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f1a:	e02d      	b.n	8002f78 <HAL_RCC_OscConfig+0x5e0>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10c      	bne.n	8002f3e <HAL_RCC_OscConfig+0x5a6>
 8002f24:	4b77      	ldr	r3, [pc, #476]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 8002f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f28:	4a76      	ldr	r2, [pc, #472]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 8002f2a:	f023 0301 	bic.w	r3, r3, #1
 8002f2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f30:	4b74      	ldr	r3, [pc, #464]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 8002f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f34:	4a73      	ldr	r2, [pc, #460]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 8002f36:	f023 0304 	bic.w	r3, r3, #4
 8002f3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f3c:	e01c      	b.n	8002f78 <HAL_RCC_OscConfig+0x5e0>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	2b05      	cmp	r3, #5
 8002f44:	d10c      	bne.n	8002f60 <HAL_RCC_OscConfig+0x5c8>
 8002f46:	4b6f      	ldr	r3, [pc, #444]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 8002f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f4a:	4a6e      	ldr	r2, [pc, #440]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 8002f4c:	f043 0304 	orr.w	r3, r3, #4
 8002f50:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f52:	4b6c      	ldr	r3, [pc, #432]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 8002f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f56:	4a6b      	ldr	r2, [pc, #428]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f5e:	e00b      	b.n	8002f78 <HAL_RCC_OscConfig+0x5e0>
 8002f60:	4b68      	ldr	r3, [pc, #416]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 8002f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f64:	4a67      	ldr	r2, [pc, #412]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 8002f66:	f023 0301 	bic.w	r3, r3, #1
 8002f6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f6c:	4b65      	ldr	r3, [pc, #404]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 8002f6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f70:	4a64      	ldr	r2, [pc, #400]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 8002f72:	f023 0304 	bic.w	r3, r3, #4
 8002f76:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d015      	beq.n	8002fac <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f80:	f7fe fc2c 	bl	80017dc <HAL_GetTick>
 8002f84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f86:	e00a      	b.n	8002f9e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f88:	f7fe fc28 	bl	80017dc <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e14e      	b.n	800323c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f9e:	4b59      	ldr	r3, [pc, #356]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0ee      	beq.n	8002f88 <HAL_RCC_OscConfig+0x5f0>
 8002faa:	e014      	b.n	8002fd6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fac:	f7fe fc16 	bl	80017dc <HAL_GetTick>
 8002fb0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002fb2:	e00a      	b.n	8002fca <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb4:	f7fe fc12 	bl	80017dc <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e138      	b.n	800323c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002fca:	4b4e      	ldr	r3, [pc, #312]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 8002fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1ee      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 812d 	beq.w	800323a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002fe0:	4b48      	ldr	r3, [pc, #288]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fe8:	2b18      	cmp	r3, #24
 8002fea:	f000 80bd 	beq.w	8003168 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	f040 809e 	bne.w	8003134 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff8:	4b42      	ldr	r3, [pc, #264]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a41      	ldr	r2, [pc, #260]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 8002ffe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003004:	f7fe fbea 	bl	80017dc <HAL_GetTick>
 8003008:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800300c:	f7fe fbe6 	bl	80017dc <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e10e      	b.n	800323c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800301e:	4b39      	ldr	r3, [pc, #228]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800302a:	4b36      	ldr	r3, [pc, #216]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 800302c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800302e:	4b37      	ldr	r3, [pc, #220]	@ (800310c <HAL_RCC_OscConfig+0x774>)
 8003030:	4013      	ands	r3, r2
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800303a:	0112      	lsls	r2, r2, #4
 800303c:	430a      	orrs	r2, r1
 800303e:	4931      	ldr	r1, [pc, #196]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 8003040:	4313      	orrs	r3, r2
 8003042:	628b      	str	r3, [r1, #40]	@ 0x28
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003048:	3b01      	subs	r3, #1
 800304a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003052:	3b01      	subs	r3, #1
 8003054:	025b      	lsls	r3, r3, #9
 8003056:	b29b      	uxth	r3, r3
 8003058:	431a      	orrs	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800305e:	3b01      	subs	r3, #1
 8003060:	041b      	lsls	r3, r3, #16
 8003062:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800306c:	3b01      	subs	r3, #1
 800306e:	061b      	lsls	r3, r3, #24
 8003070:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003074:	4923      	ldr	r1, [pc, #140]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 8003076:	4313      	orrs	r3, r2
 8003078:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800307a:	4b22      	ldr	r3, [pc, #136]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 800307c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800307e:	4a21      	ldr	r2, [pc, #132]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 8003080:	f023 0301 	bic.w	r3, r3, #1
 8003084:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003086:	4b1f      	ldr	r3, [pc, #124]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 8003088:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800308a:	4b21      	ldr	r3, [pc, #132]	@ (8003110 <HAL_RCC_OscConfig+0x778>)
 800308c:	4013      	ands	r3, r2
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003092:	00d2      	lsls	r2, r2, #3
 8003094:	491b      	ldr	r1, [pc, #108]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 8003096:	4313      	orrs	r3, r2
 8003098:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800309a:	4b1a      	ldr	r3, [pc, #104]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 800309c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309e:	f023 020c 	bic.w	r2, r3, #12
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a6:	4917      	ldr	r1, [pc, #92]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80030ac:	4b15      	ldr	r3, [pc, #84]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 80030ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b0:	f023 0202 	bic.w	r2, r3, #2
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b8:	4912      	ldr	r1, [pc, #72]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80030be:	4b11      	ldr	r3, [pc, #68]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 80030c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c2:	4a10      	ldr	r2, [pc, #64]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 80030c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 80030cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ce:	4a0d      	ldr	r2, [pc, #52]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 80030d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80030d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 80030d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030da:	4a0a      	ldr	r2, [pc, #40]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 80030dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80030e2:	4b08      	ldr	r3, [pc, #32]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 80030e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e6:	4a07      	ldr	r2, [pc, #28]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 80030e8:	f043 0301 	orr.w	r3, r3, #1
 80030ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030ee:	4b05      	ldr	r3, [pc, #20]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a04      	ldr	r2, [pc, #16]	@ (8003104 <HAL_RCC_OscConfig+0x76c>)
 80030f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fa:	f7fe fb6f 	bl	80017dc <HAL_GetTick>
 80030fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003100:	e011      	b.n	8003126 <HAL_RCC_OscConfig+0x78e>
 8003102:	bf00      	nop
 8003104:	58024400 	.word	0x58024400
 8003108:	58024800 	.word	0x58024800
 800310c:	fffffc0c 	.word	0xfffffc0c
 8003110:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003114:	f7fe fb62 	bl	80017dc <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e08a      	b.n	800323c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003126:	4b47      	ldr	r3, [pc, #284]	@ (8003244 <HAL_RCC_OscConfig+0x8ac>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0f0      	beq.n	8003114 <HAL_RCC_OscConfig+0x77c>
 8003132:	e082      	b.n	800323a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003134:	4b43      	ldr	r3, [pc, #268]	@ (8003244 <HAL_RCC_OscConfig+0x8ac>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a42      	ldr	r2, [pc, #264]	@ (8003244 <HAL_RCC_OscConfig+0x8ac>)
 800313a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800313e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003140:	f7fe fb4c 	bl	80017dc <HAL_GetTick>
 8003144:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003148:	f7fe fb48 	bl	80017dc <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e070      	b.n	800323c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800315a:	4b3a      	ldr	r3, [pc, #232]	@ (8003244 <HAL_RCC_OscConfig+0x8ac>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f0      	bne.n	8003148 <HAL_RCC_OscConfig+0x7b0>
 8003166:	e068      	b.n	800323a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003168:	4b36      	ldr	r3, [pc, #216]	@ (8003244 <HAL_RCC_OscConfig+0x8ac>)
 800316a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800316c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800316e:	4b35      	ldr	r3, [pc, #212]	@ (8003244 <HAL_RCC_OscConfig+0x8ac>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003172:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003178:	2b01      	cmp	r3, #1
 800317a:	d031      	beq.n	80031e0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	f003 0203 	and.w	r2, r3, #3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003186:	429a      	cmp	r2, r3
 8003188:	d12a      	bne.n	80031e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	091b      	lsrs	r3, r3, #4
 800318e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003196:	429a      	cmp	r2, r3
 8003198:	d122      	bne.n	80031e0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d11a      	bne.n	80031e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	0a5b      	lsrs	r3, r3, #9
 80031ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031b6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d111      	bne.n	80031e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	0c1b      	lsrs	r3, r3, #16
 80031c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d108      	bne.n	80031e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	0e1b      	lsrs	r3, r3, #24
 80031d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031da:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80031dc:	429a      	cmp	r2, r3
 80031de:	d001      	beq.n	80031e4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e02b      	b.n	800323c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80031e4:	4b17      	ldr	r3, [pc, #92]	@ (8003244 <HAL_RCC_OscConfig+0x8ac>)
 80031e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031e8:	08db      	lsrs	r3, r3, #3
 80031ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031ee:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d01f      	beq.n	800323a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80031fa:	4b12      	ldr	r3, [pc, #72]	@ (8003244 <HAL_RCC_OscConfig+0x8ac>)
 80031fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031fe:	4a11      	ldr	r2, [pc, #68]	@ (8003244 <HAL_RCC_OscConfig+0x8ac>)
 8003200:	f023 0301 	bic.w	r3, r3, #1
 8003204:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003206:	f7fe fae9 	bl	80017dc <HAL_GetTick>
 800320a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800320c:	bf00      	nop
 800320e:	f7fe fae5 	bl	80017dc <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003216:	4293      	cmp	r3, r2
 8003218:	d0f9      	beq.n	800320e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800321a:	4b0a      	ldr	r3, [pc, #40]	@ (8003244 <HAL_RCC_OscConfig+0x8ac>)
 800321c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800321e:	4b0a      	ldr	r3, [pc, #40]	@ (8003248 <HAL_RCC_OscConfig+0x8b0>)
 8003220:	4013      	ands	r3, r2
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003226:	00d2      	lsls	r2, r2, #3
 8003228:	4906      	ldr	r1, [pc, #24]	@ (8003244 <HAL_RCC_OscConfig+0x8ac>)
 800322a:	4313      	orrs	r3, r2
 800322c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800322e:	4b05      	ldr	r3, [pc, #20]	@ (8003244 <HAL_RCC_OscConfig+0x8ac>)
 8003230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003232:	4a04      	ldr	r2, [pc, #16]	@ (8003244 <HAL_RCC_OscConfig+0x8ac>)
 8003234:	f043 0301 	orr.w	r3, r3, #1
 8003238:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3730      	adds	r7, #48	@ 0x30
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	58024400 	.word	0x58024400
 8003248:	ffff0007 	.word	0xffff0007

0800324c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e19c      	b.n	800359a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003260:	4b8a      	ldr	r3, [pc, #552]	@ (800348c <HAL_RCC_ClockConfig+0x240>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 030f 	and.w	r3, r3, #15
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d910      	bls.n	8003290 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326e:	4b87      	ldr	r3, [pc, #540]	@ (800348c <HAL_RCC_ClockConfig+0x240>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f023 020f 	bic.w	r2, r3, #15
 8003276:	4985      	ldr	r1, [pc, #532]	@ (800348c <HAL_RCC_ClockConfig+0x240>)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	4313      	orrs	r3, r2
 800327c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800327e:	4b83      	ldr	r3, [pc, #524]	@ (800348c <HAL_RCC_ClockConfig+0x240>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	d001      	beq.n	8003290 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e184      	b.n	800359a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b00      	cmp	r3, #0
 800329a:	d010      	beq.n	80032be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691a      	ldr	r2, [r3, #16]
 80032a0:	4b7b      	ldr	r3, [pc, #492]	@ (8003490 <HAL_RCC_ClockConfig+0x244>)
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d908      	bls.n	80032be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80032ac:	4b78      	ldr	r3, [pc, #480]	@ (8003490 <HAL_RCC_ClockConfig+0x244>)
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	4975      	ldr	r1, [pc, #468]	@ (8003490 <HAL_RCC_ClockConfig+0x244>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d010      	beq.n	80032ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695a      	ldr	r2, [r3, #20]
 80032ce:	4b70      	ldr	r3, [pc, #448]	@ (8003490 <HAL_RCC_ClockConfig+0x244>)
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d908      	bls.n	80032ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80032da:	4b6d      	ldr	r3, [pc, #436]	@ (8003490 <HAL_RCC_ClockConfig+0x244>)
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	496a      	ldr	r1, [pc, #424]	@ (8003490 <HAL_RCC_ClockConfig+0x244>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0310 	and.w	r3, r3, #16
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d010      	beq.n	800331a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	699a      	ldr	r2, [r3, #24]
 80032fc:	4b64      	ldr	r3, [pc, #400]	@ (8003490 <HAL_RCC_ClockConfig+0x244>)
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003304:	429a      	cmp	r2, r3
 8003306:	d908      	bls.n	800331a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003308:	4b61      	ldr	r3, [pc, #388]	@ (8003490 <HAL_RCC_ClockConfig+0x244>)
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	495e      	ldr	r1, [pc, #376]	@ (8003490 <HAL_RCC_ClockConfig+0x244>)
 8003316:	4313      	orrs	r3, r2
 8003318:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0320 	and.w	r3, r3, #32
 8003322:	2b00      	cmp	r3, #0
 8003324:	d010      	beq.n	8003348 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69da      	ldr	r2, [r3, #28]
 800332a:	4b59      	ldr	r3, [pc, #356]	@ (8003490 <HAL_RCC_ClockConfig+0x244>)
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003332:	429a      	cmp	r2, r3
 8003334:	d908      	bls.n	8003348 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003336:	4b56      	ldr	r3, [pc, #344]	@ (8003490 <HAL_RCC_ClockConfig+0x244>)
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	4953      	ldr	r1, [pc, #332]	@ (8003490 <HAL_RCC_ClockConfig+0x244>)
 8003344:	4313      	orrs	r3, r2
 8003346:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d010      	beq.n	8003376 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	4b4d      	ldr	r3, [pc, #308]	@ (8003490 <HAL_RCC_ClockConfig+0x244>)
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	f003 030f 	and.w	r3, r3, #15
 8003360:	429a      	cmp	r2, r3
 8003362:	d908      	bls.n	8003376 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003364:	4b4a      	ldr	r3, [pc, #296]	@ (8003490 <HAL_RCC_ClockConfig+0x244>)
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	f023 020f 	bic.w	r2, r3, #15
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	4947      	ldr	r1, [pc, #284]	@ (8003490 <HAL_RCC_ClockConfig+0x244>)
 8003372:	4313      	orrs	r3, r2
 8003374:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d055      	beq.n	800342e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003382:	4b43      	ldr	r3, [pc, #268]	@ (8003490 <HAL_RCC_ClockConfig+0x244>)
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	4940      	ldr	r1, [pc, #256]	@ (8003490 <HAL_RCC_ClockConfig+0x244>)
 8003390:	4313      	orrs	r3, r2
 8003392:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b02      	cmp	r3, #2
 800339a:	d107      	bne.n	80033ac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800339c:	4b3c      	ldr	r3, [pc, #240]	@ (8003490 <HAL_RCC_ClockConfig+0x244>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d121      	bne.n	80033ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e0f6      	b.n	800359a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b03      	cmp	r3, #3
 80033b2:	d107      	bne.n	80033c4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033b4:	4b36      	ldr	r3, [pc, #216]	@ (8003490 <HAL_RCC_ClockConfig+0x244>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d115      	bne.n	80033ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e0ea      	b.n	800359a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d107      	bne.n	80033dc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033cc:	4b30      	ldr	r3, [pc, #192]	@ (8003490 <HAL_RCC_ClockConfig+0x244>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d109      	bne.n	80033ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e0de      	b.n	800359a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033dc:	4b2c      	ldr	r3, [pc, #176]	@ (8003490 <HAL_RCC_ClockConfig+0x244>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e0d6      	b.n	800359a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033ec:	4b28      	ldr	r3, [pc, #160]	@ (8003490 <HAL_RCC_ClockConfig+0x244>)
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	f023 0207 	bic.w	r2, r3, #7
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	4925      	ldr	r1, [pc, #148]	@ (8003490 <HAL_RCC_ClockConfig+0x244>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033fe:	f7fe f9ed 	bl	80017dc <HAL_GetTick>
 8003402:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003404:	e00a      	b.n	800341c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003406:	f7fe f9e9 	bl	80017dc <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003414:	4293      	cmp	r3, r2
 8003416:	d901      	bls.n	800341c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e0be      	b.n	800359a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341c:	4b1c      	ldr	r3, [pc, #112]	@ (8003490 <HAL_RCC_ClockConfig+0x244>)
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	429a      	cmp	r2, r3
 800342c:	d1eb      	bne.n	8003406 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d010      	beq.n	800345c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	4b14      	ldr	r3, [pc, #80]	@ (8003490 <HAL_RCC_ClockConfig+0x244>)
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	429a      	cmp	r2, r3
 8003448:	d208      	bcs.n	800345c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800344a:	4b11      	ldr	r3, [pc, #68]	@ (8003490 <HAL_RCC_ClockConfig+0x244>)
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	f023 020f 	bic.w	r2, r3, #15
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	490e      	ldr	r1, [pc, #56]	@ (8003490 <HAL_RCC_ClockConfig+0x244>)
 8003458:	4313      	orrs	r3, r2
 800345a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800345c:	4b0b      	ldr	r3, [pc, #44]	@ (800348c <HAL_RCC_ClockConfig+0x240>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 030f 	and.w	r3, r3, #15
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	429a      	cmp	r2, r3
 8003468:	d214      	bcs.n	8003494 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346a:	4b08      	ldr	r3, [pc, #32]	@ (800348c <HAL_RCC_ClockConfig+0x240>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f023 020f 	bic.w	r2, r3, #15
 8003472:	4906      	ldr	r1, [pc, #24]	@ (800348c <HAL_RCC_ClockConfig+0x240>)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	4313      	orrs	r3, r2
 8003478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800347a:	4b04      	ldr	r3, [pc, #16]	@ (800348c <HAL_RCC_ClockConfig+0x240>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d005      	beq.n	8003494 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e086      	b.n	800359a <HAL_RCC_ClockConfig+0x34e>
 800348c:	52002000 	.word	0x52002000
 8003490:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b00      	cmp	r3, #0
 800349e:	d010      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691a      	ldr	r2, [r3, #16]
 80034a4:	4b3f      	ldr	r3, [pc, #252]	@ (80035a4 <HAL_RCC_ClockConfig+0x358>)
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d208      	bcs.n	80034c2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80034b0:	4b3c      	ldr	r3, [pc, #240]	@ (80035a4 <HAL_RCC_ClockConfig+0x358>)
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	4939      	ldr	r1, [pc, #228]	@ (80035a4 <HAL_RCC_ClockConfig+0x358>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d010      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695a      	ldr	r2, [r3, #20]
 80034d2:	4b34      	ldr	r3, [pc, #208]	@ (80035a4 <HAL_RCC_ClockConfig+0x358>)
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034da:	429a      	cmp	r2, r3
 80034dc:	d208      	bcs.n	80034f0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80034de:	4b31      	ldr	r3, [pc, #196]	@ (80035a4 <HAL_RCC_ClockConfig+0x358>)
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	492e      	ldr	r1, [pc, #184]	@ (80035a4 <HAL_RCC_ClockConfig+0x358>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0310 	and.w	r3, r3, #16
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d010      	beq.n	800351e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	699a      	ldr	r2, [r3, #24]
 8003500:	4b28      	ldr	r3, [pc, #160]	@ (80035a4 <HAL_RCC_ClockConfig+0x358>)
 8003502:	69db      	ldr	r3, [r3, #28]
 8003504:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003508:	429a      	cmp	r2, r3
 800350a:	d208      	bcs.n	800351e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800350c:	4b25      	ldr	r3, [pc, #148]	@ (80035a4 <HAL_RCC_ClockConfig+0x358>)
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	4922      	ldr	r1, [pc, #136]	@ (80035a4 <HAL_RCC_ClockConfig+0x358>)
 800351a:	4313      	orrs	r3, r2
 800351c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0320 	and.w	r3, r3, #32
 8003526:	2b00      	cmp	r3, #0
 8003528:	d010      	beq.n	800354c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69da      	ldr	r2, [r3, #28]
 800352e:	4b1d      	ldr	r3, [pc, #116]	@ (80035a4 <HAL_RCC_ClockConfig+0x358>)
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003536:	429a      	cmp	r2, r3
 8003538:	d208      	bcs.n	800354c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800353a:	4b1a      	ldr	r3, [pc, #104]	@ (80035a4 <HAL_RCC_ClockConfig+0x358>)
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	4917      	ldr	r1, [pc, #92]	@ (80035a4 <HAL_RCC_ClockConfig+0x358>)
 8003548:	4313      	orrs	r3, r2
 800354a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800354c:	f000 f834 	bl	80035b8 <HAL_RCC_GetSysClockFreq>
 8003550:	4602      	mov	r2, r0
 8003552:	4b14      	ldr	r3, [pc, #80]	@ (80035a4 <HAL_RCC_ClockConfig+0x358>)
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	0a1b      	lsrs	r3, r3, #8
 8003558:	f003 030f 	and.w	r3, r3, #15
 800355c:	4912      	ldr	r1, [pc, #72]	@ (80035a8 <HAL_RCC_ClockConfig+0x35c>)
 800355e:	5ccb      	ldrb	r3, [r1, r3]
 8003560:	f003 031f 	and.w	r3, r3, #31
 8003564:	fa22 f303 	lsr.w	r3, r2, r3
 8003568:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800356a:	4b0e      	ldr	r3, [pc, #56]	@ (80035a4 <HAL_RCC_ClockConfig+0x358>)
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	4a0d      	ldr	r2, [pc, #52]	@ (80035a8 <HAL_RCC_ClockConfig+0x35c>)
 8003574:	5cd3      	ldrb	r3, [r2, r3]
 8003576:	f003 031f 	and.w	r3, r3, #31
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	fa22 f303 	lsr.w	r3, r2, r3
 8003580:	4a0a      	ldr	r2, [pc, #40]	@ (80035ac <HAL_RCC_ClockConfig+0x360>)
 8003582:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003584:	4a0a      	ldr	r2, [pc, #40]	@ (80035b0 <HAL_RCC_ClockConfig+0x364>)
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800358a:	4b0a      	ldr	r3, [pc, #40]	@ (80035b4 <HAL_RCC_ClockConfig+0x368>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f7fe f8da 	bl	8001748 <HAL_InitTick>
 8003594:	4603      	mov	r3, r0
 8003596:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003598:	7bfb      	ldrb	r3, [r7, #15]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	58024400 	.word	0x58024400
 80035a8:	0800d508 	.word	0x0800d508
 80035ac:	24000004 	.word	0x24000004
 80035b0:	24000000 	.word	0x24000000
 80035b4:	24000008 	.word	0x24000008

080035b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b089      	sub	sp, #36	@ 0x24
 80035bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035be:	4bb3      	ldr	r3, [pc, #716]	@ (800388c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80035c6:	2b18      	cmp	r3, #24
 80035c8:	f200 8155 	bhi.w	8003876 <HAL_RCC_GetSysClockFreq+0x2be>
 80035cc:	a201      	add	r2, pc, #4	@ (adr r2, 80035d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80035ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d2:	bf00      	nop
 80035d4:	08003639 	.word	0x08003639
 80035d8:	08003877 	.word	0x08003877
 80035dc:	08003877 	.word	0x08003877
 80035e0:	08003877 	.word	0x08003877
 80035e4:	08003877 	.word	0x08003877
 80035e8:	08003877 	.word	0x08003877
 80035ec:	08003877 	.word	0x08003877
 80035f0:	08003877 	.word	0x08003877
 80035f4:	0800365f 	.word	0x0800365f
 80035f8:	08003877 	.word	0x08003877
 80035fc:	08003877 	.word	0x08003877
 8003600:	08003877 	.word	0x08003877
 8003604:	08003877 	.word	0x08003877
 8003608:	08003877 	.word	0x08003877
 800360c:	08003877 	.word	0x08003877
 8003610:	08003877 	.word	0x08003877
 8003614:	08003665 	.word	0x08003665
 8003618:	08003877 	.word	0x08003877
 800361c:	08003877 	.word	0x08003877
 8003620:	08003877 	.word	0x08003877
 8003624:	08003877 	.word	0x08003877
 8003628:	08003877 	.word	0x08003877
 800362c:	08003877 	.word	0x08003877
 8003630:	08003877 	.word	0x08003877
 8003634:	0800366b 	.word	0x0800366b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003638:	4b94      	ldr	r3, [pc, #592]	@ (800388c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0320 	and.w	r3, r3, #32
 8003640:	2b00      	cmp	r3, #0
 8003642:	d009      	beq.n	8003658 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003644:	4b91      	ldr	r3, [pc, #580]	@ (800388c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	08db      	lsrs	r3, r3, #3
 800364a:	f003 0303 	and.w	r3, r3, #3
 800364e:	4a90      	ldr	r2, [pc, #576]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003650:	fa22 f303 	lsr.w	r3, r2, r3
 8003654:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003656:	e111      	b.n	800387c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003658:	4b8d      	ldr	r3, [pc, #564]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800365a:	61bb      	str	r3, [r7, #24]
      break;
 800365c:	e10e      	b.n	800387c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800365e:	4b8d      	ldr	r3, [pc, #564]	@ (8003894 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003660:	61bb      	str	r3, [r7, #24]
      break;
 8003662:	e10b      	b.n	800387c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003664:	4b8c      	ldr	r3, [pc, #560]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003666:	61bb      	str	r3, [r7, #24]
      break;
 8003668:	e108      	b.n	800387c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800366a:	4b88      	ldr	r3, [pc, #544]	@ (800388c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800366c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003674:	4b85      	ldr	r3, [pc, #532]	@ (800388c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003678:	091b      	lsrs	r3, r3, #4
 800367a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800367e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003680:	4b82      	ldr	r3, [pc, #520]	@ (800388c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800368a:	4b80      	ldr	r3, [pc, #512]	@ (800388c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800368c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800368e:	08db      	lsrs	r3, r3, #3
 8003690:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	fb02 f303 	mul.w	r3, r2, r3
 800369a:	ee07 3a90 	vmov	s15, r3
 800369e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036a2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 80e1 	beq.w	8003870 <HAL_RCC_GetSysClockFreq+0x2b8>
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	f000 8083 	beq.w	80037bc <HAL_RCC_GetSysClockFreq+0x204>
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	f200 80a1 	bhi.w	8003800 <HAL_RCC_GetSysClockFreq+0x248>
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d003      	beq.n	80036cc <HAL_RCC_GetSysClockFreq+0x114>
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d056      	beq.n	8003778 <HAL_RCC_GetSysClockFreq+0x1c0>
 80036ca:	e099      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036cc:	4b6f      	ldr	r3, [pc, #444]	@ (800388c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0320 	and.w	r3, r3, #32
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d02d      	beq.n	8003734 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80036d8:	4b6c      	ldr	r3, [pc, #432]	@ (800388c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	08db      	lsrs	r3, r3, #3
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	4a6b      	ldr	r2, [pc, #428]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036e4:	fa22 f303 	lsr.w	r3, r2, r3
 80036e8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	ee07 3a90 	vmov	s15, r3
 80036f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	ee07 3a90 	vmov	s15, r3
 80036fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003702:	4b62      	ldr	r3, [pc, #392]	@ (800388c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800370a:	ee07 3a90 	vmov	s15, r3
 800370e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003712:	ed97 6a02 	vldr	s12, [r7, #8]
 8003716:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800389c <HAL_RCC_GetSysClockFreq+0x2e4>
 800371a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800371e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003722:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800372a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800372e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003732:	e087      	b.n	8003844 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	ee07 3a90 	vmov	s15, r3
 800373a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800373e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80038a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003746:	4b51      	ldr	r3, [pc, #324]	@ (800388c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800374e:	ee07 3a90 	vmov	s15, r3
 8003752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003756:	ed97 6a02 	vldr	s12, [r7, #8]
 800375a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800389c <HAL_RCC_GetSysClockFreq+0x2e4>
 800375e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003766:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800376a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800376e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003772:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003776:	e065      	b.n	8003844 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	ee07 3a90 	vmov	s15, r3
 800377e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003782:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80038a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800378a:	4b40      	ldr	r3, [pc, #256]	@ (800388c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800378c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003792:	ee07 3a90 	vmov	s15, r3
 8003796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800379a:	ed97 6a02 	vldr	s12, [r7, #8]
 800379e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800389c <HAL_RCC_GetSysClockFreq+0x2e4>
 80037a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037ba:	e043      	b.n	8003844 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	ee07 3a90 	vmov	s15, r3
 80037c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037c6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80038a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80037ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ce:	4b2f      	ldr	r3, [pc, #188]	@ (800388c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d6:	ee07 3a90 	vmov	s15, r3
 80037da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037de:	ed97 6a02 	vldr	s12, [r7, #8]
 80037e2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800389c <HAL_RCC_GetSysClockFreq+0x2e4>
 80037e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037fe:	e021      	b.n	8003844 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	ee07 3a90 	vmov	s15, r3
 8003806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800380a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80038a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800380e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003812:	4b1e      	ldr	r3, [pc, #120]	@ (800388c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800381a:	ee07 3a90 	vmov	s15, r3
 800381e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003822:	ed97 6a02 	vldr	s12, [r7, #8]
 8003826:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800389c <HAL_RCC_GetSysClockFreq+0x2e4>
 800382a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800382e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003832:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800383a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800383e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003842:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003844:	4b11      	ldr	r3, [pc, #68]	@ (800388c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003848:	0a5b      	lsrs	r3, r3, #9
 800384a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800384e:	3301      	adds	r3, #1
 8003850:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	ee07 3a90 	vmov	s15, r3
 8003858:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800385c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003860:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003868:	ee17 3a90 	vmov	r3, s15
 800386c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800386e:	e005      	b.n	800387c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	61bb      	str	r3, [r7, #24]
      break;
 8003874:	e002      	b.n	800387c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003876:	4b07      	ldr	r3, [pc, #28]	@ (8003894 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003878:	61bb      	str	r3, [r7, #24]
      break;
 800387a:	bf00      	nop
  }

  return sysclockfreq;
 800387c:	69bb      	ldr	r3, [r7, #24]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3724      	adds	r7, #36	@ 0x24
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	58024400 	.word	0x58024400
 8003890:	03d09000 	.word	0x03d09000
 8003894:	003d0900 	.word	0x003d0900
 8003898:	017d7840 	.word	0x017d7840
 800389c:	46000000 	.word	0x46000000
 80038a0:	4c742400 	.word	0x4c742400
 80038a4:	4a742400 	.word	0x4a742400
 80038a8:	4bbebc20 	.word	0x4bbebc20

080038ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80038b2:	f7ff fe81 	bl	80035b8 <HAL_RCC_GetSysClockFreq>
 80038b6:	4602      	mov	r2, r0
 80038b8:	4b10      	ldr	r3, [pc, #64]	@ (80038fc <HAL_RCC_GetHCLKFreq+0x50>)
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	0a1b      	lsrs	r3, r3, #8
 80038be:	f003 030f 	and.w	r3, r3, #15
 80038c2:	490f      	ldr	r1, [pc, #60]	@ (8003900 <HAL_RCC_GetHCLKFreq+0x54>)
 80038c4:	5ccb      	ldrb	r3, [r1, r3]
 80038c6:	f003 031f 	and.w	r3, r3, #31
 80038ca:	fa22 f303 	lsr.w	r3, r2, r3
 80038ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038d0:	4b0a      	ldr	r3, [pc, #40]	@ (80038fc <HAL_RCC_GetHCLKFreq+0x50>)
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	f003 030f 	and.w	r3, r3, #15
 80038d8:	4a09      	ldr	r2, [pc, #36]	@ (8003900 <HAL_RCC_GetHCLKFreq+0x54>)
 80038da:	5cd3      	ldrb	r3, [r2, r3]
 80038dc:	f003 031f 	and.w	r3, r3, #31
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	fa22 f303 	lsr.w	r3, r2, r3
 80038e6:	4a07      	ldr	r2, [pc, #28]	@ (8003904 <HAL_RCC_GetHCLKFreq+0x58>)
 80038e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80038ea:	4a07      	ldr	r2, [pc, #28]	@ (8003908 <HAL_RCC_GetHCLKFreq+0x5c>)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80038f0:	4b04      	ldr	r3, [pc, #16]	@ (8003904 <HAL_RCC_GetHCLKFreq+0x58>)
 80038f2:	681b      	ldr	r3, [r3, #0]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	58024400 	.word	0x58024400
 8003900:	0800d508 	.word	0x0800d508
 8003904:	24000004 	.word	0x24000004
 8003908:	24000000 	.word	0x24000000

0800390c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003910:	f7ff ffcc 	bl	80038ac <HAL_RCC_GetHCLKFreq>
 8003914:	4602      	mov	r2, r0
 8003916:	4b06      	ldr	r3, [pc, #24]	@ (8003930 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	091b      	lsrs	r3, r3, #4
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	4904      	ldr	r1, [pc, #16]	@ (8003934 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003922:	5ccb      	ldrb	r3, [r1, r3]
 8003924:	f003 031f 	and.w	r3, r3, #31
 8003928:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800392c:	4618      	mov	r0, r3
 800392e:	bd80      	pop	{r7, pc}
 8003930:	58024400 	.word	0x58024400
 8003934:	0800d508 	.word	0x0800d508

08003938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800393c:	f7ff ffb6 	bl	80038ac <HAL_RCC_GetHCLKFreq>
 8003940:	4602      	mov	r2, r0
 8003942:	4b06      	ldr	r3, [pc, #24]	@ (800395c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	0a1b      	lsrs	r3, r3, #8
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	4904      	ldr	r1, [pc, #16]	@ (8003960 <HAL_RCC_GetPCLK2Freq+0x28>)
 800394e:	5ccb      	ldrb	r3, [r1, r3]
 8003950:	f003 031f 	and.w	r3, r3, #31
 8003954:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003958:	4618      	mov	r0, r3
 800395a:	bd80      	pop	{r7, pc}
 800395c:	58024400 	.word	0x58024400
 8003960:	0800d508 	.word	0x0800d508

08003964 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003968:	b0ca      	sub	sp, #296	@ 0x128
 800396a:	af00      	add	r7, sp, #0
 800396c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003970:	2300      	movs	r3, #0
 8003972:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003976:	2300      	movs	r3, #0
 8003978:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800397c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003984:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003988:	2500      	movs	r5, #0
 800398a:	ea54 0305 	orrs.w	r3, r4, r5
 800398e:	d049      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003994:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003996:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800399a:	d02f      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800399c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80039a0:	d828      	bhi.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80039a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039a6:	d01a      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80039a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039ac:	d822      	bhi.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x56>
 80039b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039b6:	d007      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039b8:	e01c      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039ba:	4bb8      	ldr	r3, [pc, #736]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039be:	4ab7      	ldr	r2, [pc, #732]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039c6:	e01a      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039cc:	3308      	adds	r3, #8
 80039ce:	2102      	movs	r1, #2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f001 fc8f 	bl	80052f4 <RCCEx_PLL2_Config>
 80039d6:	4603      	mov	r3, r0
 80039d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039dc:	e00f      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e2:	3328      	adds	r3, #40	@ 0x28
 80039e4:	2102      	movs	r1, #2
 80039e6:	4618      	mov	r0, r3
 80039e8:	f001 fd36 	bl	8005458 <RCCEx_PLL3_Config>
 80039ec:	4603      	mov	r3, r0
 80039ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039f2:	e004      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039fa:	e000      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80039fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10a      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003a06:	4ba5      	ldr	r3, [pc, #660]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a0a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a14:	4aa1      	ldr	r2, [pc, #644]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a16:	430b      	orrs	r3, r1
 8003a18:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a1a:	e003      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003a30:	f04f 0900 	mov.w	r9, #0
 8003a34:	ea58 0309 	orrs.w	r3, r8, r9
 8003a38:	d047      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	d82a      	bhi.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003a44:	a201      	add	r2, pc, #4	@ (adr r2, 8003a4c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4a:	bf00      	nop
 8003a4c:	08003a61 	.word	0x08003a61
 8003a50:	08003a6f 	.word	0x08003a6f
 8003a54:	08003a85 	.word	0x08003a85
 8003a58:	08003aa3 	.word	0x08003aa3
 8003a5c:	08003aa3 	.word	0x08003aa3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a60:	4b8e      	ldr	r3, [pc, #568]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a64:	4a8d      	ldr	r2, [pc, #564]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a6c:	e01a      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a72:	3308      	adds	r3, #8
 8003a74:	2100      	movs	r1, #0
 8003a76:	4618      	mov	r0, r3
 8003a78:	f001 fc3c 	bl	80052f4 <RCCEx_PLL2_Config>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a82:	e00f      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a88:	3328      	adds	r3, #40	@ 0x28
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f001 fce3 	bl	8005458 <RCCEx_PLL3_Config>
 8003a92:	4603      	mov	r3, r0
 8003a94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a98:	e004      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003aa0:	e000      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003aa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10a      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003aac:	4b7b      	ldr	r3, [pc, #492]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003aae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ab0:	f023 0107 	bic.w	r1, r3, #7
 8003ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aba:	4a78      	ldr	r2, [pc, #480]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003abc:	430b      	orrs	r3, r1
 8003abe:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ac0:	e003      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ac6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003ad6:	f04f 0b00 	mov.w	fp, #0
 8003ada:	ea5a 030b 	orrs.w	r3, sl, fp
 8003ade:	d04c      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003aea:	d030      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003aec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003af0:	d829      	bhi.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003af2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003af4:	d02d      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003af6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003af8:	d825      	bhi.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003afa:	2b80      	cmp	r3, #128	@ 0x80
 8003afc:	d018      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003afe:	2b80      	cmp	r3, #128	@ 0x80
 8003b00:	d821      	bhi.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d002      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003b06:	2b40      	cmp	r3, #64	@ 0x40
 8003b08:	d007      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003b0a:	e01c      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b0c:	4b63      	ldr	r3, [pc, #396]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b10:	4a62      	ldr	r2, [pc, #392]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b18:	e01c      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b1e:	3308      	adds	r3, #8
 8003b20:	2100      	movs	r1, #0
 8003b22:	4618      	mov	r0, r3
 8003b24:	f001 fbe6 	bl	80052f4 <RCCEx_PLL2_Config>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b2e:	e011      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b34:	3328      	adds	r3, #40	@ 0x28
 8003b36:	2100      	movs	r1, #0
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f001 fc8d 	bl	8005458 <RCCEx_PLL3_Config>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b44:	e006      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b4c:	e002      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003b4e:	bf00      	nop
 8003b50:	e000      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003b52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10a      	bne.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003b5c:	4b4f      	ldr	r3, [pc, #316]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b60:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b6a:	4a4c      	ldr	r2, [pc, #304]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b6c:	430b      	orrs	r3, r1
 8003b6e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b70:	e003      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b82:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003b86:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003b90:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003b94:	460b      	mov	r3, r1
 8003b96:	4313      	orrs	r3, r2
 8003b98:	d053      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003ba2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ba6:	d035      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003ba8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003bac:	d82e      	bhi.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003bae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003bb2:	d031      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003bb4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003bb8:	d828      	bhi.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003bba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bbe:	d01a      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003bc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bc4:	d822      	bhi.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003bca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bce:	d007      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003bd0:	e01c      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bd2:	4b32      	ldr	r3, [pc, #200]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd6:	4a31      	ldr	r2, [pc, #196]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bde:	e01c      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be4:	3308      	adds	r3, #8
 8003be6:	2100      	movs	r1, #0
 8003be8:	4618      	mov	r0, r3
 8003bea:	f001 fb83 	bl	80052f4 <RCCEx_PLL2_Config>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003bf4:	e011      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bfa:	3328      	adds	r3, #40	@ 0x28
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f001 fc2a 	bl	8005458 <RCCEx_PLL3_Config>
 8003c04:	4603      	mov	r3, r0
 8003c06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c0a:	e006      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c12:	e002      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003c14:	bf00      	nop
 8003c16:	e000      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003c18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10b      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003c22:	4b1e      	ldr	r3, [pc, #120]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c26:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003c32:	4a1a      	ldr	r2, [pc, #104]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c34:	430b      	orrs	r3, r1
 8003c36:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c38:	e003      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003c4e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003c52:	2300      	movs	r3, #0
 8003c54:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003c58:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	d056      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003c6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c6e:	d038      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003c70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c74:	d831      	bhi.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c76:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c7a:	d034      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003c7c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c80:	d82b      	bhi.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c86:	d01d      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003c88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c8c:	d825      	bhi.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d006      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003c92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c96:	d00a      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003c98:	e01f      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c9a:	bf00      	nop
 8003c9c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ca0:	4ba2      	ldr	r3, [pc, #648]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca4:	4aa1      	ldr	r2, [pc, #644]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ca6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003caa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cac:	e01c      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb2:	3308      	adds	r3, #8
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f001 fb1c 	bl	80052f4 <RCCEx_PLL2_Config>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003cc2:	e011      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc8:	3328      	adds	r3, #40	@ 0x28
 8003cca:	2100      	movs	r1, #0
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f001 fbc3 	bl	8005458 <RCCEx_PLL3_Config>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cd8:	e006      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ce0:	e002      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003ce2:	bf00      	nop
 8003ce4:	e000      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003ce6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ce8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10b      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003cf0:	4b8e      	ldr	r3, [pc, #568]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cfc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003d00:	4a8a      	ldr	r2, [pc, #552]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d02:	430b      	orrs	r3, r1
 8003d04:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d06:	e003      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d18:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003d1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003d20:	2300      	movs	r3, #0
 8003d22:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003d26:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	d03a      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d36:	2b30      	cmp	r3, #48	@ 0x30
 8003d38:	d01f      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003d3a:	2b30      	cmp	r3, #48	@ 0x30
 8003d3c:	d819      	bhi.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003d3e:	2b20      	cmp	r3, #32
 8003d40:	d00c      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003d42:	2b20      	cmp	r3, #32
 8003d44:	d815      	bhi.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d019      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003d4a:	2b10      	cmp	r3, #16
 8003d4c:	d111      	bne.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d4e:	4b77      	ldr	r3, [pc, #476]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d52:	4a76      	ldr	r2, [pc, #472]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003d5a:	e011      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d60:	3308      	adds	r3, #8
 8003d62:	2102      	movs	r1, #2
 8003d64:	4618      	mov	r0, r3
 8003d66:	f001 fac5 	bl	80052f4 <RCCEx_PLL2_Config>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003d70:	e006      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d78:	e002      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003d7a:	bf00      	nop
 8003d7c:	e000      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003d7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10a      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003d88:	4b68      	ldr	r3, [pc, #416]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d8c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d96:	4a65      	ldr	r2, [pc, #404]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d98:	430b      	orrs	r3, r1
 8003d9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d9c:	e003      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003da2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dae:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003db2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003db6:	2300      	movs	r3, #0
 8003db8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003dbc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	d051      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dcc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dd0:	d035      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003dd2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dd6:	d82e      	bhi.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003dd8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ddc:	d031      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003dde:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003de2:	d828      	bhi.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003de4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003de8:	d01a      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003dea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dee:	d822      	bhi.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d003      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003df4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003df8:	d007      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003dfa:	e01c      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dfc:	4b4b      	ldr	r3, [pc, #300]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e00:	4a4a      	ldr	r2, [pc, #296]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e08:	e01c      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e0e:	3308      	adds	r3, #8
 8003e10:	2100      	movs	r1, #0
 8003e12:	4618      	mov	r0, r3
 8003e14:	f001 fa6e 	bl	80052f4 <RCCEx_PLL2_Config>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e1e:	e011      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e24:	3328      	adds	r3, #40	@ 0x28
 8003e26:	2100      	movs	r1, #0
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f001 fb15 	bl	8005458 <RCCEx_PLL3_Config>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e34:	e006      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e3c:	e002      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003e3e:	bf00      	nop
 8003e40:	e000      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003e42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10a      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003e4c:	4b37      	ldr	r3, [pc, #220]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e50:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e5a:	4a34      	ldr	r2, [pc, #208]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e5c:	430b      	orrs	r3, r1
 8003e5e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e60:	e003      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e72:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003e76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003e80:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003e84:	460b      	mov	r3, r1
 8003e86:	4313      	orrs	r3, r2
 8003e88:	d056      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e94:	d033      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003e96:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e9a:	d82c      	bhi.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e9c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ea0:	d02f      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003ea2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ea6:	d826      	bhi.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ea8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003eac:	d02b      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003eae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003eb2:	d820      	bhi.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003eb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003eb8:	d012      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003eba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ebe:	d81a      	bhi.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d022      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003ec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ec8:	d115      	bne.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ece:	3308      	adds	r3, #8
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f001 fa0e 	bl	80052f4 <RCCEx_PLL2_Config>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ede:	e015      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee4:	3328      	adds	r3, #40	@ 0x28
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f001 fab5 	bl	8005458 <RCCEx_PLL3_Config>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ef4:	e00a      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003efc:	e006      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003efe:	bf00      	nop
 8003f00:	e004      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f02:	bf00      	nop
 8003f04:	e002      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f06:	bf00      	nop
 8003f08:	e000      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10d      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003f14:	4b05      	ldr	r3, [pc, #20]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f18:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f22:	4a02      	ldr	r2, [pc, #8]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f24:	430b      	orrs	r3, r1
 8003f26:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f28:	e006      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003f2a:	bf00      	nop
 8003f2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f40:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003f44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f48:	2300      	movs	r3, #0
 8003f4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f4e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003f52:	460b      	mov	r3, r1
 8003f54:	4313      	orrs	r3, r2
 8003f56:	d055      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003f60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f64:	d033      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003f66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f6a:	d82c      	bhi.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f70:	d02f      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f76:	d826      	bhi.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f78:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f7c:	d02b      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003f7e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f82:	d820      	bhi.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f88:	d012      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003f8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f8e:	d81a      	bhi.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d022      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003f94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f98:	d115      	bne.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f9e:	3308      	adds	r3, #8
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f001 f9a6 	bl	80052f4 <RCCEx_PLL2_Config>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003fae:	e015      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fb4:	3328      	adds	r3, #40	@ 0x28
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f001 fa4d 	bl	8005458 <RCCEx_PLL3_Config>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003fc4:	e00a      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fcc:	e006      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003fce:	bf00      	nop
 8003fd0:	e004      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003fd2:	bf00      	nop
 8003fd4:	e002      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003fd6:	bf00      	nop
 8003fd8:	e000      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003fda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10b      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003fe4:	4ba3      	ldr	r3, [pc, #652]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fe8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003ff4:	4a9f      	ldr	r2, [pc, #636]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ff6:	430b      	orrs	r3, r1
 8003ff8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ffa:	e003      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ffc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004000:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004010:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004014:	2300      	movs	r3, #0
 8004016:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800401a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800401e:	460b      	mov	r3, r1
 8004020:	4313      	orrs	r3, r2
 8004022:	d037      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800402a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800402e:	d00e      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004030:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004034:	d816      	bhi.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004036:	2b00      	cmp	r3, #0
 8004038:	d018      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800403a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800403e:	d111      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004040:	4b8c      	ldr	r3, [pc, #560]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004044:	4a8b      	ldr	r2, [pc, #556]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004046:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800404a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800404c:	e00f      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800404e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004052:	3308      	adds	r3, #8
 8004054:	2101      	movs	r1, #1
 8004056:	4618      	mov	r0, r3
 8004058:	f001 f94c 	bl	80052f4 <RCCEx_PLL2_Config>
 800405c:	4603      	mov	r3, r0
 800405e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004062:	e004      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800406a:	e000      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800406c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800406e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10a      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004076:	4b7f      	ldr	r3, [pc, #508]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004078:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800407a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800407e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004084:	4a7b      	ldr	r2, [pc, #492]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004086:	430b      	orrs	r3, r1
 8004088:	6513      	str	r3, [r2, #80]	@ 0x50
 800408a:	e003      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800408c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004090:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80040a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040a4:	2300      	movs	r3, #0
 80040a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80040aa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80040ae:	460b      	mov	r3, r1
 80040b0:	4313      	orrs	r3, r2
 80040b2:	d039      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80040b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040ba:	2b03      	cmp	r3, #3
 80040bc:	d81c      	bhi.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80040be:	a201      	add	r2, pc, #4	@ (adr r2, 80040c4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80040c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c4:	08004101 	.word	0x08004101
 80040c8:	080040d5 	.word	0x080040d5
 80040cc:	080040e3 	.word	0x080040e3
 80040d0:	08004101 	.word	0x08004101
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040d4:	4b67      	ldr	r3, [pc, #412]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d8:	4a66      	ldr	r2, [pc, #408]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80040e0:	e00f      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e6:	3308      	adds	r3, #8
 80040e8:	2102      	movs	r1, #2
 80040ea:	4618      	mov	r0, r3
 80040ec:	f001 f902 	bl	80052f4 <RCCEx_PLL2_Config>
 80040f0:	4603      	mov	r3, r0
 80040f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80040f6:	e004      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040fe:	e000      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004100:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004102:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10a      	bne.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800410a:	4b5a      	ldr	r3, [pc, #360]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800410c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800410e:	f023 0103 	bic.w	r1, r3, #3
 8004112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004116:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004118:	4a56      	ldr	r2, [pc, #344]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800411a:	430b      	orrs	r3, r1
 800411c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800411e:	e003      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004120:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004124:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800412c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004130:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004134:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004138:	2300      	movs	r3, #0
 800413a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800413e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004142:	460b      	mov	r3, r1
 8004144:	4313      	orrs	r3, r2
 8004146:	f000 809f 	beq.w	8004288 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800414a:	4b4b      	ldr	r3, [pc, #300]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a4a      	ldr	r2, [pc, #296]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004150:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004154:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004156:	f7fd fb41 	bl	80017dc <HAL_GetTick>
 800415a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800415e:	e00b      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004160:	f7fd fb3c 	bl	80017dc <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b64      	cmp	r3, #100	@ 0x64
 800416e:	d903      	bls.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004176:	e005      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004178:	4b3f      	ldr	r3, [pc, #252]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0ed      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004184:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004188:	2b00      	cmp	r3, #0
 800418a:	d179      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800418c:	4b39      	ldr	r3, [pc, #228]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800418e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004194:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004198:	4053      	eors	r3, r2
 800419a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d015      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041a2:	4b34      	ldr	r3, [pc, #208]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041aa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041ae:	4b31      	ldr	r3, [pc, #196]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041b2:	4a30      	ldr	r2, [pc, #192]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041b8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041ba:	4b2e      	ldr	r3, [pc, #184]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041be:	4a2d      	ldr	r2, [pc, #180]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041c4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80041c6:	4a2b      	ldr	r2, [pc, #172]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041cc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80041ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80041d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041da:	d118      	bne.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041dc:	f7fd fafe 	bl	80017dc <HAL_GetTick>
 80041e0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041e4:	e00d      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e6:	f7fd faf9 	bl	80017dc <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80041f0:	1ad2      	subs	r2, r2, r3
 80041f2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d903      	bls.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004200:	e005      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004202:	4b1c      	ldr	r3, [pc, #112]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d0eb      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800420e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004212:	2b00      	cmp	r3, #0
 8004214:	d129      	bne.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800421a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800421e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004222:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004226:	d10e      	bne.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004228:	4b12      	ldr	r3, [pc, #72]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004234:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004238:	091a      	lsrs	r2, r3, #4
 800423a:	4b10      	ldr	r3, [pc, #64]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800423c:	4013      	ands	r3, r2
 800423e:	4a0d      	ldr	r2, [pc, #52]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004240:	430b      	orrs	r3, r1
 8004242:	6113      	str	r3, [r2, #16]
 8004244:	e005      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004246:	4b0b      	ldr	r3, [pc, #44]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	4a0a      	ldr	r2, [pc, #40]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800424c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004250:	6113      	str	r3, [r2, #16]
 8004252:	4b08      	ldr	r3, [pc, #32]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004254:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800425a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800425e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004262:	4a04      	ldr	r2, [pc, #16]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004264:	430b      	orrs	r3, r1
 8004266:	6713      	str	r3, [r2, #112]	@ 0x70
 8004268:	e00e      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800426a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800426e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004272:	e009      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004274:	58024400 	.word	0x58024400
 8004278:	58024800 	.word	0x58024800
 800427c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004280:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004284:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800428c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004290:	f002 0301 	and.w	r3, r2, #1
 8004294:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004298:	2300      	movs	r3, #0
 800429a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800429e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80042a2:	460b      	mov	r3, r1
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f000 8089 	beq.w	80043bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80042aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042b0:	2b28      	cmp	r3, #40	@ 0x28
 80042b2:	d86b      	bhi.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80042b4:	a201      	add	r2, pc, #4	@ (adr r2, 80042bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80042b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ba:	bf00      	nop
 80042bc:	08004395 	.word	0x08004395
 80042c0:	0800438d 	.word	0x0800438d
 80042c4:	0800438d 	.word	0x0800438d
 80042c8:	0800438d 	.word	0x0800438d
 80042cc:	0800438d 	.word	0x0800438d
 80042d0:	0800438d 	.word	0x0800438d
 80042d4:	0800438d 	.word	0x0800438d
 80042d8:	0800438d 	.word	0x0800438d
 80042dc:	08004361 	.word	0x08004361
 80042e0:	0800438d 	.word	0x0800438d
 80042e4:	0800438d 	.word	0x0800438d
 80042e8:	0800438d 	.word	0x0800438d
 80042ec:	0800438d 	.word	0x0800438d
 80042f0:	0800438d 	.word	0x0800438d
 80042f4:	0800438d 	.word	0x0800438d
 80042f8:	0800438d 	.word	0x0800438d
 80042fc:	08004377 	.word	0x08004377
 8004300:	0800438d 	.word	0x0800438d
 8004304:	0800438d 	.word	0x0800438d
 8004308:	0800438d 	.word	0x0800438d
 800430c:	0800438d 	.word	0x0800438d
 8004310:	0800438d 	.word	0x0800438d
 8004314:	0800438d 	.word	0x0800438d
 8004318:	0800438d 	.word	0x0800438d
 800431c:	08004395 	.word	0x08004395
 8004320:	0800438d 	.word	0x0800438d
 8004324:	0800438d 	.word	0x0800438d
 8004328:	0800438d 	.word	0x0800438d
 800432c:	0800438d 	.word	0x0800438d
 8004330:	0800438d 	.word	0x0800438d
 8004334:	0800438d 	.word	0x0800438d
 8004338:	0800438d 	.word	0x0800438d
 800433c:	08004395 	.word	0x08004395
 8004340:	0800438d 	.word	0x0800438d
 8004344:	0800438d 	.word	0x0800438d
 8004348:	0800438d 	.word	0x0800438d
 800434c:	0800438d 	.word	0x0800438d
 8004350:	0800438d 	.word	0x0800438d
 8004354:	0800438d 	.word	0x0800438d
 8004358:	0800438d 	.word	0x0800438d
 800435c:	08004395 	.word	0x08004395
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004364:	3308      	adds	r3, #8
 8004366:	2101      	movs	r1, #1
 8004368:	4618      	mov	r0, r3
 800436a:	f000 ffc3 	bl	80052f4 <RCCEx_PLL2_Config>
 800436e:	4603      	mov	r3, r0
 8004370:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004374:	e00f      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800437a:	3328      	adds	r3, #40	@ 0x28
 800437c:	2101      	movs	r1, #1
 800437e:	4618      	mov	r0, r3
 8004380:	f001 f86a 	bl	8005458 <RCCEx_PLL3_Config>
 8004384:	4603      	mov	r3, r0
 8004386:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800438a:	e004      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004392:	e000      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004394:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004396:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10a      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800439e:	4bbf      	ldr	r3, [pc, #764]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043a2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80043a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043ac:	4abb      	ldr	r2, [pc, #748]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043ae:	430b      	orrs	r3, r1
 80043b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80043b2:	e003      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80043bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c4:	f002 0302 	and.w	r3, r2, #2
 80043c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043cc:	2300      	movs	r3, #0
 80043ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80043d2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80043d6:	460b      	mov	r3, r1
 80043d8:	4313      	orrs	r3, r2
 80043da:	d041      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80043dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043e2:	2b05      	cmp	r3, #5
 80043e4:	d824      	bhi.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80043e6:	a201      	add	r2, pc, #4	@ (adr r2, 80043ec <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80043e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ec:	08004439 	.word	0x08004439
 80043f0:	08004405 	.word	0x08004405
 80043f4:	0800441b 	.word	0x0800441b
 80043f8:	08004439 	.word	0x08004439
 80043fc:	08004439 	.word	0x08004439
 8004400:	08004439 	.word	0x08004439
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004408:	3308      	adds	r3, #8
 800440a:	2101      	movs	r1, #1
 800440c:	4618      	mov	r0, r3
 800440e:	f000 ff71 	bl	80052f4 <RCCEx_PLL2_Config>
 8004412:	4603      	mov	r3, r0
 8004414:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004418:	e00f      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800441a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800441e:	3328      	adds	r3, #40	@ 0x28
 8004420:	2101      	movs	r1, #1
 8004422:	4618      	mov	r0, r3
 8004424:	f001 f818 	bl	8005458 <RCCEx_PLL3_Config>
 8004428:	4603      	mov	r3, r0
 800442a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800442e:	e004      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004436:	e000      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004438:	bf00      	nop
    }

    if (ret == HAL_OK)
 800443a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10a      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004442:	4b96      	ldr	r3, [pc, #600]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004446:	f023 0107 	bic.w	r1, r3, #7
 800444a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800444e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004450:	4a92      	ldr	r2, [pc, #584]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004452:	430b      	orrs	r3, r1
 8004454:	6553      	str	r3, [r2, #84]	@ 0x54
 8004456:	e003      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004458:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800445c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004468:	f002 0304 	and.w	r3, r2, #4
 800446c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004470:	2300      	movs	r3, #0
 8004472:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004476:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800447a:	460b      	mov	r3, r1
 800447c:	4313      	orrs	r3, r2
 800447e:	d044      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004484:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004488:	2b05      	cmp	r3, #5
 800448a:	d825      	bhi.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800448c:	a201      	add	r2, pc, #4	@ (adr r2, 8004494 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800448e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004492:	bf00      	nop
 8004494:	080044e1 	.word	0x080044e1
 8004498:	080044ad 	.word	0x080044ad
 800449c:	080044c3 	.word	0x080044c3
 80044a0:	080044e1 	.word	0x080044e1
 80044a4:	080044e1 	.word	0x080044e1
 80044a8:	080044e1 	.word	0x080044e1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b0:	3308      	adds	r3, #8
 80044b2:	2101      	movs	r1, #1
 80044b4:	4618      	mov	r0, r3
 80044b6:	f000 ff1d 	bl	80052f4 <RCCEx_PLL2_Config>
 80044ba:	4603      	mov	r3, r0
 80044bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80044c0:	e00f      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c6:	3328      	adds	r3, #40	@ 0x28
 80044c8:	2101      	movs	r1, #1
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 ffc4 	bl	8005458 <RCCEx_PLL3_Config>
 80044d0:	4603      	mov	r3, r0
 80044d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80044d6:	e004      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044de:	e000      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80044e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10b      	bne.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044ea:	4b6c      	ldr	r3, [pc, #432]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ee:	f023 0107 	bic.w	r1, r3, #7
 80044f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044fa:	4a68      	ldr	r2, [pc, #416]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044fc:	430b      	orrs	r3, r1
 80044fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004500:	e003      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004502:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004506:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800450a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800450e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004512:	f002 0320 	and.w	r3, r2, #32
 8004516:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800451a:	2300      	movs	r3, #0
 800451c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004520:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004524:	460b      	mov	r3, r1
 8004526:	4313      	orrs	r3, r2
 8004528:	d055      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800452a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800452e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004532:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004536:	d033      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004538:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800453c:	d82c      	bhi.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800453e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004542:	d02f      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004544:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004548:	d826      	bhi.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800454a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800454e:	d02b      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004550:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004554:	d820      	bhi.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004556:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800455a:	d012      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800455c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004560:	d81a      	bhi.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004562:	2b00      	cmp	r3, #0
 8004564:	d022      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004566:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800456a:	d115      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800456c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004570:	3308      	adds	r3, #8
 8004572:	2100      	movs	r1, #0
 8004574:	4618      	mov	r0, r3
 8004576:	f000 febd 	bl	80052f4 <RCCEx_PLL2_Config>
 800457a:	4603      	mov	r3, r0
 800457c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004580:	e015      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004586:	3328      	adds	r3, #40	@ 0x28
 8004588:	2102      	movs	r1, #2
 800458a:	4618      	mov	r0, r3
 800458c:	f000 ff64 	bl	8005458 <RCCEx_PLL3_Config>
 8004590:	4603      	mov	r3, r0
 8004592:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004596:	e00a      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800459e:	e006      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80045a0:	bf00      	nop
 80045a2:	e004      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80045a4:	bf00      	nop
 80045a6:	e002      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80045a8:	bf00      	nop
 80045aa:	e000      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80045ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10b      	bne.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045b6:	4b39      	ldr	r3, [pc, #228]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80045be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045c6:	4a35      	ldr	r2, [pc, #212]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045c8:	430b      	orrs	r3, r1
 80045ca:	6553      	str	r3, [r2, #84]	@ 0x54
 80045cc:	e003      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80045d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045de:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80045e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80045e6:	2300      	movs	r3, #0
 80045e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80045ec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80045f0:	460b      	mov	r3, r1
 80045f2:	4313      	orrs	r3, r2
 80045f4:	d058      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80045f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80045fe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004602:	d033      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004604:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004608:	d82c      	bhi.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800460a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800460e:	d02f      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004610:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004614:	d826      	bhi.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004616:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800461a:	d02b      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800461c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004620:	d820      	bhi.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004622:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004626:	d012      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004628:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800462c:	d81a      	bhi.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800462e:	2b00      	cmp	r3, #0
 8004630:	d022      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004632:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004636:	d115      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800463c:	3308      	adds	r3, #8
 800463e:	2100      	movs	r1, #0
 8004640:	4618      	mov	r0, r3
 8004642:	f000 fe57 	bl	80052f4 <RCCEx_PLL2_Config>
 8004646:	4603      	mov	r3, r0
 8004648:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800464c:	e015      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800464e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004652:	3328      	adds	r3, #40	@ 0x28
 8004654:	2102      	movs	r1, #2
 8004656:	4618      	mov	r0, r3
 8004658:	f000 fefe 	bl	8005458 <RCCEx_PLL3_Config>
 800465c:	4603      	mov	r3, r0
 800465e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004662:	e00a      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800466a:	e006      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800466c:	bf00      	nop
 800466e:	e004      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004670:	bf00      	nop
 8004672:	e002      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004674:	bf00      	nop
 8004676:	e000      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004678:	bf00      	nop
    }

    if (ret == HAL_OK)
 800467a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10e      	bne.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004682:	4b06      	ldr	r3, [pc, #24]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004686:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800468a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800468e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004692:	4a02      	ldr	r2, [pc, #8]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004694:	430b      	orrs	r3, r1
 8004696:	6593      	str	r3, [r2, #88]	@ 0x58
 8004698:	e006      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800469a:	bf00      	nop
 800469c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80046a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80046b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80046b8:	2300      	movs	r3, #0
 80046ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80046be:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80046c2:	460b      	mov	r3, r1
 80046c4:	4313      	orrs	r3, r2
 80046c6:	d055      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80046c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80046d0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80046d4:	d033      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80046d6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80046da:	d82c      	bhi.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80046dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046e0:	d02f      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80046e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046e6:	d826      	bhi.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80046e8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80046ec:	d02b      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80046ee:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80046f2:	d820      	bhi.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80046f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046f8:	d012      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80046fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046fe:	d81a      	bhi.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004700:	2b00      	cmp	r3, #0
 8004702:	d022      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004704:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004708:	d115      	bne.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800470a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800470e:	3308      	adds	r3, #8
 8004710:	2100      	movs	r1, #0
 8004712:	4618      	mov	r0, r3
 8004714:	f000 fdee 	bl	80052f4 <RCCEx_PLL2_Config>
 8004718:	4603      	mov	r3, r0
 800471a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800471e:	e015      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004724:	3328      	adds	r3, #40	@ 0x28
 8004726:	2102      	movs	r1, #2
 8004728:	4618      	mov	r0, r3
 800472a:	f000 fe95 	bl	8005458 <RCCEx_PLL3_Config>
 800472e:	4603      	mov	r3, r0
 8004730:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004734:	e00a      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800473c:	e006      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800473e:	bf00      	nop
 8004740:	e004      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004742:	bf00      	nop
 8004744:	e002      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004746:	bf00      	nop
 8004748:	e000      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800474a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800474c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10b      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004754:	4ba1      	ldr	r3, [pc, #644]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004758:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800475c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004760:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004764:	4a9d      	ldr	r2, [pc, #628]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004766:	430b      	orrs	r3, r1
 8004768:	6593      	str	r3, [r2, #88]	@ 0x58
 800476a:	e003      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800476c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004770:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477c:	f002 0308 	and.w	r3, r2, #8
 8004780:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004784:	2300      	movs	r3, #0
 8004786:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800478a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800478e:	460b      	mov	r3, r1
 8004790:	4313      	orrs	r3, r2
 8004792:	d01e      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004798:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800479c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047a0:	d10c      	bne.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80047a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a6:	3328      	adds	r3, #40	@ 0x28
 80047a8:	2102      	movs	r1, #2
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 fe54 	bl	8005458 <RCCEx_PLL3_Config>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d002      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80047bc:	4b87      	ldr	r3, [pc, #540]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047c0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047cc:	4a83      	ldr	r2, [pc, #524]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047ce:	430b      	orrs	r3, r1
 80047d0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047da:	f002 0310 	and.w	r3, r2, #16
 80047de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80047e2:	2300      	movs	r3, #0
 80047e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80047e8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80047ec:	460b      	mov	r3, r1
 80047ee:	4313      	orrs	r3, r2
 80047f0:	d01e      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80047f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047fe:	d10c      	bne.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004804:	3328      	adds	r3, #40	@ 0x28
 8004806:	2102      	movs	r1, #2
 8004808:	4618      	mov	r0, r3
 800480a:	f000 fe25 	bl	8005458 <RCCEx_PLL3_Config>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d002      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800481a:	4b70      	ldr	r3, [pc, #448]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800481c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800481e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004826:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800482a:	4a6c      	ldr	r2, [pc, #432]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800482c:	430b      	orrs	r3, r1
 800482e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004838:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800483c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004840:	2300      	movs	r3, #0
 8004842:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004846:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800484a:	460b      	mov	r3, r1
 800484c:	4313      	orrs	r3, r2
 800484e:	d03e      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004854:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004858:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800485c:	d022      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800485e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004862:	d81b      	bhi.n	800489c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004864:	2b00      	cmp	r3, #0
 8004866:	d003      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004868:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800486c:	d00b      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800486e:	e015      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004874:	3308      	adds	r3, #8
 8004876:	2100      	movs	r1, #0
 8004878:	4618      	mov	r0, r3
 800487a:	f000 fd3b 	bl	80052f4 <RCCEx_PLL2_Config>
 800487e:	4603      	mov	r3, r0
 8004880:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004884:	e00f      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800488a:	3328      	adds	r3, #40	@ 0x28
 800488c:	2102      	movs	r1, #2
 800488e:	4618      	mov	r0, r3
 8004890:	f000 fde2 	bl	8005458 <RCCEx_PLL3_Config>
 8004894:	4603      	mov	r3, r0
 8004896:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800489a:	e004      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048a2:	e000      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80048a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10b      	bne.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048ae:	4b4b      	ldr	r3, [pc, #300]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048b2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80048b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80048be:	4a47      	ldr	r2, [pc, #284]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048c0:	430b      	orrs	r3, r1
 80048c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80048c4:	e003      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80048da:	67bb      	str	r3, [r7, #120]	@ 0x78
 80048dc:	2300      	movs	r3, #0
 80048de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80048e0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80048e4:	460b      	mov	r3, r1
 80048e6:	4313      	orrs	r3, r2
 80048e8:	d03b      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80048ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80048f6:	d01f      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80048f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80048fc:	d818      	bhi.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80048fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004902:	d003      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004904:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004908:	d007      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800490a:	e011      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800490c:	4b33      	ldr	r3, [pc, #204]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800490e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004910:	4a32      	ldr	r2, [pc, #200]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004912:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004916:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004918:	e00f      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800491a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800491e:	3328      	adds	r3, #40	@ 0x28
 8004920:	2101      	movs	r1, #1
 8004922:	4618      	mov	r0, r3
 8004924:	f000 fd98 	bl	8005458 <RCCEx_PLL3_Config>
 8004928:	4603      	mov	r3, r0
 800492a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800492e:	e004      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004936:	e000      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004938:	bf00      	nop
    }

    if (ret == HAL_OK)
 800493a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10b      	bne.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004942:	4b26      	ldr	r3, [pc, #152]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004946:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800494a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800494e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004952:	4a22      	ldr	r2, [pc, #136]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004954:	430b      	orrs	r3, r1
 8004956:	6553      	str	r3, [r2, #84]	@ 0x54
 8004958:	e003      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800495a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800495e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800496e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004970:	2300      	movs	r3, #0
 8004972:	677b      	str	r3, [r7, #116]	@ 0x74
 8004974:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004978:	460b      	mov	r3, r1
 800497a:	4313      	orrs	r3, r2
 800497c:	d034      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800497e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004982:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004984:	2b00      	cmp	r3, #0
 8004986:	d003      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800498c:	d007      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800498e:	e011      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004990:	4b12      	ldr	r3, [pc, #72]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004994:	4a11      	ldr	r2, [pc, #68]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004996:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800499a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800499c:	e00e      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800499e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a2:	3308      	adds	r3, #8
 80049a4:	2102      	movs	r1, #2
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 fca4 	bl	80052f4 <RCCEx_PLL2_Config>
 80049ac:	4603      	mov	r3, r0
 80049ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80049b2:	e003      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10d      	bne.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80049c4:	4b05      	ldr	r3, [pc, #20]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049c8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80049cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049d2:	4a02      	ldr	r2, [pc, #8]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049d4:	430b      	orrs	r3, r1
 80049d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049d8:	e006      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80049da:	bf00      	nop
 80049dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80049f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049f6:	2300      	movs	r3, #0
 80049f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049fa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80049fe:	460b      	mov	r3, r1
 8004a00:	4313      	orrs	r3, r2
 8004a02:	d00c      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a08:	3328      	adds	r3, #40	@ 0x28
 8004a0a:	2102      	movs	r1, #2
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 fd23 	bl	8005458 <RCCEx_PLL3_Config>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d002      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a26:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004a2a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a30:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004a34:	460b      	mov	r3, r1
 8004a36:	4313      	orrs	r3, r2
 8004a38:	d038      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a46:	d018      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004a48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a4c:	d811      	bhi.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004a4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a52:	d014      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004a54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a58:	d80b      	bhi.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d011      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004a5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a62:	d106      	bne.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a64:	4bc3      	ldr	r3, [pc, #780]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a68:	4ac2      	ldr	r2, [pc, #776]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004a70:	e008      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a78:	e004      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004a7a:	bf00      	nop
 8004a7c:	e002      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004a7e:	bf00      	nop
 8004a80:	e000      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004a82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10b      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a8c:	4bb9      	ldr	r3, [pc, #740]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a90:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a9c:	4ab5      	ldr	r2, [pc, #724]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a9e:	430b      	orrs	r3, r1
 8004aa0:	6553      	str	r3, [r2, #84]	@ 0x54
 8004aa2:	e003      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aa8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004ab8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004aba:	2300      	movs	r3, #0
 8004abc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004abe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	d009      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ac8:	4baa      	ldr	r3, [pc, #680]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004aca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004acc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ad4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ad6:	4aa7      	ldr	r2, [pc, #668]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ad8:	430b      	orrs	r3, r1
 8004ada:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004ae8:	653b      	str	r3, [r7, #80]	@ 0x50
 8004aea:	2300      	movs	r3, #0
 8004aec:	657b      	str	r3, [r7, #84]	@ 0x54
 8004aee:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004af2:	460b      	mov	r3, r1
 8004af4:	4313      	orrs	r3, r2
 8004af6:	d00a      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004af8:	4b9e      	ldr	r3, [pc, #632]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b04:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004b08:	4a9a      	ldr	r2, [pc, #616]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b0a:	430b      	orrs	r3, r1
 8004b0c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b16:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004b1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b20:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004b24:	460b      	mov	r3, r1
 8004b26:	4313      	orrs	r3, r2
 8004b28:	d009      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b2a:	4b92      	ldr	r3, [pc, #584]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b2e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b38:	4a8e      	ldr	r2, [pc, #568]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b3a:	430b      	orrs	r3, r1
 8004b3c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b46:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004b4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b50:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004b54:	460b      	mov	r3, r1
 8004b56:	4313      	orrs	r3, r2
 8004b58:	d00e      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b5a:	4b86      	ldr	r3, [pc, #536]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	4a85      	ldr	r2, [pc, #532]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b60:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004b64:	6113      	str	r3, [r2, #16]
 8004b66:	4b83      	ldr	r3, [pc, #524]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b68:	6919      	ldr	r1, [r3, #16]
 8004b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b6e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004b72:	4a80      	ldr	r2, [pc, #512]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b74:	430b      	orrs	r3, r1
 8004b76:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b80:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004b84:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b86:	2300      	movs	r3, #0
 8004b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b8a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004b8e:	460b      	mov	r3, r1
 8004b90:	4313      	orrs	r3, r2
 8004b92:	d009      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004b94:	4b77      	ldr	r3, [pc, #476]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b98:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ba2:	4a74      	ldr	r2, [pc, #464]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ba4:	430b      	orrs	r3, r1
 8004ba6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004bb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bba:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	d00a      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004bc4:	4b6b      	ldr	r3, [pc, #428]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bc8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bd4:	4a67      	ldr	r2, [pc, #412]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bd6:	430b      	orrs	r3, r1
 8004bd8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be2:	2100      	movs	r1, #0
 8004be4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bec:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	d011      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bfa:	3308      	adds	r3, #8
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 fb78 	bl	80052f4 <RCCEx_PLL2_Config>
 8004c04:	4603      	mov	r3, r0
 8004c06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c22:	2100      	movs	r1, #0
 8004c24:	6239      	str	r1, [r7, #32]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c2c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004c30:	460b      	mov	r3, r1
 8004c32:	4313      	orrs	r3, r2
 8004c34:	d011      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c3a:	3308      	adds	r3, #8
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 fb58 	bl	80052f4 <RCCEx_PLL2_Config>
 8004c44:	4603      	mov	r3, r0
 8004c46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004c4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c62:	2100      	movs	r1, #0
 8004c64:	61b9      	str	r1, [r7, #24]
 8004c66:	f003 0304 	and.w	r3, r3, #4
 8004c6a:	61fb      	str	r3, [r7, #28]
 8004c6c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004c70:	460b      	mov	r3, r1
 8004c72:	4313      	orrs	r3, r2
 8004c74:	d011      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c7a:	3308      	adds	r3, #8
 8004c7c:	2102      	movs	r1, #2
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 fb38 	bl	80052f4 <RCCEx_PLL2_Config>
 8004c84:	4603      	mov	r3, r0
 8004c86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004c8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	6139      	str	r1, [r7, #16]
 8004ca6:	f003 0308 	and.w	r3, r3, #8
 8004caa:	617b      	str	r3, [r7, #20]
 8004cac:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	d011      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cba:	3328      	adds	r3, #40	@ 0x28
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 fbca 	bl	8005458 <RCCEx_PLL3_Config>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004cca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	f003 0310 	and.w	r3, r3, #16
 8004cea:	60fb      	str	r3, [r7, #12]
 8004cec:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	d011      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cfa:	3328      	adds	r3, #40	@ 0x28
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 fbaa 	bl	8005458 <RCCEx_PLL3_Config>
 8004d04:	4603      	mov	r3, r0
 8004d06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d22:	2100      	movs	r1, #0
 8004d24:	6039      	str	r1, [r7, #0]
 8004d26:	f003 0320 	and.w	r3, r3, #32
 8004d2a:	607b      	str	r3, [r7, #4]
 8004d2c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004d30:	460b      	mov	r3, r1
 8004d32:	4313      	orrs	r3, r2
 8004d34:	d011      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d3a:	3328      	adds	r3, #40	@ 0x28
 8004d3c:	2102      	movs	r1, #2
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 fb8a 	bl	8005458 <RCCEx_PLL3_Config>
 8004d44:	4603      	mov	r3, r0
 8004d46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d003      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004d5a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004d62:	2300      	movs	r3, #0
 8004d64:	e000      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d74:	58024400 	.word	0x58024400

08004d78 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004d7c:	f7fe fd96 	bl	80038ac <HAL_RCC_GetHCLKFreq>
 8004d80:	4602      	mov	r2, r0
 8004d82:	4b06      	ldr	r3, [pc, #24]	@ (8004d9c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	091b      	lsrs	r3, r3, #4
 8004d88:	f003 0307 	and.w	r3, r3, #7
 8004d8c:	4904      	ldr	r1, [pc, #16]	@ (8004da0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004d8e:	5ccb      	ldrb	r3, [r1, r3]
 8004d90:	f003 031f 	and.w	r3, r3, #31
 8004d94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	58024400 	.word	0x58024400
 8004da0:	0800d508 	.word	0x0800d508

08004da4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b089      	sub	sp, #36	@ 0x24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004dac:	4ba1      	ldr	r3, [pc, #644]	@ (8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db0:	f003 0303 	and.w	r3, r3, #3
 8004db4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004db6:	4b9f      	ldr	r3, [pc, #636]	@ (8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dba:	0b1b      	lsrs	r3, r3, #12
 8004dbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dc0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004dc2:	4b9c      	ldr	r3, [pc, #624]	@ (8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc6:	091b      	lsrs	r3, r3, #4
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004dce:	4b99      	ldr	r3, [pc, #612]	@ (8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dd2:	08db      	lsrs	r3, r3, #3
 8004dd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	fb02 f303 	mul.w	r3, r2, r3
 8004dde:	ee07 3a90 	vmov	s15, r3
 8004de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 8111 	beq.w	8005014 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	f000 8083 	beq.w	8004f00 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	f200 80a1 	bhi.w	8004f44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d003      	beq.n	8004e10 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d056      	beq.n	8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004e0e:	e099      	b.n	8004f44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e10:	4b88      	ldr	r3, [pc, #544]	@ (8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0320 	and.w	r3, r3, #32
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d02d      	beq.n	8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e1c:	4b85      	ldr	r3, [pc, #532]	@ (8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	08db      	lsrs	r3, r3, #3
 8004e22:	f003 0303 	and.w	r3, r3, #3
 8004e26:	4a84      	ldr	r2, [pc, #528]	@ (8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004e28:	fa22 f303 	lsr.w	r3, r2, r3
 8004e2c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	ee07 3a90 	vmov	s15, r3
 8004e34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	ee07 3a90 	vmov	s15, r3
 8004e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e46:	4b7b      	ldr	r3, [pc, #492]	@ (8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e4e:	ee07 3a90 	vmov	s15, r3
 8004e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e56:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e5a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800503c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e72:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004e76:	e087      	b.n	8004f88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	ee07 3a90 	vmov	s15, r3
 8004e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e82:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005040 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e8a:	4b6a      	ldr	r3, [pc, #424]	@ (8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e92:	ee07 3a90 	vmov	s15, r3
 8004e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e9e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800503c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004eba:	e065      	b.n	8004f88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	ee07 3a90 	vmov	s15, r3
 8004ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ec6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005044 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ece:	4b59      	ldr	r3, [pc, #356]	@ (8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ed6:	ee07 3a90 	vmov	s15, r3
 8004eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ede:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ee2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800503c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004efa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004efe:	e043      	b.n	8004f88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	ee07 3a90 	vmov	s15, r3
 8004f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f0a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005048 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f12:	4b48      	ldr	r3, [pc, #288]	@ (8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f1a:	ee07 3a90 	vmov	s15, r3
 8004f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f22:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f26:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800503c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f42:	e021      	b.n	8004f88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	ee07 3a90 	vmov	s15, r3
 8004f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f4e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005044 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f56:	4b37      	ldr	r3, [pc, #220]	@ (8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f5e:	ee07 3a90 	vmov	s15, r3
 8004f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f66:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f6a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800503c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f86:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004f88:	4b2a      	ldr	r3, [pc, #168]	@ (8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f8c:	0a5b      	lsrs	r3, r3, #9
 8004f8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f92:	ee07 3a90 	vmov	s15, r3
 8004f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fa2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004faa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fae:	ee17 2a90 	vmov	r2, s15
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004fb6:	4b1f      	ldr	r3, [pc, #124]	@ (8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fba:	0c1b      	lsrs	r3, r3, #16
 8004fbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fc0:	ee07 3a90 	vmov	s15, r3
 8004fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004fcc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fdc:	ee17 2a90 	vmov	r2, s15
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004fe4:	4b13      	ldr	r3, [pc, #76]	@ (8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe8:	0e1b      	lsrs	r3, r3, #24
 8004fea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fee:	ee07 3a90 	vmov	s15, r3
 8004ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ff6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ffa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ffe:	edd7 6a07 	vldr	s13, [r7, #28]
 8005002:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005006:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800500a:	ee17 2a90 	vmov	r2, s15
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005012:	e008      	b.n	8005026 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	609a      	str	r2, [r3, #8]
}
 8005026:	bf00      	nop
 8005028:	3724      	adds	r7, #36	@ 0x24
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	58024400 	.word	0x58024400
 8005038:	03d09000 	.word	0x03d09000
 800503c:	46000000 	.word	0x46000000
 8005040:	4c742400 	.word	0x4c742400
 8005044:	4a742400 	.word	0x4a742400
 8005048:	4bbebc20 	.word	0x4bbebc20

0800504c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800504c:	b480      	push	{r7}
 800504e:	b089      	sub	sp, #36	@ 0x24
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005054:	4ba1      	ldr	r3, [pc, #644]	@ (80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005058:	f003 0303 	and.w	r3, r3, #3
 800505c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800505e:	4b9f      	ldr	r3, [pc, #636]	@ (80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005062:	0d1b      	lsrs	r3, r3, #20
 8005064:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005068:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800506a:	4b9c      	ldr	r3, [pc, #624]	@ (80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800506c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800506e:	0a1b      	lsrs	r3, r3, #8
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005076:	4b99      	ldr	r3, [pc, #612]	@ (80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800507a:	08db      	lsrs	r3, r3, #3
 800507c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	fb02 f303 	mul.w	r3, r2, r3
 8005086:	ee07 3a90 	vmov	s15, r3
 800508a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800508e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 8111 	beq.w	80052bc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	2b02      	cmp	r3, #2
 800509e:	f000 8083 	beq.w	80051a8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	f200 80a1 	bhi.w	80051ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d003      	beq.n	80050b8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d056      	beq.n	8005164 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80050b6:	e099      	b.n	80051ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050b8:	4b88      	ldr	r3, [pc, #544]	@ (80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0320 	and.w	r3, r3, #32
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d02d      	beq.n	8005120 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050c4:	4b85      	ldr	r3, [pc, #532]	@ (80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	08db      	lsrs	r3, r3, #3
 80050ca:	f003 0303 	and.w	r3, r3, #3
 80050ce:	4a84      	ldr	r2, [pc, #528]	@ (80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80050d0:	fa22 f303 	lsr.w	r3, r2, r3
 80050d4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	ee07 3a90 	vmov	s15, r3
 80050dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	ee07 3a90 	vmov	s15, r3
 80050e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ee:	4b7b      	ldr	r3, [pc, #492]	@ (80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050f6:	ee07 3a90 	vmov	s15, r3
 80050fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005102:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80052e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800510a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800510e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800511a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800511e:	e087      	b.n	8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	ee07 3a90 	vmov	s15, r3
 8005126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800512a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80052e8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800512e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005132:	4b6a      	ldr	r3, [pc, #424]	@ (80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800513a:	ee07 3a90 	vmov	s15, r3
 800513e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005142:	ed97 6a03 	vldr	s12, [r7, #12]
 8005146:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80052e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800514a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800514e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005152:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800515a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800515e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005162:	e065      	b.n	8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	ee07 3a90 	vmov	s15, r3
 800516a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800516e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80052ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005176:	4b59      	ldr	r3, [pc, #356]	@ (80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800517e:	ee07 3a90 	vmov	s15, r3
 8005182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005186:	ed97 6a03 	vldr	s12, [r7, #12]
 800518a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80052e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800518e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005196:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800519a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800519e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051a6:	e043      	b.n	8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	ee07 3a90 	vmov	s15, r3
 80051ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051b2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80052f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80051b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ba:	4b48      	ldr	r3, [pc, #288]	@ (80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051c2:	ee07 3a90 	vmov	s15, r3
 80051c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80051ce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80052e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051ea:	e021      	b.n	8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	ee07 3a90 	vmov	s15, r3
 80051f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051f6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80052ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80051fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051fe:	4b37      	ldr	r3, [pc, #220]	@ (80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005206:	ee07 3a90 	vmov	s15, r3
 800520a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800520e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005212:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80052e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800521a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800521e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800522a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800522e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005230:	4b2a      	ldr	r3, [pc, #168]	@ (80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005234:	0a5b      	lsrs	r3, r3, #9
 8005236:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800523a:	ee07 3a90 	vmov	s15, r3
 800523e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005242:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005246:	ee37 7a87 	vadd.f32	s14, s15, s14
 800524a:	edd7 6a07 	vldr	s13, [r7, #28]
 800524e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005252:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005256:	ee17 2a90 	vmov	r2, s15
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800525e:	4b1f      	ldr	r3, [pc, #124]	@ (80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005262:	0c1b      	lsrs	r3, r3, #16
 8005264:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005268:	ee07 3a90 	vmov	s15, r3
 800526c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005270:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005274:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005278:	edd7 6a07 	vldr	s13, [r7, #28]
 800527c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005280:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005284:	ee17 2a90 	vmov	r2, s15
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800528c:	4b13      	ldr	r3, [pc, #76]	@ (80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800528e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005290:	0e1b      	lsrs	r3, r3, #24
 8005292:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005296:	ee07 3a90 	vmov	s15, r3
 800529a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800529e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80052a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80052aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052b2:	ee17 2a90 	vmov	r2, s15
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80052ba:	e008      	b.n	80052ce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	609a      	str	r2, [r3, #8]
}
 80052ce:	bf00      	nop
 80052d0:	3724      	adds	r7, #36	@ 0x24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	58024400 	.word	0x58024400
 80052e0:	03d09000 	.word	0x03d09000
 80052e4:	46000000 	.word	0x46000000
 80052e8:	4c742400 	.word	0x4c742400
 80052ec:	4a742400 	.word	0x4a742400
 80052f0:	4bbebc20 	.word	0x4bbebc20

080052f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052fe:	2300      	movs	r3, #0
 8005300:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005302:	4b53      	ldr	r3, [pc, #332]	@ (8005450 <RCCEx_PLL2_Config+0x15c>)
 8005304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005306:	f003 0303 	and.w	r3, r3, #3
 800530a:	2b03      	cmp	r3, #3
 800530c:	d101      	bne.n	8005312 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e099      	b.n	8005446 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005312:	4b4f      	ldr	r3, [pc, #316]	@ (8005450 <RCCEx_PLL2_Config+0x15c>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a4e      	ldr	r2, [pc, #312]	@ (8005450 <RCCEx_PLL2_Config+0x15c>)
 8005318:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800531c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800531e:	f7fc fa5d 	bl	80017dc <HAL_GetTick>
 8005322:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005324:	e008      	b.n	8005338 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005326:	f7fc fa59 	bl	80017dc <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	2b02      	cmp	r3, #2
 8005332:	d901      	bls.n	8005338 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e086      	b.n	8005446 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005338:	4b45      	ldr	r3, [pc, #276]	@ (8005450 <RCCEx_PLL2_Config+0x15c>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1f0      	bne.n	8005326 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005344:	4b42      	ldr	r3, [pc, #264]	@ (8005450 <RCCEx_PLL2_Config+0x15c>)
 8005346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005348:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	031b      	lsls	r3, r3, #12
 8005352:	493f      	ldr	r1, [pc, #252]	@ (8005450 <RCCEx_PLL2_Config+0x15c>)
 8005354:	4313      	orrs	r3, r2
 8005356:	628b      	str	r3, [r1, #40]	@ 0x28
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	3b01      	subs	r3, #1
 800535e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	3b01      	subs	r3, #1
 8005368:	025b      	lsls	r3, r3, #9
 800536a:	b29b      	uxth	r3, r3
 800536c:	431a      	orrs	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	3b01      	subs	r3, #1
 8005374:	041b      	lsls	r3, r3, #16
 8005376:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800537a:	431a      	orrs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	3b01      	subs	r3, #1
 8005382:	061b      	lsls	r3, r3, #24
 8005384:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005388:	4931      	ldr	r1, [pc, #196]	@ (8005450 <RCCEx_PLL2_Config+0x15c>)
 800538a:	4313      	orrs	r3, r2
 800538c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800538e:	4b30      	ldr	r3, [pc, #192]	@ (8005450 <RCCEx_PLL2_Config+0x15c>)
 8005390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005392:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	492d      	ldr	r1, [pc, #180]	@ (8005450 <RCCEx_PLL2_Config+0x15c>)
 800539c:	4313      	orrs	r3, r2
 800539e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80053a0:	4b2b      	ldr	r3, [pc, #172]	@ (8005450 <RCCEx_PLL2_Config+0x15c>)
 80053a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a4:	f023 0220 	bic.w	r2, r3, #32
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	4928      	ldr	r1, [pc, #160]	@ (8005450 <RCCEx_PLL2_Config+0x15c>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80053b2:	4b27      	ldr	r3, [pc, #156]	@ (8005450 <RCCEx_PLL2_Config+0x15c>)
 80053b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b6:	4a26      	ldr	r2, [pc, #152]	@ (8005450 <RCCEx_PLL2_Config+0x15c>)
 80053b8:	f023 0310 	bic.w	r3, r3, #16
 80053bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80053be:	4b24      	ldr	r3, [pc, #144]	@ (8005450 <RCCEx_PLL2_Config+0x15c>)
 80053c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053c2:	4b24      	ldr	r3, [pc, #144]	@ (8005454 <RCCEx_PLL2_Config+0x160>)
 80053c4:	4013      	ands	r3, r2
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	69d2      	ldr	r2, [r2, #28]
 80053ca:	00d2      	lsls	r2, r2, #3
 80053cc:	4920      	ldr	r1, [pc, #128]	@ (8005450 <RCCEx_PLL2_Config+0x15c>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80053d2:	4b1f      	ldr	r3, [pc, #124]	@ (8005450 <RCCEx_PLL2_Config+0x15c>)
 80053d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d6:	4a1e      	ldr	r2, [pc, #120]	@ (8005450 <RCCEx_PLL2_Config+0x15c>)
 80053d8:	f043 0310 	orr.w	r3, r3, #16
 80053dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d106      	bne.n	80053f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80053e4:	4b1a      	ldr	r3, [pc, #104]	@ (8005450 <RCCEx_PLL2_Config+0x15c>)
 80053e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e8:	4a19      	ldr	r2, [pc, #100]	@ (8005450 <RCCEx_PLL2_Config+0x15c>)
 80053ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80053ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80053f0:	e00f      	b.n	8005412 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d106      	bne.n	8005406 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80053f8:	4b15      	ldr	r3, [pc, #84]	@ (8005450 <RCCEx_PLL2_Config+0x15c>)
 80053fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053fc:	4a14      	ldr	r2, [pc, #80]	@ (8005450 <RCCEx_PLL2_Config+0x15c>)
 80053fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005402:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005404:	e005      	b.n	8005412 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005406:	4b12      	ldr	r3, [pc, #72]	@ (8005450 <RCCEx_PLL2_Config+0x15c>)
 8005408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540a:	4a11      	ldr	r2, [pc, #68]	@ (8005450 <RCCEx_PLL2_Config+0x15c>)
 800540c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005410:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005412:	4b0f      	ldr	r3, [pc, #60]	@ (8005450 <RCCEx_PLL2_Config+0x15c>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a0e      	ldr	r2, [pc, #56]	@ (8005450 <RCCEx_PLL2_Config+0x15c>)
 8005418:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800541c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800541e:	f7fc f9dd 	bl	80017dc <HAL_GetTick>
 8005422:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005424:	e008      	b.n	8005438 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005426:	f7fc f9d9 	bl	80017dc <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	2b02      	cmp	r3, #2
 8005432:	d901      	bls.n	8005438 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e006      	b.n	8005446 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005438:	4b05      	ldr	r3, [pc, #20]	@ (8005450 <RCCEx_PLL2_Config+0x15c>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d0f0      	beq.n	8005426 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005444:	7bfb      	ldrb	r3, [r7, #15]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	58024400 	.word	0x58024400
 8005454:	ffff0007 	.word	0xffff0007

08005458 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005462:	2300      	movs	r3, #0
 8005464:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005466:	4b53      	ldr	r3, [pc, #332]	@ (80055b4 <RCCEx_PLL3_Config+0x15c>)
 8005468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800546a:	f003 0303 	and.w	r3, r3, #3
 800546e:	2b03      	cmp	r3, #3
 8005470:	d101      	bne.n	8005476 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e099      	b.n	80055aa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005476:	4b4f      	ldr	r3, [pc, #316]	@ (80055b4 <RCCEx_PLL3_Config+0x15c>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a4e      	ldr	r2, [pc, #312]	@ (80055b4 <RCCEx_PLL3_Config+0x15c>)
 800547c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005480:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005482:	f7fc f9ab 	bl	80017dc <HAL_GetTick>
 8005486:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005488:	e008      	b.n	800549c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800548a:	f7fc f9a7 	bl	80017dc <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	2b02      	cmp	r3, #2
 8005496:	d901      	bls.n	800549c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e086      	b.n	80055aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800549c:	4b45      	ldr	r3, [pc, #276]	@ (80055b4 <RCCEx_PLL3_Config+0x15c>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1f0      	bne.n	800548a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80054a8:	4b42      	ldr	r3, [pc, #264]	@ (80055b4 <RCCEx_PLL3_Config+0x15c>)
 80054aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ac:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	051b      	lsls	r3, r3, #20
 80054b6:	493f      	ldr	r1, [pc, #252]	@ (80055b4 <RCCEx_PLL3_Config+0x15c>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	628b      	str	r3, [r1, #40]	@ 0x28
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	3b01      	subs	r3, #1
 80054c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	3b01      	subs	r3, #1
 80054cc:	025b      	lsls	r3, r3, #9
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	431a      	orrs	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	3b01      	subs	r3, #1
 80054d8:	041b      	lsls	r3, r3, #16
 80054da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80054de:	431a      	orrs	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	3b01      	subs	r3, #1
 80054e6:	061b      	lsls	r3, r3, #24
 80054e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80054ec:	4931      	ldr	r1, [pc, #196]	@ (80055b4 <RCCEx_PLL3_Config+0x15c>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80054f2:	4b30      	ldr	r3, [pc, #192]	@ (80055b4 <RCCEx_PLL3_Config+0x15c>)
 80054f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	492d      	ldr	r1, [pc, #180]	@ (80055b4 <RCCEx_PLL3_Config+0x15c>)
 8005500:	4313      	orrs	r3, r2
 8005502:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005504:	4b2b      	ldr	r3, [pc, #172]	@ (80055b4 <RCCEx_PLL3_Config+0x15c>)
 8005506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005508:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	4928      	ldr	r1, [pc, #160]	@ (80055b4 <RCCEx_PLL3_Config+0x15c>)
 8005512:	4313      	orrs	r3, r2
 8005514:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005516:	4b27      	ldr	r3, [pc, #156]	@ (80055b4 <RCCEx_PLL3_Config+0x15c>)
 8005518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800551a:	4a26      	ldr	r2, [pc, #152]	@ (80055b4 <RCCEx_PLL3_Config+0x15c>)
 800551c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005520:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005522:	4b24      	ldr	r3, [pc, #144]	@ (80055b4 <RCCEx_PLL3_Config+0x15c>)
 8005524:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005526:	4b24      	ldr	r3, [pc, #144]	@ (80055b8 <RCCEx_PLL3_Config+0x160>)
 8005528:	4013      	ands	r3, r2
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	69d2      	ldr	r2, [r2, #28]
 800552e:	00d2      	lsls	r2, r2, #3
 8005530:	4920      	ldr	r1, [pc, #128]	@ (80055b4 <RCCEx_PLL3_Config+0x15c>)
 8005532:	4313      	orrs	r3, r2
 8005534:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005536:	4b1f      	ldr	r3, [pc, #124]	@ (80055b4 <RCCEx_PLL3_Config+0x15c>)
 8005538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553a:	4a1e      	ldr	r2, [pc, #120]	@ (80055b4 <RCCEx_PLL3_Config+0x15c>)
 800553c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005540:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d106      	bne.n	8005556 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005548:	4b1a      	ldr	r3, [pc, #104]	@ (80055b4 <RCCEx_PLL3_Config+0x15c>)
 800554a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554c:	4a19      	ldr	r2, [pc, #100]	@ (80055b4 <RCCEx_PLL3_Config+0x15c>)
 800554e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005552:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005554:	e00f      	b.n	8005576 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d106      	bne.n	800556a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800555c:	4b15      	ldr	r3, [pc, #84]	@ (80055b4 <RCCEx_PLL3_Config+0x15c>)
 800555e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005560:	4a14      	ldr	r2, [pc, #80]	@ (80055b4 <RCCEx_PLL3_Config+0x15c>)
 8005562:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005566:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005568:	e005      	b.n	8005576 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800556a:	4b12      	ldr	r3, [pc, #72]	@ (80055b4 <RCCEx_PLL3_Config+0x15c>)
 800556c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556e:	4a11      	ldr	r2, [pc, #68]	@ (80055b4 <RCCEx_PLL3_Config+0x15c>)
 8005570:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005574:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005576:	4b0f      	ldr	r3, [pc, #60]	@ (80055b4 <RCCEx_PLL3_Config+0x15c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a0e      	ldr	r2, [pc, #56]	@ (80055b4 <RCCEx_PLL3_Config+0x15c>)
 800557c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005580:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005582:	f7fc f92b 	bl	80017dc <HAL_GetTick>
 8005586:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005588:	e008      	b.n	800559c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800558a:	f7fc f927 	bl	80017dc <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b02      	cmp	r3, #2
 8005596:	d901      	bls.n	800559c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e006      	b.n	80055aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800559c:	4b05      	ldr	r3, [pc, #20]	@ (80055b4 <RCCEx_PLL3_Config+0x15c>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d0f0      	beq.n	800558a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80055a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	58024400 	.word	0x58024400
 80055b8:	ffff0007 	.word	0xffff0007

080055bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e049      	b.n	8005662 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d106      	bne.n	80055e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f7fb fe5e 	bl	80012a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2202      	movs	r2, #2
 80055ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	3304      	adds	r3, #4
 80055f8:	4619      	mov	r1, r3
 80055fa:	4610      	mov	r0, r2
 80055fc:	f000 fbfc 	bl	8005df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b082      	sub	sp, #8
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d101      	bne.n	800567c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e049      	b.n	8005710 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b00      	cmp	r3, #0
 8005686:	d106      	bne.n	8005696 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f841 	bl	8005718 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2202      	movs	r2, #2
 800569a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	3304      	adds	r3, #4
 80056a6:	4619      	mov	r1, r3
 80056a8:	4610      	mov	r0, r2
 80056aa:	f000 fba5 	bl	8005df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3708      	adds	r7, #8
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005736:	2300      	movs	r3, #0
 8005738:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d109      	bne.n	8005754 <HAL_TIM_PWM_Start_IT+0x28>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b01      	cmp	r3, #1
 800574a:	bf14      	ite	ne
 800574c:	2301      	movne	r3, #1
 800574e:	2300      	moveq	r3, #0
 8005750:	b2db      	uxtb	r3, r3
 8005752:	e03c      	b.n	80057ce <HAL_TIM_PWM_Start_IT+0xa2>
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	2b04      	cmp	r3, #4
 8005758:	d109      	bne.n	800576e <HAL_TIM_PWM_Start_IT+0x42>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b01      	cmp	r3, #1
 8005764:	bf14      	ite	ne
 8005766:	2301      	movne	r3, #1
 8005768:	2300      	moveq	r3, #0
 800576a:	b2db      	uxtb	r3, r3
 800576c:	e02f      	b.n	80057ce <HAL_TIM_PWM_Start_IT+0xa2>
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	2b08      	cmp	r3, #8
 8005772:	d109      	bne.n	8005788 <HAL_TIM_PWM_Start_IT+0x5c>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b01      	cmp	r3, #1
 800577e:	bf14      	ite	ne
 8005780:	2301      	movne	r3, #1
 8005782:	2300      	moveq	r3, #0
 8005784:	b2db      	uxtb	r3, r3
 8005786:	e022      	b.n	80057ce <HAL_TIM_PWM_Start_IT+0xa2>
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	2b0c      	cmp	r3, #12
 800578c:	d109      	bne.n	80057a2 <HAL_TIM_PWM_Start_IT+0x76>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b01      	cmp	r3, #1
 8005798:	bf14      	ite	ne
 800579a:	2301      	movne	r3, #1
 800579c:	2300      	moveq	r3, #0
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	e015      	b.n	80057ce <HAL_TIM_PWM_Start_IT+0xa2>
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b10      	cmp	r3, #16
 80057a6:	d109      	bne.n	80057bc <HAL_TIM_PWM_Start_IT+0x90>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	bf14      	ite	ne
 80057b4:	2301      	movne	r3, #1
 80057b6:	2300      	moveq	r3, #0
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	e008      	b.n	80057ce <HAL_TIM_PWM_Start_IT+0xa2>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	bf14      	ite	ne
 80057c8:	2301      	movne	r3, #1
 80057ca:	2300      	moveq	r3, #0
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e0ec      	b.n	80059b0 <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d104      	bne.n	80057e6 <HAL_TIM_PWM_Start_IT+0xba>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057e4:	e023      	b.n	800582e <HAL_TIM_PWM_Start_IT+0x102>
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2b04      	cmp	r3, #4
 80057ea:	d104      	bne.n	80057f6 <HAL_TIM_PWM_Start_IT+0xca>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057f4:	e01b      	b.n	800582e <HAL_TIM_PWM_Start_IT+0x102>
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	2b08      	cmp	r3, #8
 80057fa:	d104      	bne.n	8005806 <HAL_TIM_PWM_Start_IT+0xda>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005804:	e013      	b.n	800582e <HAL_TIM_PWM_Start_IT+0x102>
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b0c      	cmp	r3, #12
 800580a:	d104      	bne.n	8005816 <HAL_TIM_PWM_Start_IT+0xea>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2202      	movs	r2, #2
 8005810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005814:	e00b      	b.n	800582e <HAL_TIM_PWM_Start_IT+0x102>
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b10      	cmp	r3, #16
 800581a:	d104      	bne.n	8005826 <HAL_TIM_PWM_Start_IT+0xfa>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2202      	movs	r2, #2
 8005820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005824:	e003      	b.n	800582e <HAL_TIM_PWM_Start_IT+0x102>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2202      	movs	r2, #2
 800582a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	2b0c      	cmp	r3, #12
 8005832:	d841      	bhi.n	80058b8 <HAL_TIM_PWM_Start_IT+0x18c>
 8005834:	a201      	add	r2, pc, #4	@ (adr r2, 800583c <HAL_TIM_PWM_Start_IT+0x110>)
 8005836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583a:	bf00      	nop
 800583c:	08005871 	.word	0x08005871
 8005840:	080058b9 	.word	0x080058b9
 8005844:	080058b9 	.word	0x080058b9
 8005848:	080058b9 	.word	0x080058b9
 800584c:	08005883 	.word	0x08005883
 8005850:	080058b9 	.word	0x080058b9
 8005854:	080058b9 	.word	0x080058b9
 8005858:	080058b9 	.word	0x080058b9
 800585c:	08005895 	.word	0x08005895
 8005860:	080058b9 	.word	0x080058b9
 8005864:	080058b9 	.word	0x080058b9
 8005868:	080058b9 	.word	0x080058b9
 800586c:	080058a7 	.word	0x080058a7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68da      	ldr	r2, [r3, #12]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f042 0202 	orr.w	r2, r2, #2
 800587e:	60da      	str	r2, [r3, #12]
      break;
 8005880:	e01d      	b.n	80058be <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68da      	ldr	r2, [r3, #12]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f042 0204 	orr.w	r2, r2, #4
 8005890:	60da      	str	r2, [r3, #12]
      break;
 8005892:	e014      	b.n	80058be <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f042 0208 	orr.w	r2, r2, #8
 80058a2:	60da      	str	r2, [r3, #12]
      break;
 80058a4:	e00b      	b.n	80058be <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68da      	ldr	r2, [r3, #12]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f042 0210 	orr.w	r2, r2, #16
 80058b4:	60da      	str	r2, [r3, #12]
      break;
 80058b6:	e002      	b.n	80058be <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	73fb      	strb	r3, [r7, #15]
      break;
 80058bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80058be:	7bfb      	ldrb	r3, [r7, #15]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d174      	bne.n	80059ae <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2201      	movs	r2, #1
 80058ca:	6839      	ldr	r1, [r7, #0]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f000 fead 	bl	800662c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a38      	ldr	r2, [pc, #224]	@ (80059b8 <HAL_TIM_PWM_Start_IT+0x28c>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d013      	beq.n	8005904 <HAL_TIM_PWM_Start_IT+0x1d8>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a36      	ldr	r2, [pc, #216]	@ (80059bc <HAL_TIM_PWM_Start_IT+0x290>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d00e      	beq.n	8005904 <HAL_TIM_PWM_Start_IT+0x1d8>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a35      	ldr	r2, [pc, #212]	@ (80059c0 <HAL_TIM_PWM_Start_IT+0x294>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d009      	beq.n	8005904 <HAL_TIM_PWM_Start_IT+0x1d8>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a33      	ldr	r2, [pc, #204]	@ (80059c4 <HAL_TIM_PWM_Start_IT+0x298>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d004      	beq.n	8005904 <HAL_TIM_PWM_Start_IT+0x1d8>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a32      	ldr	r2, [pc, #200]	@ (80059c8 <HAL_TIM_PWM_Start_IT+0x29c>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d101      	bne.n	8005908 <HAL_TIM_PWM_Start_IT+0x1dc>
 8005904:	2301      	movs	r3, #1
 8005906:	e000      	b.n	800590a <HAL_TIM_PWM_Start_IT+0x1de>
 8005908:	2300      	movs	r3, #0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d007      	beq.n	800591e <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800591c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a25      	ldr	r2, [pc, #148]	@ (80059b8 <HAL_TIM_PWM_Start_IT+0x28c>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d022      	beq.n	800596e <HAL_TIM_PWM_Start_IT+0x242>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005930:	d01d      	beq.n	800596e <HAL_TIM_PWM_Start_IT+0x242>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a25      	ldr	r2, [pc, #148]	@ (80059cc <HAL_TIM_PWM_Start_IT+0x2a0>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d018      	beq.n	800596e <HAL_TIM_PWM_Start_IT+0x242>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a23      	ldr	r2, [pc, #140]	@ (80059d0 <HAL_TIM_PWM_Start_IT+0x2a4>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d013      	beq.n	800596e <HAL_TIM_PWM_Start_IT+0x242>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a22      	ldr	r2, [pc, #136]	@ (80059d4 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d00e      	beq.n	800596e <HAL_TIM_PWM_Start_IT+0x242>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a19      	ldr	r2, [pc, #100]	@ (80059bc <HAL_TIM_PWM_Start_IT+0x290>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d009      	beq.n	800596e <HAL_TIM_PWM_Start_IT+0x242>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a1e      	ldr	r2, [pc, #120]	@ (80059d8 <HAL_TIM_PWM_Start_IT+0x2ac>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d004      	beq.n	800596e <HAL_TIM_PWM_Start_IT+0x242>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a15      	ldr	r2, [pc, #84]	@ (80059c0 <HAL_TIM_PWM_Start_IT+0x294>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d115      	bne.n	800599a <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	4b19      	ldr	r3, [pc, #100]	@ (80059dc <HAL_TIM_PWM_Start_IT+0x2b0>)
 8005976:	4013      	ands	r3, r2
 8005978:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	2b06      	cmp	r3, #6
 800597e:	d015      	beq.n	80059ac <HAL_TIM_PWM_Start_IT+0x280>
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005986:	d011      	beq.n	80059ac <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f042 0201 	orr.w	r2, r2, #1
 8005996:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005998:	e008      	b.n	80059ac <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f042 0201 	orr.w	r2, r2, #1
 80059a8:	601a      	str	r2, [r3, #0]
 80059aa:	e000      	b.n	80059ae <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ac:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80059ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	40010000 	.word	0x40010000
 80059bc:	40010400 	.word	0x40010400
 80059c0:	40014000 	.word	0x40014000
 80059c4:	40014400 	.word	0x40014400
 80059c8:	40014800 	.word	0x40014800
 80059cc:	40000400 	.word	0x40000400
 80059d0:	40000800 	.word	0x40000800
 80059d4:	40000c00 	.word	0x40000c00
 80059d8:	40001800 	.word	0x40001800
 80059dc:	00010007 	.word	0x00010007

080059e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059ec:	2300      	movs	r3, #0
 80059ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d101      	bne.n	80059fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059fa:	2302      	movs	r3, #2
 80059fc:	e0ff      	b.n	8005bfe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2b14      	cmp	r3, #20
 8005a0a:	f200 80f0 	bhi.w	8005bee <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a14:	08005a69 	.word	0x08005a69
 8005a18:	08005bef 	.word	0x08005bef
 8005a1c:	08005bef 	.word	0x08005bef
 8005a20:	08005bef 	.word	0x08005bef
 8005a24:	08005aa9 	.word	0x08005aa9
 8005a28:	08005bef 	.word	0x08005bef
 8005a2c:	08005bef 	.word	0x08005bef
 8005a30:	08005bef 	.word	0x08005bef
 8005a34:	08005aeb 	.word	0x08005aeb
 8005a38:	08005bef 	.word	0x08005bef
 8005a3c:	08005bef 	.word	0x08005bef
 8005a40:	08005bef 	.word	0x08005bef
 8005a44:	08005b2b 	.word	0x08005b2b
 8005a48:	08005bef 	.word	0x08005bef
 8005a4c:	08005bef 	.word	0x08005bef
 8005a50:	08005bef 	.word	0x08005bef
 8005a54:	08005b6d 	.word	0x08005b6d
 8005a58:	08005bef 	.word	0x08005bef
 8005a5c:	08005bef 	.word	0x08005bef
 8005a60:	08005bef 	.word	0x08005bef
 8005a64:	08005bad 	.word	0x08005bad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68b9      	ldr	r1, [r7, #8]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 fa68 	bl	8005f44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	699a      	ldr	r2, [r3, #24]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f042 0208 	orr.w	r2, r2, #8
 8005a82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	699a      	ldr	r2, [r3, #24]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f022 0204 	bic.w	r2, r2, #4
 8005a92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6999      	ldr	r1, [r3, #24]
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	691a      	ldr	r2, [r3, #16]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	619a      	str	r2, [r3, #24]
      break;
 8005aa6:	e0a5      	b.n	8005bf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68b9      	ldr	r1, [r7, #8]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 fad8 	bl	8006064 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	699a      	ldr	r2, [r3, #24]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ac2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	699a      	ldr	r2, [r3, #24]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ad2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6999      	ldr	r1, [r3, #24]
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	021a      	lsls	r2, r3, #8
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	619a      	str	r2, [r3, #24]
      break;
 8005ae8:	e084      	b.n	8005bf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68b9      	ldr	r1, [r7, #8]
 8005af0:	4618      	mov	r0, r3
 8005af2:	f000 fb41 	bl	8006178 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	69da      	ldr	r2, [r3, #28]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f042 0208 	orr.w	r2, r2, #8
 8005b04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	69da      	ldr	r2, [r3, #28]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f022 0204 	bic.w	r2, r2, #4
 8005b14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	69d9      	ldr	r1, [r3, #28]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	691a      	ldr	r2, [r3, #16]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	430a      	orrs	r2, r1
 8005b26:	61da      	str	r2, [r3, #28]
      break;
 8005b28:	e064      	b.n	8005bf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68b9      	ldr	r1, [r7, #8]
 8005b30:	4618      	mov	r0, r3
 8005b32:	f000 fba9 	bl	8006288 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	69da      	ldr	r2, [r3, #28]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	69da      	ldr	r2, [r3, #28]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	69d9      	ldr	r1, [r3, #28]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	021a      	lsls	r2, r3, #8
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	430a      	orrs	r2, r1
 8005b68:	61da      	str	r2, [r3, #28]
      break;
 8005b6a:	e043      	b.n	8005bf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68b9      	ldr	r1, [r7, #8]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 fbf2 	bl	800635c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f042 0208 	orr.w	r2, r2, #8
 8005b86:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f022 0204 	bic.w	r2, r2, #4
 8005b96:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	691a      	ldr	r2, [r3, #16]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005baa:	e023      	b.n	8005bf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68b9      	ldr	r1, [r7, #8]
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 fc36 	bl	8006424 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bc6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bd6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	021a      	lsls	r2, r3, #8
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005bec:	e002      	b.n	8005bf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	75fb      	strb	r3, [r7, #23]
      break;
 8005bf2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005bfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3718      	adds	r7, #24
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop

08005c08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c12:	2300      	movs	r3, #0
 8005c14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d101      	bne.n	8005c24 <HAL_TIM_ConfigClockSource+0x1c>
 8005c20:	2302      	movs	r3, #2
 8005c22:	e0dc      	b.n	8005dde <HAL_TIM_ConfigClockSource+0x1d6>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2202      	movs	r2, #2
 8005c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	4b6a      	ldr	r3, [pc, #424]	@ (8005de8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005c40:	4013      	ands	r3, r2
 8005c42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a64      	ldr	r2, [pc, #400]	@ (8005dec <HAL_TIM_ConfigClockSource+0x1e4>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	f000 80a9 	beq.w	8005db2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005c60:	4a62      	ldr	r2, [pc, #392]	@ (8005dec <HAL_TIM_ConfigClockSource+0x1e4>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	f200 80ae 	bhi.w	8005dc4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005c68:	4a61      	ldr	r2, [pc, #388]	@ (8005df0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	f000 80a1 	beq.w	8005db2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005c70:	4a5f      	ldr	r2, [pc, #380]	@ (8005df0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	f200 80a6 	bhi.w	8005dc4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005c78:	4a5e      	ldr	r2, [pc, #376]	@ (8005df4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	f000 8099 	beq.w	8005db2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005c80:	4a5c      	ldr	r2, [pc, #368]	@ (8005df4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	f200 809e 	bhi.w	8005dc4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005c88:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005c8c:	f000 8091 	beq.w	8005db2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005c90:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005c94:	f200 8096 	bhi.w	8005dc4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005c98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c9c:	f000 8089 	beq.w	8005db2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005ca0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ca4:	f200 808e 	bhi.w	8005dc4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ca8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cac:	d03e      	beq.n	8005d2c <HAL_TIM_ConfigClockSource+0x124>
 8005cae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cb2:	f200 8087 	bhi.w	8005dc4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005cb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cba:	f000 8086 	beq.w	8005dca <HAL_TIM_ConfigClockSource+0x1c2>
 8005cbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cc2:	d87f      	bhi.n	8005dc4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005cc4:	2b70      	cmp	r3, #112	@ 0x70
 8005cc6:	d01a      	beq.n	8005cfe <HAL_TIM_ConfigClockSource+0xf6>
 8005cc8:	2b70      	cmp	r3, #112	@ 0x70
 8005cca:	d87b      	bhi.n	8005dc4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ccc:	2b60      	cmp	r3, #96	@ 0x60
 8005cce:	d050      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0x16a>
 8005cd0:	2b60      	cmp	r3, #96	@ 0x60
 8005cd2:	d877      	bhi.n	8005dc4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005cd4:	2b50      	cmp	r3, #80	@ 0x50
 8005cd6:	d03c      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x14a>
 8005cd8:	2b50      	cmp	r3, #80	@ 0x50
 8005cda:	d873      	bhi.n	8005dc4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005cdc:	2b40      	cmp	r3, #64	@ 0x40
 8005cde:	d058      	beq.n	8005d92 <HAL_TIM_ConfigClockSource+0x18a>
 8005ce0:	2b40      	cmp	r3, #64	@ 0x40
 8005ce2:	d86f      	bhi.n	8005dc4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ce4:	2b30      	cmp	r3, #48	@ 0x30
 8005ce6:	d064      	beq.n	8005db2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005ce8:	2b30      	cmp	r3, #48	@ 0x30
 8005cea:	d86b      	bhi.n	8005dc4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005cec:	2b20      	cmp	r3, #32
 8005cee:	d060      	beq.n	8005db2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005cf0:	2b20      	cmp	r3, #32
 8005cf2:	d867      	bhi.n	8005dc4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d05c      	beq.n	8005db2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005cf8:	2b10      	cmp	r3, #16
 8005cfa:	d05a      	beq.n	8005db2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005cfc:	e062      	b.n	8005dc4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d0e:	f000 fc6d 	bl	80065ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	609a      	str	r2, [r3, #8]
      break;
 8005d2a:	e04f      	b.n	8005dcc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d3c:	f000 fc56 	bl	80065ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689a      	ldr	r2, [r3, #8]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d4e:	609a      	str	r2, [r3, #8]
      break;
 8005d50:	e03c      	b.n	8005dcc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d5e:	461a      	mov	r2, r3
 8005d60:	f000 fbc6 	bl	80064f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2150      	movs	r1, #80	@ 0x50
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 fc20 	bl	80065b0 <TIM_ITRx_SetConfig>
      break;
 8005d70:	e02c      	b.n	8005dcc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d7e:	461a      	mov	r2, r3
 8005d80:	f000 fbe5 	bl	800654e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2160      	movs	r1, #96	@ 0x60
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 fc10 	bl	80065b0 <TIM_ITRx_SetConfig>
      break;
 8005d90:	e01c      	b.n	8005dcc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d9e:	461a      	mov	r2, r3
 8005da0:	f000 fba6 	bl	80064f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2140      	movs	r1, #64	@ 0x40
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 fc00 	bl	80065b0 <TIM_ITRx_SetConfig>
      break;
 8005db0:	e00c      	b.n	8005dcc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4619      	mov	r1, r3
 8005dbc:	4610      	mov	r0, r2
 8005dbe:	f000 fbf7 	bl	80065b0 <TIM_ITRx_SetConfig>
      break;
 8005dc2:	e003      	b.n	8005dcc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8005dc8:	e000      	b.n	8005dcc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005dca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	ffceff88 	.word	0xffceff88
 8005dec:	00100040 	.word	0x00100040
 8005df0:	00100030 	.word	0x00100030
 8005df4:	00100020 	.word	0x00100020

08005df8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a46      	ldr	r2, [pc, #280]	@ (8005f24 <TIM_Base_SetConfig+0x12c>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d013      	beq.n	8005e38 <TIM_Base_SetConfig+0x40>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e16:	d00f      	beq.n	8005e38 <TIM_Base_SetConfig+0x40>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a43      	ldr	r2, [pc, #268]	@ (8005f28 <TIM_Base_SetConfig+0x130>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d00b      	beq.n	8005e38 <TIM_Base_SetConfig+0x40>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a42      	ldr	r2, [pc, #264]	@ (8005f2c <TIM_Base_SetConfig+0x134>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d007      	beq.n	8005e38 <TIM_Base_SetConfig+0x40>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a41      	ldr	r2, [pc, #260]	@ (8005f30 <TIM_Base_SetConfig+0x138>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d003      	beq.n	8005e38 <TIM_Base_SetConfig+0x40>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a40      	ldr	r2, [pc, #256]	@ (8005f34 <TIM_Base_SetConfig+0x13c>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d108      	bne.n	8005e4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a35      	ldr	r2, [pc, #212]	@ (8005f24 <TIM_Base_SetConfig+0x12c>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d01f      	beq.n	8005e92 <TIM_Base_SetConfig+0x9a>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e58:	d01b      	beq.n	8005e92 <TIM_Base_SetConfig+0x9a>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a32      	ldr	r2, [pc, #200]	@ (8005f28 <TIM_Base_SetConfig+0x130>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d017      	beq.n	8005e92 <TIM_Base_SetConfig+0x9a>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a31      	ldr	r2, [pc, #196]	@ (8005f2c <TIM_Base_SetConfig+0x134>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d013      	beq.n	8005e92 <TIM_Base_SetConfig+0x9a>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a30      	ldr	r2, [pc, #192]	@ (8005f30 <TIM_Base_SetConfig+0x138>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d00f      	beq.n	8005e92 <TIM_Base_SetConfig+0x9a>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a2f      	ldr	r2, [pc, #188]	@ (8005f34 <TIM_Base_SetConfig+0x13c>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d00b      	beq.n	8005e92 <TIM_Base_SetConfig+0x9a>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a2e      	ldr	r2, [pc, #184]	@ (8005f38 <TIM_Base_SetConfig+0x140>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d007      	beq.n	8005e92 <TIM_Base_SetConfig+0x9a>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a2d      	ldr	r2, [pc, #180]	@ (8005f3c <TIM_Base_SetConfig+0x144>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d003      	beq.n	8005e92 <TIM_Base_SetConfig+0x9a>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a2c      	ldr	r2, [pc, #176]	@ (8005f40 <TIM_Base_SetConfig+0x148>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d108      	bne.n	8005ea4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	689a      	ldr	r2, [r3, #8]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a16      	ldr	r2, [pc, #88]	@ (8005f24 <TIM_Base_SetConfig+0x12c>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d00f      	beq.n	8005ef0 <TIM_Base_SetConfig+0xf8>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a18      	ldr	r2, [pc, #96]	@ (8005f34 <TIM_Base_SetConfig+0x13c>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d00b      	beq.n	8005ef0 <TIM_Base_SetConfig+0xf8>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a17      	ldr	r2, [pc, #92]	@ (8005f38 <TIM_Base_SetConfig+0x140>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d007      	beq.n	8005ef0 <TIM_Base_SetConfig+0xf8>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a16      	ldr	r2, [pc, #88]	@ (8005f3c <TIM_Base_SetConfig+0x144>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d003      	beq.n	8005ef0 <TIM_Base_SetConfig+0xf8>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a15      	ldr	r2, [pc, #84]	@ (8005f40 <TIM_Base_SetConfig+0x148>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d103      	bne.n	8005ef8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	691a      	ldr	r2, [r3, #16]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	f003 0301 	and.w	r3, r3, #1
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d105      	bne.n	8005f16 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	f023 0201 	bic.w	r2, r3, #1
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	611a      	str	r2, [r3, #16]
  }
}
 8005f16:	bf00      	nop
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	40010000 	.word	0x40010000
 8005f28:	40000400 	.word	0x40000400
 8005f2c:	40000800 	.word	0x40000800
 8005f30:	40000c00 	.word	0x40000c00
 8005f34:	40010400 	.word	0x40010400
 8005f38:	40014000 	.word	0x40014000
 8005f3c:	40014400 	.word	0x40014400
 8005f40:	40014800 	.word	0x40014800

08005f44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b087      	sub	sp, #28
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a1b      	ldr	r3, [r3, #32]
 8005f58:	f023 0201 	bic.w	r2, r3, #1
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	4b37      	ldr	r3, [pc, #220]	@ (800604c <TIM_OC1_SetConfig+0x108>)
 8005f70:	4013      	ands	r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f023 0303 	bic.w	r3, r3, #3
 8005f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f023 0302 	bic.w	r3, r3, #2
 8005f8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a2d      	ldr	r2, [pc, #180]	@ (8006050 <TIM_OC1_SetConfig+0x10c>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d00f      	beq.n	8005fc0 <TIM_OC1_SetConfig+0x7c>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a2c      	ldr	r2, [pc, #176]	@ (8006054 <TIM_OC1_SetConfig+0x110>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d00b      	beq.n	8005fc0 <TIM_OC1_SetConfig+0x7c>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a2b      	ldr	r2, [pc, #172]	@ (8006058 <TIM_OC1_SetConfig+0x114>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d007      	beq.n	8005fc0 <TIM_OC1_SetConfig+0x7c>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a2a      	ldr	r2, [pc, #168]	@ (800605c <TIM_OC1_SetConfig+0x118>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d003      	beq.n	8005fc0 <TIM_OC1_SetConfig+0x7c>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a29      	ldr	r2, [pc, #164]	@ (8006060 <TIM_OC1_SetConfig+0x11c>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d10c      	bne.n	8005fda <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	f023 0308 	bic.w	r3, r3, #8
 8005fc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	f023 0304 	bic.w	r3, r3, #4
 8005fd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a1c      	ldr	r2, [pc, #112]	@ (8006050 <TIM_OC1_SetConfig+0x10c>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d00f      	beq.n	8006002 <TIM_OC1_SetConfig+0xbe>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a1b      	ldr	r2, [pc, #108]	@ (8006054 <TIM_OC1_SetConfig+0x110>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d00b      	beq.n	8006002 <TIM_OC1_SetConfig+0xbe>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a1a      	ldr	r2, [pc, #104]	@ (8006058 <TIM_OC1_SetConfig+0x114>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d007      	beq.n	8006002 <TIM_OC1_SetConfig+0xbe>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a19      	ldr	r2, [pc, #100]	@ (800605c <TIM_OC1_SetConfig+0x118>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d003      	beq.n	8006002 <TIM_OC1_SetConfig+0xbe>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a18      	ldr	r2, [pc, #96]	@ (8006060 <TIM_OC1_SetConfig+0x11c>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d111      	bne.n	8006026 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	4313      	orrs	r3, r2
 800601a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	4313      	orrs	r3, r2
 8006024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	685a      	ldr	r2, [r3, #4]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	697a      	ldr	r2, [r7, #20]
 800603e:	621a      	str	r2, [r3, #32]
}
 8006040:	bf00      	nop
 8006042:	371c      	adds	r7, #28
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr
 800604c:	fffeff8f 	.word	0xfffeff8f
 8006050:	40010000 	.word	0x40010000
 8006054:	40010400 	.word	0x40010400
 8006058:	40014000 	.word	0x40014000
 800605c:	40014400 	.word	0x40014400
 8006060:	40014800 	.word	0x40014800

08006064 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006064:	b480      	push	{r7}
 8006066:	b087      	sub	sp, #28
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	f023 0210 	bic.w	r2, r3, #16
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	4b34      	ldr	r3, [pc, #208]	@ (8006160 <TIM_OC2_SetConfig+0xfc>)
 8006090:	4013      	ands	r3, r2
 8006092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800609a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	021b      	lsls	r3, r3, #8
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	f023 0320 	bic.w	r3, r3, #32
 80060ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	011b      	lsls	r3, r3, #4
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a29      	ldr	r2, [pc, #164]	@ (8006164 <TIM_OC2_SetConfig+0x100>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d003      	beq.n	80060cc <TIM_OC2_SetConfig+0x68>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a28      	ldr	r2, [pc, #160]	@ (8006168 <TIM_OC2_SetConfig+0x104>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d10d      	bne.n	80060e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	011b      	lsls	r3, r3, #4
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	4313      	orrs	r3, r2
 80060de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a1e      	ldr	r2, [pc, #120]	@ (8006164 <TIM_OC2_SetConfig+0x100>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d00f      	beq.n	8006110 <TIM_OC2_SetConfig+0xac>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a1d      	ldr	r2, [pc, #116]	@ (8006168 <TIM_OC2_SetConfig+0x104>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d00b      	beq.n	8006110 <TIM_OC2_SetConfig+0xac>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a1c      	ldr	r2, [pc, #112]	@ (800616c <TIM_OC2_SetConfig+0x108>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d007      	beq.n	8006110 <TIM_OC2_SetConfig+0xac>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a1b      	ldr	r2, [pc, #108]	@ (8006170 <TIM_OC2_SetConfig+0x10c>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d003      	beq.n	8006110 <TIM_OC2_SetConfig+0xac>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a1a      	ldr	r2, [pc, #104]	@ (8006174 <TIM_OC2_SetConfig+0x110>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d113      	bne.n	8006138 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006116:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800611e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	4313      	orrs	r3, r2
 800612a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	4313      	orrs	r3, r2
 8006136:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	685a      	ldr	r2, [r3, #4]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	621a      	str	r2, [r3, #32]
}
 8006152:	bf00      	nop
 8006154:	371c      	adds	r7, #28
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	feff8fff 	.word	0xfeff8fff
 8006164:	40010000 	.word	0x40010000
 8006168:	40010400 	.word	0x40010400
 800616c:	40014000 	.word	0x40014000
 8006170:	40014400 	.word	0x40014400
 8006174:	40014800 	.word	0x40014800

08006178 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006178:	b480      	push	{r7}
 800617a:	b087      	sub	sp, #28
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a1b      	ldr	r3, [r3, #32]
 800618c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	69db      	ldr	r3, [r3, #28]
 800619e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	4b33      	ldr	r3, [pc, #204]	@ (8006270 <TIM_OC3_SetConfig+0xf8>)
 80061a4:	4013      	ands	r3, r2
 80061a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f023 0303 	bic.w	r3, r3, #3
 80061ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	021b      	lsls	r3, r3, #8
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a28      	ldr	r2, [pc, #160]	@ (8006274 <TIM_OC3_SetConfig+0xfc>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d003      	beq.n	80061de <TIM_OC3_SetConfig+0x66>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a27      	ldr	r2, [pc, #156]	@ (8006278 <TIM_OC3_SetConfig+0x100>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d10d      	bne.n	80061fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80061e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	021b      	lsls	r3, r3, #8
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80061f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a1d      	ldr	r2, [pc, #116]	@ (8006274 <TIM_OC3_SetConfig+0xfc>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d00f      	beq.n	8006222 <TIM_OC3_SetConfig+0xaa>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a1c      	ldr	r2, [pc, #112]	@ (8006278 <TIM_OC3_SetConfig+0x100>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d00b      	beq.n	8006222 <TIM_OC3_SetConfig+0xaa>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a1b      	ldr	r2, [pc, #108]	@ (800627c <TIM_OC3_SetConfig+0x104>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d007      	beq.n	8006222 <TIM_OC3_SetConfig+0xaa>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a1a      	ldr	r2, [pc, #104]	@ (8006280 <TIM_OC3_SetConfig+0x108>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d003      	beq.n	8006222 <TIM_OC3_SetConfig+0xaa>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a19      	ldr	r2, [pc, #100]	@ (8006284 <TIM_OC3_SetConfig+0x10c>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d113      	bne.n	800624a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	011b      	lsls	r3, r3, #4
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	4313      	orrs	r3, r2
 800623c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	011b      	lsls	r3, r3, #4
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	4313      	orrs	r3, r2
 8006248:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	621a      	str	r2, [r3, #32]
}
 8006264:	bf00      	nop
 8006266:	371c      	adds	r7, #28
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr
 8006270:	fffeff8f 	.word	0xfffeff8f
 8006274:	40010000 	.word	0x40010000
 8006278:	40010400 	.word	0x40010400
 800627c:	40014000 	.word	0x40014000
 8006280:	40014400 	.word	0x40014400
 8006284:	40014800 	.word	0x40014800

08006288 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006288:	b480      	push	{r7}
 800628a:	b087      	sub	sp, #28
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	4b24      	ldr	r3, [pc, #144]	@ (8006344 <TIM_OC4_SetConfig+0xbc>)
 80062b4:	4013      	ands	r3, r2
 80062b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	021b      	lsls	r3, r3, #8
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80062d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	031b      	lsls	r3, r3, #12
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	4313      	orrs	r3, r2
 80062de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a19      	ldr	r2, [pc, #100]	@ (8006348 <TIM_OC4_SetConfig+0xc0>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d00f      	beq.n	8006308 <TIM_OC4_SetConfig+0x80>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a18      	ldr	r2, [pc, #96]	@ (800634c <TIM_OC4_SetConfig+0xc4>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d00b      	beq.n	8006308 <TIM_OC4_SetConfig+0x80>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a17      	ldr	r2, [pc, #92]	@ (8006350 <TIM_OC4_SetConfig+0xc8>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d007      	beq.n	8006308 <TIM_OC4_SetConfig+0x80>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a16      	ldr	r2, [pc, #88]	@ (8006354 <TIM_OC4_SetConfig+0xcc>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d003      	beq.n	8006308 <TIM_OC4_SetConfig+0x80>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a15      	ldr	r2, [pc, #84]	@ (8006358 <TIM_OC4_SetConfig+0xd0>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d109      	bne.n	800631c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800630e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	019b      	lsls	r3, r3, #6
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	4313      	orrs	r3, r2
 800631a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	621a      	str	r2, [r3, #32]
}
 8006336:	bf00      	nop
 8006338:	371c      	adds	r7, #28
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	feff8fff 	.word	0xfeff8fff
 8006348:	40010000 	.word	0x40010000
 800634c:	40010400 	.word	0x40010400
 8006350:	40014000 	.word	0x40014000
 8006354:	40014400 	.word	0x40014400
 8006358:	40014800 	.word	0x40014800

0800635c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800635c:	b480      	push	{r7}
 800635e:	b087      	sub	sp, #28
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a1b      	ldr	r3, [r3, #32]
 8006370:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	4b21      	ldr	r3, [pc, #132]	@ (800640c <TIM_OC5_SetConfig+0xb0>)
 8006388:	4013      	ands	r3, r2
 800638a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	4313      	orrs	r3, r2
 8006394:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800639c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	041b      	lsls	r3, r3, #16
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a18      	ldr	r2, [pc, #96]	@ (8006410 <TIM_OC5_SetConfig+0xb4>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d00f      	beq.n	80063d2 <TIM_OC5_SetConfig+0x76>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a17      	ldr	r2, [pc, #92]	@ (8006414 <TIM_OC5_SetConfig+0xb8>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d00b      	beq.n	80063d2 <TIM_OC5_SetConfig+0x76>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a16      	ldr	r2, [pc, #88]	@ (8006418 <TIM_OC5_SetConfig+0xbc>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d007      	beq.n	80063d2 <TIM_OC5_SetConfig+0x76>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a15      	ldr	r2, [pc, #84]	@ (800641c <TIM_OC5_SetConfig+0xc0>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d003      	beq.n	80063d2 <TIM_OC5_SetConfig+0x76>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a14      	ldr	r2, [pc, #80]	@ (8006420 <TIM_OC5_SetConfig+0xc4>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d109      	bne.n	80063e6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	021b      	lsls	r3, r3, #8
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	685a      	ldr	r2, [r3, #4]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	621a      	str	r2, [r3, #32]
}
 8006400:	bf00      	nop
 8006402:	371c      	adds	r7, #28
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr
 800640c:	fffeff8f 	.word	0xfffeff8f
 8006410:	40010000 	.word	0x40010000
 8006414:	40010400 	.word	0x40010400
 8006418:	40014000 	.word	0x40014000
 800641c:	40014400 	.word	0x40014400
 8006420:	40014800 	.word	0x40014800

08006424 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006424:	b480      	push	{r7}
 8006426:	b087      	sub	sp, #28
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a1b      	ldr	r3, [r3, #32]
 8006438:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800644a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	4b22      	ldr	r3, [pc, #136]	@ (80064d8 <TIM_OC6_SetConfig+0xb4>)
 8006450:	4013      	ands	r3, r2
 8006452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	021b      	lsls	r3, r3, #8
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	4313      	orrs	r3, r2
 800645e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006466:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	051b      	lsls	r3, r3, #20
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	4313      	orrs	r3, r2
 8006472:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a19      	ldr	r2, [pc, #100]	@ (80064dc <TIM_OC6_SetConfig+0xb8>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d00f      	beq.n	800649c <TIM_OC6_SetConfig+0x78>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a18      	ldr	r2, [pc, #96]	@ (80064e0 <TIM_OC6_SetConfig+0xbc>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d00b      	beq.n	800649c <TIM_OC6_SetConfig+0x78>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a17      	ldr	r2, [pc, #92]	@ (80064e4 <TIM_OC6_SetConfig+0xc0>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d007      	beq.n	800649c <TIM_OC6_SetConfig+0x78>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a16      	ldr	r2, [pc, #88]	@ (80064e8 <TIM_OC6_SetConfig+0xc4>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d003      	beq.n	800649c <TIM_OC6_SetConfig+0x78>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a15      	ldr	r2, [pc, #84]	@ (80064ec <TIM_OC6_SetConfig+0xc8>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d109      	bne.n	80064b0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	029b      	lsls	r3, r3, #10
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	685a      	ldr	r2, [r3, #4]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	621a      	str	r2, [r3, #32]
}
 80064ca:	bf00      	nop
 80064cc:	371c      	adds	r7, #28
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	feff8fff 	.word	0xfeff8fff
 80064dc:	40010000 	.word	0x40010000
 80064e0:	40010400 	.word	0x40010400
 80064e4:	40014000 	.word	0x40014000
 80064e8:	40014400 	.word	0x40014400
 80064ec:	40014800 	.word	0x40014800

080064f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b087      	sub	sp, #28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6a1b      	ldr	r3, [r3, #32]
 8006500:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	f023 0201 	bic.w	r2, r3, #1
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800651a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	011b      	lsls	r3, r3, #4
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	4313      	orrs	r3, r2
 8006524:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	f023 030a 	bic.w	r3, r3, #10
 800652c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	4313      	orrs	r3, r2
 8006534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	621a      	str	r2, [r3, #32]
}
 8006542:	bf00      	nop
 8006544:	371c      	adds	r7, #28
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800654e:	b480      	push	{r7}
 8006550:	b087      	sub	sp, #28
 8006552:	af00      	add	r7, sp, #0
 8006554:	60f8      	str	r0, [r7, #12]
 8006556:	60b9      	str	r1, [r7, #8]
 8006558:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6a1b      	ldr	r3, [r3, #32]
 8006564:	f023 0210 	bic.w	r2, r3, #16
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006578:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	031b      	lsls	r3, r3, #12
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	4313      	orrs	r3, r2
 8006582:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800658a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	011b      	lsls	r3, r3, #4
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	4313      	orrs	r3, r2
 8006594:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	621a      	str	r2, [r3, #32]
}
 80065a2:	bf00      	nop
 80065a4:	371c      	adds	r7, #28
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
	...

080065b0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	4b09      	ldr	r3, [pc, #36]	@ (80065e8 <TIM_ITRx_SetConfig+0x38>)
 80065c4:	4013      	ands	r3, r2
 80065c6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065c8:	683a      	ldr	r2, [r7, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	f043 0307 	orr.w	r3, r3, #7
 80065d2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	609a      	str	r2, [r3, #8]
}
 80065da:	bf00      	nop
 80065dc:	3714      	adds	r7, #20
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	ffcfff8f 	.word	0xffcfff8f

080065ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b087      	sub	sp, #28
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
 80065f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006606:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	021a      	lsls	r2, r3, #8
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	431a      	orrs	r2, r3
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	4313      	orrs	r3, r2
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	4313      	orrs	r3, r2
 8006618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	609a      	str	r2, [r3, #8]
}
 8006620:	bf00      	nop
 8006622:	371c      	adds	r7, #28
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800662c:	b480      	push	{r7}
 800662e:	b087      	sub	sp, #28
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	f003 031f 	and.w	r3, r3, #31
 800663e:	2201      	movs	r2, #1
 8006640:	fa02 f303 	lsl.w	r3, r2, r3
 8006644:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6a1a      	ldr	r2, [r3, #32]
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	43db      	mvns	r3, r3
 800664e:	401a      	ands	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6a1a      	ldr	r2, [r3, #32]
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	f003 031f 	and.w	r3, r3, #31
 800665e:	6879      	ldr	r1, [r7, #4]
 8006660:	fa01 f303 	lsl.w	r3, r1, r3
 8006664:	431a      	orrs	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	621a      	str	r2, [r3, #32]
}
 800666a:	bf00      	nop
 800666c:	371c      	adds	r7, #28
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
	...

08006678 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006688:	2b01      	cmp	r3, #1
 800668a:	d101      	bne.n	8006690 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800668c:	2302      	movs	r3, #2
 800668e:	e06d      	b.n	800676c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2202      	movs	r2, #2
 800669c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a30      	ldr	r2, [pc, #192]	@ (8006778 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d004      	beq.n	80066c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a2f      	ldr	r2, [pc, #188]	@ (800677c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d108      	bne.n	80066d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80066ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a20      	ldr	r2, [pc, #128]	@ (8006778 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d022      	beq.n	8006740 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006702:	d01d      	beq.n	8006740 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a1d      	ldr	r2, [pc, #116]	@ (8006780 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d018      	beq.n	8006740 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a1c      	ldr	r2, [pc, #112]	@ (8006784 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d013      	beq.n	8006740 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a1a      	ldr	r2, [pc, #104]	@ (8006788 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d00e      	beq.n	8006740 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a15      	ldr	r2, [pc, #84]	@ (800677c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d009      	beq.n	8006740 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a16      	ldr	r2, [pc, #88]	@ (800678c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d004      	beq.n	8006740 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a15      	ldr	r2, [pc, #84]	@ (8006790 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d10c      	bne.n	800675a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006746:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	68ba      	ldr	r2, [r7, #8]
 800674e:	4313      	orrs	r3, r2
 8006750:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	40010000 	.word	0x40010000
 800677c:	40010400 	.word	0x40010400
 8006780:	40000400 	.word	0x40000400
 8006784:	40000800 	.word	0x40000800
 8006788:	40000c00 	.word	0x40000c00
 800678c:	40001800 	.word	0x40001800
 8006790:	40014000 	.word	0x40014000

08006794 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d101      	bne.n	80067a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e042      	b.n	800682c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d106      	bne.n	80067be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f7fa fded 	bl	8001398 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2224      	movs	r2, #36	@ 0x24
 80067c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f022 0201 	bic.w	r2, r2, #1
 80067d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d002      	beq.n	80067e4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f001 fa44 	bl	8007c6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fcd9 	bl	800719c <UART_SetConfig>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d101      	bne.n	80067f4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e01b      	b.n	800682c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	685a      	ldr	r2, [r3, #4]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006802:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	689a      	ldr	r2, [r3, #8]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006812:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f042 0201 	orr.w	r2, r2, #1
 8006822:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f001 fac3 	bl	8007db0 <UART_CheckIdleState>
 800682a:	4603      	mov	r3, r0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3708      	adds	r7, #8
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b08a      	sub	sp, #40	@ 0x28
 8006838:	af02      	add	r7, sp, #8
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	603b      	str	r3, [r7, #0]
 8006840:	4613      	mov	r3, r2
 8006842:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800684a:	2b20      	cmp	r3, #32
 800684c:	d17b      	bne.n	8006946 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d002      	beq.n	800685a <HAL_UART_Transmit+0x26>
 8006854:	88fb      	ldrh	r3, [r7, #6]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e074      	b.n	8006948 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2221      	movs	r2, #33	@ 0x21
 800686a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800686e:	f7fa ffb5 	bl	80017dc <HAL_GetTick>
 8006872:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	88fa      	ldrh	r2, [r7, #6]
 8006878:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	88fa      	ldrh	r2, [r7, #6]
 8006880:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800688c:	d108      	bne.n	80068a0 <HAL_UART_Transmit+0x6c>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d104      	bne.n	80068a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006896:	2300      	movs	r3, #0
 8006898:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	61bb      	str	r3, [r7, #24]
 800689e:	e003      	b.n	80068a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068a4:	2300      	movs	r3, #0
 80068a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80068a8:	e030      	b.n	800690c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	9300      	str	r3, [sp, #0]
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	2200      	movs	r2, #0
 80068b2:	2180      	movs	r1, #128	@ 0x80
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f001 fb25 	bl	8007f04 <UART_WaitOnFlagUntilTimeout>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d005      	beq.n	80068cc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2220      	movs	r2, #32
 80068c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e03d      	b.n	8006948 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10b      	bne.n	80068ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	881b      	ldrh	r3, [r3, #0]
 80068d6:	461a      	mov	r2, r3
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068e0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	3302      	adds	r3, #2
 80068e6:	61bb      	str	r3, [r7, #24]
 80068e8:	e007      	b.n	80068fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	781a      	ldrb	r2, [r3, #0]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	3301      	adds	r3, #1
 80068f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006900:	b29b      	uxth	r3, r3
 8006902:	3b01      	subs	r3, #1
 8006904:	b29a      	uxth	r2, r3
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006912:	b29b      	uxth	r3, r3
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1c8      	bne.n	80068aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	9300      	str	r3, [sp, #0]
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	2200      	movs	r2, #0
 8006920:	2140      	movs	r1, #64	@ 0x40
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f001 faee 	bl	8007f04 <UART_WaitOnFlagUntilTimeout>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d005      	beq.n	800693a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2220      	movs	r2, #32
 8006932:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e006      	b.n	8006948 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2220      	movs	r2, #32
 800693e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006942:	2300      	movs	r3, #0
 8006944:	e000      	b.n	8006948 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006946:	2302      	movs	r3, #2
  }
}
 8006948:	4618      	mov	r0, r3
 800694a:	3720      	adds	r7, #32
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b08a      	sub	sp, #40	@ 0x28
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	4613      	mov	r3, r2
 800695c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006964:	2b20      	cmp	r3, #32
 8006966:	d137      	bne.n	80069d8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d002      	beq.n	8006974 <HAL_UART_Receive_IT+0x24>
 800696e:	88fb      	ldrh	r3, [r7, #6]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d101      	bne.n	8006978 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e030      	b.n	80069da <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a18      	ldr	r2, [pc, #96]	@ (80069e4 <HAL_UART_Receive_IT+0x94>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d01f      	beq.n	80069c8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d018      	beq.n	80069c8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	e853 3f00 	ldrex	r3, [r3]
 80069a2:	613b      	str	r3, [r7, #16]
   return(result);
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80069aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	461a      	mov	r2, r3
 80069b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b4:	623b      	str	r3, [r7, #32]
 80069b6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b8:	69f9      	ldr	r1, [r7, #28]
 80069ba:	6a3a      	ldr	r2, [r7, #32]
 80069bc:	e841 2300 	strex	r3, r2, [r1]
 80069c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1e6      	bne.n	8006996 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80069c8:	88fb      	ldrh	r3, [r7, #6]
 80069ca:	461a      	mov	r2, r3
 80069cc:	68b9      	ldr	r1, [r7, #8]
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f001 fb06 	bl	8007fe0 <UART_Start_Receive_IT>
 80069d4:	4603      	mov	r3, r0
 80069d6:	e000      	b.n	80069da <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80069d8:	2302      	movs	r3, #2
  }
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3728      	adds	r7, #40	@ 0x28
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	58000c00 	.word	0x58000c00

080069e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b0ba      	sub	sp, #232	@ 0xe8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	69db      	ldr	r3, [r3, #28]
 80069f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006a0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006a12:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006a16:	4013      	ands	r3, r2
 8006a18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006a1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d11b      	bne.n	8006a5c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a28:	f003 0320 	and.w	r3, r3, #32
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d015      	beq.n	8006a5c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a34:	f003 0320 	and.w	r3, r3, #32
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d105      	bne.n	8006a48 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d009      	beq.n	8006a5c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f000 8377 	beq.w	8007140 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	4798      	blx	r3
      }
      return;
 8006a5a:	e371      	b.n	8007140 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006a5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 8123 	beq.w	8006cac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006a66:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006a6a:	4b8d      	ldr	r3, [pc, #564]	@ (8006ca0 <HAL_UART_IRQHandler+0x2b8>)
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d106      	bne.n	8006a80 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006a72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006a76:	4b8b      	ldr	r3, [pc, #556]	@ (8006ca4 <HAL_UART_IRQHandler+0x2bc>)
 8006a78:	4013      	ands	r3, r2
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 8116 	beq.w	8006cac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a84:	f003 0301 	and.w	r3, r3, #1
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d011      	beq.n	8006ab0 <HAL_UART_IRQHandler+0xc8>
 8006a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00b      	beq.n	8006ab0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aa6:	f043 0201 	orr.w	r2, r3, #1
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ab4:	f003 0302 	and.w	r3, r3, #2
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d011      	beq.n	8006ae0 <HAL_UART_IRQHandler+0xf8>
 8006abc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00b      	beq.n	8006ae0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2202      	movs	r2, #2
 8006ace:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ad6:	f043 0204 	orr.w	r2, r3, #4
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ae4:	f003 0304 	and.w	r3, r3, #4
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d011      	beq.n	8006b10 <HAL_UART_IRQHandler+0x128>
 8006aec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006af0:	f003 0301 	and.w	r3, r3, #1
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00b      	beq.n	8006b10 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2204      	movs	r2, #4
 8006afe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b06:	f043 0202 	orr.w	r2, r3, #2
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b14:	f003 0308 	and.w	r3, r3, #8
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d017      	beq.n	8006b4c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b20:	f003 0320 	and.w	r3, r3, #32
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d105      	bne.n	8006b34 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006b28:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006b2c:	4b5c      	ldr	r3, [pc, #368]	@ (8006ca0 <HAL_UART_IRQHandler+0x2b8>)
 8006b2e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00b      	beq.n	8006b4c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2208      	movs	r2, #8
 8006b3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b42:	f043 0208 	orr.w	r2, r3, #8
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d012      	beq.n	8006b7e <HAL_UART_IRQHandler+0x196>
 8006b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00c      	beq.n	8006b7e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b74:	f043 0220 	orr.w	r2, r3, #32
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f000 82dd 	beq.w	8007144 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b8e:	f003 0320 	and.w	r3, r3, #32
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d013      	beq.n	8006bbe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b9a:	f003 0320 	and.w	r3, r3, #32
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d105      	bne.n	8006bae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ba2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ba6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d007      	beq.n	8006bbe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d003      	beq.n	8006bbe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bc4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bd2:	2b40      	cmp	r3, #64	@ 0x40
 8006bd4:	d005      	beq.n	8006be2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006bd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006bda:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d054      	beq.n	8006c8c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f001 fb1e 	bl	8008224 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bf2:	2b40      	cmp	r3, #64	@ 0x40
 8006bf4:	d146      	bne.n	8006c84 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	3308      	adds	r3, #8
 8006bfc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006c04:	e853 3f00 	ldrex	r3, [r3]
 8006c08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006c0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	3308      	adds	r3, #8
 8006c1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006c22:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006c26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006c2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006c32:	e841 2300 	strex	r3, r2, [r1]
 8006c36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006c3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1d9      	bne.n	8006bf6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d017      	beq.n	8006c7c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c52:	4a15      	ldr	r2, [pc, #84]	@ (8006ca8 <HAL_UART_IRQHandler+0x2c0>)
 8006c54:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fb fa03 	bl	8002068 <HAL_DMA_Abort_IT>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d019      	beq.n	8006c9c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006c76:	4610      	mov	r0, r2
 8006c78:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c7a:	e00f      	b.n	8006c9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 fa77 	bl	8007170 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c82:	e00b      	b.n	8006c9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 fa73 	bl	8007170 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c8a:	e007      	b.n	8006c9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fa6f 	bl	8007170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006c9a:	e253      	b.n	8007144 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c9c:	bf00      	nop
    return;
 8006c9e:	e251      	b.n	8007144 <HAL_UART_IRQHandler+0x75c>
 8006ca0:	10000001 	.word	0x10000001
 8006ca4:	04000120 	.word	0x04000120
 8006ca8:	080082f1 	.word	0x080082f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	f040 81e7 	bne.w	8007084 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cba:	f003 0310 	and.w	r3, r3, #16
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f000 81e0 	beq.w	8007084 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cc8:	f003 0310 	and.w	r3, r3, #16
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f000 81d9 	beq.w	8007084 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2210      	movs	r2, #16
 8006cd8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ce4:	2b40      	cmp	r3, #64	@ 0x40
 8006ce6:	f040 8151 	bne.w	8006f8c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a96      	ldr	r2, [pc, #600]	@ (8006f4c <HAL_UART_IRQHandler+0x564>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d068      	beq.n	8006dca <HAL_UART_IRQHandler+0x3e2>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a93      	ldr	r2, [pc, #588]	@ (8006f50 <HAL_UART_IRQHandler+0x568>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d061      	beq.n	8006dca <HAL_UART_IRQHandler+0x3e2>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a91      	ldr	r2, [pc, #580]	@ (8006f54 <HAL_UART_IRQHandler+0x56c>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d05a      	beq.n	8006dca <HAL_UART_IRQHandler+0x3e2>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a8e      	ldr	r2, [pc, #568]	@ (8006f58 <HAL_UART_IRQHandler+0x570>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d053      	beq.n	8006dca <HAL_UART_IRQHandler+0x3e2>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a8c      	ldr	r2, [pc, #560]	@ (8006f5c <HAL_UART_IRQHandler+0x574>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d04c      	beq.n	8006dca <HAL_UART_IRQHandler+0x3e2>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a89      	ldr	r2, [pc, #548]	@ (8006f60 <HAL_UART_IRQHandler+0x578>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d045      	beq.n	8006dca <HAL_UART_IRQHandler+0x3e2>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a87      	ldr	r2, [pc, #540]	@ (8006f64 <HAL_UART_IRQHandler+0x57c>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d03e      	beq.n	8006dca <HAL_UART_IRQHandler+0x3e2>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a84      	ldr	r2, [pc, #528]	@ (8006f68 <HAL_UART_IRQHandler+0x580>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d037      	beq.n	8006dca <HAL_UART_IRQHandler+0x3e2>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a82      	ldr	r2, [pc, #520]	@ (8006f6c <HAL_UART_IRQHandler+0x584>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d030      	beq.n	8006dca <HAL_UART_IRQHandler+0x3e2>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a7f      	ldr	r2, [pc, #508]	@ (8006f70 <HAL_UART_IRQHandler+0x588>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d029      	beq.n	8006dca <HAL_UART_IRQHandler+0x3e2>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a7d      	ldr	r2, [pc, #500]	@ (8006f74 <HAL_UART_IRQHandler+0x58c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d022      	beq.n	8006dca <HAL_UART_IRQHandler+0x3e2>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a7a      	ldr	r2, [pc, #488]	@ (8006f78 <HAL_UART_IRQHandler+0x590>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d01b      	beq.n	8006dca <HAL_UART_IRQHandler+0x3e2>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a78      	ldr	r2, [pc, #480]	@ (8006f7c <HAL_UART_IRQHandler+0x594>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d014      	beq.n	8006dca <HAL_UART_IRQHandler+0x3e2>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a75      	ldr	r2, [pc, #468]	@ (8006f80 <HAL_UART_IRQHandler+0x598>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d00d      	beq.n	8006dca <HAL_UART_IRQHandler+0x3e2>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a73      	ldr	r2, [pc, #460]	@ (8006f84 <HAL_UART_IRQHandler+0x59c>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d006      	beq.n	8006dca <HAL_UART_IRQHandler+0x3e2>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a70      	ldr	r2, [pc, #448]	@ (8006f88 <HAL_UART_IRQHandler+0x5a0>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d106      	bne.n	8006dd8 <HAL_UART_IRQHandler+0x3f0>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	e005      	b.n	8006de4 <HAL_UART_IRQHandler+0x3fc>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006de8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f000 81ab 	beq.w	8007148 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006df8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	f080 81a3 	bcs.w	8007148 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e08:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e12:	69db      	ldr	r3, [r3, #28]
 8006e14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e18:	f000 8087 	beq.w	8006f2a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006e28:	e853 3f00 	ldrex	r3, [r3]
 8006e2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006e30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006e34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	461a      	mov	r2, r3
 8006e42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006e46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006e4a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006e52:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006e56:	e841 2300 	strex	r3, r2, [r1]
 8006e5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006e5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1da      	bne.n	8006e1c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	3308      	adds	r3, #8
 8006e6c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e70:	e853 3f00 	ldrex	r3, [r3]
 8006e74:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006e76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e78:	f023 0301 	bic.w	r3, r3, #1
 8006e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	3308      	adds	r3, #8
 8006e86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006e8a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006e8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e90:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006e92:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006e96:	e841 2300 	strex	r3, r2, [r1]
 8006e9a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006e9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1e1      	bne.n	8006e66 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3308      	adds	r3, #8
 8006ea8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eaa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006eac:	e853 3f00 	ldrex	r3, [r3]
 8006eb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006eb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006eb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006eb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	3308      	adds	r3, #8
 8006ec2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006ec6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006ec8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006ecc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006ece:	e841 2300 	strex	r3, r2, [r1]
 8006ed2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006ed4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d1e3      	bne.n	8006ea2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2220      	movs	r2, #32
 8006ede:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ef0:	e853 3f00 	ldrex	r3, [r3]
 8006ef4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ef6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ef8:	f023 0310 	bic.w	r3, r3, #16
 8006efc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	461a      	mov	r2, r3
 8006f06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f0c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f12:	e841 2300 	strex	r3, r2, [r1]
 8006f16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006f18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1e4      	bne.n	8006ee8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f24:	4618      	mov	r0, r3
 8006f26:	f7fa fd81 	bl	8001a2c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2202      	movs	r2, #2
 8006f2e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	4619      	mov	r1, r3
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 f91d 	bl	8007184 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f4a:	e0fd      	b.n	8007148 <HAL_UART_IRQHandler+0x760>
 8006f4c:	40020010 	.word	0x40020010
 8006f50:	40020028 	.word	0x40020028
 8006f54:	40020040 	.word	0x40020040
 8006f58:	40020058 	.word	0x40020058
 8006f5c:	40020070 	.word	0x40020070
 8006f60:	40020088 	.word	0x40020088
 8006f64:	400200a0 	.word	0x400200a0
 8006f68:	400200b8 	.word	0x400200b8
 8006f6c:	40020410 	.word	0x40020410
 8006f70:	40020428 	.word	0x40020428
 8006f74:	40020440 	.word	0x40020440
 8006f78:	40020458 	.word	0x40020458
 8006f7c:	40020470 	.word	0x40020470
 8006f80:	40020488 	.word	0x40020488
 8006f84:	400204a0 	.word	0x400204a0
 8006f88:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f000 80cf 	beq.w	800714c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8006fae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	f000 80ca 	beq.w	800714c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fc0:	e853 3f00 	ldrex	r3, [r3]
 8006fc4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fcc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006fda:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fdc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fde:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006fe0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fe2:	e841 2300 	strex	r3, r2, [r1]
 8006fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006fe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1e4      	bne.n	8006fb8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	3308      	adds	r3, #8
 8006ff4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff8:	e853 3f00 	ldrex	r3, [r3]
 8006ffc:	623b      	str	r3, [r7, #32]
   return(result);
 8006ffe:	6a3a      	ldr	r2, [r7, #32]
 8007000:	4b55      	ldr	r3, [pc, #340]	@ (8007158 <HAL_UART_IRQHandler+0x770>)
 8007002:	4013      	ands	r3, r2
 8007004:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	3308      	adds	r3, #8
 800700e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007012:	633a      	str	r2, [r7, #48]	@ 0x30
 8007014:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007016:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007018:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800701a:	e841 2300 	strex	r3, r2, [r1]
 800701e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1e3      	bne.n	8006fee <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2220      	movs	r2, #32
 800702a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	e853 3f00 	ldrex	r3, [r3]
 8007046:	60fb      	str	r3, [r7, #12]
   return(result);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f023 0310 	bic.w	r3, r3, #16
 800704e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	461a      	mov	r2, r3
 8007058:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800705c:	61fb      	str	r3, [r7, #28]
 800705e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007060:	69b9      	ldr	r1, [r7, #24]
 8007062:	69fa      	ldr	r2, [r7, #28]
 8007064:	e841 2300 	strex	r3, r2, [r1]
 8007068:	617b      	str	r3, [r7, #20]
   return(result);
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1e4      	bne.n	800703a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2202      	movs	r2, #2
 8007074:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007076:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800707a:	4619      	mov	r1, r3
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 f881 	bl	8007184 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007082:	e063      	b.n	800714c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007088:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00e      	beq.n	80070ae <HAL_UART_IRQHandler+0x6c6>
 8007090:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007094:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007098:	2b00      	cmp	r3, #0
 800709a:	d008      	beq.n	80070ae <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80070a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f001 fe80 	bl	8008dac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80070ac:	e051      	b.n	8007152 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80070ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d014      	beq.n	80070e4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80070ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d105      	bne.n	80070d2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80070c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d008      	beq.n	80070e4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d03a      	beq.n	8007150 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	4798      	blx	r3
    }
    return;
 80070e2:	e035      	b.n	8007150 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80070e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d009      	beq.n	8007104 <HAL_UART_IRQHandler+0x71c>
 80070f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d003      	beq.n	8007104 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f001 f90d 	bl	800831c <UART_EndTransmit_IT>
    return;
 8007102:	e026      	b.n	8007152 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007108:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800710c:	2b00      	cmp	r3, #0
 800710e:	d009      	beq.n	8007124 <HAL_UART_IRQHandler+0x73c>
 8007110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007114:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007118:	2b00      	cmp	r3, #0
 800711a:	d003      	beq.n	8007124 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f001 fe59 	bl	8008dd4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007122:	e016      	b.n	8007152 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007128:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d010      	beq.n	8007152 <HAL_UART_IRQHandler+0x76a>
 8007130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007134:	2b00      	cmp	r3, #0
 8007136:	da0c      	bge.n	8007152 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f001 fe41 	bl	8008dc0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800713e:	e008      	b.n	8007152 <HAL_UART_IRQHandler+0x76a>
      return;
 8007140:	bf00      	nop
 8007142:	e006      	b.n	8007152 <HAL_UART_IRQHandler+0x76a>
    return;
 8007144:	bf00      	nop
 8007146:	e004      	b.n	8007152 <HAL_UART_IRQHandler+0x76a>
      return;
 8007148:	bf00      	nop
 800714a:	e002      	b.n	8007152 <HAL_UART_IRQHandler+0x76a>
      return;
 800714c:	bf00      	nop
 800714e:	e000      	b.n	8007152 <HAL_UART_IRQHandler+0x76a>
    return;
 8007150:	bf00      	nop
  }
}
 8007152:	37e8      	adds	r7, #232	@ 0xe8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	effffffe 	.word	0xeffffffe

0800715c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007164:	bf00      	nop
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	460b      	mov	r3, r1
 800718e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800719c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071a0:	b092      	sub	sp, #72	@ 0x48
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071a6:	2300      	movs	r3, #0
 80071a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	689a      	ldr	r2, [r3, #8]
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	431a      	orrs	r2, r3
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	695b      	ldr	r3, [r3, #20]
 80071ba:	431a      	orrs	r2, r3
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	69db      	ldr	r3, [r3, #28]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	4bbe      	ldr	r3, [pc, #760]	@ (80074c4 <UART_SetConfig+0x328>)
 80071cc:	4013      	ands	r3, r2
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	6812      	ldr	r2, [r2, #0]
 80071d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80071d4:	430b      	orrs	r3, r1
 80071d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	68da      	ldr	r2, [r3, #12]
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	430a      	orrs	r2, r1
 80071ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4ab3      	ldr	r2, [pc, #716]	@ (80074c8 <UART_SetConfig+0x32c>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d004      	beq.n	8007208 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	6a1b      	ldr	r3, [r3, #32]
 8007202:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007204:	4313      	orrs	r3, r2
 8007206:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	689a      	ldr	r2, [r3, #8]
 800720e:	4baf      	ldr	r3, [pc, #700]	@ (80074cc <UART_SetConfig+0x330>)
 8007210:	4013      	ands	r3, r2
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	6812      	ldr	r2, [r2, #0]
 8007216:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007218:	430b      	orrs	r3, r1
 800721a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007222:	f023 010f 	bic.w	r1, r3, #15
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	430a      	orrs	r2, r1
 8007230:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4aa6      	ldr	r2, [pc, #664]	@ (80074d0 <UART_SetConfig+0x334>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d177      	bne.n	800732c <UART_SetConfig+0x190>
 800723c:	4ba5      	ldr	r3, [pc, #660]	@ (80074d4 <UART_SetConfig+0x338>)
 800723e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007240:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007244:	2b28      	cmp	r3, #40	@ 0x28
 8007246:	d86d      	bhi.n	8007324 <UART_SetConfig+0x188>
 8007248:	a201      	add	r2, pc, #4	@ (adr r2, 8007250 <UART_SetConfig+0xb4>)
 800724a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724e:	bf00      	nop
 8007250:	080072f5 	.word	0x080072f5
 8007254:	08007325 	.word	0x08007325
 8007258:	08007325 	.word	0x08007325
 800725c:	08007325 	.word	0x08007325
 8007260:	08007325 	.word	0x08007325
 8007264:	08007325 	.word	0x08007325
 8007268:	08007325 	.word	0x08007325
 800726c:	08007325 	.word	0x08007325
 8007270:	080072fd 	.word	0x080072fd
 8007274:	08007325 	.word	0x08007325
 8007278:	08007325 	.word	0x08007325
 800727c:	08007325 	.word	0x08007325
 8007280:	08007325 	.word	0x08007325
 8007284:	08007325 	.word	0x08007325
 8007288:	08007325 	.word	0x08007325
 800728c:	08007325 	.word	0x08007325
 8007290:	08007305 	.word	0x08007305
 8007294:	08007325 	.word	0x08007325
 8007298:	08007325 	.word	0x08007325
 800729c:	08007325 	.word	0x08007325
 80072a0:	08007325 	.word	0x08007325
 80072a4:	08007325 	.word	0x08007325
 80072a8:	08007325 	.word	0x08007325
 80072ac:	08007325 	.word	0x08007325
 80072b0:	0800730d 	.word	0x0800730d
 80072b4:	08007325 	.word	0x08007325
 80072b8:	08007325 	.word	0x08007325
 80072bc:	08007325 	.word	0x08007325
 80072c0:	08007325 	.word	0x08007325
 80072c4:	08007325 	.word	0x08007325
 80072c8:	08007325 	.word	0x08007325
 80072cc:	08007325 	.word	0x08007325
 80072d0:	08007315 	.word	0x08007315
 80072d4:	08007325 	.word	0x08007325
 80072d8:	08007325 	.word	0x08007325
 80072dc:	08007325 	.word	0x08007325
 80072e0:	08007325 	.word	0x08007325
 80072e4:	08007325 	.word	0x08007325
 80072e8:	08007325 	.word	0x08007325
 80072ec:	08007325 	.word	0x08007325
 80072f0:	0800731d 	.word	0x0800731d
 80072f4:	2301      	movs	r3, #1
 80072f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072fa:	e222      	b.n	8007742 <UART_SetConfig+0x5a6>
 80072fc:	2304      	movs	r3, #4
 80072fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007302:	e21e      	b.n	8007742 <UART_SetConfig+0x5a6>
 8007304:	2308      	movs	r3, #8
 8007306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800730a:	e21a      	b.n	8007742 <UART_SetConfig+0x5a6>
 800730c:	2310      	movs	r3, #16
 800730e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007312:	e216      	b.n	8007742 <UART_SetConfig+0x5a6>
 8007314:	2320      	movs	r3, #32
 8007316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800731a:	e212      	b.n	8007742 <UART_SetConfig+0x5a6>
 800731c:	2340      	movs	r3, #64	@ 0x40
 800731e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007322:	e20e      	b.n	8007742 <UART_SetConfig+0x5a6>
 8007324:	2380      	movs	r3, #128	@ 0x80
 8007326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800732a:	e20a      	b.n	8007742 <UART_SetConfig+0x5a6>
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a69      	ldr	r2, [pc, #420]	@ (80074d8 <UART_SetConfig+0x33c>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d130      	bne.n	8007398 <UART_SetConfig+0x1fc>
 8007336:	4b67      	ldr	r3, [pc, #412]	@ (80074d4 <UART_SetConfig+0x338>)
 8007338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800733a:	f003 0307 	and.w	r3, r3, #7
 800733e:	2b05      	cmp	r3, #5
 8007340:	d826      	bhi.n	8007390 <UART_SetConfig+0x1f4>
 8007342:	a201      	add	r2, pc, #4	@ (adr r2, 8007348 <UART_SetConfig+0x1ac>)
 8007344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007348:	08007361 	.word	0x08007361
 800734c:	08007369 	.word	0x08007369
 8007350:	08007371 	.word	0x08007371
 8007354:	08007379 	.word	0x08007379
 8007358:	08007381 	.word	0x08007381
 800735c:	08007389 	.word	0x08007389
 8007360:	2300      	movs	r3, #0
 8007362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007366:	e1ec      	b.n	8007742 <UART_SetConfig+0x5a6>
 8007368:	2304      	movs	r3, #4
 800736a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800736e:	e1e8      	b.n	8007742 <UART_SetConfig+0x5a6>
 8007370:	2308      	movs	r3, #8
 8007372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007376:	e1e4      	b.n	8007742 <UART_SetConfig+0x5a6>
 8007378:	2310      	movs	r3, #16
 800737a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800737e:	e1e0      	b.n	8007742 <UART_SetConfig+0x5a6>
 8007380:	2320      	movs	r3, #32
 8007382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007386:	e1dc      	b.n	8007742 <UART_SetConfig+0x5a6>
 8007388:	2340      	movs	r3, #64	@ 0x40
 800738a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800738e:	e1d8      	b.n	8007742 <UART_SetConfig+0x5a6>
 8007390:	2380      	movs	r3, #128	@ 0x80
 8007392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007396:	e1d4      	b.n	8007742 <UART_SetConfig+0x5a6>
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a4f      	ldr	r2, [pc, #316]	@ (80074dc <UART_SetConfig+0x340>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d130      	bne.n	8007404 <UART_SetConfig+0x268>
 80073a2:	4b4c      	ldr	r3, [pc, #304]	@ (80074d4 <UART_SetConfig+0x338>)
 80073a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073a6:	f003 0307 	and.w	r3, r3, #7
 80073aa:	2b05      	cmp	r3, #5
 80073ac:	d826      	bhi.n	80073fc <UART_SetConfig+0x260>
 80073ae:	a201      	add	r2, pc, #4	@ (adr r2, 80073b4 <UART_SetConfig+0x218>)
 80073b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b4:	080073cd 	.word	0x080073cd
 80073b8:	080073d5 	.word	0x080073d5
 80073bc:	080073dd 	.word	0x080073dd
 80073c0:	080073e5 	.word	0x080073e5
 80073c4:	080073ed 	.word	0x080073ed
 80073c8:	080073f5 	.word	0x080073f5
 80073cc:	2300      	movs	r3, #0
 80073ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073d2:	e1b6      	b.n	8007742 <UART_SetConfig+0x5a6>
 80073d4:	2304      	movs	r3, #4
 80073d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073da:	e1b2      	b.n	8007742 <UART_SetConfig+0x5a6>
 80073dc:	2308      	movs	r3, #8
 80073de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073e2:	e1ae      	b.n	8007742 <UART_SetConfig+0x5a6>
 80073e4:	2310      	movs	r3, #16
 80073e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ea:	e1aa      	b.n	8007742 <UART_SetConfig+0x5a6>
 80073ec:	2320      	movs	r3, #32
 80073ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073f2:	e1a6      	b.n	8007742 <UART_SetConfig+0x5a6>
 80073f4:	2340      	movs	r3, #64	@ 0x40
 80073f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073fa:	e1a2      	b.n	8007742 <UART_SetConfig+0x5a6>
 80073fc:	2380      	movs	r3, #128	@ 0x80
 80073fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007402:	e19e      	b.n	8007742 <UART_SetConfig+0x5a6>
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a35      	ldr	r2, [pc, #212]	@ (80074e0 <UART_SetConfig+0x344>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d130      	bne.n	8007470 <UART_SetConfig+0x2d4>
 800740e:	4b31      	ldr	r3, [pc, #196]	@ (80074d4 <UART_SetConfig+0x338>)
 8007410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007412:	f003 0307 	and.w	r3, r3, #7
 8007416:	2b05      	cmp	r3, #5
 8007418:	d826      	bhi.n	8007468 <UART_SetConfig+0x2cc>
 800741a:	a201      	add	r2, pc, #4	@ (adr r2, 8007420 <UART_SetConfig+0x284>)
 800741c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007420:	08007439 	.word	0x08007439
 8007424:	08007441 	.word	0x08007441
 8007428:	08007449 	.word	0x08007449
 800742c:	08007451 	.word	0x08007451
 8007430:	08007459 	.word	0x08007459
 8007434:	08007461 	.word	0x08007461
 8007438:	2300      	movs	r3, #0
 800743a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800743e:	e180      	b.n	8007742 <UART_SetConfig+0x5a6>
 8007440:	2304      	movs	r3, #4
 8007442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007446:	e17c      	b.n	8007742 <UART_SetConfig+0x5a6>
 8007448:	2308      	movs	r3, #8
 800744a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800744e:	e178      	b.n	8007742 <UART_SetConfig+0x5a6>
 8007450:	2310      	movs	r3, #16
 8007452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007456:	e174      	b.n	8007742 <UART_SetConfig+0x5a6>
 8007458:	2320      	movs	r3, #32
 800745a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800745e:	e170      	b.n	8007742 <UART_SetConfig+0x5a6>
 8007460:	2340      	movs	r3, #64	@ 0x40
 8007462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007466:	e16c      	b.n	8007742 <UART_SetConfig+0x5a6>
 8007468:	2380      	movs	r3, #128	@ 0x80
 800746a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800746e:	e168      	b.n	8007742 <UART_SetConfig+0x5a6>
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a1b      	ldr	r2, [pc, #108]	@ (80074e4 <UART_SetConfig+0x348>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d142      	bne.n	8007500 <UART_SetConfig+0x364>
 800747a:	4b16      	ldr	r3, [pc, #88]	@ (80074d4 <UART_SetConfig+0x338>)
 800747c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800747e:	f003 0307 	and.w	r3, r3, #7
 8007482:	2b05      	cmp	r3, #5
 8007484:	d838      	bhi.n	80074f8 <UART_SetConfig+0x35c>
 8007486:	a201      	add	r2, pc, #4	@ (adr r2, 800748c <UART_SetConfig+0x2f0>)
 8007488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748c:	080074a5 	.word	0x080074a5
 8007490:	080074ad 	.word	0x080074ad
 8007494:	080074b5 	.word	0x080074b5
 8007498:	080074bd 	.word	0x080074bd
 800749c:	080074e9 	.word	0x080074e9
 80074a0:	080074f1 	.word	0x080074f1
 80074a4:	2300      	movs	r3, #0
 80074a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074aa:	e14a      	b.n	8007742 <UART_SetConfig+0x5a6>
 80074ac:	2304      	movs	r3, #4
 80074ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074b2:	e146      	b.n	8007742 <UART_SetConfig+0x5a6>
 80074b4:	2308      	movs	r3, #8
 80074b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ba:	e142      	b.n	8007742 <UART_SetConfig+0x5a6>
 80074bc:	2310      	movs	r3, #16
 80074be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074c2:	e13e      	b.n	8007742 <UART_SetConfig+0x5a6>
 80074c4:	cfff69f3 	.word	0xcfff69f3
 80074c8:	58000c00 	.word	0x58000c00
 80074cc:	11fff4ff 	.word	0x11fff4ff
 80074d0:	40011000 	.word	0x40011000
 80074d4:	58024400 	.word	0x58024400
 80074d8:	40004400 	.word	0x40004400
 80074dc:	40004800 	.word	0x40004800
 80074e0:	40004c00 	.word	0x40004c00
 80074e4:	40005000 	.word	0x40005000
 80074e8:	2320      	movs	r3, #32
 80074ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ee:	e128      	b.n	8007742 <UART_SetConfig+0x5a6>
 80074f0:	2340      	movs	r3, #64	@ 0x40
 80074f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074f6:	e124      	b.n	8007742 <UART_SetConfig+0x5a6>
 80074f8:	2380      	movs	r3, #128	@ 0x80
 80074fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074fe:	e120      	b.n	8007742 <UART_SetConfig+0x5a6>
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4acb      	ldr	r2, [pc, #812]	@ (8007834 <UART_SetConfig+0x698>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d176      	bne.n	80075f8 <UART_SetConfig+0x45c>
 800750a:	4bcb      	ldr	r3, [pc, #812]	@ (8007838 <UART_SetConfig+0x69c>)
 800750c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800750e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007512:	2b28      	cmp	r3, #40	@ 0x28
 8007514:	d86c      	bhi.n	80075f0 <UART_SetConfig+0x454>
 8007516:	a201      	add	r2, pc, #4	@ (adr r2, 800751c <UART_SetConfig+0x380>)
 8007518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800751c:	080075c1 	.word	0x080075c1
 8007520:	080075f1 	.word	0x080075f1
 8007524:	080075f1 	.word	0x080075f1
 8007528:	080075f1 	.word	0x080075f1
 800752c:	080075f1 	.word	0x080075f1
 8007530:	080075f1 	.word	0x080075f1
 8007534:	080075f1 	.word	0x080075f1
 8007538:	080075f1 	.word	0x080075f1
 800753c:	080075c9 	.word	0x080075c9
 8007540:	080075f1 	.word	0x080075f1
 8007544:	080075f1 	.word	0x080075f1
 8007548:	080075f1 	.word	0x080075f1
 800754c:	080075f1 	.word	0x080075f1
 8007550:	080075f1 	.word	0x080075f1
 8007554:	080075f1 	.word	0x080075f1
 8007558:	080075f1 	.word	0x080075f1
 800755c:	080075d1 	.word	0x080075d1
 8007560:	080075f1 	.word	0x080075f1
 8007564:	080075f1 	.word	0x080075f1
 8007568:	080075f1 	.word	0x080075f1
 800756c:	080075f1 	.word	0x080075f1
 8007570:	080075f1 	.word	0x080075f1
 8007574:	080075f1 	.word	0x080075f1
 8007578:	080075f1 	.word	0x080075f1
 800757c:	080075d9 	.word	0x080075d9
 8007580:	080075f1 	.word	0x080075f1
 8007584:	080075f1 	.word	0x080075f1
 8007588:	080075f1 	.word	0x080075f1
 800758c:	080075f1 	.word	0x080075f1
 8007590:	080075f1 	.word	0x080075f1
 8007594:	080075f1 	.word	0x080075f1
 8007598:	080075f1 	.word	0x080075f1
 800759c:	080075e1 	.word	0x080075e1
 80075a0:	080075f1 	.word	0x080075f1
 80075a4:	080075f1 	.word	0x080075f1
 80075a8:	080075f1 	.word	0x080075f1
 80075ac:	080075f1 	.word	0x080075f1
 80075b0:	080075f1 	.word	0x080075f1
 80075b4:	080075f1 	.word	0x080075f1
 80075b8:	080075f1 	.word	0x080075f1
 80075bc:	080075e9 	.word	0x080075e9
 80075c0:	2301      	movs	r3, #1
 80075c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075c6:	e0bc      	b.n	8007742 <UART_SetConfig+0x5a6>
 80075c8:	2304      	movs	r3, #4
 80075ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ce:	e0b8      	b.n	8007742 <UART_SetConfig+0x5a6>
 80075d0:	2308      	movs	r3, #8
 80075d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075d6:	e0b4      	b.n	8007742 <UART_SetConfig+0x5a6>
 80075d8:	2310      	movs	r3, #16
 80075da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075de:	e0b0      	b.n	8007742 <UART_SetConfig+0x5a6>
 80075e0:	2320      	movs	r3, #32
 80075e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075e6:	e0ac      	b.n	8007742 <UART_SetConfig+0x5a6>
 80075e8:	2340      	movs	r3, #64	@ 0x40
 80075ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ee:	e0a8      	b.n	8007742 <UART_SetConfig+0x5a6>
 80075f0:	2380      	movs	r3, #128	@ 0x80
 80075f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075f6:	e0a4      	b.n	8007742 <UART_SetConfig+0x5a6>
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a8f      	ldr	r2, [pc, #572]	@ (800783c <UART_SetConfig+0x6a0>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d130      	bne.n	8007664 <UART_SetConfig+0x4c8>
 8007602:	4b8d      	ldr	r3, [pc, #564]	@ (8007838 <UART_SetConfig+0x69c>)
 8007604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007606:	f003 0307 	and.w	r3, r3, #7
 800760a:	2b05      	cmp	r3, #5
 800760c:	d826      	bhi.n	800765c <UART_SetConfig+0x4c0>
 800760e:	a201      	add	r2, pc, #4	@ (adr r2, 8007614 <UART_SetConfig+0x478>)
 8007610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007614:	0800762d 	.word	0x0800762d
 8007618:	08007635 	.word	0x08007635
 800761c:	0800763d 	.word	0x0800763d
 8007620:	08007645 	.word	0x08007645
 8007624:	0800764d 	.word	0x0800764d
 8007628:	08007655 	.word	0x08007655
 800762c:	2300      	movs	r3, #0
 800762e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007632:	e086      	b.n	8007742 <UART_SetConfig+0x5a6>
 8007634:	2304      	movs	r3, #4
 8007636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800763a:	e082      	b.n	8007742 <UART_SetConfig+0x5a6>
 800763c:	2308      	movs	r3, #8
 800763e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007642:	e07e      	b.n	8007742 <UART_SetConfig+0x5a6>
 8007644:	2310      	movs	r3, #16
 8007646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800764a:	e07a      	b.n	8007742 <UART_SetConfig+0x5a6>
 800764c:	2320      	movs	r3, #32
 800764e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007652:	e076      	b.n	8007742 <UART_SetConfig+0x5a6>
 8007654:	2340      	movs	r3, #64	@ 0x40
 8007656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800765a:	e072      	b.n	8007742 <UART_SetConfig+0x5a6>
 800765c:	2380      	movs	r3, #128	@ 0x80
 800765e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007662:	e06e      	b.n	8007742 <UART_SetConfig+0x5a6>
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a75      	ldr	r2, [pc, #468]	@ (8007840 <UART_SetConfig+0x6a4>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d130      	bne.n	80076d0 <UART_SetConfig+0x534>
 800766e:	4b72      	ldr	r3, [pc, #456]	@ (8007838 <UART_SetConfig+0x69c>)
 8007670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007672:	f003 0307 	and.w	r3, r3, #7
 8007676:	2b05      	cmp	r3, #5
 8007678:	d826      	bhi.n	80076c8 <UART_SetConfig+0x52c>
 800767a:	a201      	add	r2, pc, #4	@ (adr r2, 8007680 <UART_SetConfig+0x4e4>)
 800767c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007680:	08007699 	.word	0x08007699
 8007684:	080076a1 	.word	0x080076a1
 8007688:	080076a9 	.word	0x080076a9
 800768c:	080076b1 	.word	0x080076b1
 8007690:	080076b9 	.word	0x080076b9
 8007694:	080076c1 	.word	0x080076c1
 8007698:	2300      	movs	r3, #0
 800769a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800769e:	e050      	b.n	8007742 <UART_SetConfig+0x5a6>
 80076a0:	2304      	movs	r3, #4
 80076a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076a6:	e04c      	b.n	8007742 <UART_SetConfig+0x5a6>
 80076a8:	2308      	movs	r3, #8
 80076aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ae:	e048      	b.n	8007742 <UART_SetConfig+0x5a6>
 80076b0:	2310      	movs	r3, #16
 80076b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076b6:	e044      	b.n	8007742 <UART_SetConfig+0x5a6>
 80076b8:	2320      	movs	r3, #32
 80076ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076be:	e040      	b.n	8007742 <UART_SetConfig+0x5a6>
 80076c0:	2340      	movs	r3, #64	@ 0x40
 80076c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076c6:	e03c      	b.n	8007742 <UART_SetConfig+0x5a6>
 80076c8:	2380      	movs	r3, #128	@ 0x80
 80076ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ce:	e038      	b.n	8007742 <UART_SetConfig+0x5a6>
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a5b      	ldr	r2, [pc, #364]	@ (8007844 <UART_SetConfig+0x6a8>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d130      	bne.n	800773c <UART_SetConfig+0x5a0>
 80076da:	4b57      	ldr	r3, [pc, #348]	@ (8007838 <UART_SetConfig+0x69c>)
 80076dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076de:	f003 0307 	and.w	r3, r3, #7
 80076e2:	2b05      	cmp	r3, #5
 80076e4:	d826      	bhi.n	8007734 <UART_SetConfig+0x598>
 80076e6:	a201      	add	r2, pc, #4	@ (adr r2, 80076ec <UART_SetConfig+0x550>)
 80076e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ec:	08007705 	.word	0x08007705
 80076f0:	0800770d 	.word	0x0800770d
 80076f4:	08007715 	.word	0x08007715
 80076f8:	0800771d 	.word	0x0800771d
 80076fc:	08007725 	.word	0x08007725
 8007700:	0800772d 	.word	0x0800772d
 8007704:	2302      	movs	r3, #2
 8007706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800770a:	e01a      	b.n	8007742 <UART_SetConfig+0x5a6>
 800770c:	2304      	movs	r3, #4
 800770e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007712:	e016      	b.n	8007742 <UART_SetConfig+0x5a6>
 8007714:	2308      	movs	r3, #8
 8007716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800771a:	e012      	b.n	8007742 <UART_SetConfig+0x5a6>
 800771c:	2310      	movs	r3, #16
 800771e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007722:	e00e      	b.n	8007742 <UART_SetConfig+0x5a6>
 8007724:	2320      	movs	r3, #32
 8007726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800772a:	e00a      	b.n	8007742 <UART_SetConfig+0x5a6>
 800772c:	2340      	movs	r3, #64	@ 0x40
 800772e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007732:	e006      	b.n	8007742 <UART_SetConfig+0x5a6>
 8007734:	2380      	movs	r3, #128	@ 0x80
 8007736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800773a:	e002      	b.n	8007742 <UART_SetConfig+0x5a6>
 800773c:	2380      	movs	r3, #128	@ 0x80
 800773e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a3f      	ldr	r2, [pc, #252]	@ (8007844 <UART_SetConfig+0x6a8>)
 8007748:	4293      	cmp	r3, r2
 800774a:	f040 80f8 	bne.w	800793e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800774e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007752:	2b20      	cmp	r3, #32
 8007754:	dc46      	bgt.n	80077e4 <UART_SetConfig+0x648>
 8007756:	2b02      	cmp	r3, #2
 8007758:	f2c0 8082 	blt.w	8007860 <UART_SetConfig+0x6c4>
 800775c:	3b02      	subs	r3, #2
 800775e:	2b1e      	cmp	r3, #30
 8007760:	d87e      	bhi.n	8007860 <UART_SetConfig+0x6c4>
 8007762:	a201      	add	r2, pc, #4	@ (adr r2, 8007768 <UART_SetConfig+0x5cc>)
 8007764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007768:	080077eb 	.word	0x080077eb
 800776c:	08007861 	.word	0x08007861
 8007770:	080077f3 	.word	0x080077f3
 8007774:	08007861 	.word	0x08007861
 8007778:	08007861 	.word	0x08007861
 800777c:	08007861 	.word	0x08007861
 8007780:	08007803 	.word	0x08007803
 8007784:	08007861 	.word	0x08007861
 8007788:	08007861 	.word	0x08007861
 800778c:	08007861 	.word	0x08007861
 8007790:	08007861 	.word	0x08007861
 8007794:	08007861 	.word	0x08007861
 8007798:	08007861 	.word	0x08007861
 800779c:	08007861 	.word	0x08007861
 80077a0:	08007813 	.word	0x08007813
 80077a4:	08007861 	.word	0x08007861
 80077a8:	08007861 	.word	0x08007861
 80077ac:	08007861 	.word	0x08007861
 80077b0:	08007861 	.word	0x08007861
 80077b4:	08007861 	.word	0x08007861
 80077b8:	08007861 	.word	0x08007861
 80077bc:	08007861 	.word	0x08007861
 80077c0:	08007861 	.word	0x08007861
 80077c4:	08007861 	.word	0x08007861
 80077c8:	08007861 	.word	0x08007861
 80077cc:	08007861 	.word	0x08007861
 80077d0:	08007861 	.word	0x08007861
 80077d4:	08007861 	.word	0x08007861
 80077d8:	08007861 	.word	0x08007861
 80077dc:	08007861 	.word	0x08007861
 80077e0:	08007853 	.word	0x08007853
 80077e4:	2b40      	cmp	r3, #64	@ 0x40
 80077e6:	d037      	beq.n	8007858 <UART_SetConfig+0x6bc>
 80077e8:	e03a      	b.n	8007860 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80077ea:	f7fd fac5 	bl	8004d78 <HAL_RCCEx_GetD3PCLK1Freq>
 80077ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80077f0:	e03c      	b.n	800786c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7fd fad4 	bl	8004da4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80077fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007800:	e034      	b.n	800786c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007802:	f107 0318 	add.w	r3, r7, #24
 8007806:	4618      	mov	r0, r3
 8007808:	f7fd fc20 	bl	800504c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007810:	e02c      	b.n	800786c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007812:	4b09      	ldr	r3, [pc, #36]	@ (8007838 <UART_SetConfig+0x69c>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f003 0320 	and.w	r3, r3, #32
 800781a:	2b00      	cmp	r3, #0
 800781c:	d016      	beq.n	800784c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800781e:	4b06      	ldr	r3, [pc, #24]	@ (8007838 <UART_SetConfig+0x69c>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	08db      	lsrs	r3, r3, #3
 8007824:	f003 0303 	and.w	r3, r3, #3
 8007828:	4a07      	ldr	r2, [pc, #28]	@ (8007848 <UART_SetConfig+0x6ac>)
 800782a:	fa22 f303 	lsr.w	r3, r2, r3
 800782e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007830:	e01c      	b.n	800786c <UART_SetConfig+0x6d0>
 8007832:	bf00      	nop
 8007834:	40011400 	.word	0x40011400
 8007838:	58024400 	.word	0x58024400
 800783c:	40007800 	.word	0x40007800
 8007840:	40007c00 	.word	0x40007c00
 8007844:	58000c00 	.word	0x58000c00
 8007848:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800784c:	4b9d      	ldr	r3, [pc, #628]	@ (8007ac4 <UART_SetConfig+0x928>)
 800784e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007850:	e00c      	b.n	800786c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007852:	4b9d      	ldr	r3, [pc, #628]	@ (8007ac8 <UART_SetConfig+0x92c>)
 8007854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007856:	e009      	b.n	800786c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007858:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800785c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800785e:	e005      	b.n	800786c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007860:	2300      	movs	r3, #0
 8007862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800786a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800786c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800786e:	2b00      	cmp	r3, #0
 8007870:	f000 81de 	beq.w	8007c30 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007878:	4a94      	ldr	r2, [pc, #592]	@ (8007acc <UART_SetConfig+0x930>)
 800787a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800787e:	461a      	mov	r2, r3
 8007880:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007882:	fbb3 f3f2 	udiv	r3, r3, r2
 8007886:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	4613      	mov	r3, r2
 800788e:	005b      	lsls	r3, r3, #1
 8007890:	4413      	add	r3, r2
 8007892:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007894:	429a      	cmp	r2, r3
 8007896:	d305      	bcc.n	80078a4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800789e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d903      	bls.n	80078ac <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80078aa:	e1c1      	b.n	8007c30 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078ae:	2200      	movs	r2, #0
 80078b0:	60bb      	str	r3, [r7, #8]
 80078b2:	60fa      	str	r2, [r7, #12]
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078b8:	4a84      	ldr	r2, [pc, #528]	@ (8007acc <UART_SetConfig+0x930>)
 80078ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078be:	b29b      	uxth	r3, r3
 80078c0:	2200      	movs	r2, #0
 80078c2:	603b      	str	r3, [r7, #0]
 80078c4:	607a      	str	r2, [r7, #4]
 80078c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80078ce:	f7f8 ff1b 	bl	8000708 <__aeabi_uldivmod>
 80078d2:	4602      	mov	r2, r0
 80078d4:	460b      	mov	r3, r1
 80078d6:	4610      	mov	r0, r2
 80078d8:	4619      	mov	r1, r3
 80078da:	f04f 0200 	mov.w	r2, #0
 80078de:	f04f 0300 	mov.w	r3, #0
 80078e2:	020b      	lsls	r3, r1, #8
 80078e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80078e8:	0202      	lsls	r2, r0, #8
 80078ea:	6979      	ldr	r1, [r7, #20]
 80078ec:	6849      	ldr	r1, [r1, #4]
 80078ee:	0849      	lsrs	r1, r1, #1
 80078f0:	2000      	movs	r0, #0
 80078f2:	460c      	mov	r4, r1
 80078f4:	4605      	mov	r5, r0
 80078f6:	eb12 0804 	adds.w	r8, r2, r4
 80078fa:	eb43 0905 	adc.w	r9, r3, r5
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	469a      	mov	sl, r3
 8007906:	4693      	mov	fp, r2
 8007908:	4652      	mov	r2, sl
 800790a:	465b      	mov	r3, fp
 800790c:	4640      	mov	r0, r8
 800790e:	4649      	mov	r1, r9
 8007910:	f7f8 fefa 	bl	8000708 <__aeabi_uldivmod>
 8007914:	4602      	mov	r2, r0
 8007916:	460b      	mov	r3, r1
 8007918:	4613      	mov	r3, r2
 800791a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800791c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800791e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007922:	d308      	bcc.n	8007936 <UART_SetConfig+0x79a>
 8007924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007926:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800792a:	d204      	bcs.n	8007936 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007932:	60da      	str	r2, [r3, #12]
 8007934:	e17c      	b.n	8007c30 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800793c:	e178      	b.n	8007c30 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	69db      	ldr	r3, [r3, #28]
 8007942:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007946:	f040 80c5 	bne.w	8007ad4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800794a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800794e:	2b20      	cmp	r3, #32
 8007950:	dc48      	bgt.n	80079e4 <UART_SetConfig+0x848>
 8007952:	2b00      	cmp	r3, #0
 8007954:	db7b      	blt.n	8007a4e <UART_SetConfig+0x8b2>
 8007956:	2b20      	cmp	r3, #32
 8007958:	d879      	bhi.n	8007a4e <UART_SetConfig+0x8b2>
 800795a:	a201      	add	r2, pc, #4	@ (adr r2, 8007960 <UART_SetConfig+0x7c4>)
 800795c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007960:	080079eb 	.word	0x080079eb
 8007964:	080079f3 	.word	0x080079f3
 8007968:	08007a4f 	.word	0x08007a4f
 800796c:	08007a4f 	.word	0x08007a4f
 8007970:	080079fb 	.word	0x080079fb
 8007974:	08007a4f 	.word	0x08007a4f
 8007978:	08007a4f 	.word	0x08007a4f
 800797c:	08007a4f 	.word	0x08007a4f
 8007980:	08007a0b 	.word	0x08007a0b
 8007984:	08007a4f 	.word	0x08007a4f
 8007988:	08007a4f 	.word	0x08007a4f
 800798c:	08007a4f 	.word	0x08007a4f
 8007990:	08007a4f 	.word	0x08007a4f
 8007994:	08007a4f 	.word	0x08007a4f
 8007998:	08007a4f 	.word	0x08007a4f
 800799c:	08007a4f 	.word	0x08007a4f
 80079a0:	08007a1b 	.word	0x08007a1b
 80079a4:	08007a4f 	.word	0x08007a4f
 80079a8:	08007a4f 	.word	0x08007a4f
 80079ac:	08007a4f 	.word	0x08007a4f
 80079b0:	08007a4f 	.word	0x08007a4f
 80079b4:	08007a4f 	.word	0x08007a4f
 80079b8:	08007a4f 	.word	0x08007a4f
 80079bc:	08007a4f 	.word	0x08007a4f
 80079c0:	08007a4f 	.word	0x08007a4f
 80079c4:	08007a4f 	.word	0x08007a4f
 80079c8:	08007a4f 	.word	0x08007a4f
 80079cc:	08007a4f 	.word	0x08007a4f
 80079d0:	08007a4f 	.word	0x08007a4f
 80079d4:	08007a4f 	.word	0x08007a4f
 80079d8:	08007a4f 	.word	0x08007a4f
 80079dc:	08007a4f 	.word	0x08007a4f
 80079e0:	08007a41 	.word	0x08007a41
 80079e4:	2b40      	cmp	r3, #64	@ 0x40
 80079e6:	d02e      	beq.n	8007a46 <UART_SetConfig+0x8aa>
 80079e8:	e031      	b.n	8007a4e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079ea:	f7fb ff8f 	bl	800390c <HAL_RCC_GetPCLK1Freq>
 80079ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80079f0:	e033      	b.n	8007a5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079f2:	f7fb ffa1 	bl	8003938 <HAL_RCC_GetPCLK2Freq>
 80079f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80079f8:	e02f      	b.n	8007a5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7fd f9d0 	bl	8004da4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a08:	e027      	b.n	8007a5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a0a:	f107 0318 	add.w	r3, r7, #24
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7fd fb1c 	bl	800504c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a18:	e01f      	b.n	8007a5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a1a:	4b2d      	ldr	r3, [pc, #180]	@ (8007ad0 <UART_SetConfig+0x934>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 0320 	and.w	r3, r3, #32
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d009      	beq.n	8007a3a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a26:	4b2a      	ldr	r3, [pc, #168]	@ (8007ad0 <UART_SetConfig+0x934>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	08db      	lsrs	r3, r3, #3
 8007a2c:	f003 0303 	and.w	r3, r3, #3
 8007a30:	4a24      	ldr	r2, [pc, #144]	@ (8007ac4 <UART_SetConfig+0x928>)
 8007a32:	fa22 f303 	lsr.w	r3, r2, r3
 8007a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a38:	e00f      	b.n	8007a5a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007a3a:	4b22      	ldr	r3, [pc, #136]	@ (8007ac4 <UART_SetConfig+0x928>)
 8007a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a3e:	e00c      	b.n	8007a5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a40:	4b21      	ldr	r3, [pc, #132]	@ (8007ac8 <UART_SetConfig+0x92c>)
 8007a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a44:	e009      	b.n	8007a5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a4c:	e005      	b.n	8007a5a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007a58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f000 80e7 	beq.w	8007c30 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a66:	4a19      	ldr	r2, [pc, #100]	@ (8007acc <UART_SetConfig+0x930>)
 8007a68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a70:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a74:	005a      	lsls	r2, r3, #1
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	085b      	lsrs	r3, r3, #1
 8007a7c:	441a      	add	r2, r3
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a86:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a8a:	2b0f      	cmp	r3, #15
 8007a8c:	d916      	bls.n	8007abc <UART_SetConfig+0x920>
 8007a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a94:	d212      	bcs.n	8007abc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	f023 030f 	bic.w	r3, r3, #15
 8007a9e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aa2:	085b      	lsrs	r3, r3, #1
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	f003 0307 	and.w	r3, r3, #7
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007ab8:	60da      	str	r2, [r3, #12]
 8007aba:	e0b9      	b.n	8007c30 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007ac2:	e0b5      	b.n	8007c30 <UART_SetConfig+0xa94>
 8007ac4:	03d09000 	.word	0x03d09000
 8007ac8:	003d0900 	.word	0x003d0900
 8007acc:	0800d518 	.word	0x0800d518
 8007ad0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ad4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007ad8:	2b20      	cmp	r3, #32
 8007ada:	dc49      	bgt.n	8007b70 <UART_SetConfig+0x9d4>
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	db7c      	blt.n	8007bda <UART_SetConfig+0xa3e>
 8007ae0:	2b20      	cmp	r3, #32
 8007ae2:	d87a      	bhi.n	8007bda <UART_SetConfig+0xa3e>
 8007ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8007aec <UART_SetConfig+0x950>)
 8007ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aea:	bf00      	nop
 8007aec:	08007b77 	.word	0x08007b77
 8007af0:	08007b7f 	.word	0x08007b7f
 8007af4:	08007bdb 	.word	0x08007bdb
 8007af8:	08007bdb 	.word	0x08007bdb
 8007afc:	08007b87 	.word	0x08007b87
 8007b00:	08007bdb 	.word	0x08007bdb
 8007b04:	08007bdb 	.word	0x08007bdb
 8007b08:	08007bdb 	.word	0x08007bdb
 8007b0c:	08007b97 	.word	0x08007b97
 8007b10:	08007bdb 	.word	0x08007bdb
 8007b14:	08007bdb 	.word	0x08007bdb
 8007b18:	08007bdb 	.word	0x08007bdb
 8007b1c:	08007bdb 	.word	0x08007bdb
 8007b20:	08007bdb 	.word	0x08007bdb
 8007b24:	08007bdb 	.word	0x08007bdb
 8007b28:	08007bdb 	.word	0x08007bdb
 8007b2c:	08007ba7 	.word	0x08007ba7
 8007b30:	08007bdb 	.word	0x08007bdb
 8007b34:	08007bdb 	.word	0x08007bdb
 8007b38:	08007bdb 	.word	0x08007bdb
 8007b3c:	08007bdb 	.word	0x08007bdb
 8007b40:	08007bdb 	.word	0x08007bdb
 8007b44:	08007bdb 	.word	0x08007bdb
 8007b48:	08007bdb 	.word	0x08007bdb
 8007b4c:	08007bdb 	.word	0x08007bdb
 8007b50:	08007bdb 	.word	0x08007bdb
 8007b54:	08007bdb 	.word	0x08007bdb
 8007b58:	08007bdb 	.word	0x08007bdb
 8007b5c:	08007bdb 	.word	0x08007bdb
 8007b60:	08007bdb 	.word	0x08007bdb
 8007b64:	08007bdb 	.word	0x08007bdb
 8007b68:	08007bdb 	.word	0x08007bdb
 8007b6c:	08007bcd 	.word	0x08007bcd
 8007b70:	2b40      	cmp	r3, #64	@ 0x40
 8007b72:	d02e      	beq.n	8007bd2 <UART_SetConfig+0xa36>
 8007b74:	e031      	b.n	8007bda <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b76:	f7fb fec9 	bl	800390c <HAL_RCC_GetPCLK1Freq>
 8007b7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007b7c:	e033      	b.n	8007be6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b7e:	f7fb fedb 	bl	8003938 <HAL_RCC_GetPCLK2Freq>
 8007b82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007b84:	e02f      	b.n	8007be6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7fd f90a 	bl	8004da4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b94:	e027      	b.n	8007be6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b96:	f107 0318 	add.w	r3, r7, #24
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7fd fa56 	bl	800504c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ba4:	e01f      	b.n	8007be6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ba6:	4b2d      	ldr	r3, [pc, #180]	@ (8007c5c <UART_SetConfig+0xac0>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 0320 	and.w	r3, r3, #32
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d009      	beq.n	8007bc6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007bb2:	4b2a      	ldr	r3, [pc, #168]	@ (8007c5c <UART_SetConfig+0xac0>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	08db      	lsrs	r3, r3, #3
 8007bb8:	f003 0303 	and.w	r3, r3, #3
 8007bbc:	4a28      	ldr	r2, [pc, #160]	@ (8007c60 <UART_SetConfig+0xac4>)
 8007bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8007bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007bc4:	e00f      	b.n	8007be6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007bc6:	4b26      	ldr	r3, [pc, #152]	@ (8007c60 <UART_SetConfig+0xac4>)
 8007bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bca:	e00c      	b.n	8007be6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007bcc:	4b25      	ldr	r3, [pc, #148]	@ (8007c64 <UART_SetConfig+0xac8>)
 8007bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bd0:	e009      	b.n	8007be6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bd8:	e005      	b.n	8007be6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007be4:	bf00      	nop
    }

    if (pclk != 0U)
 8007be6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d021      	beq.n	8007c30 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf0:	4a1d      	ldr	r2, [pc, #116]	@ (8007c68 <UART_SetConfig+0xacc>)
 8007bf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bfa:	fbb3 f2f2 	udiv	r2, r3, r2
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	085b      	lsrs	r3, r3, #1
 8007c04:	441a      	add	r2, r3
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c12:	2b0f      	cmp	r3, #15
 8007c14:	d909      	bls.n	8007c2a <UART_SetConfig+0xa8e>
 8007c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c1c:	d205      	bcs.n	8007c2a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	60da      	str	r2, [r3, #12]
 8007c28:	e002      	b.n	8007c30 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	2200      	movs	r2, #0
 8007c44:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007c4c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3748      	adds	r7, #72	@ 0x48
 8007c54:	46bd      	mov	sp, r7
 8007c56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c5a:	bf00      	nop
 8007c5c:	58024400 	.word	0x58024400
 8007c60:	03d09000 	.word	0x03d09000
 8007c64:	003d0900 	.word	0x003d0900
 8007c68:	0800d518 	.word	0x0800d518

08007c6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c78:	f003 0308 	and.w	r3, r3, #8
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00a      	beq.n	8007c96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	430a      	orrs	r2, r1
 8007c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c9a:	f003 0301 	and.w	r3, r3, #1
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00a      	beq.n	8007cb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	430a      	orrs	r2, r1
 8007cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cbc:	f003 0302 	and.w	r3, r3, #2
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d00a      	beq.n	8007cda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	430a      	orrs	r2, r1
 8007cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cde:	f003 0304 	and.w	r3, r3, #4
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00a      	beq.n	8007cfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	430a      	orrs	r2, r1
 8007cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d00:	f003 0310 	and.w	r3, r3, #16
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00a      	beq.n	8007d1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	430a      	orrs	r2, r1
 8007d1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d22:	f003 0320 	and.w	r3, r3, #32
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00a      	beq.n	8007d40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	430a      	orrs	r2, r1
 8007d3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d01a      	beq.n	8007d82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	430a      	orrs	r2, r1
 8007d60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d6a:	d10a      	bne.n	8007d82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	430a      	orrs	r2, r1
 8007d80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00a      	beq.n	8007da4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	430a      	orrs	r2, r1
 8007da2:	605a      	str	r2, [r3, #4]
  }
}
 8007da4:	bf00      	nop
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b098      	sub	sp, #96	@ 0x60
 8007db4:	af02      	add	r7, sp, #8
 8007db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007dc0:	f7f9 fd0c 	bl	80017dc <HAL_GetTick>
 8007dc4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0308 	and.w	r3, r3, #8
 8007dd0:	2b08      	cmp	r3, #8
 8007dd2:	d12f      	bne.n	8007e34 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007dd4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007dd8:	9300      	str	r3, [sp, #0]
 8007dda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 f88e 	bl	8007f04 <UART_WaitOnFlagUntilTimeout>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d022      	beq.n	8007e34 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df6:	e853 3f00 	ldrex	r3, [r3]
 8007dfa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e02:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	461a      	mov	r2, r3
 8007e0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e0e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e14:	e841 2300 	strex	r3, r2, [r1]
 8007e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1e6      	bne.n	8007dee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2220      	movs	r2, #32
 8007e24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e30:	2303      	movs	r3, #3
 8007e32:	e063      	b.n	8007efc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 0304 	and.w	r3, r3, #4
 8007e3e:	2b04      	cmp	r3, #4
 8007e40:	d149      	bne.n	8007ed6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e42:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e46:	9300      	str	r3, [sp, #0]
 8007e48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 f857 	bl	8007f04 <UART_WaitOnFlagUntilTimeout>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d03c      	beq.n	8007ed6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e64:	e853 3f00 	ldrex	r3, [r3]
 8007e68:	623b      	str	r3, [r7, #32]
   return(result);
 8007e6a:	6a3b      	ldr	r3, [r7, #32]
 8007e6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	461a      	mov	r2, r3
 8007e78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e82:	e841 2300 	strex	r3, r2, [r1]
 8007e86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1e6      	bne.n	8007e5c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	3308      	adds	r3, #8
 8007e94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	e853 3f00 	ldrex	r3, [r3]
 8007e9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f023 0301 	bic.w	r3, r3, #1
 8007ea4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	3308      	adds	r3, #8
 8007eac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007eae:	61fa      	str	r2, [r7, #28]
 8007eb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb2:	69b9      	ldr	r1, [r7, #24]
 8007eb4:	69fa      	ldr	r2, [r7, #28]
 8007eb6:	e841 2300 	strex	r3, r2, [r1]
 8007eba:	617b      	str	r3, [r7, #20]
   return(result);
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d1e5      	bne.n	8007e8e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2220      	movs	r2, #32
 8007ec6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e012      	b.n	8007efc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2220      	movs	r2, #32
 8007eda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2220      	movs	r2, #32
 8007ee2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3758      	adds	r7, #88	@ 0x58
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	603b      	str	r3, [r7, #0]
 8007f10:	4613      	mov	r3, r2
 8007f12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f14:	e04f      	b.n	8007fb6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f1c:	d04b      	beq.n	8007fb6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f1e:	f7f9 fc5d 	bl	80017dc <HAL_GetTick>
 8007f22:	4602      	mov	r2, r0
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	1ad3      	subs	r3, r2, r3
 8007f28:	69ba      	ldr	r2, [r7, #24]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d302      	bcc.n	8007f34 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d101      	bne.n	8007f38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f34:	2303      	movs	r3, #3
 8007f36:	e04e      	b.n	8007fd6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 0304 	and.w	r3, r3, #4
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d037      	beq.n	8007fb6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	2b80      	cmp	r3, #128	@ 0x80
 8007f4a:	d034      	beq.n	8007fb6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	2b40      	cmp	r3, #64	@ 0x40
 8007f50:	d031      	beq.n	8007fb6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	69db      	ldr	r3, [r3, #28]
 8007f58:	f003 0308 	and.w	r3, r3, #8
 8007f5c:	2b08      	cmp	r3, #8
 8007f5e:	d110      	bne.n	8007f82 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2208      	movs	r2, #8
 8007f66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f000 f95b 	bl	8008224 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2208      	movs	r2, #8
 8007f72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e029      	b.n	8007fd6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	69db      	ldr	r3, [r3, #28]
 8007f88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f90:	d111      	bne.n	8007fb6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007f9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f000 f941 	bl	8008224 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2220      	movs	r2, #32
 8007fa6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	e00f      	b.n	8007fd6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	69da      	ldr	r2, [r3, #28]
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	4013      	ands	r3, r2
 8007fc0:	68ba      	ldr	r2, [r7, #8]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	bf0c      	ite	eq
 8007fc6:	2301      	moveq	r3, #1
 8007fc8:	2300      	movne	r3, #0
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	461a      	mov	r2, r3
 8007fce:	79fb      	ldrb	r3, [r7, #7]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d0a0      	beq.n	8007f16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
	...

08007fe0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b0a3      	sub	sp, #140	@ 0x8c
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	4613      	mov	r3, r2
 8007fec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	68ba      	ldr	r2, [r7, #8]
 8007ff2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	88fa      	ldrh	r2, [r7, #6]
 8007ff8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	88fa      	ldrh	r2, [r7, #6]
 8008000:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008012:	d10e      	bne.n	8008032 <UART_Start_Receive_IT+0x52>
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	691b      	ldr	r3, [r3, #16]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d105      	bne.n	8008028 <UART_Start_Receive_IT+0x48>
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008022:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008026:	e02d      	b.n	8008084 <UART_Start_Receive_IT+0xa4>
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	22ff      	movs	r2, #255	@ 0xff
 800802c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008030:	e028      	b.n	8008084 <UART_Start_Receive_IT+0xa4>
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d10d      	bne.n	8008056 <UART_Start_Receive_IT+0x76>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d104      	bne.n	800804c <UART_Start_Receive_IT+0x6c>
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	22ff      	movs	r2, #255	@ 0xff
 8008046:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800804a:	e01b      	b.n	8008084 <UART_Start_Receive_IT+0xa4>
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	227f      	movs	r2, #127	@ 0x7f
 8008050:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008054:	e016      	b.n	8008084 <UART_Start_Receive_IT+0xa4>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800805e:	d10d      	bne.n	800807c <UART_Start_Receive_IT+0x9c>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d104      	bne.n	8008072 <UART_Start_Receive_IT+0x92>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	227f      	movs	r2, #127	@ 0x7f
 800806c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008070:	e008      	b.n	8008084 <UART_Start_Receive_IT+0xa4>
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	223f      	movs	r2, #63	@ 0x3f
 8008076:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800807a:	e003      	b.n	8008084 <UART_Start_Receive_IT+0xa4>
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2200      	movs	r2, #0
 8008080:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2200      	movs	r2, #0
 8008088:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2222      	movs	r2, #34	@ 0x22
 8008090:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	3308      	adds	r3, #8
 800809a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800809c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800809e:	e853 3f00 	ldrex	r3, [r3]
 80080a2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80080a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80080a6:	f043 0301 	orr.w	r3, r3, #1
 80080aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	3308      	adds	r3, #8
 80080b4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80080b8:	673a      	str	r2, [r7, #112]	@ 0x70
 80080ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080bc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80080be:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80080c0:	e841 2300 	strex	r3, r2, [r1]
 80080c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80080c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d1e3      	bne.n	8008094 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080d4:	d14f      	bne.n	8008176 <UART_Start_Receive_IT+0x196>
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80080dc:	88fa      	ldrh	r2, [r7, #6]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d349      	bcc.n	8008176 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080ea:	d107      	bne.n	80080fc <UART_Start_Receive_IT+0x11c>
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d103      	bne.n	80080fc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	4a47      	ldr	r2, [pc, #284]	@ (8008214 <UART_Start_Receive_IT+0x234>)
 80080f8:	675a      	str	r2, [r3, #116]	@ 0x74
 80080fa:	e002      	b.n	8008102 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	4a46      	ldr	r2, [pc, #280]	@ (8008218 <UART_Start_Receive_IT+0x238>)
 8008100:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	691b      	ldr	r3, [r3, #16]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d01a      	beq.n	8008140 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008110:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008112:	e853 3f00 	ldrex	r3, [r3]
 8008116:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008118:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800811a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800811e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	461a      	mov	r2, r3
 8008128:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800812c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800812e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008130:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008132:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008134:	e841 2300 	strex	r3, r2, [r1]
 8008138:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800813a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1e4      	bne.n	800810a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	3308      	adds	r3, #8
 8008146:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008148:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800814a:	e853 3f00 	ldrex	r3, [r3]
 800814e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008152:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008156:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	3308      	adds	r3, #8
 800815e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008160:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008162:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008164:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008166:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008168:	e841 2300 	strex	r3, r2, [r1]
 800816c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800816e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008170:	2b00      	cmp	r3, #0
 8008172:	d1e5      	bne.n	8008140 <UART_Start_Receive_IT+0x160>
 8008174:	e046      	b.n	8008204 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800817e:	d107      	bne.n	8008190 <UART_Start_Receive_IT+0x1b0>
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d103      	bne.n	8008190 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	4a24      	ldr	r2, [pc, #144]	@ (800821c <UART_Start_Receive_IT+0x23c>)
 800818c:	675a      	str	r2, [r3, #116]	@ 0x74
 800818e:	e002      	b.n	8008196 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	4a23      	ldr	r2, [pc, #140]	@ (8008220 <UART_Start_Receive_IT+0x240>)
 8008194:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d019      	beq.n	80081d2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a6:	e853 3f00 	ldrex	r3, [r3]
 80081aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80081ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ae:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80081b2:	677b      	str	r3, [r7, #116]	@ 0x74
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	461a      	mov	r2, r3
 80081ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80081bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80081be:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80081c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80081c4:	e841 2300 	strex	r3, r2, [r1]
 80081c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80081ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d1e6      	bne.n	800819e <UART_Start_Receive_IT+0x1be>
 80081d0:	e018      	b.n	8008204 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	e853 3f00 	ldrex	r3, [r3]
 80081de:	613b      	str	r3, [r7, #16]
   return(result);
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	f043 0320 	orr.w	r3, r3, #32
 80081e6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	461a      	mov	r2, r3
 80081ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081f0:	623b      	str	r3, [r7, #32]
 80081f2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f4:	69f9      	ldr	r1, [r7, #28]
 80081f6:	6a3a      	ldr	r2, [r7, #32]
 80081f8:	e841 2300 	strex	r3, r2, [r1]
 80081fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d1e6      	bne.n	80081d2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	378c      	adds	r7, #140	@ 0x8c
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	08008a45 	.word	0x08008a45
 8008218:	080086e5 	.word	0x080086e5
 800821c:	0800852d 	.word	0x0800852d
 8008220:	08008375 	.word	0x08008375

08008224 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008224:	b480      	push	{r7}
 8008226:	b095      	sub	sp, #84	@ 0x54
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008234:	e853 3f00 	ldrex	r3, [r3]
 8008238:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800823a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800823c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008240:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	461a      	mov	r2, r3
 8008248:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800824a:	643b      	str	r3, [r7, #64]	@ 0x40
 800824c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800824e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008250:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008252:	e841 2300 	strex	r3, r2, [r1]
 8008256:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1e6      	bne.n	800822c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	3308      	adds	r3, #8
 8008264:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008266:	6a3b      	ldr	r3, [r7, #32]
 8008268:	e853 3f00 	ldrex	r3, [r3]
 800826c:	61fb      	str	r3, [r7, #28]
   return(result);
 800826e:	69fa      	ldr	r2, [r7, #28]
 8008270:	4b1e      	ldr	r3, [pc, #120]	@ (80082ec <UART_EndRxTransfer+0xc8>)
 8008272:	4013      	ands	r3, r2
 8008274:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	3308      	adds	r3, #8
 800827c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800827e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008280:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008282:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008284:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008286:	e841 2300 	strex	r3, r2, [r1]
 800828a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800828c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1e5      	bne.n	800825e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008296:	2b01      	cmp	r3, #1
 8008298:	d118      	bne.n	80082cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	e853 3f00 	ldrex	r3, [r3]
 80082a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	f023 0310 	bic.w	r3, r3, #16
 80082ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	461a      	mov	r2, r3
 80082b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082b8:	61bb      	str	r3, [r7, #24]
 80082ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082bc:	6979      	ldr	r1, [r7, #20]
 80082be:	69ba      	ldr	r2, [r7, #24]
 80082c0:	e841 2300 	strex	r3, r2, [r1]
 80082c4:	613b      	str	r3, [r7, #16]
   return(result);
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d1e6      	bne.n	800829a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2220      	movs	r2, #32
 80082d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80082e0:	bf00      	nop
 80082e2:	3754      	adds	r7, #84	@ 0x54
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr
 80082ec:	effffffe 	.word	0xeffffffe

080082f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2200      	movs	r2, #0
 8008302:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2200      	movs	r2, #0
 800830a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800830e:	68f8      	ldr	r0, [r7, #12]
 8008310:	f7fe ff2e 	bl	8007170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008314:	bf00      	nop
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b088      	sub	sp, #32
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	e853 3f00 	ldrex	r3, [r3]
 8008330:	60bb      	str	r3, [r7, #8]
   return(result);
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008338:	61fb      	str	r3, [r7, #28]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	461a      	mov	r2, r3
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	61bb      	str	r3, [r7, #24]
 8008344:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008346:	6979      	ldr	r1, [r7, #20]
 8008348:	69ba      	ldr	r2, [r7, #24]
 800834a:	e841 2300 	strex	r3, r2, [r1]
 800834e:	613b      	str	r3, [r7, #16]
   return(result);
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1e6      	bne.n	8008324 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2220      	movs	r2, #32
 800835a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f7fe fef9 	bl	800715c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800836a:	bf00      	nop
 800836c:	3720      	adds	r7, #32
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
	...

08008374 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b09c      	sub	sp, #112	@ 0x70
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008382:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800838c:	2b22      	cmp	r3, #34	@ 0x22
 800838e:	f040 80be 	bne.w	800850e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008398:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800839c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80083a0:	b2d9      	uxtb	r1, r3
 80083a2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80083a6:	b2da      	uxtb	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083ac:	400a      	ands	r2, r1
 80083ae:	b2d2      	uxtb	r2, r2
 80083b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083b6:	1c5a      	adds	r2, r3, #1
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	3b01      	subs	r3, #1
 80083c6:	b29a      	uxth	r2, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	f040 80a1 	bne.w	800851e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083e4:	e853 3f00 	ldrex	r3, [r3]
 80083e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80083ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	461a      	mov	r2, r3
 80083f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80083fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80083fc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008400:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008402:	e841 2300 	strex	r3, r2, [r1]
 8008406:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008408:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800840a:	2b00      	cmp	r3, #0
 800840c:	d1e6      	bne.n	80083dc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	3308      	adds	r3, #8
 8008414:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008418:	e853 3f00 	ldrex	r3, [r3]
 800841c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800841e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008420:	f023 0301 	bic.w	r3, r3, #1
 8008424:	667b      	str	r3, [r7, #100]	@ 0x64
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	3308      	adds	r3, #8
 800842c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800842e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008430:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008432:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008434:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008436:	e841 2300 	strex	r3, r2, [r1]
 800843a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800843c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1e5      	bne.n	800840e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2220      	movs	r2, #32
 8008446:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a33      	ldr	r2, [pc, #204]	@ (8008528 <UART_RxISR_8BIT+0x1b4>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d01f      	beq.n	80084a0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d018      	beq.n	80084a0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008476:	e853 3f00 	ldrex	r3, [r3]
 800847a:	623b      	str	r3, [r7, #32]
   return(result);
 800847c:	6a3b      	ldr	r3, [r7, #32]
 800847e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008482:	663b      	str	r3, [r7, #96]	@ 0x60
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	461a      	mov	r2, r3
 800848a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800848c:	633b      	str	r3, [r7, #48]	@ 0x30
 800848e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008490:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008492:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008494:	e841 2300 	strex	r3, r2, [r1]
 8008498:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800849a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800849c:	2b00      	cmp	r3, #0
 800849e:	d1e6      	bne.n	800846e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d12e      	bne.n	8008506 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	e853 3f00 	ldrex	r3, [r3]
 80084ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f023 0310 	bic.w	r3, r3, #16
 80084c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	461a      	mov	r2, r3
 80084ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084cc:	61fb      	str	r3, [r7, #28]
 80084ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d0:	69b9      	ldr	r1, [r7, #24]
 80084d2:	69fa      	ldr	r2, [r7, #28]
 80084d4:	e841 2300 	strex	r3, r2, [r1]
 80084d8:	617b      	str	r3, [r7, #20]
   return(result);
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d1e6      	bne.n	80084ae <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	69db      	ldr	r3, [r3, #28]
 80084e6:	f003 0310 	and.w	r3, r3, #16
 80084ea:	2b10      	cmp	r3, #16
 80084ec:	d103      	bne.n	80084f6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2210      	movs	r2, #16
 80084f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80084fc:	4619      	mov	r1, r3
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f7fe fe40 	bl	8007184 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008504:	e00b      	b.n	800851e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f7f8 fb5a 	bl	8000bc0 <HAL_UART_RxCpltCallback>
}
 800850c:	e007      	b.n	800851e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	699a      	ldr	r2, [r3, #24]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f042 0208 	orr.w	r2, r2, #8
 800851c:	619a      	str	r2, [r3, #24]
}
 800851e:	bf00      	nop
 8008520:	3770      	adds	r7, #112	@ 0x70
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	58000c00 	.word	0x58000c00

0800852c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b09c      	sub	sp, #112	@ 0x70
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800853a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008544:	2b22      	cmp	r3, #34	@ 0x22
 8008546:	f040 80be 	bne.w	80086c6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008550:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008558:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800855a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800855e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008562:	4013      	ands	r3, r2
 8008564:	b29a      	uxth	r2, r3
 8008566:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008568:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800856e:	1c9a      	adds	r2, r3, #2
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800857a:	b29b      	uxth	r3, r3
 800857c:	3b01      	subs	r3, #1
 800857e:	b29a      	uxth	r2, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800858c:	b29b      	uxth	r3, r3
 800858e:	2b00      	cmp	r3, #0
 8008590:	f040 80a1 	bne.w	80086d6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800859c:	e853 3f00 	ldrex	r3, [r3]
 80085a0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80085a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	461a      	mov	r2, r3
 80085b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80085b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80085b4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80085b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80085ba:	e841 2300 	strex	r3, r2, [r1]
 80085be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80085c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d1e6      	bne.n	8008594 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	3308      	adds	r3, #8
 80085cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085d0:	e853 3f00 	ldrex	r3, [r3]
 80085d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80085d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d8:	f023 0301 	bic.w	r3, r3, #1
 80085dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	3308      	adds	r3, #8
 80085e4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80085e6:	643a      	str	r2, [r7, #64]	@ 0x40
 80085e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80085ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80085ee:	e841 2300 	strex	r3, r2, [r1]
 80085f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80085f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d1e5      	bne.n	80085c6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2220      	movs	r2, #32
 80085fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a33      	ldr	r2, [pc, #204]	@ (80086e0 <UART_RxISR_16BIT+0x1b4>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d01f      	beq.n	8008658 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008622:	2b00      	cmp	r3, #0
 8008624:	d018      	beq.n	8008658 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862c:	6a3b      	ldr	r3, [r7, #32]
 800862e:	e853 3f00 	ldrex	r3, [r3]
 8008632:	61fb      	str	r3, [r7, #28]
   return(result);
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800863a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	461a      	mov	r2, r3
 8008642:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008644:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008646:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008648:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800864a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800864c:	e841 2300 	strex	r3, r2, [r1]
 8008650:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008654:	2b00      	cmp	r3, #0
 8008656:	d1e6      	bne.n	8008626 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800865c:	2b01      	cmp	r3, #1
 800865e:	d12e      	bne.n	80086be <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	e853 3f00 	ldrex	r3, [r3]
 8008672:	60bb      	str	r3, [r7, #8]
   return(result);
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	f023 0310 	bic.w	r3, r3, #16
 800867a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	461a      	mov	r2, r3
 8008682:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008684:	61bb      	str	r3, [r7, #24]
 8008686:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008688:	6979      	ldr	r1, [r7, #20]
 800868a:	69ba      	ldr	r2, [r7, #24]
 800868c:	e841 2300 	strex	r3, r2, [r1]
 8008690:	613b      	str	r3, [r7, #16]
   return(result);
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d1e6      	bne.n	8008666 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	69db      	ldr	r3, [r3, #28]
 800869e:	f003 0310 	and.w	r3, r3, #16
 80086a2:	2b10      	cmp	r3, #16
 80086a4:	d103      	bne.n	80086ae <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	2210      	movs	r2, #16
 80086ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80086b4:	4619      	mov	r1, r3
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7fe fd64 	bl	8007184 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80086bc:	e00b      	b.n	80086d6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f7f8 fa7e 	bl	8000bc0 <HAL_UART_RxCpltCallback>
}
 80086c4:	e007      	b.n	80086d6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	699a      	ldr	r2, [r3, #24]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f042 0208 	orr.w	r2, r2, #8
 80086d4:	619a      	str	r2, [r3, #24]
}
 80086d6:	bf00      	nop
 80086d8:	3770      	adds	r7, #112	@ 0x70
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	58000c00 	.word	0x58000c00

080086e4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b0ac      	sub	sp, #176	@ 0xb0
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80086f2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	69db      	ldr	r3, [r3, #28]
 80086fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800871a:	2b22      	cmp	r3, #34	@ 0x22
 800871c:	f040 8180 	bne.w	8008a20 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008726:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800872a:	e123      	b.n	8008974 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008732:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008736:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800873a:	b2d9      	uxtb	r1, r3
 800873c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008740:	b2da      	uxtb	r2, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008746:	400a      	ands	r2, r1
 8008748:	b2d2      	uxtb	r2, r2
 800874a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008750:	1c5a      	adds	r2, r3, #1
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800875c:	b29b      	uxth	r3, r3
 800875e:	3b01      	subs	r3, #1
 8008760:	b29a      	uxth	r2, r3
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	69db      	ldr	r3, [r3, #28]
 800876e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008772:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008776:	f003 0307 	and.w	r3, r3, #7
 800877a:	2b00      	cmp	r3, #0
 800877c:	d053      	beq.n	8008826 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800877e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008782:	f003 0301 	and.w	r3, r3, #1
 8008786:	2b00      	cmp	r3, #0
 8008788:	d011      	beq.n	80087ae <UART_RxISR_8BIT_FIFOEN+0xca>
 800878a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800878e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00b      	beq.n	80087ae <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2201      	movs	r2, #1
 800879c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087a4:	f043 0201 	orr.w	r2, r3, #1
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80087b2:	f003 0302 	and.w	r3, r3, #2
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d011      	beq.n	80087de <UART_RxISR_8BIT_FIFOEN+0xfa>
 80087ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80087be:	f003 0301 	and.w	r3, r3, #1
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00b      	beq.n	80087de <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2202      	movs	r2, #2
 80087cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087d4:	f043 0204 	orr.w	r2, r3, #4
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80087e2:	f003 0304 	and.w	r3, r3, #4
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d011      	beq.n	800880e <UART_RxISR_8BIT_FIFOEN+0x12a>
 80087ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80087ee:	f003 0301 	and.w	r3, r3, #1
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00b      	beq.n	800880e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2204      	movs	r2, #4
 80087fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008804:	f043 0202 	orr.w	r2, r3, #2
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008814:	2b00      	cmp	r3, #0
 8008816:	d006      	beq.n	8008826 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f7fe fca9 	bl	8007170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800882c:	b29b      	uxth	r3, r3
 800882e:	2b00      	cmp	r3, #0
 8008830:	f040 80a0 	bne.w	8008974 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800883a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800883c:	e853 3f00 	ldrex	r3, [r3]
 8008840:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008842:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008844:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008848:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	461a      	mov	r2, r3
 8008852:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008856:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008858:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800885c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800885e:	e841 2300 	strex	r3, r2, [r1]
 8008862:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008864:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008866:	2b00      	cmp	r3, #0
 8008868:	d1e4      	bne.n	8008834 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	3308      	adds	r3, #8
 8008870:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008872:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008874:	e853 3f00 	ldrex	r3, [r3]
 8008878:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800887a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800887c:	4b6e      	ldr	r3, [pc, #440]	@ (8008a38 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800887e:	4013      	ands	r3, r2
 8008880:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	3308      	adds	r3, #8
 800888a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800888e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008890:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008892:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008894:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008896:	e841 2300 	strex	r3, r2, [r1]
 800889a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800889c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1e3      	bne.n	800886a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2220      	movs	r2, #32
 80088a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a60      	ldr	r2, [pc, #384]	@ (8008a3c <UART_RxISR_8BIT_FIFOEN+0x358>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d021      	beq.n	8008904 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d01a      	beq.n	8008904 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088d6:	e853 3f00 	ldrex	r3, [r3]
 80088da:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80088dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80088e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	461a      	mov	r2, r3
 80088ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80088f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80088f2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80088f6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80088f8:	e841 2300 	strex	r3, r2, [r1]
 80088fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80088fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008900:	2b00      	cmp	r3, #0
 8008902:	d1e4      	bne.n	80088ce <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008908:	2b01      	cmp	r3, #1
 800890a:	d130      	bne.n	800896e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800891a:	e853 3f00 	ldrex	r3, [r3]
 800891e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008922:	f023 0310 	bic.w	r3, r3, #16
 8008926:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	461a      	mov	r2, r3
 8008930:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008934:	643b      	str	r3, [r7, #64]	@ 0x40
 8008936:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008938:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800893a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800893c:	e841 2300 	strex	r3, r2, [r1]
 8008940:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008944:	2b00      	cmp	r3, #0
 8008946:	d1e4      	bne.n	8008912 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	69db      	ldr	r3, [r3, #28]
 800894e:	f003 0310 	and.w	r3, r3, #16
 8008952:	2b10      	cmp	r3, #16
 8008954:	d103      	bne.n	800895e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2210      	movs	r2, #16
 800895c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008964:	4619      	mov	r1, r3
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f7fe fc0c 	bl	8007184 <HAL_UARTEx_RxEventCallback>
 800896c:	e002      	b.n	8008974 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f7f8 f926 	bl	8000bc0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008974:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008978:	2b00      	cmp	r3, #0
 800897a:	d006      	beq.n	800898a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800897c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008980:	f003 0320 	and.w	r3, r3, #32
 8008984:	2b00      	cmp	r3, #0
 8008986:	f47f aed1 	bne.w	800872c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008990:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008994:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008998:	2b00      	cmp	r3, #0
 800899a:	d049      	beq.n	8008a30 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80089a2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d242      	bcs.n	8008a30 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	3308      	adds	r3, #8
 80089b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b2:	6a3b      	ldr	r3, [r7, #32]
 80089b4:	e853 3f00 	ldrex	r3, [r3]
 80089b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80089c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	3308      	adds	r3, #8
 80089ca:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80089ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80089d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089d6:	e841 2300 	strex	r3, r2, [r1]
 80089da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80089dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d1e3      	bne.n	80089aa <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4a16      	ldr	r2, [pc, #88]	@ (8008a40 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80089e6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	e853 3f00 	ldrex	r3, [r3]
 80089f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	f043 0320 	orr.w	r3, r3, #32
 80089fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	461a      	mov	r2, r3
 8008a06:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008a0a:	61bb      	str	r3, [r7, #24]
 8008a0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a0e:	6979      	ldr	r1, [r7, #20]
 8008a10:	69ba      	ldr	r2, [r7, #24]
 8008a12:	e841 2300 	strex	r3, r2, [r1]
 8008a16:	613b      	str	r3, [r7, #16]
   return(result);
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d1e4      	bne.n	80089e8 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a1e:	e007      	b.n	8008a30 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	699a      	ldr	r2, [r3, #24]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f042 0208 	orr.w	r2, r2, #8
 8008a2e:	619a      	str	r2, [r3, #24]
}
 8008a30:	bf00      	nop
 8008a32:	37b0      	adds	r7, #176	@ 0xb0
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}
 8008a38:	effffffe 	.word	0xeffffffe
 8008a3c:	58000c00 	.word	0x58000c00
 8008a40:	08008375 	.word	0x08008375

08008a44 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b0ae      	sub	sp, #184	@ 0xb8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008a52:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	69db      	ldr	r3, [r3, #28]
 8008a5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a7a:	2b22      	cmp	r3, #34	@ 0x22
 8008a7c:	f040 8184 	bne.w	8008d88 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008a86:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008a8a:	e127      	b.n	8008cdc <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a92:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008a9e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8008aa2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8008aa6:	4013      	ands	r3, r2
 8008aa8:	b29a      	uxth	r2, r3
 8008aaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008aae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ab4:	1c9a      	adds	r2, r3, #2
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	b29a      	uxth	r2, r3
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	69db      	ldr	r3, [r3, #28]
 8008ad2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008ad6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008ada:	f003 0307 	and.w	r3, r3, #7
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d053      	beq.n	8008b8a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ae2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008ae6:	f003 0301 	and.w	r3, r3, #1
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d011      	beq.n	8008b12 <UART_RxISR_16BIT_FIFOEN+0xce>
 8008aee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00b      	beq.n	8008b12 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	2201      	movs	r2, #1
 8008b00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b08:	f043 0201 	orr.w	r2, r3, #1
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008b16:	f003 0302 	and.w	r3, r3, #2
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d011      	beq.n	8008b42 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008b1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008b22:	f003 0301 	and.w	r3, r3, #1
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d00b      	beq.n	8008b42 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	2202      	movs	r2, #2
 8008b30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b38:	f043 0204 	orr.w	r2, r3, #4
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008b46:	f003 0304 	and.w	r3, r3, #4
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d011      	beq.n	8008b72 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008b4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008b52:	f003 0301 	and.w	r3, r3, #1
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00b      	beq.n	8008b72 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	2204      	movs	r2, #4
 8008b60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b68:	f043 0202 	orr.w	r2, r3, #2
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d006      	beq.n	8008b8a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f7fe faf7 	bl	8007170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	f040 80a2 	bne.w	8008cdc <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008ba0:	e853 3f00 	ldrex	r3, [r3]
 8008ba4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008ba6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ba8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008bac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008bba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008bbe:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008bc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008bc6:	e841 2300 	strex	r3, r2, [r1]
 8008bca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008bcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1e2      	bne.n	8008b98 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	3308      	adds	r3, #8
 8008bd8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008bdc:	e853 3f00 	ldrex	r3, [r3]
 8008be0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008be2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008be4:	4b6e      	ldr	r3, [pc, #440]	@ (8008da0 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8008be6:	4013      	ands	r3, r2
 8008be8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	3308      	adds	r3, #8
 8008bf2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008bf6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008bf8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008bfc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008bfe:	e841 2300 	strex	r3, r2, [r1]
 8008c02:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008c04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d1e3      	bne.n	8008bd2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2220      	movs	r2, #32
 8008c0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2200      	movs	r2, #0
 8008c16:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a60      	ldr	r2, [pc, #384]	@ (8008da4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d021      	beq.n	8008c6c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d01a      	beq.n	8008c6c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c3e:	e853 3f00 	ldrex	r3, [r3]
 8008c42:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008c44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008c4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	461a      	mov	r2, r3
 8008c54:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008c58:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008c5a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c5c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008c5e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008c60:	e841 2300 	strex	r3, r2, [r1]
 8008c64:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008c66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d1e4      	bne.n	8008c36 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d130      	bne.n	8008cd6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2200      	movs	r2, #0
 8008c78:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c82:	e853 3f00 	ldrex	r3, [r3]
 8008c86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c8a:	f023 0310 	bic.w	r3, r3, #16
 8008c8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	461a      	mov	r2, r3
 8008c98:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008c9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c9e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ca2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ca4:	e841 2300 	strex	r3, r2, [r1]
 8008ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008caa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d1e4      	bne.n	8008c7a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	69db      	ldr	r3, [r3, #28]
 8008cb6:	f003 0310 	and.w	r3, r3, #16
 8008cba:	2b10      	cmp	r3, #16
 8008cbc:	d103      	bne.n	8008cc6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2210      	movs	r2, #16
 8008cc4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008ccc:	4619      	mov	r1, r3
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f7fe fa58 	bl	8007184 <HAL_UARTEx_RxEventCallback>
 8008cd4:	e002      	b.n	8008cdc <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f7f7 ff72 	bl	8000bc0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008cdc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d006      	beq.n	8008cf2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8008ce4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008ce8:	f003 0320 	and.w	r3, r3, #32
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	f47f aecd 	bne.w	8008a8c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008cf8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008cfc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d049      	beq.n	8008d98 <UART_RxISR_16BIT_FIFOEN+0x354>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008d0a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d242      	bcs.n	8008d98 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	3308      	adds	r3, #8
 8008d18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d1c:	e853 3f00 	ldrex	r3, [r3]
 8008d20:	623b      	str	r3, [r7, #32]
   return(result);
 8008d22:	6a3b      	ldr	r3, [r7, #32]
 8008d24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	3308      	adds	r3, #8
 8008d32:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008d36:	633a      	str	r2, [r7, #48]	@ 0x30
 8008d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d3e:	e841 2300 	strex	r3, r2, [r1]
 8008d42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d1e3      	bne.n	8008d12 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a16      	ldr	r2, [pc, #88]	@ (8008da8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008d4e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	e853 3f00 	ldrex	r3, [r3]
 8008d5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f043 0320 	orr.w	r3, r3, #32
 8008d64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008d72:	61fb      	str	r3, [r7, #28]
 8008d74:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d76:	69b9      	ldr	r1, [r7, #24]
 8008d78:	69fa      	ldr	r2, [r7, #28]
 8008d7a:	e841 2300 	strex	r3, r2, [r1]
 8008d7e:	617b      	str	r3, [r7, #20]
   return(result);
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d1e4      	bne.n	8008d50 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d86:	e007      	b.n	8008d98 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	699a      	ldr	r2, [r3, #24]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f042 0208 	orr.w	r2, r2, #8
 8008d96:	619a      	str	r2, [r3, #24]
}
 8008d98:	bf00      	nop
 8008d9a:	37b8      	adds	r7, #184	@ 0xb8
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	effffffe 	.word	0xeffffffe
 8008da4:	58000c00 	.word	0x58000c00
 8008da8:	0800852d 	.word	0x0800852d

08008dac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008db4:	bf00      	nop
 8008db6:	370c      	adds	r7, #12
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr

08008dc0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008dc8:	bf00      	nop
 8008dca:	370c      	adds	r7, #12
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008ddc:	bf00      	nop
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b085      	sub	sp, #20
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	d101      	bne.n	8008dfe <HAL_UARTEx_DisableFifoMode+0x16>
 8008dfa:	2302      	movs	r3, #2
 8008dfc:	e027      	b.n	8008e4e <HAL_UARTEx_DisableFifoMode+0x66>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2201      	movs	r2, #1
 8008e02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2224      	movs	r2, #36	@ 0x24
 8008e0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f022 0201 	bic.w	r2, r2, #1
 8008e24:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008e2c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	68fa      	ldr	r2, [r7, #12]
 8008e3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2220      	movs	r2, #32
 8008e40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2200      	movs	r2, #0
 8008e48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e4c:	2300      	movs	r3, #0
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3714      	adds	r7, #20
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr

08008e5a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b084      	sub	sp, #16
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
 8008e62:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d101      	bne.n	8008e72 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008e6e:	2302      	movs	r3, #2
 8008e70:	e02d      	b.n	8008ece <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2201      	movs	r2, #1
 8008e76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2224      	movs	r2, #36	@ 0x24
 8008e7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f022 0201 	bic.w	r2, r2, #1
 8008e98:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	683a      	ldr	r2, [r7, #0]
 8008eaa:	430a      	orrs	r2, r1
 8008eac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 f850 	bl	8008f54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2220      	movs	r2, #32
 8008ec0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ecc:	2300      	movs	r3, #0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b084      	sub	sp, #16
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
 8008ede:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d101      	bne.n	8008eee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008eea:	2302      	movs	r3, #2
 8008eec:	e02d      	b.n	8008f4a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2224      	movs	r2, #36	@ 0x24
 8008efa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f022 0201 	bic.w	r2, r2, #1
 8008f14:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	683a      	ldr	r2, [r7, #0]
 8008f26:	430a      	orrs	r2, r1
 8008f28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 f812 	bl	8008f54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	68fa      	ldr	r2, [r7, #12]
 8008f36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2220      	movs	r2, #32
 8008f3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
	...

08008f54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b085      	sub	sp, #20
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d108      	bne.n	8008f76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008f74:	e031      	b.n	8008fda <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008f76:	2310      	movs	r3, #16
 8008f78:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008f7a:	2310      	movs	r3, #16
 8008f7c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	0e5b      	lsrs	r3, r3, #25
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	f003 0307 	and.w	r3, r3, #7
 8008f8c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	0f5b      	lsrs	r3, r3, #29
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	f003 0307 	and.w	r3, r3, #7
 8008f9c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f9e:	7bbb      	ldrb	r3, [r7, #14]
 8008fa0:	7b3a      	ldrb	r2, [r7, #12]
 8008fa2:	4911      	ldr	r1, [pc, #68]	@ (8008fe8 <UARTEx_SetNbDataToProcess+0x94>)
 8008fa4:	5c8a      	ldrb	r2, [r1, r2]
 8008fa6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008faa:	7b3a      	ldrb	r2, [r7, #12]
 8008fac:	490f      	ldr	r1, [pc, #60]	@ (8008fec <UARTEx_SetNbDataToProcess+0x98>)
 8008fae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008fb0:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fb4:	b29a      	uxth	r2, r3
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008fbc:	7bfb      	ldrb	r3, [r7, #15]
 8008fbe:	7b7a      	ldrb	r2, [r7, #13]
 8008fc0:	4909      	ldr	r1, [pc, #36]	@ (8008fe8 <UARTEx_SetNbDataToProcess+0x94>)
 8008fc2:	5c8a      	ldrb	r2, [r1, r2]
 8008fc4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008fc8:	7b7a      	ldrb	r2, [r7, #13]
 8008fca:	4908      	ldr	r1, [pc, #32]	@ (8008fec <UARTEx_SetNbDataToProcess+0x98>)
 8008fcc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008fce:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fd2:	b29a      	uxth	r2, r3
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008fda:	bf00      	nop
 8008fdc:	3714      	adds	r7, #20
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr
 8008fe6:	bf00      	nop
 8008fe8:	0800d530 	.word	0x0800d530
 8008fec:	0800d538 	.word	0x0800d538

08008ff0 <__cvt>:
 8008ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ff2:	ed2d 8b02 	vpush	{d8}
 8008ff6:	eeb0 8b40 	vmov.f64	d8, d0
 8008ffa:	b085      	sub	sp, #20
 8008ffc:	4617      	mov	r7, r2
 8008ffe:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8009000:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009002:	ee18 2a90 	vmov	r2, s17
 8009006:	f025 0520 	bic.w	r5, r5, #32
 800900a:	2a00      	cmp	r2, #0
 800900c:	bfb6      	itet	lt
 800900e:	222d      	movlt	r2, #45	@ 0x2d
 8009010:	2200      	movge	r2, #0
 8009012:	eeb1 8b40 	vneglt.f64	d8, d0
 8009016:	2d46      	cmp	r5, #70	@ 0x46
 8009018:	460c      	mov	r4, r1
 800901a:	701a      	strb	r2, [r3, #0]
 800901c:	d004      	beq.n	8009028 <__cvt+0x38>
 800901e:	2d45      	cmp	r5, #69	@ 0x45
 8009020:	d100      	bne.n	8009024 <__cvt+0x34>
 8009022:	3401      	adds	r4, #1
 8009024:	2102      	movs	r1, #2
 8009026:	e000      	b.n	800902a <__cvt+0x3a>
 8009028:	2103      	movs	r1, #3
 800902a:	ab03      	add	r3, sp, #12
 800902c:	9301      	str	r3, [sp, #4]
 800902e:	ab02      	add	r3, sp, #8
 8009030:	9300      	str	r3, [sp, #0]
 8009032:	4622      	mov	r2, r4
 8009034:	4633      	mov	r3, r6
 8009036:	eeb0 0b48 	vmov.f64	d0, d8
 800903a:	f001 f851 	bl	800a0e0 <_dtoa_r>
 800903e:	2d47      	cmp	r5, #71	@ 0x47
 8009040:	d114      	bne.n	800906c <__cvt+0x7c>
 8009042:	07fb      	lsls	r3, r7, #31
 8009044:	d50a      	bpl.n	800905c <__cvt+0x6c>
 8009046:	1902      	adds	r2, r0, r4
 8009048:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800904c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009050:	bf08      	it	eq
 8009052:	9203      	streq	r2, [sp, #12]
 8009054:	2130      	movs	r1, #48	@ 0x30
 8009056:	9b03      	ldr	r3, [sp, #12]
 8009058:	4293      	cmp	r3, r2
 800905a:	d319      	bcc.n	8009090 <__cvt+0xa0>
 800905c:	9b03      	ldr	r3, [sp, #12]
 800905e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009060:	1a1b      	subs	r3, r3, r0
 8009062:	6013      	str	r3, [r2, #0]
 8009064:	b005      	add	sp, #20
 8009066:	ecbd 8b02 	vpop	{d8}
 800906a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800906c:	2d46      	cmp	r5, #70	@ 0x46
 800906e:	eb00 0204 	add.w	r2, r0, r4
 8009072:	d1e9      	bne.n	8009048 <__cvt+0x58>
 8009074:	7803      	ldrb	r3, [r0, #0]
 8009076:	2b30      	cmp	r3, #48	@ 0x30
 8009078:	d107      	bne.n	800908a <__cvt+0x9a>
 800907a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800907e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009082:	bf1c      	itt	ne
 8009084:	f1c4 0401 	rsbne	r4, r4, #1
 8009088:	6034      	strne	r4, [r6, #0]
 800908a:	6833      	ldr	r3, [r6, #0]
 800908c:	441a      	add	r2, r3
 800908e:	e7db      	b.n	8009048 <__cvt+0x58>
 8009090:	1c5c      	adds	r4, r3, #1
 8009092:	9403      	str	r4, [sp, #12]
 8009094:	7019      	strb	r1, [r3, #0]
 8009096:	e7de      	b.n	8009056 <__cvt+0x66>

08009098 <__exponent>:
 8009098:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800909a:	2900      	cmp	r1, #0
 800909c:	bfba      	itte	lt
 800909e:	4249      	neglt	r1, r1
 80090a0:	232d      	movlt	r3, #45	@ 0x2d
 80090a2:	232b      	movge	r3, #43	@ 0x2b
 80090a4:	2909      	cmp	r1, #9
 80090a6:	7002      	strb	r2, [r0, #0]
 80090a8:	7043      	strb	r3, [r0, #1]
 80090aa:	dd29      	ble.n	8009100 <__exponent+0x68>
 80090ac:	f10d 0307 	add.w	r3, sp, #7
 80090b0:	461d      	mov	r5, r3
 80090b2:	270a      	movs	r7, #10
 80090b4:	461a      	mov	r2, r3
 80090b6:	fbb1 f6f7 	udiv	r6, r1, r7
 80090ba:	fb07 1416 	mls	r4, r7, r6, r1
 80090be:	3430      	adds	r4, #48	@ 0x30
 80090c0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80090c4:	460c      	mov	r4, r1
 80090c6:	2c63      	cmp	r4, #99	@ 0x63
 80090c8:	f103 33ff 	add.w	r3, r3, #4294967295
 80090cc:	4631      	mov	r1, r6
 80090ce:	dcf1      	bgt.n	80090b4 <__exponent+0x1c>
 80090d0:	3130      	adds	r1, #48	@ 0x30
 80090d2:	1e94      	subs	r4, r2, #2
 80090d4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80090d8:	1c41      	adds	r1, r0, #1
 80090da:	4623      	mov	r3, r4
 80090dc:	42ab      	cmp	r3, r5
 80090de:	d30a      	bcc.n	80090f6 <__exponent+0x5e>
 80090e0:	f10d 0309 	add.w	r3, sp, #9
 80090e4:	1a9b      	subs	r3, r3, r2
 80090e6:	42ac      	cmp	r4, r5
 80090e8:	bf88      	it	hi
 80090ea:	2300      	movhi	r3, #0
 80090ec:	3302      	adds	r3, #2
 80090ee:	4403      	add	r3, r0
 80090f0:	1a18      	subs	r0, r3, r0
 80090f2:	b003      	add	sp, #12
 80090f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090f6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80090fa:	f801 6f01 	strb.w	r6, [r1, #1]!
 80090fe:	e7ed      	b.n	80090dc <__exponent+0x44>
 8009100:	2330      	movs	r3, #48	@ 0x30
 8009102:	3130      	adds	r1, #48	@ 0x30
 8009104:	7083      	strb	r3, [r0, #2]
 8009106:	70c1      	strb	r1, [r0, #3]
 8009108:	1d03      	adds	r3, r0, #4
 800910a:	e7f1      	b.n	80090f0 <__exponent+0x58>
 800910c:	0000      	movs	r0, r0
	...

08009110 <_printf_float>:
 8009110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009114:	b08d      	sub	sp, #52	@ 0x34
 8009116:	460c      	mov	r4, r1
 8009118:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800911c:	4616      	mov	r6, r2
 800911e:	461f      	mov	r7, r3
 8009120:	4605      	mov	r5, r0
 8009122:	f000 fed7 	bl	8009ed4 <_localeconv_r>
 8009126:	f8d0 b000 	ldr.w	fp, [r0]
 800912a:	4658      	mov	r0, fp
 800912c:	f7f7 f928 	bl	8000380 <strlen>
 8009130:	2300      	movs	r3, #0
 8009132:	930a      	str	r3, [sp, #40]	@ 0x28
 8009134:	f8d8 3000 	ldr.w	r3, [r8]
 8009138:	f894 9018 	ldrb.w	r9, [r4, #24]
 800913c:	6822      	ldr	r2, [r4, #0]
 800913e:	9005      	str	r0, [sp, #20]
 8009140:	3307      	adds	r3, #7
 8009142:	f023 0307 	bic.w	r3, r3, #7
 8009146:	f103 0108 	add.w	r1, r3, #8
 800914a:	f8c8 1000 	str.w	r1, [r8]
 800914e:	ed93 0b00 	vldr	d0, [r3]
 8009152:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80093b0 <_printf_float+0x2a0>
 8009156:	eeb0 7bc0 	vabs.f64	d7, d0
 800915a:	eeb4 7b46 	vcmp.f64	d7, d6
 800915e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009162:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8009166:	dd24      	ble.n	80091b2 <_printf_float+0xa2>
 8009168:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800916c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009170:	d502      	bpl.n	8009178 <_printf_float+0x68>
 8009172:	232d      	movs	r3, #45	@ 0x2d
 8009174:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009178:	498f      	ldr	r1, [pc, #572]	@ (80093b8 <_printf_float+0x2a8>)
 800917a:	4b90      	ldr	r3, [pc, #576]	@ (80093bc <_printf_float+0x2ac>)
 800917c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8009180:	bf94      	ite	ls
 8009182:	4688      	movls	r8, r1
 8009184:	4698      	movhi	r8, r3
 8009186:	f022 0204 	bic.w	r2, r2, #4
 800918a:	2303      	movs	r3, #3
 800918c:	6123      	str	r3, [r4, #16]
 800918e:	6022      	str	r2, [r4, #0]
 8009190:	f04f 0a00 	mov.w	sl, #0
 8009194:	9700      	str	r7, [sp, #0]
 8009196:	4633      	mov	r3, r6
 8009198:	aa0b      	add	r2, sp, #44	@ 0x2c
 800919a:	4621      	mov	r1, r4
 800919c:	4628      	mov	r0, r5
 800919e:	f000 f9d1 	bl	8009544 <_printf_common>
 80091a2:	3001      	adds	r0, #1
 80091a4:	f040 8089 	bne.w	80092ba <_printf_float+0x1aa>
 80091a8:	f04f 30ff 	mov.w	r0, #4294967295
 80091ac:	b00d      	add	sp, #52	@ 0x34
 80091ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091b2:	eeb4 0b40 	vcmp.f64	d0, d0
 80091b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091ba:	d709      	bvc.n	80091d0 <_printf_float+0xc0>
 80091bc:	ee10 3a90 	vmov	r3, s1
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	bfbc      	itt	lt
 80091c4:	232d      	movlt	r3, #45	@ 0x2d
 80091c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80091ca:	497d      	ldr	r1, [pc, #500]	@ (80093c0 <_printf_float+0x2b0>)
 80091cc:	4b7d      	ldr	r3, [pc, #500]	@ (80093c4 <_printf_float+0x2b4>)
 80091ce:	e7d5      	b.n	800917c <_printf_float+0x6c>
 80091d0:	6863      	ldr	r3, [r4, #4]
 80091d2:	1c59      	adds	r1, r3, #1
 80091d4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80091d8:	d139      	bne.n	800924e <_printf_float+0x13e>
 80091da:	2306      	movs	r3, #6
 80091dc:	6063      	str	r3, [r4, #4]
 80091de:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80091e2:	2300      	movs	r3, #0
 80091e4:	6022      	str	r2, [r4, #0]
 80091e6:	9303      	str	r3, [sp, #12]
 80091e8:	ab0a      	add	r3, sp, #40	@ 0x28
 80091ea:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80091ee:	ab09      	add	r3, sp, #36	@ 0x24
 80091f0:	9300      	str	r3, [sp, #0]
 80091f2:	6861      	ldr	r1, [r4, #4]
 80091f4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80091f8:	4628      	mov	r0, r5
 80091fa:	f7ff fef9 	bl	8008ff0 <__cvt>
 80091fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009202:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009204:	4680      	mov	r8, r0
 8009206:	d129      	bne.n	800925c <_printf_float+0x14c>
 8009208:	1cc8      	adds	r0, r1, #3
 800920a:	db02      	blt.n	8009212 <_printf_float+0x102>
 800920c:	6863      	ldr	r3, [r4, #4]
 800920e:	4299      	cmp	r1, r3
 8009210:	dd41      	ble.n	8009296 <_printf_float+0x186>
 8009212:	f1a9 0902 	sub.w	r9, r9, #2
 8009216:	fa5f f989 	uxtb.w	r9, r9
 800921a:	3901      	subs	r1, #1
 800921c:	464a      	mov	r2, r9
 800921e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009222:	9109      	str	r1, [sp, #36]	@ 0x24
 8009224:	f7ff ff38 	bl	8009098 <__exponent>
 8009228:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800922a:	1813      	adds	r3, r2, r0
 800922c:	2a01      	cmp	r2, #1
 800922e:	4682      	mov	sl, r0
 8009230:	6123      	str	r3, [r4, #16]
 8009232:	dc02      	bgt.n	800923a <_printf_float+0x12a>
 8009234:	6822      	ldr	r2, [r4, #0]
 8009236:	07d2      	lsls	r2, r2, #31
 8009238:	d501      	bpl.n	800923e <_printf_float+0x12e>
 800923a:	3301      	adds	r3, #1
 800923c:	6123      	str	r3, [r4, #16]
 800923e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009242:	2b00      	cmp	r3, #0
 8009244:	d0a6      	beq.n	8009194 <_printf_float+0x84>
 8009246:	232d      	movs	r3, #45	@ 0x2d
 8009248:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800924c:	e7a2      	b.n	8009194 <_printf_float+0x84>
 800924e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009252:	d1c4      	bne.n	80091de <_printf_float+0xce>
 8009254:	2b00      	cmp	r3, #0
 8009256:	d1c2      	bne.n	80091de <_printf_float+0xce>
 8009258:	2301      	movs	r3, #1
 800925a:	e7bf      	b.n	80091dc <_printf_float+0xcc>
 800925c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009260:	d9db      	bls.n	800921a <_printf_float+0x10a>
 8009262:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8009266:	d118      	bne.n	800929a <_printf_float+0x18a>
 8009268:	2900      	cmp	r1, #0
 800926a:	6863      	ldr	r3, [r4, #4]
 800926c:	dd0b      	ble.n	8009286 <_printf_float+0x176>
 800926e:	6121      	str	r1, [r4, #16]
 8009270:	b913      	cbnz	r3, 8009278 <_printf_float+0x168>
 8009272:	6822      	ldr	r2, [r4, #0]
 8009274:	07d0      	lsls	r0, r2, #31
 8009276:	d502      	bpl.n	800927e <_printf_float+0x16e>
 8009278:	3301      	adds	r3, #1
 800927a:	440b      	add	r3, r1
 800927c:	6123      	str	r3, [r4, #16]
 800927e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009280:	f04f 0a00 	mov.w	sl, #0
 8009284:	e7db      	b.n	800923e <_printf_float+0x12e>
 8009286:	b913      	cbnz	r3, 800928e <_printf_float+0x17e>
 8009288:	6822      	ldr	r2, [r4, #0]
 800928a:	07d2      	lsls	r2, r2, #31
 800928c:	d501      	bpl.n	8009292 <_printf_float+0x182>
 800928e:	3302      	adds	r3, #2
 8009290:	e7f4      	b.n	800927c <_printf_float+0x16c>
 8009292:	2301      	movs	r3, #1
 8009294:	e7f2      	b.n	800927c <_printf_float+0x16c>
 8009296:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800929a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800929c:	4299      	cmp	r1, r3
 800929e:	db05      	blt.n	80092ac <_printf_float+0x19c>
 80092a0:	6823      	ldr	r3, [r4, #0]
 80092a2:	6121      	str	r1, [r4, #16]
 80092a4:	07d8      	lsls	r0, r3, #31
 80092a6:	d5ea      	bpl.n	800927e <_printf_float+0x16e>
 80092a8:	1c4b      	adds	r3, r1, #1
 80092aa:	e7e7      	b.n	800927c <_printf_float+0x16c>
 80092ac:	2900      	cmp	r1, #0
 80092ae:	bfd4      	ite	le
 80092b0:	f1c1 0202 	rsble	r2, r1, #2
 80092b4:	2201      	movgt	r2, #1
 80092b6:	4413      	add	r3, r2
 80092b8:	e7e0      	b.n	800927c <_printf_float+0x16c>
 80092ba:	6823      	ldr	r3, [r4, #0]
 80092bc:	055a      	lsls	r2, r3, #21
 80092be:	d407      	bmi.n	80092d0 <_printf_float+0x1c0>
 80092c0:	6923      	ldr	r3, [r4, #16]
 80092c2:	4642      	mov	r2, r8
 80092c4:	4631      	mov	r1, r6
 80092c6:	4628      	mov	r0, r5
 80092c8:	47b8      	blx	r7
 80092ca:	3001      	adds	r0, #1
 80092cc:	d12a      	bne.n	8009324 <_printf_float+0x214>
 80092ce:	e76b      	b.n	80091a8 <_printf_float+0x98>
 80092d0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80092d4:	f240 80e0 	bls.w	8009498 <_printf_float+0x388>
 80092d8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80092dc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80092e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092e4:	d133      	bne.n	800934e <_printf_float+0x23e>
 80092e6:	4a38      	ldr	r2, [pc, #224]	@ (80093c8 <_printf_float+0x2b8>)
 80092e8:	2301      	movs	r3, #1
 80092ea:	4631      	mov	r1, r6
 80092ec:	4628      	mov	r0, r5
 80092ee:	47b8      	blx	r7
 80092f0:	3001      	adds	r0, #1
 80092f2:	f43f af59 	beq.w	80091a8 <_printf_float+0x98>
 80092f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80092fa:	4543      	cmp	r3, r8
 80092fc:	db02      	blt.n	8009304 <_printf_float+0x1f4>
 80092fe:	6823      	ldr	r3, [r4, #0]
 8009300:	07d8      	lsls	r0, r3, #31
 8009302:	d50f      	bpl.n	8009324 <_printf_float+0x214>
 8009304:	9b05      	ldr	r3, [sp, #20]
 8009306:	465a      	mov	r2, fp
 8009308:	4631      	mov	r1, r6
 800930a:	4628      	mov	r0, r5
 800930c:	47b8      	blx	r7
 800930e:	3001      	adds	r0, #1
 8009310:	f43f af4a 	beq.w	80091a8 <_printf_float+0x98>
 8009314:	f04f 0900 	mov.w	r9, #0
 8009318:	f108 38ff 	add.w	r8, r8, #4294967295
 800931c:	f104 0a1a 	add.w	sl, r4, #26
 8009320:	45c8      	cmp	r8, r9
 8009322:	dc09      	bgt.n	8009338 <_printf_float+0x228>
 8009324:	6823      	ldr	r3, [r4, #0]
 8009326:	079b      	lsls	r3, r3, #30
 8009328:	f100 8107 	bmi.w	800953a <_printf_float+0x42a>
 800932c:	68e0      	ldr	r0, [r4, #12]
 800932e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009330:	4298      	cmp	r0, r3
 8009332:	bfb8      	it	lt
 8009334:	4618      	movlt	r0, r3
 8009336:	e739      	b.n	80091ac <_printf_float+0x9c>
 8009338:	2301      	movs	r3, #1
 800933a:	4652      	mov	r2, sl
 800933c:	4631      	mov	r1, r6
 800933e:	4628      	mov	r0, r5
 8009340:	47b8      	blx	r7
 8009342:	3001      	adds	r0, #1
 8009344:	f43f af30 	beq.w	80091a8 <_printf_float+0x98>
 8009348:	f109 0901 	add.w	r9, r9, #1
 800934c:	e7e8      	b.n	8009320 <_printf_float+0x210>
 800934e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009350:	2b00      	cmp	r3, #0
 8009352:	dc3b      	bgt.n	80093cc <_printf_float+0x2bc>
 8009354:	4a1c      	ldr	r2, [pc, #112]	@ (80093c8 <_printf_float+0x2b8>)
 8009356:	2301      	movs	r3, #1
 8009358:	4631      	mov	r1, r6
 800935a:	4628      	mov	r0, r5
 800935c:	47b8      	blx	r7
 800935e:	3001      	adds	r0, #1
 8009360:	f43f af22 	beq.w	80091a8 <_printf_float+0x98>
 8009364:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009368:	ea59 0303 	orrs.w	r3, r9, r3
 800936c:	d102      	bne.n	8009374 <_printf_float+0x264>
 800936e:	6823      	ldr	r3, [r4, #0]
 8009370:	07d9      	lsls	r1, r3, #31
 8009372:	d5d7      	bpl.n	8009324 <_printf_float+0x214>
 8009374:	9b05      	ldr	r3, [sp, #20]
 8009376:	465a      	mov	r2, fp
 8009378:	4631      	mov	r1, r6
 800937a:	4628      	mov	r0, r5
 800937c:	47b8      	blx	r7
 800937e:	3001      	adds	r0, #1
 8009380:	f43f af12 	beq.w	80091a8 <_printf_float+0x98>
 8009384:	f04f 0a00 	mov.w	sl, #0
 8009388:	f104 0b1a 	add.w	fp, r4, #26
 800938c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800938e:	425b      	negs	r3, r3
 8009390:	4553      	cmp	r3, sl
 8009392:	dc01      	bgt.n	8009398 <_printf_float+0x288>
 8009394:	464b      	mov	r3, r9
 8009396:	e794      	b.n	80092c2 <_printf_float+0x1b2>
 8009398:	2301      	movs	r3, #1
 800939a:	465a      	mov	r2, fp
 800939c:	4631      	mov	r1, r6
 800939e:	4628      	mov	r0, r5
 80093a0:	47b8      	blx	r7
 80093a2:	3001      	adds	r0, #1
 80093a4:	f43f af00 	beq.w	80091a8 <_printf_float+0x98>
 80093a8:	f10a 0a01 	add.w	sl, sl, #1
 80093ac:	e7ee      	b.n	800938c <_printf_float+0x27c>
 80093ae:	bf00      	nop
 80093b0:	ffffffff 	.word	0xffffffff
 80093b4:	7fefffff 	.word	0x7fefffff
 80093b8:	0800d540 	.word	0x0800d540
 80093bc:	0800d544 	.word	0x0800d544
 80093c0:	0800d548 	.word	0x0800d548
 80093c4:	0800d54c 	.word	0x0800d54c
 80093c8:	0800d550 	.word	0x0800d550
 80093cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80093ce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80093d2:	4553      	cmp	r3, sl
 80093d4:	bfa8      	it	ge
 80093d6:	4653      	movge	r3, sl
 80093d8:	2b00      	cmp	r3, #0
 80093da:	4699      	mov	r9, r3
 80093dc:	dc37      	bgt.n	800944e <_printf_float+0x33e>
 80093de:	2300      	movs	r3, #0
 80093e0:	9307      	str	r3, [sp, #28]
 80093e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093e6:	f104 021a 	add.w	r2, r4, #26
 80093ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80093ec:	9907      	ldr	r1, [sp, #28]
 80093ee:	9306      	str	r3, [sp, #24]
 80093f0:	eba3 0309 	sub.w	r3, r3, r9
 80093f4:	428b      	cmp	r3, r1
 80093f6:	dc31      	bgt.n	800945c <_printf_float+0x34c>
 80093f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093fa:	459a      	cmp	sl, r3
 80093fc:	dc3b      	bgt.n	8009476 <_printf_float+0x366>
 80093fe:	6823      	ldr	r3, [r4, #0]
 8009400:	07da      	lsls	r2, r3, #31
 8009402:	d438      	bmi.n	8009476 <_printf_float+0x366>
 8009404:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009406:	ebaa 0903 	sub.w	r9, sl, r3
 800940a:	9b06      	ldr	r3, [sp, #24]
 800940c:	ebaa 0303 	sub.w	r3, sl, r3
 8009410:	4599      	cmp	r9, r3
 8009412:	bfa8      	it	ge
 8009414:	4699      	movge	r9, r3
 8009416:	f1b9 0f00 	cmp.w	r9, #0
 800941a:	dc34      	bgt.n	8009486 <_printf_float+0x376>
 800941c:	f04f 0800 	mov.w	r8, #0
 8009420:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009424:	f104 0b1a 	add.w	fp, r4, #26
 8009428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800942a:	ebaa 0303 	sub.w	r3, sl, r3
 800942e:	eba3 0309 	sub.w	r3, r3, r9
 8009432:	4543      	cmp	r3, r8
 8009434:	f77f af76 	ble.w	8009324 <_printf_float+0x214>
 8009438:	2301      	movs	r3, #1
 800943a:	465a      	mov	r2, fp
 800943c:	4631      	mov	r1, r6
 800943e:	4628      	mov	r0, r5
 8009440:	47b8      	blx	r7
 8009442:	3001      	adds	r0, #1
 8009444:	f43f aeb0 	beq.w	80091a8 <_printf_float+0x98>
 8009448:	f108 0801 	add.w	r8, r8, #1
 800944c:	e7ec      	b.n	8009428 <_printf_float+0x318>
 800944e:	4642      	mov	r2, r8
 8009450:	4631      	mov	r1, r6
 8009452:	4628      	mov	r0, r5
 8009454:	47b8      	blx	r7
 8009456:	3001      	adds	r0, #1
 8009458:	d1c1      	bne.n	80093de <_printf_float+0x2ce>
 800945a:	e6a5      	b.n	80091a8 <_printf_float+0x98>
 800945c:	2301      	movs	r3, #1
 800945e:	4631      	mov	r1, r6
 8009460:	4628      	mov	r0, r5
 8009462:	9206      	str	r2, [sp, #24]
 8009464:	47b8      	blx	r7
 8009466:	3001      	adds	r0, #1
 8009468:	f43f ae9e 	beq.w	80091a8 <_printf_float+0x98>
 800946c:	9b07      	ldr	r3, [sp, #28]
 800946e:	9a06      	ldr	r2, [sp, #24]
 8009470:	3301      	adds	r3, #1
 8009472:	9307      	str	r3, [sp, #28]
 8009474:	e7b9      	b.n	80093ea <_printf_float+0x2da>
 8009476:	9b05      	ldr	r3, [sp, #20]
 8009478:	465a      	mov	r2, fp
 800947a:	4631      	mov	r1, r6
 800947c:	4628      	mov	r0, r5
 800947e:	47b8      	blx	r7
 8009480:	3001      	adds	r0, #1
 8009482:	d1bf      	bne.n	8009404 <_printf_float+0x2f4>
 8009484:	e690      	b.n	80091a8 <_printf_float+0x98>
 8009486:	9a06      	ldr	r2, [sp, #24]
 8009488:	464b      	mov	r3, r9
 800948a:	4442      	add	r2, r8
 800948c:	4631      	mov	r1, r6
 800948e:	4628      	mov	r0, r5
 8009490:	47b8      	blx	r7
 8009492:	3001      	adds	r0, #1
 8009494:	d1c2      	bne.n	800941c <_printf_float+0x30c>
 8009496:	e687      	b.n	80091a8 <_printf_float+0x98>
 8009498:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800949c:	f1b9 0f01 	cmp.w	r9, #1
 80094a0:	dc01      	bgt.n	80094a6 <_printf_float+0x396>
 80094a2:	07db      	lsls	r3, r3, #31
 80094a4:	d536      	bpl.n	8009514 <_printf_float+0x404>
 80094a6:	2301      	movs	r3, #1
 80094a8:	4642      	mov	r2, r8
 80094aa:	4631      	mov	r1, r6
 80094ac:	4628      	mov	r0, r5
 80094ae:	47b8      	blx	r7
 80094b0:	3001      	adds	r0, #1
 80094b2:	f43f ae79 	beq.w	80091a8 <_printf_float+0x98>
 80094b6:	9b05      	ldr	r3, [sp, #20]
 80094b8:	465a      	mov	r2, fp
 80094ba:	4631      	mov	r1, r6
 80094bc:	4628      	mov	r0, r5
 80094be:	47b8      	blx	r7
 80094c0:	3001      	adds	r0, #1
 80094c2:	f43f ae71 	beq.w	80091a8 <_printf_float+0x98>
 80094c6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80094ca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80094ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094d2:	f109 39ff 	add.w	r9, r9, #4294967295
 80094d6:	d018      	beq.n	800950a <_printf_float+0x3fa>
 80094d8:	464b      	mov	r3, r9
 80094da:	f108 0201 	add.w	r2, r8, #1
 80094de:	4631      	mov	r1, r6
 80094e0:	4628      	mov	r0, r5
 80094e2:	47b8      	blx	r7
 80094e4:	3001      	adds	r0, #1
 80094e6:	d10c      	bne.n	8009502 <_printf_float+0x3f2>
 80094e8:	e65e      	b.n	80091a8 <_printf_float+0x98>
 80094ea:	2301      	movs	r3, #1
 80094ec:	465a      	mov	r2, fp
 80094ee:	4631      	mov	r1, r6
 80094f0:	4628      	mov	r0, r5
 80094f2:	47b8      	blx	r7
 80094f4:	3001      	adds	r0, #1
 80094f6:	f43f ae57 	beq.w	80091a8 <_printf_float+0x98>
 80094fa:	f108 0801 	add.w	r8, r8, #1
 80094fe:	45c8      	cmp	r8, r9
 8009500:	dbf3      	blt.n	80094ea <_printf_float+0x3da>
 8009502:	4653      	mov	r3, sl
 8009504:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009508:	e6dc      	b.n	80092c4 <_printf_float+0x1b4>
 800950a:	f04f 0800 	mov.w	r8, #0
 800950e:	f104 0b1a 	add.w	fp, r4, #26
 8009512:	e7f4      	b.n	80094fe <_printf_float+0x3ee>
 8009514:	2301      	movs	r3, #1
 8009516:	4642      	mov	r2, r8
 8009518:	e7e1      	b.n	80094de <_printf_float+0x3ce>
 800951a:	2301      	movs	r3, #1
 800951c:	464a      	mov	r2, r9
 800951e:	4631      	mov	r1, r6
 8009520:	4628      	mov	r0, r5
 8009522:	47b8      	blx	r7
 8009524:	3001      	adds	r0, #1
 8009526:	f43f ae3f 	beq.w	80091a8 <_printf_float+0x98>
 800952a:	f108 0801 	add.w	r8, r8, #1
 800952e:	68e3      	ldr	r3, [r4, #12]
 8009530:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009532:	1a5b      	subs	r3, r3, r1
 8009534:	4543      	cmp	r3, r8
 8009536:	dcf0      	bgt.n	800951a <_printf_float+0x40a>
 8009538:	e6f8      	b.n	800932c <_printf_float+0x21c>
 800953a:	f04f 0800 	mov.w	r8, #0
 800953e:	f104 0919 	add.w	r9, r4, #25
 8009542:	e7f4      	b.n	800952e <_printf_float+0x41e>

08009544 <_printf_common>:
 8009544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009548:	4616      	mov	r6, r2
 800954a:	4698      	mov	r8, r3
 800954c:	688a      	ldr	r2, [r1, #8]
 800954e:	690b      	ldr	r3, [r1, #16]
 8009550:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009554:	4293      	cmp	r3, r2
 8009556:	bfb8      	it	lt
 8009558:	4613      	movlt	r3, r2
 800955a:	6033      	str	r3, [r6, #0]
 800955c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009560:	4607      	mov	r7, r0
 8009562:	460c      	mov	r4, r1
 8009564:	b10a      	cbz	r2, 800956a <_printf_common+0x26>
 8009566:	3301      	adds	r3, #1
 8009568:	6033      	str	r3, [r6, #0]
 800956a:	6823      	ldr	r3, [r4, #0]
 800956c:	0699      	lsls	r1, r3, #26
 800956e:	bf42      	ittt	mi
 8009570:	6833      	ldrmi	r3, [r6, #0]
 8009572:	3302      	addmi	r3, #2
 8009574:	6033      	strmi	r3, [r6, #0]
 8009576:	6825      	ldr	r5, [r4, #0]
 8009578:	f015 0506 	ands.w	r5, r5, #6
 800957c:	d106      	bne.n	800958c <_printf_common+0x48>
 800957e:	f104 0a19 	add.w	sl, r4, #25
 8009582:	68e3      	ldr	r3, [r4, #12]
 8009584:	6832      	ldr	r2, [r6, #0]
 8009586:	1a9b      	subs	r3, r3, r2
 8009588:	42ab      	cmp	r3, r5
 800958a:	dc26      	bgt.n	80095da <_printf_common+0x96>
 800958c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009590:	6822      	ldr	r2, [r4, #0]
 8009592:	3b00      	subs	r3, #0
 8009594:	bf18      	it	ne
 8009596:	2301      	movne	r3, #1
 8009598:	0692      	lsls	r2, r2, #26
 800959a:	d42b      	bmi.n	80095f4 <_printf_common+0xb0>
 800959c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80095a0:	4641      	mov	r1, r8
 80095a2:	4638      	mov	r0, r7
 80095a4:	47c8      	blx	r9
 80095a6:	3001      	adds	r0, #1
 80095a8:	d01e      	beq.n	80095e8 <_printf_common+0xa4>
 80095aa:	6823      	ldr	r3, [r4, #0]
 80095ac:	6922      	ldr	r2, [r4, #16]
 80095ae:	f003 0306 	and.w	r3, r3, #6
 80095b2:	2b04      	cmp	r3, #4
 80095b4:	bf02      	ittt	eq
 80095b6:	68e5      	ldreq	r5, [r4, #12]
 80095b8:	6833      	ldreq	r3, [r6, #0]
 80095ba:	1aed      	subeq	r5, r5, r3
 80095bc:	68a3      	ldr	r3, [r4, #8]
 80095be:	bf0c      	ite	eq
 80095c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095c4:	2500      	movne	r5, #0
 80095c6:	4293      	cmp	r3, r2
 80095c8:	bfc4      	itt	gt
 80095ca:	1a9b      	subgt	r3, r3, r2
 80095cc:	18ed      	addgt	r5, r5, r3
 80095ce:	2600      	movs	r6, #0
 80095d0:	341a      	adds	r4, #26
 80095d2:	42b5      	cmp	r5, r6
 80095d4:	d11a      	bne.n	800960c <_printf_common+0xc8>
 80095d6:	2000      	movs	r0, #0
 80095d8:	e008      	b.n	80095ec <_printf_common+0xa8>
 80095da:	2301      	movs	r3, #1
 80095dc:	4652      	mov	r2, sl
 80095de:	4641      	mov	r1, r8
 80095e0:	4638      	mov	r0, r7
 80095e2:	47c8      	blx	r9
 80095e4:	3001      	adds	r0, #1
 80095e6:	d103      	bne.n	80095f0 <_printf_common+0xac>
 80095e8:	f04f 30ff 	mov.w	r0, #4294967295
 80095ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095f0:	3501      	adds	r5, #1
 80095f2:	e7c6      	b.n	8009582 <_printf_common+0x3e>
 80095f4:	18e1      	adds	r1, r4, r3
 80095f6:	1c5a      	adds	r2, r3, #1
 80095f8:	2030      	movs	r0, #48	@ 0x30
 80095fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80095fe:	4422      	add	r2, r4
 8009600:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009604:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009608:	3302      	adds	r3, #2
 800960a:	e7c7      	b.n	800959c <_printf_common+0x58>
 800960c:	2301      	movs	r3, #1
 800960e:	4622      	mov	r2, r4
 8009610:	4641      	mov	r1, r8
 8009612:	4638      	mov	r0, r7
 8009614:	47c8      	blx	r9
 8009616:	3001      	adds	r0, #1
 8009618:	d0e6      	beq.n	80095e8 <_printf_common+0xa4>
 800961a:	3601      	adds	r6, #1
 800961c:	e7d9      	b.n	80095d2 <_printf_common+0x8e>
	...

08009620 <_printf_i>:
 8009620:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009624:	7e0f      	ldrb	r7, [r1, #24]
 8009626:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009628:	2f78      	cmp	r7, #120	@ 0x78
 800962a:	4691      	mov	r9, r2
 800962c:	4680      	mov	r8, r0
 800962e:	460c      	mov	r4, r1
 8009630:	469a      	mov	sl, r3
 8009632:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009636:	d807      	bhi.n	8009648 <_printf_i+0x28>
 8009638:	2f62      	cmp	r7, #98	@ 0x62
 800963a:	d80a      	bhi.n	8009652 <_printf_i+0x32>
 800963c:	2f00      	cmp	r7, #0
 800963e:	f000 80d2 	beq.w	80097e6 <_printf_i+0x1c6>
 8009642:	2f58      	cmp	r7, #88	@ 0x58
 8009644:	f000 80b9 	beq.w	80097ba <_printf_i+0x19a>
 8009648:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800964c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009650:	e03a      	b.n	80096c8 <_printf_i+0xa8>
 8009652:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009656:	2b15      	cmp	r3, #21
 8009658:	d8f6      	bhi.n	8009648 <_printf_i+0x28>
 800965a:	a101      	add	r1, pc, #4	@ (adr r1, 8009660 <_printf_i+0x40>)
 800965c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009660:	080096b9 	.word	0x080096b9
 8009664:	080096cd 	.word	0x080096cd
 8009668:	08009649 	.word	0x08009649
 800966c:	08009649 	.word	0x08009649
 8009670:	08009649 	.word	0x08009649
 8009674:	08009649 	.word	0x08009649
 8009678:	080096cd 	.word	0x080096cd
 800967c:	08009649 	.word	0x08009649
 8009680:	08009649 	.word	0x08009649
 8009684:	08009649 	.word	0x08009649
 8009688:	08009649 	.word	0x08009649
 800968c:	080097cd 	.word	0x080097cd
 8009690:	080096f7 	.word	0x080096f7
 8009694:	08009787 	.word	0x08009787
 8009698:	08009649 	.word	0x08009649
 800969c:	08009649 	.word	0x08009649
 80096a0:	080097ef 	.word	0x080097ef
 80096a4:	08009649 	.word	0x08009649
 80096a8:	080096f7 	.word	0x080096f7
 80096ac:	08009649 	.word	0x08009649
 80096b0:	08009649 	.word	0x08009649
 80096b4:	0800978f 	.word	0x0800978f
 80096b8:	6833      	ldr	r3, [r6, #0]
 80096ba:	1d1a      	adds	r2, r3, #4
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	6032      	str	r2, [r6, #0]
 80096c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80096c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80096c8:	2301      	movs	r3, #1
 80096ca:	e09d      	b.n	8009808 <_printf_i+0x1e8>
 80096cc:	6833      	ldr	r3, [r6, #0]
 80096ce:	6820      	ldr	r0, [r4, #0]
 80096d0:	1d19      	adds	r1, r3, #4
 80096d2:	6031      	str	r1, [r6, #0]
 80096d4:	0606      	lsls	r6, r0, #24
 80096d6:	d501      	bpl.n	80096dc <_printf_i+0xbc>
 80096d8:	681d      	ldr	r5, [r3, #0]
 80096da:	e003      	b.n	80096e4 <_printf_i+0xc4>
 80096dc:	0645      	lsls	r5, r0, #25
 80096de:	d5fb      	bpl.n	80096d8 <_printf_i+0xb8>
 80096e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80096e4:	2d00      	cmp	r5, #0
 80096e6:	da03      	bge.n	80096f0 <_printf_i+0xd0>
 80096e8:	232d      	movs	r3, #45	@ 0x2d
 80096ea:	426d      	negs	r5, r5
 80096ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096f0:	4859      	ldr	r0, [pc, #356]	@ (8009858 <_printf_i+0x238>)
 80096f2:	230a      	movs	r3, #10
 80096f4:	e011      	b.n	800971a <_printf_i+0xfa>
 80096f6:	6821      	ldr	r1, [r4, #0]
 80096f8:	6833      	ldr	r3, [r6, #0]
 80096fa:	0608      	lsls	r0, r1, #24
 80096fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8009700:	d402      	bmi.n	8009708 <_printf_i+0xe8>
 8009702:	0649      	lsls	r1, r1, #25
 8009704:	bf48      	it	mi
 8009706:	b2ad      	uxthmi	r5, r5
 8009708:	2f6f      	cmp	r7, #111	@ 0x6f
 800970a:	4853      	ldr	r0, [pc, #332]	@ (8009858 <_printf_i+0x238>)
 800970c:	6033      	str	r3, [r6, #0]
 800970e:	bf14      	ite	ne
 8009710:	230a      	movne	r3, #10
 8009712:	2308      	moveq	r3, #8
 8009714:	2100      	movs	r1, #0
 8009716:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800971a:	6866      	ldr	r6, [r4, #4]
 800971c:	60a6      	str	r6, [r4, #8]
 800971e:	2e00      	cmp	r6, #0
 8009720:	bfa2      	ittt	ge
 8009722:	6821      	ldrge	r1, [r4, #0]
 8009724:	f021 0104 	bicge.w	r1, r1, #4
 8009728:	6021      	strge	r1, [r4, #0]
 800972a:	b90d      	cbnz	r5, 8009730 <_printf_i+0x110>
 800972c:	2e00      	cmp	r6, #0
 800972e:	d04b      	beq.n	80097c8 <_printf_i+0x1a8>
 8009730:	4616      	mov	r6, r2
 8009732:	fbb5 f1f3 	udiv	r1, r5, r3
 8009736:	fb03 5711 	mls	r7, r3, r1, r5
 800973a:	5dc7      	ldrb	r7, [r0, r7]
 800973c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009740:	462f      	mov	r7, r5
 8009742:	42bb      	cmp	r3, r7
 8009744:	460d      	mov	r5, r1
 8009746:	d9f4      	bls.n	8009732 <_printf_i+0x112>
 8009748:	2b08      	cmp	r3, #8
 800974a:	d10b      	bne.n	8009764 <_printf_i+0x144>
 800974c:	6823      	ldr	r3, [r4, #0]
 800974e:	07df      	lsls	r7, r3, #31
 8009750:	d508      	bpl.n	8009764 <_printf_i+0x144>
 8009752:	6923      	ldr	r3, [r4, #16]
 8009754:	6861      	ldr	r1, [r4, #4]
 8009756:	4299      	cmp	r1, r3
 8009758:	bfde      	ittt	le
 800975a:	2330      	movle	r3, #48	@ 0x30
 800975c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009760:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009764:	1b92      	subs	r2, r2, r6
 8009766:	6122      	str	r2, [r4, #16]
 8009768:	f8cd a000 	str.w	sl, [sp]
 800976c:	464b      	mov	r3, r9
 800976e:	aa03      	add	r2, sp, #12
 8009770:	4621      	mov	r1, r4
 8009772:	4640      	mov	r0, r8
 8009774:	f7ff fee6 	bl	8009544 <_printf_common>
 8009778:	3001      	adds	r0, #1
 800977a:	d14a      	bne.n	8009812 <_printf_i+0x1f2>
 800977c:	f04f 30ff 	mov.w	r0, #4294967295
 8009780:	b004      	add	sp, #16
 8009782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009786:	6823      	ldr	r3, [r4, #0]
 8009788:	f043 0320 	orr.w	r3, r3, #32
 800978c:	6023      	str	r3, [r4, #0]
 800978e:	4833      	ldr	r0, [pc, #204]	@ (800985c <_printf_i+0x23c>)
 8009790:	2778      	movs	r7, #120	@ 0x78
 8009792:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009796:	6823      	ldr	r3, [r4, #0]
 8009798:	6831      	ldr	r1, [r6, #0]
 800979a:	061f      	lsls	r7, r3, #24
 800979c:	f851 5b04 	ldr.w	r5, [r1], #4
 80097a0:	d402      	bmi.n	80097a8 <_printf_i+0x188>
 80097a2:	065f      	lsls	r7, r3, #25
 80097a4:	bf48      	it	mi
 80097a6:	b2ad      	uxthmi	r5, r5
 80097a8:	6031      	str	r1, [r6, #0]
 80097aa:	07d9      	lsls	r1, r3, #31
 80097ac:	bf44      	itt	mi
 80097ae:	f043 0320 	orrmi.w	r3, r3, #32
 80097b2:	6023      	strmi	r3, [r4, #0]
 80097b4:	b11d      	cbz	r5, 80097be <_printf_i+0x19e>
 80097b6:	2310      	movs	r3, #16
 80097b8:	e7ac      	b.n	8009714 <_printf_i+0xf4>
 80097ba:	4827      	ldr	r0, [pc, #156]	@ (8009858 <_printf_i+0x238>)
 80097bc:	e7e9      	b.n	8009792 <_printf_i+0x172>
 80097be:	6823      	ldr	r3, [r4, #0]
 80097c0:	f023 0320 	bic.w	r3, r3, #32
 80097c4:	6023      	str	r3, [r4, #0]
 80097c6:	e7f6      	b.n	80097b6 <_printf_i+0x196>
 80097c8:	4616      	mov	r6, r2
 80097ca:	e7bd      	b.n	8009748 <_printf_i+0x128>
 80097cc:	6833      	ldr	r3, [r6, #0]
 80097ce:	6825      	ldr	r5, [r4, #0]
 80097d0:	6961      	ldr	r1, [r4, #20]
 80097d2:	1d18      	adds	r0, r3, #4
 80097d4:	6030      	str	r0, [r6, #0]
 80097d6:	062e      	lsls	r6, r5, #24
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	d501      	bpl.n	80097e0 <_printf_i+0x1c0>
 80097dc:	6019      	str	r1, [r3, #0]
 80097de:	e002      	b.n	80097e6 <_printf_i+0x1c6>
 80097e0:	0668      	lsls	r0, r5, #25
 80097e2:	d5fb      	bpl.n	80097dc <_printf_i+0x1bc>
 80097e4:	8019      	strh	r1, [r3, #0]
 80097e6:	2300      	movs	r3, #0
 80097e8:	6123      	str	r3, [r4, #16]
 80097ea:	4616      	mov	r6, r2
 80097ec:	e7bc      	b.n	8009768 <_printf_i+0x148>
 80097ee:	6833      	ldr	r3, [r6, #0]
 80097f0:	1d1a      	adds	r2, r3, #4
 80097f2:	6032      	str	r2, [r6, #0]
 80097f4:	681e      	ldr	r6, [r3, #0]
 80097f6:	6862      	ldr	r2, [r4, #4]
 80097f8:	2100      	movs	r1, #0
 80097fa:	4630      	mov	r0, r6
 80097fc:	f7f6 fd70 	bl	80002e0 <memchr>
 8009800:	b108      	cbz	r0, 8009806 <_printf_i+0x1e6>
 8009802:	1b80      	subs	r0, r0, r6
 8009804:	6060      	str	r0, [r4, #4]
 8009806:	6863      	ldr	r3, [r4, #4]
 8009808:	6123      	str	r3, [r4, #16]
 800980a:	2300      	movs	r3, #0
 800980c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009810:	e7aa      	b.n	8009768 <_printf_i+0x148>
 8009812:	6923      	ldr	r3, [r4, #16]
 8009814:	4632      	mov	r2, r6
 8009816:	4649      	mov	r1, r9
 8009818:	4640      	mov	r0, r8
 800981a:	47d0      	blx	sl
 800981c:	3001      	adds	r0, #1
 800981e:	d0ad      	beq.n	800977c <_printf_i+0x15c>
 8009820:	6823      	ldr	r3, [r4, #0]
 8009822:	079b      	lsls	r3, r3, #30
 8009824:	d413      	bmi.n	800984e <_printf_i+0x22e>
 8009826:	68e0      	ldr	r0, [r4, #12]
 8009828:	9b03      	ldr	r3, [sp, #12]
 800982a:	4298      	cmp	r0, r3
 800982c:	bfb8      	it	lt
 800982e:	4618      	movlt	r0, r3
 8009830:	e7a6      	b.n	8009780 <_printf_i+0x160>
 8009832:	2301      	movs	r3, #1
 8009834:	4632      	mov	r2, r6
 8009836:	4649      	mov	r1, r9
 8009838:	4640      	mov	r0, r8
 800983a:	47d0      	blx	sl
 800983c:	3001      	adds	r0, #1
 800983e:	d09d      	beq.n	800977c <_printf_i+0x15c>
 8009840:	3501      	adds	r5, #1
 8009842:	68e3      	ldr	r3, [r4, #12]
 8009844:	9903      	ldr	r1, [sp, #12]
 8009846:	1a5b      	subs	r3, r3, r1
 8009848:	42ab      	cmp	r3, r5
 800984a:	dcf2      	bgt.n	8009832 <_printf_i+0x212>
 800984c:	e7eb      	b.n	8009826 <_printf_i+0x206>
 800984e:	2500      	movs	r5, #0
 8009850:	f104 0619 	add.w	r6, r4, #25
 8009854:	e7f5      	b.n	8009842 <_printf_i+0x222>
 8009856:	bf00      	nop
 8009858:	0800d552 	.word	0x0800d552
 800985c:	0800d563 	.word	0x0800d563

08009860 <_scanf_float>:
 8009860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009864:	b087      	sub	sp, #28
 8009866:	4617      	mov	r7, r2
 8009868:	9303      	str	r3, [sp, #12]
 800986a:	688b      	ldr	r3, [r1, #8]
 800986c:	1e5a      	subs	r2, r3, #1
 800986e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009872:	bf81      	itttt	hi
 8009874:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009878:	eb03 0b05 	addhi.w	fp, r3, r5
 800987c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009880:	608b      	strhi	r3, [r1, #8]
 8009882:	680b      	ldr	r3, [r1, #0]
 8009884:	460a      	mov	r2, r1
 8009886:	f04f 0500 	mov.w	r5, #0
 800988a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800988e:	f842 3b1c 	str.w	r3, [r2], #28
 8009892:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009896:	4680      	mov	r8, r0
 8009898:	460c      	mov	r4, r1
 800989a:	bf98      	it	ls
 800989c:	f04f 0b00 	movls.w	fp, #0
 80098a0:	9201      	str	r2, [sp, #4]
 80098a2:	4616      	mov	r6, r2
 80098a4:	46aa      	mov	sl, r5
 80098a6:	46a9      	mov	r9, r5
 80098a8:	9502      	str	r5, [sp, #8]
 80098aa:	68a2      	ldr	r2, [r4, #8]
 80098ac:	b152      	cbz	r2, 80098c4 <_scanf_float+0x64>
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	2b4e      	cmp	r3, #78	@ 0x4e
 80098b4:	d864      	bhi.n	8009980 <_scanf_float+0x120>
 80098b6:	2b40      	cmp	r3, #64	@ 0x40
 80098b8:	d83c      	bhi.n	8009934 <_scanf_float+0xd4>
 80098ba:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80098be:	b2c8      	uxtb	r0, r1
 80098c0:	280e      	cmp	r0, #14
 80098c2:	d93a      	bls.n	800993a <_scanf_float+0xda>
 80098c4:	f1b9 0f00 	cmp.w	r9, #0
 80098c8:	d003      	beq.n	80098d2 <_scanf_float+0x72>
 80098ca:	6823      	ldr	r3, [r4, #0]
 80098cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098d0:	6023      	str	r3, [r4, #0]
 80098d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80098d6:	f1ba 0f01 	cmp.w	sl, #1
 80098da:	f200 8117 	bhi.w	8009b0c <_scanf_float+0x2ac>
 80098de:	9b01      	ldr	r3, [sp, #4]
 80098e0:	429e      	cmp	r6, r3
 80098e2:	f200 8108 	bhi.w	8009af6 <_scanf_float+0x296>
 80098e6:	2001      	movs	r0, #1
 80098e8:	b007      	add	sp, #28
 80098ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ee:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80098f2:	2a0d      	cmp	r2, #13
 80098f4:	d8e6      	bhi.n	80098c4 <_scanf_float+0x64>
 80098f6:	a101      	add	r1, pc, #4	@ (adr r1, 80098fc <_scanf_float+0x9c>)
 80098f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80098fc:	08009a43 	.word	0x08009a43
 8009900:	080098c5 	.word	0x080098c5
 8009904:	080098c5 	.word	0x080098c5
 8009908:	080098c5 	.word	0x080098c5
 800990c:	08009aa3 	.word	0x08009aa3
 8009910:	08009a7b 	.word	0x08009a7b
 8009914:	080098c5 	.word	0x080098c5
 8009918:	080098c5 	.word	0x080098c5
 800991c:	08009a51 	.word	0x08009a51
 8009920:	080098c5 	.word	0x080098c5
 8009924:	080098c5 	.word	0x080098c5
 8009928:	080098c5 	.word	0x080098c5
 800992c:	080098c5 	.word	0x080098c5
 8009930:	08009a09 	.word	0x08009a09
 8009934:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009938:	e7db      	b.n	80098f2 <_scanf_float+0x92>
 800993a:	290e      	cmp	r1, #14
 800993c:	d8c2      	bhi.n	80098c4 <_scanf_float+0x64>
 800993e:	a001      	add	r0, pc, #4	@ (adr r0, 8009944 <_scanf_float+0xe4>)
 8009940:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009944:	080099f9 	.word	0x080099f9
 8009948:	080098c5 	.word	0x080098c5
 800994c:	080099f9 	.word	0x080099f9
 8009950:	08009a8f 	.word	0x08009a8f
 8009954:	080098c5 	.word	0x080098c5
 8009958:	080099a1 	.word	0x080099a1
 800995c:	080099df 	.word	0x080099df
 8009960:	080099df 	.word	0x080099df
 8009964:	080099df 	.word	0x080099df
 8009968:	080099df 	.word	0x080099df
 800996c:	080099df 	.word	0x080099df
 8009970:	080099df 	.word	0x080099df
 8009974:	080099df 	.word	0x080099df
 8009978:	080099df 	.word	0x080099df
 800997c:	080099df 	.word	0x080099df
 8009980:	2b6e      	cmp	r3, #110	@ 0x6e
 8009982:	d809      	bhi.n	8009998 <_scanf_float+0x138>
 8009984:	2b60      	cmp	r3, #96	@ 0x60
 8009986:	d8b2      	bhi.n	80098ee <_scanf_float+0x8e>
 8009988:	2b54      	cmp	r3, #84	@ 0x54
 800998a:	d07b      	beq.n	8009a84 <_scanf_float+0x224>
 800998c:	2b59      	cmp	r3, #89	@ 0x59
 800998e:	d199      	bne.n	80098c4 <_scanf_float+0x64>
 8009990:	2d07      	cmp	r5, #7
 8009992:	d197      	bne.n	80098c4 <_scanf_float+0x64>
 8009994:	2508      	movs	r5, #8
 8009996:	e02c      	b.n	80099f2 <_scanf_float+0x192>
 8009998:	2b74      	cmp	r3, #116	@ 0x74
 800999a:	d073      	beq.n	8009a84 <_scanf_float+0x224>
 800999c:	2b79      	cmp	r3, #121	@ 0x79
 800999e:	e7f6      	b.n	800998e <_scanf_float+0x12e>
 80099a0:	6821      	ldr	r1, [r4, #0]
 80099a2:	05c8      	lsls	r0, r1, #23
 80099a4:	d51b      	bpl.n	80099de <_scanf_float+0x17e>
 80099a6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80099aa:	6021      	str	r1, [r4, #0]
 80099ac:	f109 0901 	add.w	r9, r9, #1
 80099b0:	f1bb 0f00 	cmp.w	fp, #0
 80099b4:	d003      	beq.n	80099be <_scanf_float+0x15e>
 80099b6:	3201      	adds	r2, #1
 80099b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80099bc:	60a2      	str	r2, [r4, #8]
 80099be:	68a3      	ldr	r3, [r4, #8]
 80099c0:	3b01      	subs	r3, #1
 80099c2:	60a3      	str	r3, [r4, #8]
 80099c4:	6923      	ldr	r3, [r4, #16]
 80099c6:	3301      	adds	r3, #1
 80099c8:	6123      	str	r3, [r4, #16]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	3b01      	subs	r3, #1
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	607b      	str	r3, [r7, #4]
 80099d2:	f340 8087 	ble.w	8009ae4 <_scanf_float+0x284>
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	3301      	adds	r3, #1
 80099da:	603b      	str	r3, [r7, #0]
 80099dc:	e765      	b.n	80098aa <_scanf_float+0x4a>
 80099de:	eb1a 0105 	adds.w	r1, sl, r5
 80099e2:	f47f af6f 	bne.w	80098c4 <_scanf_float+0x64>
 80099e6:	6822      	ldr	r2, [r4, #0]
 80099e8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80099ec:	6022      	str	r2, [r4, #0]
 80099ee:	460d      	mov	r5, r1
 80099f0:	468a      	mov	sl, r1
 80099f2:	f806 3b01 	strb.w	r3, [r6], #1
 80099f6:	e7e2      	b.n	80099be <_scanf_float+0x15e>
 80099f8:	6822      	ldr	r2, [r4, #0]
 80099fa:	0610      	lsls	r0, r2, #24
 80099fc:	f57f af62 	bpl.w	80098c4 <_scanf_float+0x64>
 8009a00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009a04:	6022      	str	r2, [r4, #0]
 8009a06:	e7f4      	b.n	80099f2 <_scanf_float+0x192>
 8009a08:	f1ba 0f00 	cmp.w	sl, #0
 8009a0c:	d10e      	bne.n	8009a2c <_scanf_float+0x1cc>
 8009a0e:	f1b9 0f00 	cmp.w	r9, #0
 8009a12:	d10e      	bne.n	8009a32 <_scanf_float+0x1d2>
 8009a14:	6822      	ldr	r2, [r4, #0]
 8009a16:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009a1a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009a1e:	d108      	bne.n	8009a32 <_scanf_float+0x1d2>
 8009a20:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009a24:	6022      	str	r2, [r4, #0]
 8009a26:	f04f 0a01 	mov.w	sl, #1
 8009a2a:	e7e2      	b.n	80099f2 <_scanf_float+0x192>
 8009a2c:	f1ba 0f02 	cmp.w	sl, #2
 8009a30:	d055      	beq.n	8009ade <_scanf_float+0x27e>
 8009a32:	2d01      	cmp	r5, #1
 8009a34:	d002      	beq.n	8009a3c <_scanf_float+0x1dc>
 8009a36:	2d04      	cmp	r5, #4
 8009a38:	f47f af44 	bne.w	80098c4 <_scanf_float+0x64>
 8009a3c:	3501      	adds	r5, #1
 8009a3e:	b2ed      	uxtb	r5, r5
 8009a40:	e7d7      	b.n	80099f2 <_scanf_float+0x192>
 8009a42:	f1ba 0f01 	cmp.w	sl, #1
 8009a46:	f47f af3d 	bne.w	80098c4 <_scanf_float+0x64>
 8009a4a:	f04f 0a02 	mov.w	sl, #2
 8009a4e:	e7d0      	b.n	80099f2 <_scanf_float+0x192>
 8009a50:	b97d      	cbnz	r5, 8009a72 <_scanf_float+0x212>
 8009a52:	f1b9 0f00 	cmp.w	r9, #0
 8009a56:	f47f af38 	bne.w	80098ca <_scanf_float+0x6a>
 8009a5a:	6822      	ldr	r2, [r4, #0]
 8009a5c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009a60:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009a64:	f040 8101 	bne.w	8009c6a <_scanf_float+0x40a>
 8009a68:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009a6c:	6022      	str	r2, [r4, #0]
 8009a6e:	2501      	movs	r5, #1
 8009a70:	e7bf      	b.n	80099f2 <_scanf_float+0x192>
 8009a72:	2d03      	cmp	r5, #3
 8009a74:	d0e2      	beq.n	8009a3c <_scanf_float+0x1dc>
 8009a76:	2d05      	cmp	r5, #5
 8009a78:	e7de      	b.n	8009a38 <_scanf_float+0x1d8>
 8009a7a:	2d02      	cmp	r5, #2
 8009a7c:	f47f af22 	bne.w	80098c4 <_scanf_float+0x64>
 8009a80:	2503      	movs	r5, #3
 8009a82:	e7b6      	b.n	80099f2 <_scanf_float+0x192>
 8009a84:	2d06      	cmp	r5, #6
 8009a86:	f47f af1d 	bne.w	80098c4 <_scanf_float+0x64>
 8009a8a:	2507      	movs	r5, #7
 8009a8c:	e7b1      	b.n	80099f2 <_scanf_float+0x192>
 8009a8e:	6822      	ldr	r2, [r4, #0]
 8009a90:	0591      	lsls	r1, r2, #22
 8009a92:	f57f af17 	bpl.w	80098c4 <_scanf_float+0x64>
 8009a96:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009a9a:	6022      	str	r2, [r4, #0]
 8009a9c:	f8cd 9008 	str.w	r9, [sp, #8]
 8009aa0:	e7a7      	b.n	80099f2 <_scanf_float+0x192>
 8009aa2:	6822      	ldr	r2, [r4, #0]
 8009aa4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009aa8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009aac:	d006      	beq.n	8009abc <_scanf_float+0x25c>
 8009aae:	0550      	lsls	r0, r2, #21
 8009ab0:	f57f af08 	bpl.w	80098c4 <_scanf_float+0x64>
 8009ab4:	f1b9 0f00 	cmp.w	r9, #0
 8009ab8:	f000 80d7 	beq.w	8009c6a <_scanf_float+0x40a>
 8009abc:	0591      	lsls	r1, r2, #22
 8009abe:	bf58      	it	pl
 8009ac0:	9902      	ldrpl	r1, [sp, #8]
 8009ac2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009ac6:	bf58      	it	pl
 8009ac8:	eba9 0101 	subpl.w	r1, r9, r1
 8009acc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009ad0:	bf58      	it	pl
 8009ad2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009ad6:	6022      	str	r2, [r4, #0]
 8009ad8:	f04f 0900 	mov.w	r9, #0
 8009adc:	e789      	b.n	80099f2 <_scanf_float+0x192>
 8009ade:	f04f 0a03 	mov.w	sl, #3
 8009ae2:	e786      	b.n	80099f2 <_scanf_float+0x192>
 8009ae4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009ae8:	4639      	mov	r1, r7
 8009aea:	4640      	mov	r0, r8
 8009aec:	4798      	blx	r3
 8009aee:	2800      	cmp	r0, #0
 8009af0:	f43f aedb 	beq.w	80098aa <_scanf_float+0x4a>
 8009af4:	e6e6      	b.n	80098c4 <_scanf_float+0x64>
 8009af6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009afa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009afe:	463a      	mov	r2, r7
 8009b00:	4640      	mov	r0, r8
 8009b02:	4798      	blx	r3
 8009b04:	6923      	ldr	r3, [r4, #16]
 8009b06:	3b01      	subs	r3, #1
 8009b08:	6123      	str	r3, [r4, #16]
 8009b0a:	e6e8      	b.n	80098de <_scanf_float+0x7e>
 8009b0c:	1e6b      	subs	r3, r5, #1
 8009b0e:	2b06      	cmp	r3, #6
 8009b10:	d824      	bhi.n	8009b5c <_scanf_float+0x2fc>
 8009b12:	2d02      	cmp	r5, #2
 8009b14:	d836      	bhi.n	8009b84 <_scanf_float+0x324>
 8009b16:	9b01      	ldr	r3, [sp, #4]
 8009b18:	429e      	cmp	r6, r3
 8009b1a:	f67f aee4 	bls.w	80098e6 <_scanf_float+0x86>
 8009b1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b26:	463a      	mov	r2, r7
 8009b28:	4640      	mov	r0, r8
 8009b2a:	4798      	blx	r3
 8009b2c:	6923      	ldr	r3, [r4, #16]
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	6123      	str	r3, [r4, #16]
 8009b32:	e7f0      	b.n	8009b16 <_scanf_float+0x2b6>
 8009b34:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b38:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009b3c:	463a      	mov	r2, r7
 8009b3e:	4640      	mov	r0, r8
 8009b40:	4798      	blx	r3
 8009b42:	6923      	ldr	r3, [r4, #16]
 8009b44:	3b01      	subs	r3, #1
 8009b46:	6123      	str	r3, [r4, #16]
 8009b48:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009b4c:	fa5f fa8a 	uxtb.w	sl, sl
 8009b50:	f1ba 0f02 	cmp.w	sl, #2
 8009b54:	d1ee      	bne.n	8009b34 <_scanf_float+0x2d4>
 8009b56:	3d03      	subs	r5, #3
 8009b58:	b2ed      	uxtb	r5, r5
 8009b5a:	1b76      	subs	r6, r6, r5
 8009b5c:	6823      	ldr	r3, [r4, #0]
 8009b5e:	05da      	lsls	r2, r3, #23
 8009b60:	d530      	bpl.n	8009bc4 <_scanf_float+0x364>
 8009b62:	055b      	lsls	r3, r3, #21
 8009b64:	d511      	bpl.n	8009b8a <_scanf_float+0x32a>
 8009b66:	9b01      	ldr	r3, [sp, #4]
 8009b68:	429e      	cmp	r6, r3
 8009b6a:	f67f aebc 	bls.w	80098e6 <_scanf_float+0x86>
 8009b6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b76:	463a      	mov	r2, r7
 8009b78:	4640      	mov	r0, r8
 8009b7a:	4798      	blx	r3
 8009b7c:	6923      	ldr	r3, [r4, #16]
 8009b7e:	3b01      	subs	r3, #1
 8009b80:	6123      	str	r3, [r4, #16]
 8009b82:	e7f0      	b.n	8009b66 <_scanf_float+0x306>
 8009b84:	46aa      	mov	sl, r5
 8009b86:	46b3      	mov	fp, r6
 8009b88:	e7de      	b.n	8009b48 <_scanf_float+0x2e8>
 8009b8a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009b8e:	6923      	ldr	r3, [r4, #16]
 8009b90:	2965      	cmp	r1, #101	@ 0x65
 8009b92:	f103 33ff 	add.w	r3, r3, #4294967295
 8009b96:	f106 35ff 	add.w	r5, r6, #4294967295
 8009b9a:	6123      	str	r3, [r4, #16]
 8009b9c:	d00c      	beq.n	8009bb8 <_scanf_float+0x358>
 8009b9e:	2945      	cmp	r1, #69	@ 0x45
 8009ba0:	d00a      	beq.n	8009bb8 <_scanf_float+0x358>
 8009ba2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009ba6:	463a      	mov	r2, r7
 8009ba8:	4640      	mov	r0, r8
 8009baa:	4798      	blx	r3
 8009bac:	6923      	ldr	r3, [r4, #16]
 8009bae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009bb2:	3b01      	subs	r3, #1
 8009bb4:	1eb5      	subs	r5, r6, #2
 8009bb6:	6123      	str	r3, [r4, #16]
 8009bb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009bbc:	463a      	mov	r2, r7
 8009bbe:	4640      	mov	r0, r8
 8009bc0:	4798      	blx	r3
 8009bc2:	462e      	mov	r6, r5
 8009bc4:	6822      	ldr	r2, [r4, #0]
 8009bc6:	f012 0210 	ands.w	r2, r2, #16
 8009bca:	d001      	beq.n	8009bd0 <_scanf_float+0x370>
 8009bcc:	2000      	movs	r0, #0
 8009bce:	e68b      	b.n	80098e8 <_scanf_float+0x88>
 8009bd0:	7032      	strb	r2, [r6, #0]
 8009bd2:	6823      	ldr	r3, [r4, #0]
 8009bd4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009bd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bdc:	d11a      	bne.n	8009c14 <_scanf_float+0x3b4>
 8009bde:	9b02      	ldr	r3, [sp, #8]
 8009be0:	454b      	cmp	r3, r9
 8009be2:	eba3 0209 	sub.w	r2, r3, r9
 8009be6:	d121      	bne.n	8009c2c <_scanf_float+0x3cc>
 8009be8:	9901      	ldr	r1, [sp, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	4640      	mov	r0, r8
 8009bee:	f002 fb2d 	bl	800c24c <_strtod_r>
 8009bf2:	9b03      	ldr	r3, [sp, #12]
 8009bf4:	6821      	ldr	r1, [r4, #0]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f011 0f02 	tst.w	r1, #2
 8009bfc:	f103 0204 	add.w	r2, r3, #4
 8009c00:	d01f      	beq.n	8009c42 <_scanf_float+0x3e2>
 8009c02:	9903      	ldr	r1, [sp, #12]
 8009c04:	600a      	str	r2, [r1, #0]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	ed83 0b00 	vstr	d0, [r3]
 8009c0c:	68e3      	ldr	r3, [r4, #12]
 8009c0e:	3301      	adds	r3, #1
 8009c10:	60e3      	str	r3, [r4, #12]
 8009c12:	e7db      	b.n	8009bcc <_scanf_float+0x36c>
 8009c14:	9b04      	ldr	r3, [sp, #16]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d0e6      	beq.n	8009be8 <_scanf_float+0x388>
 8009c1a:	9905      	ldr	r1, [sp, #20]
 8009c1c:	230a      	movs	r3, #10
 8009c1e:	3101      	adds	r1, #1
 8009c20:	4640      	mov	r0, r8
 8009c22:	f002 fb93 	bl	800c34c <_strtol_r>
 8009c26:	9b04      	ldr	r3, [sp, #16]
 8009c28:	9e05      	ldr	r6, [sp, #20]
 8009c2a:	1ac2      	subs	r2, r0, r3
 8009c2c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009c30:	429e      	cmp	r6, r3
 8009c32:	bf28      	it	cs
 8009c34:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009c38:	490d      	ldr	r1, [pc, #52]	@ (8009c70 <_scanf_float+0x410>)
 8009c3a:	4630      	mov	r0, r6
 8009c3c:	f000 f8de 	bl	8009dfc <siprintf>
 8009c40:	e7d2      	b.n	8009be8 <_scanf_float+0x388>
 8009c42:	f011 0f04 	tst.w	r1, #4
 8009c46:	9903      	ldr	r1, [sp, #12]
 8009c48:	600a      	str	r2, [r1, #0]
 8009c4a:	d1dc      	bne.n	8009c06 <_scanf_float+0x3a6>
 8009c4c:	eeb4 0b40 	vcmp.f64	d0, d0
 8009c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c54:	681d      	ldr	r5, [r3, #0]
 8009c56:	d705      	bvc.n	8009c64 <_scanf_float+0x404>
 8009c58:	4806      	ldr	r0, [pc, #24]	@ (8009c74 <_scanf_float+0x414>)
 8009c5a:	f000 f9b3 	bl	8009fc4 <nanf>
 8009c5e:	ed85 0a00 	vstr	s0, [r5]
 8009c62:	e7d3      	b.n	8009c0c <_scanf_float+0x3ac>
 8009c64:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8009c68:	e7f9      	b.n	8009c5e <_scanf_float+0x3fe>
 8009c6a:	f04f 0900 	mov.w	r9, #0
 8009c6e:	e630      	b.n	80098d2 <_scanf_float+0x72>
 8009c70:	0800d574 	.word	0x0800d574
 8009c74:	0800d90d 	.word	0x0800d90d

08009c78 <std>:
 8009c78:	2300      	movs	r3, #0
 8009c7a:	b510      	push	{r4, lr}
 8009c7c:	4604      	mov	r4, r0
 8009c7e:	e9c0 3300 	strd	r3, r3, [r0]
 8009c82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c86:	6083      	str	r3, [r0, #8]
 8009c88:	8181      	strh	r1, [r0, #12]
 8009c8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8009c8c:	81c2      	strh	r2, [r0, #14]
 8009c8e:	6183      	str	r3, [r0, #24]
 8009c90:	4619      	mov	r1, r3
 8009c92:	2208      	movs	r2, #8
 8009c94:	305c      	adds	r0, #92	@ 0x5c
 8009c96:	f000 f914 	bl	8009ec2 <memset>
 8009c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8009cd0 <std+0x58>)
 8009c9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8009c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8009cd4 <std+0x5c>)
 8009ca0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8009cd8 <std+0x60>)
 8009ca4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8009cdc <std+0x64>)
 8009ca8:	6323      	str	r3, [r4, #48]	@ 0x30
 8009caa:	4b0d      	ldr	r3, [pc, #52]	@ (8009ce0 <std+0x68>)
 8009cac:	6224      	str	r4, [r4, #32]
 8009cae:	429c      	cmp	r4, r3
 8009cb0:	d006      	beq.n	8009cc0 <std+0x48>
 8009cb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009cb6:	4294      	cmp	r4, r2
 8009cb8:	d002      	beq.n	8009cc0 <std+0x48>
 8009cba:	33d0      	adds	r3, #208	@ 0xd0
 8009cbc:	429c      	cmp	r4, r3
 8009cbe:	d105      	bne.n	8009ccc <std+0x54>
 8009cc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cc8:	f000 b978 	b.w	8009fbc <__retarget_lock_init_recursive>
 8009ccc:	bd10      	pop	{r4, pc}
 8009cce:	bf00      	nop
 8009cd0:	08009e3d 	.word	0x08009e3d
 8009cd4:	08009e5f 	.word	0x08009e5f
 8009cd8:	08009e97 	.word	0x08009e97
 8009cdc:	08009ebb 	.word	0x08009ebb
 8009ce0:	240002e0 	.word	0x240002e0

08009ce4 <stdio_exit_handler>:
 8009ce4:	4a02      	ldr	r2, [pc, #8]	@ (8009cf0 <stdio_exit_handler+0xc>)
 8009ce6:	4903      	ldr	r1, [pc, #12]	@ (8009cf4 <stdio_exit_handler+0x10>)
 8009ce8:	4803      	ldr	r0, [pc, #12]	@ (8009cf8 <stdio_exit_handler+0x14>)
 8009cea:	f000 b869 	b.w	8009dc0 <_fwalk_sglue>
 8009cee:	bf00      	nop
 8009cf0:	24000010 	.word	0x24000010
 8009cf4:	0800c709 	.word	0x0800c709
 8009cf8:	24000020 	.word	0x24000020

08009cfc <cleanup_stdio>:
 8009cfc:	6841      	ldr	r1, [r0, #4]
 8009cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8009d30 <cleanup_stdio+0x34>)
 8009d00:	4299      	cmp	r1, r3
 8009d02:	b510      	push	{r4, lr}
 8009d04:	4604      	mov	r4, r0
 8009d06:	d001      	beq.n	8009d0c <cleanup_stdio+0x10>
 8009d08:	f002 fcfe 	bl	800c708 <_fflush_r>
 8009d0c:	68a1      	ldr	r1, [r4, #8]
 8009d0e:	4b09      	ldr	r3, [pc, #36]	@ (8009d34 <cleanup_stdio+0x38>)
 8009d10:	4299      	cmp	r1, r3
 8009d12:	d002      	beq.n	8009d1a <cleanup_stdio+0x1e>
 8009d14:	4620      	mov	r0, r4
 8009d16:	f002 fcf7 	bl	800c708 <_fflush_r>
 8009d1a:	68e1      	ldr	r1, [r4, #12]
 8009d1c:	4b06      	ldr	r3, [pc, #24]	@ (8009d38 <cleanup_stdio+0x3c>)
 8009d1e:	4299      	cmp	r1, r3
 8009d20:	d004      	beq.n	8009d2c <cleanup_stdio+0x30>
 8009d22:	4620      	mov	r0, r4
 8009d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d28:	f002 bcee 	b.w	800c708 <_fflush_r>
 8009d2c:	bd10      	pop	{r4, pc}
 8009d2e:	bf00      	nop
 8009d30:	240002e0 	.word	0x240002e0
 8009d34:	24000348 	.word	0x24000348
 8009d38:	240003b0 	.word	0x240003b0

08009d3c <global_stdio_init.part.0>:
 8009d3c:	b510      	push	{r4, lr}
 8009d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8009d6c <global_stdio_init.part.0+0x30>)
 8009d40:	4c0b      	ldr	r4, [pc, #44]	@ (8009d70 <global_stdio_init.part.0+0x34>)
 8009d42:	4a0c      	ldr	r2, [pc, #48]	@ (8009d74 <global_stdio_init.part.0+0x38>)
 8009d44:	601a      	str	r2, [r3, #0]
 8009d46:	4620      	mov	r0, r4
 8009d48:	2200      	movs	r2, #0
 8009d4a:	2104      	movs	r1, #4
 8009d4c:	f7ff ff94 	bl	8009c78 <std>
 8009d50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009d54:	2201      	movs	r2, #1
 8009d56:	2109      	movs	r1, #9
 8009d58:	f7ff ff8e 	bl	8009c78 <std>
 8009d5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009d60:	2202      	movs	r2, #2
 8009d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d66:	2112      	movs	r1, #18
 8009d68:	f7ff bf86 	b.w	8009c78 <std>
 8009d6c:	24000418 	.word	0x24000418
 8009d70:	240002e0 	.word	0x240002e0
 8009d74:	08009ce5 	.word	0x08009ce5

08009d78 <__sfp_lock_acquire>:
 8009d78:	4801      	ldr	r0, [pc, #4]	@ (8009d80 <__sfp_lock_acquire+0x8>)
 8009d7a:	f000 b920 	b.w	8009fbe <__retarget_lock_acquire_recursive>
 8009d7e:	bf00      	nop
 8009d80:	24000421 	.word	0x24000421

08009d84 <__sfp_lock_release>:
 8009d84:	4801      	ldr	r0, [pc, #4]	@ (8009d8c <__sfp_lock_release+0x8>)
 8009d86:	f000 b91b 	b.w	8009fc0 <__retarget_lock_release_recursive>
 8009d8a:	bf00      	nop
 8009d8c:	24000421 	.word	0x24000421

08009d90 <__sinit>:
 8009d90:	b510      	push	{r4, lr}
 8009d92:	4604      	mov	r4, r0
 8009d94:	f7ff fff0 	bl	8009d78 <__sfp_lock_acquire>
 8009d98:	6a23      	ldr	r3, [r4, #32]
 8009d9a:	b11b      	cbz	r3, 8009da4 <__sinit+0x14>
 8009d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009da0:	f7ff bff0 	b.w	8009d84 <__sfp_lock_release>
 8009da4:	4b04      	ldr	r3, [pc, #16]	@ (8009db8 <__sinit+0x28>)
 8009da6:	6223      	str	r3, [r4, #32]
 8009da8:	4b04      	ldr	r3, [pc, #16]	@ (8009dbc <__sinit+0x2c>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d1f5      	bne.n	8009d9c <__sinit+0xc>
 8009db0:	f7ff ffc4 	bl	8009d3c <global_stdio_init.part.0>
 8009db4:	e7f2      	b.n	8009d9c <__sinit+0xc>
 8009db6:	bf00      	nop
 8009db8:	08009cfd 	.word	0x08009cfd
 8009dbc:	24000418 	.word	0x24000418

08009dc0 <_fwalk_sglue>:
 8009dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dc4:	4607      	mov	r7, r0
 8009dc6:	4688      	mov	r8, r1
 8009dc8:	4614      	mov	r4, r2
 8009dca:	2600      	movs	r6, #0
 8009dcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009dd0:	f1b9 0901 	subs.w	r9, r9, #1
 8009dd4:	d505      	bpl.n	8009de2 <_fwalk_sglue+0x22>
 8009dd6:	6824      	ldr	r4, [r4, #0]
 8009dd8:	2c00      	cmp	r4, #0
 8009dda:	d1f7      	bne.n	8009dcc <_fwalk_sglue+0xc>
 8009ddc:	4630      	mov	r0, r6
 8009dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009de2:	89ab      	ldrh	r3, [r5, #12]
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d907      	bls.n	8009df8 <_fwalk_sglue+0x38>
 8009de8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009dec:	3301      	adds	r3, #1
 8009dee:	d003      	beq.n	8009df8 <_fwalk_sglue+0x38>
 8009df0:	4629      	mov	r1, r5
 8009df2:	4638      	mov	r0, r7
 8009df4:	47c0      	blx	r8
 8009df6:	4306      	orrs	r6, r0
 8009df8:	3568      	adds	r5, #104	@ 0x68
 8009dfa:	e7e9      	b.n	8009dd0 <_fwalk_sglue+0x10>

08009dfc <siprintf>:
 8009dfc:	b40e      	push	{r1, r2, r3}
 8009dfe:	b500      	push	{lr}
 8009e00:	b09c      	sub	sp, #112	@ 0x70
 8009e02:	ab1d      	add	r3, sp, #116	@ 0x74
 8009e04:	9002      	str	r0, [sp, #8]
 8009e06:	9006      	str	r0, [sp, #24]
 8009e08:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009e0c:	4809      	ldr	r0, [pc, #36]	@ (8009e34 <siprintf+0x38>)
 8009e0e:	9107      	str	r1, [sp, #28]
 8009e10:	9104      	str	r1, [sp, #16]
 8009e12:	4909      	ldr	r1, [pc, #36]	@ (8009e38 <siprintf+0x3c>)
 8009e14:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e18:	9105      	str	r1, [sp, #20]
 8009e1a:	6800      	ldr	r0, [r0, #0]
 8009e1c:	9301      	str	r3, [sp, #4]
 8009e1e:	a902      	add	r1, sp, #8
 8009e20:	f002 faf2 	bl	800c408 <_svfiprintf_r>
 8009e24:	9b02      	ldr	r3, [sp, #8]
 8009e26:	2200      	movs	r2, #0
 8009e28:	701a      	strb	r2, [r3, #0]
 8009e2a:	b01c      	add	sp, #112	@ 0x70
 8009e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e30:	b003      	add	sp, #12
 8009e32:	4770      	bx	lr
 8009e34:	2400001c 	.word	0x2400001c
 8009e38:	ffff0208 	.word	0xffff0208

08009e3c <__sread>:
 8009e3c:	b510      	push	{r4, lr}
 8009e3e:	460c      	mov	r4, r1
 8009e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e44:	f000 f86c 	bl	8009f20 <_read_r>
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	bfab      	itete	ge
 8009e4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009e4e:	89a3      	ldrhlt	r3, [r4, #12]
 8009e50:	181b      	addge	r3, r3, r0
 8009e52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009e56:	bfac      	ite	ge
 8009e58:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009e5a:	81a3      	strhlt	r3, [r4, #12]
 8009e5c:	bd10      	pop	{r4, pc}

08009e5e <__swrite>:
 8009e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e62:	461f      	mov	r7, r3
 8009e64:	898b      	ldrh	r3, [r1, #12]
 8009e66:	05db      	lsls	r3, r3, #23
 8009e68:	4605      	mov	r5, r0
 8009e6a:	460c      	mov	r4, r1
 8009e6c:	4616      	mov	r6, r2
 8009e6e:	d505      	bpl.n	8009e7c <__swrite+0x1e>
 8009e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e74:	2302      	movs	r3, #2
 8009e76:	2200      	movs	r2, #0
 8009e78:	f000 f840 	bl	8009efc <_lseek_r>
 8009e7c:	89a3      	ldrh	r3, [r4, #12]
 8009e7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009e86:	81a3      	strh	r3, [r4, #12]
 8009e88:	4632      	mov	r2, r6
 8009e8a:	463b      	mov	r3, r7
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e92:	f000 b857 	b.w	8009f44 <_write_r>

08009e96 <__sseek>:
 8009e96:	b510      	push	{r4, lr}
 8009e98:	460c      	mov	r4, r1
 8009e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e9e:	f000 f82d 	bl	8009efc <_lseek_r>
 8009ea2:	1c43      	adds	r3, r0, #1
 8009ea4:	89a3      	ldrh	r3, [r4, #12]
 8009ea6:	bf15      	itete	ne
 8009ea8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009eaa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009eae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009eb2:	81a3      	strheq	r3, [r4, #12]
 8009eb4:	bf18      	it	ne
 8009eb6:	81a3      	strhne	r3, [r4, #12]
 8009eb8:	bd10      	pop	{r4, pc}

08009eba <__sclose>:
 8009eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ebe:	f000 b80d 	b.w	8009edc <_close_r>

08009ec2 <memset>:
 8009ec2:	4402      	add	r2, r0
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d100      	bne.n	8009ecc <memset+0xa>
 8009eca:	4770      	bx	lr
 8009ecc:	f803 1b01 	strb.w	r1, [r3], #1
 8009ed0:	e7f9      	b.n	8009ec6 <memset+0x4>
	...

08009ed4 <_localeconv_r>:
 8009ed4:	4800      	ldr	r0, [pc, #0]	@ (8009ed8 <_localeconv_r+0x4>)
 8009ed6:	4770      	bx	lr
 8009ed8:	2400015c 	.word	0x2400015c

08009edc <_close_r>:
 8009edc:	b538      	push	{r3, r4, r5, lr}
 8009ede:	4d06      	ldr	r5, [pc, #24]	@ (8009ef8 <_close_r+0x1c>)
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	4604      	mov	r4, r0
 8009ee4:	4608      	mov	r0, r1
 8009ee6:	602b      	str	r3, [r5, #0]
 8009ee8:	f7f7 fb5e 	bl	80015a8 <_close>
 8009eec:	1c43      	adds	r3, r0, #1
 8009eee:	d102      	bne.n	8009ef6 <_close_r+0x1a>
 8009ef0:	682b      	ldr	r3, [r5, #0]
 8009ef2:	b103      	cbz	r3, 8009ef6 <_close_r+0x1a>
 8009ef4:	6023      	str	r3, [r4, #0]
 8009ef6:	bd38      	pop	{r3, r4, r5, pc}
 8009ef8:	2400041c 	.word	0x2400041c

08009efc <_lseek_r>:
 8009efc:	b538      	push	{r3, r4, r5, lr}
 8009efe:	4d07      	ldr	r5, [pc, #28]	@ (8009f1c <_lseek_r+0x20>)
 8009f00:	4604      	mov	r4, r0
 8009f02:	4608      	mov	r0, r1
 8009f04:	4611      	mov	r1, r2
 8009f06:	2200      	movs	r2, #0
 8009f08:	602a      	str	r2, [r5, #0]
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	f7f7 fb73 	bl	80015f6 <_lseek>
 8009f10:	1c43      	adds	r3, r0, #1
 8009f12:	d102      	bne.n	8009f1a <_lseek_r+0x1e>
 8009f14:	682b      	ldr	r3, [r5, #0]
 8009f16:	b103      	cbz	r3, 8009f1a <_lseek_r+0x1e>
 8009f18:	6023      	str	r3, [r4, #0]
 8009f1a:	bd38      	pop	{r3, r4, r5, pc}
 8009f1c:	2400041c 	.word	0x2400041c

08009f20 <_read_r>:
 8009f20:	b538      	push	{r3, r4, r5, lr}
 8009f22:	4d07      	ldr	r5, [pc, #28]	@ (8009f40 <_read_r+0x20>)
 8009f24:	4604      	mov	r4, r0
 8009f26:	4608      	mov	r0, r1
 8009f28:	4611      	mov	r1, r2
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	602a      	str	r2, [r5, #0]
 8009f2e:	461a      	mov	r2, r3
 8009f30:	f7f7 fb01 	bl	8001536 <_read>
 8009f34:	1c43      	adds	r3, r0, #1
 8009f36:	d102      	bne.n	8009f3e <_read_r+0x1e>
 8009f38:	682b      	ldr	r3, [r5, #0]
 8009f3a:	b103      	cbz	r3, 8009f3e <_read_r+0x1e>
 8009f3c:	6023      	str	r3, [r4, #0]
 8009f3e:	bd38      	pop	{r3, r4, r5, pc}
 8009f40:	2400041c 	.word	0x2400041c

08009f44 <_write_r>:
 8009f44:	b538      	push	{r3, r4, r5, lr}
 8009f46:	4d07      	ldr	r5, [pc, #28]	@ (8009f64 <_write_r+0x20>)
 8009f48:	4604      	mov	r4, r0
 8009f4a:	4608      	mov	r0, r1
 8009f4c:	4611      	mov	r1, r2
 8009f4e:	2200      	movs	r2, #0
 8009f50:	602a      	str	r2, [r5, #0]
 8009f52:	461a      	mov	r2, r3
 8009f54:	f7f7 fb0c 	bl	8001570 <_write>
 8009f58:	1c43      	adds	r3, r0, #1
 8009f5a:	d102      	bne.n	8009f62 <_write_r+0x1e>
 8009f5c:	682b      	ldr	r3, [r5, #0]
 8009f5e:	b103      	cbz	r3, 8009f62 <_write_r+0x1e>
 8009f60:	6023      	str	r3, [r4, #0]
 8009f62:	bd38      	pop	{r3, r4, r5, pc}
 8009f64:	2400041c 	.word	0x2400041c

08009f68 <__errno>:
 8009f68:	4b01      	ldr	r3, [pc, #4]	@ (8009f70 <__errno+0x8>)
 8009f6a:	6818      	ldr	r0, [r3, #0]
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop
 8009f70:	2400001c 	.word	0x2400001c

08009f74 <__libc_init_array>:
 8009f74:	b570      	push	{r4, r5, r6, lr}
 8009f76:	4d0d      	ldr	r5, [pc, #52]	@ (8009fac <__libc_init_array+0x38>)
 8009f78:	4c0d      	ldr	r4, [pc, #52]	@ (8009fb0 <__libc_init_array+0x3c>)
 8009f7a:	1b64      	subs	r4, r4, r5
 8009f7c:	10a4      	asrs	r4, r4, #2
 8009f7e:	2600      	movs	r6, #0
 8009f80:	42a6      	cmp	r6, r4
 8009f82:	d109      	bne.n	8009f98 <__libc_init_array+0x24>
 8009f84:	4d0b      	ldr	r5, [pc, #44]	@ (8009fb4 <__libc_init_array+0x40>)
 8009f86:	4c0c      	ldr	r4, [pc, #48]	@ (8009fb8 <__libc_init_array+0x44>)
 8009f88:	f003 fab0 	bl	800d4ec <_init>
 8009f8c:	1b64      	subs	r4, r4, r5
 8009f8e:	10a4      	asrs	r4, r4, #2
 8009f90:	2600      	movs	r6, #0
 8009f92:	42a6      	cmp	r6, r4
 8009f94:	d105      	bne.n	8009fa2 <__libc_init_array+0x2e>
 8009f96:	bd70      	pop	{r4, r5, r6, pc}
 8009f98:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f9c:	4798      	blx	r3
 8009f9e:	3601      	adds	r6, #1
 8009fa0:	e7ee      	b.n	8009f80 <__libc_init_array+0xc>
 8009fa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fa6:	4798      	blx	r3
 8009fa8:	3601      	adds	r6, #1
 8009faa:	e7f2      	b.n	8009f92 <__libc_init_array+0x1e>
 8009fac:	0800d978 	.word	0x0800d978
 8009fb0:	0800d978 	.word	0x0800d978
 8009fb4:	0800d978 	.word	0x0800d978
 8009fb8:	0800d97c 	.word	0x0800d97c

08009fbc <__retarget_lock_init_recursive>:
 8009fbc:	4770      	bx	lr

08009fbe <__retarget_lock_acquire_recursive>:
 8009fbe:	4770      	bx	lr

08009fc0 <__retarget_lock_release_recursive>:
 8009fc0:	4770      	bx	lr
	...

08009fc4 <nanf>:
 8009fc4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009fcc <nanf+0x8>
 8009fc8:	4770      	bx	lr
 8009fca:	bf00      	nop
 8009fcc:	7fc00000 	.word	0x7fc00000

08009fd0 <quorem>:
 8009fd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd4:	6903      	ldr	r3, [r0, #16]
 8009fd6:	690c      	ldr	r4, [r1, #16]
 8009fd8:	42a3      	cmp	r3, r4
 8009fda:	4607      	mov	r7, r0
 8009fdc:	db7e      	blt.n	800a0dc <quorem+0x10c>
 8009fde:	3c01      	subs	r4, #1
 8009fe0:	f101 0814 	add.w	r8, r1, #20
 8009fe4:	00a3      	lsls	r3, r4, #2
 8009fe6:	f100 0514 	add.w	r5, r0, #20
 8009fea:	9300      	str	r3, [sp, #0]
 8009fec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ff0:	9301      	str	r3, [sp, #4]
 8009ff2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009ff6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a002:	fbb2 f6f3 	udiv	r6, r2, r3
 800a006:	d32e      	bcc.n	800a066 <quorem+0x96>
 800a008:	f04f 0a00 	mov.w	sl, #0
 800a00c:	46c4      	mov	ip, r8
 800a00e:	46ae      	mov	lr, r5
 800a010:	46d3      	mov	fp, sl
 800a012:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a016:	b298      	uxth	r0, r3
 800a018:	fb06 a000 	mla	r0, r6, r0, sl
 800a01c:	0c02      	lsrs	r2, r0, #16
 800a01e:	0c1b      	lsrs	r3, r3, #16
 800a020:	fb06 2303 	mla	r3, r6, r3, r2
 800a024:	f8de 2000 	ldr.w	r2, [lr]
 800a028:	b280      	uxth	r0, r0
 800a02a:	b292      	uxth	r2, r2
 800a02c:	1a12      	subs	r2, r2, r0
 800a02e:	445a      	add	r2, fp
 800a030:	f8de 0000 	ldr.w	r0, [lr]
 800a034:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a038:	b29b      	uxth	r3, r3
 800a03a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a03e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a042:	b292      	uxth	r2, r2
 800a044:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a048:	45e1      	cmp	r9, ip
 800a04a:	f84e 2b04 	str.w	r2, [lr], #4
 800a04e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a052:	d2de      	bcs.n	800a012 <quorem+0x42>
 800a054:	9b00      	ldr	r3, [sp, #0]
 800a056:	58eb      	ldr	r3, [r5, r3]
 800a058:	b92b      	cbnz	r3, 800a066 <quorem+0x96>
 800a05a:	9b01      	ldr	r3, [sp, #4]
 800a05c:	3b04      	subs	r3, #4
 800a05e:	429d      	cmp	r5, r3
 800a060:	461a      	mov	r2, r3
 800a062:	d32f      	bcc.n	800a0c4 <quorem+0xf4>
 800a064:	613c      	str	r4, [r7, #16]
 800a066:	4638      	mov	r0, r7
 800a068:	f001 f954 	bl	800b314 <__mcmp>
 800a06c:	2800      	cmp	r0, #0
 800a06e:	db25      	blt.n	800a0bc <quorem+0xec>
 800a070:	4629      	mov	r1, r5
 800a072:	2000      	movs	r0, #0
 800a074:	f858 2b04 	ldr.w	r2, [r8], #4
 800a078:	f8d1 c000 	ldr.w	ip, [r1]
 800a07c:	fa1f fe82 	uxth.w	lr, r2
 800a080:	fa1f f38c 	uxth.w	r3, ip
 800a084:	eba3 030e 	sub.w	r3, r3, lr
 800a088:	4403      	add	r3, r0
 800a08a:	0c12      	lsrs	r2, r2, #16
 800a08c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a090:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a094:	b29b      	uxth	r3, r3
 800a096:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a09a:	45c1      	cmp	r9, r8
 800a09c:	f841 3b04 	str.w	r3, [r1], #4
 800a0a0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a0a4:	d2e6      	bcs.n	800a074 <quorem+0xa4>
 800a0a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0ae:	b922      	cbnz	r2, 800a0ba <quorem+0xea>
 800a0b0:	3b04      	subs	r3, #4
 800a0b2:	429d      	cmp	r5, r3
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	d30b      	bcc.n	800a0d0 <quorem+0x100>
 800a0b8:	613c      	str	r4, [r7, #16]
 800a0ba:	3601      	adds	r6, #1
 800a0bc:	4630      	mov	r0, r6
 800a0be:	b003      	add	sp, #12
 800a0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0c4:	6812      	ldr	r2, [r2, #0]
 800a0c6:	3b04      	subs	r3, #4
 800a0c8:	2a00      	cmp	r2, #0
 800a0ca:	d1cb      	bne.n	800a064 <quorem+0x94>
 800a0cc:	3c01      	subs	r4, #1
 800a0ce:	e7c6      	b.n	800a05e <quorem+0x8e>
 800a0d0:	6812      	ldr	r2, [r2, #0]
 800a0d2:	3b04      	subs	r3, #4
 800a0d4:	2a00      	cmp	r2, #0
 800a0d6:	d1ef      	bne.n	800a0b8 <quorem+0xe8>
 800a0d8:	3c01      	subs	r4, #1
 800a0da:	e7ea      	b.n	800a0b2 <quorem+0xe2>
 800a0dc:	2000      	movs	r0, #0
 800a0de:	e7ee      	b.n	800a0be <quorem+0xee>

0800a0e0 <_dtoa_r>:
 800a0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0e4:	ed2d 8b02 	vpush	{d8}
 800a0e8:	69c7      	ldr	r7, [r0, #28]
 800a0ea:	b091      	sub	sp, #68	@ 0x44
 800a0ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a0f0:	ec55 4b10 	vmov	r4, r5, d0
 800a0f4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800a0f6:	9107      	str	r1, [sp, #28]
 800a0f8:	4681      	mov	r9, r0
 800a0fa:	9209      	str	r2, [sp, #36]	@ 0x24
 800a0fc:	930d      	str	r3, [sp, #52]	@ 0x34
 800a0fe:	b97f      	cbnz	r7, 800a120 <_dtoa_r+0x40>
 800a100:	2010      	movs	r0, #16
 800a102:	f000 fd8d 	bl	800ac20 <malloc>
 800a106:	4602      	mov	r2, r0
 800a108:	f8c9 001c 	str.w	r0, [r9, #28]
 800a10c:	b920      	cbnz	r0, 800a118 <_dtoa_r+0x38>
 800a10e:	4ba0      	ldr	r3, [pc, #640]	@ (800a390 <_dtoa_r+0x2b0>)
 800a110:	21ef      	movs	r1, #239	@ 0xef
 800a112:	48a0      	ldr	r0, [pc, #640]	@ (800a394 <_dtoa_r+0x2b4>)
 800a114:	f002 fb74 	bl	800c800 <__assert_func>
 800a118:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a11c:	6007      	str	r7, [r0, #0]
 800a11e:	60c7      	str	r7, [r0, #12]
 800a120:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a124:	6819      	ldr	r1, [r3, #0]
 800a126:	b159      	cbz	r1, 800a140 <_dtoa_r+0x60>
 800a128:	685a      	ldr	r2, [r3, #4]
 800a12a:	604a      	str	r2, [r1, #4]
 800a12c:	2301      	movs	r3, #1
 800a12e:	4093      	lsls	r3, r2
 800a130:	608b      	str	r3, [r1, #8]
 800a132:	4648      	mov	r0, r9
 800a134:	f000 fe6a 	bl	800ae0c <_Bfree>
 800a138:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a13c:	2200      	movs	r2, #0
 800a13e:	601a      	str	r2, [r3, #0]
 800a140:	1e2b      	subs	r3, r5, #0
 800a142:	bfbb      	ittet	lt
 800a144:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a148:	9303      	strlt	r3, [sp, #12]
 800a14a:	2300      	movge	r3, #0
 800a14c:	2201      	movlt	r2, #1
 800a14e:	bfac      	ite	ge
 800a150:	6033      	strge	r3, [r6, #0]
 800a152:	6032      	strlt	r2, [r6, #0]
 800a154:	4b90      	ldr	r3, [pc, #576]	@ (800a398 <_dtoa_r+0x2b8>)
 800a156:	9e03      	ldr	r6, [sp, #12]
 800a158:	43b3      	bics	r3, r6
 800a15a:	d110      	bne.n	800a17e <_dtoa_r+0x9e>
 800a15c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a15e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a162:	6013      	str	r3, [r2, #0]
 800a164:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800a168:	4323      	orrs	r3, r4
 800a16a:	f000 84de 	beq.w	800ab2a <_dtoa_r+0xa4a>
 800a16e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a170:	4f8a      	ldr	r7, [pc, #552]	@ (800a39c <_dtoa_r+0x2bc>)
 800a172:	2b00      	cmp	r3, #0
 800a174:	f000 84e0 	beq.w	800ab38 <_dtoa_r+0xa58>
 800a178:	1cfb      	adds	r3, r7, #3
 800a17a:	f000 bcdb 	b.w	800ab34 <_dtoa_r+0xa54>
 800a17e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a182:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a18a:	d10a      	bne.n	800a1a2 <_dtoa_r+0xc2>
 800a18c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a18e:	2301      	movs	r3, #1
 800a190:	6013      	str	r3, [r2, #0]
 800a192:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a194:	b113      	cbz	r3, 800a19c <_dtoa_r+0xbc>
 800a196:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a198:	4b81      	ldr	r3, [pc, #516]	@ (800a3a0 <_dtoa_r+0x2c0>)
 800a19a:	6013      	str	r3, [r2, #0]
 800a19c:	4f81      	ldr	r7, [pc, #516]	@ (800a3a4 <_dtoa_r+0x2c4>)
 800a19e:	f000 bccb 	b.w	800ab38 <_dtoa_r+0xa58>
 800a1a2:	aa0e      	add	r2, sp, #56	@ 0x38
 800a1a4:	a90f      	add	r1, sp, #60	@ 0x3c
 800a1a6:	4648      	mov	r0, r9
 800a1a8:	eeb0 0b48 	vmov.f64	d0, d8
 800a1ac:	f001 f9d2 	bl	800b554 <__d2b>
 800a1b0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800a1b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1b6:	9001      	str	r0, [sp, #4]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d045      	beq.n	800a248 <_dtoa_r+0x168>
 800a1bc:	eeb0 7b48 	vmov.f64	d7, d8
 800a1c0:	ee18 1a90 	vmov	r1, s17
 800a1c4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a1c8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800a1cc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800a1d0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800a1d4:	2500      	movs	r5, #0
 800a1d6:	ee07 1a90 	vmov	s15, r1
 800a1da:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800a1de:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800a378 <_dtoa_r+0x298>
 800a1e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a1e6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800a380 <_dtoa_r+0x2a0>
 800a1ea:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a1ee:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800a388 <_dtoa_r+0x2a8>
 800a1f2:	ee07 3a90 	vmov	s15, r3
 800a1f6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a1fa:	eeb0 7b46 	vmov.f64	d7, d6
 800a1fe:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a202:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a206:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a20a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a20e:	ee16 8a90 	vmov	r8, s13
 800a212:	d508      	bpl.n	800a226 <_dtoa_r+0x146>
 800a214:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a218:	eeb4 6b47 	vcmp.f64	d6, d7
 800a21c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a220:	bf18      	it	ne
 800a222:	f108 38ff 	addne.w	r8, r8, #4294967295
 800a226:	f1b8 0f16 	cmp.w	r8, #22
 800a22a:	d82b      	bhi.n	800a284 <_dtoa_r+0x1a4>
 800a22c:	495e      	ldr	r1, [pc, #376]	@ (800a3a8 <_dtoa_r+0x2c8>)
 800a22e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800a232:	ed91 7b00 	vldr	d7, [r1]
 800a236:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a23a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a23e:	d501      	bpl.n	800a244 <_dtoa_r+0x164>
 800a240:	f108 38ff 	add.w	r8, r8, #4294967295
 800a244:	2100      	movs	r1, #0
 800a246:	e01e      	b.n	800a286 <_dtoa_r+0x1a6>
 800a248:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a24a:	4413      	add	r3, r2
 800a24c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800a250:	2920      	cmp	r1, #32
 800a252:	bfc1      	itttt	gt
 800a254:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800a258:	408e      	lslgt	r6, r1
 800a25a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800a25e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800a262:	bfd6      	itet	le
 800a264:	f1c1 0120 	rsble	r1, r1, #32
 800a268:	4331      	orrgt	r1, r6
 800a26a:	fa04 f101 	lslle.w	r1, r4, r1
 800a26e:	ee07 1a90 	vmov	s15, r1
 800a272:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a276:	3b01      	subs	r3, #1
 800a278:	ee17 1a90 	vmov	r1, s15
 800a27c:	2501      	movs	r5, #1
 800a27e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800a282:	e7a8      	b.n	800a1d6 <_dtoa_r+0xf6>
 800a284:	2101      	movs	r1, #1
 800a286:	1ad2      	subs	r2, r2, r3
 800a288:	1e53      	subs	r3, r2, #1
 800a28a:	9306      	str	r3, [sp, #24]
 800a28c:	bf45      	ittet	mi
 800a28e:	f1c2 0301 	rsbmi	r3, r2, #1
 800a292:	9305      	strmi	r3, [sp, #20]
 800a294:	2300      	movpl	r3, #0
 800a296:	2300      	movmi	r3, #0
 800a298:	bf4c      	ite	mi
 800a29a:	9306      	strmi	r3, [sp, #24]
 800a29c:	9305      	strpl	r3, [sp, #20]
 800a29e:	f1b8 0f00 	cmp.w	r8, #0
 800a2a2:	910c      	str	r1, [sp, #48]	@ 0x30
 800a2a4:	db18      	blt.n	800a2d8 <_dtoa_r+0x1f8>
 800a2a6:	9b06      	ldr	r3, [sp, #24]
 800a2a8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a2ac:	4443      	add	r3, r8
 800a2ae:	9306      	str	r3, [sp, #24]
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	9a07      	ldr	r2, [sp, #28]
 800a2b4:	2a09      	cmp	r2, #9
 800a2b6:	d849      	bhi.n	800a34c <_dtoa_r+0x26c>
 800a2b8:	2a05      	cmp	r2, #5
 800a2ba:	bfc4      	itt	gt
 800a2bc:	3a04      	subgt	r2, #4
 800a2be:	9207      	strgt	r2, [sp, #28]
 800a2c0:	9a07      	ldr	r2, [sp, #28]
 800a2c2:	f1a2 0202 	sub.w	r2, r2, #2
 800a2c6:	bfcc      	ite	gt
 800a2c8:	2400      	movgt	r4, #0
 800a2ca:	2401      	movle	r4, #1
 800a2cc:	2a03      	cmp	r2, #3
 800a2ce:	d848      	bhi.n	800a362 <_dtoa_r+0x282>
 800a2d0:	e8df f002 	tbb	[pc, r2]
 800a2d4:	3a2c2e0b 	.word	0x3a2c2e0b
 800a2d8:	9b05      	ldr	r3, [sp, #20]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	eba3 0308 	sub.w	r3, r3, r8
 800a2e0:	9305      	str	r3, [sp, #20]
 800a2e2:	920a      	str	r2, [sp, #40]	@ 0x28
 800a2e4:	f1c8 0300 	rsb	r3, r8, #0
 800a2e8:	e7e3      	b.n	800a2b2 <_dtoa_r+0x1d2>
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	9208      	str	r2, [sp, #32]
 800a2ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2f0:	2a00      	cmp	r2, #0
 800a2f2:	dc39      	bgt.n	800a368 <_dtoa_r+0x288>
 800a2f4:	f04f 0b01 	mov.w	fp, #1
 800a2f8:	46da      	mov	sl, fp
 800a2fa:	465a      	mov	r2, fp
 800a2fc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800a300:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800a304:	2100      	movs	r1, #0
 800a306:	2004      	movs	r0, #4
 800a308:	f100 0614 	add.w	r6, r0, #20
 800a30c:	4296      	cmp	r6, r2
 800a30e:	d930      	bls.n	800a372 <_dtoa_r+0x292>
 800a310:	6079      	str	r1, [r7, #4]
 800a312:	4648      	mov	r0, r9
 800a314:	9304      	str	r3, [sp, #16]
 800a316:	f000 fd39 	bl	800ad8c <_Balloc>
 800a31a:	9b04      	ldr	r3, [sp, #16]
 800a31c:	4607      	mov	r7, r0
 800a31e:	2800      	cmp	r0, #0
 800a320:	d146      	bne.n	800a3b0 <_dtoa_r+0x2d0>
 800a322:	4b22      	ldr	r3, [pc, #136]	@ (800a3ac <_dtoa_r+0x2cc>)
 800a324:	4602      	mov	r2, r0
 800a326:	f240 11af 	movw	r1, #431	@ 0x1af
 800a32a:	e6f2      	b.n	800a112 <_dtoa_r+0x32>
 800a32c:	2201      	movs	r2, #1
 800a32e:	e7dd      	b.n	800a2ec <_dtoa_r+0x20c>
 800a330:	2200      	movs	r2, #0
 800a332:	9208      	str	r2, [sp, #32]
 800a334:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a336:	eb08 0b02 	add.w	fp, r8, r2
 800a33a:	f10b 0a01 	add.w	sl, fp, #1
 800a33e:	4652      	mov	r2, sl
 800a340:	2a01      	cmp	r2, #1
 800a342:	bfb8      	it	lt
 800a344:	2201      	movlt	r2, #1
 800a346:	e7db      	b.n	800a300 <_dtoa_r+0x220>
 800a348:	2201      	movs	r2, #1
 800a34a:	e7f2      	b.n	800a332 <_dtoa_r+0x252>
 800a34c:	2401      	movs	r4, #1
 800a34e:	2200      	movs	r2, #0
 800a350:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800a354:	f04f 3bff 	mov.w	fp, #4294967295
 800a358:	2100      	movs	r1, #0
 800a35a:	46da      	mov	sl, fp
 800a35c:	2212      	movs	r2, #18
 800a35e:	9109      	str	r1, [sp, #36]	@ 0x24
 800a360:	e7ce      	b.n	800a300 <_dtoa_r+0x220>
 800a362:	2201      	movs	r2, #1
 800a364:	9208      	str	r2, [sp, #32]
 800a366:	e7f5      	b.n	800a354 <_dtoa_r+0x274>
 800a368:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800a36c:	46da      	mov	sl, fp
 800a36e:	465a      	mov	r2, fp
 800a370:	e7c6      	b.n	800a300 <_dtoa_r+0x220>
 800a372:	3101      	adds	r1, #1
 800a374:	0040      	lsls	r0, r0, #1
 800a376:	e7c7      	b.n	800a308 <_dtoa_r+0x228>
 800a378:	636f4361 	.word	0x636f4361
 800a37c:	3fd287a7 	.word	0x3fd287a7
 800a380:	8b60c8b3 	.word	0x8b60c8b3
 800a384:	3fc68a28 	.word	0x3fc68a28
 800a388:	509f79fb 	.word	0x509f79fb
 800a38c:	3fd34413 	.word	0x3fd34413
 800a390:	0800d586 	.word	0x0800d586
 800a394:	0800d59d 	.word	0x0800d59d
 800a398:	7ff00000 	.word	0x7ff00000
 800a39c:	0800d582 	.word	0x0800d582
 800a3a0:	0800d551 	.word	0x0800d551
 800a3a4:	0800d550 	.word	0x0800d550
 800a3a8:	0800d698 	.word	0x0800d698
 800a3ac:	0800d5f5 	.word	0x0800d5f5
 800a3b0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800a3b4:	f1ba 0f0e 	cmp.w	sl, #14
 800a3b8:	6010      	str	r0, [r2, #0]
 800a3ba:	d86f      	bhi.n	800a49c <_dtoa_r+0x3bc>
 800a3bc:	2c00      	cmp	r4, #0
 800a3be:	d06d      	beq.n	800a49c <_dtoa_r+0x3bc>
 800a3c0:	f1b8 0f00 	cmp.w	r8, #0
 800a3c4:	f340 80c2 	ble.w	800a54c <_dtoa_r+0x46c>
 800a3c8:	4aca      	ldr	r2, [pc, #808]	@ (800a6f4 <_dtoa_r+0x614>)
 800a3ca:	f008 010f 	and.w	r1, r8, #15
 800a3ce:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a3d2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800a3d6:	ed92 7b00 	vldr	d7, [r2]
 800a3da:	ea4f 1128 	mov.w	r1, r8, asr #4
 800a3de:	f000 80a9 	beq.w	800a534 <_dtoa_r+0x454>
 800a3e2:	4ac5      	ldr	r2, [pc, #788]	@ (800a6f8 <_dtoa_r+0x618>)
 800a3e4:	ed92 6b08 	vldr	d6, [r2, #32]
 800a3e8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a3ec:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a3f0:	f001 010f 	and.w	r1, r1, #15
 800a3f4:	2203      	movs	r2, #3
 800a3f6:	48c0      	ldr	r0, [pc, #768]	@ (800a6f8 <_dtoa_r+0x618>)
 800a3f8:	2900      	cmp	r1, #0
 800a3fa:	f040 809d 	bne.w	800a538 <_dtoa_r+0x458>
 800a3fe:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a402:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a406:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a40a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a40c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a410:	2900      	cmp	r1, #0
 800a412:	f000 80c1 	beq.w	800a598 <_dtoa_r+0x4b8>
 800a416:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800a41a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a41e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a422:	f140 80b9 	bpl.w	800a598 <_dtoa_r+0x4b8>
 800a426:	f1ba 0f00 	cmp.w	sl, #0
 800a42a:	f000 80b5 	beq.w	800a598 <_dtoa_r+0x4b8>
 800a42e:	f1bb 0f00 	cmp.w	fp, #0
 800a432:	dd31      	ble.n	800a498 <_dtoa_r+0x3b8>
 800a434:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800a438:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a43c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a440:	f108 31ff 	add.w	r1, r8, #4294967295
 800a444:	9104      	str	r1, [sp, #16]
 800a446:	3201      	adds	r2, #1
 800a448:	465c      	mov	r4, fp
 800a44a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a44e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800a452:	ee07 2a90 	vmov	s15, r2
 800a456:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a45a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a45e:	ee15 2a90 	vmov	r2, s11
 800a462:	ec51 0b15 	vmov	r0, r1, d5
 800a466:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800a46a:	2c00      	cmp	r4, #0
 800a46c:	f040 8098 	bne.w	800a5a0 <_dtoa_r+0x4c0>
 800a470:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800a474:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a478:	ec41 0b17 	vmov	d7, r0, r1
 800a47c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a484:	f300 8261 	bgt.w	800a94a <_dtoa_r+0x86a>
 800a488:	eeb1 7b47 	vneg.f64	d7, d7
 800a48c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a494:	f100 80f5 	bmi.w	800a682 <_dtoa_r+0x5a2>
 800a498:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a49c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a49e:	2a00      	cmp	r2, #0
 800a4a0:	f2c0 812c 	blt.w	800a6fc <_dtoa_r+0x61c>
 800a4a4:	f1b8 0f0e 	cmp.w	r8, #14
 800a4a8:	f300 8128 	bgt.w	800a6fc <_dtoa_r+0x61c>
 800a4ac:	4b91      	ldr	r3, [pc, #580]	@ (800a6f4 <_dtoa_r+0x614>)
 800a4ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a4b2:	ed93 6b00 	vldr	d6, [r3]
 800a4b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	da03      	bge.n	800a4c4 <_dtoa_r+0x3e4>
 800a4bc:	f1ba 0f00 	cmp.w	sl, #0
 800a4c0:	f340 80d2 	ble.w	800a668 <_dtoa_r+0x588>
 800a4c4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800a4c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a4cc:	463e      	mov	r6, r7
 800a4ce:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a4d2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a4d6:	ee15 3a10 	vmov	r3, s10
 800a4da:	3330      	adds	r3, #48	@ 0x30
 800a4dc:	f806 3b01 	strb.w	r3, [r6], #1
 800a4e0:	1bf3      	subs	r3, r6, r7
 800a4e2:	459a      	cmp	sl, r3
 800a4e4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a4e8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a4ec:	f040 80f8 	bne.w	800a6e0 <_dtoa_r+0x600>
 800a4f0:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a4f4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a4f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4fc:	f300 80dd 	bgt.w	800a6ba <_dtoa_r+0x5da>
 800a500:	eeb4 7b46 	vcmp.f64	d7, d6
 800a504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a508:	d104      	bne.n	800a514 <_dtoa_r+0x434>
 800a50a:	ee15 3a10 	vmov	r3, s10
 800a50e:	07db      	lsls	r3, r3, #31
 800a510:	f100 80d3 	bmi.w	800a6ba <_dtoa_r+0x5da>
 800a514:	9901      	ldr	r1, [sp, #4]
 800a516:	4648      	mov	r0, r9
 800a518:	f000 fc78 	bl	800ae0c <_Bfree>
 800a51c:	2300      	movs	r3, #0
 800a51e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a520:	7033      	strb	r3, [r6, #0]
 800a522:	f108 0301 	add.w	r3, r8, #1
 800a526:	6013      	str	r3, [r2, #0]
 800a528:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	f000 8304 	beq.w	800ab38 <_dtoa_r+0xa58>
 800a530:	601e      	str	r6, [r3, #0]
 800a532:	e301      	b.n	800ab38 <_dtoa_r+0xa58>
 800a534:	2202      	movs	r2, #2
 800a536:	e75e      	b.n	800a3f6 <_dtoa_r+0x316>
 800a538:	07cc      	lsls	r4, r1, #31
 800a53a:	d504      	bpl.n	800a546 <_dtoa_r+0x466>
 800a53c:	ed90 6b00 	vldr	d6, [r0]
 800a540:	3201      	adds	r2, #1
 800a542:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a546:	1049      	asrs	r1, r1, #1
 800a548:	3008      	adds	r0, #8
 800a54a:	e755      	b.n	800a3f8 <_dtoa_r+0x318>
 800a54c:	d022      	beq.n	800a594 <_dtoa_r+0x4b4>
 800a54e:	f1c8 0100 	rsb	r1, r8, #0
 800a552:	4a68      	ldr	r2, [pc, #416]	@ (800a6f4 <_dtoa_r+0x614>)
 800a554:	f001 000f 	and.w	r0, r1, #15
 800a558:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a55c:	ed92 7b00 	vldr	d7, [r2]
 800a560:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a564:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a568:	4863      	ldr	r0, [pc, #396]	@ (800a6f8 <_dtoa_r+0x618>)
 800a56a:	1109      	asrs	r1, r1, #4
 800a56c:	2400      	movs	r4, #0
 800a56e:	2202      	movs	r2, #2
 800a570:	b929      	cbnz	r1, 800a57e <_dtoa_r+0x49e>
 800a572:	2c00      	cmp	r4, #0
 800a574:	f43f af49 	beq.w	800a40a <_dtoa_r+0x32a>
 800a578:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a57c:	e745      	b.n	800a40a <_dtoa_r+0x32a>
 800a57e:	07ce      	lsls	r6, r1, #31
 800a580:	d505      	bpl.n	800a58e <_dtoa_r+0x4ae>
 800a582:	ed90 6b00 	vldr	d6, [r0]
 800a586:	3201      	adds	r2, #1
 800a588:	2401      	movs	r4, #1
 800a58a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a58e:	1049      	asrs	r1, r1, #1
 800a590:	3008      	adds	r0, #8
 800a592:	e7ed      	b.n	800a570 <_dtoa_r+0x490>
 800a594:	2202      	movs	r2, #2
 800a596:	e738      	b.n	800a40a <_dtoa_r+0x32a>
 800a598:	f8cd 8010 	str.w	r8, [sp, #16]
 800a59c:	4654      	mov	r4, sl
 800a59e:	e754      	b.n	800a44a <_dtoa_r+0x36a>
 800a5a0:	4a54      	ldr	r2, [pc, #336]	@ (800a6f4 <_dtoa_r+0x614>)
 800a5a2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800a5a6:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a5aa:	9a08      	ldr	r2, [sp, #32]
 800a5ac:	ec41 0b17 	vmov	d7, r0, r1
 800a5b0:	443c      	add	r4, r7
 800a5b2:	b34a      	cbz	r2, 800a608 <_dtoa_r+0x528>
 800a5b4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800a5b8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800a5bc:	463e      	mov	r6, r7
 800a5be:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a5c2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800a5c6:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a5ca:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a5ce:	ee14 2a90 	vmov	r2, s9
 800a5d2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a5d6:	3230      	adds	r2, #48	@ 0x30
 800a5d8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a5dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a5e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5e4:	f806 2b01 	strb.w	r2, [r6], #1
 800a5e8:	d438      	bmi.n	800a65c <_dtoa_r+0x57c>
 800a5ea:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a5ee:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a5f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5f6:	d462      	bmi.n	800a6be <_dtoa_r+0x5de>
 800a5f8:	42a6      	cmp	r6, r4
 800a5fa:	f43f af4d 	beq.w	800a498 <_dtoa_r+0x3b8>
 800a5fe:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a602:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a606:	e7e0      	b.n	800a5ca <_dtoa_r+0x4ea>
 800a608:	4621      	mov	r1, r4
 800a60a:	463e      	mov	r6, r7
 800a60c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a610:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800a614:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a618:	ee14 2a90 	vmov	r2, s9
 800a61c:	3230      	adds	r2, #48	@ 0x30
 800a61e:	f806 2b01 	strb.w	r2, [r6], #1
 800a622:	42a6      	cmp	r6, r4
 800a624:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a628:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a62c:	d119      	bne.n	800a662 <_dtoa_r+0x582>
 800a62e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800a632:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a636:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a63a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a63e:	dc3e      	bgt.n	800a6be <_dtoa_r+0x5de>
 800a640:	ee35 5b47 	vsub.f64	d5, d5, d7
 800a644:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800a648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a64c:	f57f af24 	bpl.w	800a498 <_dtoa_r+0x3b8>
 800a650:	460e      	mov	r6, r1
 800a652:	3901      	subs	r1, #1
 800a654:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a658:	2b30      	cmp	r3, #48	@ 0x30
 800a65a:	d0f9      	beq.n	800a650 <_dtoa_r+0x570>
 800a65c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a660:	e758      	b.n	800a514 <_dtoa_r+0x434>
 800a662:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a666:	e7d5      	b.n	800a614 <_dtoa_r+0x534>
 800a668:	d10b      	bne.n	800a682 <_dtoa_r+0x5a2>
 800a66a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800a66e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a672:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a676:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a67a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a67e:	f2c0 8161 	blt.w	800a944 <_dtoa_r+0x864>
 800a682:	2400      	movs	r4, #0
 800a684:	4625      	mov	r5, r4
 800a686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a688:	43db      	mvns	r3, r3
 800a68a:	9304      	str	r3, [sp, #16]
 800a68c:	463e      	mov	r6, r7
 800a68e:	f04f 0800 	mov.w	r8, #0
 800a692:	4621      	mov	r1, r4
 800a694:	4648      	mov	r0, r9
 800a696:	f000 fbb9 	bl	800ae0c <_Bfree>
 800a69a:	2d00      	cmp	r5, #0
 800a69c:	d0de      	beq.n	800a65c <_dtoa_r+0x57c>
 800a69e:	f1b8 0f00 	cmp.w	r8, #0
 800a6a2:	d005      	beq.n	800a6b0 <_dtoa_r+0x5d0>
 800a6a4:	45a8      	cmp	r8, r5
 800a6a6:	d003      	beq.n	800a6b0 <_dtoa_r+0x5d0>
 800a6a8:	4641      	mov	r1, r8
 800a6aa:	4648      	mov	r0, r9
 800a6ac:	f000 fbae 	bl	800ae0c <_Bfree>
 800a6b0:	4629      	mov	r1, r5
 800a6b2:	4648      	mov	r0, r9
 800a6b4:	f000 fbaa 	bl	800ae0c <_Bfree>
 800a6b8:	e7d0      	b.n	800a65c <_dtoa_r+0x57c>
 800a6ba:	f8cd 8010 	str.w	r8, [sp, #16]
 800a6be:	4633      	mov	r3, r6
 800a6c0:	461e      	mov	r6, r3
 800a6c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6c6:	2a39      	cmp	r2, #57	@ 0x39
 800a6c8:	d106      	bne.n	800a6d8 <_dtoa_r+0x5f8>
 800a6ca:	429f      	cmp	r7, r3
 800a6cc:	d1f8      	bne.n	800a6c0 <_dtoa_r+0x5e0>
 800a6ce:	9a04      	ldr	r2, [sp, #16]
 800a6d0:	3201      	adds	r2, #1
 800a6d2:	9204      	str	r2, [sp, #16]
 800a6d4:	2230      	movs	r2, #48	@ 0x30
 800a6d6:	703a      	strb	r2, [r7, #0]
 800a6d8:	781a      	ldrb	r2, [r3, #0]
 800a6da:	3201      	adds	r2, #1
 800a6dc:	701a      	strb	r2, [r3, #0]
 800a6de:	e7bd      	b.n	800a65c <_dtoa_r+0x57c>
 800a6e0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a6e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a6e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6ec:	f47f aeef 	bne.w	800a4ce <_dtoa_r+0x3ee>
 800a6f0:	e710      	b.n	800a514 <_dtoa_r+0x434>
 800a6f2:	bf00      	nop
 800a6f4:	0800d698 	.word	0x0800d698
 800a6f8:	0800d670 	.word	0x0800d670
 800a6fc:	9908      	ldr	r1, [sp, #32]
 800a6fe:	2900      	cmp	r1, #0
 800a700:	f000 80e3 	beq.w	800a8ca <_dtoa_r+0x7ea>
 800a704:	9907      	ldr	r1, [sp, #28]
 800a706:	2901      	cmp	r1, #1
 800a708:	f300 80c8 	bgt.w	800a89c <_dtoa_r+0x7bc>
 800a70c:	2d00      	cmp	r5, #0
 800a70e:	f000 80c1 	beq.w	800a894 <_dtoa_r+0x7b4>
 800a712:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a716:	9e05      	ldr	r6, [sp, #20]
 800a718:	461c      	mov	r4, r3
 800a71a:	9304      	str	r3, [sp, #16]
 800a71c:	9b05      	ldr	r3, [sp, #20]
 800a71e:	4413      	add	r3, r2
 800a720:	9305      	str	r3, [sp, #20]
 800a722:	9b06      	ldr	r3, [sp, #24]
 800a724:	2101      	movs	r1, #1
 800a726:	4413      	add	r3, r2
 800a728:	4648      	mov	r0, r9
 800a72a:	9306      	str	r3, [sp, #24]
 800a72c:	f000 fc6c 	bl	800b008 <__i2b>
 800a730:	9b04      	ldr	r3, [sp, #16]
 800a732:	4605      	mov	r5, r0
 800a734:	b166      	cbz	r6, 800a750 <_dtoa_r+0x670>
 800a736:	9a06      	ldr	r2, [sp, #24]
 800a738:	2a00      	cmp	r2, #0
 800a73a:	dd09      	ble.n	800a750 <_dtoa_r+0x670>
 800a73c:	42b2      	cmp	r2, r6
 800a73e:	9905      	ldr	r1, [sp, #20]
 800a740:	bfa8      	it	ge
 800a742:	4632      	movge	r2, r6
 800a744:	1a89      	subs	r1, r1, r2
 800a746:	9105      	str	r1, [sp, #20]
 800a748:	9906      	ldr	r1, [sp, #24]
 800a74a:	1ab6      	subs	r6, r6, r2
 800a74c:	1a8a      	subs	r2, r1, r2
 800a74e:	9206      	str	r2, [sp, #24]
 800a750:	b1fb      	cbz	r3, 800a792 <_dtoa_r+0x6b2>
 800a752:	9a08      	ldr	r2, [sp, #32]
 800a754:	2a00      	cmp	r2, #0
 800a756:	f000 80bc 	beq.w	800a8d2 <_dtoa_r+0x7f2>
 800a75a:	b19c      	cbz	r4, 800a784 <_dtoa_r+0x6a4>
 800a75c:	4629      	mov	r1, r5
 800a75e:	4622      	mov	r2, r4
 800a760:	4648      	mov	r0, r9
 800a762:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a764:	f000 fd10 	bl	800b188 <__pow5mult>
 800a768:	9a01      	ldr	r2, [sp, #4]
 800a76a:	4601      	mov	r1, r0
 800a76c:	4605      	mov	r5, r0
 800a76e:	4648      	mov	r0, r9
 800a770:	f000 fc60 	bl	800b034 <__multiply>
 800a774:	9901      	ldr	r1, [sp, #4]
 800a776:	9004      	str	r0, [sp, #16]
 800a778:	4648      	mov	r0, r9
 800a77a:	f000 fb47 	bl	800ae0c <_Bfree>
 800a77e:	9a04      	ldr	r2, [sp, #16]
 800a780:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a782:	9201      	str	r2, [sp, #4]
 800a784:	1b1a      	subs	r2, r3, r4
 800a786:	d004      	beq.n	800a792 <_dtoa_r+0x6b2>
 800a788:	9901      	ldr	r1, [sp, #4]
 800a78a:	4648      	mov	r0, r9
 800a78c:	f000 fcfc 	bl	800b188 <__pow5mult>
 800a790:	9001      	str	r0, [sp, #4]
 800a792:	2101      	movs	r1, #1
 800a794:	4648      	mov	r0, r9
 800a796:	f000 fc37 	bl	800b008 <__i2b>
 800a79a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a79c:	4604      	mov	r4, r0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	f000 81d0 	beq.w	800ab44 <_dtoa_r+0xa64>
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	4601      	mov	r1, r0
 800a7a8:	4648      	mov	r0, r9
 800a7aa:	f000 fced 	bl	800b188 <__pow5mult>
 800a7ae:	9b07      	ldr	r3, [sp, #28]
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	4604      	mov	r4, r0
 800a7b4:	f300 8095 	bgt.w	800a8e2 <_dtoa_r+0x802>
 800a7b8:	9b02      	ldr	r3, [sp, #8]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	f040 808b 	bne.w	800a8d6 <_dtoa_r+0x7f6>
 800a7c0:	9b03      	ldr	r3, [sp, #12]
 800a7c2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a7c6:	2a00      	cmp	r2, #0
 800a7c8:	f040 8087 	bne.w	800a8da <_dtoa_r+0x7fa>
 800a7cc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a7d0:	0d12      	lsrs	r2, r2, #20
 800a7d2:	0512      	lsls	r2, r2, #20
 800a7d4:	2a00      	cmp	r2, #0
 800a7d6:	f000 8082 	beq.w	800a8de <_dtoa_r+0x7fe>
 800a7da:	9b05      	ldr	r3, [sp, #20]
 800a7dc:	3301      	adds	r3, #1
 800a7de:	9305      	str	r3, [sp, #20]
 800a7e0:	9b06      	ldr	r3, [sp, #24]
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	9306      	str	r3, [sp, #24]
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a7ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	f000 81af 	beq.w	800ab50 <_dtoa_r+0xa70>
 800a7f2:	6922      	ldr	r2, [r4, #16]
 800a7f4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a7f8:	6910      	ldr	r0, [r2, #16]
 800a7fa:	f000 fbb9 	bl	800af70 <__hi0bits>
 800a7fe:	f1c0 0020 	rsb	r0, r0, #32
 800a802:	9b06      	ldr	r3, [sp, #24]
 800a804:	4418      	add	r0, r3
 800a806:	f010 001f 	ands.w	r0, r0, #31
 800a80a:	d076      	beq.n	800a8fa <_dtoa_r+0x81a>
 800a80c:	f1c0 0220 	rsb	r2, r0, #32
 800a810:	2a04      	cmp	r2, #4
 800a812:	dd69      	ble.n	800a8e8 <_dtoa_r+0x808>
 800a814:	9b05      	ldr	r3, [sp, #20]
 800a816:	f1c0 001c 	rsb	r0, r0, #28
 800a81a:	4403      	add	r3, r0
 800a81c:	9305      	str	r3, [sp, #20]
 800a81e:	9b06      	ldr	r3, [sp, #24]
 800a820:	4406      	add	r6, r0
 800a822:	4403      	add	r3, r0
 800a824:	9306      	str	r3, [sp, #24]
 800a826:	9b05      	ldr	r3, [sp, #20]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	dd05      	ble.n	800a838 <_dtoa_r+0x758>
 800a82c:	9901      	ldr	r1, [sp, #4]
 800a82e:	461a      	mov	r2, r3
 800a830:	4648      	mov	r0, r9
 800a832:	f000 fd03 	bl	800b23c <__lshift>
 800a836:	9001      	str	r0, [sp, #4]
 800a838:	9b06      	ldr	r3, [sp, #24]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	dd05      	ble.n	800a84a <_dtoa_r+0x76a>
 800a83e:	4621      	mov	r1, r4
 800a840:	461a      	mov	r2, r3
 800a842:	4648      	mov	r0, r9
 800a844:	f000 fcfa 	bl	800b23c <__lshift>
 800a848:	4604      	mov	r4, r0
 800a84a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d056      	beq.n	800a8fe <_dtoa_r+0x81e>
 800a850:	9801      	ldr	r0, [sp, #4]
 800a852:	4621      	mov	r1, r4
 800a854:	f000 fd5e 	bl	800b314 <__mcmp>
 800a858:	2800      	cmp	r0, #0
 800a85a:	da50      	bge.n	800a8fe <_dtoa_r+0x81e>
 800a85c:	f108 33ff 	add.w	r3, r8, #4294967295
 800a860:	9304      	str	r3, [sp, #16]
 800a862:	9901      	ldr	r1, [sp, #4]
 800a864:	2300      	movs	r3, #0
 800a866:	220a      	movs	r2, #10
 800a868:	4648      	mov	r0, r9
 800a86a:	f000 faf1 	bl	800ae50 <__multadd>
 800a86e:	9b08      	ldr	r3, [sp, #32]
 800a870:	9001      	str	r0, [sp, #4]
 800a872:	2b00      	cmp	r3, #0
 800a874:	f000 816e 	beq.w	800ab54 <_dtoa_r+0xa74>
 800a878:	4629      	mov	r1, r5
 800a87a:	2300      	movs	r3, #0
 800a87c:	220a      	movs	r2, #10
 800a87e:	4648      	mov	r0, r9
 800a880:	f000 fae6 	bl	800ae50 <__multadd>
 800a884:	f1bb 0f00 	cmp.w	fp, #0
 800a888:	4605      	mov	r5, r0
 800a88a:	dc64      	bgt.n	800a956 <_dtoa_r+0x876>
 800a88c:	9b07      	ldr	r3, [sp, #28]
 800a88e:	2b02      	cmp	r3, #2
 800a890:	dc3e      	bgt.n	800a910 <_dtoa_r+0x830>
 800a892:	e060      	b.n	800a956 <_dtoa_r+0x876>
 800a894:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a896:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a89a:	e73c      	b.n	800a716 <_dtoa_r+0x636>
 800a89c:	f10a 34ff 	add.w	r4, sl, #4294967295
 800a8a0:	42a3      	cmp	r3, r4
 800a8a2:	bfbf      	itttt	lt
 800a8a4:	1ae2      	sublt	r2, r4, r3
 800a8a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a8a8:	189b      	addlt	r3, r3, r2
 800a8aa:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800a8ac:	bfae      	itee	ge
 800a8ae:	1b1c      	subge	r4, r3, r4
 800a8b0:	4623      	movlt	r3, r4
 800a8b2:	2400      	movlt	r4, #0
 800a8b4:	f1ba 0f00 	cmp.w	sl, #0
 800a8b8:	bfb5      	itete	lt
 800a8ba:	9a05      	ldrlt	r2, [sp, #20]
 800a8bc:	9e05      	ldrge	r6, [sp, #20]
 800a8be:	eba2 060a 	sublt.w	r6, r2, sl
 800a8c2:	4652      	movge	r2, sl
 800a8c4:	bfb8      	it	lt
 800a8c6:	2200      	movlt	r2, #0
 800a8c8:	e727      	b.n	800a71a <_dtoa_r+0x63a>
 800a8ca:	9e05      	ldr	r6, [sp, #20]
 800a8cc:	9d08      	ldr	r5, [sp, #32]
 800a8ce:	461c      	mov	r4, r3
 800a8d0:	e730      	b.n	800a734 <_dtoa_r+0x654>
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	e758      	b.n	800a788 <_dtoa_r+0x6a8>
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	e786      	b.n	800a7e8 <_dtoa_r+0x708>
 800a8da:	9b02      	ldr	r3, [sp, #8]
 800a8dc:	e784      	b.n	800a7e8 <_dtoa_r+0x708>
 800a8de:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a8e0:	e783      	b.n	800a7ea <_dtoa_r+0x70a>
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a8e6:	e784      	b.n	800a7f2 <_dtoa_r+0x712>
 800a8e8:	d09d      	beq.n	800a826 <_dtoa_r+0x746>
 800a8ea:	9b05      	ldr	r3, [sp, #20]
 800a8ec:	321c      	adds	r2, #28
 800a8ee:	4413      	add	r3, r2
 800a8f0:	9305      	str	r3, [sp, #20]
 800a8f2:	9b06      	ldr	r3, [sp, #24]
 800a8f4:	4416      	add	r6, r2
 800a8f6:	4413      	add	r3, r2
 800a8f8:	e794      	b.n	800a824 <_dtoa_r+0x744>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	e7f5      	b.n	800a8ea <_dtoa_r+0x80a>
 800a8fe:	f1ba 0f00 	cmp.w	sl, #0
 800a902:	f8cd 8010 	str.w	r8, [sp, #16]
 800a906:	46d3      	mov	fp, sl
 800a908:	dc21      	bgt.n	800a94e <_dtoa_r+0x86e>
 800a90a:	9b07      	ldr	r3, [sp, #28]
 800a90c:	2b02      	cmp	r3, #2
 800a90e:	dd1e      	ble.n	800a94e <_dtoa_r+0x86e>
 800a910:	f1bb 0f00 	cmp.w	fp, #0
 800a914:	f47f aeb7 	bne.w	800a686 <_dtoa_r+0x5a6>
 800a918:	4621      	mov	r1, r4
 800a91a:	465b      	mov	r3, fp
 800a91c:	2205      	movs	r2, #5
 800a91e:	4648      	mov	r0, r9
 800a920:	f000 fa96 	bl	800ae50 <__multadd>
 800a924:	4601      	mov	r1, r0
 800a926:	4604      	mov	r4, r0
 800a928:	9801      	ldr	r0, [sp, #4]
 800a92a:	f000 fcf3 	bl	800b314 <__mcmp>
 800a92e:	2800      	cmp	r0, #0
 800a930:	f77f aea9 	ble.w	800a686 <_dtoa_r+0x5a6>
 800a934:	463e      	mov	r6, r7
 800a936:	2331      	movs	r3, #49	@ 0x31
 800a938:	f806 3b01 	strb.w	r3, [r6], #1
 800a93c:	9b04      	ldr	r3, [sp, #16]
 800a93e:	3301      	adds	r3, #1
 800a940:	9304      	str	r3, [sp, #16]
 800a942:	e6a4      	b.n	800a68e <_dtoa_r+0x5ae>
 800a944:	f8cd 8010 	str.w	r8, [sp, #16]
 800a948:	4654      	mov	r4, sl
 800a94a:	4625      	mov	r5, r4
 800a94c:	e7f2      	b.n	800a934 <_dtoa_r+0x854>
 800a94e:	9b08      	ldr	r3, [sp, #32]
 800a950:	2b00      	cmp	r3, #0
 800a952:	f000 8103 	beq.w	800ab5c <_dtoa_r+0xa7c>
 800a956:	2e00      	cmp	r6, #0
 800a958:	dd05      	ble.n	800a966 <_dtoa_r+0x886>
 800a95a:	4629      	mov	r1, r5
 800a95c:	4632      	mov	r2, r6
 800a95e:	4648      	mov	r0, r9
 800a960:	f000 fc6c 	bl	800b23c <__lshift>
 800a964:	4605      	mov	r5, r0
 800a966:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d058      	beq.n	800aa1e <_dtoa_r+0x93e>
 800a96c:	6869      	ldr	r1, [r5, #4]
 800a96e:	4648      	mov	r0, r9
 800a970:	f000 fa0c 	bl	800ad8c <_Balloc>
 800a974:	4606      	mov	r6, r0
 800a976:	b928      	cbnz	r0, 800a984 <_dtoa_r+0x8a4>
 800a978:	4b82      	ldr	r3, [pc, #520]	@ (800ab84 <_dtoa_r+0xaa4>)
 800a97a:	4602      	mov	r2, r0
 800a97c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a980:	f7ff bbc7 	b.w	800a112 <_dtoa_r+0x32>
 800a984:	692a      	ldr	r2, [r5, #16]
 800a986:	3202      	adds	r2, #2
 800a988:	0092      	lsls	r2, r2, #2
 800a98a:	f105 010c 	add.w	r1, r5, #12
 800a98e:	300c      	adds	r0, #12
 800a990:	f001 ff1e 	bl	800c7d0 <memcpy>
 800a994:	2201      	movs	r2, #1
 800a996:	4631      	mov	r1, r6
 800a998:	4648      	mov	r0, r9
 800a99a:	f000 fc4f 	bl	800b23c <__lshift>
 800a99e:	1c7b      	adds	r3, r7, #1
 800a9a0:	9305      	str	r3, [sp, #20]
 800a9a2:	eb07 030b 	add.w	r3, r7, fp
 800a9a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9a8:	9b02      	ldr	r3, [sp, #8]
 800a9aa:	f003 0301 	and.w	r3, r3, #1
 800a9ae:	46a8      	mov	r8, r5
 800a9b0:	9308      	str	r3, [sp, #32]
 800a9b2:	4605      	mov	r5, r0
 800a9b4:	9b05      	ldr	r3, [sp, #20]
 800a9b6:	9801      	ldr	r0, [sp, #4]
 800a9b8:	4621      	mov	r1, r4
 800a9ba:	f103 3bff 	add.w	fp, r3, #4294967295
 800a9be:	f7ff fb07 	bl	8009fd0 <quorem>
 800a9c2:	4641      	mov	r1, r8
 800a9c4:	9002      	str	r0, [sp, #8]
 800a9c6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a9ca:	9801      	ldr	r0, [sp, #4]
 800a9cc:	f000 fca2 	bl	800b314 <__mcmp>
 800a9d0:	462a      	mov	r2, r5
 800a9d2:	9006      	str	r0, [sp, #24]
 800a9d4:	4621      	mov	r1, r4
 800a9d6:	4648      	mov	r0, r9
 800a9d8:	f000 fcb8 	bl	800b34c <__mdiff>
 800a9dc:	68c2      	ldr	r2, [r0, #12]
 800a9de:	4606      	mov	r6, r0
 800a9e0:	b9fa      	cbnz	r2, 800aa22 <_dtoa_r+0x942>
 800a9e2:	4601      	mov	r1, r0
 800a9e4:	9801      	ldr	r0, [sp, #4]
 800a9e6:	f000 fc95 	bl	800b314 <__mcmp>
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	4631      	mov	r1, r6
 800a9ee:	4648      	mov	r0, r9
 800a9f0:	920a      	str	r2, [sp, #40]	@ 0x28
 800a9f2:	f000 fa0b 	bl	800ae0c <_Bfree>
 800a9f6:	9b07      	ldr	r3, [sp, #28]
 800a9f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a9fa:	9e05      	ldr	r6, [sp, #20]
 800a9fc:	ea43 0102 	orr.w	r1, r3, r2
 800aa00:	9b08      	ldr	r3, [sp, #32]
 800aa02:	4319      	orrs	r1, r3
 800aa04:	d10f      	bne.n	800aa26 <_dtoa_r+0x946>
 800aa06:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800aa0a:	d028      	beq.n	800aa5e <_dtoa_r+0x97e>
 800aa0c:	9b06      	ldr	r3, [sp, #24]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	dd02      	ble.n	800aa18 <_dtoa_r+0x938>
 800aa12:	9b02      	ldr	r3, [sp, #8]
 800aa14:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800aa18:	f88b a000 	strb.w	sl, [fp]
 800aa1c:	e639      	b.n	800a692 <_dtoa_r+0x5b2>
 800aa1e:	4628      	mov	r0, r5
 800aa20:	e7bd      	b.n	800a99e <_dtoa_r+0x8be>
 800aa22:	2201      	movs	r2, #1
 800aa24:	e7e2      	b.n	800a9ec <_dtoa_r+0x90c>
 800aa26:	9b06      	ldr	r3, [sp, #24]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	db04      	blt.n	800aa36 <_dtoa_r+0x956>
 800aa2c:	9907      	ldr	r1, [sp, #28]
 800aa2e:	430b      	orrs	r3, r1
 800aa30:	9908      	ldr	r1, [sp, #32]
 800aa32:	430b      	orrs	r3, r1
 800aa34:	d120      	bne.n	800aa78 <_dtoa_r+0x998>
 800aa36:	2a00      	cmp	r2, #0
 800aa38:	ddee      	ble.n	800aa18 <_dtoa_r+0x938>
 800aa3a:	9901      	ldr	r1, [sp, #4]
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	4648      	mov	r0, r9
 800aa40:	f000 fbfc 	bl	800b23c <__lshift>
 800aa44:	4621      	mov	r1, r4
 800aa46:	9001      	str	r0, [sp, #4]
 800aa48:	f000 fc64 	bl	800b314 <__mcmp>
 800aa4c:	2800      	cmp	r0, #0
 800aa4e:	dc03      	bgt.n	800aa58 <_dtoa_r+0x978>
 800aa50:	d1e2      	bne.n	800aa18 <_dtoa_r+0x938>
 800aa52:	f01a 0f01 	tst.w	sl, #1
 800aa56:	d0df      	beq.n	800aa18 <_dtoa_r+0x938>
 800aa58:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800aa5c:	d1d9      	bne.n	800aa12 <_dtoa_r+0x932>
 800aa5e:	2339      	movs	r3, #57	@ 0x39
 800aa60:	f88b 3000 	strb.w	r3, [fp]
 800aa64:	4633      	mov	r3, r6
 800aa66:	461e      	mov	r6, r3
 800aa68:	3b01      	subs	r3, #1
 800aa6a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800aa6e:	2a39      	cmp	r2, #57	@ 0x39
 800aa70:	d053      	beq.n	800ab1a <_dtoa_r+0xa3a>
 800aa72:	3201      	adds	r2, #1
 800aa74:	701a      	strb	r2, [r3, #0]
 800aa76:	e60c      	b.n	800a692 <_dtoa_r+0x5b2>
 800aa78:	2a00      	cmp	r2, #0
 800aa7a:	dd07      	ble.n	800aa8c <_dtoa_r+0x9ac>
 800aa7c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800aa80:	d0ed      	beq.n	800aa5e <_dtoa_r+0x97e>
 800aa82:	f10a 0301 	add.w	r3, sl, #1
 800aa86:	f88b 3000 	strb.w	r3, [fp]
 800aa8a:	e602      	b.n	800a692 <_dtoa_r+0x5b2>
 800aa8c:	9b05      	ldr	r3, [sp, #20]
 800aa8e:	9a05      	ldr	r2, [sp, #20]
 800aa90:	f803 ac01 	strb.w	sl, [r3, #-1]
 800aa94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d029      	beq.n	800aaee <_dtoa_r+0xa0e>
 800aa9a:	9901      	ldr	r1, [sp, #4]
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	220a      	movs	r2, #10
 800aaa0:	4648      	mov	r0, r9
 800aaa2:	f000 f9d5 	bl	800ae50 <__multadd>
 800aaa6:	45a8      	cmp	r8, r5
 800aaa8:	9001      	str	r0, [sp, #4]
 800aaaa:	f04f 0300 	mov.w	r3, #0
 800aaae:	f04f 020a 	mov.w	r2, #10
 800aab2:	4641      	mov	r1, r8
 800aab4:	4648      	mov	r0, r9
 800aab6:	d107      	bne.n	800aac8 <_dtoa_r+0x9e8>
 800aab8:	f000 f9ca 	bl	800ae50 <__multadd>
 800aabc:	4680      	mov	r8, r0
 800aabe:	4605      	mov	r5, r0
 800aac0:	9b05      	ldr	r3, [sp, #20]
 800aac2:	3301      	adds	r3, #1
 800aac4:	9305      	str	r3, [sp, #20]
 800aac6:	e775      	b.n	800a9b4 <_dtoa_r+0x8d4>
 800aac8:	f000 f9c2 	bl	800ae50 <__multadd>
 800aacc:	4629      	mov	r1, r5
 800aace:	4680      	mov	r8, r0
 800aad0:	2300      	movs	r3, #0
 800aad2:	220a      	movs	r2, #10
 800aad4:	4648      	mov	r0, r9
 800aad6:	f000 f9bb 	bl	800ae50 <__multadd>
 800aada:	4605      	mov	r5, r0
 800aadc:	e7f0      	b.n	800aac0 <_dtoa_r+0x9e0>
 800aade:	f1bb 0f00 	cmp.w	fp, #0
 800aae2:	bfcc      	ite	gt
 800aae4:	465e      	movgt	r6, fp
 800aae6:	2601      	movle	r6, #1
 800aae8:	443e      	add	r6, r7
 800aaea:	f04f 0800 	mov.w	r8, #0
 800aaee:	9901      	ldr	r1, [sp, #4]
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	4648      	mov	r0, r9
 800aaf4:	f000 fba2 	bl	800b23c <__lshift>
 800aaf8:	4621      	mov	r1, r4
 800aafa:	9001      	str	r0, [sp, #4]
 800aafc:	f000 fc0a 	bl	800b314 <__mcmp>
 800ab00:	2800      	cmp	r0, #0
 800ab02:	dcaf      	bgt.n	800aa64 <_dtoa_r+0x984>
 800ab04:	d102      	bne.n	800ab0c <_dtoa_r+0xa2c>
 800ab06:	f01a 0f01 	tst.w	sl, #1
 800ab0a:	d1ab      	bne.n	800aa64 <_dtoa_r+0x984>
 800ab0c:	4633      	mov	r3, r6
 800ab0e:	461e      	mov	r6, r3
 800ab10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab14:	2a30      	cmp	r2, #48	@ 0x30
 800ab16:	d0fa      	beq.n	800ab0e <_dtoa_r+0xa2e>
 800ab18:	e5bb      	b.n	800a692 <_dtoa_r+0x5b2>
 800ab1a:	429f      	cmp	r7, r3
 800ab1c:	d1a3      	bne.n	800aa66 <_dtoa_r+0x986>
 800ab1e:	9b04      	ldr	r3, [sp, #16]
 800ab20:	3301      	adds	r3, #1
 800ab22:	9304      	str	r3, [sp, #16]
 800ab24:	2331      	movs	r3, #49	@ 0x31
 800ab26:	703b      	strb	r3, [r7, #0]
 800ab28:	e5b3      	b.n	800a692 <_dtoa_r+0x5b2>
 800ab2a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ab2c:	4f16      	ldr	r7, [pc, #88]	@ (800ab88 <_dtoa_r+0xaa8>)
 800ab2e:	b11b      	cbz	r3, 800ab38 <_dtoa_r+0xa58>
 800ab30:	f107 0308 	add.w	r3, r7, #8
 800ab34:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800ab36:	6013      	str	r3, [r2, #0]
 800ab38:	4638      	mov	r0, r7
 800ab3a:	b011      	add	sp, #68	@ 0x44
 800ab3c:	ecbd 8b02 	vpop	{d8}
 800ab40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab44:	9b07      	ldr	r3, [sp, #28]
 800ab46:	2b01      	cmp	r3, #1
 800ab48:	f77f ae36 	ble.w	800a7b8 <_dtoa_r+0x6d8>
 800ab4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab50:	2001      	movs	r0, #1
 800ab52:	e656      	b.n	800a802 <_dtoa_r+0x722>
 800ab54:	f1bb 0f00 	cmp.w	fp, #0
 800ab58:	f77f aed7 	ble.w	800a90a <_dtoa_r+0x82a>
 800ab5c:	463e      	mov	r6, r7
 800ab5e:	9801      	ldr	r0, [sp, #4]
 800ab60:	4621      	mov	r1, r4
 800ab62:	f7ff fa35 	bl	8009fd0 <quorem>
 800ab66:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800ab6a:	f806 ab01 	strb.w	sl, [r6], #1
 800ab6e:	1bf2      	subs	r2, r6, r7
 800ab70:	4593      	cmp	fp, r2
 800ab72:	ddb4      	ble.n	800aade <_dtoa_r+0x9fe>
 800ab74:	9901      	ldr	r1, [sp, #4]
 800ab76:	2300      	movs	r3, #0
 800ab78:	220a      	movs	r2, #10
 800ab7a:	4648      	mov	r0, r9
 800ab7c:	f000 f968 	bl	800ae50 <__multadd>
 800ab80:	9001      	str	r0, [sp, #4]
 800ab82:	e7ec      	b.n	800ab5e <_dtoa_r+0xa7e>
 800ab84:	0800d5f5 	.word	0x0800d5f5
 800ab88:	0800d579 	.word	0x0800d579

0800ab8c <_free_r>:
 800ab8c:	b538      	push	{r3, r4, r5, lr}
 800ab8e:	4605      	mov	r5, r0
 800ab90:	2900      	cmp	r1, #0
 800ab92:	d041      	beq.n	800ac18 <_free_r+0x8c>
 800ab94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab98:	1f0c      	subs	r4, r1, #4
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	bfb8      	it	lt
 800ab9e:	18e4      	addlt	r4, r4, r3
 800aba0:	f000 f8e8 	bl	800ad74 <__malloc_lock>
 800aba4:	4a1d      	ldr	r2, [pc, #116]	@ (800ac1c <_free_r+0x90>)
 800aba6:	6813      	ldr	r3, [r2, #0]
 800aba8:	b933      	cbnz	r3, 800abb8 <_free_r+0x2c>
 800abaa:	6063      	str	r3, [r4, #4]
 800abac:	6014      	str	r4, [r2, #0]
 800abae:	4628      	mov	r0, r5
 800abb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abb4:	f000 b8e4 	b.w	800ad80 <__malloc_unlock>
 800abb8:	42a3      	cmp	r3, r4
 800abba:	d908      	bls.n	800abce <_free_r+0x42>
 800abbc:	6820      	ldr	r0, [r4, #0]
 800abbe:	1821      	adds	r1, r4, r0
 800abc0:	428b      	cmp	r3, r1
 800abc2:	bf01      	itttt	eq
 800abc4:	6819      	ldreq	r1, [r3, #0]
 800abc6:	685b      	ldreq	r3, [r3, #4]
 800abc8:	1809      	addeq	r1, r1, r0
 800abca:	6021      	streq	r1, [r4, #0]
 800abcc:	e7ed      	b.n	800abaa <_free_r+0x1e>
 800abce:	461a      	mov	r2, r3
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	b10b      	cbz	r3, 800abd8 <_free_r+0x4c>
 800abd4:	42a3      	cmp	r3, r4
 800abd6:	d9fa      	bls.n	800abce <_free_r+0x42>
 800abd8:	6811      	ldr	r1, [r2, #0]
 800abda:	1850      	adds	r0, r2, r1
 800abdc:	42a0      	cmp	r0, r4
 800abde:	d10b      	bne.n	800abf8 <_free_r+0x6c>
 800abe0:	6820      	ldr	r0, [r4, #0]
 800abe2:	4401      	add	r1, r0
 800abe4:	1850      	adds	r0, r2, r1
 800abe6:	4283      	cmp	r3, r0
 800abe8:	6011      	str	r1, [r2, #0]
 800abea:	d1e0      	bne.n	800abae <_free_r+0x22>
 800abec:	6818      	ldr	r0, [r3, #0]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	6053      	str	r3, [r2, #4]
 800abf2:	4408      	add	r0, r1
 800abf4:	6010      	str	r0, [r2, #0]
 800abf6:	e7da      	b.n	800abae <_free_r+0x22>
 800abf8:	d902      	bls.n	800ac00 <_free_r+0x74>
 800abfa:	230c      	movs	r3, #12
 800abfc:	602b      	str	r3, [r5, #0]
 800abfe:	e7d6      	b.n	800abae <_free_r+0x22>
 800ac00:	6820      	ldr	r0, [r4, #0]
 800ac02:	1821      	adds	r1, r4, r0
 800ac04:	428b      	cmp	r3, r1
 800ac06:	bf04      	itt	eq
 800ac08:	6819      	ldreq	r1, [r3, #0]
 800ac0a:	685b      	ldreq	r3, [r3, #4]
 800ac0c:	6063      	str	r3, [r4, #4]
 800ac0e:	bf04      	itt	eq
 800ac10:	1809      	addeq	r1, r1, r0
 800ac12:	6021      	streq	r1, [r4, #0]
 800ac14:	6054      	str	r4, [r2, #4]
 800ac16:	e7ca      	b.n	800abae <_free_r+0x22>
 800ac18:	bd38      	pop	{r3, r4, r5, pc}
 800ac1a:	bf00      	nop
 800ac1c:	24000428 	.word	0x24000428

0800ac20 <malloc>:
 800ac20:	4b02      	ldr	r3, [pc, #8]	@ (800ac2c <malloc+0xc>)
 800ac22:	4601      	mov	r1, r0
 800ac24:	6818      	ldr	r0, [r3, #0]
 800ac26:	f000 b825 	b.w	800ac74 <_malloc_r>
 800ac2a:	bf00      	nop
 800ac2c:	2400001c 	.word	0x2400001c

0800ac30 <sbrk_aligned>:
 800ac30:	b570      	push	{r4, r5, r6, lr}
 800ac32:	4e0f      	ldr	r6, [pc, #60]	@ (800ac70 <sbrk_aligned+0x40>)
 800ac34:	460c      	mov	r4, r1
 800ac36:	6831      	ldr	r1, [r6, #0]
 800ac38:	4605      	mov	r5, r0
 800ac3a:	b911      	cbnz	r1, 800ac42 <sbrk_aligned+0x12>
 800ac3c:	f001 fdb8 	bl	800c7b0 <_sbrk_r>
 800ac40:	6030      	str	r0, [r6, #0]
 800ac42:	4621      	mov	r1, r4
 800ac44:	4628      	mov	r0, r5
 800ac46:	f001 fdb3 	bl	800c7b0 <_sbrk_r>
 800ac4a:	1c43      	adds	r3, r0, #1
 800ac4c:	d103      	bne.n	800ac56 <sbrk_aligned+0x26>
 800ac4e:	f04f 34ff 	mov.w	r4, #4294967295
 800ac52:	4620      	mov	r0, r4
 800ac54:	bd70      	pop	{r4, r5, r6, pc}
 800ac56:	1cc4      	adds	r4, r0, #3
 800ac58:	f024 0403 	bic.w	r4, r4, #3
 800ac5c:	42a0      	cmp	r0, r4
 800ac5e:	d0f8      	beq.n	800ac52 <sbrk_aligned+0x22>
 800ac60:	1a21      	subs	r1, r4, r0
 800ac62:	4628      	mov	r0, r5
 800ac64:	f001 fda4 	bl	800c7b0 <_sbrk_r>
 800ac68:	3001      	adds	r0, #1
 800ac6a:	d1f2      	bne.n	800ac52 <sbrk_aligned+0x22>
 800ac6c:	e7ef      	b.n	800ac4e <sbrk_aligned+0x1e>
 800ac6e:	bf00      	nop
 800ac70:	24000424 	.word	0x24000424

0800ac74 <_malloc_r>:
 800ac74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac78:	1ccd      	adds	r5, r1, #3
 800ac7a:	f025 0503 	bic.w	r5, r5, #3
 800ac7e:	3508      	adds	r5, #8
 800ac80:	2d0c      	cmp	r5, #12
 800ac82:	bf38      	it	cc
 800ac84:	250c      	movcc	r5, #12
 800ac86:	2d00      	cmp	r5, #0
 800ac88:	4606      	mov	r6, r0
 800ac8a:	db01      	blt.n	800ac90 <_malloc_r+0x1c>
 800ac8c:	42a9      	cmp	r1, r5
 800ac8e:	d904      	bls.n	800ac9a <_malloc_r+0x26>
 800ac90:	230c      	movs	r3, #12
 800ac92:	6033      	str	r3, [r6, #0]
 800ac94:	2000      	movs	r0, #0
 800ac96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ad70 <_malloc_r+0xfc>
 800ac9e:	f000 f869 	bl	800ad74 <__malloc_lock>
 800aca2:	f8d8 3000 	ldr.w	r3, [r8]
 800aca6:	461c      	mov	r4, r3
 800aca8:	bb44      	cbnz	r4, 800acfc <_malloc_r+0x88>
 800acaa:	4629      	mov	r1, r5
 800acac:	4630      	mov	r0, r6
 800acae:	f7ff ffbf 	bl	800ac30 <sbrk_aligned>
 800acb2:	1c43      	adds	r3, r0, #1
 800acb4:	4604      	mov	r4, r0
 800acb6:	d158      	bne.n	800ad6a <_malloc_r+0xf6>
 800acb8:	f8d8 4000 	ldr.w	r4, [r8]
 800acbc:	4627      	mov	r7, r4
 800acbe:	2f00      	cmp	r7, #0
 800acc0:	d143      	bne.n	800ad4a <_malloc_r+0xd6>
 800acc2:	2c00      	cmp	r4, #0
 800acc4:	d04b      	beq.n	800ad5e <_malloc_r+0xea>
 800acc6:	6823      	ldr	r3, [r4, #0]
 800acc8:	4639      	mov	r1, r7
 800acca:	4630      	mov	r0, r6
 800accc:	eb04 0903 	add.w	r9, r4, r3
 800acd0:	f001 fd6e 	bl	800c7b0 <_sbrk_r>
 800acd4:	4581      	cmp	r9, r0
 800acd6:	d142      	bne.n	800ad5e <_malloc_r+0xea>
 800acd8:	6821      	ldr	r1, [r4, #0]
 800acda:	1a6d      	subs	r5, r5, r1
 800acdc:	4629      	mov	r1, r5
 800acde:	4630      	mov	r0, r6
 800ace0:	f7ff ffa6 	bl	800ac30 <sbrk_aligned>
 800ace4:	3001      	adds	r0, #1
 800ace6:	d03a      	beq.n	800ad5e <_malloc_r+0xea>
 800ace8:	6823      	ldr	r3, [r4, #0]
 800acea:	442b      	add	r3, r5
 800acec:	6023      	str	r3, [r4, #0]
 800acee:	f8d8 3000 	ldr.w	r3, [r8]
 800acf2:	685a      	ldr	r2, [r3, #4]
 800acf4:	bb62      	cbnz	r2, 800ad50 <_malloc_r+0xdc>
 800acf6:	f8c8 7000 	str.w	r7, [r8]
 800acfa:	e00f      	b.n	800ad1c <_malloc_r+0xa8>
 800acfc:	6822      	ldr	r2, [r4, #0]
 800acfe:	1b52      	subs	r2, r2, r5
 800ad00:	d420      	bmi.n	800ad44 <_malloc_r+0xd0>
 800ad02:	2a0b      	cmp	r2, #11
 800ad04:	d917      	bls.n	800ad36 <_malloc_r+0xc2>
 800ad06:	1961      	adds	r1, r4, r5
 800ad08:	42a3      	cmp	r3, r4
 800ad0a:	6025      	str	r5, [r4, #0]
 800ad0c:	bf18      	it	ne
 800ad0e:	6059      	strne	r1, [r3, #4]
 800ad10:	6863      	ldr	r3, [r4, #4]
 800ad12:	bf08      	it	eq
 800ad14:	f8c8 1000 	streq.w	r1, [r8]
 800ad18:	5162      	str	r2, [r4, r5]
 800ad1a:	604b      	str	r3, [r1, #4]
 800ad1c:	4630      	mov	r0, r6
 800ad1e:	f000 f82f 	bl	800ad80 <__malloc_unlock>
 800ad22:	f104 000b 	add.w	r0, r4, #11
 800ad26:	1d23      	adds	r3, r4, #4
 800ad28:	f020 0007 	bic.w	r0, r0, #7
 800ad2c:	1ac2      	subs	r2, r0, r3
 800ad2e:	bf1c      	itt	ne
 800ad30:	1a1b      	subne	r3, r3, r0
 800ad32:	50a3      	strne	r3, [r4, r2]
 800ad34:	e7af      	b.n	800ac96 <_malloc_r+0x22>
 800ad36:	6862      	ldr	r2, [r4, #4]
 800ad38:	42a3      	cmp	r3, r4
 800ad3a:	bf0c      	ite	eq
 800ad3c:	f8c8 2000 	streq.w	r2, [r8]
 800ad40:	605a      	strne	r2, [r3, #4]
 800ad42:	e7eb      	b.n	800ad1c <_malloc_r+0xa8>
 800ad44:	4623      	mov	r3, r4
 800ad46:	6864      	ldr	r4, [r4, #4]
 800ad48:	e7ae      	b.n	800aca8 <_malloc_r+0x34>
 800ad4a:	463c      	mov	r4, r7
 800ad4c:	687f      	ldr	r7, [r7, #4]
 800ad4e:	e7b6      	b.n	800acbe <_malloc_r+0x4a>
 800ad50:	461a      	mov	r2, r3
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	42a3      	cmp	r3, r4
 800ad56:	d1fb      	bne.n	800ad50 <_malloc_r+0xdc>
 800ad58:	2300      	movs	r3, #0
 800ad5a:	6053      	str	r3, [r2, #4]
 800ad5c:	e7de      	b.n	800ad1c <_malloc_r+0xa8>
 800ad5e:	230c      	movs	r3, #12
 800ad60:	6033      	str	r3, [r6, #0]
 800ad62:	4630      	mov	r0, r6
 800ad64:	f000 f80c 	bl	800ad80 <__malloc_unlock>
 800ad68:	e794      	b.n	800ac94 <_malloc_r+0x20>
 800ad6a:	6005      	str	r5, [r0, #0]
 800ad6c:	e7d6      	b.n	800ad1c <_malloc_r+0xa8>
 800ad6e:	bf00      	nop
 800ad70:	24000428 	.word	0x24000428

0800ad74 <__malloc_lock>:
 800ad74:	4801      	ldr	r0, [pc, #4]	@ (800ad7c <__malloc_lock+0x8>)
 800ad76:	f7ff b922 	b.w	8009fbe <__retarget_lock_acquire_recursive>
 800ad7a:	bf00      	nop
 800ad7c:	24000420 	.word	0x24000420

0800ad80 <__malloc_unlock>:
 800ad80:	4801      	ldr	r0, [pc, #4]	@ (800ad88 <__malloc_unlock+0x8>)
 800ad82:	f7ff b91d 	b.w	8009fc0 <__retarget_lock_release_recursive>
 800ad86:	bf00      	nop
 800ad88:	24000420 	.word	0x24000420

0800ad8c <_Balloc>:
 800ad8c:	b570      	push	{r4, r5, r6, lr}
 800ad8e:	69c6      	ldr	r6, [r0, #28]
 800ad90:	4604      	mov	r4, r0
 800ad92:	460d      	mov	r5, r1
 800ad94:	b976      	cbnz	r6, 800adb4 <_Balloc+0x28>
 800ad96:	2010      	movs	r0, #16
 800ad98:	f7ff ff42 	bl	800ac20 <malloc>
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	61e0      	str	r0, [r4, #28]
 800ada0:	b920      	cbnz	r0, 800adac <_Balloc+0x20>
 800ada2:	4b18      	ldr	r3, [pc, #96]	@ (800ae04 <_Balloc+0x78>)
 800ada4:	4818      	ldr	r0, [pc, #96]	@ (800ae08 <_Balloc+0x7c>)
 800ada6:	216b      	movs	r1, #107	@ 0x6b
 800ada8:	f001 fd2a 	bl	800c800 <__assert_func>
 800adac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800adb0:	6006      	str	r6, [r0, #0]
 800adb2:	60c6      	str	r6, [r0, #12]
 800adb4:	69e6      	ldr	r6, [r4, #28]
 800adb6:	68f3      	ldr	r3, [r6, #12]
 800adb8:	b183      	cbz	r3, 800addc <_Balloc+0x50>
 800adba:	69e3      	ldr	r3, [r4, #28]
 800adbc:	68db      	ldr	r3, [r3, #12]
 800adbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800adc2:	b9b8      	cbnz	r0, 800adf4 <_Balloc+0x68>
 800adc4:	2101      	movs	r1, #1
 800adc6:	fa01 f605 	lsl.w	r6, r1, r5
 800adca:	1d72      	adds	r2, r6, #5
 800adcc:	0092      	lsls	r2, r2, #2
 800adce:	4620      	mov	r0, r4
 800add0:	f001 fd34 	bl	800c83c <_calloc_r>
 800add4:	b160      	cbz	r0, 800adf0 <_Balloc+0x64>
 800add6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800adda:	e00e      	b.n	800adfa <_Balloc+0x6e>
 800addc:	2221      	movs	r2, #33	@ 0x21
 800adde:	2104      	movs	r1, #4
 800ade0:	4620      	mov	r0, r4
 800ade2:	f001 fd2b 	bl	800c83c <_calloc_r>
 800ade6:	69e3      	ldr	r3, [r4, #28]
 800ade8:	60f0      	str	r0, [r6, #12]
 800adea:	68db      	ldr	r3, [r3, #12]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d1e4      	bne.n	800adba <_Balloc+0x2e>
 800adf0:	2000      	movs	r0, #0
 800adf2:	bd70      	pop	{r4, r5, r6, pc}
 800adf4:	6802      	ldr	r2, [r0, #0]
 800adf6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800adfa:	2300      	movs	r3, #0
 800adfc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae00:	e7f7      	b.n	800adf2 <_Balloc+0x66>
 800ae02:	bf00      	nop
 800ae04:	0800d586 	.word	0x0800d586
 800ae08:	0800d606 	.word	0x0800d606

0800ae0c <_Bfree>:
 800ae0c:	b570      	push	{r4, r5, r6, lr}
 800ae0e:	69c6      	ldr	r6, [r0, #28]
 800ae10:	4605      	mov	r5, r0
 800ae12:	460c      	mov	r4, r1
 800ae14:	b976      	cbnz	r6, 800ae34 <_Bfree+0x28>
 800ae16:	2010      	movs	r0, #16
 800ae18:	f7ff ff02 	bl	800ac20 <malloc>
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	61e8      	str	r0, [r5, #28]
 800ae20:	b920      	cbnz	r0, 800ae2c <_Bfree+0x20>
 800ae22:	4b09      	ldr	r3, [pc, #36]	@ (800ae48 <_Bfree+0x3c>)
 800ae24:	4809      	ldr	r0, [pc, #36]	@ (800ae4c <_Bfree+0x40>)
 800ae26:	218f      	movs	r1, #143	@ 0x8f
 800ae28:	f001 fcea 	bl	800c800 <__assert_func>
 800ae2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae30:	6006      	str	r6, [r0, #0]
 800ae32:	60c6      	str	r6, [r0, #12]
 800ae34:	b13c      	cbz	r4, 800ae46 <_Bfree+0x3a>
 800ae36:	69eb      	ldr	r3, [r5, #28]
 800ae38:	6862      	ldr	r2, [r4, #4]
 800ae3a:	68db      	ldr	r3, [r3, #12]
 800ae3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae40:	6021      	str	r1, [r4, #0]
 800ae42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ae46:	bd70      	pop	{r4, r5, r6, pc}
 800ae48:	0800d586 	.word	0x0800d586
 800ae4c:	0800d606 	.word	0x0800d606

0800ae50 <__multadd>:
 800ae50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae54:	690d      	ldr	r5, [r1, #16]
 800ae56:	4607      	mov	r7, r0
 800ae58:	460c      	mov	r4, r1
 800ae5a:	461e      	mov	r6, r3
 800ae5c:	f101 0c14 	add.w	ip, r1, #20
 800ae60:	2000      	movs	r0, #0
 800ae62:	f8dc 3000 	ldr.w	r3, [ip]
 800ae66:	b299      	uxth	r1, r3
 800ae68:	fb02 6101 	mla	r1, r2, r1, r6
 800ae6c:	0c1e      	lsrs	r6, r3, #16
 800ae6e:	0c0b      	lsrs	r3, r1, #16
 800ae70:	fb02 3306 	mla	r3, r2, r6, r3
 800ae74:	b289      	uxth	r1, r1
 800ae76:	3001      	adds	r0, #1
 800ae78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ae7c:	4285      	cmp	r5, r0
 800ae7e:	f84c 1b04 	str.w	r1, [ip], #4
 800ae82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ae86:	dcec      	bgt.n	800ae62 <__multadd+0x12>
 800ae88:	b30e      	cbz	r6, 800aece <__multadd+0x7e>
 800ae8a:	68a3      	ldr	r3, [r4, #8]
 800ae8c:	42ab      	cmp	r3, r5
 800ae8e:	dc19      	bgt.n	800aec4 <__multadd+0x74>
 800ae90:	6861      	ldr	r1, [r4, #4]
 800ae92:	4638      	mov	r0, r7
 800ae94:	3101      	adds	r1, #1
 800ae96:	f7ff ff79 	bl	800ad8c <_Balloc>
 800ae9a:	4680      	mov	r8, r0
 800ae9c:	b928      	cbnz	r0, 800aeaa <__multadd+0x5a>
 800ae9e:	4602      	mov	r2, r0
 800aea0:	4b0c      	ldr	r3, [pc, #48]	@ (800aed4 <__multadd+0x84>)
 800aea2:	480d      	ldr	r0, [pc, #52]	@ (800aed8 <__multadd+0x88>)
 800aea4:	21ba      	movs	r1, #186	@ 0xba
 800aea6:	f001 fcab 	bl	800c800 <__assert_func>
 800aeaa:	6922      	ldr	r2, [r4, #16]
 800aeac:	3202      	adds	r2, #2
 800aeae:	f104 010c 	add.w	r1, r4, #12
 800aeb2:	0092      	lsls	r2, r2, #2
 800aeb4:	300c      	adds	r0, #12
 800aeb6:	f001 fc8b 	bl	800c7d0 <memcpy>
 800aeba:	4621      	mov	r1, r4
 800aebc:	4638      	mov	r0, r7
 800aebe:	f7ff ffa5 	bl	800ae0c <_Bfree>
 800aec2:	4644      	mov	r4, r8
 800aec4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aec8:	3501      	adds	r5, #1
 800aeca:	615e      	str	r6, [r3, #20]
 800aecc:	6125      	str	r5, [r4, #16]
 800aece:	4620      	mov	r0, r4
 800aed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aed4:	0800d5f5 	.word	0x0800d5f5
 800aed8:	0800d606 	.word	0x0800d606

0800aedc <__s2b>:
 800aedc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aee0:	460c      	mov	r4, r1
 800aee2:	4615      	mov	r5, r2
 800aee4:	461f      	mov	r7, r3
 800aee6:	2209      	movs	r2, #9
 800aee8:	3308      	adds	r3, #8
 800aeea:	4606      	mov	r6, r0
 800aeec:	fb93 f3f2 	sdiv	r3, r3, r2
 800aef0:	2100      	movs	r1, #0
 800aef2:	2201      	movs	r2, #1
 800aef4:	429a      	cmp	r2, r3
 800aef6:	db09      	blt.n	800af0c <__s2b+0x30>
 800aef8:	4630      	mov	r0, r6
 800aefa:	f7ff ff47 	bl	800ad8c <_Balloc>
 800aefe:	b940      	cbnz	r0, 800af12 <__s2b+0x36>
 800af00:	4602      	mov	r2, r0
 800af02:	4b19      	ldr	r3, [pc, #100]	@ (800af68 <__s2b+0x8c>)
 800af04:	4819      	ldr	r0, [pc, #100]	@ (800af6c <__s2b+0x90>)
 800af06:	21d3      	movs	r1, #211	@ 0xd3
 800af08:	f001 fc7a 	bl	800c800 <__assert_func>
 800af0c:	0052      	lsls	r2, r2, #1
 800af0e:	3101      	adds	r1, #1
 800af10:	e7f0      	b.n	800aef4 <__s2b+0x18>
 800af12:	9b08      	ldr	r3, [sp, #32]
 800af14:	6143      	str	r3, [r0, #20]
 800af16:	2d09      	cmp	r5, #9
 800af18:	f04f 0301 	mov.w	r3, #1
 800af1c:	6103      	str	r3, [r0, #16]
 800af1e:	dd16      	ble.n	800af4e <__s2b+0x72>
 800af20:	f104 0909 	add.w	r9, r4, #9
 800af24:	46c8      	mov	r8, r9
 800af26:	442c      	add	r4, r5
 800af28:	f818 3b01 	ldrb.w	r3, [r8], #1
 800af2c:	4601      	mov	r1, r0
 800af2e:	3b30      	subs	r3, #48	@ 0x30
 800af30:	220a      	movs	r2, #10
 800af32:	4630      	mov	r0, r6
 800af34:	f7ff ff8c 	bl	800ae50 <__multadd>
 800af38:	45a0      	cmp	r8, r4
 800af3a:	d1f5      	bne.n	800af28 <__s2b+0x4c>
 800af3c:	f1a5 0408 	sub.w	r4, r5, #8
 800af40:	444c      	add	r4, r9
 800af42:	1b2d      	subs	r5, r5, r4
 800af44:	1963      	adds	r3, r4, r5
 800af46:	42bb      	cmp	r3, r7
 800af48:	db04      	blt.n	800af54 <__s2b+0x78>
 800af4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af4e:	340a      	adds	r4, #10
 800af50:	2509      	movs	r5, #9
 800af52:	e7f6      	b.n	800af42 <__s2b+0x66>
 800af54:	f814 3b01 	ldrb.w	r3, [r4], #1
 800af58:	4601      	mov	r1, r0
 800af5a:	3b30      	subs	r3, #48	@ 0x30
 800af5c:	220a      	movs	r2, #10
 800af5e:	4630      	mov	r0, r6
 800af60:	f7ff ff76 	bl	800ae50 <__multadd>
 800af64:	e7ee      	b.n	800af44 <__s2b+0x68>
 800af66:	bf00      	nop
 800af68:	0800d5f5 	.word	0x0800d5f5
 800af6c:	0800d606 	.word	0x0800d606

0800af70 <__hi0bits>:
 800af70:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800af74:	4603      	mov	r3, r0
 800af76:	bf36      	itet	cc
 800af78:	0403      	lslcc	r3, r0, #16
 800af7a:	2000      	movcs	r0, #0
 800af7c:	2010      	movcc	r0, #16
 800af7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800af82:	bf3c      	itt	cc
 800af84:	021b      	lslcc	r3, r3, #8
 800af86:	3008      	addcc	r0, #8
 800af88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af8c:	bf3c      	itt	cc
 800af8e:	011b      	lslcc	r3, r3, #4
 800af90:	3004      	addcc	r0, #4
 800af92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af96:	bf3c      	itt	cc
 800af98:	009b      	lslcc	r3, r3, #2
 800af9a:	3002      	addcc	r0, #2
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	db05      	blt.n	800afac <__hi0bits+0x3c>
 800afa0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800afa4:	f100 0001 	add.w	r0, r0, #1
 800afa8:	bf08      	it	eq
 800afaa:	2020      	moveq	r0, #32
 800afac:	4770      	bx	lr

0800afae <__lo0bits>:
 800afae:	6803      	ldr	r3, [r0, #0]
 800afb0:	4602      	mov	r2, r0
 800afb2:	f013 0007 	ands.w	r0, r3, #7
 800afb6:	d00b      	beq.n	800afd0 <__lo0bits+0x22>
 800afb8:	07d9      	lsls	r1, r3, #31
 800afba:	d421      	bmi.n	800b000 <__lo0bits+0x52>
 800afbc:	0798      	lsls	r0, r3, #30
 800afbe:	bf49      	itett	mi
 800afc0:	085b      	lsrmi	r3, r3, #1
 800afc2:	089b      	lsrpl	r3, r3, #2
 800afc4:	2001      	movmi	r0, #1
 800afc6:	6013      	strmi	r3, [r2, #0]
 800afc8:	bf5c      	itt	pl
 800afca:	6013      	strpl	r3, [r2, #0]
 800afcc:	2002      	movpl	r0, #2
 800afce:	4770      	bx	lr
 800afd0:	b299      	uxth	r1, r3
 800afd2:	b909      	cbnz	r1, 800afd8 <__lo0bits+0x2a>
 800afd4:	0c1b      	lsrs	r3, r3, #16
 800afd6:	2010      	movs	r0, #16
 800afd8:	b2d9      	uxtb	r1, r3
 800afda:	b909      	cbnz	r1, 800afe0 <__lo0bits+0x32>
 800afdc:	3008      	adds	r0, #8
 800afde:	0a1b      	lsrs	r3, r3, #8
 800afe0:	0719      	lsls	r1, r3, #28
 800afe2:	bf04      	itt	eq
 800afe4:	091b      	lsreq	r3, r3, #4
 800afe6:	3004      	addeq	r0, #4
 800afe8:	0799      	lsls	r1, r3, #30
 800afea:	bf04      	itt	eq
 800afec:	089b      	lsreq	r3, r3, #2
 800afee:	3002      	addeq	r0, #2
 800aff0:	07d9      	lsls	r1, r3, #31
 800aff2:	d403      	bmi.n	800affc <__lo0bits+0x4e>
 800aff4:	085b      	lsrs	r3, r3, #1
 800aff6:	f100 0001 	add.w	r0, r0, #1
 800affa:	d003      	beq.n	800b004 <__lo0bits+0x56>
 800affc:	6013      	str	r3, [r2, #0]
 800affe:	4770      	bx	lr
 800b000:	2000      	movs	r0, #0
 800b002:	4770      	bx	lr
 800b004:	2020      	movs	r0, #32
 800b006:	4770      	bx	lr

0800b008 <__i2b>:
 800b008:	b510      	push	{r4, lr}
 800b00a:	460c      	mov	r4, r1
 800b00c:	2101      	movs	r1, #1
 800b00e:	f7ff febd 	bl	800ad8c <_Balloc>
 800b012:	4602      	mov	r2, r0
 800b014:	b928      	cbnz	r0, 800b022 <__i2b+0x1a>
 800b016:	4b05      	ldr	r3, [pc, #20]	@ (800b02c <__i2b+0x24>)
 800b018:	4805      	ldr	r0, [pc, #20]	@ (800b030 <__i2b+0x28>)
 800b01a:	f240 1145 	movw	r1, #325	@ 0x145
 800b01e:	f001 fbef 	bl	800c800 <__assert_func>
 800b022:	2301      	movs	r3, #1
 800b024:	6144      	str	r4, [r0, #20]
 800b026:	6103      	str	r3, [r0, #16]
 800b028:	bd10      	pop	{r4, pc}
 800b02a:	bf00      	nop
 800b02c:	0800d5f5 	.word	0x0800d5f5
 800b030:	0800d606 	.word	0x0800d606

0800b034 <__multiply>:
 800b034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b038:	4614      	mov	r4, r2
 800b03a:	690a      	ldr	r2, [r1, #16]
 800b03c:	6923      	ldr	r3, [r4, #16]
 800b03e:	429a      	cmp	r2, r3
 800b040:	bfa8      	it	ge
 800b042:	4623      	movge	r3, r4
 800b044:	460f      	mov	r7, r1
 800b046:	bfa4      	itt	ge
 800b048:	460c      	movge	r4, r1
 800b04a:	461f      	movge	r7, r3
 800b04c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b050:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b054:	68a3      	ldr	r3, [r4, #8]
 800b056:	6861      	ldr	r1, [r4, #4]
 800b058:	eb0a 0609 	add.w	r6, sl, r9
 800b05c:	42b3      	cmp	r3, r6
 800b05e:	b085      	sub	sp, #20
 800b060:	bfb8      	it	lt
 800b062:	3101      	addlt	r1, #1
 800b064:	f7ff fe92 	bl	800ad8c <_Balloc>
 800b068:	b930      	cbnz	r0, 800b078 <__multiply+0x44>
 800b06a:	4602      	mov	r2, r0
 800b06c:	4b44      	ldr	r3, [pc, #272]	@ (800b180 <__multiply+0x14c>)
 800b06e:	4845      	ldr	r0, [pc, #276]	@ (800b184 <__multiply+0x150>)
 800b070:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b074:	f001 fbc4 	bl	800c800 <__assert_func>
 800b078:	f100 0514 	add.w	r5, r0, #20
 800b07c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b080:	462b      	mov	r3, r5
 800b082:	2200      	movs	r2, #0
 800b084:	4543      	cmp	r3, r8
 800b086:	d321      	bcc.n	800b0cc <__multiply+0x98>
 800b088:	f107 0114 	add.w	r1, r7, #20
 800b08c:	f104 0214 	add.w	r2, r4, #20
 800b090:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b094:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b098:	9302      	str	r3, [sp, #8]
 800b09a:	1b13      	subs	r3, r2, r4
 800b09c:	3b15      	subs	r3, #21
 800b09e:	f023 0303 	bic.w	r3, r3, #3
 800b0a2:	3304      	adds	r3, #4
 800b0a4:	f104 0715 	add.w	r7, r4, #21
 800b0a8:	42ba      	cmp	r2, r7
 800b0aa:	bf38      	it	cc
 800b0ac:	2304      	movcc	r3, #4
 800b0ae:	9301      	str	r3, [sp, #4]
 800b0b0:	9b02      	ldr	r3, [sp, #8]
 800b0b2:	9103      	str	r1, [sp, #12]
 800b0b4:	428b      	cmp	r3, r1
 800b0b6:	d80c      	bhi.n	800b0d2 <__multiply+0x9e>
 800b0b8:	2e00      	cmp	r6, #0
 800b0ba:	dd03      	ble.n	800b0c4 <__multiply+0x90>
 800b0bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d05b      	beq.n	800b17c <__multiply+0x148>
 800b0c4:	6106      	str	r6, [r0, #16]
 800b0c6:	b005      	add	sp, #20
 800b0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0cc:	f843 2b04 	str.w	r2, [r3], #4
 800b0d0:	e7d8      	b.n	800b084 <__multiply+0x50>
 800b0d2:	f8b1 a000 	ldrh.w	sl, [r1]
 800b0d6:	f1ba 0f00 	cmp.w	sl, #0
 800b0da:	d024      	beq.n	800b126 <__multiply+0xf2>
 800b0dc:	f104 0e14 	add.w	lr, r4, #20
 800b0e0:	46a9      	mov	r9, r5
 800b0e2:	f04f 0c00 	mov.w	ip, #0
 800b0e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b0ea:	f8d9 3000 	ldr.w	r3, [r9]
 800b0ee:	fa1f fb87 	uxth.w	fp, r7
 800b0f2:	b29b      	uxth	r3, r3
 800b0f4:	fb0a 330b 	mla	r3, sl, fp, r3
 800b0f8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b0fc:	f8d9 7000 	ldr.w	r7, [r9]
 800b100:	4463      	add	r3, ip
 800b102:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b106:	fb0a c70b 	mla	r7, sl, fp, ip
 800b10a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b10e:	b29b      	uxth	r3, r3
 800b110:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b114:	4572      	cmp	r2, lr
 800b116:	f849 3b04 	str.w	r3, [r9], #4
 800b11a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b11e:	d8e2      	bhi.n	800b0e6 <__multiply+0xb2>
 800b120:	9b01      	ldr	r3, [sp, #4]
 800b122:	f845 c003 	str.w	ip, [r5, r3]
 800b126:	9b03      	ldr	r3, [sp, #12]
 800b128:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b12c:	3104      	adds	r1, #4
 800b12e:	f1b9 0f00 	cmp.w	r9, #0
 800b132:	d021      	beq.n	800b178 <__multiply+0x144>
 800b134:	682b      	ldr	r3, [r5, #0]
 800b136:	f104 0c14 	add.w	ip, r4, #20
 800b13a:	46ae      	mov	lr, r5
 800b13c:	f04f 0a00 	mov.w	sl, #0
 800b140:	f8bc b000 	ldrh.w	fp, [ip]
 800b144:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b148:	fb09 770b 	mla	r7, r9, fp, r7
 800b14c:	4457      	add	r7, sl
 800b14e:	b29b      	uxth	r3, r3
 800b150:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b154:	f84e 3b04 	str.w	r3, [lr], #4
 800b158:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b15c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b160:	f8be 3000 	ldrh.w	r3, [lr]
 800b164:	fb09 330a 	mla	r3, r9, sl, r3
 800b168:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b16c:	4562      	cmp	r2, ip
 800b16e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b172:	d8e5      	bhi.n	800b140 <__multiply+0x10c>
 800b174:	9f01      	ldr	r7, [sp, #4]
 800b176:	51eb      	str	r3, [r5, r7]
 800b178:	3504      	adds	r5, #4
 800b17a:	e799      	b.n	800b0b0 <__multiply+0x7c>
 800b17c:	3e01      	subs	r6, #1
 800b17e:	e79b      	b.n	800b0b8 <__multiply+0x84>
 800b180:	0800d5f5 	.word	0x0800d5f5
 800b184:	0800d606 	.word	0x0800d606

0800b188 <__pow5mult>:
 800b188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b18c:	4615      	mov	r5, r2
 800b18e:	f012 0203 	ands.w	r2, r2, #3
 800b192:	4607      	mov	r7, r0
 800b194:	460e      	mov	r6, r1
 800b196:	d007      	beq.n	800b1a8 <__pow5mult+0x20>
 800b198:	4c25      	ldr	r4, [pc, #148]	@ (800b230 <__pow5mult+0xa8>)
 800b19a:	3a01      	subs	r2, #1
 800b19c:	2300      	movs	r3, #0
 800b19e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b1a2:	f7ff fe55 	bl	800ae50 <__multadd>
 800b1a6:	4606      	mov	r6, r0
 800b1a8:	10ad      	asrs	r5, r5, #2
 800b1aa:	d03d      	beq.n	800b228 <__pow5mult+0xa0>
 800b1ac:	69fc      	ldr	r4, [r7, #28]
 800b1ae:	b97c      	cbnz	r4, 800b1d0 <__pow5mult+0x48>
 800b1b0:	2010      	movs	r0, #16
 800b1b2:	f7ff fd35 	bl	800ac20 <malloc>
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	61f8      	str	r0, [r7, #28]
 800b1ba:	b928      	cbnz	r0, 800b1c8 <__pow5mult+0x40>
 800b1bc:	4b1d      	ldr	r3, [pc, #116]	@ (800b234 <__pow5mult+0xac>)
 800b1be:	481e      	ldr	r0, [pc, #120]	@ (800b238 <__pow5mult+0xb0>)
 800b1c0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b1c4:	f001 fb1c 	bl	800c800 <__assert_func>
 800b1c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b1cc:	6004      	str	r4, [r0, #0]
 800b1ce:	60c4      	str	r4, [r0, #12]
 800b1d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b1d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b1d8:	b94c      	cbnz	r4, 800b1ee <__pow5mult+0x66>
 800b1da:	f240 2171 	movw	r1, #625	@ 0x271
 800b1de:	4638      	mov	r0, r7
 800b1e0:	f7ff ff12 	bl	800b008 <__i2b>
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b1ea:	4604      	mov	r4, r0
 800b1ec:	6003      	str	r3, [r0, #0]
 800b1ee:	f04f 0900 	mov.w	r9, #0
 800b1f2:	07eb      	lsls	r3, r5, #31
 800b1f4:	d50a      	bpl.n	800b20c <__pow5mult+0x84>
 800b1f6:	4631      	mov	r1, r6
 800b1f8:	4622      	mov	r2, r4
 800b1fa:	4638      	mov	r0, r7
 800b1fc:	f7ff ff1a 	bl	800b034 <__multiply>
 800b200:	4631      	mov	r1, r6
 800b202:	4680      	mov	r8, r0
 800b204:	4638      	mov	r0, r7
 800b206:	f7ff fe01 	bl	800ae0c <_Bfree>
 800b20a:	4646      	mov	r6, r8
 800b20c:	106d      	asrs	r5, r5, #1
 800b20e:	d00b      	beq.n	800b228 <__pow5mult+0xa0>
 800b210:	6820      	ldr	r0, [r4, #0]
 800b212:	b938      	cbnz	r0, 800b224 <__pow5mult+0x9c>
 800b214:	4622      	mov	r2, r4
 800b216:	4621      	mov	r1, r4
 800b218:	4638      	mov	r0, r7
 800b21a:	f7ff ff0b 	bl	800b034 <__multiply>
 800b21e:	6020      	str	r0, [r4, #0]
 800b220:	f8c0 9000 	str.w	r9, [r0]
 800b224:	4604      	mov	r4, r0
 800b226:	e7e4      	b.n	800b1f2 <__pow5mult+0x6a>
 800b228:	4630      	mov	r0, r6
 800b22a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b22e:	bf00      	nop
 800b230:	0800d660 	.word	0x0800d660
 800b234:	0800d586 	.word	0x0800d586
 800b238:	0800d606 	.word	0x0800d606

0800b23c <__lshift>:
 800b23c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b240:	460c      	mov	r4, r1
 800b242:	6849      	ldr	r1, [r1, #4]
 800b244:	6923      	ldr	r3, [r4, #16]
 800b246:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b24a:	68a3      	ldr	r3, [r4, #8]
 800b24c:	4607      	mov	r7, r0
 800b24e:	4691      	mov	r9, r2
 800b250:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b254:	f108 0601 	add.w	r6, r8, #1
 800b258:	42b3      	cmp	r3, r6
 800b25a:	db0b      	blt.n	800b274 <__lshift+0x38>
 800b25c:	4638      	mov	r0, r7
 800b25e:	f7ff fd95 	bl	800ad8c <_Balloc>
 800b262:	4605      	mov	r5, r0
 800b264:	b948      	cbnz	r0, 800b27a <__lshift+0x3e>
 800b266:	4602      	mov	r2, r0
 800b268:	4b28      	ldr	r3, [pc, #160]	@ (800b30c <__lshift+0xd0>)
 800b26a:	4829      	ldr	r0, [pc, #164]	@ (800b310 <__lshift+0xd4>)
 800b26c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b270:	f001 fac6 	bl	800c800 <__assert_func>
 800b274:	3101      	adds	r1, #1
 800b276:	005b      	lsls	r3, r3, #1
 800b278:	e7ee      	b.n	800b258 <__lshift+0x1c>
 800b27a:	2300      	movs	r3, #0
 800b27c:	f100 0114 	add.w	r1, r0, #20
 800b280:	f100 0210 	add.w	r2, r0, #16
 800b284:	4618      	mov	r0, r3
 800b286:	4553      	cmp	r3, sl
 800b288:	db33      	blt.n	800b2f2 <__lshift+0xb6>
 800b28a:	6920      	ldr	r0, [r4, #16]
 800b28c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b290:	f104 0314 	add.w	r3, r4, #20
 800b294:	f019 091f 	ands.w	r9, r9, #31
 800b298:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b29c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b2a0:	d02b      	beq.n	800b2fa <__lshift+0xbe>
 800b2a2:	f1c9 0e20 	rsb	lr, r9, #32
 800b2a6:	468a      	mov	sl, r1
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	6818      	ldr	r0, [r3, #0]
 800b2ac:	fa00 f009 	lsl.w	r0, r0, r9
 800b2b0:	4310      	orrs	r0, r2
 800b2b2:	f84a 0b04 	str.w	r0, [sl], #4
 800b2b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2ba:	459c      	cmp	ip, r3
 800b2bc:	fa22 f20e 	lsr.w	r2, r2, lr
 800b2c0:	d8f3      	bhi.n	800b2aa <__lshift+0x6e>
 800b2c2:	ebac 0304 	sub.w	r3, ip, r4
 800b2c6:	3b15      	subs	r3, #21
 800b2c8:	f023 0303 	bic.w	r3, r3, #3
 800b2cc:	3304      	adds	r3, #4
 800b2ce:	f104 0015 	add.w	r0, r4, #21
 800b2d2:	4584      	cmp	ip, r0
 800b2d4:	bf38      	it	cc
 800b2d6:	2304      	movcc	r3, #4
 800b2d8:	50ca      	str	r2, [r1, r3]
 800b2da:	b10a      	cbz	r2, 800b2e0 <__lshift+0xa4>
 800b2dc:	f108 0602 	add.w	r6, r8, #2
 800b2e0:	3e01      	subs	r6, #1
 800b2e2:	4638      	mov	r0, r7
 800b2e4:	612e      	str	r6, [r5, #16]
 800b2e6:	4621      	mov	r1, r4
 800b2e8:	f7ff fd90 	bl	800ae0c <_Bfree>
 800b2ec:	4628      	mov	r0, r5
 800b2ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	e7c5      	b.n	800b286 <__lshift+0x4a>
 800b2fa:	3904      	subs	r1, #4
 800b2fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b300:	f841 2f04 	str.w	r2, [r1, #4]!
 800b304:	459c      	cmp	ip, r3
 800b306:	d8f9      	bhi.n	800b2fc <__lshift+0xc0>
 800b308:	e7ea      	b.n	800b2e0 <__lshift+0xa4>
 800b30a:	bf00      	nop
 800b30c:	0800d5f5 	.word	0x0800d5f5
 800b310:	0800d606 	.word	0x0800d606

0800b314 <__mcmp>:
 800b314:	690a      	ldr	r2, [r1, #16]
 800b316:	4603      	mov	r3, r0
 800b318:	6900      	ldr	r0, [r0, #16]
 800b31a:	1a80      	subs	r0, r0, r2
 800b31c:	b530      	push	{r4, r5, lr}
 800b31e:	d10e      	bne.n	800b33e <__mcmp+0x2a>
 800b320:	3314      	adds	r3, #20
 800b322:	3114      	adds	r1, #20
 800b324:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b328:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b32c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b330:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b334:	4295      	cmp	r5, r2
 800b336:	d003      	beq.n	800b340 <__mcmp+0x2c>
 800b338:	d205      	bcs.n	800b346 <__mcmp+0x32>
 800b33a:	f04f 30ff 	mov.w	r0, #4294967295
 800b33e:	bd30      	pop	{r4, r5, pc}
 800b340:	42a3      	cmp	r3, r4
 800b342:	d3f3      	bcc.n	800b32c <__mcmp+0x18>
 800b344:	e7fb      	b.n	800b33e <__mcmp+0x2a>
 800b346:	2001      	movs	r0, #1
 800b348:	e7f9      	b.n	800b33e <__mcmp+0x2a>
	...

0800b34c <__mdiff>:
 800b34c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b350:	4689      	mov	r9, r1
 800b352:	4606      	mov	r6, r0
 800b354:	4611      	mov	r1, r2
 800b356:	4648      	mov	r0, r9
 800b358:	4614      	mov	r4, r2
 800b35a:	f7ff ffdb 	bl	800b314 <__mcmp>
 800b35e:	1e05      	subs	r5, r0, #0
 800b360:	d112      	bne.n	800b388 <__mdiff+0x3c>
 800b362:	4629      	mov	r1, r5
 800b364:	4630      	mov	r0, r6
 800b366:	f7ff fd11 	bl	800ad8c <_Balloc>
 800b36a:	4602      	mov	r2, r0
 800b36c:	b928      	cbnz	r0, 800b37a <__mdiff+0x2e>
 800b36e:	4b3f      	ldr	r3, [pc, #252]	@ (800b46c <__mdiff+0x120>)
 800b370:	f240 2137 	movw	r1, #567	@ 0x237
 800b374:	483e      	ldr	r0, [pc, #248]	@ (800b470 <__mdiff+0x124>)
 800b376:	f001 fa43 	bl	800c800 <__assert_func>
 800b37a:	2301      	movs	r3, #1
 800b37c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b380:	4610      	mov	r0, r2
 800b382:	b003      	add	sp, #12
 800b384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b388:	bfbc      	itt	lt
 800b38a:	464b      	movlt	r3, r9
 800b38c:	46a1      	movlt	r9, r4
 800b38e:	4630      	mov	r0, r6
 800b390:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b394:	bfba      	itte	lt
 800b396:	461c      	movlt	r4, r3
 800b398:	2501      	movlt	r5, #1
 800b39a:	2500      	movge	r5, #0
 800b39c:	f7ff fcf6 	bl	800ad8c <_Balloc>
 800b3a0:	4602      	mov	r2, r0
 800b3a2:	b918      	cbnz	r0, 800b3ac <__mdiff+0x60>
 800b3a4:	4b31      	ldr	r3, [pc, #196]	@ (800b46c <__mdiff+0x120>)
 800b3a6:	f240 2145 	movw	r1, #581	@ 0x245
 800b3aa:	e7e3      	b.n	800b374 <__mdiff+0x28>
 800b3ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b3b0:	6926      	ldr	r6, [r4, #16]
 800b3b2:	60c5      	str	r5, [r0, #12]
 800b3b4:	f109 0310 	add.w	r3, r9, #16
 800b3b8:	f109 0514 	add.w	r5, r9, #20
 800b3bc:	f104 0e14 	add.w	lr, r4, #20
 800b3c0:	f100 0b14 	add.w	fp, r0, #20
 800b3c4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b3c8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b3cc:	9301      	str	r3, [sp, #4]
 800b3ce:	46d9      	mov	r9, fp
 800b3d0:	f04f 0c00 	mov.w	ip, #0
 800b3d4:	9b01      	ldr	r3, [sp, #4]
 800b3d6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b3da:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b3de:	9301      	str	r3, [sp, #4]
 800b3e0:	fa1f f38a 	uxth.w	r3, sl
 800b3e4:	4619      	mov	r1, r3
 800b3e6:	b283      	uxth	r3, r0
 800b3e8:	1acb      	subs	r3, r1, r3
 800b3ea:	0c00      	lsrs	r0, r0, #16
 800b3ec:	4463      	add	r3, ip
 800b3ee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b3f2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b3f6:	b29b      	uxth	r3, r3
 800b3f8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b3fc:	4576      	cmp	r6, lr
 800b3fe:	f849 3b04 	str.w	r3, [r9], #4
 800b402:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b406:	d8e5      	bhi.n	800b3d4 <__mdiff+0x88>
 800b408:	1b33      	subs	r3, r6, r4
 800b40a:	3b15      	subs	r3, #21
 800b40c:	f023 0303 	bic.w	r3, r3, #3
 800b410:	3415      	adds	r4, #21
 800b412:	3304      	adds	r3, #4
 800b414:	42a6      	cmp	r6, r4
 800b416:	bf38      	it	cc
 800b418:	2304      	movcc	r3, #4
 800b41a:	441d      	add	r5, r3
 800b41c:	445b      	add	r3, fp
 800b41e:	461e      	mov	r6, r3
 800b420:	462c      	mov	r4, r5
 800b422:	4544      	cmp	r4, r8
 800b424:	d30e      	bcc.n	800b444 <__mdiff+0xf8>
 800b426:	f108 0103 	add.w	r1, r8, #3
 800b42a:	1b49      	subs	r1, r1, r5
 800b42c:	f021 0103 	bic.w	r1, r1, #3
 800b430:	3d03      	subs	r5, #3
 800b432:	45a8      	cmp	r8, r5
 800b434:	bf38      	it	cc
 800b436:	2100      	movcc	r1, #0
 800b438:	440b      	add	r3, r1
 800b43a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b43e:	b191      	cbz	r1, 800b466 <__mdiff+0x11a>
 800b440:	6117      	str	r7, [r2, #16]
 800b442:	e79d      	b.n	800b380 <__mdiff+0x34>
 800b444:	f854 1b04 	ldr.w	r1, [r4], #4
 800b448:	46e6      	mov	lr, ip
 800b44a:	0c08      	lsrs	r0, r1, #16
 800b44c:	fa1c fc81 	uxtah	ip, ip, r1
 800b450:	4471      	add	r1, lr
 800b452:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b456:	b289      	uxth	r1, r1
 800b458:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b45c:	f846 1b04 	str.w	r1, [r6], #4
 800b460:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b464:	e7dd      	b.n	800b422 <__mdiff+0xd6>
 800b466:	3f01      	subs	r7, #1
 800b468:	e7e7      	b.n	800b43a <__mdiff+0xee>
 800b46a:	bf00      	nop
 800b46c:	0800d5f5 	.word	0x0800d5f5
 800b470:	0800d606 	.word	0x0800d606

0800b474 <__ulp>:
 800b474:	b082      	sub	sp, #8
 800b476:	ed8d 0b00 	vstr	d0, [sp]
 800b47a:	9a01      	ldr	r2, [sp, #4]
 800b47c:	4b0f      	ldr	r3, [pc, #60]	@ (800b4bc <__ulp+0x48>)
 800b47e:	4013      	ands	r3, r2
 800b480:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b484:	2b00      	cmp	r3, #0
 800b486:	dc08      	bgt.n	800b49a <__ulp+0x26>
 800b488:	425b      	negs	r3, r3
 800b48a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b48e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b492:	da04      	bge.n	800b49e <__ulp+0x2a>
 800b494:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b498:	4113      	asrs	r3, r2
 800b49a:	2200      	movs	r2, #0
 800b49c:	e008      	b.n	800b4b0 <__ulp+0x3c>
 800b49e:	f1a2 0314 	sub.w	r3, r2, #20
 800b4a2:	2b1e      	cmp	r3, #30
 800b4a4:	bfda      	itte	le
 800b4a6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b4aa:	40da      	lsrle	r2, r3
 800b4ac:	2201      	movgt	r2, #1
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	4610      	mov	r0, r2
 800b4b4:	ec41 0b10 	vmov	d0, r0, r1
 800b4b8:	b002      	add	sp, #8
 800b4ba:	4770      	bx	lr
 800b4bc:	7ff00000 	.word	0x7ff00000

0800b4c0 <__b2d>:
 800b4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4c4:	6906      	ldr	r6, [r0, #16]
 800b4c6:	f100 0814 	add.w	r8, r0, #20
 800b4ca:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b4ce:	1f37      	subs	r7, r6, #4
 800b4d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b4d4:	4610      	mov	r0, r2
 800b4d6:	f7ff fd4b 	bl	800af70 <__hi0bits>
 800b4da:	f1c0 0320 	rsb	r3, r0, #32
 800b4de:	280a      	cmp	r0, #10
 800b4e0:	600b      	str	r3, [r1, #0]
 800b4e2:	491b      	ldr	r1, [pc, #108]	@ (800b550 <__b2d+0x90>)
 800b4e4:	dc15      	bgt.n	800b512 <__b2d+0x52>
 800b4e6:	f1c0 0c0b 	rsb	ip, r0, #11
 800b4ea:	fa22 f30c 	lsr.w	r3, r2, ip
 800b4ee:	45b8      	cmp	r8, r7
 800b4f0:	ea43 0501 	orr.w	r5, r3, r1
 800b4f4:	bf34      	ite	cc
 800b4f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b4fa:	2300      	movcs	r3, #0
 800b4fc:	3015      	adds	r0, #21
 800b4fe:	fa02 f000 	lsl.w	r0, r2, r0
 800b502:	fa23 f30c 	lsr.w	r3, r3, ip
 800b506:	4303      	orrs	r3, r0
 800b508:	461c      	mov	r4, r3
 800b50a:	ec45 4b10 	vmov	d0, r4, r5
 800b50e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b512:	45b8      	cmp	r8, r7
 800b514:	bf3a      	itte	cc
 800b516:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b51a:	f1a6 0708 	subcc.w	r7, r6, #8
 800b51e:	2300      	movcs	r3, #0
 800b520:	380b      	subs	r0, #11
 800b522:	d012      	beq.n	800b54a <__b2d+0x8a>
 800b524:	f1c0 0120 	rsb	r1, r0, #32
 800b528:	fa23 f401 	lsr.w	r4, r3, r1
 800b52c:	4082      	lsls	r2, r0
 800b52e:	4322      	orrs	r2, r4
 800b530:	4547      	cmp	r7, r8
 800b532:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b536:	bf8c      	ite	hi
 800b538:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b53c:	2200      	movls	r2, #0
 800b53e:	4083      	lsls	r3, r0
 800b540:	40ca      	lsrs	r2, r1
 800b542:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b546:	4313      	orrs	r3, r2
 800b548:	e7de      	b.n	800b508 <__b2d+0x48>
 800b54a:	ea42 0501 	orr.w	r5, r2, r1
 800b54e:	e7db      	b.n	800b508 <__b2d+0x48>
 800b550:	3ff00000 	.word	0x3ff00000

0800b554 <__d2b>:
 800b554:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b558:	460f      	mov	r7, r1
 800b55a:	2101      	movs	r1, #1
 800b55c:	ec59 8b10 	vmov	r8, r9, d0
 800b560:	4616      	mov	r6, r2
 800b562:	f7ff fc13 	bl	800ad8c <_Balloc>
 800b566:	4604      	mov	r4, r0
 800b568:	b930      	cbnz	r0, 800b578 <__d2b+0x24>
 800b56a:	4602      	mov	r2, r0
 800b56c:	4b23      	ldr	r3, [pc, #140]	@ (800b5fc <__d2b+0xa8>)
 800b56e:	4824      	ldr	r0, [pc, #144]	@ (800b600 <__d2b+0xac>)
 800b570:	f240 310f 	movw	r1, #783	@ 0x30f
 800b574:	f001 f944 	bl	800c800 <__assert_func>
 800b578:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b57c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b580:	b10d      	cbz	r5, 800b586 <__d2b+0x32>
 800b582:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b586:	9301      	str	r3, [sp, #4]
 800b588:	f1b8 0300 	subs.w	r3, r8, #0
 800b58c:	d023      	beq.n	800b5d6 <__d2b+0x82>
 800b58e:	4668      	mov	r0, sp
 800b590:	9300      	str	r3, [sp, #0]
 800b592:	f7ff fd0c 	bl	800afae <__lo0bits>
 800b596:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b59a:	b1d0      	cbz	r0, 800b5d2 <__d2b+0x7e>
 800b59c:	f1c0 0320 	rsb	r3, r0, #32
 800b5a0:	fa02 f303 	lsl.w	r3, r2, r3
 800b5a4:	430b      	orrs	r3, r1
 800b5a6:	40c2      	lsrs	r2, r0
 800b5a8:	6163      	str	r3, [r4, #20]
 800b5aa:	9201      	str	r2, [sp, #4]
 800b5ac:	9b01      	ldr	r3, [sp, #4]
 800b5ae:	61a3      	str	r3, [r4, #24]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	bf0c      	ite	eq
 800b5b4:	2201      	moveq	r2, #1
 800b5b6:	2202      	movne	r2, #2
 800b5b8:	6122      	str	r2, [r4, #16]
 800b5ba:	b1a5      	cbz	r5, 800b5e6 <__d2b+0x92>
 800b5bc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b5c0:	4405      	add	r5, r0
 800b5c2:	603d      	str	r5, [r7, #0]
 800b5c4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b5c8:	6030      	str	r0, [r6, #0]
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	b003      	add	sp, #12
 800b5ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5d2:	6161      	str	r1, [r4, #20]
 800b5d4:	e7ea      	b.n	800b5ac <__d2b+0x58>
 800b5d6:	a801      	add	r0, sp, #4
 800b5d8:	f7ff fce9 	bl	800afae <__lo0bits>
 800b5dc:	9b01      	ldr	r3, [sp, #4]
 800b5de:	6163      	str	r3, [r4, #20]
 800b5e0:	3020      	adds	r0, #32
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	e7e8      	b.n	800b5b8 <__d2b+0x64>
 800b5e6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b5ea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b5ee:	6038      	str	r0, [r7, #0]
 800b5f0:	6918      	ldr	r0, [r3, #16]
 800b5f2:	f7ff fcbd 	bl	800af70 <__hi0bits>
 800b5f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b5fa:	e7e5      	b.n	800b5c8 <__d2b+0x74>
 800b5fc:	0800d5f5 	.word	0x0800d5f5
 800b600:	0800d606 	.word	0x0800d606

0800b604 <__ratio>:
 800b604:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b608:	4688      	mov	r8, r1
 800b60a:	4669      	mov	r1, sp
 800b60c:	4681      	mov	r9, r0
 800b60e:	f7ff ff57 	bl	800b4c0 <__b2d>
 800b612:	a901      	add	r1, sp, #4
 800b614:	4640      	mov	r0, r8
 800b616:	ec55 4b10 	vmov	r4, r5, d0
 800b61a:	f7ff ff51 	bl	800b4c0 <__b2d>
 800b61e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b622:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800b626:	1ad2      	subs	r2, r2, r3
 800b628:	e9dd 3100 	ldrd	r3, r1, [sp]
 800b62c:	1a5b      	subs	r3, r3, r1
 800b62e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800b632:	ec57 6b10 	vmov	r6, r7, d0
 800b636:	2b00      	cmp	r3, #0
 800b638:	bfd6      	itet	le
 800b63a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b63e:	462a      	movgt	r2, r5
 800b640:	463a      	movle	r2, r7
 800b642:	46ab      	mov	fp, r5
 800b644:	46a2      	mov	sl, r4
 800b646:	bfce      	itee	gt
 800b648:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b64c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800b650:	ee00 3a90 	vmovle	s1, r3
 800b654:	ec4b ab17 	vmov	d7, sl, fp
 800b658:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800b65c:	b003      	add	sp, #12
 800b65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b662 <__copybits>:
 800b662:	3901      	subs	r1, #1
 800b664:	b570      	push	{r4, r5, r6, lr}
 800b666:	1149      	asrs	r1, r1, #5
 800b668:	6914      	ldr	r4, [r2, #16]
 800b66a:	3101      	adds	r1, #1
 800b66c:	f102 0314 	add.w	r3, r2, #20
 800b670:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b674:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b678:	1f05      	subs	r5, r0, #4
 800b67a:	42a3      	cmp	r3, r4
 800b67c:	d30c      	bcc.n	800b698 <__copybits+0x36>
 800b67e:	1aa3      	subs	r3, r4, r2
 800b680:	3b11      	subs	r3, #17
 800b682:	f023 0303 	bic.w	r3, r3, #3
 800b686:	3211      	adds	r2, #17
 800b688:	42a2      	cmp	r2, r4
 800b68a:	bf88      	it	hi
 800b68c:	2300      	movhi	r3, #0
 800b68e:	4418      	add	r0, r3
 800b690:	2300      	movs	r3, #0
 800b692:	4288      	cmp	r0, r1
 800b694:	d305      	bcc.n	800b6a2 <__copybits+0x40>
 800b696:	bd70      	pop	{r4, r5, r6, pc}
 800b698:	f853 6b04 	ldr.w	r6, [r3], #4
 800b69c:	f845 6f04 	str.w	r6, [r5, #4]!
 800b6a0:	e7eb      	b.n	800b67a <__copybits+0x18>
 800b6a2:	f840 3b04 	str.w	r3, [r0], #4
 800b6a6:	e7f4      	b.n	800b692 <__copybits+0x30>

0800b6a8 <__any_on>:
 800b6a8:	f100 0214 	add.w	r2, r0, #20
 800b6ac:	6900      	ldr	r0, [r0, #16]
 800b6ae:	114b      	asrs	r3, r1, #5
 800b6b0:	4298      	cmp	r0, r3
 800b6b2:	b510      	push	{r4, lr}
 800b6b4:	db11      	blt.n	800b6da <__any_on+0x32>
 800b6b6:	dd0a      	ble.n	800b6ce <__any_on+0x26>
 800b6b8:	f011 011f 	ands.w	r1, r1, #31
 800b6bc:	d007      	beq.n	800b6ce <__any_on+0x26>
 800b6be:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b6c2:	fa24 f001 	lsr.w	r0, r4, r1
 800b6c6:	fa00 f101 	lsl.w	r1, r0, r1
 800b6ca:	428c      	cmp	r4, r1
 800b6cc:	d10b      	bne.n	800b6e6 <__any_on+0x3e>
 800b6ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d803      	bhi.n	800b6de <__any_on+0x36>
 800b6d6:	2000      	movs	r0, #0
 800b6d8:	bd10      	pop	{r4, pc}
 800b6da:	4603      	mov	r3, r0
 800b6dc:	e7f7      	b.n	800b6ce <__any_on+0x26>
 800b6de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b6e2:	2900      	cmp	r1, #0
 800b6e4:	d0f5      	beq.n	800b6d2 <__any_on+0x2a>
 800b6e6:	2001      	movs	r0, #1
 800b6e8:	e7f6      	b.n	800b6d8 <__any_on+0x30>

0800b6ea <sulp>:
 800b6ea:	b570      	push	{r4, r5, r6, lr}
 800b6ec:	4604      	mov	r4, r0
 800b6ee:	460d      	mov	r5, r1
 800b6f0:	4616      	mov	r6, r2
 800b6f2:	ec45 4b10 	vmov	d0, r4, r5
 800b6f6:	f7ff febd 	bl	800b474 <__ulp>
 800b6fa:	b17e      	cbz	r6, 800b71c <sulp+0x32>
 800b6fc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b700:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b704:	2b00      	cmp	r3, #0
 800b706:	dd09      	ble.n	800b71c <sulp+0x32>
 800b708:	051b      	lsls	r3, r3, #20
 800b70a:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800b70e:	2000      	movs	r0, #0
 800b710:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800b714:	ec41 0b17 	vmov	d7, r0, r1
 800b718:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b71c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b720 <_strtod_l>:
 800b720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b724:	ed2d 8b0a 	vpush	{d8-d12}
 800b728:	b097      	sub	sp, #92	@ 0x5c
 800b72a:	4688      	mov	r8, r1
 800b72c:	920e      	str	r2, [sp, #56]	@ 0x38
 800b72e:	2200      	movs	r2, #0
 800b730:	9212      	str	r2, [sp, #72]	@ 0x48
 800b732:	9005      	str	r0, [sp, #20]
 800b734:	f04f 0a00 	mov.w	sl, #0
 800b738:	f04f 0b00 	mov.w	fp, #0
 800b73c:	460a      	mov	r2, r1
 800b73e:	9211      	str	r2, [sp, #68]	@ 0x44
 800b740:	7811      	ldrb	r1, [r2, #0]
 800b742:	292b      	cmp	r1, #43	@ 0x2b
 800b744:	d04c      	beq.n	800b7e0 <_strtod_l+0xc0>
 800b746:	d839      	bhi.n	800b7bc <_strtod_l+0x9c>
 800b748:	290d      	cmp	r1, #13
 800b74a:	d833      	bhi.n	800b7b4 <_strtod_l+0x94>
 800b74c:	2908      	cmp	r1, #8
 800b74e:	d833      	bhi.n	800b7b8 <_strtod_l+0x98>
 800b750:	2900      	cmp	r1, #0
 800b752:	d03c      	beq.n	800b7ce <_strtod_l+0xae>
 800b754:	2200      	movs	r2, #0
 800b756:	9208      	str	r2, [sp, #32]
 800b758:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800b75a:	782a      	ldrb	r2, [r5, #0]
 800b75c:	2a30      	cmp	r2, #48	@ 0x30
 800b75e:	f040 80b5 	bne.w	800b8cc <_strtod_l+0x1ac>
 800b762:	786a      	ldrb	r2, [r5, #1]
 800b764:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b768:	2a58      	cmp	r2, #88	@ 0x58
 800b76a:	d170      	bne.n	800b84e <_strtod_l+0x12e>
 800b76c:	9302      	str	r3, [sp, #8]
 800b76e:	9b08      	ldr	r3, [sp, #32]
 800b770:	9301      	str	r3, [sp, #4]
 800b772:	ab12      	add	r3, sp, #72	@ 0x48
 800b774:	9300      	str	r3, [sp, #0]
 800b776:	4a8b      	ldr	r2, [pc, #556]	@ (800b9a4 <_strtod_l+0x284>)
 800b778:	9805      	ldr	r0, [sp, #20]
 800b77a:	ab13      	add	r3, sp, #76	@ 0x4c
 800b77c:	a911      	add	r1, sp, #68	@ 0x44
 800b77e:	f001 f8d9 	bl	800c934 <__gethex>
 800b782:	f010 060f 	ands.w	r6, r0, #15
 800b786:	4604      	mov	r4, r0
 800b788:	d005      	beq.n	800b796 <_strtod_l+0x76>
 800b78a:	2e06      	cmp	r6, #6
 800b78c:	d12a      	bne.n	800b7e4 <_strtod_l+0xc4>
 800b78e:	3501      	adds	r5, #1
 800b790:	2300      	movs	r3, #0
 800b792:	9511      	str	r5, [sp, #68]	@ 0x44
 800b794:	9308      	str	r3, [sp, #32]
 800b796:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b798:	2b00      	cmp	r3, #0
 800b79a:	f040 852f 	bne.w	800c1fc <_strtod_l+0xadc>
 800b79e:	9b08      	ldr	r3, [sp, #32]
 800b7a0:	ec4b ab10 	vmov	d0, sl, fp
 800b7a4:	b1cb      	cbz	r3, 800b7da <_strtod_l+0xba>
 800b7a6:	eeb1 0b40 	vneg.f64	d0, d0
 800b7aa:	b017      	add	sp, #92	@ 0x5c
 800b7ac:	ecbd 8b0a 	vpop	{d8-d12}
 800b7b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7b4:	2920      	cmp	r1, #32
 800b7b6:	d1cd      	bne.n	800b754 <_strtod_l+0x34>
 800b7b8:	3201      	adds	r2, #1
 800b7ba:	e7c0      	b.n	800b73e <_strtod_l+0x1e>
 800b7bc:	292d      	cmp	r1, #45	@ 0x2d
 800b7be:	d1c9      	bne.n	800b754 <_strtod_l+0x34>
 800b7c0:	2101      	movs	r1, #1
 800b7c2:	9108      	str	r1, [sp, #32]
 800b7c4:	1c51      	adds	r1, r2, #1
 800b7c6:	9111      	str	r1, [sp, #68]	@ 0x44
 800b7c8:	7852      	ldrb	r2, [r2, #1]
 800b7ca:	2a00      	cmp	r2, #0
 800b7cc:	d1c4      	bne.n	800b758 <_strtod_l+0x38>
 800b7ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7d0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	f040 850f 	bne.w	800c1f8 <_strtod_l+0xad8>
 800b7da:	ec4b ab10 	vmov	d0, sl, fp
 800b7de:	e7e4      	b.n	800b7aa <_strtod_l+0x8a>
 800b7e0:	2100      	movs	r1, #0
 800b7e2:	e7ee      	b.n	800b7c2 <_strtod_l+0xa2>
 800b7e4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b7e6:	b13a      	cbz	r2, 800b7f8 <_strtod_l+0xd8>
 800b7e8:	2135      	movs	r1, #53	@ 0x35
 800b7ea:	a814      	add	r0, sp, #80	@ 0x50
 800b7ec:	f7ff ff39 	bl	800b662 <__copybits>
 800b7f0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b7f2:	9805      	ldr	r0, [sp, #20]
 800b7f4:	f7ff fb0a 	bl	800ae0c <_Bfree>
 800b7f8:	1e73      	subs	r3, r6, #1
 800b7fa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b7fc:	2b04      	cmp	r3, #4
 800b7fe:	d806      	bhi.n	800b80e <_strtod_l+0xee>
 800b800:	e8df f003 	tbb	[pc, r3]
 800b804:	201d0314 	.word	0x201d0314
 800b808:	14          	.byte	0x14
 800b809:	00          	.byte	0x00
 800b80a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800b80e:	05e3      	lsls	r3, r4, #23
 800b810:	bf48      	it	mi
 800b812:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b816:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b81a:	0d1b      	lsrs	r3, r3, #20
 800b81c:	051b      	lsls	r3, r3, #20
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d1b9      	bne.n	800b796 <_strtod_l+0x76>
 800b822:	f7fe fba1 	bl	8009f68 <__errno>
 800b826:	2322      	movs	r3, #34	@ 0x22
 800b828:	6003      	str	r3, [r0, #0]
 800b82a:	e7b4      	b.n	800b796 <_strtod_l+0x76>
 800b82c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800b830:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b834:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b838:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b83c:	e7e7      	b.n	800b80e <_strtod_l+0xee>
 800b83e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800b9ac <_strtod_l+0x28c>
 800b842:	e7e4      	b.n	800b80e <_strtod_l+0xee>
 800b844:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b848:	f04f 3aff 	mov.w	sl, #4294967295
 800b84c:	e7df      	b.n	800b80e <_strtod_l+0xee>
 800b84e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b850:	1c5a      	adds	r2, r3, #1
 800b852:	9211      	str	r2, [sp, #68]	@ 0x44
 800b854:	785b      	ldrb	r3, [r3, #1]
 800b856:	2b30      	cmp	r3, #48	@ 0x30
 800b858:	d0f9      	beq.n	800b84e <_strtod_l+0x12e>
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d09b      	beq.n	800b796 <_strtod_l+0x76>
 800b85e:	2301      	movs	r3, #1
 800b860:	2600      	movs	r6, #0
 800b862:	9307      	str	r3, [sp, #28]
 800b864:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b866:	930a      	str	r3, [sp, #40]	@ 0x28
 800b868:	46b1      	mov	r9, r6
 800b86a:	4635      	mov	r5, r6
 800b86c:	220a      	movs	r2, #10
 800b86e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800b870:	7804      	ldrb	r4, [r0, #0]
 800b872:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800b876:	b2d9      	uxtb	r1, r3
 800b878:	2909      	cmp	r1, #9
 800b87a:	d929      	bls.n	800b8d0 <_strtod_l+0x1b0>
 800b87c:	494a      	ldr	r1, [pc, #296]	@ (800b9a8 <_strtod_l+0x288>)
 800b87e:	2201      	movs	r2, #1
 800b880:	f000 ff84 	bl	800c78c <strncmp>
 800b884:	b378      	cbz	r0, 800b8e6 <_strtod_l+0x1c6>
 800b886:	2000      	movs	r0, #0
 800b888:	4622      	mov	r2, r4
 800b88a:	462b      	mov	r3, r5
 800b88c:	4607      	mov	r7, r0
 800b88e:	9006      	str	r0, [sp, #24]
 800b890:	2a65      	cmp	r2, #101	@ 0x65
 800b892:	d001      	beq.n	800b898 <_strtod_l+0x178>
 800b894:	2a45      	cmp	r2, #69	@ 0x45
 800b896:	d117      	bne.n	800b8c8 <_strtod_l+0x1a8>
 800b898:	b91b      	cbnz	r3, 800b8a2 <_strtod_l+0x182>
 800b89a:	9b07      	ldr	r3, [sp, #28]
 800b89c:	4303      	orrs	r3, r0
 800b89e:	d096      	beq.n	800b7ce <_strtod_l+0xae>
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800b8a6:	f108 0201 	add.w	r2, r8, #1
 800b8aa:	9211      	str	r2, [sp, #68]	@ 0x44
 800b8ac:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b8b0:	2a2b      	cmp	r2, #43	@ 0x2b
 800b8b2:	d06b      	beq.n	800b98c <_strtod_l+0x26c>
 800b8b4:	2a2d      	cmp	r2, #45	@ 0x2d
 800b8b6:	d071      	beq.n	800b99c <_strtod_l+0x27c>
 800b8b8:	f04f 0e00 	mov.w	lr, #0
 800b8bc:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800b8c0:	2c09      	cmp	r4, #9
 800b8c2:	d979      	bls.n	800b9b8 <_strtod_l+0x298>
 800b8c4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800b8c8:	2400      	movs	r4, #0
 800b8ca:	e094      	b.n	800b9f6 <_strtod_l+0x2d6>
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	e7c7      	b.n	800b860 <_strtod_l+0x140>
 800b8d0:	2d08      	cmp	r5, #8
 800b8d2:	f100 0001 	add.w	r0, r0, #1
 800b8d6:	bfd4      	ite	le
 800b8d8:	fb02 3909 	mlale	r9, r2, r9, r3
 800b8dc:	fb02 3606 	mlagt	r6, r2, r6, r3
 800b8e0:	3501      	adds	r5, #1
 800b8e2:	9011      	str	r0, [sp, #68]	@ 0x44
 800b8e4:	e7c3      	b.n	800b86e <_strtod_l+0x14e>
 800b8e6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b8e8:	1c5a      	adds	r2, r3, #1
 800b8ea:	9211      	str	r2, [sp, #68]	@ 0x44
 800b8ec:	785a      	ldrb	r2, [r3, #1]
 800b8ee:	b375      	cbz	r5, 800b94e <_strtod_l+0x22e>
 800b8f0:	4607      	mov	r7, r0
 800b8f2:	462b      	mov	r3, r5
 800b8f4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b8f8:	2909      	cmp	r1, #9
 800b8fa:	d913      	bls.n	800b924 <_strtod_l+0x204>
 800b8fc:	2101      	movs	r1, #1
 800b8fe:	9106      	str	r1, [sp, #24]
 800b900:	e7c6      	b.n	800b890 <_strtod_l+0x170>
 800b902:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b904:	1c5a      	adds	r2, r3, #1
 800b906:	9211      	str	r2, [sp, #68]	@ 0x44
 800b908:	785a      	ldrb	r2, [r3, #1]
 800b90a:	3001      	adds	r0, #1
 800b90c:	2a30      	cmp	r2, #48	@ 0x30
 800b90e:	d0f8      	beq.n	800b902 <_strtod_l+0x1e2>
 800b910:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b914:	2b08      	cmp	r3, #8
 800b916:	f200 8476 	bhi.w	800c206 <_strtod_l+0xae6>
 800b91a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b91c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b91e:	4607      	mov	r7, r0
 800b920:	2000      	movs	r0, #0
 800b922:	4603      	mov	r3, r0
 800b924:	3a30      	subs	r2, #48	@ 0x30
 800b926:	f100 0101 	add.w	r1, r0, #1
 800b92a:	d023      	beq.n	800b974 <_strtod_l+0x254>
 800b92c:	440f      	add	r7, r1
 800b92e:	eb00 0c03 	add.w	ip, r0, r3
 800b932:	4619      	mov	r1, r3
 800b934:	240a      	movs	r4, #10
 800b936:	4561      	cmp	r1, ip
 800b938:	d10b      	bne.n	800b952 <_strtod_l+0x232>
 800b93a:	1c5c      	adds	r4, r3, #1
 800b93c:	4403      	add	r3, r0
 800b93e:	2b08      	cmp	r3, #8
 800b940:	4404      	add	r4, r0
 800b942:	dc11      	bgt.n	800b968 <_strtod_l+0x248>
 800b944:	230a      	movs	r3, #10
 800b946:	fb03 2909 	mla	r9, r3, r9, r2
 800b94a:	2100      	movs	r1, #0
 800b94c:	e013      	b.n	800b976 <_strtod_l+0x256>
 800b94e:	4628      	mov	r0, r5
 800b950:	e7dc      	b.n	800b90c <_strtod_l+0x1ec>
 800b952:	2908      	cmp	r1, #8
 800b954:	f101 0101 	add.w	r1, r1, #1
 800b958:	dc02      	bgt.n	800b960 <_strtod_l+0x240>
 800b95a:	fb04 f909 	mul.w	r9, r4, r9
 800b95e:	e7ea      	b.n	800b936 <_strtod_l+0x216>
 800b960:	2910      	cmp	r1, #16
 800b962:	bfd8      	it	le
 800b964:	4366      	mulle	r6, r4
 800b966:	e7e6      	b.n	800b936 <_strtod_l+0x216>
 800b968:	2b0f      	cmp	r3, #15
 800b96a:	dcee      	bgt.n	800b94a <_strtod_l+0x22a>
 800b96c:	230a      	movs	r3, #10
 800b96e:	fb03 2606 	mla	r6, r3, r6, r2
 800b972:	e7ea      	b.n	800b94a <_strtod_l+0x22a>
 800b974:	461c      	mov	r4, r3
 800b976:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b978:	1c5a      	adds	r2, r3, #1
 800b97a:	9211      	str	r2, [sp, #68]	@ 0x44
 800b97c:	785a      	ldrb	r2, [r3, #1]
 800b97e:	4608      	mov	r0, r1
 800b980:	4623      	mov	r3, r4
 800b982:	e7b7      	b.n	800b8f4 <_strtod_l+0x1d4>
 800b984:	2301      	movs	r3, #1
 800b986:	2700      	movs	r7, #0
 800b988:	9306      	str	r3, [sp, #24]
 800b98a:	e786      	b.n	800b89a <_strtod_l+0x17a>
 800b98c:	f04f 0e00 	mov.w	lr, #0
 800b990:	f108 0202 	add.w	r2, r8, #2
 800b994:	9211      	str	r2, [sp, #68]	@ 0x44
 800b996:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b99a:	e78f      	b.n	800b8bc <_strtod_l+0x19c>
 800b99c:	f04f 0e01 	mov.w	lr, #1
 800b9a0:	e7f6      	b.n	800b990 <_strtod_l+0x270>
 800b9a2:	bf00      	nop
 800b9a4:	0800d778 	.word	0x0800d778
 800b9a8:	0800d760 	.word	0x0800d760
 800b9ac:	7ff00000 	.word	0x7ff00000
 800b9b0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b9b2:	1c54      	adds	r4, r2, #1
 800b9b4:	9411      	str	r4, [sp, #68]	@ 0x44
 800b9b6:	7852      	ldrb	r2, [r2, #1]
 800b9b8:	2a30      	cmp	r2, #48	@ 0x30
 800b9ba:	d0f9      	beq.n	800b9b0 <_strtod_l+0x290>
 800b9bc:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800b9c0:	2c08      	cmp	r4, #8
 800b9c2:	d881      	bhi.n	800b8c8 <_strtod_l+0x1a8>
 800b9c4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800b9c8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b9ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800b9cc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b9ce:	1c51      	adds	r1, r2, #1
 800b9d0:	9111      	str	r1, [sp, #68]	@ 0x44
 800b9d2:	7852      	ldrb	r2, [r2, #1]
 800b9d4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800b9d8:	2c09      	cmp	r4, #9
 800b9da:	d938      	bls.n	800ba4e <_strtod_l+0x32e>
 800b9dc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800b9de:	1b0c      	subs	r4, r1, r4
 800b9e0:	2c08      	cmp	r4, #8
 800b9e2:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800b9e6:	dc02      	bgt.n	800b9ee <_strtod_l+0x2ce>
 800b9e8:	4564      	cmp	r4, ip
 800b9ea:	bfa8      	it	ge
 800b9ec:	4664      	movge	r4, ip
 800b9ee:	f1be 0f00 	cmp.w	lr, #0
 800b9f2:	d000      	beq.n	800b9f6 <_strtod_l+0x2d6>
 800b9f4:	4264      	negs	r4, r4
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d14e      	bne.n	800ba98 <_strtod_l+0x378>
 800b9fa:	9b07      	ldr	r3, [sp, #28]
 800b9fc:	4318      	orrs	r0, r3
 800b9fe:	f47f aeca 	bne.w	800b796 <_strtod_l+0x76>
 800ba02:	9b06      	ldr	r3, [sp, #24]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	f47f aee2 	bne.w	800b7ce <_strtod_l+0xae>
 800ba0a:	2a69      	cmp	r2, #105	@ 0x69
 800ba0c:	d027      	beq.n	800ba5e <_strtod_l+0x33e>
 800ba0e:	dc24      	bgt.n	800ba5a <_strtod_l+0x33a>
 800ba10:	2a49      	cmp	r2, #73	@ 0x49
 800ba12:	d024      	beq.n	800ba5e <_strtod_l+0x33e>
 800ba14:	2a4e      	cmp	r2, #78	@ 0x4e
 800ba16:	f47f aeda 	bne.w	800b7ce <_strtod_l+0xae>
 800ba1a:	4997      	ldr	r1, [pc, #604]	@ (800bc78 <_strtod_l+0x558>)
 800ba1c:	a811      	add	r0, sp, #68	@ 0x44
 800ba1e:	f001 f9ab 	bl	800cd78 <__match>
 800ba22:	2800      	cmp	r0, #0
 800ba24:	f43f aed3 	beq.w	800b7ce <_strtod_l+0xae>
 800ba28:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	2b28      	cmp	r3, #40	@ 0x28
 800ba2e:	d12d      	bne.n	800ba8c <_strtod_l+0x36c>
 800ba30:	4992      	ldr	r1, [pc, #584]	@ (800bc7c <_strtod_l+0x55c>)
 800ba32:	aa14      	add	r2, sp, #80	@ 0x50
 800ba34:	a811      	add	r0, sp, #68	@ 0x44
 800ba36:	f001 f9b3 	bl	800cda0 <__hexnan>
 800ba3a:	2805      	cmp	r0, #5
 800ba3c:	d126      	bne.n	800ba8c <_strtod_l+0x36c>
 800ba3e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ba40:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800ba44:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ba48:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ba4c:	e6a3      	b.n	800b796 <_strtod_l+0x76>
 800ba4e:	240a      	movs	r4, #10
 800ba50:	fb04 2c0c 	mla	ip, r4, ip, r2
 800ba54:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800ba58:	e7b8      	b.n	800b9cc <_strtod_l+0x2ac>
 800ba5a:	2a6e      	cmp	r2, #110	@ 0x6e
 800ba5c:	e7db      	b.n	800ba16 <_strtod_l+0x2f6>
 800ba5e:	4988      	ldr	r1, [pc, #544]	@ (800bc80 <_strtod_l+0x560>)
 800ba60:	a811      	add	r0, sp, #68	@ 0x44
 800ba62:	f001 f989 	bl	800cd78 <__match>
 800ba66:	2800      	cmp	r0, #0
 800ba68:	f43f aeb1 	beq.w	800b7ce <_strtod_l+0xae>
 800ba6c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ba6e:	4985      	ldr	r1, [pc, #532]	@ (800bc84 <_strtod_l+0x564>)
 800ba70:	3b01      	subs	r3, #1
 800ba72:	a811      	add	r0, sp, #68	@ 0x44
 800ba74:	9311      	str	r3, [sp, #68]	@ 0x44
 800ba76:	f001 f97f 	bl	800cd78 <__match>
 800ba7a:	b910      	cbnz	r0, 800ba82 <_strtod_l+0x362>
 800ba7c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ba7e:	3301      	adds	r3, #1
 800ba80:	9311      	str	r3, [sp, #68]	@ 0x44
 800ba82:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800bc98 <_strtod_l+0x578>
 800ba86:	f04f 0a00 	mov.w	sl, #0
 800ba8a:	e684      	b.n	800b796 <_strtod_l+0x76>
 800ba8c:	487e      	ldr	r0, [pc, #504]	@ (800bc88 <_strtod_l+0x568>)
 800ba8e:	f000 feaf 	bl	800c7f0 <nan>
 800ba92:	ec5b ab10 	vmov	sl, fp, d0
 800ba96:	e67e      	b.n	800b796 <_strtod_l+0x76>
 800ba98:	ee07 9a90 	vmov	s15, r9
 800ba9c:	1be2      	subs	r2, r4, r7
 800ba9e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800baa2:	2d00      	cmp	r5, #0
 800baa4:	bf08      	it	eq
 800baa6:	461d      	moveq	r5, r3
 800baa8:	2b10      	cmp	r3, #16
 800baaa:	9209      	str	r2, [sp, #36]	@ 0x24
 800baac:	461a      	mov	r2, r3
 800baae:	bfa8      	it	ge
 800bab0:	2210      	movge	r2, #16
 800bab2:	2b09      	cmp	r3, #9
 800bab4:	ec5b ab17 	vmov	sl, fp, d7
 800bab8:	dc15      	bgt.n	800bae6 <_strtod_l+0x3c6>
 800baba:	1be1      	subs	r1, r4, r7
 800babc:	2900      	cmp	r1, #0
 800babe:	f43f ae6a 	beq.w	800b796 <_strtod_l+0x76>
 800bac2:	eba4 0107 	sub.w	r1, r4, r7
 800bac6:	dd72      	ble.n	800bbae <_strtod_l+0x48e>
 800bac8:	2916      	cmp	r1, #22
 800baca:	dc59      	bgt.n	800bb80 <_strtod_l+0x460>
 800bacc:	4b6f      	ldr	r3, [pc, #444]	@ (800bc8c <_strtod_l+0x56c>)
 800bace:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bad0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bad4:	ed93 7b00 	vldr	d7, [r3]
 800bad8:	ec4b ab16 	vmov	d6, sl, fp
 800badc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bae0:	ec5b ab17 	vmov	sl, fp, d7
 800bae4:	e657      	b.n	800b796 <_strtod_l+0x76>
 800bae6:	4969      	ldr	r1, [pc, #420]	@ (800bc8c <_strtod_l+0x56c>)
 800bae8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800baec:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800baf0:	ee06 6a90 	vmov	s13, r6
 800baf4:	2b0f      	cmp	r3, #15
 800baf6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800bafa:	eea7 6b05 	vfma.f64	d6, d7, d5
 800bafe:	ec5b ab16 	vmov	sl, fp, d6
 800bb02:	ddda      	ble.n	800baba <_strtod_l+0x39a>
 800bb04:	1a9a      	subs	r2, r3, r2
 800bb06:	1be1      	subs	r1, r4, r7
 800bb08:	440a      	add	r2, r1
 800bb0a:	2a00      	cmp	r2, #0
 800bb0c:	f340 8094 	ble.w	800bc38 <_strtod_l+0x518>
 800bb10:	f012 000f 	ands.w	r0, r2, #15
 800bb14:	d00a      	beq.n	800bb2c <_strtod_l+0x40c>
 800bb16:	495d      	ldr	r1, [pc, #372]	@ (800bc8c <_strtod_l+0x56c>)
 800bb18:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800bb1c:	ed91 7b00 	vldr	d7, [r1]
 800bb20:	ec4b ab16 	vmov	d6, sl, fp
 800bb24:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bb28:	ec5b ab17 	vmov	sl, fp, d7
 800bb2c:	f032 020f 	bics.w	r2, r2, #15
 800bb30:	d073      	beq.n	800bc1a <_strtod_l+0x4fa>
 800bb32:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800bb36:	dd47      	ble.n	800bbc8 <_strtod_l+0x4a8>
 800bb38:	2400      	movs	r4, #0
 800bb3a:	4625      	mov	r5, r4
 800bb3c:	9407      	str	r4, [sp, #28]
 800bb3e:	4626      	mov	r6, r4
 800bb40:	9a05      	ldr	r2, [sp, #20]
 800bb42:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800bc98 <_strtod_l+0x578>
 800bb46:	2322      	movs	r3, #34	@ 0x22
 800bb48:	6013      	str	r3, [r2, #0]
 800bb4a:	f04f 0a00 	mov.w	sl, #0
 800bb4e:	9b07      	ldr	r3, [sp, #28]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	f43f ae20 	beq.w	800b796 <_strtod_l+0x76>
 800bb56:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800bb58:	9805      	ldr	r0, [sp, #20]
 800bb5a:	f7ff f957 	bl	800ae0c <_Bfree>
 800bb5e:	9805      	ldr	r0, [sp, #20]
 800bb60:	4631      	mov	r1, r6
 800bb62:	f7ff f953 	bl	800ae0c <_Bfree>
 800bb66:	9805      	ldr	r0, [sp, #20]
 800bb68:	4629      	mov	r1, r5
 800bb6a:	f7ff f94f 	bl	800ae0c <_Bfree>
 800bb6e:	9907      	ldr	r1, [sp, #28]
 800bb70:	9805      	ldr	r0, [sp, #20]
 800bb72:	f7ff f94b 	bl	800ae0c <_Bfree>
 800bb76:	9805      	ldr	r0, [sp, #20]
 800bb78:	4621      	mov	r1, r4
 800bb7a:	f7ff f947 	bl	800ae0c <_Bfree>
 800bb7e:	e60a      	b.n	800b796 <_strtod_l+0x76>
 800bb80:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800bb84:	1be0      	subs	r0, r4, r7
 800bb86:	4281      	cmp	r1, r0
 800bb88:	dbbc      	blt.n	800bb04 <_strtod_l+0x3e4>
 800bb8a:	4a40      	ldr	r2, [pc, #256]	@ (800bc8c <_strtod_l+0x56c>)
 800bb8c:	f1c3 030f 	rsb	r3, r3, #15
 800bb90:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800bb94:	ed91 7b00 	vldr	d7, [r1]
 800bb98:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bb9a:	ec4b ab16 	vmov	d6, sl, fp
 800bb9e:	1acb      	subs	r3, r1, r3
 800bba0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800bba4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bba8:	ed92 6b00 	vldr	d6, [r2]
 800bbac:	e796      	b.n	800badc <_strtod_l+0x3bc>
 800bbae:	3116      	adds	r1, #22
 800bbb0:	dba8      	blt.n	800bb04 <_strtod_l+0x3e4>
 800bbb2:	4b36      	ldr	r3, [pc, #216]	@ (800bc8c <_strtod_l+0x56c>)
 800bbb4:	1b3c      	subs	r4, r7, r4
 800bbb6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800bbba:	ed94 7b00 	vldr	d7, [r4]
 800bbbe:	ec4b ab16 	vmov	d6, sl, fp
 800bbc2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800bbc6:	e78b      	b.n	800bae0 <_strtod_l+0x3c0>
 800bbc8:	2000      	movs	r0, #0
 800bbca:	ec4b ab17 	vmov	d7, sl, fp
 800bbce:	4e30      	ldr	r6, [pc, #192]	@ (800bc90 <_strtod_l+0x570>)
 800bbd0:	1112      	asrs	r2, r2, #4
 800bbd2:	4601      	mov	r1, r0
 800bbd4:	2a01      	cmp	r2, #1
 800bbd6:	dc23      	bgt.n	800bc20 <_strtod_l+0x500>
 800bbd8:	b108      	cbz	r0, 800bbde <_strtod_l+0x4be>
 800bbda:	ec5b ab17 	vmov	sl, fp, d7
 800bbde:	4a2c      	ldr	r2, [pc, #176]	@ (800bc90 <_strtod_l+0x570>)
 800bbe0:	482c      	ldr	r0, [pc, #176]	@ (800bc94 <_strtod_l+0x574>)
 800bbe2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800bbe6:	ed92 7b00 	vldr	d7, [r2]
 800bbea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800bbee:	ec4b ab16 	vmov	d6, sl, fp
 800bbf2:	4a29      	ldr	r2, [pc, #164]	@ (800bc98 <_strtod_l+0x578>)
 800bbf4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bbf8:	ee17 1a90 	vmov	r1, s15
 800bbfc:	400a      	ands	r2, r1
 800bbfe:	4282      	cmp	r2, r0
 800bc00:	ec5b ab17 	vmov	sl, fp, d7
 800bc04:	d898      	bhi.n	800bb38 <_strtod_l+0x418>
 800bc06:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800bc0a:	4282      	cmp	r2, r0
 800bc0c:	bf86      	itte	hi
 800bc0e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800bc9c <_strtod_l+0x57c>
 800bc12:	f04f 3aff 	movhi.w	sl, #4294967295
 800bc16:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	9206      	str	r2, [sp, #24]
 800bc1e:	e076      	b.n	800bd0e <_strtod_l+0x5ee>
 800bc20:	f012 0f01 	tst.w	r2, #1
 800bc24:	d004      	beq.n	800bc30 <_strtod_l+0x510>
 800bc26:	ed96 6b00 	vldr	d6, [r6]
 800bc2a:	2001      	movs	r0, #1
 800bc2c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bc30:	3101      	adds	r1, #1
 800bc32:	1052      	asrs	r2, r2, #1
 800bc34:	3608      	adds	r6, #8
 800bc36:	e7cd      	b.n	800bbd4 <_strtod_l+0x4b4>
 800bc38:	d0ef      	beq.n	800bc1a <_strtod_l+0x4fa>
 800bc3a:	4252      	negs	r2, r2
 800bc3c:	f012 000f 	ands.w	r0, r2, #15
 800bc40:	d00a      	beq.n	800bc58 <_strtod_l+0x538>
 800bc42:	4912      	ldr	r1, [pc, #72]	@ (800bc8c <_strtod_l+0x56c>)
 800bc44:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800bc48:	ed91 7b00 	vldr	d7, [r1]
 800bc4c:	ec4b ab16 	vmov	d6, sl, fp
 800bc50:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800bc54:	ec5b ab17 	vmov	sl, fp, d7
 800bc58:	1112      	asrs	r2, r2, #4
 800bc5a:	d0de      	beq.n	800bc1a <_strtod_l+0x4fa>
 800bc5c:	2a1f      	cmp	r2, #31
 800bc5e:	dd1f      	ble.n	800bca0 <_strtod_l+0x580>
 800bc60:	2400      	movs	r4, #0
 800bc62:	4625      	mov	r5, r4
 800bc64:	9407      	str	r4, [sp, #28]
 800bc66:	4626      	mov	r6, r4
 800bc68:	9a05      	ldr	r2, [sp, #20]
 800bc6a:	2322      	movs	r3, #34	@ 0x22
 800bc6c:	f04f 0a00 	mov.w	sl, #0
 800bc70:	f04f 0b00 	mov.w	fp, #0
 800bc74:	6013      	str	r3, [r2, #0]
 800bc76:	e76a      	b.n	800bb4e <_strtod_l+0x42e>
 800bc78:	0800d54d 	.word	0x0800d54d
 800bc7c:	0800d764 	.word	0x0800d764
 800bc80:	0800d545 	.word	0x0800d545
 800bc84:	0800d57c 	.word	0x0800d57c
 800bc88:	0800d90d 	.word	0x0800d90d
 800bc8c:	0800d698 	.word	0x0800d698
 800bc90:	0800d670 	.word	0x0800d670
 800bc94:	7ca00000 	.word	0x7ca00000
 800bc98:	7ff00000 	.word	0x7ff00000
 800bc9c:	7fefffff 	.word	0x7fefffff
 800bca0:	f012 0110 	ands.w	r1, r2, #16
 800bca4:	bf18      	it	ne
 800bca6:	216a      	movne	r1, #106	@ 0x6a
 800bca8:	9106      	str	r1, [sp, #24]
 800bcaa:	ec4b ab17 	vmov	d7, sl, fp
 800bcae:	49b0      	ldr	r1, [pc, #704]	@ (800bf70 <_strtod_l+0x850>)
 800bcb0:	2000      	movs	r0, #0
 800bcb2:	07d6      	lsls	r6, r2, #31
 800bcb4:	d504      	bpl.n	800bcc0 <_strtod_l+0x5a0>
 800bcb6:	ed91 6b00 	vldr	d6, [r1]
 800bcba:	2001      	movs	r0, #1
 800bcbc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bcc0:	1052      	asrs	r2, r2, #1
 800bcc2:	f101 0108 	add.w	r1, r1, #8
 800bcc6:	d1f4      	bne.n	800bcb2 <_strtod_l+0x592>
 800bcc8:	b108      	cbz	r0, 800bcce <_strtod_l+0x5ae>
 800bcca:	ec5b ab17 	vmov	sl, fp, d7
 800bcce:	9a06      	ldr	r2, [sp, #24]
 800bcd0:	b1b2      	cbz	r2, 800bd00 <_strtod_l+0x5e0>
 800bcd2:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800bcd6:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800bcda:	2a00      	cmp	r2, #0
 800bcdc:	4658      	mov	r0, fp
 800bcde:	dd0f      	ble.n	800bd00 <_strtod_l+0x5e0>
 800bce0:	2a1f      	cmp	r2, #31
 800bce2:	dd55      	ble.n	800bd90 <_strtod_l+0x670>
 800bce4:	2a34      	cmp	r2, #52	@ 0x34
 800bce6:	bfde      	ittt	le
 800bce8:	f04f 32ff 	movle.w	r2, #4294967295
 800bcec:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800bcf0:	408a      	lslle	r2, r1
 800bcf2:	f04f 0a00 	mov.w	sl, #0
 800bcf6:	bfcc      	ite	gt
 800bcf8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bcfc:	ea02 0b00 	andle.w	fp, r2, r0
 800bd00:	ec4b ab17 	vmov	d7, sl, fp
 800bd04:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bd08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd0c:	d0a8      	beq.n	800bc60 <_strtod_l+0x540>
 800bd0e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bd10:	9805      	ldr	r0, [sp, #20]
 800bd12:	f8cd 9000 	str.w	r9, [sp]
 800bd16:	462a      	mov	r2, r5
 800bd18:	f7ff f8e0 	bl	800aedc <__s2b>
 800bd1c:	9007      	str	r0, [sp, #28]
 800bd1e:	2800      	cmp	r0, #0
 800bd20:	f43f af0a 	beq.w	800bb38 <_strtod_l+0x418>
 800bd24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd26:	1b3f      	subs	r7, r7, r4
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	bfb4      	ite	lt
 800bd2c:	463b      	movlt	r3, r7
 800bd2e:	2300      	movge	r3, #0
 800bd30:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd34:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800bf60 <_strtod_l+0x840>
 800bd38:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bd3c:	2400      	movs	r4, #0
 800bd3e:	930d      	str	r3, [sp, #52]	@ 0x34
 800bd40:	4625      	mov	r5, r4
 800bd42:	9b07      	ldr	r3, [sp, #28]
 800bd44:	9805      	ldr	r0, [sp, #20]
 800bd46:	6859      	ldr	r1, [r3, #4]
 800bd48:	f7ff f820 	bl	800ad8c <_Balloc>
 800bd4c:	4606      	mov	r6, r0
 800bd4e:	2800      	cmp	r0, #0
 800bd50:	f43f aef6 	beq.w	800bb40 <_strtod_l+0x420>
 800bd54:	9b07      	ldr	r3, [sp, #28]
 800bd56:	691a      	ldr	r2, [r3, #16]
 800bd58:	ec4b ab19 	vmov	d9, sl, fp
 800bd5c:	3202      	adds	r2, #2
 800bd5e:	f103 010c 	add.w	r1, r3, #12
 800bd62:	0092      	lsls	r2, r2, #2
 800bd64:	300c      	adds	r0, #12
 800bd66:	f000 fd33 	bl	800c7d0 <memcpy>
 800bd6a:	eeb0 0b49 	vmov.f64	d0, d9
 800bd6e:	9805      	ldr	r0, [sp, #20]
 800bd70:	aa14      	add	r2, sp, #80	@ 0x50
 800bd72:	a913      	add	r1, sp, #76	@ 0x4c
 800bd74:	f7ff fbee 	bl	800b554 <__d2b>
 800bd78:	9012      	str	r0, [sp, #72]	@ 0x48
 800bd7a:	2800      	cmp	r0, #0
 800bd7c:	f43f aee0 	beq.w	800bb40 <_strtod_l+0x420>
 800bd80:	9805      	ldr	r0, [sp, #20]
 800bd82:	2101      	movs	r1, #1
 800bd84:	f7ff f940 	bl	800b008 <__i2b>
 800bd88:	4605      	mov	r5, r0
 800bd8a:	b940      	cbnz	r0, 800bd9e <_strtod_l+0x67e>
 800bd8c:	2500      	movs	r5, #0
 800bd8e:	e6d7      	b.n	800bb40 <_strtod_l+0x420>
 800bd90:	f04f 31ff 	mov.w	r1, #4294967295
 800bd94:	fa01 f202 	lsl.w	r2, r1, r2
 800bd98:	ea02 0a0a 	and.w	sl, r2, sl
 800bd9c:	e7b0      	b.n	800bd00 <_strtod_l+0x5e0>
 800bd9e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800bda0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bda2:	2f00      	cmp	r7, #0
 800bda4:	bfab      	itete	ge
 800bda6:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800bda8:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800bdaa:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800bdae:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800bdb2:	bfac      	ite	ge
 800bdb4:	eb07 0903 	addge.w	r9, r7, r3
 800bdb8:	eba3 0807 	sublt.w	r8, r3, r7
 800bdbc:	9b06      	ldr	r3, [sp, #24]
 800bdbe:	1aff      	subs	r7, r7, r3
 800bdc0:	4417      	add	r7, r2
 800bdc2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800bdc6:	4a6b      	ldr	r2, [pc, #428]	@ (800bf74 <_strtod_l+0x854>)
 800bdc8:	3f01      	subs	r7, #1
 800bdca:	4297      	cmp	r7, r2
 800bdcc:	da51      	bge.n	800be72 <_strtod_l+0x752>
 800bdce:	1bd1      	subs	r1, r2, r7
 800bdd0:	291f      	cmp	r1, #31
 800bdd2:	eba3 0301 	sub.w	r3, r3, r1
 800bdd6:	f04f 0201 	mov.w	r2, #1
 800bdda:	dc3e      	bgt.n	800be5a <_strtod_l+0x73a>
 800bddc:	408a      	lsls	r2, r1
 800bdde:	920c      	str	r2, [sp, #48]	@ 0x30
 800bde0:	2200      	movs	r2, #0
 800bde2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800bde4:	eb09 0703 	add.w	r7, r9, r3
 800bde8:	4498      	add	r8, r3
 800bdea:	9b06      	ldr	r3, [sp, #24]
 800bdec:	45b9      	cmp	r9, r7
 800bdee:	4498      	add	r8, r3
 800bdf0:	464b      	mov	r3, r9
 800bdf2:	bfa8      	it	ge
 800bdf4:	463b      	movge	r3, r7
 800bdf6:	4543      	cmp	r3, r8
 800bdf8:	bfa8      	it	ge
 800bdfa:	4643      	movge	r3, r8
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	bfc2      	ittt	gt
 800be00:	1aff      	subgt	r7, r7, r3
 800be02:	eba8 0803 	subgt.w	r8, r8, r3
 800be06:	eba9 0903 	subgt.w	r9, r9, r3
 800be0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	dd16      	ble.n	800be3e <_strtod_l+0x71e>
 800be10:	4629      	mov	r1, r5
 800be12:	9805      	ldr	r0, [sp, #20]
 800be14:	461a      	mov	r2, r3
 800be16:	f7ff f9b7 	bl	800b188 <__pow5mult>
 800be1a:	4605      	mov	r5, r0
 800be1c:	2800      	cmp	r0, #0
 800be1e:	d0b5      	beq.n	800bd8c <_strtod_l+0x66c>
 800be20:	4601      	mov	r1, r0
 800be22:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800be24:	9805      	ldr	r0, [sp, #20]
 800be26:	f7ff f905 	bl	800b034 <__multiply>
 800be2a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800be2c:	2800      	cmp	r0, #0
 800be2e:	f43f ae87 	beq.w	800bb40 <_strtod_l+0x420>
 800be32:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800be34:	9805      	ldr	r0, [sp, #20]
 800be36:	f7fe ffe9 	bl	800ae0c <_Bfree>
 800be3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be3c:	9312      	str	r3, [sp, #72]	@ 0x48
 800be3e:	2f00      	cmp	r7, #0
 800be40:	dc1b      	bgt.n	800be7a <_strtod_l+0x75a>
 800be42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be44:	2b00      	cmp	r3, #0
 800be46:	dd21      	ble.n	800be8c <_strtod_l+0x76c>
 800be48:	4631      	mov	r1, r6
 800be4a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800be4c:	9805      	ldr	r0, [sp, #20]
 800be4e:	f7ff f99b 	bl	800b188 <__pow5mult>
 800be52:	4606      	mov	r6, r0
 800be54:	b9d0      	cbnz	r0, 800be8c <_strtod_l+0x76c>
 800be56:	2600      	movs	r6, #0
 800be58:	e672      	b.n	800bb40 <_strtod_l+0x420>
 800be5a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800be5e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800be62:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800be66:	37e2      	adds	r7, #226	@ 0xe2
 800be68:	fa02 f107 	lsl.w	r1, r2, r7
 800be6c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800be6e:	920c      	str	r2, [sp, #48]	@ 0x30
 800be70:	e7b8      	b.n	800bde4 <_strtod_l+0x6c4>
 800be72:	2200      	movs	r2, #0
 800be74:	920b      	str	r2, [sp, #44]	@ 0x2c
 800be76:	2201      	movs	r2, #1
 800be78:	e7f9      	b.n	800be6e <_strtod_l+0x74e>
 800be7a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800be7c:	9805      	ldr	r0, [sp, #20]
 800be7e:	463a      	mov	r2, r7
 800be80:	f7ff f9dc 	bl	800b23c <__lshift>
 800be84:	9012      	str	r0, [sp, #72]	@ 0x48
 800be86:	2800      	cmp	r0, #0
 800be88:	d1db      	bne.n	800be42 <_strtod_l+0x722>
 800be8a:	e659      	b.n	800bb40 <_strtod_l+0x420>
 800be8c:	f1b8 0f00 	cmp.w	r8, #0
 800be90:	dd07      	ble.n	800bea2 <_strtod_l+0x782>
 800be92:	4631      	mov	r1, r6
 800be94:	9805      	ldr	r0, [sp, #20]
 800be96:	4642      	mov	r2, r8
 800be98:	f7ff f9d0 	bl	800b23c <__lshift>
 800be9c:	4606      	mov	r6, r0
 800be9e:	2800      	cmp	r0, #0
 800bea0:	d0d9      	beq.n	800be56 <_strtod_l+0x736>
 800bea2:	f1b9 0f00 	cmp.w	r9, #0
 800bea6:	dd08      	ble.n	800beba <_strtod_l+0x79a>
 800bea8:	4629      	mov	r1, r5
 800beaa:	9805      	ldr	r0, [sp, #20]
 800beac:	464a      	mov	r2, r9
 800beae:	f7ff f9c5 	bl	800b23c <__lshift>
 800beb2:	4605      	mov	r5, r0
 800beb4:	2800      	cmp	r0, #0
 800beb6:	f43f ae43 	beq.w	800bb40 <_strtod_l+0x420>
 800beba:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800bebc:	9805      	ldr	r0, [sp, #20]
 800bebe:	4632      	mov	r2, r6
 800bec0:	f7ff fa44 	bl	800b34c <__mdiff>
 800bec4:	4604      	mov	r4, r0
 800bec6:	2800      	cmp	r0, #0
 800bec8:	f43f ae3a 	beq.w	800bb40 <_strtod_l+0x420>
 800becc:	2300      	movs	r3, #0
 800bece:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800bed2:	60c3      	str	r3, [r0, #12]
 800bed4:	4629      	mov	r1, r5
 800bed6:	f7ff fa1d 	bl	800b314 <__mcmp>
 800beda:	2800      	cmp	r0, #0
 800bedc:	da4e      	bge.n	800bf7c <_strtod_l+0x85c>
 800bede:	ea58 080a 	orrs.w	r8, r8, sl
 800bee2:	d174      	bne.n	800bfce <_strtod_l+0x8ae>
 800bee4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d170      	bne.n	800bfce <_strtod_l+0x8ae>
 800beec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bef0:	0d1b      	lsrs	r3, r3, #20
 800bef2:	051b      	lsls	r3, r3, #20
 800bef4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bef8:	d969      	bls.n	800bfce <_strtod_l+0x8ae>
 800befa:	6963      	ldr	r3, [r4, #20]
 800befc:	b913      	cbnz	r3, 800bf04 <_strtod_l+0x7e4>
 800befe:	6923      	ldr	r3, [r4, #16]
 800bf00:	2b01      	cmp	r3, #1
 800bf02:	dd64      	ble.n	800bfce <_strtod_l+0x8ae>
 800bf04:	4621      	mov	r1, r4
 800bf06:	2201      	movs	r2, #1
 800bf08:	9805      	ldr	r0, [sp, #20]
 800bf0a:	f7ff f997 	bl	800b23c <__lshift>
 800bf0e:	4629      	mov	r1, r5
 800bf10:	4604      	mov	r4, r0
 800bf12:	f7ff f9ff 	bl	800b314 <__mcmp>
 800bf16:	2800      	cmp	r0, #0
 800bf18:	dd59      	ble.n	800bfce <_strtod_l+0x8ae>
 800bf1a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bf1e:	9a06      	ldr	r2, [sp, #24]
 800bf20:	0d1b      	lsrs	r3, r3, #20
 800bf22:	051b      	lsls	r3, r3, #20
 800bf24:	2a00      	cmp	r2, #0
 800bf26:	d070      	beq.n	800c00a <_strtod_l+0x8ea>
 800bf28:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bf2c:	d86d      	bhi.n	800c00a <_strtod_l+0x8ea>
 800bf2e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bf32:	f67f ae99 	bls.w	800bc68 <_strtod_l+0x548>
 800bf36:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800bf68 <_strtod_l+0x848>
 800bf3a:	ec4b ab16 	vmov	d6, sl, fp
 800bf3e:	4b0e      	ldr	r3, [pc, #56]	@ (800bf78 <_strtod_l+0x858>)
 800bf40:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bf44:	ee17 2a90 	vmov	r2, s15
 800bf48:	4013      	ands	r3, r2
 800bf4a:	ec5b ab17 	vmov	sl, fp, d7
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	f47f ae01 	bne.w	800bb56 <_strtod_l+0x436>
 800bf54:	9a05      	ldr	r2, [sp, #20]
 800bf56:	2322      	movs	r3, #34	@ 0x22
 800bf58:	6013      	str	r3, [r2, #0]
 800bf5a:	e5fc      	b.n	800bb56 <_strtod_l+0x436>
 800bf5c:	f3af 8000 	nop.w
 800bf60:	ffc00000 	.word	0xffc00000
 800bf64:	41dfffff 	.word	0x41dfffff
 800bf68:	00000000 	.word	0x00000000
 800bf6c:	39500000 	.word	0x39500000
 800bf70:	0800d790 	.word	0x0800d790
 800bf74:	fffffc02 	.word	0xfffffc02
 800bf78:	7ff00000 	.word	0x7ff00000
 800bf7c:	46d9      	mov	r9, fp
 800bf7e:	d15d      	bne.n	800c03c <_strtod_l+0x91c>
 800bf80:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bf84:	f1b8 0f00 	cmp.w	r8, #0
 800bf88:	d02a      	beq.n	800bfe0 <_strtod_l+0x8c0>
 800bf8a:	4aab      	ldr	r2, [pc, #684]	@ (800c238 <_strtod_l+0xb18>)
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d12a      	bne.n	800bfe6 <_strtod_l+0x8c6>
 800bf90:	9b06      	ldr	r3, [sp, #24]
 800bf92:	4652      	mov	r2, sl
 800bf94:	b1fb      	cbz	r3, 800bfd6 <_strtod_l+0x8b6>
 800bf96:	4ba9      	ldr	r3, [pc, #676]	@ (800c23c <_strtod_l+0xb1c>)
 800bf98:	ea0b 0303 	and.w	r3, fp, r3
 800bf9c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bfa0:	f04f 31ff 	mov.w	r1, #4294967295
 800bfa4:	d81a      	bhi.n	800bfdc <_strtod_l+0x8bc>
 800bfa6:	0d1b      	lsrs	r3, r3, #20
 800bfa8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bfac:	fa01 f303 	lsl.w	r3, r1, r3
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d118      	bne.n	800bfe6 <_strtod_l+0x8c6>
 800bfb4:	4ba2      	ldr	r3, [pc, #648]	@ (800c240 <_strtod_l+0xb20>)
 800bfb6:	4599      	cmp	r9, r3
 800bfb8:	d102      	bne.n	800bfc0 <_strtod_l+0x8a0>
 800bfba:	3201      	adds	r2, #1
 800bfbc:	f43f adc0 	beq.w	800bb40 <_strtod_l+0x420>
 800bfc0:	4b9e      	ldr	r3, [pc, #632]	@ (800c23c <_strtod_l+0xb1c>)
 800bfc2:	ea09 0303 	and.w	r3, r9, r3
 800bfc6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800bfca:	f04f 0a00 	mov.w	sl, #0
 800bfce:	9b06      	ldr	r3, [sp, #24]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d1b0      	bne.n	800bf36 <_strtod_l+0x816>
 800bfd4:	e5bf      	b.n	800bb56 <_strtod_l+0x436>
 800bfd6:	f04f 33ff 	mov.w	r3, #4294967295
 800bfda:	e7e9      	b.n	800bfb0 <_strtod_l+0x890>
 800bfdc:	460b      	mov	r3, r1
 800bfde:	e7e7      	b.n	800bfb0 <_strtod_l+0x890>
 800bfe0:	ea53 030a 	orrs.w	r3, r3, sl
 800bfe4:	d099      	beq.n	800bf1a <_strtod_l+0x7fa>
 800bfe6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfe8:	b1c3      	cbz	r3, 800c01c <_strtod_l+0x8fc>
 800bfea:	ea13 0f09 	tst.w	r3, r9
 800bfee:	d0ee      	beq.n	800bfce <_strtod_l+0x8ae>
 800bff0:	9a06      	ldr	r2, [sp, #24]
 800bff2:	4650      	mov	r0, sl
 800bff4:	4659      	mov	r1, fp
 800bff6:	f1b8 0f00 	cmp.w	r8, #0
 800bffa:	d013      	beq.n	800c024 <_strtod_l+0x904>
 800bffc:	f7ff fb75 	bl	800b6ea <sulp>
 800c000:	ee39 7b00 	vadd.f64	d7, d9, d0
 800c004:	ec5b ab17 	vmov	sl, fp, d7
 800c008:	e7e1      	b.n	800bfce <_strtod_l+0x8ae>
 800c00a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c00e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c012:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c016:	f04f 3aff 	mov.w	sl, #4294967295
 800c01a:	e7d8      	b.n	800bfce <_strtod_l+0x8ae>
 800c01c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c01e:	ea13 0f0a 	tst.w	r3, sl
 800c022:	e7e4      	b.n	800bfee <_strtod_l+0x8ce>
 800c024:	f7ff fb61 	bl	800b6ea <sulp>
 800c028:	ee39 0b40 	vsub.f64	d0, d9, d0
 800c02c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800c030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c034:	ec5b ab10 	vmov	sl, fp, d0
 800c038:	d1c9      	bne.n	800bfce <_strtod_l+0x8ae>
 800c03a:	e615      	b.n	800bc68 <_strtod_l+0x548>
 800c03c:	4629      	mov	r1, r5
 800c03e:	4620      	mov	r0, r4
 800c040:	f7ff fae0 	bl	800b604 <__ratio>
 800c044:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800c048:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c04c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c050:	d85d      	bhi.n	800c10e <_strtod_l+0x9ee>
 800c052:	f1b8 0f00 	cmp.w	r8, #0
 800c056:	d164      	bne.n	800c122 <_strtod_l+0xa02>
 800c058:	f1ba 0f00 	cmp.w	sl, #0
 800c05c:	d14b      	bne.n	800c0f6 <_strtod_l+0x9d6>
 800c05e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c062:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800c066:	2b00      	cmp	r3, #0
 800c068:	d160      	bne.n	800c12c <_strtod_l+0xa0c>
 800c06a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800c06e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800c072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c076:	d401      	bmi.n	800c07c <_strtod_l+0x95c>
 800c078:	ee20 8b08 	vmul.f64	d8, d0, d8
 800c07c:	eeb1 ab48 	vneg.f64	d10, d8
 800c080:	486e      	ldr	r0, [pc, #440]	@ (800c23c <_strtod_l+0xb1c>)
 800c082:	4970      	ldr	r1, [pc, #448]	@ (800c244 <_strtod_l+0xb24>)
 800c084:	ea09 0700 	and.w	r7, r9, r0
 800c088:	428f      	cmp	r7, r1
 800c08a:	ec53 2b1a 	vmov	r2, r3, d10
 800c08e:	d17d      	bne.n	800c18c <_strtod_l+0xa6c>
 800c090:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800c094:	ec4b ab1c 	vmov	d12, sl, fp
 800c098:	eeb0 0b4c 	vmov.f64	d0, d12
 800c09c:	f7ff f9ea 	bl	800b474 <__ulp>
 800c0a0:	4866      	ldr	r0, [pc, #408]	@ (800c23c <_strtod_l+0xb1c>)
 800c0a2:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800c0a6:	ee1c 3a90 	vmov	r3, s25
 800c0aa:	4a67      	ldr	r2, [pc, #412]	@ (800c248 <_strtod_l+0xb28>)
 800c0ac:	ea03 0100 	and.w	r1, r3, r0
 800c0b0:	4291      	cmp	r1, r2
 800c0b2:	ec5b ab1c 	vmov	sl, fp, d12
 800c0b6:	d93c      	bls.n	800c132 <_strtod_l+0xa12>
 800c0b8:	ee19 2a90 	vmov	r2, s19
 800c0bc:	4b60      	ldr	r3, [pc, #384]	@ (800c240 <_strtod_l+0xb20>)
 800c0be:	429a      	cmp	r2, r3
 800c0c0:	d104      	bne.n	800c0cc <_strtod_l+0x9ac>
 800c0c2:	ee19 3a10 	vmov	r3, s18
 800c0c6:	3301      	adds	r3, #1
 800c0c8:	f43f ad3a 	beq.w	800bb40 <_strtod_l+0x420>
 800c0cc:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800c240 <_strtod_l+0xb20>
 800c0d0:	f04f 3aff 	mov.w	sl, #4294967295
 800c0d4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c0d6:	9805      	ldr	r0, [sp, #20]
 800c0d8:	f7fe fe98 	bl	800ae0c <_Bfree>
 800c0dc:	9805      	ldr	r0, [sp, #20]
 800c0de:	4631      	mov	r1, r6
 800c0e0:	f7fe fe94 	bl	800ae0c <_Bfree>
 800c0e4:	9805      	ldr	r0, [sp, #20]
 800c0e6:	4629      	mov	r1, r5
 800c0e8:	f7fe fe90 	bl	800ae0c <_Bfree>
 800c0ec:	9805      	ldr	r0, [sp, #20]
 800c0ee:	4621      	mov	r1, r4
 800c0f0:	f7fe fe8c 	bl	800ae0c <_Bfree>
 800c0f4:	e625      	b.n	800bd42 <_strtod_l+0x622>
 800c0f6:	f1ba 0f01 	cmp.w	sl, #1
 800c0fa:	d103      	bne.n	800c104 <_strtod_l+0x9e4>
 800c0fc:	f1bb 0f00 	cmp.w	fp, #0
 800c100:	f43f adb2 	beq.w	800bc68 <_strtod_l+0x548>
 800c104:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800c108:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800c10c:	e7b8      	b.n	800c080 <_strtod_l+0x960>
 800c10e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800c112:	ee20 8b08 	vmul.f64	d8, d0, d8
 800c116:	f1b8 0f00 	cmp.w	r8, #0
 800c11a:	d0af      	beq.n	800c07c <_strtod_l+0x95c>
 800c11c:	eeb0 ab48 	vmov.f64	d10, d8
 800c120:	e7ae      	b.n	800c080 <_strtod_l+0x960>
 800c122:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800c126:	eeb0 8b4a 	vmov.f64	d8, d10
 800c12a:	e7a9      	b.n	800c080 <_strtod_l+0x960>
 800c12c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800c130:	e7a6      	b.n	800c080 <_strtod_l+0x960>
 800c132:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c136:	9b06      	ldr	r3, [sp, #24]
 800c138:	46d9      	mov	r9, fp
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d1ca      	bne.n	800c0d4 <_strtod_l+0x9b4>
 800c13e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c142:	0d1b      	lsrs	r3, r3, #20
 800c144:	051b      	lsls	r3, r3, #20
 800c146:	429f      	cmp	r7, r3
 800c148:	d1c4      	bne.n	800c0d4 <_strtod_l+0x9b4>
 800c14a:	ec51 0b18 	vmov	r0, r1, d8
 800c14e:	f7f4 faf3 	bl	8000738 <__aeabi_d2lz>
 800c152:	f7f4 faab 	bl	80006ac <__aeabi_l2d>
 800c156:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800c15a:	ec41 0b17 	vmov	d7, r0, r1
 800c15e:	ea49 090a 	orr.w	r9, r9, sl
 800c162:	ea59 0908 	orrs.w	r9, r9, r8
 800c166:	ee38 8b47 	vsub.f64	d8, d8, d7
 800c16a:	d03c      	beq.n	800c1e6 <_strtod_l+0xac6>
 800c16c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800c220 <_strtod_l+0xb00>
 800c170:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c178:	f53f aced 	bmi.w	800bb56 <_strtod_l+0x436>
 800c17c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800c228 <_strtod_l+0xb08>
 800c180:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c188:	dda4      	ble.n	800c0d4 <_strtod_l+0x9b4>
 800c18a:	e4e4      	b.n	800bb56 <_strtod_l+0x436>
 800c18c:	9906      	ldr	r1, [sp, #24]
 800c18e:	b1e1      	cbz	r1, 800c1ca <_strtod_l+0xaaa>
 800c190:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800c194:	d819      	bhi.n	800c1ca <_strtod_l+0xaaa>
 800c196:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800c19a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c19e:	d811      	bhi.n	800c1c4 <_strtod_l+0xaa4>
 800c1a0:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800c1a4:	ee18 3a10 	vmov	r3, s16
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	bf38      	it	cc
 800c1ac:	2301      	movcc	r3, #1
 800c1ae:	ee08 3a10 	vmov	s16, r3
 800c1b2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800c1b6:	f1b8 0f00 	cmp.w	r8, #0
 800c1ba:	d111      	bne.n	800c1e0 <_strtod_l+0xac0>
 800c1bc:	eeb1 7b48 	vneg.f64	d7, d8
 800c1c0:	ec53 2b17 	vmov	r2, r3, d7
 800c1c4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800c1c8:	1bcb      	subs	r3, r1, r7
 800c1ca:	eeb0 0b49 	vmov.f64	d0, d9
 800c1ce:	ec43 2b1a 	vmov	d10, r2, r3
 800c1d2:	f7ff f94f 	bl	800b474 <__ulp>
 800c1d6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800c1da:	ec5b ab19 	vmov	sl, fp, d9
 800c1de:	e7aa      	b.n	800c136 <_strtod_l+0xa16>
 800c1e0:	eeb0 7b48 	vmov.f64	d7, d8
 800c1e4:	e7ec      	b.n	800c1c0 <_strtod_l+0xaa0>
 800c1e6:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800c230 <_strtod_l+0xb10>
 800c1ea:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c1ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1f2:	f57f af6f 	bpl.w	800c0d4 <_strtod_l+0x9b4>
 800c1f6:	e4ae      	b.n	800bb56 <_strtod_l+0x436>
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	9308      	str	r3, [sp, #32]
 800c1fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c1fe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c200:	6013      	str	r3, [r2, #0]
 800c202:	f7ff bacc 	b.w	800b79e <_strtod_l+0x7e>
 800c206:	2a65      	cmp	r2, #101	@ 0x65
 800c208:	f43f abbc 	beq.w	800b984 <_strtod_l+0x264>
 800c20c:	2a45      	cmp	r2, #69	@ 0x45
 800c20e:	f43f abb9 	beq.w	800b984 <_strtod_l+0x264>
 800c212:	2301      	movs	r3, #1
 800c214:	9306      	str	r3, [sp, #24]
 800c216:	f7ff bbf0 	b.w	800b9fa <_strtod_l+0x2da>
 800c21a:	bf00      	nop
 800c21c:	f3af 8000 	nop.w
 800c220:	94a03595 	.word	0x94a03595
 800c224:	3fdfffff 	.word	0x3fdfffff
 800c228:	35afe535 	.word	0x35afe535
 800c22c:	3fe00000 	.word	0x3fe00000
 800c230:	94a03595 	.word	0x94a03595
 800c234:	3fcfffff 	.word	0x3fcfffff
 800c238:	000fffff 	.word	0x000fffff
 800c23c:	7ff00000 	.word	0x7ff00000
 800c240:	7fefffff 	.word	0x7fefffff
 800c244:	7fe00000 	.word	0x7fe00000
 800c248:	7c9fffff 	.word	0x7c9fffff

0800c24c <_strtod_r>:
 800c24c:	4b01      	ldr	r3, [pc, #4]	@ (800c254 <_strtod_r+0x8>)
 800c24e:	f7ff ba67 	b.w	800b720 <_strtod_l>
 800c252:	bf00      	nop
 800c254:	2400006c 	.word	0x2400006c

0800c258 <_strtol_l.constprop.0>:
 800c258:	2b24      	cmp	r3, #36	@ 0x24
 800c25a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c25e:	4686      	mov	lr, r0
 800c260:	4690      	mov	r8, r2
 800c262:	d801      	bhi.n	800c268 <_strtol_l.constprop.0+0x10>
 800c264:	2b01      	cmp	r3, #1
 800c266:	d106      	bne.n	800c276 <_strtol_l.constprop.0+0x1e>
 800c268:	f7fd fe7e 	bl	8009f68 <__errno>
 800c26c:	2316      	movs	r3, #22
 800c26e:	6003      	str	r3, [r0, #0]
 800c270:	2000      	movs	r0, #0
 800c272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c276:	4834      	ldr	r0, [pc, #208]	@ (800c348 <_strtol_l.constprop.0+0xf0>)
 800c278:	460d      	mov	r5, r1
 800c27a:	462a      	mov	r2, r5
 800c27c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c280:	5d06      	ldrb	r6, [r0, r4]
 800c282:	f016 0608 	ands.w	r6, r6, #8
 800c286:	d1f8      	bne.n	800c27a <_strtol_l.constprop.0+0x22>
 800c288:	2c2d      	cmp	r4, #45	@ 0x2d
 800c28a:	d12d      	bne.n	800c2e8 <_strtol_l.constprop.0+0x90>
 800c28c:	782c      	ldrb	r4, [r5, #0]
 800c28e:	2601      	movs	r6, #1
 800c290:	1c95      	adds	r5, r2, #2
 800c292:	f033 0210 	bics.w	r2, r3, #16
 800c296:	d109      	bne.n	800c2ac <_strtol_l.constprop.0+0x54>
 800c298:	2c30      	cmp	r4, #48	@ 0x30
 800c29a:	d12a      	bne.n	800c2f2 <_strtol_l.constprop.0+0x9a>
 800c29c:	782a      	ldrb	r2, [r5, #0]
 800c29e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c2a2:	2a58      	cmp	r2, #88	@ 0x58
 800c2a4:	d125      	bne.n	800c2f2 <_strtol_l.constprop.0+0x9a>
 800c2a6:	786c      	ldrb	r4, [r5, #1]
 800c2a8:	2310      	movs	r3, #16
 800c2aa:	3502      	adds	r5, #2
 800c2ac:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c2b0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	fbbc f9f3 	udiv	r9, ip, r3
 800c2ba:	4610      	mov	r0, r2
 800c2bc:	fb03 ca19 	mls	sl, r3, r9, ip
 800c2c0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c2c4:	2f09      	cmp	r7, #9
 800c2c6:	d81b      	bhi.n	800c300 <_strtol_l.constprop.0+0xa8>
 800c2c8:	463c      	mov	r4, r7
 800c2ca:	42a3      	cmp	r3, r4
 800c2cc:	dd27      	ble.n	800c31e <_strtol_l.constprop.0+0xc6>
 800c2ce:	1c57      	adds	r7, r2, #1
 800c2d0:	d007      	beq.n	800c2e2 <_strtol_l.constprop.0+0x8a>
 800c2d2:	4581      	cmp	r9, r0
 800c2d4:	d320      	bcc.n	800c318 <_strtol_l.constprop.0+0xc0>
 800c2d6:	d101      	bne.n	800c2dc <_strtol_l.constprop.0+0x84>
 800c2d8:	45a2      	cmp	sl, r4
 800c2da:	db1d      	blt.n	800c318 <_strtol_l.constprop.0+0xc0>
 800c2dc:	fb00 4003 	mla	r0, r0, r3, r4
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c2e6:	e7eb      	b.n	800c2c0 <_strtol_l.constprop.0+0x68>
 800c2e8:	2c2b      	cmp	r4, #43	@ 0x2b
 800c2ea:	bf04      	itt	eq
 800c2ec:	782c      	ldrbeq	r4, [r5, #0]
 800c2ee:	1c95      	addeq	r5, r2, #2
 800c2f0:	e7cf      	b.n	800c292 <_strtol_l.constprop.0+0x3a>
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d1da      	bne.n	800c2ac <_strtol_l.constprop.0+0x54>
 800c2f6:	2c30      	cmp	r4, #48	@ 0x30
 800c2f8:	bf0c      	ite	eq
 800c2fa:	2308      	moveq	r3, #8
 800c2fc:	230a      	movne	r3, #10
 800c2fe:	e7d5      	b.n	800c2ac <_strtol_l.constprop.0+0x54>
 800c300:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c304:	2f19      	cmp	r7, #25
 800c306:	d801      	bhi.n	800c30c <_strtol_l.constprop.0+0xb4>
 800c308:	3c37      	subs	r4, #55	@ 0x37
 800c30a:	e7de      	b.n	800c2ca <_strtol_l.constprop.0+0x72>
 800c30c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c310:	2f19      	cmp	r7, #25
 800c312:	d804      	bhi.n	800c31e <_strtol_l.constprop.0+0xc6>
 800c314:	3c57      	subs	r4, #87	@ 0x57
 800c316:	e7d8      	b.n	800c2ca <_strtol_l.constprop.0+0x72>
 800c318:	f04f 32ff 	mov.w	r2, #4294967295
 800c31c:	e7e1      	b.n	800c2e2 <_strtol_l.constprop.0+0x8a>
 800c31e:	1c53      	adds	r3, r2, #1
 800c320:	d108      	bne.n	800c334 <_strtol_l.constprop.0+0xdc>
 800c322:	2322      	movs	r3, #34	@ 0x22
 800c324:	f8ce 3000 	str.w	r3, [lr]
 800c328:	4660      	mov	r0, ip
 800c32a:	f1b8 0f00 	cmp.w	r8, #0
 800c32e:	d0a0      	beq.n	800c272 <_strtol_l.constprop.0+0x1a>
 800c330:	1e69      	subs	r1, r5, #1
 800c332:	e006      	b.n	800c342 <_strtol_l.constprop.0+0xea>
 800c334:	b106      	cbz	r6, 800c338 <_strtol_l.constprop.0+0xe0>
 800c336:	4240      	negs	r0, r0
 800c338:	f1b8 0f00 	cmp.w	r8, #0
 800c33c:	d099      	beq.n	800c272 <_strtol_l.constprop.0+0x1a>
 800c33e:	2a00      	cmp	r2, #0
 800c340:	d1f6      	bne.n	800c330 <_strtol_l.constprop.0+0xd8>
 800c342:	f8c8 1000 	str.w	r1, [r8]
 800c346:	e794      	b.n	800c272 <_strtol_l.constprop.0+0x1a>
 800c348:	0800d7b9 	.word	0x0800d7b9

0800c34c <_strtol_r>:
 800c34c:	f7ff bf84 	b.w	800c258 <_strtol_l.constprop.0>

0800c350 <__ssputs_r>:
 800c350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c354:	688e      	ldr	r6, [r1, #8]
 800c356:	461f      	mov	r7, r3
 800c358:	42be      	cmp	r6, r7
 800c35a:	680b      	ldr	r3, [r1, #0]
 800c35c:	4682      	mov	sl, r0
 800c35e:	460c      	mov	r4, r1
 800c360:	4690      	mov	r8, r2
 800c362:	d82d      	bhi.n	800c3c0 <__ssputs_r+0x70>
 800c364:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c368:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c36c:	d026      	beq.n	800c3bc <__ssputs_r+0x6c>
 800c36e:	6965      	ldr	r5, [r4, #20]
 800c370:	6909      	ldr	r1, [r1, #16]
 800c372:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c376:	eba3 0901 	sub.w	r9, r3, r1
 800c37a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c37e:	1c7b      	adds	r3, r7, #1
 800c380:	444b      	add	r3, r9
 800c382:	106d      	asrs	r5, r5, #1
 800c384:	429d      	cmp	r5, r3
 800c386:	bf38      	it	cc
 800c388:	461d      	movcc	r5, r3
 800c38a:	0553      	lsls	r3, r2, #21
 800c38c:	d527      	bpl.n	800c3de <__ssputs_r+0x8e>
 800c38e:	4629      	mov	r1, r5
 800c390:	f7fe fc70 	bl	800ac74 <_malloc_r>
 800c394:	4606      	mov	r6, r0
 800c396:	b360      	cbz	r0, 800c3f2 <__ssputs_r+0xa2>
 800c398:	6921      	ldr	r1, [r4, #16]
 800c39a:	464a      	mov	r2, r9
 800c39c:	f000 fa18 	bl	800c7d0 <memcpy>
 800c3a0:	89a3      	ldrh	r3, [r4, #12]
 800c3a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c3a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3aa:	81a3      	strh	r3, [r4, #12]
 800c3ac:	6126      	str	r6, [r4, #16]
 800c3ae:	6165      	str	r5, [r4, #20]
 800c3b0:	444e      	add	r6, r9
 800c3b2:	eba5 0509 	sub.w	r5, r5, r9
 800c3b6:	6026      	str	r6, [r4, #0]
 800c3b8:	60a5      	str	r5, [r4, #8]
 800c3ba:	463e      	mov	r6, r7
 800c3bc:	42be      	cmp	r6, r7
 800c3be:	d900      	bls.n	800c3c2 <__ssputs_r+0x72>
 800c3c0:	463e      	mov	r6, r7
 800c3c2:	6820      	ldr	r0, [r4, #0]
 800c3c4:	4632      	mov	r2, r6
 800c3c6:	4641      	mov	r1, r8
 800c3c8:	f000 f9c6 	bl	800c758 <memmove>
 800c3cc:	68a3      	ldr	r3, [r4, #8]
 800c3ce:	1b9b      	subs	r3, r3, r6
 800c3d0:	60a3      	str	r3, [r4, #8]
 800c3d2:	6823      	ldr	r3, [r4, #0]
 800c3d4:	4433      	add	r3, r6
 800c3d6:	6023      	str	r3, [r4, #0]
 800c3d8:	2000      	movs	r0, #0
 800c3da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3de:	462a      	mov	r2, r5
 800c3e0:	f000 fd8b 	bl	800cefa <_realloc_r>
 800c3e4:	4606      	mov	r6, r0
 800c3e6:	2800      	cmp	r0, #0
 800c3e8:	d1e0      	bne.n	800c3ac <__ssputs_r+0x5c>
 800c3ea:	6921      	ldr	r1, [r4, #16]
 800c3ec:	4650      	mov	r0, sl
 800c3ee:	f7fe fbcd 	bl	800ab8c <_free_r>
 800c3f2:	230c      	movs	r3, #12
 800c3f4:	f8ca 3000 	str.w	r3, [sl]
 800c3f8:	89a3      	ldrh	r3, [r4, #12]
 800c3fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3fe:	81a3      	strh	r3, [r4, #12]
 800c400:	f04f 30ff 	mov.w	r0, #4294967295
 800c404:	e7e9      	b.n	800c3da <__ssputs_r+0x8a>
	...

0800c408 <_svfiprintf_r>:
 800c408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c40c:	4698      	mov	r8, r3
 800c40e:	898b      	ldrh	r3, [r1, #12]
 800c410:	061b      	lsls	r3, r3, #24
 800c412:	b09d      	sub	sp, #116	@ 0x74
 800c414:	4607      	mov	r7, r0
 800c416:	460d      	mov	r5, r1
 800c418:	4614      	mov	r4, r2
 800c41a:	d510      	bpl.n	800c43e <_svfiprintf_r+0x36>
 800c41c:	690b      	ldr	r3, [r1, #16]
 800c41e:	b973      	cbnz	r3, 800c43e <_svfiprintf_r+0x36>
 800c420:	2140      	movs	r1, #64	@ 0x40
 800c422:	f7fe fc27 	bl	800ac74 <_malloc_r>
 800c426:	6028      	str	r0, [r5, #0]
 800c428:	6128      	str	r0, [r5, #16]
 800c42a:	b930      	cbnz	r0, 800c43a <_svfiprintf_r+0x32>
 800c42c:	230c      	movs	r3, #12
 800c42e:	603b      	str	r3, [r7, #0]
 800c430:	f04f 30ff 	mov.w	r0, #4294967295
 800c434:	b01d      	add	sp, #116	@ 0x74
 800c436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c43a:	2340      	movs	r3, #64	@ 0x40
 800c43c:	616b      	str	r3, [r5, #20]
 800c43e:	2300      	movs	r3, #0
 800c440:	9309      	str	r3, [sp, #36]	@ 0x24
 800c442:	2320      	movs	r3, #32
 800c444:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c448:	f8cd 800c 	str.w	r8, [sp, #12]
 800c44c:	2330      	movs	r3, #48	@ 0x30
 800c44e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c5ec <_svfiprintf_r+0x1e4>
 800c452:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c456:	f04f 0901 	mov.w	r9, #1
 800c45a:	4623      	mov	r3, r4
 800c45c:	469a      	mov	sl, r3
 800c45e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c462:	b10a      	cbz	r2, 800c468 <_svfiprintf_r+0x60>
 800c464:	2a25      	cmp	r2, #37	@ 0x25
 800c466:	d1f9      	bne.n	800c45c <_svfiprintf_r+0x54>
 800c468:	ebba 0b04 	subs.w	fp, sl, r4
 800c46c:	d00b      	beq.n	800c486 <_svfiprintf_r+0x7e>
 800c46e:	465b      	mov	r3, fp
 800c470:	4622      	mov	r2, r4
 800c472:	4629      	mov	r1, r5
 800c474:	4638      	mov	r0, r7
 800c476:	f7ff ff6b 	bl	800c350 <__ssputs_r>
 800c47a:	3001      	adds	r0, #1
 800c47c:	f000 80a7 	beq.w	800c5ce <_svfiprintf_r+0x1c6>
 800c480:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c482:	445a      	add	r2, fp
 800c484:	9209      	str	r2, [sp, #36]	@ 0x24
 800c486:	f89a 3000 	ldrb.w	r3, [sl]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	f000 809f 	beq.w	800c5ce <_svfiprintf_r+0x1c6>
 800c490:	2300      	movs	r3, #0
 800c492:	f04f 32ff 	mov.w	r2, #4294967295
 800c496:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c49a:	f10a 0a01 	add.w	sl, sl, #1
 800c49e:	9304      	str	r3, [sp, #16]
 800c4a0:	9307      	str	r3, [sp, #28]
 800c4a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c4a6:	931a      	str	r3, [sp, #104]	@ 0x68
 800c4a8:	4654      	mov	r4, sl
 800c4aa:	2205      	movs	r2, #5
 800c4ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4b0:	484e      	ldr	r0, [pc, #312]	@ (800c5ec <_svfiprintf_r+0x1e4>)
 800c4b2:	f7f3 ff15 	bl	80002e0 <memchr>
 800c4b6:	9a04      	ldr	r2, [sp, #16]
 800c4b8:	b9d8      	cbnz	r0, 800c4f2 <_svfiprintf_r+0xea>
 800c4ba:	06d0      	lsls	r0, r2, #27
 800c4bc:	bf44      	itt	mi
 800c4be:	2320      	movmi	r3, #32
 800c4c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c4c4:	0711      	lsls	r1, r2, #28
 800c4c6:	bf44      	itt	mi
 800c4c8:	232b      	movmi	r3, #43	@ 0x2b
 800c4ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c4ce:	f89a 3000 	ldrb.w	r3, [sl]
 800c4d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c4d4:	d015      	beq.n	800c502 <_svfiprintf_r+0xfa>
 800c4d6:	9a07      	ldr	r2, [sp, #28]
 800c4d8:	4654      	mov	r4, sl
 800c4da:	2000      	movs	r0, #0
 800c4dc:	f04f 0c0a 	mov.w	ip, #10
 800c4e0:	4621      	mov	r1, r4
 800c4e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4e6:	3b30      	subs	r3, #48	@ 0x30
 800c4e8:	2b09      	cmp	r3, #9
 800c4ea:	d94b      	bls.n	800c584 <_svfiprintf_r+0x17c>
 800c4ec:	b1b0      	cbz	r0, 800c51c <_svfiprintf_r+0x114>
 800c4ee:	9207      	str	r2, [sp, #28]
 800c4f0:	e014      	b.n	800c51c <_svfiprintf_r+0x114>
 800c4f2:	eba0 0308 	sub.w	r3, r0, r8
 800c4f6:	fa09 f303 	lsl.w	r3, r9, r3
 800c4fa:	4313      	orrs	r3, r2
 800c4fc:	9304      	str	r3, [sp, #16]
 800c4fe:	46a2      	mov	sl, r4
 800c500:	e7d2      	b.n	800c4a8 <_svfiprintf_r+0xa0>
 800c502:	9b03      	ldr	r3, [sp, #12]
 800c504:	1d19      	adds	r1, r3, #4
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	9103      	str	r1, [sp, #12]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	bfbb      	ittet	lt
 800c50e:	425b      	neglt	r3, r3
 800c510:	f042 0202 	orrlt.w	r2, r2, #2
 800c514:	9307      	strge	r3, [sp, #28]
 800c516:	9307      	strlt	r3, [sp, #28]
 800c518:	bfb8      	it	lt
 800c51a:	9204      	strlt	r2, [sp, #16]
 800c51c:	7823      	ldrb	r3, [r4, #0]
 800c51e:	2b2e      	cmp	r3, #46	@ 0x2e
 800c520:	d10a      	bne.n	800c538 <_svfiprintf_r+0x130>
 800c522:	7863      	ldrb	r3, [r4, #1]
 800c524:	2b2a      	cmp	r3, #42	@ 0x2a
 800c526:	d132      	bne.n	800c58e <_svfiprintf_r+0x186>
 800c528:	9b03      	ldr	r3, [sp, #12]
 800c52a:	1d1a      	adds	r2, r3, #4
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	9203      	str	r2, [sp, #12]
 800c530:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c534:	3402      	adds	r4, #2
 800c536:	9305      	str	r3, [sp, #20]
 800c538:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c5fc <_svfiprintf_r+0x1f4>
 800c53c:	7821      	ldrb	r1, [r4, #0]
 800c53e:	2203      	movs	r2, #3
 800c540:	4650      	mov	r0, sl
 800c542:	f7f3 fecd 	bl	80002e0 <memchr>
 800c546:	b138      	cbz	r0, 800c558 <_svfiprintf_r+0x150>
 800c548:	9b04      	ldr	r3, [sp, #16]
 800c54a:	eba0 000a 	sub.w	r0, r0, sl
 800c54e:	2240      	movs	r2, #64	@ 0x40
 800c550:	4082      	lsls	r2, r0
 800c552:	4313      	orrs	r3, r2
 800c554:	3401      	adds	r4, #1
 800c556:	9304      	str	r3, [sp, #16]
 800c558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c55c:	4824      	ldr	r0, [pc, #144]	@ (800c5f0 <_svfiprintf_r+0x1e8>)
 800c55e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c562:	2206      	movs	r2, #6
 800c564:	f7f3 febc 	bl	80002e0 <memchr>
 800c568:	2800      	cmp	r0, #0
 800c56a:	d036      	beq.n	800c5da <_svfiprintf_r+0x1d2>
 800c56c:	4b21      	ldr	r3, [pc, #132]	@ (800c5f4 <_svfiprintf_r+0x1ec>)
 800c56e:	bb1b      	cbnz	r3, 800c5b8 <_svfiprintf_r+0x1b0>
 800c570:	9b03      	ldr	r3, [sp, #12]
 800c572:	3307      	adds	r3, #7
 800c574:	f023 0307 	bic.w	r3, r3, #7
 800c578:	3308      	adds	r3, #8
 800c57a:	9303      	str	r3, [sp, #12]
 800c57c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c57e:	4433      	add	r3, r6
 800c580:	9309      	str	r3, [sp, #36]	@ 0x24
 800c582:	e76a      	b.n	800c45a <_svfiprintf_r+0x52>
 800c584:	fb0c 3202 	mla	r2, ip, r2, r3
 800c588:	460c      	mov	r4, r1
 800c58a:	2001      	movs	r0, #1
 800c58c:	e7a8      	b.n	800c4e0 <_svfiprintf_r+0xd8>
 800c58e:	2300      	movs	r3, #0
 800c590:	3401      	adds	r4, #1
 800c592:	9305      	str	r3, [sp, #20]
 800c594:	4619      	mov	r1, r3
 800c596:	f04f 0c0a 	mov.w	ip, #10
 800c59a:	4620      	mov	r0, r4
 800c59c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5a0:	3a30      	subs	r2, #48	@ 0x30
 800c5a2:	2a09      	cmp	r2, #9
 800c5a4:	d903      	bls.n	800c5ae <_svfiprintf_r+0x1a6>
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d0c6      	beq.n	800c538 <_svfiprintf_r+0x130>
 800c5aa:	9105      	str	r1, [sp, #20]
 800c5ac:	e7c4      	b.n	800c538 <_svfiprintf_r+0x130>
 800c5ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5b2:	4604      	mov	r4, r0
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	e7f0      	b.n	800c59a <_svfiprintf_r+0x192>
 800c5b8:	ab03      	add	r3, sp, #12
 800c5ba:	9300      	str	r3, [sp, #0]
 800c5bc:	462a      	mov	r2, r5
 800c5be:	4b0e      	ldr	r3, [pc, #56]	@ (800c5f8 <_svfiprintf_r+0x1f0>)
 800c5c0:	a904      	add	r1, sp, #16
 800c5c2:	4638      	mov	r0, r7
 800c5c4:	f7fc fda4 	bl	8009110 <_printf_float>
 800c5c8:	1c42      	adds	r2, r0, #1
 800c5ca:	4606      	mov	r6, r0
 800c5cc:	d1d6      	bne.n	800c57c <_svfiprintf_r+0x174>
 800c5ce:	89ab      	ldrh	r3, [r5, #12]
 800c5d0:	065b      	lsls	r3, r3, #25
 800c5d2:	f53f af2d 	bmi.w	800c430 <_svfiprintf_r+0x28>
 800c5d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c5d8:	e72c      	b.n	800c434 <_svfiprintf_r+0x2c>
 800c5da:	ab03      	add	r3, sp, #12
 800c5dc:	9300      	str	r3, [sp, #0]
 800c5de:	462a      	mov	r2, r5
 800c5e0:	4b05      	ldr	r3, [pc, #20]	@ (800c5f8 <_svfiprintf_r+0x1f0>)
 800c5e2:	a904      	add	r1, sp, #16
 800c5e4:	4638      	mov	r0, r7
 800c5e6:	f7fd f81b 	bl	8009620 <_printf_i>
 800c5ea:	e7ed      	b.n	800c5c8 <_svfiprintf_r+0x1c0>
 800c5ec:	0800d8b9 	.word	0x0800d8b9
 800c5f0:	0800d8c3 	.word	0x0800d8c3
 800c5f4:	08009111 	.word	0x08009111
 800c5f8:	0800c351 	.word	0x0800c351
 800c5fc:	0800d8bf 	.word	0x0800d8bf

0800c600 <__sflush_r>:
 800c600:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c608:	0716      	lsls	r6, r2, #28
 800c60a:	4605      	mov	r5, r0
 800c60c:	460c      	mov	r4, r1
 800c60e:	d454      	bmi.n	800c6ba <__sflush_r+0xba>
 800c610:	684b      	ldr	r3, [r1, #4]
 800c612:	2b00      	cmp	r3, #0
 800c614:	dc02      	bgt.n	800c61c <__sflush_r+0x1c>
 800c616:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c618:	2b00      	cmp	r3, #0
 800c61a:	dd48      	ble.n	800c6ae <__sflush_r+0xae>
 800c61c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c61e:	2e00      	cmp	r6, #0
 800c620:	d045      	beq.n	800c6ae <__sflush_r+0xae>
 800c622:	2300      	movs	r3, #0
 800c624:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c628:	682f      	ldr	r7, [r5, #0]
 800c62a:	6a21      	ldr	r1, [r4, #32]
 800c62c:	602b      	str	r3, [r5, #0]
 800c62e:	d030      	beq.n	800c692 <__sflush_r+0x92>
 800c630:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c632:	89a3      	ldrh	r3, [r4, #12]
 800c634:	0759      	lsls	r1, r3, #29
 800c636:	d505      	bpl.n	800c644 <__sflush_r+0x44>
 800c638:	6863      	ldr	r3, [r4, #4]
 800c63a:	1ad2      	subs	r2, r2, r3
 800c63c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c63e:	b10b      	cbz	r3, 800c644 <__sflush_r+0x44>
 800c640:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c642:	1ad2      	subs	r2, r2, r3
 800c644:	2300      	movs	r3, #0
 800c646:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c648:	6a21      	ldr	r1, [r4, #32]
 800c64a:	4628      	mov	r0, r5
 800c64c:	47b0      	blx	r6
 800c64e:	1c43      	adds	r3, r0, #1
 800c650:	89a3      	ldrh	r3, [r4, #12]
 800c652:	d106      	bne.n	800c662 <__sflush_r+0x62>
 800c654:	6829      	ldr	r1, [r5, #0]
 800c656:	291d      	cmp	r1, #29
 800c658:	d82b      	bhi.n	800c6b2 <__sflush_r+0xb2>
 800c65a:	4a2a      	ldr	r2, [pc, #168]	@ (800c704 <__sflush_r+0x104>)
 800c65c:	410a      	asrs	r2, r1
 800c65e:	07d6      	lsls	r6, r2, #31
 800c660:	d427      	bmi.n	800c6b2 <__sflush_r+0xb2>
 800c662:	2200      	movs	r2, #0
 800c664:	6062      	str	r2, [r4, #4]
 800c666:	04d9      	lsls	r1, r3, #19
 800c668:	6922      	ldr	r2, [r4, #16]
 800c66a:	6022      	str	r2, [r4, #0]
 800c66c:	d504      	bpl.n	800c678 <__sflush_r+0x78>
 800c66e:	1c42      	adds	r2, r0, #1
 800c670:	d101      	bne.n	800c676 <__sflush_r+0x76>
 800c672:	682b      	ldr	r3, [r5, #0]
 800c674:	b903      	cbnz	r3, 800c678 <__sflush_r+0x78>
 800c676:	6560      	str	r0, [r4, #84]	@ 0x54
 800c678:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c67a:	602f      	str	r7, [r5, #0]
 800c67c:	b1b9      	cbz	r1, 800c6ae <__sflush_r+0xae>
 800c67e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c682:	4299      	cmp	r1, r3
 800c684:	d002      	beq.n	800c68c <__sflush_r+0x8c>
 800c686:	4628      	mov	r0, r5
 800c688:	f7fe fa80 	bl	800ab8c <_free_r>
 800c68c:	2300      	movs	r3, #0
 800c68e:	6363      	str	r3, [r4, #52]	@ 0x34
 800c690:	e00d      	b.n	800c6ae <__sflush_r+0xae>
 800c692:	2301      	movs	r3, #1
 800c694:	4628      	mov	r0, r5
 800c696:	47b0      	blx	r6
 800c698:	4602      	mov	r2, r0
 800c69a:	1c50      	adds	r0, r2, #1
 800c69c:	d1c9      	bne.n	800c632 <__sflush_r+0x32>
 800c69e:	682b      	ldr	r3, [r5, #0]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d0c6      	beq.n	800c632 <__sflush_r+0x32>
 800c6a4:	2b1d      	cmp	r3, #29
 800c6a6:	d001      	beq.n	800c6ac <__sflush_r+0xac>
 800c6a8:	2b16      	cmp	r3, #22
 800c6aa:	d11e      	bne.n	800c6ea <__sflush_r+0xea>
 800c6ac:	602f      	str	r7, [r5, #0]
 800c6ae:	2000      	movs	r0, #0
 800c6b0:	e022      	b.n	800c6f8 <__sflush_r+0xf8>
 800c6b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c6b6:	b21b      	sxth	r3, r3
 800c6b8:	e01b      	b.n	800c6f2 <__sflush_r+0xf2>
 800c6ba:	690f      	ldr	r7, [r1, #16]
 800c6bc:	2f00      	cmp	r7, #0
 800c6be:	d0f6      	beq.n	800c6ae <__sflush_r+0xae>
 800c6c0:	0793      	lsls	r3, r2, #30
 800c6c2:	680e      	ldr	r6, [r1, #0]
 800c6c4:	bf08      	it	eq
 800c6c6:	694b      	ldreq	r3, [r1, #20]
 800c6c8:	600f      	str	r7, [r1, #0]
 800c6ca:	bf18      	it	ne
 800c6cc:	2300      	movne	r3, #0
 800c6ce:	eba6 0807 	sub.w	r8, r6, r7
 800c6d2:	608b      	str	r3, [r1, #8]
 800c6d4:	f1b8 0f00 	cmp.w	r8, #0
 800c6d8:	dde9      	ble.n	800c6ae <__sflush_r+0xae>
 800c6da:	6a21      	ldr	r1, [r4, #32]
 800c6dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c6de:	4643      	mov	r3, r8
 800c6e0:	463a      	mov	r2, r7
 800c6e2:	4628      	mov	r0, r5
 800c6e4:	47b0      	blx	r6
 800c6e6:	2800      	cmp	r0, #0
 800c6e8:	dc08      	bgt.n	800c6fc <__sflush_r+0xfc>
 800c6ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c6f2:	81a3      	strh	r3, [r4, #12]
 800c6f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6fc:	4407      	add	r7, r0
 800c6fe:	eba8 0800 	sub.w	r8, r8, r0
 800c702:	e7e7      	b.n	800c6d4 <__sflush_r+0xd4>
 800c704:	dfbffffe 	.word	0xdfbffffe

0800c708 <_fflush_r>:
 800c708:	b538      	push	{r3, r4, r5, lr}
 800c70a:	690b      	ldr	r3, [r1, #16]
 800c70c:	4605      	mov	r5, r0
 800c70e:	460c      	mov	r4, r1
 800c710:	b913      	cbnz	r3, 800c718 <_fflush_r+0x10>
 800c712:	2500      	movs	r5, #0
 800c714:	4628      	mov	r0, r5
 800c716:	bd38      	pop	{r3, r4, r5, pc}
 800c718:	b118      	cbz	r0, 800c722 <_fflush_r+0x1a>
 800c71a:	6a03      	ldr	r3, [r0, #32]
 800c71c:	b90b      	cbnz	r3, 800c722 <_fflush_r+0x1a>
 800c71e:	f7fd fb37 	bl	8009d90 <__sinit>
 800c722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d0f3      	beq.n	800c712 <_fflush_r+0xa>
 800c72a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c72c:	07d0      	lsls	r0, r2, #31
 800c72e:	d404      	bmi.n	800c73a <_fflush_r+0x32>
 800c730:	0599      	lsls	r1, r3, #22
 800c732:	d402      	bmi.n	800c73a <_fflush_r+0x32>
 800c734:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c736:	f7fd fc42 	bl	8009fbe <__retarget_lock_acquire_recursive>
 800c73a:	4628      	mov	r0, r5
 800c73c:	4621      	mov	r1, r4
 800c73e:	f7ff ff5f 	bl	800c600 <__sflush_r>
 800c742:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c744:	07da      	lsls	r2, r3, #31
 800c746:	4605      	mov	r5, r0
 800c748:	d4e4      	bmi.n	800c714 <_fflush_r+0xc>
 800c74a:	89a3      	ldrh	r3, [r4, #12]
 800c74c:	059b      	lsls	r3, r3, #22
 800c74e:	d4e1      	bmi.n	800c714 <_fflush_r+0xc>
 800c750:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c752:	f7fd fc35 	bl	8009fc0 <__retarget_lock_release_recursive>
 800c756:	e7dd      	b.n	800c714 <_fflush_r+0xc>

0800c758 <memmove>:
 800c758:	4288      	cmp	r0, r1
 800c75a:	b510      	push	{r4, lr}
 800c75c:	eb01 0402 	add.w	r4, r1, r2
 800c760:	d902      	bls.n	800c768 <memmove+0x10>
 800c762:	4284      	cmp	r4, r0
 800c764:	4623      	mov	r3, r4
 800c766:	d807      	bhi.n	800c778 <memmove+0x20>
 800c768:	1e43      	subs	r3, r0, #1
 800c76a:	42a1      	cmp	r1, r4
 800c76c:	d008      	beq.n	800c780 <memmove+0x28>
 800c76e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c772:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c776:	e7f8      	b.n	800c76a <memmove+0x12>
 800c778:	4402      	add	r2, r0
 800c77a:	4601      	mov	r1, r0
 800c77c:	428a      	cmp	r2, r1
 800c77e:	d100      	bne.n	800c782 <memmove+0x2a>
 800c780:	bd10      	pop	{r4, pc}
 800c782:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c786:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c78a:	e7f7      	b.n	800c77c <memmove+0x24>

0800c78c <strncmp>:
 800c78c:	b510      	push	{r4, lr}
 800c78e:	b16a      	cbz	r2, 800c7ac <strncmp+0x20>
 800c790:	3901      	subs	r1, #1
 800c792:	1884      	adds	r4, r0, r2
 800c794:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c798:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c79c:	429a      	cmp	r2, r3
 800c79e:	d103      	bne.n	800c7a8 <strncmp+0x1c>
 800c7a0:	42a0      	cmp	r0, r4
 800c7a2:	d001      	beq.n	800c7a8 <strncmp+0x1c>
 800c7a4:	2a00      	cmp	r2, #0
 800c7a6:	d1f5      	bne.n	800c794 <strncmp+0x8>
 800c7a8:	1ad0      	subs	r0, r2, r3
 800c7aa:	bd10      	pop	{r4, pc}
 800c7ac:	4610      	mov	r0, r2
 800c7ae:	e7fc      	b.n	800c7aa <strncmp+0x1e>

0800c7b0 <_sbrk_r>:
 800c7b0:	b538      	push	{r3, r4, r5, lr}
 800c7b2:	4d06      	ldr	r5, [pc, #24]	@ (800c7cc <_sbrk_r+0x1c>)
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	4604      	mov	r4, r0
 800c7b8:	4608      	mov	r0, r1
 800c7ba:	602b      	str	r3, [r5, #0]
 800c7bc:	f7f4 ff28 	bl	8001610 <_sbrk>
 800c7c0:	1c43      	adds	r3, r0, #1
 800c7c2:	d102      	bne.n	800c7ca <_sbrk_r+0x1a>
 800c7c4:	682b      	ldr	r3, [r5, #0]
 800c7c6:	b103      	cbz	r3, 800c7ca <_sbrk_r+0x1a>
 800c7c8:	6023      	str	r3, [r4, #0]
 800c7ca:	bd38      	pop	{r3, r4, r5, pc}
 800c7cc:	2400041c 	.word	0x2400041c

0800c7d0 <memcpy>:
 800c7d0:	440a      	add	r2, r1
 800c7d2:	4291      	cmp	r1, r2
 800c7d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c7d8:	d100      	bne.n	800c7dc <memcpy+0xc>
 800c7da:	4770      	bx	lr
 800c7dc:	b510      	push	{r4, lr}
 800c7de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c7e6:	4291      	cmp	r1, r2
 800c7e8:	d1f9      	bne.n	800c7de <memcpy+0xe>
 800c7ea:	bd10      	pop	{r4, pc}
 800c7ec:	0000      	movs	r0, r0
	...

0800c7f0 <nan>:
 800c7f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c7f8 <nan+0x8>
 800c7f4:	4770      	bx	lr
 800c7f6:	bf00      	nop
 800c7f8:	00000000 	.word	0x00000000
 800c7fc:	7ff80000 	.word	0x7ff80000

0800c800 <__assert_func>:
 800c800:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c802:	4614      	mov	r4, r2
 800c804:	461a      	mov	r2, r3
 800c806:	4b09      	ldr	r3, [pc, #36]	@ (800c82c <__assert_func+0x2c>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	4605      	mov	r5, r0
 800c80c:	68d8      	ldr	r0, [r3, #12]
 800c80e:	b954      	cbnz	r4, 800c826 <__assert_func+0x26>
 800c810:	4b07      	ldr	r3, [pc, #28]	@ (800c830 <__assert_func+0x30>)
 800c812:	461c      	mov	r4, r3
 800c814:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c818:	9100      	str	r1, [sp, #0]
 800c81a:	462b      	mov	r3, r5
 800c81c:	4905      	ldr	r1, [pc, #20]	@ (800c834 <__assert_func+0x34>)
 800c81e:	f000 fba7 	bl	800cf70 <fiprintf>
 800c822:	f000 fbb7 	bl	800cf94 <abort>
 800c826:	4b04      	ldr	r3, [pc, #16]	@ (800c838 <__assert_func+0x38>)
 800c828:	e7f4      	b.n	800c814 <__assert_func+0x14>
 800c82a:	bf00      	nop
 800c82c:	2400001c 	.word	0x2400001c
 800c830:	0800d90d 	.word	0x0800d90d
 800c834:	0800d8df 	.word	0x0800d8df
 800c838:	0800d8d2 	.word	0x0800d8d2

0800c83c <_calloc_r>:
 800c83c:	b570      	push	{r4, r5, r6, lr}
 800c83e:	fba1 5402 	umull	r5, r4, r1, r2
 800c842:	b93c      	cbnz	r4, 800c854 <_calloc_r+0x18>
 800c844:	4629      	mov	r1, r5
 800c846:	f7fe fa15 	bl	800ac74 <_malloc_r>
 800c84a:	4606      	mov	r6, r0
 800c84c:	b928      	cbnz	r0, 800c85a <_calloc_r+0x1e>
 800c84e:	2600      	movs	r6, #0
 800c850:	4630      	mov	r0, r6
 800c852:	bd70      	pop	{r4, r5, r6, pc}
 800c854:	220c      	movs	r2, #12
 800c856:	6002      	str	r2, [r0, #0]
 800c858:	e7f9      	b.n	800c84e <_calloc_r+0x12>
 800c85a:	462a      	mov	r2, r5
 800c85c:	4621      	mov	r1, r4
 800c85e:	f7fd fb30 	bl	8009ec2 <memset>
 800c862:	e7f5      	b.n	800c850 <_calloc_r+0x14>

0800c864 <rshift>:
 800c864:	6903      	ldr	r3, [r0, #16]
 800c866:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c86a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c86e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c872:	f100 0414 	add.w	r4, r0, #20
 800c876:	dd45      	ble.n	800c904 <rshift+0xa0>
 800c878:	f011 011f 	ands.w	r1, r1, #31
 800c87c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c880:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c884:	d10c      	bne.n	800c8a0 <rshift+0x3c>
 800c886:	f100 0710 	add.w	r7, r0, #16
 800c88a:	4629      	mov	r1, r5
 800c88c:	42b1      	cmp	r1, r6
 800c88e:	d334      	bcc.n	800c8fa <rshift+0x96>
 800c890:	1a9b      	subs	r3, r3, r2
 800c892:	009b      	lsls	r3, r3, #2
 800c894:	1eea      	subs	r2, r5, #3
 800c896:	4296      	cmp	r6, r2
 800c898:	bf38      	it	cc
 800c89a:	2300      	movcc	r3, #0
 800c89c:	4423      	add	r3, r4
 800c89e:	e015      	b.n	800c8cc <rshift+0x68>
 800c8a0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c8a4:	f1c1 0820 	rsb	r8, r1, #32
 800c8a8:	40cf      	lsrs	r7, r1
 800c8aa:	f105 0e04 	add.w	lr, r5, #4
 800c8ae:	46a1      	mov	r9, r4
 800c8b0:	4576      	cmp	r6, lr
 800c8b2:	46f4      	mov	ip, lr
 800c8b4:	d815      	bhi.n	800c8e2 <rshift+0x7e>
 800c8b6:	1a9a      	subs	r2, r3, r2
 800c8b8:	0092      	lsls	r2, r2, #2
 800c8ba:	3a04      	subs	r2, #4
 800c8bc:	3501      	adds	r5, #1
 800c8be:	42ae      	cmp	r6, r5
 800c8c0:	bf38      	it	cc
 800c8c2:	2200      	movcc	r2, #0
 800c8c4:	18a3      	adds	r3, r4, r2
 800c8c6:	50a7      	str	r7, [r4, r2]
 800c8c8:	b107      	cbz	r7, 800c8cc <rshift+0x68>
 800c8ca:	3304      	adds	r3, #4
 800c8cc:	1b1a      	subs	r2, r3, r4
 800c8ce:	42a3      	cmp	r3, r4
 800c8d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c8d4:	bf08      	it	eq
 800c8d6:	2300      	moveq	r3, #0
 800c8d8:	6102      	str	r2, [r0, #16]
 800c8da:	bf08      	it	eq
 800c8dc:	6143      	streq	r3, [r0, #20]
 800c8de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8e2:	f8dc c000 	ldr.w	ip, [ip]
 800c8e6:	fa0c fc08 	lsl.w	ip, ip, r8
 800c8ea:	ea4c 0707 	orr.w	r7, ip, r7
 800c8ee:	f849 7b04 	str.w	r7, [r9], #4
 800c8f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c8f6:	40cf      	lsrs	r7, r1
 800c8f8:	e7da      	b.n	800c8b0 <rshift+0x4c>
 800c8fa:	f851 cb04 	ldr.w	ip, [r1], #4
 800c8fe:	f847 cf04 	str.w	ip, [r7, #4]!
 800c902:	e7c3      	b.n	800c88c <rshift+0x28>
 800c904:	4623      	mov	r3, r4
 800c906:	e7e1      	b.n	800c8cc <rshift+0x68>

0800c908 <__hexdig_fun>:
 800c908:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c90c:	2b09      	cmp	r3, #9
 800c90e:	d802      	bhi.n	800c916 <__hexdig_fun+0xe>
 800c910:	3820      	subs	r0, #32
 800c912:	b2c0      	uxtb	r0, r0
 800c914:	4770      	bx	lr
 800c916:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c91a:	2b05      	cmp	r3, #5
 800c91c:	d801      	bhi.n	800c922 <__hexdig_fun+0x1a>
 800c91e:	3847      	subs	r0, #71	@ 0x47
 800c920:	e7f7      	b.n	800c912 <__hexdig_fun+0xa>
 800c922:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c926:	2b05      	cmp	r3, #5
 800c928:	d801      	bhi.n	800c92e <__hexdig_fun+0x26>
 800c92a:	3827      	subs	r0, #39	@ 0x27
 800c92c:	e7f1      	b.n	800c912 <__hexdig_fun+0xa>
 800c92e:	2000      	movs	r0, #0
 800c930:	4770      	bx	lr
	...

0800c934 <__gethex>:
 800c934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c938:	b085      	sub	sp, #20
 800c93a:	468a      	mov	sl, r1
 800c93c:	9302      	str	r3, [sp, #8]
 800c93e:	680b      	ldr	r3, [r1, #0]
 800c940:	9001      	str	r0, [sp, #4]
 800c942:	4690      	mov	r8, r2
 800c944:	1c9c      	adds	r4, r3, #2
 800c946:	46a1      	mov	r9, r4
 800c948:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c94c:	2830      	cmp	r0, #48	@ 0x30
 800c94e:	d0fa      	beq.n	800c946 <__gethex+0x12>
 800c950:	eba9 0303 	sub.w	r3, r9, r3
 800c954:	f1a3 0b02 	sub.w	fp, r3, #2
 800c958:	f7ff ffd6 	bl	800c908 <__hexdig_fun>
 800c95c:	4605      	mov	r5, r0
 800c95e:	2800      	cmp	r0, #0
 800c960:	d168      	bne.n	800ca34 <__gethex+0x100>
 800c962:	49a0      	ldr	r1, [pc, #640]	@ (800cbe4 <__gethex+0x2b0>)
 800c964:	2201      	movs	r2, #1
 800c966:	4648      	mov	r0, r9
 800c968:	f7ff ff10 	bl	800c78c <strncmp>
 800c96c:	4607      	mov	r7, r0
 800c96e:	2800      	cmp	r0, #0
 800c970:	d167      	bne.n	800ca42 <__gethex+0x10e>
 800c972:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c976:	4626      	mov	r6, r4
 800c978:	f7ff ffc6 	bl	800c908 <__hexdig_fun>
 800c97c:	2800      	cmp	r0, #0
 800c97e:	d062      	beq.n	800ca46 <__gethex+0x112>
 800c980:	4623      	mov	r3, r4
 800c982:	7818      	ldrb	r0, [r3, #0]
 800c984:	2830      	cmp	r0, #48	@ 0x30
 800c986:	4699      	mov	r9, r3
 800c988:	f103 0301 	add.w	r3, r3, #1
 800c98c:	d0f9      	beq.n	800c982 <__gethex+0x4e>
 800c98e:	f7ff ffbb 	bl	800c908 <__hexdig_fun>
 800c992:	fab0 f580 	clz	r5, r0
 800c996:	096d      	lsrs	r5, r5, #5
 800c998:	f04f 0b01 	mov.w	fp, #1
 800c99c:	464a      	mov	r2, r9
 800c99e:	4616      	mov	r6, r2
 800c9a0:	3201      	adds	r2, #1
 800c9a2:	7830      	ldrb	r0, [r6, #0]
 800c9a4:	f7ff ffb0 	bl	800c908 <__hexdig_fun>
 800c9a8:	2800      	cmp	r0, #0
 800c9aa:	d1f8      	bne.n	800c99e <__gethex+0x6a>
 800c9ac:	498d      	ldr	r1, [pc, #564]	@ (800cbe4 <__gethex+0x2b0>)
 800c9ae:	2201      	movs	r2, #1
 800c9b0:	4630      	mov	r0, r6
 800c9b2:	f7ff feeb 	bl	800c78c <strncmp>
 800c9b6:	2800      	cmp	r0, #0
 800c9b8:	d13f      	bne.n	800ca3a <__gethex+0x106>
 800c9ba:	b944      	cbnz	r4, 800c9ce <__gethex+0x9a>
 800c9bc:	1c74      	adds	r4, r6, #1
 800c9be:	4622      	mov	r2, r4
 800c9c0:	4616      	mov	r6, r2
 800c9c2:	3201      	adds	r2, #1
 800c9c4:	7830      	ldrb	r0, [r6, #0]
 800c9c6:	f7ff ff9f 	bl	800c908 <__hexdig_fun>
 800c9ca:	2800      	cmp	r0, #0
 800c9cc:	d1f8      	bne.n	800c9c0 <__gethex+0x8c>
 800c9ce:	1ba4      	subs	r4, r4, r6
 800c9d0:	00a7      	lsls	r7, r4, #2
 800c9d2:	7833      	ldrb	r3, [r6, #0]
 800c9d4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c9d8:	2b50      	cmp	r3, #80	@ 0x50
 800c9da:	d13e      	bne.n	800ca5a <__gethex+0x126>
 800c9dc:	7873      	ldrb	r3, [r6, #1]
 800c9de:	2b2b      	cmp	r3, #43	@ 0x2b
 800c9e0:	d033      	beq.n	800ca4a <__gethex+0x116>
 800c9e2:	2b2d      	cmp	r3, #45	@ 0x2d
 800c9e4:	d034      	beq.n	800ca50 <__gethex+0x11c>
 800c9e6:	1c71      	adds	r1, r6, #1
 800c9e8:	2400      	movs	r4, #0
 800c9ea:	7808      	ldrb	r0, [r1, #0]
 800c9ec:	f7ff ff8c 	bl	800c908 <__hexdig_fun>
 800c9f0:	1e43      	subs	r3, r0, #1
 800c9f2:	b2db      	uxtb	r3, r3
 800c9f4:	2b18      	cmp	r3, #24
 800c9f6:	d830      	bhi.n	800ca5a <__gethex+0x126>
 800c9f8:	f1a0 0210 	sub.w	r2, r0, #16
 800c9fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ca00:	f7ff ff82 	bl	800c908 <__hexdig_fun>
 800ca04:	f100 3cff 	add.w	ip, r0, #4294967295
 800ca08:	fa5f fc8c 	uxtb.w	ip, ip
 800ca0c:	f1bc 0f18 	cmp.w	ip, #24
 800ca10:	f04f 030a 	mov.w	r3, #10
 800ca14:	d91e      	bls.n	800ca54 <__gethex+0x120>
 800ca16:	b104      	cbz	r4, 800ca1a <__gethex+0xe6>
 800ca18:	4252      	negs	r2, r2
 800ca1a:	4417      	add	r7, r2
 800ca1c:	f8ca 1000 	str.w	r1, [sl]
 800ca20:	b1ed      	cbz	r5, 800ca5e <__gethex+0x12a>
 800ca22:	f1bb 0f00 	cmp.w	fp, #0
 800ca26:	bf0c      	ite	eq
 800ca28:	2506      	moveq	r5, #6
 800ca2a:	2500      	movne	r5, #0
 800ca2c:	4628      	mov	r0, r5
 800ca2e:	b005      	add	sp, #20
 800ca30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca34:	2500      	movs	r5, #0
 800ca36:	462c      	mov	r4, r5
 800ca38:	e7b0      	b.n	800c99c <__gethex+0x68>
 800ca3a:	2c00      	cmp	r4, #0
 800ca3c:	d1c7      	bne.n	800c9ce <__gethex+0x9a>
 800ca3e:	4627      	mov	r7, r4
 800ca40:	e7c7      	b.n	800c9d2 <__gethex+0x9e>
 800ca42:	464e      	mov	r6, r9
 800ca44:	462f      	mov	r7, r5
 800ca46:	2501      	movs	r5, #1
 800ca48:	e7c3      	b.n	800c9d2 <__gethex+0x9e>
 800ca4a:	2400      	movs	r4, #0
 800ca4c:	1cb1      	adds	r1, r6, #2
 800ca4e:	e7cc      	b.n	800c9ea <__gethex+0xb6>
 800ca50:	2401      	movs	r4, #1
 800ca52:	e7fb      	b.n	800ca4c <__gethex+0x118>
 800ca54:	fb03 0002 	mla	r0, r3, r2, r0
 800ca58:	e7ce      	b.n	800c9f8 <__gethex+0xc4>
 800ca5a:	4631      	mov	r1, r6
 800ca5c:	e7de      	b.n	800ca1c <__gethex+0xe8>
 800ca5e:	eba6 0309 	sub.w	r3, r6, r9
 800ca62:	3b01      	subs	r3, #1
 800ca64:	4629      	mov	r1, r5
 800ca66:	2b07      	cmp	r3, #7
 800ca68:	dc0a      	bgt.n	800ca80 <__gethex+0x14c>
 800ca6a:	9801      	ldr	r0, [sp, #4]
 800ca6c:	f7fe f98e 	bl	800ad8c <_Balloc>
 800ca70:	4604      	mov	r4, r0
 800ca72:	b940      	cbnz	r0, 800ca86 <__gethex+0x152>
 800ca74:	4b5c      	ldr	r3, [pc, #368]	@ (800cbe8 <__gethex+0x2b4>)
 800ca76:	4602      	mov	r2, r0
 800ca78:	21e4      	movs	r1, #228	@ 0xe4
 800ca7a:	485c      	ldr	r0, [pc, #368]	@ (800cbec <__gethex+0x2b8>)
 800ca7c:	f7ff fec0 	bl	800c800 <__assert_func>
 800ca80:	3101      	adds	r1, #1
 800ca82:	105b      	asrs	r3, r3, #1
 800ca84:	e7ef      	b.n	800ca66 <__gethex+0x132>
 800ca86:	f100 0a14 	add.w	sl, r0, #20
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	4655      	mov	r5, sl
 800ca8e:	469b      	mov	fp, r3
 800ca90:	45b1      	cmp	r9, r6
 800ca92:	d337      	bcc.n	800cb04 <__gethex+0x1d0>
 800ca94:	f845 bb04 	str.w	fp, [r5], #4
 800ca98:	eba5 050a 	sub.w	r5, r5, sl
 800ca9c:	10ad      	asrs	r5, r5, #2
 800ca9e:	6125      	str	r5, [r4, #16]
 800caa0:	4658      	mov	r0, fp
 800caa2:	f7fe fa65 	bl	800af70 <__hi0bits>
 800caa6:	016d      	lsls	r5, r5, #5
 800caa8:	f8d8 6000 	ldr.w	r6, [r8]
 800caac:	1a2d      	subs	r5, r5, r0
 800caae:	42b5      	cmp	r5, r6
 800cab0:	dd54      	ble.n	800cb5c <__gethex+0x228>
 800cab2:	1bad      	subs	r5, r5, r6
 800cab4:	4629      	mov	r1, r5
 800cab6:	4620      	mov	r0, r4
 800cab8:	f7fe fdf6 	bl	800b6a8 <__any_on>
 800cabc:	4681      	mov	r9, r0
 800cabe:	b178      	cbz	r0, 800cae0 <__gethex+0x1ac>
 800cac0:	1e6b      	subs	r3, r5, #1
 800cac2:	1159      	asrs	r1, r3, #5
 800cac4:	f003 021f 	and.w	r2, r3, #31
 800cac8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cacc:	f04f 0901 	mov.w	r9, #1
 800cad0:	fa09 f202 	lsl.w	r2, r9, r2
 800cad4:	420a      	tst	r2, r1
 800cad6:	d003      	beq.n	800cae0 <__gethex+0x1ac>
 800cad8:	454b      	cmp	r3, r9
 800cada:	dc36      	bgt.n	800cb4a <__gethex+0x216>
 800cadc:	f04f 0902 	mov.w	r9, #2
 800cae0:	4629      	mov	r1, r5
 800cae2:	4620      	mov	r0, r4
 800cae4:	f7ff febe 	bl	800c864 <rshift>
 800cae8:	442f      	add	r7, r5
 800caea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800caee:	42bb      	cmp	r3, r7
 800caf0:	da42      	bge.n	800cb78 <__gethex+0x244>
 800caf2:	9801      	ldr	r0, [sp, #4]
 800caf4:	4621      	mov	r1, r4
 800caf6:	f7fe f989 	bl	800ae0c <_Bfree>
 800cafa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cafc:	2300      	movs	r3, #0
 800cafe:	6013      	str	r3, [r2, #0]
 800cb00:	25a3      	movs	r5, #163	@ 0xa3
 800cb02:	e793      	b.n	800ca2c <__gethex+0xf8>
 800cb04:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800cb08:	2a2e      	cmp	r2, #46	@ 0x2e
 800cb0a:	d012      	beq.n	800cb32 <__gethex+0x1fe>
 800cb0c:	2b20      	cmp	r3, #32
 800cb0e:	d104      	bne.n	800cb1a <__gethex+0x1e6>
 800cb10:	f845 bb04 	str.w	fp, [r5], #4
 800cb14:	f04f 0b00 	mov.w	fp, #0
 800cb18:	465b      	mov	r3, fp
 800cb1a:	7830      	ldrb	r0, [r6, #0]
 800cb1c:	9303      	str	r3, [sp, #12]
 800cb1e:	f7ff fef3 	bl	800c908 <__hexdig_fun>
 800cb22:	9b03      	ldr	r3, [sp, #12]
 800cb24:	f000 000f 	and.w	r0, r0, #15
 800cb28:	4098      	lsls	r0, r3
 800cb2a:	ea4b 0b00 	orr.w	fp, fp, r0
 800cb2e:	3304      	adds	r3, #4
 800cb30:	e7ae      	b.n	800ca90 <__gethex+0x15c>
 800cb32:	45b1      	cmp	r9, r6
 800cb34:	d8ea      	bhi.n	800cb0c <__gethex+0x1d8>
 800cb36:	492b      	ldr	r1, [pc, #172]	@ (800cbe4 <__gethex+0x2b0>)
 800cb38:	9303      	str	r3, [sp, #12]
 800cb3a:	2201      	movs	r2, #1
 800cb3c:	4630      	mov	r0, r6
 800cb3e:	f7ff fe25 	bl	800c78c <strncmp>
 800cb42:	9b03      	ldr	r3, [sp, #12]
 800cb44:	2800      	cmp	r0, #0
 800cb46:	d1e1      	bne.n	800cb0c <__gethex+0x1d8>
 800cb48:	e7a2      	b.n	800ca90 <__gethex+0x15c>
 800cb4a:	1ea9      	subs	r1, r5, #2
 800cb4c:	4620      	mov	r0, r4
 800cb4e:	f7fe fdab 	bl	800b6a8 <__any_on>
 800cb52:	2800      	cmp	r0, #0
 800cb54:	d0c2      	beq.n	800cadc <__gethex+0x1a8>
 800cb56:	f04f 0903 	mov.w	r9, #3
 800cb5a:	e7c1      	b.n	800cae0 <__gethex+0x1ac>
 800cb5c:	da09      	bge.n	800cb72 <__gethex+0x23e>
 800cb5e:	1b75      	subs	r5, r6, r5
 800cb60:	4621      	mov	r1, r4
 800cb62:	9801      	ldr	r0, [sp, #4]
 800cb64:	462a      	mov	r2, r5
 800cb66:	f7fe fb69 	bl	800b23c <__lshift>
 800cb6a:	1b7f      	subs	r7, r7, r5
 800cb6c:	4604      	mov	r4, r0
 800cb6e:	f100 0a14 	add.w	sl, r0, #20
 800cb72:	f04f 0900 	mov.w	r9, #0
 800cb76:	e7b8      	b.n	800caea <__gethex+0x1b6>
 800cb78:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cb7c:	42bd      	cmp	r5, r7
 800cb7e:	dd6f      	ble.n	800cc60 <__gethex+0x32c>
 800cb80:	1bed      	subs	r5, r5, r7
 800cb82:	42ae      	cmp	r6, r5
 800cb84:	dc34      	bgt.n	800cbf0 <__gethex+0x2bc>
 800cb86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cb8a:	2b02      	cmp	r3, #2
 800cb8c:	d022      	beq.n	800cbd4 <__gethex+0x2a0>
 800cb8e:	2b03      	cmp	r3, #3
 800cb90:	d024      	beq.n	800cbdc <__gethex+0x2a8>
 800cb92:	2b01      	cmp	r3, #1
 800cb94:	d115      	bne.n	800cbc2 <__gethex+0x28e>
 800cb96:	42ae      	cmp	r6, r5
 800cb98:	d113      	bne.n	800cbc2 <__gethex+0x28e>
 800cb9a:	2e01      	cmp	r6, #1
 800cb9c:	d10b      	bne.n	800cbb6 <__gethex+0x282>
 800cb9e:	9a02      	ldr	r2, [sp, #8]
 800cba0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cba4:	6013      	str	r3, [r2, #0]
 800cba6:	2301      	movs	r3, #1
 800cba8:	6123      	str	r3, [r4, #16]
 800cbaa:	f8ca 3000 	str.w	r3, [sl]
 800cbae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cbb0:	2562      	movs	r5, #98	@ 0x62
 800cbb2:	601c      	str	r4, [r3, #0]
 800cbb4:	e73a      	b.n	800ca2c <__gethex+0xf8>
 800cbb6:	1e71      	subs	r1, r6, #1
 800cbb8:	4620      	mov	r0, r4
 800cbba:	f7fe fd75 	bl	800b6a8 <__any_on>
 800cbbe:	2800      	cmp	r0, #0
 800cbc0:	d1ed      	bne.n	800cb9e <__gethex+0x26a>
 800cbc2:	9801      	ldr	r0, [sp, #4]
 800cbc4:	4621      	mov	r1, r4
 800cbc6:	f7fe f921 	bl	800ae0c <_Bfree>
 800cbca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cbcc:	2300      	movs	r3, #0
 800cbce:	6013      	str	r3, [r2, #0]
 800cbd0:	2550      	movs	r5, #80	@ 0x50
 800cbd2:	e72b      	b.n	800ca2c <__gethex+0xf8>
 800cbd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d1f3      	bne.n	800cbc2 <__gethex+0x28e>
 800cbda:	e7e0      	b.n	800cb9e <__gethex+0x26a>
 800cbdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d1dd      	bne.n	800cb9e <__gethex+0x26a>
 800cbe2:	e7ee      	b.n	800cbc2 <__gethex+0x28e>
 800cbe4:	0800d760 	.word	0x0800d760
 800cbe8:	0800d5f5 	.word	0x0800d5f5
 800cbec:	0800d90e 	.word	0x0800d90e
 800cbf0:	1e6f      	subs	r7, r5, #1
 800cbf2:	f1b9 0f00 	cmp.w	r9, #0
 800cbf6:	d130      	bne.n	800cc5a <__gethex+0x326>
 800cbf8:	b127      	cbz	r7, 800cc04 <__gethex+0x2d0>
 800cbfa:	4639      	mov	r1, r7
 800cbfc:	4620      	mov	r0, r4
 800cbfe:	f7fe fd53 	bl	800b6a8 <__any_on>
 800cc02:	4681      	mov	r9, r0
 800cc04:	117a      	asrs	r2, r7, #5
 800cc06:	2301      	movs	r3, #1
 800cc08:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cc0c:	f007 071f 	and.w	r7, r7, #31
 800cc10:	40bb      	lsls	r3, r7
 800cc12:	4213      	tst	r3, r2
 800cc14:	4629      	mov	r1, r5
 800cc16:	4620      	mov	r0, r4
 800cc18:	bf18      	it	ne
 800cc1a:	f049 0902 	orrne.w	r9, r9, #2
 800cc1e:	f7ff fe21 	bl	800c864 <rshift>
 800cc22:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800cc26:	1b76      	subs	r6, r6, r5
 800cc28:	2502      	movs	r5, #2
 800cc2a:	f1b9 0f00 	cmp.w	r9, #0
 800cc2e:	d047      	beq.n	800ccc0 <__gethex+0x38c>
 800cc30:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cc34:	2b02      	cmp	r3, #2
 800cc36:	d015      	beq.n	800cc64 <__gethex+0x330>
 800cc38:	2b03      	cmp	r3, #3
 800cc3a:	d017      	beq.n	800cc6c <__gethex+0x338>
 800cc3c:	2b01      	cmp	r3, #1
 800cc3e:	d109      	bne.n	800cc54 <__gethex+0x320>
 800cc40:	f019 0f02 	tst.w	r9, #2
 800cc44:	d006      	beq.n	800cc54 <__gethex+0x320>
 800cc46:	f8da 3000 	ldr.w	r3, [sl]
 800cc4a:	ea49 0903 	orr.w	r9, r9, r3
 800cc4e:	f019 0f01 	tst.w	r9, #1
 800cc52:	d10e      	bne.n	800cc72 <__gethex+0x33e>
 800cc54:	f045 0510 	orr.w	r5, r5, #16
 800cc58:	e032      	b.n	800ccc0 <__gethex+0x38c>
 800cc5a:	f04f 0901 	mov.w	r9, #1
 800cc5e:	e7d1      	b.n	800cc04 <__gethex+0x2d0>
 800cc60:	2501      	movs	r5, #1
 800cc62:	e7e2      	b.n	800cc2a <__gethex+0x2f6>
 800cc64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc66:	f1c3 0301 	rsb	r3, r3, #1
 800cc6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cc6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d0f0      	beq.n	800cc54 <__gethex+0x320>
 800cc72:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cc76:	f104 0314 	add.w	r3, r4, #20
 800cc7a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cc7e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cc82:	f04f 0c00 	mov.w	ip, #0
 800cc86:	4618      	mov	r0, r3
 800cc88:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc8c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cc90:	d01b      	beq.n	800ccca <__gethex+0x396>
 800cc92:	3201      	adds	r2, #1
 800cc94:	6002      	str	r2, [r0, #0]
 800cc96:	2d02      	cmp	r5, #2
 800cc98:	f104 0314 	add.w	r3, r4, #20
 800cc9c:	d13c      	bne.n	800cd18 <__gethex+0x3e4>
 800cc9e:	f8d8 2000 	ldr.w	r2, [r8]
 800cca2:	3a01      	subs	r2, #1
 800cca4:	42b2      	cmp	r2, r6
 800cca6:	d109      	bne.n	800ccbc <__gethex+0x388>
 800cca8:	1171      	asrs	r1, r6, #5
 800ccaa:	2201      	movs	r2, #1
 800ccac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ccb0:	f006 061f 	and.w	r6, r6, #31
 800ccb4:	fa02 f606 	lsl.w	r6, r2, r6
 800ccb8:	421e      	tst	r6, r3
 800ccba:	d13a      	bne.n	800cd32 <__gethex+0x3fe>
 800ccbc:	f045 0520 	orr.w	r5, r5, #32
 800ccc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ccc2:	601c      	str	r4, [r3, #0]
 800ccc4:	9b02      	ldr	r3, [sp, #8]
 800ccc6:	601f      	str	r7, [r3, #0]
 800ccc8:	e6b0      	b.n	800ca2c <__gethex+0xf8>
 800ccca:	4299      	cmp	r1, r3
 800cccc:	f843 cc04 	str.w	ip, [r3, #-4]
 800ccd0:	d8d9      	bhi.n	800cc86 <__gethex+0x352>
 800ccd2:	68a3      	ldr	r3, [r4, #8]
 800ccd4:	459b      	cmp	fp, r3
 800ccd6:	db17      	blt.n	800cd08 <__gethex+0x3d4>
 800ccd8:	6861      	ldr	r1, [r4, #4]
 800ccda:	9801      	ldr	r0, [sp, #4]
 800ccdc:	3101      	adds	r1, #1
 800ccde:	f7fe f855 	bl	800ad8c <_Balloc>
 800cce2:	4681      	mov	r9, r0
 800cce4:	b918      	cbnz	r0, 800ccee <__gethex+0x3ba>
 800cce6:	4b1a      	ldr	r3, [pc, #104]	@ (800cd50 <__gethex+0x41c>)
 800cce8:	4602      	mov	r2, r0
 800ccea:	2184      	movs	r1, #132	@ 0x84
 800ccec:	e6c5      	b.n	800ca7a <__gethex+0x146>
 800ccee:	6922      	ldr	r2, [r4, #16]
 800ccf0:	3202      	adds	r2, #2
 800ccf2:	f104 010c 	add.w	r1, r4, #12
 800ccf6:	0092      	lsls	r2, r2, #2
 800ccf8:	300c      	adds	r0, #12
 800ccfa:	f7ff fd69 	bl	800c7d0 <memcpy>
 800ccfe:	4621      	mov	r1, r4
 800cd00:	9801      	ldr	r0, [sp, #4]
 800cd02:	f7fe f883 	bl	800ae0c <_Bfree>
 800cd06:	464c      	mov	r4, r9
 800cd08:	6923      	ldr	r3, [r4, #16]
 800cd0a:	1c5a      	adds	r2, r3, #1
 800cd0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cd10:	6122      	str	r2, [r4, #16]
 800cd12:	2201      	movs	r2, #1
 800cd14:	615a      	str	r2, [r3, #20]
 800cd16:	e7be      	b.n	800cc96 <__gethex+0x362>
 800cd18:	6922      	ldr	r2, [r4, #16]
 800cd1a:	455a      	cmp	r2, fp
 800cd1c:	dd0b      	ble.n	800cd36 <__gethex+0x402>
 800cd1e:	2101      	movs	r1, #1
 800cd20:	4620      	mov	r0, r4
 800cd22:	f7ff fd9f 	bl	800c864 <rshift>
 800cd26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cd2a:	3701      	adds	r7, #1
 800cd2c:	42bb      	cmp	r3, r7
 800cd2e:	f6ff aee0 	blt.w	800caf2 <__gethex+0x1be>
 800cd32:	2501      	movs	r5, #1
 800cd34:	e7c2      	b.n	800ccbc <__gethex+0x388>
 800cd36:	f016 061f 	ands.w	r6, r6, #31
 800cd3a:	d0fa      	beq.n	800cd32 <__gethex+0x3fe>
 800cd3c:	4453      	add	r3, sl
 800cd3e:	f1c6 0620 	rsb	r6, r6, #32
 800cd42:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cd46:	f7fe f913 	bl	800af70 <__hi0bits>
 800cd4a:	42b0      	cmp	r0, r6
 800cd4c:	dbe7      	blt.n	800cd1e <__gethex+0x3ea>
 800cd4e:	e7f0      	b.n	800cd32 <__gethex+0x3fe>
 800cd50:	0800d5f5 	.word	0x0800d5f5

0800cd54 <L_shift>:
 800cd54:	f1c2 0208 	rsb	r2, r2, #8
 800cd58:	0092      	lsls	r2, r2, #2
 800cd5a:	b570      	push	{r4, r5, r6, lr}
 800cd5c:	f1c2 0620 	rsb	r6, r2, #32
 800cd60:	6843      	ldr	r3, [r0, #4]
 800cd62:	6804      	ldr	r4, [r0, #0]
 800cd64:	fa03 f506 	lsl.w	r5, r3, r6
 800cd68:	432c      	orrs	r4, r5
 800cd6a:	40d3      	lsrs	r3, r2
 800cd6c:	6004      	str	r4, [r0, #0]
 800cd6e:	f840 3f04 	str.w	r3, [r0, #4]!
 800cd72:	4288      	cmp	r0, r1
 800cd74:	d3f4      	bcc.n	800cd60 <L_shift+0xc>
 800cd76:	bd70      	pop	{r4, r5, r6, pc}

0800cd78 <__match>:
 800cd78:	b530      	push	{r4, r5, lr}
 800cd7a:	6803      	ldr	r3, [r0, #0]
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd82:	b914      	cbnz	r4, 800cd8a <__match+0x12>
 800cd84:	6003      	str	r3, [r0, #0]
 800cd86:	2001      	movs	r0, #1
 800cd88:	bd30      	pop	{r4, r5, pc}
 800cd8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd8e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800cd92:	2d19      	cmp	r5, #25
 800cd94:	bf98      	it	ls
 800cd96:	3220      	addls	r2, #32
 800cd98:	42a2      	cmp	r2, r4
 800cd9a:	d0f0      	beq.n	800cd7e <__match+0x6>
 800cd9c:	2000      	movs	r0, #0
 800cd9e:	e7f3      	b.n	800cd88 <__match+0x10>

0800cda0 <__hexnan>:
 800cda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cda4:	680b      	ldr	r3, [r1, #0]
 800cda6:	6801      	ldr	r1, [r0, #0]
 800cda8:	115e      	asrs	r6, r3, #5
 800cdaa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cdae:	f013 031f 	ands.w	r3, r3, #31
 800cdb2:	b087      	sub	sp, #28
 800cdb4:	bf18      	it	ne
 800cdb6:	3604      	addne	r6, #4
 800cdb8:	2500      	movs	r5, #0
 800cdba:	1f37      	subs	r7, r6, #4
 800cdbc:	4682      	mov	sl, r0
 800cdbe:	4690      	mov	r8, r2
 800cdc0:	9301      	str	r3, [sp, #4]
 800cdc2:	f846 5c04 	str.w	r5, [r6, #-4]
 800cdc6:	46b9      	mov	r9, r7
 800cdc8:	463c      	mov	r4, r7
 800cdca:	9502      	str	r5, [sp, #8]
 800cdcc:	46ab      	mov	fp, r5
 800cdce:	784a      	ldrb	r2, [r1, #1]
 800cdd0:	1c4b      	adds	r3, r1, #1
 800cdd2:	9303      	str	r3, [sp, #12]
 800cdd4:	b342      	cbz	r2, 800ce28 <__hexnan+0x88>
 800cdd6:	4610      	mov	r0, r2
 800cdd8:	9105      	str	r1, [sp, #20]
 800cdda:	9204      	str	r2, [sp, #16]
 800cddc:	f7ff fd94 	bl	800c908 <__hexdig_fun>
 800cde0:	2800      	cmp	r0, #0
 800cde2:	d151      	bne.n	800ce88 <__hexnan+0xe8>
 800cde4:	9a04      	ldr	r2, [sp, #16]
 800cde6:	9905      	ldr	r1, [sp, #20]
 800cde8:	2a20      	cmp	r2, #32
 800cdea:	d818      	bhi.n	800ce1e <__hexnan+0x7e>
 800cdec:	9b02      	ldr	r3, [sp, #8]
 800cdee:	459b      	cmp	fp, r3
 800cdf0:	dd13      	ble.n	800ce1a <__hexnan+0x7a>
 800cdf2:	454c      	cmp	r4, r9
 800cdf4:	d206      	bcs.n	800ce04 <__hexnan+0x64>
 800cdf6:	2d07      	cmp	r5, #7
 800cdf8:	dc04      	bgt.n	800ce04 <__hexnan+0x64>
 800cdfa:	462a      	mov	r2, r5
 800cdfc:	4649      	mov	r1, r9
 800cdfe:	4620      	mov	r0, r4
 800ce00:	f7ff ffa8 	bl	800cd54 <L_shift>
 800ce04:	4544      	cmp	r4, r8
 800ce06:	d952      	bls.n	800ceae <__hexnan+0x10e>
 800ce08:	2300      	movs	r3, #0
 800ce0a:	f1a4 0904 	sub.w	r9, r4, #4
 800ce0e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ce12:	f8cd b008 	str.w	fp, [sp, #8]
 800ce16:	464c      	mov	r4, r9
 800ce18:	461d      	mov	r5, r3
 800ce1a:	9903      	ldr	r1, [sp, #12]
 800ce1c:	e7d7      	b.n	800cdce <__hexnan+0x2e>
 800ce1e:	2a29      	cmp	r2, #41	@ 0x29
 800ce20:	d157      	bne.n	800ced2 <__hexnan+0x132>
 800ce22:	3102      	adds	r1, #2
 800ce24:	f8ca 1000 	str.w	r1, [sl]
 800ce28:	f1bb 0f00 	cmp.w	fp, #0
 800ce2c:	d051      	beq.n	800ced2 <__hexnan+0x132>
 800ce2e:	454c      	cmp	r4, r9
 800ce30:	d206      	bcs.n	800ce40 <__hexnan+0xa0>
 800ce32:	2d07      	cmp	r5, #7
 800ce34:	dc04      	bgt.n	800ce40 <__hexnan+0xa0>
 800ce36:	462a      	mov	r2, r5
 800ce38:	4649      	mov	r1, r9
 800ce3a:	4620      	mov	r0, r4
 800ce3c:	f7ff ff8a 	bl	800cd54 <L_shift>
 800ce40:	4544      	cmp	r4, r8
 800ce42:	d936      	bls.n	800ceb2 <__hexnan+0x112>
 800ce44:	f1a8 0204 	sub.w	r2, r8, #4
 800ce48:	4623      	mov	r3, r4
 800ce4a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ce4e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ce52:	429f      	cmp	r7, r3
 800ce54:	d2f9      	bcs.n	800ce4a <__hexnan+0xaa>
 800ce56:	1b3b      	subs	r3, r7, r4
 800ce58:	f023 0303 	bic.w	r3, r3, #3
 800ce5c:	3304      	adds	r3, #4
 800ce5e:	3401      	adds	r4, #1
 800ce60:	3e03      	subs	r6, #3
 800ce62:	42b4      	cmp	r4, r6
 800ce64:	bf88      	it	hi
 800ce66:	2304      	movhi	r3, #4
 800ce68:	4443      	add	r3, r8
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	f843 2b04 	str.w	r2, [r3], #4
 800ce70:	429f      	cmp	r7, r3
 800ce72:	d2fb      	bcs.n	800ce6c <__hexnan+0xcc>
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	b91b      	cbnz	r3, 800ce80 <__hexnan+0xe0>
 800ce78:	4547      	cmp	r7, r8
 800ce7a:	d128      	bne.n	800cece <__hexnan+0x12e>
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	603b      	str	r3, [r7, #0]
 800ce80:	2005      	movs	r0, #5
 800ce82:	b007      	add	sp, #28
 800ce84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce88:	3501      	adds	r5, #1
 800ce8a:	2d08      	cmp	r5, #8
 800ce8c:	f10b 0b01 	add.w	fp, fp, #1
 800ce90:	dd06      	ble.n	800cea0 <__hexnan+0x100>
 800ce92:	4544      	cmp	r4, r8
 800ce94:	d9c1      	bls.n	800ce1a <__hexnan+0x7a>
 800ce96:	2300      	movs	r3, #0
 800ce98:	f844 3c04 	str.w	r3, [r4, #-4]
 800ce9c:	2501      	movs	r5, #1
 800ce9e:	3c04      	subs	r4, #4
 800cea0:	6822      	ldr	r2, [r4, #0]
 800cea2:	f000 000f 	and.w	r0, r0, #15
 800cea6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ceaa:	6020      	str	r0, [r4, #0]
 800ceac:	e7b5      	b.n	800ce1a <__hexnan+0x7a>
 800ceae:	2508      	movs	r5, #8
 800ceb0:	e7b3      	b.n	800ce1a <__hexnan+0x7a>
 800ceb2:	9b01      	ldr	r3, [sp, #4]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d0dd      	beq.n	800ce74 <__hexnan+0xd4>
 800ceb8:	f1c3 0320 	rsb	r3, r3, #32
 800cebc:	f04f 32ff 	mov.w	r2, #4294967295
 800cec0:	40da      	lsrs	r2, r3
 800cec2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cec6:	4013      	ands	r3, r2
 800cec8:	f846 3c04 	str.w	r3, [r6, #-4]
 800cecc:	e7d2      	b.n	800ce74 <__hexnan+0xd4>
 800cece:	3f04      	subs	r7, #4
 800ced0:	e7d0      	b.n	800ce74 <__hexnan+0xd4>
 800ced2:	2004      	movs	r0, #4
 800ced4:	e7d5      	b.n	800ce82 <__hexnan+0xe2>

0800ced6 <__ascii_mbtowc>:
 800ced6:	b082      	sub	sp, #8
 800ced8:	b901      	cbnz	r1, 800cedc <__ascii_mbtowc+0x6>
 800ceda:	a901      	add	r1, sp, #4
 800cedc:	b142      	cbz	r2, 800cef0 <__ascii_mbtowc+0x1a>
 800cede:	b14b      	cbz	r3, 800cef4 <__ascii_mbtowc+0x1e>
 800cee0:	7813      	ldrb	r3, [r2, #0]
 800cee2:	600b      	str	r3, [r1, #0]
 800cee4:	7812      	ldrb	r2, [r2, #0]
 800cee6:	1e10      	subs	r0, r2, #0
 800cee8:	bf18      	it	ne
 800ceea:	2001      	movne	r0, #1
 800ceec:	b002      	add	sp, #8
 800ceee:	4770      	bx	lr
 800cef0:	4610      	mov	r0, r2
 800cef2:	e7fb      	b.n	800ceec <__ascii_mbtowc+0x16>
 800cef4:	f06f 0001 	mvn.w	r0, #1
 800cef8:	e7f8      	b.n	800ceec <__ascii_mbtowc+0x16>

0800cefa <_realloc_r>:
 800cefa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cefe:	4680      	mov	r8, r0
 800cf00:	4615      	mov	r5, r2
 800cf02:	460c      	mov	r4, r1
 800cf04:	b921      	cbnz	r1, 800cf10 <_realloc_r+0x16>
 800cf06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf0a:	4611      	mov	r1, r2
 800cf0c:	f7fd beb2 	b.w	800ac74 <_malloc_r>
 800cf10:	b92a      	cbnz	r2, 800cf1e <_realloc_r+0x24>
 800cf12:	f7fd fe3b 	bl	800ab8c <_free_r>
 800cf16:	2400      	movs	r4, #0
 800cf18:	4620      	mov	r0, r4
 800cf1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf1e:	f000 f840 	bl	800cfa2 <_malloc_usable_size_r>
 800cf22:	4285      	cmp	r5, r0
 800cf24:	4606      	mov	r6, r0
 800cf26:	d802      	bhi.n	800cf2e <_realloc_r+0x34>
 800cf28:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cf2c:	d8f4      	bhi.n	800cf18 <_realloc_r+0x1e>
 800cf2e:	4629      	mov	r1, r5
 800cf30:	4640      	mov	r0, r8
 800cf32:	f7fd fe9f 	bl	800ac74 <_malloc_r>
 800cf36:	4607      	mov	r7, r0
 800cf38:	2800      	cmp	r0, #0
 800cf3a:	d0ec      	beq.n	800cf16 <_realloc_r+0x1c>
 800cf3c:	42b5      	cmp	r5, r6
 800cf3e:	462a      	mov	r2, r5
 800cf40:	4621      	mov	r1, r4
 800cf42:	bf28      	it	cs
 800cf44:	4632      	movcs	r2, r6
 800cf46:	f7ff fc43 	bl	800c7d0 <memcpy>
 800cf4a:	4621      	mov	r1, r4
 800cf4c:	4640      	mov	r0, r8
 800cf4e:	f7fd fe1d 	bl	800ab8c <_free_r>
 800cf52:	463c      	mov	r4, r7
 800cf54:	e7e0      	b.n	800cf18 <_realloc_r+0x1e>

0800cf56 <__ascii_wctomb>:
 800cf56:	4603      	mov	r3, r0
 800cf58:	4608      	mov	r0, r1
 800cf5a:	b141      	cbz	r1, 800cf6e <__ascii_wctomb+0x18>
 800cf5c:	2aff      	cmp	r2, #255	@ 0xff
 800cf5e:	d904      	bls.n	800cf6a <__ascii_wctomb+0x14>
 800cf60:	228a      	movs	r2, #138	@ 0x8a
 800cf62:	601a      	str	r2, [r3, #0]
 800cf64:	f04f 30ff 	mov.w	r0, #4294967295
 800cf68:	4770      	bx	lr
 800cf6a:	700a      	strb	r2, [r1, #0]
 800cf6c:	2001      	movs	r0, #1
 800cf6e:	4770      	bx	lr

0800cf70 <fiprintf>:
 800cf70:	b40e      	push	{r1, r2, r3}
 800cf72:	b503      	push	{r0, r1, lr}
 800cf74:	4601      	mov	r1, r0
 800cf76:	ab03      	add	r3, sp, #12
 800cf78:	4805      	ldr	r0, [pc, #20]	@ (800cf90 <fiprintf+0x20>)
 800cf7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf7e:	6800      	ldr	r0, [r0, #0]
 800cf80:	9301      	str	r3, [sp, #4]
 800cf82:	f000 f83f 	bl	800d004 <_vfiprintf_r>
 800cf86:	b002      	add	sp, #8
 800cf88:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf8c:	b003      	add	sp, #12
 800cf8e:	4770      	bx	lr
 800cf90:	2400001c 	.word	0x2400001c

0800cf94 <abort>:
 800cf94:	b508      	push	{r3, lr}
 800cf96:	2006      	movs	r0, #6
 800cf98:	f000 fa08 	bl	800d3ac <raise>
 800cf9c:	2001      	movs	r0, #1
 800cf9e:	f7f4 fabf 	bl	8001520 <_exit>

0800cfa2 <_malloc_usable_size_r>:
 800cfa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfa6:	1f18      	subs	r0, r3, #4
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	bfbc      	itt	lt
 800cfac:	580b      	ldrlt	r3, [r1, r0]
 800cfae:	18c0      	addlt	r0, r0, r3
 800cfb0:	4770      	bx	lr

0800cfb2 <__sfputc_r>:
 800cfb2:	6893      	ldr	r3, [r2, #8]
 800cfb4:	3b01      	subs	r3, #1
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	b410      	push	{r4}
 800cfba:	6093      	str	r3, [r2, #8]
 800cfbc:	da08      	bge.n	800cfd0 <__sfputc_r+0x1e>
 800cfbe:	6994      	ldr	r4, [r2, #24]
 800cfc0:	42a3      	cmp	r3, r4
 800cfc2:	db01      	blt.n	800cfc8 <__sfputc_r+0x16>
 800cfc4:	290a      	cmp	r1, #10
 800cfc6:	d103      	bne.n	800cfd0 <__sfputc_r+0x1e>
 800cfc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cfcc:	f000 b932 	b.w	800d234 <__swbuf_r>
 800cfd0:	6813      	ldr	r3, [r2, #0]
 800cfd2:	1c58      	adds	r0, r3, #1
 800cfd4:	6010      	str	r0, [r2, #0]
 800cfd6:	7019      	strb	r1, [r3, #0]
 800cfd8:	4608      	mov	r0, r1
 800cfda:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cfde:	4770      	bx	lr

0800cfe0 <__sfputs_r>:
 800cfe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfe2:	4606      	mov	r6, r0
 800cfe4:	460f      	mov	r7, r1
 800cfe6:	4614      	mov	r4, r2
 800cfe8:	18d5      	adds	r5, r2, r3
 800cfea:	42ac      	cmp	r4, r5
 800cfec:	d101      	bne.n	800cff2 <__sfputs_r+0x12>
 800cfee:	2000      	movs	r0, #0
 800cff0:	e007      	b.n	800d002 <__sfputs_r+0x22>
 800cff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cff6:	463a      	mov	r2, r7
 800cff8:	4630      	mov	r0, r6
 800cffa:	f7ff ffda 	bl	800cfb2 <__sfputc_r>
 800cffe:	1c43      	adds	r3, r0, #1
 800d000:	d1f3      	bne.n	800cfea <__sfputs_r+0xa>
 800d002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d004 <_vfiprintf_r>:
 800d004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d008:	460d      	mov	r5, r1
 800d00a:	b09d      	sub	sp, #116	@ 0x74
 800d00c:	4614      	mov	r4, r2
 800d00e:	4698      	mov	r8, r3
 800d010:	4606      	mov	r6, r0
 800d012:	b118      	cbz	r0, 800d01c <_vfiprintf_r+0x18>
 800d014:	6a03      	ldr	r3, [r0, #32]
 800d016:	b90b      	cbnz	r3, 800d01c <_vfiprintf_r+0x18>
 800d018:	f7fc feba 	bl	8009d90 <__sinit>
 800d01c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d01e:	07d9      	lsls	r1, r3, #31
 800d020:	d405      	bmi.n	800d02e <_vfiprintf_r+0x2a>
 800d022:	89ab      	ldrh	r3, [r5, #12]
 800d024:	059a      	lsls	r2, r3, #22
 800d026:	d402      	bmi.n	800d02e <_vfiprintf_r+0x2a>
 800d028:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d02a:	f7fc ffc8 	bl	8009fbe <__retarget_lock_acquire_recursive>
 800d02e:	89ab      	ldrh	r3, [r5, #12]
 800d030:	071b      	lsls	r3, r3, #28
 800d032:	d501      	bpl.n	800d038 <_vfiprintf_r+0x34>
 800d034:	692b      	ldr	r3, [r5, #16]
 800d036:	b99b      	cbnz	r3, 800d060 <_vfiprintf_r+0x5c>
 800d038:	4629      	mov	r1, r5
 800d03a:	4630      	mov	r0, r6
 800d03c:	f000 f938 	bl	800d2b0 <__swsetup_r>
 800d040:	b170      	cbz	r0, 800d060 <_vfiprintf_r+0x5c>
 800d042:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d044:	07dc      	lsls	r4, r3, #31
 800d046:	d504      	bpl.n	800d052 <_vfiprintf_r+0x4e>
 800d048:	f04f 30ff 	mov.w	r0, #4294967295
 800d04c:	b01d      	add	sp, #116	@ 0x74
 800d04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d052:	89ab      	ldrh	r3, [r5, #12]
 800d054:	0598      	lsls	r0, r3, #22
 800d056:	d4f7      	bmi.n	800d048 <_vfiprintf_r+0x44>
 800d058:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d05a:	f7fc ffb1 	bl	8009fc0 <__retarget_lock_release_recursive>
 800d05e:	e7f3      	b.n	800d048 <_vfiprintf_r+0x44>
 800d060:	2300      	movs	r3, #0
 800d062:	9309      	str	r3, [sp, #36]	@ 0x24
 800d064:	2320      	movs	r3, #32
 800d066:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d06a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d06e:	2330      	movs	r3, #48	@ 0x30
 800d070:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d220 <_vfiprintf_r+0x21c>
 800d074:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d078:	f04f 0901 	mov.w	r9, #1
 800d07c:	4623      	mov	r3, r4
 800d07e:	469a      	mov	sl, r3
 800d080:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d084:	b10a      	cbz	r2, 800d08a <_vfiprintf_r+0x86>
 800d086:	2a25      	cmp	r2, #37	@ 0x25
 800d088:	d1f9      	bne.n	800d07e <_vfiprintf_r+0x7a>
 800d08a:	ebba 0b04 	subs.w	fp, sl, r4
 800d08e:	d00b      	beq.n	800d0a8 <_vfiprintf_r+0xa4>
 800d090:	465b      	mov	r3, fp
 800d092:	4622      	mov	r2, r4
 800d094:	4629      	mov	r1, r5
 800d096:	4630      	mov	r0, r6
 800d098:	f7ff ffa2 	bl	800cfe0 <__sfputs_r>
 800d09c:	3001      	adds	r0, #1
 800d09e:	f000 80a7 	beq.w	800d1f0 <_vfiprintf_r+0x1ec>
 800d0a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d0a4:	445a      	add	r2, fp
 800d0a6:	9209      	str	r2, [sp, #36]	@ 0x24
 800d0a8:	f89a 3000 	ldrb.w	r3, [sl]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	f000 809f 	beq.w	800d1f0 <_vfiprintf_r+0x1ec>
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	f04f 32ff 	mov.w	r2, #4294967295
 800d0b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0bc:	f10a 0a01 	add.w	sl, sl, #1
 800d0c0:	9304      	str	r3, [sp, #16]
 800d0c2:	9307      	str	r3, [sp, #28]
 800d0c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d0c8:	931a      	str	r3, [sp, #104]	@ 0x68
 800d0ca:	4654      	mov	r4, sl
 800d0cc:	2205      	movs	r2, #5
 800d0ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0d2:	4853      	ldr	r0, [pc, #332]	@ (800d220 <_vfiprintf_r+0x21c>)
 800d0d4:	f7f3 f904 	bl	80002e0 <memchr>
 800d0d8:	9a04      	ldr	r2, [sp, #16]
 800d0da:	b9d8      	cbnz	r0, 800d114 <_vfiprintf_r+0x110>
 800d0dc:	06d1      	lsls	r1, r2, #27
 800d0de:	bf44      	itt	mi
 800d0e0:	2320      	movmi	r3, #32
 800d0e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d0e6:	0713      	lsls	r3, r2, #28
 800d0e8:	bf44      	itt	mi
 800d0ea:	232b      	movmi	r3, #43	@ 0x2b
 800d0ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d0f0:	f89a 3000 	ldrb.w	r3, [sl]
 800d0f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0f6:	d015      	beq.n	800d124 <_vfiprintf_r+0x120>
 800d0f8:	9a07      	ldr	r2, [sp, #28]
 800d0fa:	4654      	mov	r4, sl
 800d0fc:	2000      	movs	r0, #0
 800d0fe:	f04f 0c0a 	mov.w	ip, #10
 800d102:	4621      	mov	r1, r4
 800d104:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d108:	3b30      	subs	r3, #48	@ 0x30
 800d10a:	2b09      	cmp	r3, #9
 800d10c:	d94b      	bls.n	800d1a6 <_vfiprintf_r+0x1a2>
 800d10e:	b1b0      	cbz	r0, 800d13e <_vfiprintf_r+0x13a>
 800d110:	9207      	str	r2, [sp, #28]
 800d112:	e014      	b.n	800d13e <_vfiprintf_r+0x13a>
 800d114:	eba0 0308 	sub.w	r3, r0, r8
 800d118:	fa09 f303 	lsl.w	r3, r9, r3
 800d11c:	4313      	orrs	r3, r2
 800d11e:	9304      	str	r3, [sp, #16]
 800d120:	46a2      	mov	sl, r4
 800d122:	e7d2      	b.n	800d0ca <_vfiprintf_r+0xc6>
 800d124:	9b03      	ldr	r3, [sp, #12]
 800d126:	1d19      	adds	r1, r3, #4
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	9103      	str	r1, [sp, #12]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	bfbb      	ittet	lt
 800d130:	425b      	neglt	r3, r3
 800d132:	f042 0202 	orrlt.w	r2, r2, #2
 800d136:	9307      	strge	r3, [sp, #28]
 800d138:	9307      	strlt	r3, [sp, #28]
 800d13a:	bfb8      	it	lt
 800d13c:	9204      	strlt	r2, [sp, #16]
 800d13e:	7823      	ldrb	r3, [r4, #0]
 800d140:	2b2e      	cmp	r3, #46	@ 0x2e
 800d142:	d10a      	bne.n	800d15a <_vfiprintf_r+0x156>
 800d144:	7863      	ldrb	r3, [r4, #1]
 800d146:	2b2a      	cmp	r3, #42	@ 0x2a
 800d148:	d132      	bne.n	800d1b0 <_vfiprintf_r+0x1ac>
 800d14a:	9b03      	ldr	r3, [sp, #12]
 800d14c:	1d1a      	adds	r2, r3, #4
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	9203      	str	r2, [sp, #12]
 800d152:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d156:	3402      	adds	r4, #2
 800d158:	9305      	str	r3, [sp, #20]
 800d15a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d230 <_vfiprintf_r+0x22c>
 800d15e:	7821      	ldrb	r1, [r4, #0]
 800d160:	2203      	movs	r2, #3
 800d162:	4650      	mov	r0, sl
 800d164:	f7f3 f8bc 	bl	80002e0 <memchr>
 800d168:	b138      	cbz	r0, 800d17a <_vfiprintf_r+0x176>
 800d16a:	9b04      	ldr	r3, [sp, #16]
 800d16c:	eba0 000a 	sub.w	r0, r0, sl
 800d170:	2240      	movs	r2, #64	@ 0x40
 800d172:	4082      	lsls	r2, r0
 800d174:	4313      	orrs	r3, r2
 800d176:	3401      	adds	r4, #1
 800d178:	9304      	str	r3, [sp, #16]
 800d17a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d17e:	4829      	ldr	r0, [pc, #164]	@ (800d224 <_vfiprintf_r+0x220>)
 800d180:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d184:	2206      	movs	r2, #6
 800d186:	f7f3 f8ab 	bl	80002e0 <memchr>
 800d18a:	2800      	cmp	r0, #0
 800d18c:	d03f      	beq.n	800d20e <_vfiprintf_r+0x20a>
 800d18e:	4b26      	ldr	r3, [pc, #152]	@ (800d228 <_vfiprintf_r+0x224>)
 800d190:	bb1b      	cbnz	r3, 800d1da <_vfiprintf_r+0x1d6>
 800d192:	9b03      	ldr	r3, [sp, #12]
 800d194:	3307      	adds	r3, #7
 800d196:	f023 0307 	bic.w	r3, r3, #7
 800d19a:	3308      	adds	r3, #8
 800d19c:	9303      	str	r3, [sp, #12]
 800d19e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1a0:	443b      	add	r3, r7
 800d1a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1a4:	e76a      	b.n	800d07c <_vfiprintf_r+0x78>
 800d1a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d1aa:	460c      	mov	r4, r1
 800d1ac:	2001      	movs	r0, #1
 800d1ae:	e7a8      	b.n	800d102 <_vfiprintf_r+0xfe>
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	3401      	adds	r4, #1
 800d1b4:	9305      	str	r3, [sp, #20]
 800d1b6:	4619      	mov	r1, r3
 800d1b8:	f04f 0c0a 	mov.w	ip, #10
 800d1bc:	4620      	mov	r0, r4
 800d1be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1c2:	3a30      	subs	r2, #48	@ 0x30
 800d1c4:	2a09      	cmp	r2, #9
 800d1c6:	d903      	bls.n	800d1d0 <_vfiprintf_r+0x1cc>
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d0c6      	beq.n	800d15a <_vfiprintf_r+0x156>
 800d1cc:	9105      	str	r1, [sp, #20]
 800d1ce:	e7c4      	b.n	800d15a <_vfiprintf_r+0x156>
 800d1d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1d4:	4604      	mov	r4, r0
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	e7f0      	b.n	800d1bc <_vfiprintf_r+0x1b8>
 800d1da:	ab03      	add	r3, sp, #12
 800d1dc:	9300      	str	r3, [sp, #0]
 800d1de:	462a      	mov	r2, r5
 800d1e0:	4b12      	ldr	r3, [pc, #72]	@ (800d22c <_vfiprintf_r+0x228>)
 800d1e2:	a904      	add	r1, sp, #16
 800d1e4:	4630      	mov	r0, r6
 800d1e6:	f7fb ff93 	bl	8009110 <_printf_float>
 800d1ea:	4607      	mov	r7, r0
 800d1ec:	1c78      	adds	r0, r7, #1
 800d1ee:	d1d6      	bne.n	800d19e <_vfiprintf_r+0x19a>
 800d1f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d1f2:	07d9      	lsls	r1, r3, #31
 800d1f4:	d405      	bmi.n	800d202 <_vfiprintf_r+0x1fe>
 800d1f6:	89ab      	ldrh	r3, [r5, #12]
 800d1f8:	059a      	lsls	r2, r3, #22
 800d1fa:	d402      	bmi.n	800d202 <_vfiprintf_r+0x1fe>
 800d1fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d1fe:	f7fc fedf 	bl	8009fc0 <__retarget_lock_release_recursive>
 800d202:	89ab      	ldrh	r3, [r5, #12]
 800d204:	065b      	lsls	r3, r3, #25
 800d206:	f53f af1f 	bmi.w	800d048 <_vfiprintf_r+0x44>
 800d20a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d20c:	e71e      	b.n	800d04c <_vfiprintf_r+0x48>
 800d20e:	ab03      	add	r3, sp, #12
 800d210:	9300      	str	r3, [sp, #0]
 800d212:	462a      	mov	r2, r5
 800d214:	4b05      	ldr	r3, [pc, #20]	@ (800d22c <_vfiprintf_r+0x228>)
 800d216:	a904      	add	r1, sp, #16
 800d218:	4630      	mov	r0, r6
 800d21a:	f7fc fa01 	bl	8009620 <_printf_i>
 800d21e:	e7e4      	b.n	800d1ea <_vfiprintf_r+0x1e6>
 800d220:	0800d8b9 	.word	0x0800d8b9
 800d224:	0800d8c3 	.word	0x0800d8c3
 800d228:	08009111 	.word	0x08009111
 800d22c:	0800cfe1 	.word	0x0800cfe1
 800d230:	0800d8bf 	.word	0x0800d8bf

0800d234 <__swbuf_r>:
 800d234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d236:	460e      	mov	r6, r1
 800d238:	4614      	mov	r4, r2
 800d23a:	4605      	mov	r5, r0
 800d23c:	b118      	cbz	r0, 800d246 <__swbuf_r+0x12>
 800d23e:	6a03      	ldr	r3, [r0, #32]
 800d240:	b90b      	cbnz	r3, 800d246 <__swbuf_r+0x12>
 800d242:	f7fc fda5 	bl	8009d90 <__sinit>
 800d246:	69a3      	ldr	r3, [r4, #24]
 800d248:	60a3      	str	r3, [r4, #8]
 800d24a:	89a3      	ldrh	r3, [r4, #12]
 800d24c:	071a      	lsls	r2, r3, #28
 800d24e:	d501      	bpl.n	800d254 <__swbuf_r+0x20>
 800d250:	6923      	ldr	r3, [r4, #16]
 800d252:	b943      	cbnz	r3, 800d266 <__swbuf_r+0x32>
 800d254:	4621      	mov	r1, r4
 800d256:	4628      	mov	r0, r5
 800d258:	f000 f82a 	bl	800d2b0 <__swsetup_r>
 800d25c:	b118      	cbz	r0, 800d266 <__swbuf_r+0x32>
 800d25e:	f04f 37ff 	mov.w	r7, #4294967295
 800d262:	4638      	mov	r0, r7
 800d264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d266:	6823      	ldr	r3, [r4, #0]
 800d268:	6922      	ldr	r2, [r4, #16]
 800d26a:	1a98      	subs	r0, r3, r2
 800d26c:	6963      	ldr	r3, [r4, #20]
 800d26e:	b2f6      	uxtb	r6, r6
 800d270:	4283      	cmp	r3, r0
 800d272:	4637      	mov	r7, r6
 800d274:	dc05      	bgt.n	800d282 <__swbuf_r+0x4e>
 800d276:	4621      	mov	r1, r4
 800d278:	4628      	mov	r0, r5
 800d27a:	f7ff fa45 	bl	800c708 <_fflush_r>
 800d27e:	2800      	cmp	r0, #0
 800d280:	d1ed      	bne.n	800d25e <__swbuf_r+0x2a>
 800d282:	68a3      	ldr	r3, [r4, #8]
 800d284:	3b01      	subs	r3, #1
 800d286:	60a3      	str	r3, [r4, #8]
 800d288:	6823      	ldr	r3, [r4, #0]
 800d28a:	1c5a      	adds	r2, r3, #1
 800d28c:	6022      	str	r2, [r4, #0]
 800d28e:	701e      	strb	r6, [r3, #0]
 800d290:	6962      	ldr	r2, [r4, #20]
 800d292:	1c43      	adds	r3, r0, #1
 800d294:	429a      	cmp	r2, r3
 800d296:	d004      	beq.n	800d2a2 <__swbuf_r+0x6e>
 800d298:	89a3      	ldrh	r3, [r4, #12]
 800d29a:	07db      	lsls	r3, r3, #31
 800d29c:	d5e1      	bpl.n	800d262 <__swbuf_r+0x2e>
 800d29e:	2e0a      	cmp	r6, #10
 800d2a0:	d1df      	bne.n	800d262 <__swbuf_r+0x2e>
 800d2a2:	4621      	mov	r1, r4
 800d2a4:	4628      	mov	r0, r5
 800d2a6:	f7ff fa2f 	bl	800c708 <_fflush_r>
 800d2aa:	2800      	cmp	r0, #0
 800d2ac:	d0d9      	beq.n	800d262 <__swbuf_r+0x2e>
 800d2ae:	e7d6      	b.n	800d25e <__swbuf_r+0x2a>

0800d2b0 <__swsetup_r>:
 800d2b0:	b538      	push	{r3, r4, r5, lr}
 800d2b2:	4b29      	ldr	r3, [pc, #164]	@ (800d358 <__swsetup_r+0xa8>)
 800d2b4:	4605      	mov	r5, r0
 800d2b6:	6818      	ldr	r0, [r3, #0]
 800d2b8:	460c      	mov	r4, r1
 800d2ba:	b118      	cbz	r0, 800d2c4 <__swsetup_r+0x14>
 800d2bc:	6a03      	ldr	r3, [r0, #32]
 800d2be:	b90b      	cbnz	r3, 800d2c4 <__swsetup_r+0x14>
 800d2c0:	f7fc fd66 	bl	8009d90 <__sinit>
 800d2c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2c8:	0719      	lsls	r1, r3, #28
 800d2ca:	d422      	bmi.n	800d312 <__swsetup_r+0x62>
 800d2cc:	06da      	lsls	r2, r3, #27
 800d2ce:	d407      	bmi.n	800d2e0 <__swsetup_r+0x30>
 800d2d0:	2209      	movs	r2, #9
 800d2d2:	602a      	str	r2, [r5, #0]
 800d2d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d2d8:	81a3      	strh	r3, [r4, #12]
 800d2da:	f04f 30ff 	mov.w	r0, #4294967295
 800d2de:	e033      	b.n	800d348 <__swsetup_r+0x98>
 800d2e0:	0758      	lsls	r0, r3, #29
 800d2e2:	d512      	bpl.n	800d30a <__swsetup_r+0x5a>
 800d2e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d2e6:	b141      	cbz	r1, 800d2fa <__swsetup_r+0x4a>
 800d2e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d2ec:	4299      	cmp	r1, r3
 800d2ee:	d002      	beq.n	800d2f6 <__swsetup_r+0x46>
 800d2f0:	4628      	mov	r0, r5
 800d2f2:	f7fd fc4b 	bl	800ab8c <_free_r>
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	6363      	str	r3, [r4, #52]	@ 0x34
 800d2fa:	89a3      	ldrh	r3, [r4, #12]
 800d2fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d300:	81a3      	strh	r3, [r4, #12]
 800d302:	2300      	movs	r3, #0
 800d304:	6063      	str	r3, [r4, #4]
 800d306:	6923      	ldr	r3, [r4, #16]
 800d308:	6023      	str	r3, [r4, #0]
 800d30a:	89a3      	ldrh	r3, [r4, #12]
 800d30c:	f043 0308 	orr.w	r3, r3, #8
 800d310:	81a3      	strh	r3, [r4, #12]
 800d312:	6923      	ldr	r3, [r4, #16]
 800d314:	b94b      	cbnz	r3, 800d32a <__swsetup_r+0x7a>
 800d316:	89a3      	ldrh	r3, [r4, #12]
 800d318:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d31c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d320:	d003      	beq.n	800d32a <__swsetup_r+0x7a>
 800d322:	4621      	mov	r1, r4
 800d324:	4628      	mov	r0, r5
 800d326:	f000 f883 	bl	800d430 <__smakebuf_r>
 800d32a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d32e:	f013 0201 	ands.w	r2, r3, #1
 800d332:	d00a      	beq.n	800d34a <__swsetup_r+0x9a>
 800d334:	2200      	movs	r2, #0
 800d336:	60a2      	str	r2, [r4, #8]
 800d338:	6962      	ldr	r2, [r4, #20]
 800d33a:	4252      	negs	r2, r2
 800d33c:	61a2      	str	r2, [r4, #24]
 800d33e:	6922      	ldr	r2, [r4, #16]
 800d340:	b942      	cbnz	r2, 800d354 <__swsetup_r+0xa4>
 800d342:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d346:	d1c5      	bne.n	800d2d4 <__swsetup_r+0x24>
 800d348:	bd38      	pop	{r3, r4, r5, pc}
 800d34a:	0799      	lsls	r1, r3, #30
 800d34c:	bf58      	it	pl
 800d34e:	6962      	ldrpl	r2, [r4, #20]
 800d350:	60a2      	str	r2, [r4, #8]
 800d352:	e7f4      	b.n	800d33e <__swsetup_r+0x8e>
 800d354:	2000      	movs	r0, #0
 800d356:	e7f7      	b.n	800d348 <__swsetup_r+0x98>
 800d358:	2400001c 	.word	0x2400001c

0800d35c <_raise_r>:
 800d35c:	291f      	cmp	r1, #31
 800d35e:	b538      	push	{r3, r4, r5, lr}
 800d360:	4605      	mov	r5, r0
 800d362:	460c      	mov	r4, r1
 800d364:	d904      	bls.n	800d370 <_raise_r+0x14>
 800d366:	2316      	movs	r3, #22
 800d368:	6003      	str	r3, [r0, #0]
 800d36a:	f04f 30ff 	mov.w	r0, #4294967295
 800d36e:	bd38      	pop	{r3, r4, r5, pc}
 800d370:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d372:	b112      	cbz	r2, 800d37a <_raise_r+0x1e>
 800d374:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d378:	b94b      	cbnz	r3, 800d38e <_raise_r+0x32>
 800d37a:	4628      	mov	r0, r5
 800d37c:	f000 f830 	bl	800d3e0 <_getpid_r>
 800d380:	4622      	mov	r2, r4
 800d382:	4601      	mov	r1, r0
 800d384:	4628      	mov	r0, r5
 800d386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d38a:	f000 b817 	b.w	800d3bc <_kill_r>
 800d38e:	2b01      	cmp	r3, #1
 800d390:	d00a      	beq.n	800d3a8 <_raise_r+0x4c>
 800d392:	1c59      	adds	r1, r3, #1
 800d394:	d103      	bne.n	800d39e <_raise_r+0x42>
 800d396:	2316      	movs	r3, #22
 800d398:	6003      	str	r3, [r0, #0]
 800d39a:	2001      	movs	r0, #1
 800d39c:	e7e7      	b.n	800d36e <_raise_r+0x12>
 800d39e:	2100      	movs	r1, #0
 800d3a0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d3a4:	4620      	mov	r0, r4
 800d3a6:	4798      	blx	r3
 800d3a8:	2000      	movs	r0, #0
 800d3aa:	e7e0      	b.n	800d36e <_raise_r+0x12>

0800d3ac <raise>:
 800d3ac:	4b02      	ldr	r3, [pc, #8]	@ (800d3b8 <raise+0xc>)
 800d3ae:	4601      	mov	r1, r0
 800d3b0:	6818      	ldr	r0, [r3, #0]
 800d3b2:	f7ff bfd3 	b.w	800d35c <_raise_r>
 800d3b6:	bf00      	nop
 800d3b8:	2400001c 	.word	0x2400001c

0800d3bc <_kill_r>:
 800d3bc:	b538      	push	{r3, r4, r5, lr}
 800d3be:	4d07      	ldr	r5, [pc, #28]	@ (800d3dc <_kill_r+0x20>)
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	4604      	mov	r4, r0
 800d3c4:	4608      	mov	r0, r1
 800d3c6:	4611      	mov	r1, r2
 800d3c8:	602b      	str	r3, [r5, #0]
 800d3ca:	f7f4 f899 	bl	8001500 <_kill>
 800d3ce:	1c43      	adds	r3, r0, #1
 800d3d0:	d102      	bne.n	800d3d8 <_kill_r+0x1c>
 800d3d2:	682b      	ldr	r3, [r5, #0]
 800d3d4:	b103      	cbz	r3, 800d3d8 <_kill_r+0x1c>
 800d3d6:	6023      	str	r3, [r4, #0]
 800d3d8:	bd38      	pop	{r3, r4, r5, pc}
 800d3da:	bf00      	nop
 800d3dc:	2400041c 	.word	0x2400041c

0800d3e0 <_getpid_r>:
 800d3e0:	f7f4 b886 	b.w	80014f0 <_getpid>

0800d3e4 <__swhatbuf_r>:
 800d3e4:	b570      	push	{r4, r5, r6, lr}
 800d3e6:	460c      	mov	r4, r1
 800d3e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3ec:	2900      	cmp	r1, #0
 800d3ee:	b096      	sub	sp, #88	@ 0x58
 800d3f0:	4615      	mov	r5, r2
 800d3f2:	461e      	mov	r6, r3
 800d3f4:	da0d      	bge.n	800d412 <__swhatbuf_r+0x2e>
 800d3f6:	89a3      	ldrh	r3, [r4, #12]
 800d3f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d3fc:	f04f 0100 	mov.w	r1, #0
 800d400:	bf14      	ite	ne
 800d402:	2340      	movne	r3, #64	@ 0x40
 800d404:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d408:	2000      	movs	r0, #0
 800d40a:	6031      	str	r1, [r6, #0]
 800d40c:	602b      	str	r3, [r5, #0]
 800d40e:	b016      	add	sp, #88	@ 0x58
 800d410:	bd70      	pop	{r4, r5, r6, pc}
 800d412:	466a      	mov	r2, sp
 800d414:	f000 f848 	bl	800d4a8 <_fstat_r>
 800d418:	2800      	cmp	r0, #0
 800d41a:	dbec      	blt.n	800d3f6 <__swhatbuf_r+0x12>
 800d41c:	9901      	ldr	r1, [sp, #4]
 800d41e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d422:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d426:	4259      	negs	r1, r3
 800d428:	4159      	adcs	r1, r3
 800d42a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d42e:	e7eb      	b.n	800d408 <__swhatbuf_r+0x24>

0800d430 <__smakebuf_r>:
 800d430:	898b      	ldrh	r3, [r1, #12]
 800d432:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d434:	079d      	lsls	r5, r3, #30
 800d436:	4606      	mov	r6, r0
 800d438:	460c      	mov	r4, r1
 800d43a:	d507      	bpl.n	800d44c <__smakebuf_r+0x1c>
 800d43c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d440:	6023      	str	r3, [r4, #0]
 800d442:	6123      	str	r3, [r4, #16]
 800d444:	2301      	movs	r3, #1
 800d446:	6163      	str	r3, [r4, #20]
 800d448:	b003      	add	sp, #12
 800d44a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d44c:	ab01      	add	r3, sp, #4
 800d44e:	466a      	mov	r2, sp
 800d450:	f7ff ffc8 	bl	800d3e4 <__swhatbuf_r>
 800d454:	9f00      	ldr	r7, [sp, #0]
 800d456:	4605      	mov	r5, r0
 800d458:	4639      	mov	r1, r7
 800d45a:	4630      	mov	r0, r6
 800d45c:	f7fd fc0a 	bl	800ac74 <_malloc_r>
 800d460:	b948      	cbnz	r0, 800d476 <__smakebuf_r+0x46>
 800d462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d466:	059a      	lsls	r2, r3, #22
 800d468:	d4ee      	bmi.n	800d448 <__smakebuf_r+0x18>
 800d46a:	f023 0303 	bic.w	r3, r3, #3
 800d46e:	f043 0302 	orr.w	r3, r3, #2
 800d472:	81a3      	strh	r3, [r4, #12]
 800d474:	e7e2      	b.n	800d43c <__smakebuf_r+0xc>
 800d476:	89a3      	ldrh	r3, [r4, #12]
 800d478:	6020      	str	r0, [r4, #0]
 800d47a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d47e:	81a3      	strh	r3, [r4, #12]
 800d480:	9b01      	ldr	r3, [sp, #4]
 800d482:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d486:	b15b      	cbz	r3, 800d4a0 <__smakebuf_r+0x70>
 800d488:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d48c:	4630      	mov	r0, r6
 800d48e:	f000 f81d 	bl	800d4cc <_isatty_r>
 800d492:	b128      	cbz	r0, 800d4a0 <__smakebuf_r+0x70>
 800d494:	89a3      	ldrh	r3, [r4, #12]
 800d496:	f023 0303 	bic.w	r3, r3, #3
 800d49a:	f043 0301 	orr.w	r3, r3, #1
 800d49e:	81a3      	strh	r3, [r4, #12]
 800d4a0:	89a3      	ldrh	r3, [r4, #12]
 800d4a2:	431d      	orrs	r5, r3
 800d4a4:	81a5      	strh	r5, [r4, #12]
 800d4a6:	e7cf      	b.n	800d448 <__smakebuf_r+0x18>

0800d4a8 <_fstat_r>:
 800d4a8:	b538      	push	{r3, r4, r5, lr}
 800d4aa:	4d07      	ldr	r5, [pc, #28]	@ (800d4c8 <_fstat_r+0x20>)
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	4604      	mov	r4, r0
 800d4b0:	4608      	mov	r0, r1
 800d4b2:	4611      	mov	r1, r2
 800d4b4:	602b      	str	r3, [r5, #0]
 800d4b6:	f7f4 f883 	bl	80015c0 <_fstat>
 800d4ba:	1c43      	adds	r3, r0, #1
 800d4bc:	d102      	bne.n	800d4c4 <_fstat_r+0x1c>
 800d4be:	682b      	ldr	r3, [r5, #0]
 800d4c0:	b103      	cbz	r3, 800d4c4 <_fstat_r+0x1c>
 800d4c2:	6023      	str	r3, [r4, #0]
 800d4c4:	bd38      	pop	{r3, r4, r5, pc}
 800d4c6:	bf00      	nop
 800d4c8:	2400041c 	.word	0x2400041c

0800d4cc <_isatty_r>:
 800d4cc:	b538      	push	{r3, r4, r5, lr}
 800d4ce:	4d06      	ldr	r5, [pc, #24]	@ (800d4e8 <_isatty_r+0x1c>)
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	4604      	mov	r4, r0
 800d4d4:	4608      	mov	r0, r1
 800d4d6:	602b      	str	r3, [r5, #0]
 800d4d8:	f7f4 f882 	bl	80015e0 <_isatty>
 800d4dc:	1c43      	adds	r3, r0, #1
 800d4de:	d102      	bne.n	800d4e6 <_isatty_r+0x1a>
 800d4e0:	682b      	ldr	r3, [r5, #0]
 800d4e2:	b103      	cbz	r3, 800d4e6 <_isatty_r+0x1a>
 800d4e4:	6023      	str	r3, [r4, #0]
 800d4e6:	bd38      	pop	{r3, r4, r5, pc}
 800d4e8:	2400041c 	.word	0x2400041c

0800d4ec <_init>:
 800d4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ee:	bf00      	nop
 800d4f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4f2:	bc08      	pop	{r3}
 800d4f4:	469e      	mov	lr, r3
 800d4f6:	4770      	bx	lr

0800d4f8 <_fini>:
 800d4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4fa:	bf00      	nop
 800d4fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4fe:	bc08      	pop	{r3}
 800d500:	469e      	mov	lr, r3
 800d502:	4770      	bx	lr
