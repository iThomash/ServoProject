
projekt_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012548  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d40  080127e8  080127e8  000137e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014528  08014528  000161d8  2**0
                  CONTENTS
  4 .ARM          00000008  08014528  08014528  00015528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014530  08014530  000161d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014530  08014530  00015530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014534  08014534  00015534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  24000000  08014538  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  240001d8  08014710  000161d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000580  08014710  00016580  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000161d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000223d0  00000000  00000000  00016206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fef  00000000  00000000  000385d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a10  00000000  00000000  0003c5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001446  00000000  00000000  0003dfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f579  00000000  00000000  0003f41e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000260f0  00000000  00000000  0007e997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019eb44  00000000  00000000  000a4a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002435cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000084bc  00000000  00000000  00243610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0024bacc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080127d0 	.word	0x080127d0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	080127d0 	.word	0x080127d0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a6c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b64 <SystemInit+0xfc>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a72:	4a3c      	ldr	r2, [pc, #240]	@ (8000b64 <SystemInit+0xfc>)
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a7c:	4b39      	ldr	r3, [pc, #228]	@ (8000b64 <SystemInit+0xfc>)
 8000a7e:	691b      	ldr	r3, [r3, #16]
 8000a80:	4a38      	ldr	r2, [pc, #224]	@ (8000b64 <SystemInit+0xfc>)
 8000a82:	f043 0310 	orr.w	r3, r3, #16
 8000a86:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a88:	4b37      	ldr	r3, [pc, #220]	@ (8000b68 <SystemInit+0x100>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f003 030f 	and.w	r3, r3, #15
 8000a90:	2b06      	cmp	r3, #6
 8000a92:	d807      	bhi.n	8000aa4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a94:	4b34      	ldr	r3, [pc, #208]	@ (8000b68 <SystemInit+0x100>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f023 030f 	bic.w	r3, r3, #15
 8000a9c:	4a32      	ldr	r2, [pc, #200]	@ (8000b68 <SystemInit+0x100>)
 8000a9e:	f043 0307 	orr.w	r3, r3, #7
 8000aa2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aa4:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <SystemInit+0x104>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a30      	ldr	r2, [pc, #192]	@ (8000b6c <SystemInit+0x104>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <SystemInit+0x104>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b6c <SystemInit+0x104>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	492c      	ldr	r1, [pc, #176]	@ (8000b6c <SystemInit+0x104>)
 8000abc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b70 <SystemInit+0x108>)
 8000abe:	4013      	ands	r3, r2
 8000ac0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ac2:	4b29      	ldr	r3, [pc, #164]	@ (8000b68 <SystemInit+0x100>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f003 0308 	and.w	r3, r3, #8
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d007      	beq.n	8000ade <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ace:	4b26      	ldr	r3, [pc, #152]	@ (8000b68 <SystemInit+0x100>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f023 030f 	bic.w	r3, r3, #15
 8000ad6:	4a24      	ldr	r2, [pc, #144]	@ (8000b68 <SystemInit+0x100>)
 8000ad8:	f043 0307 	orr.w	r3, r3, #7
 8000adc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ade:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <SystemInit+0x104>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <SystemInit+0x104>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000aea:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <SystemInit+0x104>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000af0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b6c <SystemInit+0x104>)
 8000af2:	4a20      	ldr	r2, [pc, #128]	@ (8000b74 <SystemInit+0x10c>)
 8000af4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000af6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <SystemInit+0x104>)
 8000af8:	4a1f      	ldr	r2, [pc, #124]	@ (8000b78 <SystemInit+0x110>)
 8000afa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <SystemInit+0x104>)
 8000afe:	4a1f      	ldr	r2, [pc, #124]	@ (8000b7c <SystemInit+0x114>)
 8000b00:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <SystemInit+0x104>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b08:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <SystemInit+0x104>)
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b7c <SystemInit+0x114>)
 8000b0c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b0e:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <SystemInit+0x104>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b14:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <SystemInit+0x104>)
 8000b16:	4a19      	ldr	r2, [pc, #100]	@ (8000b7c <SystemInit+0x114>)
 8000b18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <SystemInit+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <SystemInit+0x104>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a11      	ldr	r2, [pc, #68]	@ (8000b6c <SystemInit+0x104>)
 8000b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <SystemInit+0x104>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <SystemInit+0x118>)
 8000b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b36:	4a12      	ldr	r2, [pc, #72]	@ (8000b80 <SystemInit+0x118>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <SystemInit+0x11c>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <SystemInit+0x120>)
 8000b44:	4013      	ands	r3, r2
 8000b46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b4a:	d202      	bcs.n	8000b52 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <SystemInit+0x124>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b52:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <SystemInit+0x128>)
 8000b54:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b58:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00
 8000b68:	52002000 	.word	0x52002000
 8000b6c:	58024400 	.word	0x58024400
 8000b70:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b74:	02020200 	.word	0x02020200
 8000b78:	01ff0000 	.word	0x01ff0000
 8000b7c:	01010280 	.word	0x01010280
 8000b80:	580000c0 	.word	0x580000c0
 8000b84:	5c001000 	.word	0x5c001000
 8000b88:	ffff0000 	.word	0xffff0000
 8000b8c:	51008108 	.word	0x51008108
 8000b90:	52004000 	.word	0x52004000

08000b94 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	@ 0x28
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b9a:	f107 031c 	add.w	r3, r7, #28
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ba6:	463b      	mov	r3, r7
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
 8000bb4:	615a      	str	r2, [r3, #20]
 8000bb6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bb8:	4b35      	ldr	r3, [pc, #212]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000bba:	4a36      	ldr	r2, [pc, #216]	@ (8000c94 <MX_ADC1_Init+0x100>)
 8000bbc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bbe:	4b34      	ldr	r3, [pc, #208]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bc4:	4b32      	ldr	r3, [pc, #200]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000bc6:	2204      	movs	r2, #4
 8000bc8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bca:	4b31      	ldr	r3, [pc, #196]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bd0:	4b2f      	ldr	r3, [pc, #188]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000bd6:	4b2e      	ldr	r3, [pc, #184]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bdc:	4b2c      	ldr	r3, [pc, #176]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000be2:	4b2b      	ldr	r3, [pc, #172]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000be8:	4b29      	ldr	r3, [pc, #164]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000bee:	4b28      	ldr	r3, [pc, #160]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bf4:	4b26      	ldr	r3, [pc, #152]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000bfa:	4b25      	ldr	r3, [pc, #148]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c00:	4b23      	ldr	r3, [pc, #140]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000c08:	4b21      	ldr	r3, [pc, #132]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c0e:	4820      	ldr	r0, [pc, #128]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000c10:	f001 fb18 	bl	8002244 <HAL_ADC_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000c1a:	f000 fd61 	bl	80016e0 <Error_Handler>
  }
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000c20:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c24:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000c26:	4b1a      	ldr	r3, [pc, #104]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c2c:	4818      	ldr	r0, [pc, #96]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000c2e:	f001 fb09 	bl	8002244 <HAL_ADC_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000c38:	f000 fd52 	bl	80016e0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c40:	f107 031c 	add.w	r3, r7, #28
 8000c44:	4619      	mov	r1, r3
 8000c46:	4812      	ldr	r0, [pc, #72]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000c48:	f002 fb82 	bl	8003350 <HAL_ADCEx_MultiModeConfigChannel>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000c52:	f000 fd45 	bl	80016e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8000c56:	4b10      	ldr	r3, [pc, #64]	@ (8000c98 <MX_ADC1_Init+0x104>)
 8000c58:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c5a:	2306      	movs	r3, #6
 8000c5c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c62:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000c66:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c68:	2304      	movs	r3, #4
 8000c6a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c74:	463b      	mov	r3, r7
 8000c76:	4619      	mov	r1, r3
 8000c78:	4805      	ldr	r0, [pc, #20]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000c7a:	f001 fe51 	bl	8002920 <HAL_ADC_ConfigChannel>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8000c84:	f000 fd2c 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c88:	bf00      	nop
 8000c8a:	3728      	adds	r7, #40	@ 0x28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	240001f4 	.word	0x240001f4
 8000c94:	40022000 	.word	0x40022000
 8000c98:	4fb80000 	.word	0x4fb80000

08000c9c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b0ba      	sub	sp, #232	@ 0xe8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	22c0      	movs	r2, #192	@ 0xc0
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f00d ff78 	bl	800ebb2 <memset>
  if(adcHandle->Instance==ADC1)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a43      	ldr	r2, [pc, #268]	@ (8000dd4 <HAL_ADC_MspInit+0x138>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d17f      	bne.n	8000dcc <HAL_ADC_MspInit+0x130>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ccc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000cd8:	2304      	movs	r3, #4
 8000cda:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8000cdc:	230a      	movs	r3, #10
 8000cde:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000cec:	23c0      	movs	r3, #192	@ 0xc0
 8000cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000cf0:	2320      	movs	r3, #32
 8000cf2:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cfe:	f107 0310 	add.w	r3, r7, #16
 8000d02:	4618      	mov	r0, r3
 8000d04:	f006 fdd6 	bl	80078b4 <HAL_RCCEx_PeriphCLKConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8000d0e:	f000 fce7 	bl	80016e0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d12:	4b31      	ldr	r3, [pc, #196]	@ (8000dd8 <HAL_ADC_MspInit+0x13c>)
 8000d14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d18:	4a2f      	ldr	r2, [pc, #188]	@ (8000dd8 <HAL_ADC_MspInit+0x13c>)
 8000d1a:	f043 0320 	orr.w	r3, r3, #32
 8000d1e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d22:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd8 <HAL_ADC_MspInit+0x13c>)
 8000d24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d28:	f003 0320 	and.w	r3, r3, #32
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d30:	4b29      	ldr	r3, [pc, #164]	@ (8000dd8 <HAL_ADC_MspInit+0x13c>)
 8000d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d36:	4a28      	ldr	r2, [pc, #160]	@ (8000dd8 <HAL_ADC_MspInit+0x13c>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d40:	4b25      	ldr	r3, [pc, #148]	@ (8000dd8 <HAL_ADC_MspInit+0x13c>)
 8000d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_INP19
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d4e:	2320      	movs	r3, #32
 8000d50:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d54:	2303      	movs	r3, #3
 8000d56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d60:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d64:	4619      	mov	r1, r3
 8000d66:	481d      	ldr	r0, [pc, #116]	@ (8000ddc <HAL_ADC_MspInit+0x140>)
 8000d68:	f004 ff06 	bl	8005b78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000d6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000d6e:	4a1d      	ldr	r2, [pc, #116]	@ (8000de4 <HAL_ADC_MspInit+0x148>)
 8000d70:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000d72:	4b1b      	ldr	r3, [pc, #108]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000d74:	2209      	movs	r2, #9
 8000d76:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d78:	4b19      	ldr	r3, [pc, #100]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d7e:	4b18      	ldr	r3, [pc, #96]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d84:	4b16      	ldr	r3, [pc, #88]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000d86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d8a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d8c:	4b14      	ldr	r3, [pc, #80]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000d8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d92:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d94:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000d96:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d9a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d9c:	4b10      	ldr	r3, [pc, #64]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000d9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000da2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000da4:	4b0e      	ldr	r3, [pc, #56]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000daa:	4b0d      	ldr	r3, [pc, #52]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000db0:	480b      	ldr	r0, [pc, #44]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000db2:	f002 fcbb 	bl	800372c <HAL_DMA_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <HAL_ADC_MspInit+0x124>
    {
      Error_Handler();
 8000dbc:	f000 fc90 	bl	80016e0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a07      	ldr	r2, [pc, #28]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000dc4:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000dc6:	4a06      	ldr	r2, [pc, #24]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000dcc:	bf00      	nop
 8000dce:	37e8      	adds	r7, #232	@ 0xe8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40022000 	.word	0x40022000
 8000dd8:	58024400 	.word	0x58024400
 8000ddc:	58020000 	.word	0x58020000
 8000de0:	24000258 	.word	0x24000258
 8000de4:	40020010 	.word	0x40020010

08000de8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dee:	4b0d      	ldr	r3, [pc, #52]	@ (8000e24 <MX_DMA_Init+0x3c>)
 8000df0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000df4:	4a0b      	ldr	r2, [pc, #44]	@ (8000e24 <MX_DMA_Init+0x3c>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000dfe:	4b09      	ldr	r3, [pc, #36]	@ (8000e24 <MX_DMA_Init+0x3c>)
 8000e00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2100      	movs	r1, #0
 8000e10:	200b      	movs	r0, #11
 8000e12:	f002 fc56 	bl	80036c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e16:	200b      	movs	r0, #11
 8000e18:	f002 fc6d 	bl	80036f6 <HAL_NVIC_EnableIRQ>

}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	58024400 	.word	0x58024400

08000e28 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08c      	sub	sp, #48	@ 0x30
 8000e2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2e:	f107 031c 	add.w	r3, r7, #28
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	609a      	str	r2, [r3, #8]
 8000e3a:	60da      	str	r2, [r3, #12]
 8000e3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3e:	4b73      	ldr	r3, [pc, #460]	@ (800100c <MX_GPIO_Init+0x1e4>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e44:	4a71      	ldr	r2, [pc, #452]	@ (800100c <MX_GPIO_Init+0x1e4>)
 8000e46:	f043 0304 	orr.w	r3, r3, #4
 8000e4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e4e:	4b6f      	ldr	r3, [pc, #444]	@ (800100c <MX_GPIO_Init+0x1e4>)
 8000e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e54:	f003 0304 	and.w	r3, r3, #4
 8000e58:	61bb      	str	r3, [r7, #24]
 8000e5a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5c:	4b6b      	ldr	r3, [pc, #428]	@ (800100c <MX_GPIO_Init+0x1e4>)
 8000e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e62:	4a6a      	ldr	r2, [pc, #424]	@ (800100c <MX_GPIO_Init+0x1e4>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e6c:	4b67      	ldr	r3, [pc, #412]	@ (800100c <MX_GPIO_Init+0x1e4>)
 8000e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7a:	4b64      	ldr	r3, [pc, #400]	@ (800100c <MX_GPIO_Init+0x1e4>)
 8000e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e80:	4a62      	ldr	r2, [pc, #392]	@ (800100c <MX_GPIO_Init+0x1e4>)
 8000e82:	f043 0302 	orr.w	r3, r3, #2
 8000e86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e8a:	4b60      	ldr	r3, [pc, #384]	@ (800100c <MX_GPIO_Init+0x1e4>)
 8000e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e98:	4b5c      	ldr	r3, [pc, #368]	@ (800100c <MX_GPIO_Init+0x1e4>)
 8000e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e9e:	4a5b      	ldr	r2, [pc, #364]	@ (800100c <MX_GPIO_Init+0x1e4>)
 8000ea0:	f043 0308 	orr.w	r3, r3, #8
 8000ea4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ea8:	4b58      	ldr	r3, [pc, #352]	@ (800100c <MX_GPIO_Init+0x1e4>)
 8000eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eae:	f003 0308 	and.w	r3, r3, #8
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eb6:	4b55      	ldr	r3, [pc, #340]	@ (800100c <MX_GPIO_Init+0x1e4>)
 8000eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ebc:	4a53      	ldr	r2, [pc, #332]	@ (800100c <MX_GPIO_Init+0x1e4>)
 8000ebe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ec2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ec6:	4b51      	ldr	r3, [pc, #324]	@ (800100c <MX_GPIO_Init+0x1e4>)
 8000ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ed4:	4b4d      	ldr	r3, [pc, #308]	@ (800100c <MX_GPIO_Init+0x1e4>)
 8000ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eda:	4a4c      	ldr	r2, [pc, #304]	@ (800100c <MX_GPIO_Init+0x1e4>)
 8000edc:	f043 0310 	orr.w	r3, r3, #16
 8000ee0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ee4:	4b49      	ldr	r3, [pc, #292]	@ (800100c <MX_GPIO_Init+0x1e4>)
 8000ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eea:	f003 0310 	and.w	r3, r3, #16
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000ef8:	4845      	ldr	r0, [pc, #276]	@ (8001010 <MX_GPIO_Init+0x1e8>)
 8000efa:	f004 ffed 	bl	8005ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2102      	movs	r1, #2
 8000f02:	4844      	ldr	r0, [pc, #272]	@ (8001014 <MX_GPIO_Init+0x1ec>)
 8000f04:	f004 ffe8 	bl	8005ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000f08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000f16:	f107 031c 	add.w	r3, r7, #28
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	483e      	ldr	r0, [pc, #248]	@ (8001018 <MX_GPIO_Init+0x1f0>)
 8000f1e:	f004 fe2b 	bl	8005b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f22:	2332      	movs	r3, #50	@ 0x32
 8000f24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f32:	230b      	movs	r3, #11
 8000f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4836      	ldr	r0, [pc, #216]	@ (8001018 <MX_GPIO_Init+0x1f0>)
 8000f3e:	f004 fe1b 	bl	8005b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f42:	2386      	movs	r3, #134	@ 0x86
 8000f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f52:	230b      	movs	r3, #11
 8000f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f107 031c 	add.w	r3, r7, #28
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	482f      	ldr	r0, [pc, #188]	@ (800101c <MX_GPIO_Init+0x1f4>)
 8000f5e:	f004 fe0b 	bl	8005b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin;
 8000f62:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4825      	ldr	r0, [pc, #148]	@ (8001010 <MX_GPIO_Init+0x1e8>)
 8000f7c:	f004 fdfc 	bl	8005b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f92:	230b      	movs	r3, #11
 8000f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f96:	f107 031c 	add.w	r3, r7, #28
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	481c      	ldr	r0, [pc, #112]	@ (8001010 <MX_GPIO_Init+0x1e8>)
 8000f9e:	f004 fdeb 	bl	8005b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000fa2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000fa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000fb4:	230a      	movs	r3, #10
 8000fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb8:	f107 031c 	add.w	r3, r7, #28
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4817      	ldr	r0, [pc, #92]	@ (800101c <MX_GPIO_Init+0x1f4>)
 8000fc0:	f004 fdda 	bl	8005b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000fc4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000fc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fd6:	230b      	movs	r3, #11
 8000fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fda:	f107 031c 	add.w	r3, r7, #28
 8000fde:	4619      	mov	r1, r3
 8000fe0:	480f      	ldr	r0, [pc, #60]	@ (8001020 <MX_GPIO_Init+0x1f8>)
 8000fe2:	f004 fdc9 	bl	8005b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fea:	2301      	movs	r3, #1
 8000fec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000ff6:	f107 031c 	add.w	r3, r7, #28
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4805      	ldr	r0, [pc, #20]	@ (8001014 <MX_GPIO_Init+0x1ec>)
 8000ffe:	f004 fdbb 	bl	8005b78 <HAL_GPIO_Init>

}
 8001002:	bf00      	nop
 8001004:	3730      	adds	r7, #48	@ 0x30
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	58024400 	.word	0x58024400
 8001010:	58020400 	.word	0x58020400
 8001014:	58021000 	.word	0x58021000
 8001018:	58020800 	.word	0x58020800
 800101c:	58020000 	.word	0x58020000
 8001020:	58021800 	.word	0x58021800

08001024 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001028:	4b1b      	ldr	r3, [pc, #108]	@ (8001098 <MX_I2C2_Init+0x74>)
 800102a:	4a1c      	ldr	r2, [pc, #112]	@ (800109c <MX_I2C2_Init+0x78>)
 800102c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 800102e:	4b1a      	ldr	r3, [pc, #104]	@ (8001098 <MX_I2C2_Init+0x74>)
 8001030:	4a1b      	ldr	r2, [pc, #108]	@ (80010a0 <MX_I2C2_Init+0x7c>)
 8001032:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001034:	4b18      	ldr	r3, [pc, #96]	@ (8001098 <MX_I2C2_Init+0x74>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800103a:	4b17      	ldr	r3, [pc, #92]	@ (8001098 <MX_I2C2_Init+0x74>)
 800103c:	2201      	movs	r2, #1
 800103e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001040:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <MX_I2C2_Init+0x74>)
 8001042:	2200      	movs	r2, #0
 8001044:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001046:	4b14      	ldr	r3, [pc, #80]	@ (8001098 <MX_I2C2_Init+0x74>)
 8001048:	2200      	movs	r2, #0
 800104a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800104c:	4b12      	ldr	r3, [pc, #72]	@ (8001098 <MX_I2C2_Init+0x74>)
 800104e:	2200      	movs	r2, #0
 8001050:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001052:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <MX_I2C2_Init+0x74>)
 8001054:	2200      	movs	r2, #0
 8001056:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001058:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <MX_I2C2_Init+0x74>)
 800105a:	2200      	movs	r2, #0
 800105c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800105e:	480e      	ldr	r0, [pc, #56]	@ (8001098 <MX_I2C2_Init+0x74>)
 8001060:	f004 ff82 	bl	8005f68 <HAL_I2C_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800106a:	f000 fb39 	bl	80016e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800106e:	2100      	movs	r1, #0
 8001070:	4809      	ldr	r0, [pc, #36]	@ (8001098 <MX_I2C2_Init+0x74>)
 8001072:	f005 fb47 	bl	8006704 <HAL_I2CEx_ConfigAnalogFilter>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800107c:	f000 fb30 	bl	80016e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001080:	2100      	movs	r1, #0
 8001082:	4805      	ldr	r0, [pc, #20]	@ (8001098 <MX_I2C2_Init+0x74>)
 8001084:	f005 fb89 	bl	800679a <HAL_I2CEx_ConfigDigitalFilter>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800108e:	f000 fb27 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	240002d0 	.word	0x240002d0
 800109c:	40005800 	.word	0x40005800
 80010a0:	00707cbb 	.word	0x00707cbb

080010a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b0ba      	sub	sp, #232	@ 0xe8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010bc:	f107 0310 	add.w	r3, r7, #16
 80010c0:	22c0      	movs	r2, #192	@ 0xc0
 80010c2:	2100      	movs	r1, #0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f00d fd74 	bl	800ebb2 <memset>
  if(i2cHandle->Instance==I2C2)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a27      	ldr	r2, [pc, #156]	@ (800116c <HAL_I2C_MspInit+0xc8>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d146      	bne.n	8001162 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80010d4:	f04f 0208 	mov.w	r2, #8
 80010d8:	f04f 0300 	mov.w	r3, #0
 80010dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80010e0:	2300      	movs	r3, #0
 80010e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010e6:	f107 0310 	add.w	r3, r7, #16
 80010ea:	4618      	mov	r0, r3
 80010ec:	f006 fbe2 	bl	80078b4 <HAL_RCCEx_PeriphCLKConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80010f6:	f000 faf3 	bl	80016e0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001170 <HAL_I2C_MspInit+0xcc>)
 80010fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001100:	4a1b      	ldr	r2, [pc, #108]	@ (8001170 <HAL_I2C_MspInit+0xcc>)
 8001102:	f043 0302 	orr.w	r3, r3, #2
 8001106:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800110a:	4b19      	ldr	r3, [pc, #100]	@ (8001170 <HAL_I2C_MspInit+0xcc>)
 800110c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001118:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800111c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001120:	2312      	movs	r3, #18
 8001122:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001132:	2304      	movs	r3, #4
 8001134:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001138:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800113c:	4619      	mov	r1, r3
 800113e:	480d      	ldr	r0, [pc, #52]	@ (8001174 <HAL_I2C_MspInit+0xd0>)
 8001140:	f004 fd1a 	bl	8005b78 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001144:	4b0a      	ldr	r3, [pc, #40]	@ (8001170 <HAL_I2C_MspInit+0xcc>)
 8001146:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800114a:	4a09      	ldr	r2, [pc, #36]	@ (8001170 <HAL_I2C_MspInit+0xcc>)
 800114c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001150:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001154:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <HAL_I2C_MspInit+0xcc>)
 8001156:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800115a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001162:	bf00      	nop
 8001164:	37e8      	adds	r7, #232	@ 0xe8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40005800 	.word	0x40005800
 8001170:	58024400 	.word	0x58024400
 8001174:	58020400 	.word	0x58020400

08001178 <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 800118e:	2308      	movs	r3, #8
 8001190:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 8001192:	2028      	movs	r0, #40	@ 0x28
 8001194:	f000 fe44 	bl	8001e20 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	7bfa      	ldrb	r2, [r7, #15]
 800119e:	2130      	movs	r1, #48	@ 0x30
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 f829 	bl	80011f8 <lcd_write>
	HAL_Delay(5);
 80011a6:	2005      	movs	r0, #5
 80011a8:	f000 fe3a 	bl	8001e20 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	7bfa      	ldrb	r2, [r7, #15]
 80011b2:	2130      	movs	r1, #48	@ 0x30
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 f81f 	bl	80011f8 <lcd_write>
	HAL_Delay(1);
 80011ba:	2001      	movs	r0, #1
 80011bc:	f000 fe30 	bl	8001e20 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	7bfa      	ldrb	r2, [r7, #15]
 80011c6:	2130      	movs	r1, #48	@ 0x30
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 f815 	bl	80011f8 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	7bfa      	ldrb	r2, [r7, #15]
 80011d4:	2102      	movs	r1, #2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f80e 	bl	80011f8 <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	7bfa      	ldrb	r2, [r7, #15]
 80011e2:	210c      	movs	r1, #12
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 f807 	bl	80011f8 <lcd_write>

	/* clear */
	lcd_clear(lcd);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 f89f 	bl	800132e <lcd_clear>

}
 80011f0:	bf00      	nop
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af02      	add	r7, sp, #8
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
 8001202:	460b      	mov	r3, r1
 8001204:	71bb      	strb	r3, [r7, #6]
 8001206:	4613      	mov	r3, r2
 8001208:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 800120a:	79bb      	ldrb	r3, [r7, #6]
 800120c:	f023 030f 	bic.w	r3, r3, #15
 8001210:	b2da      	uxtb	r2, r3
 8001212:	797b      	ldrb	r3, [r7, #5]
 8001214:	4313      	orrs	r3, r2
 8001216:	b2db      	uxtb	r3, r3
 8001218:	f043 0304 	orr.w	r3, r3, #4
 800121c:	b2db      	uxtb	r3, r3
 800121e:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 8001220:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001224:	f023 030f 	bic.w	r3, r3, #15
 8001228:	b25a      	sxtb	r2, r3
 800122a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800122e:	4313      	orrs	r3, r2
 8001230:	b25b      	sxtb	r3, r3
 8001232:	b2db      	uxtb	r3, r3
 8001234:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 8001236:	79bb      	ldrb	r3, [r7, #6]
 8001238:	011b      	lsls	r3, r3, #4
 800123a:	b2da      	uxtb	r2, r3
 800123c:	797b      	ldrb	r3, [r7, #5]
 800123e:	4313      	orrs	r3, r2
 8001240:	b2db      	uxtb	r3, r3
 8001242:	f043 0304 	orr.w	r3, r3, #4
 8001246:	b2db      	uxtb	r3, r3
 8001248:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 800124a:	79bb      	ldrb	r3, [r7, #6]
 800124c:	011b      	lsls	r3, r3, #4
 800124e:	b25a      	sxtb	r2, r3
 8001250:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001254:	4313      	orrs	r3, r2
 8001256:	b25b      	sxtb	r3, r3
 8001258:	b2db      	uxtb	r3, r3
 800125a:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	b299      	uxth	r1, r3
 8001260:	f107 020c 	add.w	r2, r7, #12
 8001264:	2364      	movs	r3, #100	@ 0x64
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2304      	movs	r3, #4
 800126a:	4805      	ldr	r0, [pc, #20]	@ (8001280 <lcd_write+0x88>)
 800126c:	f004 ff18 	bl	80060a0 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8001270:	2005      	movs	r0, #5
 8001272:	f000 fdd5 	bl	8001e20 <HAL_Delay>
}
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	240002d0 	.word	0x240002d0

08001284 <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	73fb      	strb	r3, [r7, #15]
 8001290:	2300      	movs	r3, #0
 8001292:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 800129e:	2308      	movs	r3, #8
 80012a0:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 f843 	bl	800132e <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	7bfa      	ldrb	r2, [r7, #15]
 80012ae:	2180      	movs	r1, #128	@ 0x80
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ffa1 	bl	80011f8 <lcd_write>
	while(lcd->f_line[i])
 80012b6:	e00f      	b.n	80012d8 <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	7818      	ldrb	r0, [r3, #0]
 80012bc:	7bbb      	ldrb	r3, [r7, #14]
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	7859      	ldrb	r1, [r3, #1]
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	461a      	mov	r2, r3
 80012ce:	f7ff ff93 	bl	80011f8 <lcd_write>
		i++;
 80012d2:	7bbb      	ldrb	r3, [r7, #14]
 80012d4:	3301      	adds	r3, #1
 80012d6:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 80012d8:	7bbb      	ldrb	r3, [r7, #14]
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	4413      	add	r3, r2
 80012de:	785b      	ldrb	r3, [r3, #1]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1e9      	bne.n	80012b8 <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	7bfa      	ldrb	r2, [r7, #15]
 80012ee:	21c0      	movs	r1, #192	@ 0xc0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff81 	bl	80011f8 <lcd_write>
	while(lcd->s_line[i])
 80012f6:	e00f      	b.n	8001318 <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	7818      	ldrb	r0, [r3, #0]
 80012fc:	7bbb      	ldrb	r3, [r7, #14]
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	7c99      	ldrb	r1, [r3, #18]
 8001304:	7bfb      	ldrb	r3, [r7, #15]
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	b2db      	uxtb	r3, r3
 800130c:	461a      	mov	r2, r3
 800130e:	f7ff ff73 	bl	80011f8 <lcd_write>
		i++;
 8001312:	7bbb      	ldrb	r3, [r7, #14]
 8001314:	3301      	adds	r3, #1
 8001316:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 8001318:	7bbb      	ldrb	r3, [r7, #14]
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	7c9b      	ldrb	r3, [r3, #18]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1e9      	bne.n	80012f8 <lcd_display+0x74>
	}
}
 8001324:	bf00      	nop
 8001326:	bf00      	nop
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b084      	sub	sp, #16
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 8001344:	2308      	movs	r3, #8
 8001346:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	7bfa      	ldrb	r2, [r7, #15]
 800134e:	2101      	movs	r1, #1
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff51 	bl	80011f8 <lcd_write>
}
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <SendDebugMessage>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void SendDebugMessage(const char* message) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff f809 	bl	8000380 <strlen>
 800136e:	4603      	mov	r3, r0
 8001370:	b29a      	uxth	r2, r3
 8001372:	f04f 33ff 	mov.w	r3, #4294967295
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	4803      	ldr	r0, [pc, #12]	@ (8001388 <SendDebugMessage+0x28>)
 800137a:	f00a f8d5 	bl	800b528 <HAL_UART_Transmit>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	2400039c 	.word	0x2400039c

0800138c <HAL_UART_RxCpltCallback>:
    snprintf(buffer, sizeof(buffer), "%.2f", value);
    SendDebugMessage(buffer);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	SendDebugMessage(rx_data);
 8001394:	4811      	ldr	r0, [pc, #68]	@ (80013dc <HAL_UART_RxCpltCallback+0x50>)
 8001396:	f7ff ffe3 	bl	8001360 <SendDebugMessage>
	int rx_data_int = 100*(rx_data[0]-'0') + 10*(rx_data[1]-'0') + (rx_data[2]-'0');
 800139a:	4b10      	ldr	r3, [pc, #64]	@ (80013dc <HAL_UART_RxCpltCallback+0x50>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	3b30      	subs	r3, #48	@ 0x30
 80013a0:	2264      	movs	r2, #100	@ 0x64
 80013a2:	fb02 f103 	mul.w	r1, r2, r3
 80013a6:	4b0d      	ldr	r3, [pc, #52]	@ (80013dc <HAL_UART_RxCpltCallback+0x50>)
 80013a8:	785b      	ldrb	r3, [r3, #1]
 80013aa:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80013ae:	4613      	mov	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	18ca      	adds	r2, r1, r3
 80013b8:	4b08      	ldr	r3, [pc, #32]	@ (80013dc <HAL_UART_RxCpltCallback+0x50>)
 80013ba:	789b      	ldrb	r3, [r3, #2]
 80013bc:	3b30      	subs	r3, #48	@ 0x30
 80013be:	4413      	add	r3, r2
 80013c0:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, rx_data_int);
 80013c2:	4b07      	ldr	r3, [pc, #28]	@ (80013e0 <HAL_UART_RxCpltCallback+0x54>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_UART_Receive_IT(&huart3, &rx_data, 3);
 80013ca:	2203      	movs	r2, #3
 80013cc:	4903      	ldr	r1, [pc, #12]	@ (80013dc <HAL_UART_RxCpltCallback+0x50>)
 80013ce:	4805      	ldr	r0, [pc, #20]	@ (80013e4 <HAL_UART_RxCpltCallback+0x58>)
 80013d0:	f00a f938 	bl	800b644 <HAL_UART_Receive_IT>
}
 80013d4:	bf00      	nop
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	24000324 	.word	0x24000324
 80013e0:	24000350 	.word	0x24000350
 80013e4:	2400039c 	.word	0x2400039c

080013e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80013ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013f2:	61fb      	str	r3, [r7, #28]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80013f4:	bf00      	nop
 80013f6:	4b76      	ldr	r3, [pc, #472]	@ (80015d0 <main+0x1e8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d004      	beq.n	800140c <main+0x24>
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	1e5a      	subs	r2, r3, #1
 8001406:	61fa      	str	r2, [r7, #28]
 8001408:	2b00      	cmp	r3, #0
 800140a:	dcf4      	bgt.n	80013f6 <main+0xe>
  if ( timeout < 0 )
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	2b00      	cmp	r3, #0
 8001410:	da01      	bge.n	8001416 <main+0x2e>
  {
  Error_Handler();
 8001412:	f000 f965 	bl	80016e0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001416:	f000 fc71 	bl	8001cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800141a:	f000 f8ef 	bl	80015fc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800141e:	4b6c      	ldr	r3, [pc, #432]	@ (80015d0 <main+0x1e8>)
 8001420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001424:	4a6a      	ldr	r2, [pc, #424]	@ (80015d0 <main+0x1e8>)
 8001426:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800142a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800142e:	4b68      	ldr	r3, [pc, #416]	@ (80015d0 <main+0x1e8>)
 8001430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001434:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001438:	607b      	str	r3, [r7, #4]
 800143a:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800143c:	2000      	movs	r0, #0
 800143e:	f004 fd65 	bl	8005f0c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001442:	2100      	movs	r1, #0
 8001444:	2000      	movs	r0, #0
 8001446:	f004 fd7b 	bl	8005f40 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800144a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800144e:	61fb      	str	r3, [r7, #28]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001450:	bf00      	nop
 8001452:	4b5f      	ldr	r3, [pc, #380]	@ (80015d0 <main+0x1e8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d104      	bne.n	8001468 <main+0x80>
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	1e5a      	subs	r2, r3, #1
 8001462:	61fa      	str	r2, [r7, #28]
 8001464:	2b00      	cmp	r3, #0
 8001466:	dcf4      	bgt.n	8001452 <main+0x6a>
if ( timeout < 0 )
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	2b00      	cmp	r3, #0
 800146c:	da01      	bge.n	8001472 <main+0x8a>
{
Error_Handler();
 800146e:	f000 f937 	bl	80016e0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001472:	f7ff fcd9 	bl	8000e28 <MX_GPIO_Init>
  MX_DMA_Init();
 8001476:	f7ff fcb7 	bl	8000de8 <MX_DMA_Init>
  MX_TIM2_Init();
 800147a:	f000 fa5b 	bl	8001934 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 800147e:	f000 fb55 	bl	8001b2c <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8001482:	f7ff fdcf 	bl	8001024 <MX_I2C2_Init>
  MX_ADC1_Init();
 8001486:	f7ff fb85 	bl	8000b94 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	disp.addr = (0x27 << 1);
 800148a:	4b52      	ldr	r3, [pc, #328]	@ (80015d4 <main+0x1ec>)
 800148c:	224e      	movs	r2, #78	@ 0x4e
 800148e:	701a      	strb	r2, [r3, #0]
	disp.bl = true;
 8001490:	4b50      	ldr	r3, [pc, #320]	@ (80015d4 <main+0x1ec>)
 8001492:	2201      	movs	r2, #1
 8001494:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	lcd_init(&disp);
 8001498:	484e      	ldr	r0, [pc, #312]	@ (80015d4 <main+0x1ec>)
 800149a:	f7ff fe6d 	bl	8001178 <lcd_init>
	sprintf((char *)disp.f_line, "n");
 800149e:	494e      	ldr	r1, [pc, #312]	@ (80015d8 <main+0x1f0>)
 80014a0:	484e      	ldr	r0, [pc, #312]	@ (80015dc <main+0x1f4>)
 80014a2:	f00d fb23 	bl	800eaec <siprintf>
	sprintf((char *)disp.s_line, "n");
 80014a6:	494c      	ldr	r1, [pc, #304]	@ (80015d8 <main+0x1f0>)
 80014a8:	484d      	ldr	r0, [pc, #308]	@ (80015e0 <main+0x1f8>)
 80014aa:	f00d fb1f 	bl	800eaec <siprintf>
	lcd_display(&disp);
 80014ae:	4849      	ldr	r0, [pc, #292]	@ (80015d4 <main+0x1ec>)
 80014b0:	f7ff fee8 	bl	8001284 <lcd_display>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  TIM2->CCR1 = 50;
 80014b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014b8:	2232      	movs	r2, #50	@ 0x32
 80014ba:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2->CCR2 = 50;
 80014bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014c0:	2232      	movs	r2, #50	@ 0x32
 80014c2:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 80014c4:	2100      	movs	r1, #0
 80014c6:	4847      	ldr	r0, [pc, #284]	@ (80015e4 <main+0x1fc>)
 80014c8:	f008 ffaa 	bl	800a420 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 80014cc:	2104      	movs	r1, #4
 80014ce:	4845      	ldr	r0, [pc, #276]	@ (80015e4 <main+0x1fc>)
 80014d0:	f008 ffa6 	bl	800a420 <HAL_TIM_PWM_Start_IT>
  HAL_UART_Receive_IT(&huart3, &rx_data, 3);
 80014d4:	2203      	movs	r2, #3
 80014d6:	4944      	ldr	r1, [pc, #272]	@ (80015e8 <main+0x200>)
 80014d8:	4844      	ldr	r0, [pc, #272]	@ (80015ec <main+0x204>)
 80014da:	f00a f8b3 	bl	800b644 <HAL_UART_Receive_IT>
  int i = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	61bb      	str	r3, [r7, #24]
  while (1)
  {

	HAL_ADC_Start(&hadc1);
 80014e2:	4843      	ldr	r0, [pc, #268]	@ (80015f0 <main+0x208>)
 80014e4:	f001 f850 	bl	8002588 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,20);
 80014e8:	2114      	movs	r1, #20
 80014ea:	4841      	ldr	r0, [pc, #260]	@ (80015f0 <main+0x208>)
 80014ec:	f001 f916 	bl	800271c <HAL_ADC_PollForConversion>
	uint16_t v = HAL_ADC_GetValue(&hadc1);
 80014f0:	483f      	ldr	r0, [pc, #252]	@ (80015f0 <main+0x208>)
 80014f2:	f001 fa07 	bl	8002904 <HAL_ADC_GetValue>
 80014f6:	4603      	mov	r3, r0
 80014f8:	82fb      	strh	r3, [r7, #22]

	float voltage = 3.3 * v / 65535;
 80014fa:	8afb      	ldrh	r3, [r7, #22]
 80014fc:	ee07 3a90 	vmov	s15, r3
 8001500:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001504:	ed9f 6b28 	vldr	d6, [pc, #160]	@ 80015a8 <main+0x1c0>
 8001508:	ee27 6b06 	vmul.f64	d6, d7, d6
 800150c:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 80015b0 <main+0x1c8>
 8001510:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001514:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001518:	edc7 7a04 	vstr	s15, [r7, #16]
	float resistance = (( voltage)/(3.3 - voltage) * 4700);
 800151c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001520:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001524:	edd7 7a04 	vldr	s15, [r7, #16]
 8001528:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800152c:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 80015a8 <main+0x1c0>
 8001530:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001534:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001538:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 80015b8 <main+0x1d0>
 800153c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001540:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001544:	edc7 7a03 	vstr	s15, [r7, #12]
	float lux = (10 * pow(8000, 1/0.6)) / pow(resistance, 1/0.6);
 8001548:	edd7 7a03 	vldr	s15, [r7, #12]
 800154c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001550:	ed9f 1b1b 	vldr	d1, [pc, #108]	@ 80015c0 <main+0x1d8>
 8001554:	eeb0 0b47 	vmov.f64	d0, d7
 8001558:	f010 fe76 	bl	8012248 <pow>
 800155c:	eeb0 6b40 	vmov.f64	d6, d0
 8001560:	ed9f 5b19 	vldr	d5, [pc, #100]	@ 80015c8 <main+0x1e0>
 8001564:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001568:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800156c:	edc7 7a02 	vstr	s15, [r7, #8]

	sprintf((char *)disp.f_line, "%.2f", lux);
 8001570:	edd7 7a02 	vldr	s15, [r7, #8]
 8001574:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001578:	ec53 2b17 	vmov	r2, r3, d7
 800157c:	491d      	ldr	r1, [pc, #116]	@ (80015f4 <main+0x20c>)
 800157e:	4817      	ldr	r0, [pc, #92]	@ (80015dc <main+0x1f4>)
 8001580:	f00d fab4 	bl	800eaec <siprintf>
	sprintf((char *)disp.s_line, "nigger");
 8001584:	491c      	ldr	r1, [pc, #112]	@ (80015f8 <main+0x210>)
 8001586:	4816      	ldr	r0, [pc, #88]	@ (80015e0 <main+0x1f8>)
 8001588:	f00d fab0 	bl	800eaec <siprintf>
	HAL_Delay(500);
 800158c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001590:	f000 fc46 	bl	8001e20 <HAL_Delay>
	lcd_display(&disp);
 8001594:	480f      	ldr	r0, [pc, #60]	@ (80015d4 <main+0x1ec>)
 8001596:	f7ff fe75 	bl	8001284 <lcd_display>
	i+=1;
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	3301      	adds	r3, #1
 800159e:	61bb      	str	r3, [r7, #24]
  {
 80015a0:	bf00      	nop
 80015a2:	e79e      	b.n	80014e2 <main+0xfa>
 80015a4:	f3af 8000 	nop.w
 80015a8:	66666666 	.word	0x66666666
 80015ac:	400a6666 	.word	0x400a6666
 80015b0:	00000000 	.word	0x00000000
 80015b4:	40efffe0 	.word	0x40efffe0
 80015b8:	00000000 	.word	0x00000000
 80015bc:	40b25c00 	.word	0x40b25c00
 80015c0:	aaaaaaab 	.word	0xaaaaaaab
 80015c4:	3ffaaaaa 	.word	0x3ffaaaaa
 80015c8:	00000006 	.word	0x00000006
 80015cc:	417e8480 	.word	0x417e8480
 80015d0:	58024400 	.word	0x58024400
 80015d4:	24000328 	.word	0x24000328
 80015d8:	080127f4 	.word	0x080127f4
 80015dc:	24000329 	.word	0x24000329
 80015e0:	2400033a 	.word	0x2400033a
 80015e4:	24000350 	.word	0x24000350
 80015e8:	24000324 	.word	0x24000324
 80015ec:	2400039c 	.word	0x2400039c
 80015f0:	240001f4 	.word	0x240001f4
 80015f4:	080127ec 	.word	0x080127ec
 80015f8:	080127f8 	.word	0x080127f8

080015fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b09c      	sub	sp, #112	@ 0x70
 8001600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001602:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001606:	224c      	movs	r2, #76	@ 0x4c
 8001608:	2100      	movs	r1, #0
 800160a:	4618      	mov	r0, r3
 800160c:	f00d fad1 	bl	800ebb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	2220      	movs	r2, #32
 8001614:	2100      	movs	r1, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f00d facb 	bl	800ebb2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800161c:	2004      	movs	r0, #4
 800161e:	f005 f909 	bl	8006834 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001622:	2300      	movs	r3, #0
 8001624:	603b      	str	r3, [r7, #0]
 8001626:	4b2b      	ldr	r3, [pc, #172]	@ (80016d4 <SystemClock_Config+0xd8>)
 8001628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800162a:	4a2a      	ldr	r2, [pc, #168]	@ (80016d4 <SystemClock_Config+0xd8>)
 800162c:	f023 0301 	bic.w	r3, r3, #1
 8001630:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001632:	4b28      	ldr	r3, [pc, #160]	@ (80016d4 <SystemClock_Config+0xd8>)
 8001634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	603b      	str	r3, [r7, #0]
 800163c:	4b26      	ldr	r3, [pc, #152]	@ (80016d8 <SystemClock_Config+0xdc>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001644:	4a24      	ldr	r2, [pc, #144]	@ (80016d8 <SystemClock_Config+0xdc>)
 8001646:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800164a:	6193      	str	r3, [r2, #24]
 800164c:	4b22      	ldr	r3, [pc, #136]	@ (80016d8 <SystemClock_Config+0xdc>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001654:	603b      	str	r3, [r7, #0]
 8001656:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001658:	bf00      	nop
 800165a:	4b1f      	ldr	r3, [pc, #124]	@ (80016d8 <SystemClock_Config+0xdc>)
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001662:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001666:	d1f8      	bne.n	800165a <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8001668:	4b1c      	ldr	r3, [pc, #112]	@ (80016dc <SystemClock_Config+0xe0>)
 800166a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800166c:	4a1b      	ldr	r2, [pc, #108]	@ (80016dc <SystemClock_Config+0xe0>)
 800166e:	f023 0303 	bic.w	r3, r3, #3
 8001672:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001674:	2302      	movs	r3, #2
 8001676:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001678:	2301      	movs	r3, #1
 800167a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800167c:	2340      	movs	r3, #64	@ 0x40
 800167e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001680:	2300      	movs	r3, #0
 8001682:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001684:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001688:	4618      	mov	r0, r3
 800168a:	f005 f92d 	bl	80068e8 <HAL_RCC_OscConfig>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001694:	f000 f824 	bl	80016e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001698:	233f      	movs	r3, #63	@ 0x3f
 800169a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800169c:	2300      	movs	r3, #0
 800169e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80016a4:	2300      	movs	r3, #0
 80016a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80016ac:	2340      	movs	r3, #64	@ 0x40
 80016ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80016b4:	2300      	movs	r3, #0
 80016b6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	2101      	movs	r1, #1
 80016bc:	4618      	mov	r0, r3
 80016be:	f005 fd6d 	bl	800719c <HAL_RCC_ClockConfig>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80016c8:	f000 f80a 	bl	80016e0 <Error_Handler>
  }
}
 80016cc:	bf00      	nop
 80016ce:	3770      	adds	r7, #112	@ 0x70
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	58000400 	.word	0x58000400
 80016d8:	58024800 	.word	0x58024800
 80016dc:	58024400 	.word	0x58024400

080016e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e4:	b672      	cpsid	i
}
 80016e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <Error_Handler+0x8>

080016ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f2:	4b0a      	ldr	r3, [pc, #40]	@ (800171c <HAL_MspInit+0x30>)
 80016f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016f8:	4a08      	ldr	r2, [pc, #32]	@ (800171c <HAL_MspInit+0x30>)
 80016fa:	f043 0302 	orr.w	r3, r3, #2
 80016fe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001702:	4b06      	ldr	r3, [pc, #24]	@ (800171c <HAL_MspInit+0x30>)
 8001704:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	58024400 	.word	0x58024400

08001720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <NMI_Handler+0x4>

08001728 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <HardFault_Handler+0x4>

08001730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <MemManage_Handler+0x4>

08001738 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <BusFault_Handler+0x4>

08001740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <UsageFault_Handler+0x4>

08001748 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001776:	f000 fb33 	bl	8001de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001784:	4802      	ldr	r0, [pc, #8]	@ (8001790 <DMA1_Stream0_IRQHandler+0x10>)
 8001786:	f003 f891 	bl	80048ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	24000258 	.word	0x24000258

08001794 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001798:	4802      	ldr	r0, [pc, #8]	@ (80017a4 <USART3_IRQHandler+0x10>)
 800179a:	f009 ff9f 	bl	800b6dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	2400039c 	.word	0x2400039c

080017a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return 1;
 80017ac:	2301      	movs	r3, #1
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <_kill>:

int _kill(int pid, int sig)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017c2:	f00d fa49 	bl	800ec58 <__errno>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2216      	movs	r2, #22
 80017ca:	601a      	str	r2, [r3, #0]
  return -1;
 80017cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <_exit>:

void _exit (int status)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017e0:	f04f 31ff 	mov.w	r1, #4294967295
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff ffe7 	bl	80017b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017ea:	bf00      	nop
 80017ec:	e7fd      	b.n	80017ea <_exit+0x12>

080017ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b086      	sub	sp, #24
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	60f8      	str	r0, [r7, #12]
 80017f6:	60b9      	str	r1, [r7, #8]
 80017f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
 80017fe:	e00a      	b.n	8001816 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001800:	f3af 8000 	nop.w
 8001804:	4601      	mov	r1, r0
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	1c5a      	adds	r2, r3, #1
 800180a:	60ba      	str	r2, [r7, #8]
 800180c:	b2ca      	uxtb	r2, r1
 800180e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	3301      	adds	r3, #1
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	429a      	cmp	r2, r3
 800181c:	dbf0      	blt.n	8001800 <_read+0x12>
  }

  return len;
 800181e:	687b      	ldr	r3, [r7, #4]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	e009      	b.n	800184e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	1c5a      	adds	r2, r3, #1
 800183e:	60ba      	str	r2, [r7, #8]
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	3301      	adds	r3, #1
 800184c:	617b      	str	r3, [r7, #20]
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	429a      	cmp	r2, r3
 8001854:	dbf1      	blt.n	800183a <_write+0x12>
  }
  return len;
 8001856:	687b      	ldr	r3, [r7, #4]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <_close>:

int _close(int file)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001868:	f04f 33ff 	mov.w	r3, #4294967295
}
 800186c:	4618      	mov	r0, r3
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001888:	605a      	str	r2, [r3, #4]
  return 0;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <_isatty>:

int _isatty(int file)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018a0:	2301      	movs	r3, #1
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b085      	sub	sp, #20
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d0:	4a14      	ldr	r2, [pc, #80]	@ (8001924 <_sbrk+0x5c>)
 80018d2:	4b15      	ldr	r3, [pc, #84]	@ (8001928 <_sbrk+0x60>)
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018dc:	4b13      	ldr	r3, [pc, #76]	@ (800192c <_sbrk+0x64>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d102      	bne.n	80018ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e4:	4b11      	ldr	r3, [pc, #68]	@ (800192c <_sbrk+0x64>)
 80018e6:	4a12      	ldr	r2, [pc, #72]	@ (8001930 <_sbrk+0x68>)
 80018e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ea:	4b10      	ldr	r3, [pc, #64]	@ (800192c <_sbrk+0x64>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d207      	bcs.n	8001908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018f8:	f00d f9ae 	bl	800ec58 <__errno>
 80018fc:	4603      	mov	r3, r0
 80018fe:	220c      	movs	r2, #12
 8001900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
 8001906:	e009      	b.n	800191c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001908:	4b08      	ldr	r3, [pc, #32]	@ (800192c <_sbrk+0x64>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800190e:	4b07      	ldr	r3, [pc, #28]	@ (800192c <_sbrk+0x64>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	4a05      	ldr	r2, [pc, #20]	@ (800192c <_sbrk+0x64>)
 8001918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800191a:	68fb      	ldr	r3, [r7, #12]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	24080000 	.word	0x24080000
 8001928:	00000400 	.word	0x00000400
 800192c:	2400034c 	.word	0x2400034c
 8001930:	24000580 	.word	0x24000580

08001934 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08e      	sub	sp, #56	@ 0x38
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800193a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001948:	f107 031c 	add.w	r3, r7, #28
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001954:	463b      	mov	r3, r7
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	60da      	str	r2, [r3, #12]
 8001960:	611a      	str	r2, [r3, #16]
 8001962:	615a      	str	r2, [r3, #20]
 8001964:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001966:	4b33      	ldr	r3, [pc, #204]	@ (8001a34 <MX_TIM2_Init+0x100>)
 8001968:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800196c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1280;
 800196e:	4b31      	ldr	r3, [pc, #196]	@ (8001a34 <MX_TIM2_Init+0x100>)
 8001970:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8001974:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001976:	4b2f      	ldr	r3, [pc, #188]	@ (8001a34 <MX_TIM2_Init+0x100>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800197c:	4b2d      	ldr	r3, [pc, #180]	@ (8001a34 <MX_TIM2_Init+0x100>)
 800197e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001982:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001984:	4b2b      	ldr	r3, [pc, #172]	@ (8001a34 <MX_TIM2_Init+0x100>)
 8001986:	2200      	movs	r2, #0
 8001988:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800198a:	4b2a      	ldr	r3, [pc, #168]	@ (8001a34 <MX_TIM2_Init+0x100>)
 800198c:	2200      	movs	r2, #0
 800198e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001990:	4828      	ldr	r0, [pc, #160]	@ (8001a34 <MX_TIM2_Init+0x100>)
 8001992:	f008 fc8d 	bl	800a2b0 <HAL_TIM_Base_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 800199c:	f7ff fea0 	bl	80016e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019aa:	4619      	mov	r1, r3
 80019ac:	4821      	ldr	r0, [pc, #132]	@ (8001a34 <MX_TIM2_Init+0x100>)
 80019ae:	f008 ffa5 	bl	800a8fc <HAL_TIM_ConfigClockSource>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80019b8:	f7ff fe92 	bl	80016e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019bc:	481d      	ldr	r0, [pc, #116]	@ (8001a34 <MX_TIM2_Init+0x100>)
 80019be:	f008 fcce 	bl	800a35e <HAL_TIM_PWM_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80019c8:	f7ff fe8a 	bl	80016e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d0:	2300      	movs	r3, #0
 80019d2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019d4:	f107 031c 	add.w	r3, r7, #28
 80019d8:	4619      	mov	r1, r3
 80019da:	4816      	ldr	r0, [pc, #88]	@ (8001a34 <MX_TIM2_Init+0x100>)
 80019dc:	f009 fcc6 	bl	800b36c <HAL_TIMEx_MasterConfigSynchronization>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80019e6:	f7ff fe7b 	bl	80016e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ea:	2360      	movs	r3, #96	@ 0x60
 80019ec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019f2:	2300      	movs	r3, #0
 80019f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019fa:	463b      	mov	r3, r7
 80019fc:	2200      	movs	r2, #0
 80019fe:	4619      	mov	r1, r3
 8001a00:	480c      	ldr	r0, [pc, #48]	@ (8001a34 <MX_TIM2_Init+0x100>)
 8001a02:	f008 fe67 	bl	800a6d4 <HAL_TIM_PWM_ConfigChannel>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001a0c:	f7ff fe68 	bl	80016e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a10:	463b      	mov	r3, r7
 8001a12:	2204      	movs	r2, #4
 8001a14:	4619      	mov	r1, r3
 8001a16:	4807      	ldr	r0, [pc, #28]	@ (8001a34 <MX_TIM2_Init+0x100>)
 8001a18:	f008 fe5c 	bl	800a6d4 <HAL_TIM_PWM_ConfigChannel>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8001a22:	f7ff fe5d 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a26:	4803      	ldr	r0, [pc, #12]	@ (8001a34 <MX_TIM2_Init+0x100>)
 8001a28:	f000 f826 	bl	8001a78 <HAL_TIM_MspPostInit>

}
 8001a2c:	bf00      	nop
 8001a2e:	3738      	adds	r7, #56	@ 0x38
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	24000350 	.word	0x24000350

08001a38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a48:	d10e      	bne.n	8001a68 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a74 <HAL_TIM_Base_MspInit+0x3c>)
 8001a4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a50:	4a08      	ldr	r2, [pc, #32]	@ (8001a74 <HAL_TIM_Base_MspInit+0x3c>)
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a5a:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <HAL_TIM_Base_MspInit+0x3c>)
 8001a5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001a68:	bf00      	nop
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	58024400 	.word	0x58024400

08001a78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	@ 0x28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a98:	d13d      	bne.n	8001b16 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9a:	4b21      	ldr	r3, [pc, #132]	@ (8001b20 <HAL_TIM_MspPostInit+0xa8>)
 8001a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aa0:	4a1f      	ldr	r2, [pc, #124]	@ (8001b20 <HAL_TIM_MspPostInit+0xa8>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001aaa:	4b1d      	ldr	r3, [pc, #116]	@ (8001b20 <HAL_TIM_MspPostInit+0xa8>)
 8001aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab8:	4b19      	ldr	r3, [pc, #100]	@ (8001b20 <HAL_TIM_MspPostInit+0xa8>)
 8001aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001abe:	4a18      	ldr	r2, [pc, #96]	@ (8001b20 <HAL_TIM_MspPostInit+0xa8>)
 8001ac0:	f043 0302 	orr.w	r3, r3, #2
 8001ac4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ac8:	4b15      	ldr	r3, [pc, #84]	@ (8001b20 <HAL_TIM_MspPostInit+0xa8>)
 8001aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ada:	2302      	movs	r3, #2
 8001adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aea:	f107 0314 	add.w	r3, r7, #20
 8001aee:	4619      	mov	r1, r3
 8001af0:	480c      	ldr	r0, [pc, #48]	@ (8001b24 <HAL_TIM_MspPostInit+0xac>)
 8001af2:	f004 f841 	bl	8005b78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001af6:	2308      	movs	r3, #8
 8001af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afa:	2302      	movs	r3, #2
 8001afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b02:	2300      	movs	r3, #0
 8001b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b06:	2301      	movs	r3, #1
 8001b08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4805      	ldr	r0, [pc, #20]	@ (8001b28 <HAL_TIM_MspPostInit+0xb0>)
 8001b12:	f004 f831 	bl	8005b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b16:	bf00      	nop
 8001b18:	3728      	adds	r7, #40	@ 0x28
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	58024400 	.word	0x58024400
 8001b24:	58020000 	.word	0x58020000
 8001b28:	58020400 	.word	0x58020400

08001b2c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b30:	4b22      	ldr	r3, [pc, #136]	@ (8001bbc <MX_USART3_UART_Init+0x90>)
 8001b32:	4a23      	ldr	r2, [pc, #140]	@ (8001bc0 <MX_USART3_UART_Init+0x94>)
 8001b34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001b36:	4b21      	ldr	r3, [pc, #132]	@ (8001bbc <MX_USART3_UART_Init+0x90>)
 8001b38:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001b3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b3e:	4b1f      	ldr	r3, [pc, #124]	@ (8001bbc <MX_USART3_UART_Init+0x90>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b44:	4b1d      	ldr	r3, [pc, #116]	@ (8001bbc <MX_USART3_UART_Init+0x90>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b4a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bbc <MX_USART3_UART_Init+0x90>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b50:	4b1a      	ldr	r3, [pc, #104]	@ (8001bbc <MX_USART3_UART_Init+0x90>)
 8001b52:	220c      	movs	r2, #12
 8001b54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b56:	4b19      	ldr	r3, [pc, #100]	@ (8001bbc <MX_USART3_UART_Init+0x90>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b5c:	4b17      	ldr	r3, [pc, #92]	@ (8001bbc <MX_USART3_UART_Init+0x90>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b62:	4b16      	ldr	r3, [pc, #88]	@ (8001bbc <MX_USART3_UART_Init+0x90>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b68:	4b14      	ldr	r3, [pc, #80]	@ (8001bbc <MX_USART3_UART_Init+0x90>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b6e:	4b13      	ldr	r3, [pc, #76]	@ (8001bbc <MX_USART3_UART_Init+0x90>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b74:	4811      	ldr	r0, [pc, #68]	@ (8001bbc <MX_USART3_UART_Init+0x90>)
 8001b76:	f009 fc87 	bl	800b488 <HAL_UART_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001b80:	f7ff fdae 	bl	80016e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b84:	2100      	movs	r1, #0
 8001b86:	480d      	ldr	r0, [pc, #52]	@ (8001bbc <MX_USART3_UART_Init+0x90>)
 8001b88:	f00b ffe1 	bl	800db4e <HAL_UARTEx_SetTxFifoThreshold>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001b92:	f7ff fda5 	bl	80016e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b96:	2100      	movs	r1, #0
 8001b98:	4808      	ldr	r0, [pc, #32]	@ (8001bbc <MX_USART3_UART_Init+0x90>)
 8001b9a:	f00c f816 	bl	800dbca <HAL_UARTEx_SetRxFifoThreshold>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001ba4:	f7ff fd9c 	bl	80016e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001ba8:	4804      	ldr	r0, [pc, #16]	@ (8001bbc <MX_USART3_UART_Init+0x90>)
 8001baa:	f00b ff97 	bl	800dadc <HAL_UARTEx_DisableFifoMode>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001bb4:	f7ff fd94 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	2400039c 	.word	0x2400039c
 8001bc0:	40004800 	.word	0x40004800

08001bc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b0ba      	sub	sp, #232	@ 0xe8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bdc:	f107 0310 	add.w	r3, r7, #16
 8001be0:	22c0      	movs	r2, #192	@ 0xc0
 8001be2:	2100      	movs	r1, #0
 8001be4:	4618      	mov	r0, r3
 8001be6:	f00c ffe4 	bl	800ebb2 <memset>
  if(uartHandle->Instance==USART3)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a2b      	ldr	r2, [pc, #172]	@ (8001c9c <HAL_UART_MspInit+0xd8>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d14e      	bne.n	8001c92 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001bf4:	f04f 0202 	mov.w	r2, #2
 8001bf8:	f04f 0300 	mov.w	r3, #0
 8001bfc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c00:	2300      	movs	r3, #0
 8001c02:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c06:	f107 0310 	add.w	r3, r7, #16
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f005 fe52 	bl	80078b4 <HAL_RCCEx_PeriphCLKConfig>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001c16:	f7ff fd63 	bl	80016e0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c1a:	4b21      	ldr	r3, [pc, #132]	@ (8001ca0 <HAL_UART_MspInit+0xdc>)
 8001c1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c20:	4a1f      	ldr	r2, [pc, #124]	@ (8001ca0 <HAL_UART_MspInit+0xdc>)
 8001c22:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c26:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca0 <HAL_UART_MspInit+0xdc>)
 8001c2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c38:	4b19      	ldr	r3, [pc, #100]	@ (8001ca0 <HAL_UART_MspInit+0xdc>)
 8001c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c3e:	4a18      	ldr	r2, [pc, #96]	@ (8001ca0 <HAL_UART_MspInit+0xdc>)
 8001c40:	f043 0308 	orr.w	r3, r3, #8
 8001c44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c48:	4b15      	ldr	r3, [pc, #84]	@ (8001ca0 <HAL_UART_MspInit+0xdc>)
 8001c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c56:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c70:	2307      	movs	r3, #7
 8001c72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c76:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4809      	ldr	r0, [pc, #36]	@ (8001ca4 <HAL_UART_MspInit+0xe0>)
 8001c7e:	f003 ff7b 	bl	8005b78 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2100      	movs	r1, #0
 8001c86:	2027      	movs	r0, #39	@ 0x27
 8001c88:	f001 fd1b 	bl	80036c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c8c:	2027      	movs	r0, #39	@ 0x27
 8001c8e:	f001 fd32 	bl	80036f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001c92:	bf00      	nop
 8001c94:	37e8      	adds	r7, #232	@ 0xe8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40004800 	.word	0x40004800
 8001ca0:	58024400 	.word	0x58024400
 8001ca4:	58020c00 	.word	0x58020c00

08001ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ca8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ce0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cac:	f7fe fedc 	bl	8000a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cb0:	480c      	ldr	r0, [pc, #48]	@ (8001ce4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cb2:	490d      	ldr	r1, [pc, #52]	@ (8001ce8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb8:	e002      	b.n	8001cc0 <LoopCopyDataInit>

08001cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cbe:	3304      	adds	r3, #4

08001cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc4:	d3f9      	bcc.n	8001cba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cc8:	4c0a      	ldr	r4, [pc, #40]	@ (8001cf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ccc:	e001      	b.n	8001cd2 <LoopFillZerobss>

08001cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd0:	3204      	adds	r2, #4

08001cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd4:	d3fb      	bcc.n	8001cce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cd6:	f00c ffc5 	bl	800ec64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cda:	f7ff fb85 	bl	80013e8 <main>
  bx  lr
 8001cde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ce0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ce4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ce8:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001cec:	08014538 	.word	0x08014538
  ldr r2, =_sbss
 8001cf0:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8001cf4:	24000580 	.word	0x24000580

08001cf8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cf8:	e7fe      	b.n	8001cf8 <ADC3_IRQHandler>
	...

08001cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d02:	2003      	movs	r0, #3
 8001d04:	f001 fcd2 	bl	80036ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d08:	f005 fbfe 	bl	8007508 <HAL_RCC_GetSysClockFreq>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	4b15      	ldr	r3, [pc, #84]	@ (8001d64 <HAL_Init+0x68>)
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	0a1b      	lsrs	r3, r3, #8
 8001d14:	f003 030f 	and.w	r3, r3, #15
 8001d18:	4913      	ldr	r1, [pc, #76]	@ (8001d68 <HAL_Init+0x6c>)
 8001d1a:	5ccb      	ldrb	r3, [r1, r3]
 8001d1c:	f003 031f 	and.w	r3, r3, #31
 8001d20:	fa22 f303 	lsr.w	r3, r2, r3
 8001d24:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d26:	4b0f      	ldr	r3, [pc, #60]	@ (8001d64 <HAL_Init+0x68>)
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	4a0e      	ldr	r2, [pc, #56]	@ (8001d68 <HAL_Init+0x6c>)
 8001d30:	5cd3      	ldrb	r3, [r2, r3]
 8001d32:	f003 031f 	and.w	r3, r3, #31
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3c:	4a0b      	ldr	r2, [pc, #44]	@ (8001d6c <HAL_Init+0x70>)
 8001d3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d40:	4a0b      	ldr	r2, [pc, #44]	@ (8001d70 <HAL_Init+0x74>)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d46:	2000      	movs	r0, #0
 8001d48:	f000 f814 	bl	8001d74 <HAL_InitTick>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e002      	b.n	8001d5c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d56:	f7ff fcc9 	bl	80016ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	58024400 	.word	0x58024400
 8001d68:	08012800 	.word	0x08012800
 8001d6c:	24000004 	.word	0x24000004
 8001d70:	24000000 	.word	0x24000000

08001d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001d7c:	4b15      	ldr	r3, [pc, #84]	@ (8001dd4 <HAL_InitTick+0x60>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e021      	b.n	8001dcc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d88:	4b13      	ldr	r3, [pc, #76]	@ (8001dd8 <HAL_InitTick+0x64>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4b11      	ldr	r3, [pc, #68]	@ (8001dd4 <HAL_InitTick+0x60>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	4619      	mov	r1, r3
 8001d92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f001 fcb7 	bl	8003712 <HAL_SYSTICK_Config>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e00e      	b.n	8001dcc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b0f      	cmp	r3, #15
 8001db2:	d80a      	bhi.n	8001dca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db4:	2200      	movs	r2, #0
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dbc:	f001 fc81 	bl	80036c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dc0:	4a06      	ldr	r2, [pc, #24]	@ (8001ddc <HAL_InitTick+0x68>)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	e000      	b.n	8001dcc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	2400000c 	.word	0x2400000c
 8001dd8:	24000000 	.word	0x24000000
 8001ddc:	24000008 	.word	0x24000008

08001de0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001de4:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <HAL_IncTick+0x20>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	461a      	mov	r2, r3
 8001dea:	4b06      	ldr	r3, [pc, #24]	@ (8001e04 <HAL_IncTick+0x24>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4413      	add	r3, r2
 8001df0:	4a04      	ldr	r2, [pc, #16]	@ (8001e04 <HAL_IncTick+0x24>)
 8001df2:	6013      	str	r3, [r2, #0]
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	2400000c 	.word	0x2400000c
 8001e04:	24000430 	.word	0x24000430

08001e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e0c:	4b03      	ldr	r3, [pc, #12]	@ (8001e1c <HAL_GetTick+0x14>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	24000430 	.word	0x24000430

08001e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e28:	f7ff ffee 	bl	8001e08 <HAL_GetTick>
 8001e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e38:	d005      	beq.n	8001e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e64 <HAL_Delay+0x44>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4413      	add	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e46:	bf00      	nop
 8001e48:	f7ff ffde 	bl	8001e08 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d8f7      	bhi.n	8001e48 <HAL_Delay+0x28>
  {
  }
}
 8001e58:	bf00      	nop
 8001e5a:	bf00      	nop
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	2400000c 	.word	0x2400000c

08001e68 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001e6c:	4b03      	ldr	r3, [pc, #12]	@ (8001e7c <HAL_GetREVID+0x14>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	0c1b      	lsrs	r3, r3, #16
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	5c001000 	.word	0x5c001000

08001e80 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	431a      	orrs	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	609a      	str	r2, [r3, #8]
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b087      	sub	sp, #28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
 8001ef4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	3360      	adds	r3, #96	@ 0x60
 8001efa:	461a      	mov	r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	430b      	orrs	r3, r1
 8001f16:	431a      	orrs	r2, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	371c      	adds	r7, #28
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f003 031f 	and.w	r3, r3, #31
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	fa01 f303 	lsl.w	r3, r1, r3
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	611a      	str	r2, [r3, #16]
}
 8001f4e:	bf00      	nop
 8001f50:	3714      	adds	r7, #20
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b087      	sub	sp, #28
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	60f8      	str	r0, [r7, #12]
 8001f62:	60b9      	str	r1, [r7, #8]
 8001f64:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	3360      	adds	r3, #96	@ 0x60
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	601a      	str	r2, [r3, #0]
  }
}
 8001f84:	bf00      	nop
 8001f86:	371c      	adds	r7, #28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b087      	sub	sp, #28
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	3330      	adds	r3, #48	@ 0x30
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	0a1b      	lsrs	r3, r3, #8
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	f003 030c 	and.w	r3, r3, #12
 8001fd2:	4413      	add	r3, r2
 8001fd4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	f003 031f 	and.w	r3, r3, #31
 8001fe0:	211f      	movs	r1, #31
 8001fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	401a      	ands	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	0e9b      	lsrs	r3, r3, #26
 8001fee:	f003 011f 	and.w	r1, r3, #31
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	f003 031f 	and.w	r3, r3, #31
 8001ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002002:	bf00      	nop
 8002004:	371c      	adds	r7, #28
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800200e:	b480      	push	{r7}
 8002010:	b087      	sub	sp, #28
 8002012:	af00      	add	r7, sp, #0
 8002014:	60f8      	str	r0, [r7, #12]
 8002016:	60b9      	str	r1, [r7, #8]
 8002018:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	3314      	adds	r3, #20
 800201e:	461a      	mov	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	0e5b      	lsrs	r3, r3, #25
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	4413      	add	r3, r2
 800202c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	0d1b      	lsrs	r3, r3, #20
 8002036:	f003 031f 	and.w	r3, r3, #31
 800203a:	2107      	movs	r1, #7
 800203c:	fa01 f303 	lsl.w	r3, r1, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	401a      	ands	r2, r3
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	0d1b      	lsrs	r3, r3, #20
 8002048:	f003 031f 	and.w	r3, r3, #31
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	fa01 f303 	lsl.w	r3, r1, r3
 8002052:	431a      	orrs	r2, r3
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002058:	bf00      	nop
 800205a:	371c      	adds	r7, #28
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800207c:	43db      	mvns	r3, r3
 800207e:	401a      	ands	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f003 0318 	and.w	r3, r3, #24
 8002086:	4908      	ldr	r1, [pc, #32]	@ (80020a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002088:	40d9      	lsrs	r1, r3
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	400b      	ands	r3, r1
 800208e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002092:	431a      	orrs	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800209a:	bf00      	nop
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	000fffff 	.word	0x000fffff

080020ac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 031f 	and.w	r3, r3, #31
}
 80020bc:	4618      	mov	r0, r3
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80020d8:	4618      	mov	r0, r3
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	4b04      	ldr	r3, [pc, #16]	@ (8002104 <LL_ADC_DisableDeepPowerDown+0x20>)
 80020f2:	4013      	ands	r3, r2
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6093      	str	r3, [r2, #8]
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	5fffffc0 	.word	0x5fffffc0

08002108 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002118:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800211c:	d101      	bne.n	8002122 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	4b05      	ldr	r3, [pc, #20]	@ (8002154 <LL_ADC_EnableInternalRegulator+0x24>)
 800213e:	4013      	ands	r3, r2
 8002140:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	6fffffc0 	.word	0x6fffffc0

08002158 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002168:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800216c:	d101      	bne.n	8002172 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	4b05      	ldr	r3, [pc, #20]	@ (80021a4 <LL_ADC_Enable+0x24>)
 800218e:	4013      	ands	r3, r2
 8002190:	f043 0201 	orr.w	r2, r3, #1
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	7fffffc0 	.word	0x7fffffc0

080021a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <LL_ADC_IsEnabled+0x18>
 80021bc:	2301      	movs	r3, #1
 80021be:	e000      	b.n	80021c2 <LL_ADC_IsEnabled+0x1a>
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
	...

080021d0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	4b05      	ldr	r3, [pc, #20]	@ (80021f4 <LL_ADC_REG_StartConversion+0x24>)
 80021de:	4013      	ands	r3, r2
 80021e0:	f043 0204 	orr.w	r2, r3, #4
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	7fffffc0 	.word	0x7fffffc0

080021f8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	2b04      	cmp	r3, #4
 800220a:	d101      	bne.n	8002210 <LL_ADC_REG_IsConversionOngoing+0x18>
 800220c:	2301      	movs	r3, #1
 800220e:	e000      	b.n	8002212 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b08      	cmp	r3, #8
 8002230:	d101      	bne.n	8002236 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002244:	b590      	push	{r4, r7, lr}
 8002246:	b089      	sub	sp, #36	@ 0x24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800224c:	2300      	movs	r3, #0
 800224e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002250:	2300      	movs	r3, #0
 8002252:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e18f      	b.n	800257e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002268:	2b00      	cmp	r3, #0
 800226a:	d109      	bne.n	8002280 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f7fe fd15 	bl	8000c9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff ff3f 	bl	8002108 <LL_ADC_IsDeepPowerDownEnabled>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d004      	beq.n	800229a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff ff25 	bl	80020e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff ff5a 	bl	8002158 <LL_ADC_IsInternalRegulatorEnabled>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d114      	bne.n	80022d4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff ff3e 	bl	8002130 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022b4:	4b87      	ldr	r3, [pc, #540]	@ (80024d4 <HAL_ADC_Init+0x290>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	099b      	lsrs	r3, r3, #6
 80022ba:	4a87      	ldr	r2, [pc, #540]	@ (80024d8 <HAL_ADC_Init+0x294>)
 80022bc:	fba2 2303 	umull	r2, r3, r2, r3
 80022c0:	099b      	lsrs	r3, r3, #6
 80022c2:	3301      	adds	r3, #1
 80022c4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022c6:	e002      	b.n	80022ce <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1f9      	bne.n	80022c8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff ff3d 	bl	8002158 <LL_ADC_IsInternalRegulatorEnabled>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10d      	bne.n	8002300 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022e8:	f043 0210 	orr.w	r2, r3, #16
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f4:	f043 0201 	orr.w	r2, r3, #1
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff77 	bl	80021f8 <LL_ADC_REG_IsConversionOngoing>
 800230a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002310:	f003 0310 	and.w	r3, r3, #16
 8002314:	2b00      	cmp	r3, #0
 8002316:	f040 8129 	bne.w	800256c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	2b00      	cmp	r3, #0
 800231e:	f040 8125 	bne.w	800256c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002326:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800232a:	f043 0202 	orr.w	r2, r3, #2
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff ff36 	bl	80021a8 <LL_ADC_IsEnabled>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d136      	bne.n	80023b0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a65      	ldr	r2, [pc, #404]	@ (80024dc <HAL_ADC_Init+0x298>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d004      	beq.n	8002356 <HAL_ADC_Init+0x112>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a63      	ldr	r2, [pc, #396]	@ (80024e0 <HAL_ADC_Init+0x29c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d10e      	bne.n	8002374 <HAL_ADC_Init+0x130>
 8002356:	4861      	ldr	r0, [pc, #388]	@ (80024dc <HAL_ADC_Init+0x298>)
 8002358:	f7ff ff26 	bl	80021a8 <LL_ADC_IsEnabled>
 800235c:	4604      	mov	r4, r0
 800235e:	4860      	ldr	r0, [pc, #384]	@ (80024e0 <HAL_ADC_Init+0x29c>)
 8002360:	f7ff ff22 	bl	80021a8 <LL_ADC_IsEnabled>
 8002364:	4603      	mov	r3, r0
 8002366:	4323      	orrs	r3, r4
 8002368:	2b00      	cmp	r3, #0
 800236a:	bf0c      	ite	eq
 800236c:	2301      	moveq	r3, #1
 800236e:	2300      	movne	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	e008      	b.n	8002386 <HAL_ADC_Init+0x142>
 8002374:	485b      	ldr	r0, [pc, #364]	@ (80024e4 <HAL_ADC_Init+0x2a0>)
 8002376:	f7ff ff17 	bl	80021a8 <LL_ADC_IsEnabled>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	bf0c      	ite	eq
 8002380:	2301      	moveq	r3, #1
 8002382:	2300      	movne	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d012      	beq.n	80023b0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a53      	ldr	r2, [pc, #332]	@ (80024dc <HAL_ADC_Init+0x298>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d004      	beq.n	800239e <HAL_ADC_Init+0x15a>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a51      	ldr	r2, [pc, #324]	@ (80024e0 <HAL_ADC_Init+0x29c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d101      	bne.n	80023a2 <HAL_ADC_Init+0x15e>
 800239e:	4a52      	ldr	r2, [pc, #328]	@ (80024e8 <HAL_ADC_Init+0x2a4>)
 80023a0:	e000      	b.n	80023a4 <HAL_ADC_Init+0x160>
 80023a2:	4a52      	ldr	r2, [pc, #328]	@ (80024ec <HAL_ADC_Init+0x2a8>)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	4619      	mov	r1, r3
 80023aa:	4610      	mov	r0, r2
 80023ac:	f7ff fd68 	bl	8001e80 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80023b0:	f7ff fd5a 	bl	8001e68 <HAL_GetREVID>
 80023b4:	4603      	mov	r3, r0
 80023b6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d914      	bls.n	80023e8 <HAL_ADC_Init+0x1a4>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	2b10      	cmp	r3, #16
 80023c4:	d110      	bne.n	80023e8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	7d5b      	ldrb	r3, [r3, #21]
 80023ca:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80023d0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80023d6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	7f1b      	ldrb	r3, [r3, #28]
 80023dc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80023de:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80023e0:	f043 030c 	orr.w	r3, r3, #12
 80023e4:	61bb      	str	r3, [r7, #24]
 80023e6:	e00d      	b.n	8002404 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	7d5b      	ldrb	r3, [r3, #21]
 80023ec:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80023f2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80023f8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	7f1b      	ldrb	r3, [r3, #28]
 80023fe:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002400:	4313      	orrs	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	7f1b      	ldrb	r3, [r3, #28]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d106      	bne.n	800241a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	3b01      	subs	r3, #1
 8002412:	045b      	lsls	r3, r3, #17
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241e:	2b00      	cmp	r3, #0
 8002420:	d009      	beq.n	8002436 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002426:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800242e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68da      	ldr	r2, [r3, #12]
 800243c:	4b2c      	ldr	r3, [pc, #176]	@ (80024f0 <HAL_ADC_Init+0x2ac>)
 800243e:	4013      	ands	r3, r2
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	6812      	ldr	r2, [r2, #0]
 8002444:	69b9      	ldr	r1, [r7, #24]
 8002446:	430b      	orrs	r3, r1
 8002448:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff fed2 	bl	80021f8 <LL_ADC_REG_IsConversionOngoing>
 8002454:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fedf 	bl	800221e <LL_ADC_INJ_IsConversionOngoing>
 8002460:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d15f      	bne.n	8002528 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d15c      	bne.n	8002528 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	7d1b      	ldrb	r3, [r3, #20]
 8002472:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002478:	4313      	orrs	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	4b1c      	ldr	r3, [pc, #112]	@ (80024f4 <HAL_ADC_Init+0x2b0>)
 8002484:	4013      	ands	r3, r2
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	6812      	ldr	r2, [r2, #0]
 800248a:	69b9      	ldr	r1, [r7, #24]
 800248c:	430b      	orrs	r3, r1
 800248e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002496:	2b01      	cmp	r3, #1
 8002498:	d130      	bne.n	80024fc <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	691a      	ldr	r2, [r3, #16]
 80024a6:	4b14      	ldr	r3, [pc, #80]	@ (80024f8 <HAL_ADC_Init+0x2b4>)
 80024a8:	4013      	ands	r3, r2
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80024ae:	3a01      	subs	r2, #1
 80024b0:	0411      	lsls	r1, r2, #16
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80024b6:	4311      	orrs	r1, r2
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80024bc:	4311      	orrs	r1, r2
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80024c2:	430a      	orrs	r2, r1
 80024c4:	431a      	orrs	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0201 	orr.w	r2, r2, #1
 80024ce:	611a      	str	r2, [r3, #16]
 80024d0:	e01c      	b.n	800250c <HAL_ADC_Init+0x2c8>
 80024d2:	bf00      	nop
 80024d4:	24000000 	.word	0x24000000
 80024d8:	053e2d63 	.word	0x053e2d63
 80024dc:	40022000 	.word	0x40022000
 80024e0:	40022100 	.word	0x40022100
 80024e4:	58026000 	.word	0x58026000
 80024e8:	40022300 	.word	0x40022300
 80024ec:	58026300 	.word	0x58026300
 80024f0:	fff0c003 	.word	0xfff0c003
 80024f4:	ffffbffc 	.word	0xffffbffc
 80024f8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	691a      	ldr	r2, [r3, #16]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 0201 	bic.w	r2, r2, #1
 800250a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 fde2 	bl	80030ec <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d10c      	bne.n	800254a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002536:	f023 010f 	bic.w	r1, r3, #15
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	1e5a      	subs	r2, r3, #1
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	631a      	str	r2, [r3, #48]	@ 0x30
 8002548:	e007      	b.n	800255a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 020f 	bic.w	r2, r2, #15
 8002558:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800255e:	f023 0303 	bic.w	r3, r3, #3
 8002562:	f043 0201 	orr.w	r2, r3, #1
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	655a      	str	r2, [r3, #84]	@ 0x54
 800256a:	e007      	b.n	800257c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002570:	f043 0210 	orr.w	r2, r3, #16
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800257c:	7ffb      	ldrb	r3, [r7, #31]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3724      	adds	r7, #36	@ 0x24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd90      	pop	{r4, r7, pc}
 8002586:	bf00      	nop

08002588 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a5c      	ldr	r2, [pc, #368]	@ (8002708 <HAL_ADC_Start+0x180>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d004      	beq.n	80025a4 <HAL_ADC_Start+0x1c>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a5b      	ldr	r2, [pc, #364]	@ (800270c <HAL_ADC_Start+0x184>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d101      	bne.n	80025a8 <HAL_ADC_Start+0x20>
 80025a4:	4b5a      	ldr	r3, [pc, #360]	@ (8002710 <HAL_ADC_Start+0x188>)
 80025a6:	e000      	b.n	80025aa <HAL_ADC_Start+0x22>
 80025a8:	4b5a      	ldr	r3, [pc, #360]	@ (8002714 <HAL_ADC_Start+0x18c>)
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff fd7e 	bl	80020ac <LL_ADC_GetMultimode>
 80025b0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fe1e 	bl	80021f8 <LL_ADC_REG_IsConversionOngoing>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f040 809a 	bne.w	80026f8 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d101      	bne.n	80025d2 <HAL_ADC_Start+0x4a>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e095      	b.n	80026fe <HAL_ADC_Start+0x176>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 fcfc 	bl	8002fd8 <ADC_Enable>
 80025e0:	4603      	mov	r3, r0
 80025e2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80025e4:	7dfb      	ldrb	r3, [r7, #23]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f040 8081 	bne.w	80026ee <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80025f0:	4b49      	ldr	r3, [pc, #292]	@ (8002718 <HAL_ADC_Start+0x190>)
 80025f2:	4013      	ands	r3, r2
 80025f4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a42      	ldr	r2, [pc, #264]	@ (800270c <HAL_ADC_Start+0x184>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d002      	beq.n	800260c <HAL_ADC_Start+0x84>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	e000      	b.n	800260e <HAL_ADC_Start+0x86>
 800260c:	4b3e      	ldr	r3, [pc, #248]	@ (8002708 <HAL_ADC_Start+0x180>)
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6812      	ldr	r2, [r2, #0]
 8002612:	4293      	cmp	r3, r2
 8002614:	d002      	beq.n	800261c <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d105      	bne.n	8002628 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002620:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800262c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002630:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002634:	d106      	bne.n	8002644 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800263a:	f023 0206 	bic.w	r2, r3, #6
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	659a      	str	r2, [r3, #88]	@ 0x58
 8002642:	e002      	b.n	800264a <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	221c      	movs	r2, #28
 8002650:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a2b      	ldr	r2, [pc, #172]	@ (800270c <HAL_ADC_Start+0x184>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d002      	beq.n	800266a <HAL_ADC_Start+0xe2>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	e000      	b.n	800266c <HAL_ADC_Start+0xe4>
 800266a:	4b27      	ldr	r3, [pc, #156]	@ (8002708 <HAL_ADC_Start+0x180>)
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6812      	ldr	r2, [r2, #0]
 8002670:	4293      	cmp	r3, r2
 8002672:	d008      	beq.n	8002686 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d005      	beq.n	8002686 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	2b05      	cmp	r3, #5
 800267e:	d002      	beq.n	8002686 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	2b09      	cmp	r3, #9
 8002684:	d114      	bne.n	80026b0 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d007      	beq.n	80026a4 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002698:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800269c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff fd91 	bl	80021d0 <LL_ADC_REG_StartConversion>
 80026ae:	e025      	b.n	80026fc <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a12      	ldr	r2, [pc, #72]	@ (800270c <HAL_ADC_Start+0x184>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d002      	beq.n	80026cc <HAL_ADC_Start+0x144>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	e000      	b.n	80026ce <HAL_ADC_Start+0x146>
 80026cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002708 <HAL_ADC_Start+0x180>)
 80026ce:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00f      	beq.n	80026fc <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80026e4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	655a      	str	r2, [r3, #84]	@ 0x54
 80026ec:	e006      	b.n	80026fc <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80026f6:	e001      	b.n	80026fc <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80026f8:	2302      	movs	r3, #2
 80026fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80026fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40022000 	.word	0x40022000
 800270c:	40022100 	.word	0x40022100
 8002710:	40022300 	.word	0x40022300
 8002714:	58026300 	.word	0x58026300
 8002718:	fffff0fe 	.word	0xfffff0fe

0800271c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b088      	sub	sp, #32
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a72      	ldr	r2, [pc, #456]	@ (80028f4 <HAL_ADC_PollForConversion+0x1d8>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d004      	beq.n	800273a <HAL_ADC_PollForConversion+0x1e>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a70      	ldr	r2, [pc, #448]	@ (80028f8 <HAL_ADC_PollForConversion+0x1dc>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d101      	bne.n	800273e <HAL_ADC_PollForConversion+0x22>
 800273a:	4b70      	ldr	r3, [pc, #448]	@ (80028fc <HAL_ADC_PollForConversion+0x1e0>)
 800273c:	e000      	b.n	8002740 <HAL_ADC_PollForConversion+0x24>
 800273e:	4b70      	ldr	r3, [pc, #448]	@ (8002900 <HAL_ADC_PollForConversion+0x1e4>)
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff fcb3 	bl	80020ac <LL_ADC_GetMultimode>
 8002746:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	2b08      	cmp	r3, #8
 800274e:	d102      	bne.n	8002756 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002750:	2308      	movs	r3, #8
 8002752:	61fb      	str	r3, [r7, #28]
 8002754:	e037      	b.n	80027c6 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d005      	beq.n	8002768 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	2b05      	cmp	r3, #5
 8002760:	d002      	beq.n	8002768 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	2b09      	cmp	r3, #9
 8002766:	d111      	bne.n	800278c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d007      	beq.n	8002786 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800277a:	f043 0220 	orr.w	r2, r3, #32
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e0b1      	b.n	80028ea <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002786:	2304      	movs	r3, #4
 8002788:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800278a:	e01c      	b.n	80027c6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a58      	ldr	r2, [pc, #352]	@ (80028f4 <HAL_ADC_PollForConversion+0x1d8>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d004      	beq.n	80027a0 <HAL_ADC_PollForConversion+0x84>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a57      	ldr	r2, [pc, #348]	@ (80028f8 <HAL_ADC_PollForConversion+0x1dc>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d101      	bne.n	80027a4 <HAL_ADC_PollForConversion+0x88>
 80027a0:	4b56      	ldr	r3, [pc, #344]	@ (80028fc <HAL_ADC_PollForConversion+0x1e0>)
 80027a2:	e000      	b.n	80027a6 <HAL_ADC_PollForConversion+0x8a>
 80027a4:	4b56      	ldr	r3, [pc, #344]	@ (8002900 <HAL_ADC_PollForConversion+0x1e4>)
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fc8e 	bl	80020c8 <LL_ADC_GetMultiDMATransfer>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d007      	beq.n	80027c2 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b6:	f043 0220 	orr.w	r2, r3, #32
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e093      	b.n	80028ea <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80027c2:	2304      	movs	r3, #4
 80027c4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80027c6:	f7ff fb1f 	bl	8001e08 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80027cc:	e021      	b.n	8002812 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d4:	d01d      	beq.n	8002812 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80027d6:	f7ff fb17 	bl	8001e08 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d302      	bcc.n	80027ec <HAL_ADC_PollForConversion+0xd0>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d112      	bne.n	8002812 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10b      	bne.n	8002812 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027fe:	f043 0204 	orr.w	r2, r3, #4
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e06b      	b.n	80028ea <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	4013      	ands	r3, r2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0d6      	beq.n	80027ce <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002824:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff fbad 	bl	8001f90 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d01c      	beq.n	8002876 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	7d5b      	ldrb	r3, [r3, #21]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d118      	bne.n	8002876 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b08      	cmp	r3, #8
 8002850:	d111      	bne.n	8002876 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002856:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002862:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d105      	bne.n	8002876 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800286e:	f043 0201 	orr.w	r2, r3, #1
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a1f      	ldr	r2, [pc, #124]	@ (80028f8 <HAL_ADC_PollForConversion+0x1dc>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d002      	beq.n	8002886 <HAL_ADC_PollForConversion+0x16a>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	e000      	b.n	8002888 <HAL_ADC_PollForConversion+0x16c>
 8002886:	4b1b      	ldr	r3, [pc, #108]	@ (80028f4 <HAL_ADC_PollForConversion+0x1d8>)
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6812      	ldr	r2, [r2, #0]
 800288c:	4293      	cmp	r3, r2
 800288e:	d008      	beq.n	80028a2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d005      	beq.n	80028a2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	2b05      	cmp	r3, #5
 800289a:	d002      	beq.n	80028a2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	2b09      	cmp	r3, #9
 80028a0:	d104      	bne.n	80028ac <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	61bb      	str	r3, [r7, #24]
 80028aa:	e00c      	b.n	80028c6 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a11      	ldr	r2, [pc, #68]	@ (80028f8 <HAL_ADC_PollForConversion+0x1dc>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d002      	beq.n	80028bc <HAL_ADC_PollForConversion+0x1a0>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	e000      	b.n	80028be <HAL_ADC_PollForConversion+0x1a2>
 80028bc:	4b0d      	ldr	r3, [pc, #52]	@ (80028f4 <HAL_ADC_PollForConversion+0x1d8>)
 80028be:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d104      	bne.n	80028d6 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2208      	movs	r2, #8
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	e008      	b.n	80028e8 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d103      	bne.n	80028e8 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	220c      	movs	r2, #12
 80028e6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3720      	adds	r7, #32
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40022000 	.word	0x40022000
 80028f8:	40022100 	.word	0x40022100
 80028fc:	40022300 	.word	0x40022300
 8002900:	58026300 	.word	0x58026300

08002904 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002912:	4618      	mov	r0, r3
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002920:	b590      	push	{r4, r7, lr}
 8002922:	b0a1      	sub	sp, #132	@ 0x84
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800292a:	2300      	movs	r3, #0
 800292c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002930:	2300      	movs	r3, #0
 8002932:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	4a65      	ldr	r2, [pc, #404]	@ (8002ad0 <HAL_ADC_ConfigChannel+0x1b0>)
 800293a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002942:	2b01      	cmp	r3, #1
 8002944:	d101      	bne.n	800294a <HAL_ADC_ConfigChannel+0x2a>
 8002946:	2302      	movs	r3, #2
 8002948:	e32e      	b.n	8002fa8 <HAL_ADC_ConfigChannel+0x688>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff fc4e 	bl	80021f8 <LL_ADC_REG_IsConversionOngoing>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	f040 8313 	bne.w	8002f8a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	db2c      	blt.n	80029c6 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002974:	2b00      	cmp	r3, #0
 8002976:	d108      	bne.n	800298a <HAL_ADC_ConfigChannel+0x6a>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	0e9b      	lsrs	r3, r3, #26
 800297e:	f003 031f 	and.w	r3, r3, #31
 8002982:	2201      	movs	r2, #1
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	e016      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x98>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002990:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002992:	fa93 f3a3 	rbit	r3, r3
 8002996:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002998:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800299a:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800299c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80029a2:	2320      	movs	r3, #32
 80029a4:	e003      	b.n	80029ae <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80029a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029a8:	fab3 f383 	clz	r3, r3
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	f003 031f 	and.w	r3, r3, #31
 80029b2:	2201      	movs	r2, #1
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	69d1      	ldr	r1, [r2, #28]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6812      	ldr	r2, [r2, #0]
 80029c2:	430b      	orrs	r3, r1
 80029c4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6818      	ldr	r0, [r3, #0]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	6859      	ldr	r1, [r3, #4]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	f7ff faef 	bl	8001fb6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff fc0b 	bl	80021f8 <LL_ADC_REG_IsConversionOngoing>
 80029e2:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff fc18 	bl	800221e <LL_ADC_INJ_IsConversionOngoing>
 80029ee:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f040 80b8 	bne.w	8002b68 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f040 80b4 	bne.w	8002b68 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6818      	ldr	r0, [r3, #0]
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	6819      	ldr	r1, [r3, #0]
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	f7ff fafe 	bl	800200e <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a12:	4b30      	ldr	r3, [pc, #192]	@ (8002ad4 <HAL_ADC_ConfigChannel+0x1b4>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002a1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a1e:	d10b      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x118>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	695a      	ldr	r2, [r3, #20]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	089b      	lsrs	r3, r3, #2
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	e01d      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x154>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f003 0310 	and.w	r3, r3, #16
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10b      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x13e>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	695a      	ldr	r2, [r3, #20]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	089b      	lsrs	r3, r3, #2
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	e00a      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x154>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	695a      	ldr	r2, [r3, #20]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	089b      	lsrs	r3, r3, #2
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d02c      	beq.n	8002ad8 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6818      	ldr	r0, [r3, #0]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	6919      	ldr	r1, [r3, #16]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a8c:	f7ff fa2c 	bl	8001ee8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6818      	ldr	r0, [r3, #0]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	6919      	ldr	r1, [r3, #16]
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	7e5b      	ldrb	r3, [r3, #25]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d102      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x186>
 8002aa0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002aa4:	e000      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x188>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	f7ff fa56 	bl	8001f5a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6818      	ldr	r0, [r3, #0]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	6919      	ldr	r1, [r3, #16]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	7e1b      	ldrb	r3, [r3, #24]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d102      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x1a4>
 8002abe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002ac2:	e000      	b.n	8002ac6 <HAL_ADC_ConfigChannel+0x1a6>
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	f7ff fa2e 	bl	8001f28 <LL_ADC_SetDataRightShift>
 8002acc:	e04c      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x248>
 8002ace:	bf00      	nop
 8002ad0:	47ff0000 	.word	0x47ff0000
 8002ad4:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ade:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	069b      	lsls	r3, r3, #26
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d107      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002afa:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b02:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	069b      	lsls	r3, r3, #26
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d107      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002b1e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b26:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	069b      	lsls	r3, r3, #26
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d107      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002b42:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b4a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	069b      	lsls	r3, r3, #26
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d107      	bne.n	8002b68 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002b66:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff fb1b 	bl	80021a8 <LL_ADC_IsEnabled>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f040 8211 	bne.w	8002f9c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6818      	ldr	r0, [r3, #0]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	6819      	ldr	r1, [r3, #0]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	461a      	mov	r2, r3
 8002b88:	f7ff fa6c 	bl	8002064 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	4aa1      	ldr	r2, [pc, #644]	@ (8002e18 <HAL_ADC_ConfigChannel+0x4f8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	f040 812e 	bne.w	8002df4 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10b      	bne.n	8002bc0 <HAL_ADC_ConfigChannel+0x2a0>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	0e9b      	lsrs	r3, r3, #26
 8002bae:	3301      	adds	r3, #1
 8002bb0:	f003 031f 	and.w	r3, r3, #31
 8002bb4:	2b09      	cmp	r3, #9
 8002bb6:	bf94      	ite	ls
 8002bb8:	2301      	movls	r3, #1
 8002bba:	2300      	movhi	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	e019      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x2d4>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bc8:	fa93 f3a3 	rbit	r3, r3
 8002bcc:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002bce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002bd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8002bd8:	2320      	movs	r3, #32
 8002bda:	e003      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002bdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bde:	fab3 f383 	clz	r3, r3
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	3301      	adds	r3, #1
 8002be6:	f003 031f 	and.w	r3, r3, #31
 8002bea:	2b09      	cmp	r3, #9
 8002bec:	bf94      	ite	ls
 8002bee:	2301      	movls	r3, #1
 8002bf0:	2300      	movhi	r3, #0
 8002bf2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d079      	beq.n	8002cec <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d107      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x2f4>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	0e9b      	lsrs	r3, r3, #26
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	069b      	lsls	r3, r3, #26
 8002c0e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c12:	e015      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x320>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c1c:	fa93 f3a3 	rbit	r3, r3
 8002c20:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002c22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c24:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002c26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002c2c:	2320      	movs	r3, #32
 8002c2e:	e003      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002c30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c32:	fab3 f383 	clz	r3, r3
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	3301      	adds	r3, #1
 8002c3a:	069b      	lsls	r3, r3, #26
 8002c3c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d109      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x340>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	0e9b      	lsrs	r3, r3, #26
 8002c52:	3301      	adds	r3, #1
 8002c54:	f003 031f 	and.w	r3, r3, #31
 8002c58:	2101      	movs	r1, #1
 8002c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5e:	e017      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x370>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c68:	fa93 f3a3 	rbit	r3, r3
 8002c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002c6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c70:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002c72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002c78:	2320      	movs	r3, #32
 8002c7a:	e003      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002c7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c7e:	fab3 f383 	clz	r3, r3
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	3301      	adds	r3, #1
 8002c86:	f003 031f 	and.w	r3, r3, #31
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c90:	ea42 0103 	orr.w	r1, r2, r3
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10a      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x396>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	0e9b      	lsrs	r3, r3, #26
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	f003 021f 	and.w	r2, r3, #31
 8002cac:	4613      	mov	r3, r2
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	4413      	add	r3, r2
 8002cb2:	051b      	lsls	r3, r3, #20
 8002cb4:	e018      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0x3c8>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cbe:	fa93 f3a3 	rbit	r3, r3
 8002cc2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8002cce:	2320      	movs	r3, #32
 8002cd0:	e003      	b.n	8002cda <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8002cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cd4:	fab3 f383 	clz	r3, r3
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	3301      	adds	r3, #1
 8002cdc:	f003 021f 	and.w	r2, r3, #31
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	4413      	add	r3, r2
 8002ce6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ce8:	430b      	orrs	r3, r1
 8002cea:	e07e      	b.n	8002dea <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d107      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x3e8>
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	0e9b      	lsrs	r3, r3, #26
 8002cfe:	3301      	adds	r3, #1
 8002d00:	069b      	lsls	r3, r3, #26
 8002d02:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d06:	e015      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x414>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d10:	fa93 f3a3 	rbit	r3, r3
 8002d14:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002d20:	2320      	movs	r3, #32
 8002d22:	e003      	b.n	8002d2c <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d26:	fab3 f383 	clz	r3, r3
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	069b      	lsls	r3, r3, #26
 8002d30:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d109      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x434>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	0e9b      	lsrs	r3, r3, #26
 8002d46:	3301      	adds	r3, #1
 8002d48:	f003 031f 	and.w	r3, r3, #31
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d52:	e017      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x464>
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	fa93 f3a3 	rbit	r3, r3
 8002d60:	61bb      	str	r3, [r7, #24]
  return result;
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002d6c:	2320      	movs	r3, #32
 8002d6e:	e003      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	fab3 f383 	clz	r3, r3
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	3301      	adds	r3, #1
 8002d7a:	f003 031f 	and.w	r3, r3, #31
 8002d7e:	2101      	movs	r1, #1
 8002d80:	fa01 f303 	lsl.w	r3, r1, r3
 8002d84:	ea42 0103 	orr.w	r1, r2, r3
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10d      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x490>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	0e9b      	lsrs	r3, r3, #26
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	f003 021f 	and.w	r2, r3, #31
 8002da0:	4613      	mov	r3, r2
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	4413      	add	r3, r2
 8002da6:	3b1e      	subs	r3, #30
 8002da8:	051b      	lsls	r3, r3, #20
 8002daa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002dae:	e01b      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x4c8>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	fa93 f3a3 	rbit	r3, r3
 8002dbc:	60fb      	str	r3, [r7, #12]
  return result;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002dc8:	2320      	movs	r3, #32
 8002dca:	e003      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	fab3 f383 	clz	r3, r3
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	f003 021f 	and.w	r2, r3, #31
 8002dda:	4613      	mov	r3, r2
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	4413      	add	r3, r2
 8002de0:	3b1e      	subs	r3, #30
 8002de2:	051b      	lsls	r3, r3, #20
 8002de4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002de8:	430b      	orrs	r3, r1
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	6892      	ldr	r2, [r2, #8]
 8002dee:	4619      	mov	r1, r3
 8002df0:	f7ff f90d 	bl	800200e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f280 80cf 	bge.w	8002f9c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a06      	ldr	r2, [pc, #24]	@ (8002e1c <HAL_ADC_ConfigChannel+0x4fc>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d004      	beq.n	8002e12 <HAL_ADC_ConfigChannel+0x4f2>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a04      	ldr	r2, [pc, #16]	@ (8002e20 <HAL_ADC_ConfigChannel+0x500>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d10a      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x508>
 8002e12:	4b04      	ldr	r3, [pc, #16]	@ (8002e24 <HAL_ADC_ConfigChannel+0x504>)
 8002e14:	e009      	b.n	8002e2a <HAL_ADC_ConfigChannel+0x50a>
 8002e16:	bf00      	nop
 8002e18:	47ff0000 	.word	0x47ff0000
 8002e1c:	40022000 	.word	0x40022000
 8002e20:	40022100 	.word	0x40022100
 8002e24:	40022300 	.word	0x40022300
 8002e28:	4b61      	ldr	r3, [pc, #388]	@ (8002fb0 <HAL_ADC_ConfigChannel+0x690>)
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff f84e 	bl	8001ecc <LL_ADC_GetCommonPathInternalCh>
 8002e30:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a5f      	ldr	r2, [pc, #380]	@ (8002fb4 <HAL_ADC_ConfigChannel+0x694>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d004      	beq.n	8002e46 <HAL_ADC_ConfigChannel+0x526>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a5d      	ldr	r2, [pc, #372]	@ (8002fb8 <HAL_ADC_ConfigChannel+0x698>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d10e      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x544>
 8002e46:	485b      	ldr	r0, [pc, #364]	@ (8002fb4 <HAL_ADC_ConfigChannel+0x694>)
 8002e48:	f7ff f9ae 	bl	80021a8 <LL_ADC_IsEnabled>
 8002e4c:	4604      	mov	r4, r0
 8002e4e:	485a      	ldr	r0, [pc, #360]	@ (8002fb8 <HAL_ADC_ConfigChannel+0x698>)
 8002e50:	f7ff f9aa 	bl	80021a8 <LL_ADC_IsEnabled>
 8002e54:	4603      	mov	r3, r0
 8002e56:	4323      	orrs	r3, r4
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	bf0c      	ite	eq
 8002e5c:	2301      	moveq	r3, #1
 8002e5e:	2300      	movne	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	e008      	b.n	8002e76 <HAL_ADC_ConfigChannel+0x556>
 8002e64:	4855      	ldr	r0, [pc, #340]	@ (8002fbc <HAL_ADC_ConfigChannel+0x69c>)
 8002e66:	f7ff f99f 	bl	80021a8 <LL_ADC_IsEnabled>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	bf0c      	ite	eq
 8002e70:	2301      	moveq	r3, #1
 8002e72:	2300      	movne	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d07d      	beq.n	8002f76 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a50      	ldr	r2, [pc, #320]	@ (8002fc0 <HAL_ADC_ConfigChannel+0x6a0>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d130      	bne.n	8002ee6 <HAL_ADC_ConfigChannel+0x5c6>
 8002e84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d12b      	bne.n	8002ee6 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a4a      	ldr	r2, [pc, #296]	@ (8002fbc <HAL_ADC_ConfigChannel+0x69c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	f040 8081 	bne.w	8002f9c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a45      	ldr	r2, [pc, #276]	@ (8002fb4 <HAL_ADC_ConfigChannel+0x694>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d004      	beq.n	8002eae <HAL_ADC_ConfigChannel+0x58e>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a43      	ldr	r2, [pc, #268]	@ (8002fb8 <HAL_ADC_ConfigChannel+0x698>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d101      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x592>
 8002eae:	4a45      	ldr	r2, [pc, #276]	@ (8002fc4 <HAL_ADC_ConfigChannel+0x6a4>)
 8002eb0:	e000      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x594>
 8002eb2:	4a3f      	ldr	r2, [pc, #252]	@ (8002fb0 <HAL_ADC_ConfigChannel+0x690>)
 8002eb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002eb6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4610      	mov	r0, r2
 8002ebe:	f7fe fff2 	bl	8001ea6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ec2:	4b41      	ldr	r3, [pc, #260]	@ (8002fc8 <HAL_ADC_ConfigChannel+0x6a8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	099b      	lsrs	r3, r3, #6
 8002ec8:	4a40      	ldr	r2, [pc, #256]	@ (8002fcc <HAL_ADC_ConfigChannel+0x6ac>)
 8002eca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ece:	099b      	lsrs	r3, r3, #6
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002ed6:	e002      	b.n	8002ede <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1f9      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ee4:	e05a      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a39      	ldr	r2, [pc, #228]	@ (8002fd0 <HAL_ADC_ConfigChannel+0x6b0>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d11e      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x60e>
 8002ef0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ef2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d119      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a2f      	ldr	r2, [pc, #188]	@ (8002fbc <HAL_ADC_ConfigChannel+0x69c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d14b      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a2a      	ldr	r2, [pc, #168]	@ (8002fb4 <HAL_ADC_ConfigChannel+0x694>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d004      	beq.n	8002f18 <HAL_ADC_ConfigChannel+0x5f8>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a29      	ldr	r2, [pc, #164]	@ (8002fb8 <HAL_ADC_ConfigChannel+0x698>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d101      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0x5fc>
 8002f18:	4a2a      	ldr	r2, [pc, #168]	@ (8002fc4 <HAL_ADC_ConfigChannel+0x6a4>)
 8002f1a:	e000      	b.n	8002f1e <HAL_ADC_ConfigChannel+0x5fe>
 8002f1c:	4a24      	ldr	r2, [pc, #144]	@ (8002fb0 <HAL_ADC_ConfigChannel+0x690>)
 8002f1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f20:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f24:	4619      	mov	r1, r3
 8002f26:	4610      	mov	r0, r2
 8002f28:	f7fe ffbd 	bl	8001ea6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f2c:	e036      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a28      	ldr	r2, [pc, #160]	@ (8002fd4 <HAL_ADC_ConfigChannel+0x6b4>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d131      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x67c>
 8002f38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d12c      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a1d      	ldr	r2, [pc, #116]	@ (8002fbc <HAL_ADC_ConfigChannel+0x69c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d127      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a18      	ldr	r2, [pc, #96]	@ (8002fb4 <HAL_ADC_ConfigChannel+0x694>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d004      	beq.n	8002f60 <HAL_ADC_ConfigChannel+0x640>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a17      	ldr	r2, [pc, #92]	@ (8002fb8 <HAL_ADC_ConfigChannel+0x698>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d101      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x644>
 8002f60:	4a18      	ldr	r2, [pc, #96]	@ (8002fc4 <HAL_ADC_ConfigChannel+0x6a4>)
 8002f62:	e000      	b.n	8002f66 <HAL_ADC_ConfigChannel+0x646>
 8002f64:	4a12      	ldr	r2, [pc, #72]	@ (8002fb0 <HAL_ADC_ConfigChannel+0x690>)
 8002f66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f68:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4610      	mov	r0, r2
 8002f70:	f7fe ff99 	bl	8001ea6 <LL_ADC_SetCommonPathInternalCh>
 8002f74:	e012      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f7a:	f043 0220 	orr.w	r2, r3, #32
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002f88:	e008      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f8e:	f043 0220 	orr.w	r2, r3, #32
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002fa4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3784      	adds	r7, #132	@ 0x84
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd90      	pop	{r4, r7, pc}
 8002fb0:	58026300 	.word	0x58026300
 8002fb4:	40022000 	.word	0x40022000
 8002fb8:	40022100 	.word	0x40022100
 8002fbc:	58026000 	.word	0x58026000
 8002fc0:	cb840000 	.word	0xcb840000
 8002fc4:	40022300 	.word	0x40022300
 8002fc8:	24000000 	.word	0x24000000
 8002fcc:	053e2d63 	.word	0x053e2d63
 8002fd0:	c7520000 	.word	0xc7520000
 8002fd4:	cfb80000 	.word	0xcfb80000

08002fd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff f8df 	bl	80021a8 <LL_ADC_IsEnabled>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d16e      	bne.n	80030ce <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	4b38      	ldr	r3, [pc, #224]	@ (80030d8 <ADC_Enable+0x100>)
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00d      	beq.n	800301a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003002:	f043 0210 	orr.w	r2, r3, #16
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800300e:	f043 0201 	orr.w	r2, r3, #1
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e05a      	b.n	80030d0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff f8ae 	bl	8002180 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003024:	f7fe fef0 	bl	8001e08 <HAL_GetTick>
 8003028:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a2b      	ldr	r2, [pc, #172]	@ (80030dc <ADC_Enable+0x104>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d004      	beq.n	800303e <ADC_Enable+0x66>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a29      	ldr	r2, [pc, #164]	@ (80030e0 <ADC_Enable+0x108>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d101      	bne.n	8003042 <ADC_Enable+0x6a>
 800303e:	4b29      	ldr	r3, [pc, #164]	@ (80030e4 <ADC_Enable+0x10c>)
 8003040:	e000      	b.n	8003044 <ADC_Enable+0x6c>
 8003042:	4b29      	ldr	r3, [pc, #164]	@ (80030e8 <ADC_Enable+0x110>)
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff f831 	bl	80020ac <LL_ADC_GetMultimode>
 800304a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a23      	ldr	r2, [pc, #140]	@ (80030e0 <ADC_Enable+0x108>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d002      	beq.n	800305c <ADC_Enable+0x84>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	e000      	b.n	800305e <ADC_Enable+0x86>
 800305c:	4b1f      	ldr	r3, [pc, #124]	@ (80030dc <ADC_Enable+0x104>)
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6812      	ldr	r2, [r2, #0]
 8003062:	4293      	cmp	r3, r2
 8003064:	d02c      	beq.n	80030c0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d130      	bne.n	80030ce <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800306c:	e028      	b.n	80030c0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff f898 	bl	80021a8 <LL_ADC_IsEnabled>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d104      	bne.n	8003088 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff f87c 	bl	8002180 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003088:	f7fe febe 	bl	8001e08 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d914      	bls.n	80030c0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d00d      	beq.n	80030c0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a8:	f043 0210 	orr.w	r2, r3, #16
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b4:	f043 0201 	orr.w	r2, r3, #1
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e007      	b.n	80030d0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d1cf      	bne.n	800306e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	8000003f 	.word	0x8000003f
 80030dc:	40022000 	.word	0x40022000
 80030e0:	40022100 	.word	0x40022100
 80030e4:	40022300 	.word	0x40022300
 80030e8:	58026300 	.word	0x58026300

080030ec <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a7a      	ldr	r2, [pc, #488]	@ (80032e4 <ADC_ConfigureBoostMode+0x1f8>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d004      	beq.n	8003108 <ADC_ConfigureBoostMode+0x1c>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a79      	ldr	r2, [pc, #484]	@ (80032e8 <ADC_ConfigureBoostMode+0x1fc>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d109      	bne.n	800311c <ADC_ConfigureBoostMode+0x30>
 8003108:	4b78      	ldr	r3, [pc, #480]	@ (80032ec <ADC_ConfigureBoostMode+0x200>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003110:	2b00      	cmp	r3, #0
 8003112:	bf14      	ite	ne
 8003114:	2301      	movne	r3, #1
 8003116:	2300      	moveq	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	e008      	b.n	800312e <ADC_ConfigureBoostMode+0x42>
 800311c:	4b74      	ldr	r3, [pc, #464]	@ (80032f0 <ADC_ConfigureBoostMode+0x204>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003124:	2b00      	cmp	r3, #0
 8003126:	bf14      	ite	ne
 8003128:	2301      	movne	r3, #1
 800312a:	2300      	moveq	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d01c      	beq.n	800316c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003132:	f004 fb63 	bl	80077fc <HAL_RCC_GetHCLKFreq>
 8003136:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003140:	d010      	beq.n	8003164 <ADC_ConfigureBoostMode+0x78>
 8003142:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003146:	d873      	bhi.n	8003230 <ADC_ConfigureBoostMode+0x144>
 8003148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800314c:	d002      	beq.n	8003154 <ADC_ConfigureBoostMode+0x68>
 800314e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003152:	d16d      	bne.n	8003230 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	0c1b      	lsrs	r3, r3, #16
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003160:	60fb      	str	r3, [r7, #12]
        break;
 8003162:	e068      	b.n	8003236 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	089b      	lsrs	r3, r3, #2
 8003168:	60fb      	str	r3, [r7, #12]
        break;
 800316a:	e064      	b.n	8003236 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800316c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003170:	f04f 0100 	mov.w	r1, #0
 8003174:	f005 fda8 	bl	8008cc8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003178:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003182:	d051      	beq.n	8003228 <ADC_ConfigureBoostMode+0x13c>
 8003184:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003188:	d854      	bhi.n	8003234 <ADC_ConfigureBoostMode+0x148>
 800318a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800318e:	d047      	beq.n	8003220 <ADC_ConfigureBoostMode+0x134>
 8003190:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003194:	d84e      	bhi.n	8003234 <ADC_ConfigureBoostMode+0x148>
 8003196:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800319a:	d03d      	beq.n	8003218 <ADC_ConfigureBoostMode+0x12c>
 800319c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80031a0:	d848      	bhi.n	8003234 <ADC_ConfigureBoostMode+0x148>
 80031a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80031a6:	d033      	beq.n	8003210 <ADC_ConfigureBoostMode+0x124>
 80031a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80031ac:	d842      	bhi.n	8003234 <ADC_ConfigureBoostMode+0x148>
 80031ae:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80031b2:	d029      	beq.n	8003208 <ADC_ConfigureBoostMode+0x11c>
 80031b4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80031b8:	d83c      	bhi.n	8003234 <ADC_ConfigureBoostMode+0x148>
 80031ba:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80031be:	d01a      	beq.n	80031f6 <ADC_ConfigureBoostMode+0x10a>
 80031c0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80031c4:	d836      	bhi.n	8003234 <ADC_ConfigureBoostMode+0x148>
 80031c6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80031ca:	d014      	beq.n	80031f6 <ADC_ConfigureBoostMode+0x10a>
 80031cc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80031d0:	d830      	bhi.n	8003234 <ADC_ConfigureBoostMode+0x148>
 80031d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031d6:	d00e      	beq.n	80031f6 <ADC_ConfigureBoostMode+0x10a>
 80031d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031dc:	d82a      	bhi.n	8003234 <ADC_ConfigureBoostMode+0x148>
 80031de:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80031e2:	d008      	beq.n	80031f6 <ADC_ConfigureBoostMode+0x10a>
 80031e4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80031e8:	d824      	bhi.n	8003234 <ADC_ConfigureBoostMode+0x148>
 80031ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80031ee:	d002      	beq.n	80031f6 <ADC_ConfigureBoostMode+0x10a>
 80031f0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80031f4:	d11e      	bne.n	8003234 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	0c9b      	lsrs	r3, r3, #18
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	fbb2 f3f3 	udiv	r3, r2, r3
 8003204:	60fb      	str	r3, [r7, #12]
        break;
 8003206:	e016      	b.n	8003236 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	091b      	lsrs	r3, r3, #4
 800320c:	60fb      	str	r3, [r7, #12]
        break;
 800320e:	e012      	b.n	8003236 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	095b      	lsrs	r3, r3, #5
 8003214:	60fb      	str	r3, [r7, #12]
        break;
 8003216:	e00e      	b.n	8003236 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	099b      	lsrs	r3, r3, #6
 800321c:	60fb      	str	r3, [r7, #12]
        break;
 800321e:	e00a      	b.n	8003236 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	09db      	lsrs	r3, r3, #7
 8003224:	60fb      	str	r3, [r7, #12]
        break;
 8003226:	e006      	b.n	8003236 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	0a1b      	lsrs	r3, r3, #8
 800322c:	60fb      	str	r3, [r7, #12]
        break;
 800322e:	e002      	b.n	8003236 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003230:	bf00      	nop
 8003232:	e000      	b.n	8003236 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003234:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003236:	f7fe fe17 	bl	8001e68 <HAL_GetREVID>
 800323a:	4603      	mov	r3, r0
 800323c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003240:	4293      	cmp	r3, r2
 8003242:	d815      	bhi.n	8003270 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4a2b      	ldr	r2, [pc, #172]	@ (80032f4 <ADC_ConfigureBoostMode+0x208>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d908      	bls.n	800325e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800325a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800325c:	e03e      	b.n	80032dc <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800326c:	609a      	str	r2, [r3, #8]
}
 800326e:	e035      	b.n	80032dc <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	085b      	lsrs	r3, r3, #1
 8003274:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	4a1f      	ldr	r2, [pc, #124]	@ (80032f8 <ADC_ConfigureBoostMode+0x20c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d808      	bhi.n	8003290 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800328c:	609a      	str	r2, [r3, #8]
}
 800328e:	e025      	b.n	80032dc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4a1a      	ldr	r2, [pc, #104]	@ (80032fc <ADC_ConfigureBoostMode+0x210>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d80a      	bhi.n	80032ae <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032aa:	609a      	str	r2, [r3, #8]
}
 80032ac:	e016      	b.n	80032dc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	4a13      	ldr	r2, [pc, #76]	@ (8003300 <ADC_ConfigureBoostMode+0x214>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d80a      	bhi.n	80032cc <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032c8:	609a      	str	r2, [r3, #8]
}
 80032ca:	e007      	b.n	80032dc <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689a      	ldr	r2, [r3, #8]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80032da:	609a      	str	r2, [r3, #8]
}
 80032dc:	bf00      	nop
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40022000 	.word	0x40022000
 80032e8:	40022100 	.word	0x40022100
 80032ec:	40022300 	.word	0x40022300
 80032f0:	58026300 	.word	0x58026300
 80032f4:	01312d00 	.word	0x01312d00
 80032f8:	005f5e10 	.word	0x005f5e10
 80032fc:	00bebc20 	.word	0x00bebc20
 8003300:	017d7840 	.word	0x017d7840

08003304 <LL_ADC_IsEnabled>:
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b01      	cmp	r3, #1
 8003316:	d101      	bne.n	800331c <LL_ADC_IsEnabled+0x18>
 8003318:	2301      	movs	r3, #1
 800331a:	e000      	b.n	800331e <LL_ADC_IsEnabled+0x1a>
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <LL_ADC_REG_IsConversionOngoing>:
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	2b04      	cmp	r3, #4
 800333c:	d101      	bne.n	8003342 <LL_ADC_REG_IsConversionOngoing+0x18>
 800333e:	2301      	movs	r3, #1
 8003340:	e000      	b.n	8003344 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003350:	b590      	push	{r4, r7, lr}
 8003352:	b09f      	sub	sp, #124	@ 0x7c
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800335a:	2300      	movs	r3, #0
 800335c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003366:	2b01      	cmp	r3, #1
 8003368:	d101      	bne.n	800336e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800336a:	2302      	movs	r3, #2
 800336c:	e0be      	b.n	80034ec <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003376:	2300      	movs	r3, #0
 8003378:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800337a:	2300      	movs	r3, #0
 800337c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a5c      	ldr	r2, [pc, #368]	@ (80034f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d102      	bne.n	800338e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003388:	4b5b      	ldr	r3, [pc, #364]	@ (80034f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800338a:	60bb      	str	r3, [r7, #8]
 800338c:	e001      	b.n	8003392 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800338e:	2300      	movs	r3, #0
 8003390:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10b      	bne.n	80033b0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800339c:	f043 0220 	orr.w	r2, r3, #32
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e09d      	b.n	80034ec <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff ffb9 	bl	800332a <LL_ADC_REG_IsConversionOngoing>
 80033b8:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff ffb3 	bl	800332a <LL_ADC_REG_IsConversionOngoing>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d17f      	bne.n	80034ca <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80033ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d17c      	bne.n	80034ca <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a47      	ldr	r2, [pc, #284]	@ (80034f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d004      	beq.n	80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a46      	ldr	r2, [pc, #280]	@ (80034f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d101      	bne.n	80033e8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80033e4:	4b45      	ldr	r3, [pc, #276]	@ (80034fc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80033e6:	e000      	b.n	80033ea <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80033e8:	4b45      	ldr	r3, [pc, #276]	@ (8003500 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80033ea:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d039      	beq.n	8003468 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80033f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	431a      	orrs	r2, r3
 8003402:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003404:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a3a      	ldr	r2, [pc, #232]	@ (80034f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d004      	beq.n	800341a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a38      	ldr	r2, [pc, #224]	@ (80034f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d10e      	bne.n	8003438 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800341a:	4836      	ldr	r0, [pc, #216]	@ (80034f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800341c:	f7ff ff72 	bl	8003304 <LL_ADC_IsEnabled>
 8003420:	4604      	mov	r4, r0
 8003422:	4835      	ldr	r0, [pc, #212]	@ (80034f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003424:	f7ff ff6e 	bl	8003304 <LL_ADC_IsEnabled>
 8003428:	4603      	mov	r3, r0
 800342a:	4323      	orrs	r3, r4
 800342c:	2b00      	cmp	r3, #0
 800342e:	bf0c      	ite	eq
 8003430:	2301      	moveq	r3, #1
 8003432:	2300      	movne	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	e008      	b.n	800344a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003438:	4832      	ldr	r0, [pc, #200]	@ (8003504 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800343a:	f7ff ff63 	bl	8003304 <LL_ADC_IsEnabled>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	bf0c      	ite	eq
 8003444:	2301      	moveq	r3, #1
 8003446:	2300      	movne	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d047      	beq.n	80034de <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800344e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	4b2d      	ldr	r3, [pc, #180]	@ (8003508 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003454:	4013      	ands	r3, r2
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	6811      	ldr	r1, [r2, #0]
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	6892      	ldr	r2, [r2, #8]
 800345e:	430a      	orrs	r2, r1
 8003460:	431a      	orrs	r2, r3
 8003462:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003464:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003466:	e03a      	b.n	80034de <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003468:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003470:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003472:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a1e      	ldr	r2, [pc, #120]	@ (80034f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d004      	beq.n	8003488 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a1d      	ldr	r2, [pc, #116]	@ (80034f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d10e      	bne.n	80034a6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003488:	481a      	ldr	r0, [pc, #104]	@ (80034f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800348a:	f7ff ff3b 	bl	8003304 <LL_ADC_IsEnabled>
 800348e:	4604      	mov	r4, r0
 8003490:	4819      	ldr	r0, [pc, #100]	@ (80034f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003492:	f7ff ff37 	bl	8003304 <LL_ADC_IsEnabled>
 8003496:	4603      	mov	r3, r0
 8003498:	4323      	orrs	r3, r4
 800349a:	2b00      	cmp	r3, #0
 800349c:	bf0c      	ite	eq
 800349e:	2301      	moveq	r3, #1
 80034a0:	2300      	movne	r3, #0
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	e008      	b.n	80034b8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80034a6:	4817      	ldr	r0, [pc, #92]	@ (8003504 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80034a8:	f7ff ff2c 	bl	8003304 <LL_ADC_IsEnabled>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	bf0c      	ite	eq
 80034b2:	2301      	moveq	r3, #1
 80034b4:	2300      	movne	r3, #0
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d010      	beq.n	80034de <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80034bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	4b11      	ldr	r3, [pc, #68]	@ (8003508 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80034c6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034c8:	e009      	b.n	80034de <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ce:	f043 0220 	orr.w	r2, r3, #32
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80034dc:	e000      	b.n	80034e0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034de:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80034e8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	377c      	adds	r7, #124	@ 0x7c
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd90      	pop	{r4, r7, pc}
 80034f4:	40022000 	.word	0x40022000
 80034f8:	40022100 	.word	0x40022100
 80034fc:	40022300 	.word	0x40022300
 8003500:	58026300 	.word	0x58026300
 8003504:	58026000 	.word	0x58026000
 8003508:	fffff0e0 	.word	0xfffff0e0

0800350c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800351c:	4b0b      	ldr	r3, [pc, #44]	@ (800354c <__NVIC_SetPriorityGrouping+0x40>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003522:	68ba      	ldr	r2, [r7, #8]
 8003524:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003528:	4013      	ands	r3, r2
 800352a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003534:	4b06      	ldr	r3, [pc, #24]	@ (8003550 <__NVIC_SetPriorityGrouping+0x44>)
 8003536:	4313      	orrs	r3, r2
 8003538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800353a:	4a04      	ldr	r2, [pc, #16]	@ (800354c <__NVIC_SetPriorityGrouping+0x40>)
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	60d3      	str	r3, [r2, #12]
}
 8003540:	bf00      	nop
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	e000ed00 	.word	0xe000ed00
 8003550:	05fa0000 	.word	0x05fa0000

08003554 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003558:	4b04      	ldr	r3, [pc, #16]	@ (800356c <__NVIC_GetPriorityGrouping+0x18>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	0a1b      	lsrs	r3, r3, #8
 800355e:	f003 0307 	and.w	r3, r3, #7
}
 8003562:	4618      	mov	r0, r3
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	e000ed00 	.word	0xe000ed00

08003570 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	4603      	mov	r3, r0
 8003578:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800357a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800357e:	2b00      	cmp	r3, #0
 8003580:	db0b      	blt.n	800359a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003582:	88fb      	ldrh	r3, [r7, #6]
 8003584:	f003 021f 	and.w	r2, r3, #31
 8003588:	4907      	ldr	r1, [pc, #28]	@ (80035a8 <__NVIC_EnableIRQ+0x38>)
 800358a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800358e:	095b      	lsrs	r3, r3, #5
 8003590:	2001      	movs	r0, #1
 8003592:	fa00 f202 	lsl.w	r2, r0, r2
 8003596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	e000e100 	.word	0xe000e100

080035ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	4603      	mov	r3, r0
 80035b4:	6039      	str	r1, [r7, #0]
 80035b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80035b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	db0a      	blt.n	80035d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	490c      	ldr	r1, [pc, #48]	@ (80035f8 <__NVIC_SetPriority+0x4c>)
 80035c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035ca:	0112      	lsls	r2, r2, #4
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	440b      	add	r3, r1
 80035d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035d4:	e00a      	b.n	80035ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	4908      	ldr	r1, [pc, #32]	@ (80035fc <__NVIC_SetPriority+0x50>)
 80035dc:	88fb      	ldrh	r3, [r7, #6]
 80035de:	f003 030f 	and.w	r3, r3, #15
 80035e2:	3b04      	subs	r3, #4
 80035e4:	0112      	lsls	r2, r2, #4
 80035e6:	b2d2      	uxtb	r2, r2
 80035e8:	440b      	add	r3, r1
 80035ea:	761a      	strb	r2, [r3, #24]
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	e000e100 	.word	0xe000e100
 80035fc:	e000ed00 	.word	0xe000ed00

08003600 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003600:	b480      	push	{r7}
 8003602:	b089      	sub	sp, #36	@ 0x24
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	f1c3 0307 	rsb	r3, r3, #7
 800361a:	2b04      	cmp	r3, #4
 800361c:	bf28      	it	cs
 800361e:	2304      	movcs	r3, #4
 8003620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	3304      	adds	r3, #4
 8003626:	2b06      	cmp	r3, #6
 8003628:	d902      	bls.n	8003630 <NVIC_EncodePriority+0x30>
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	3b03      	subs	r3, #3
 800362e:	e000      	b.n	8003632 <NVIC_EncodePriority+0x32>
 8003630:	2300      	movs	r3, #0
 8003632:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003634:	f04f 32ff 	mov.w	r2, #4294967295
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	43da      	mvns	r2, r3
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	401a      	ands	r2, r3
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003648:	f04f 31ff 	mov.w	r1, #4294967295
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	fa01 f303 	lsl.w	r3, r1, r3
 8003652:	43d9      	mvns	r1, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003658:	4313      	orrs	r3, r2
         );
}
 800365a:	4618      	mov	r0, r3
 800365c:	3724      	adds	r7, #36	@ 0x24
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
	...

08003668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3b01      	subs	r3, #1
 8003674:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003678:	d301      	bcc.n	800367e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800367a:	2301      	movs	r3, #1
 800367c:	e00f      	b.n	800369e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800367e:	4a0a      	ldr	r2, [pc, #40]	@ (80036a8 <SysTick_Config+0x40>)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3b01      	subs	r3, #1
 8003684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003686:	210f      	movs	r1, #15
 8003688:	f04f 30ff 	mov.w	r0, #4294967295
 800368c:	f7ff ff8e 	bl	80035ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003690:	4b05      	ldr	r3, [pc, #20]	@ (80036a8 <SysTick_Config+0x40>)
 8003692:	2200      	movs	r2, #0
 8003694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003696:	4b04      	ldr	r3, [pc, #16]	@ (80036a8 <SysTick_Config+0x40>)
 8003698:	2207      	movs	r2, #7
 800369a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	e000e010 	.word	0xe000e010

080036ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7ff ff29 	bl	800350c <__NVIC_SetPriorityGrouping>
}
 80036ba:	bf00      	nop
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b086      	sub	sp, #24
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	4603      	mov	r3, r0
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	607a      	str	r2, [r7, #4]
 80036ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036d0:	f7ff ff40 	bl	8003554 <__NVIC_GetPriorityGrouping>
 80036d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	68b9      	ldr	r1, [r7, #8]
 80036da:	6978      	ldr	r0, [r7, #20]
 80036dc:	f7ff ff90 	bl	8003600 <NVIC_EncodePriority>
 80036e0:	4602      	mov	r2, r0
 80036e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80036e6:	4611      	mov	r1, r2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff ff5f 	bl	80035ac <__NVIC_SetPriority>
}
 80036ee:	bf00      	nop
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b082      	sub	sp, #8
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	4603      	mov	r3, r0
 80036fe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003700:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff ff33 	bl	8003570 <__NVIC_EnableIRQ>
}
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b082      	sub	sp, #8
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7ff ffa4 	bl	8003668 <SysTick_Config>
 8003720:	4603      	mov	r3, r0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003734:	f7fe fb68 	bl	8001e08 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e316      	b.n	8003d72 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a66      	ldr	r2, [pc, #408]	@ (80038e4 <HAL_DMA_Init+0x1b8>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d04a      	beq.n	80037e4 <HAL_DMA_Init+0xb8>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a65      	ldr	r2, [pc, #404]	@ (80038e8 <HAL_DMA_Init+0x1bc>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d045      	beq.n	80037e4 <HAL_DMA_Init+0xb8>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a63      	ldr	r2, [pc, #396]	@ (80038ec <HAL_DMA_Init+0x1c0>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d040      	beq.n	80037e4 <HAL_DMA_Init+0xb8>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a62      	ldr	r2, [pc, #392]	@ (80038f0 <HAL_DMA_Init+0x1c4>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d03b      	beq.n	80037e4 <HAL_DMA_Init+0xb8>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a60      	ldr	r2, [pc, #384]	@ (80038f4 <HAL_DMA_Init+0x1c8>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d036      	beq.n	80037e4 <HAL_DMA_Init+0xb8>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a5f      	ldr	r2, [pc, #380]	@ (80038f8 <HAL_DMA_Init+0x1cc>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d031      	beq.n	80037e4 <HAL_DMA_Init+0xb8>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a5d      	ldr	r2, [pc, #372]	@ (80038fc <HAL_DMA_Init+0x1d0>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d02c      	beq.n	80037e4 <HAL_DMA_Init+0xb8>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a5c      	ldr	r2, [pc, #368]	@ (8003900 <HAL_DMA_Init+0x1d4>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d027      	beq.n	80037e4 <HAL_DMA_Init+0xb8>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a5a      	ldr	r2, [pc, #360]	@ (8003904 <HAL_DMA_Init+0x1d8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d022      	beq.n	80037e4 <HAL_DMA_Init+0xb8>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a59      	ldr	r2, [pc, #356]	@ (8003908 <HAL_DMA_Init+0x1dc>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d01d      	beq.n	80037e4 <HAL_DMA_Init+0xb8>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a57      	ldr	r2, [pc, #348]	@ (800390c <HAL_DMA_Init+0x1e0>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d018      	beq.n	80037e4 <HAL_DMA_Init+0xb8>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a56      	ldr	r2, [pc, #344]	@ (8003910 <HAL_DMA_Init+0x1e4>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d013      	beq.n	80037e4 <HAL_DMA_Init+0xb8>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a54      	ldr	r2, [pc, #336]	@ (8003914 <HAL_DMA_Init+0x1e8>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d00e      	beq.n	80037e4 <HAL_DMA_Init+0xb8>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a53      	ldr	r2, [pc, #332]	@ (8003918 <HAL_DMA_Init+0x1ec>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d009      	beq.n	80037e4 <HAL_DMA_Init+0xb8>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a51      	ldr	r2, [pc, #324]	@ (800391c <HAL_DMA_Init+0x1f0>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d004      	beq.n	80037e4 <HAL_DMA_Init+0xb8>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a50      	ldr	r2, [pc, #320]	@ (8003920 <HAL_DMA_Init+0x1f4>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d101      	bne.n	80037e8 <HAL_DMA_Init+0xbc>
 80037e4:	2301      	movs	r3, #1
 80037e6:	e000      	b.n	80037ea <HAL_DMA_Init+0xbe>
 80037e8:	2300      	movs	r3, #0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 813b 	beq.w	8003a66 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2202      	movs	r2, #2
 80037f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a37      	ldr	r2, [pc, #220]	@ (80038e4 <HAL_DMA_Init+0x1b8>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d04a      	beq.n	80038a0 <HAL_DMA_Init+0x174>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a36      	ldr	r2, [pc, #216]	@ (80038e8 <HAL_DMA_Init+0x1bc>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d045      	beq.n	80038a0 <HAL_DMA_Init+0x174>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a34      	ldr	r2, [pc, #208]	@ (80038ec <HAL_DMA_Init+0x1c0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d040      	beq.n	80038a0 <HAL_DMA_Init+0x174>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a33      	ldr	r2, [pc, #204]	@ (80038f0 <HAL_DMA_Init+0x1c4>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d03b      	beq.n	80038a0 <HAL_DMA_Init+0x174>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a31      	ldr	r2, [pc, #196]	@ (80038f4 <HAL_DMA_Init+0x1c8>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d036      	beq.n	80038a0 <HAL_DMA_Init+0x174>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a30      	ldr	r2, [pc, #192]	@ (80038f8 <HAL_DMA_Init+0x1cc>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d031      	beq.n	80038a0 <HAL_DMA_Init+0x174>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a2e      	ldr	r2, [pc, #184]	@ (80038fc <HAL_DMA_Init+0x1d0>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d02c      	beq.n	80038a0 <HAL_DMA_Init+0x174>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a2d      	ldr	r2, [pc, #180]	@ (8003900 <HAL_DMA_Init+0x1d4>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d027      	beq.n	80038a0 <HAL_DMA_Init+0x174>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a2b      	ldr	r2, [pc, #172]	@ (8003904 <HAL_DMA_Init+0x1d8>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d022      	beq.n	80038a0 <HAL_DMA_Init+0x174>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a2a      	ldr	r2, [pc, #168]	@ (8003908 <HAL_DMA_Init+0x1dc>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d01d      	beq.n	80038a0 <HAL_DMA_Init+0x174>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a28      	ldr	r2, [pc, #160]	@ (800390c <HAL_DMA_Init+0x1e0>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d018      	beq.n	80038a0 <HAL_DMA_Init+0x174>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a27      	ldr	r2, [pc, #156]	@ (8003910 <HAL_DMA_Init+0x1e4>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d013      	beq.n	80038a0 <HAL_DMA_Init+0x174>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a25      	ldr	r2, [pc, #148]	@ (8003914 <HAL_DMA_Init+0x1e8>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d00e      	beq.n	80038a0 <HAL_DMA_Init+0x174>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a24      	ldr	r2, [pc, #144]	@ (8003918 <HAL_DMA_Init+0x1ec>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d009      	beq.n	80038a0 <HAL_DMA_Init+0x174>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a22      	ldr	r2, [pc, #136]	@ (800391c <HAL_DMA_Init+0x1f0>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d004      	beq.n	80038a0 <HAL_DMA_Init+0x174>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a21      	ldr	r2, [pc, #132]	@ (8003920 <HAL_DMA_Init+0x1f4>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d108      	bne.n	80038b2 <HAL_DMA_Init+0x186>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0201 	bic.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	e007      	b.n	80038c2 <HAL_DMA_Init+0x196>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0201 	bic.w	r2, r2, #1
 80038c0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80038c2:	e02f      	b.n	8003924 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038c4:	f7fe faa0 	bl	8001e08 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b05      	cmp	r3, #5
 80038d0:	d928      	bls.n	8003924 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2220      	movs	r2, #32
 80038d6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2203      	movs	r2, #3
 80038dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e246      	b.n	8003d72 <HAL_DMA_Init+0x646>
 80038e4:	40020010 	.word	0x40020010
 80038e8:	40020028 	.word	0x40020028
 80038ec:	40020040 	.word	0x40020040
 80038f0:	40020058 	.word	0x40020058
 80038f4:	40020070 	.word	0x40020070
 80038f8:	40020088 	.word	0x40020088
 80038fc:	400200a0 	.word	0x400200a0
 8003900:	400200b8 	.word	0x400200b8
 8003904:	40020410 	.word	0x40020410
 8003908:	40020428 	.word	0x40020428
 800390c:	40020440 	.word	0x40020440
 8003910:	40020458 	.word	0x40020458
 8003914:	40020470 	.word	0x40020470
 8003918:	40020488 	.word	0x40020488
 800391c:	400204a0 	.word	0x400204a0
 8003920:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1c8      	bne.n	80038c4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	4b83      	ldr	r3, [pc, #524]	@ (8003b4c <HAL_DMA_Init+0x420>)
 800393e:	4013      	ands	r3, r2
 8003940:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800394a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003956:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003962:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	4313      	orrs	r3, r2
 800396e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003974:	2b04      	cmp	r3, #4
 8003976:	d107      	bne.n	8003988 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003980:	4313      	orrs	r3, r2
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	4313      	orrs	r3, r2
 8003986:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003988:	4b71      	ldr	r3, [pc, #452]	@ (8003b50 <HAL_DMA_Init+0x424>)
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	4b71      	ldr	r3, [pc, #452]	@ (8003b54 <HAL_DMA_Init+0x428>)
 800398e:	4013      	ands	r3, r2
 8003990:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003994:	d328      	bcc.n	80039e8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b28      	cmp	r3, #40	@ 0x28
 800399c:	d903      	bls.n	80039a6 <HAL_DMA_Init+0x27a>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80039a4:	d917      	bls.n	80039d6 <HAL_DMA_Init+0x2aa>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80039ac:	d903      	bls.n	80039b6 <HAL_DMA_Init+0x28a>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b42      	cmp	r3, #66	@ 0x42
 80039b4:	d90f      	bls.n	80039d6 <HAL_DMA_Init+0x2aa>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b46      	cmp	r3, #70	@ 0x46
 80039bc:	d903      	bls.n	80039c6 <HAL_DMA_Init+0x29a>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b48      	cmp	r3, #72	@ 0x48
 80039c4:	d907      	bls.n	80039d6 <HAL_DMA_Init+0x2aa>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b4e      	cmp	r3, #78	@ 0x4e
 80039cc:	d905      	bls.n	80039da <HAL_DMA_Init+0x2ae>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2b52      	cmp	r3, #82	@ 0x52
 80039d4:	d801      	bhi.n	80039da <HAL_DMA_Init+0x2ae>
 80039d6:	2301      	movs	r3, #1
 80039d8:	e000      	b.n	80039dc <HAL_DMA_Init+0x2b0>
 80039da:	2300      	movs	r3, #0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d003      	beq.n	80039e8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039e6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f023 0307 	bic.w	r3, r3, #7
 80039fe:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	d117      	bne.n	8003a42 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00e      	beq.n	8003a42 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f001 ff1d 	bl	8005864 <DMA_CheckFifoParam>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d008      	beq.n	8003a42 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2240      	movs	r2, #64	@ 0x40
 8003a34:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e197      	b.n	8003d72 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f001 fe58 	bl	8005700 <DMA_CalcBaseAndBitshift>
 8003a50:	4603      	mov	r3, r0
 8003a52:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a58:	f003 031f 	and.w	r3, r3, #31
 8003a5c:	223f      	movs	r2, #63	@ 0x3f
 8003a5e:	409a      	lsls	r2, r3
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	609a      	str	r2, [r3, #8]
 8003a64:	e0cd      	b.n	8003c02 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a3b      	ldr	r2, [pc, #236]	@ (8003b58 <HAL_DMA_Init+0x42c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d022      	beq.n	8003ab6 <HAL_DMA_Init+0x38a>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a39      	ldr	r2, [pc, #228]	@ (8003b5c <HAL_DMA_Init+0x430>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d01d      	beq.n	8003ab6 <HAL_DMA_Init+0x38a>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a38      	ldr	r2, [pc, #224]	@ (8003b60 <HAL_DMA_Init+0x434>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d018      	beq.n	8003ab6 <HAL_DMA_Init+0x38a>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a36      	ldr	r2, [pc, #216]	@ (8003b64 <HAL_DMA_Init+0x438>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d013      	beq.n	8003ab6 <HAL_DMA_Init+0x38a>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a35      	ldr	r2, [pc, #212]	@ (8003b68 <HAL_DMA_Init+0x43c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d00e      	beq.n	8003ab6 <HAL_DMA_Init+0x38a>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a33      	ldr	r2, [pc, #204]	@ (8003b6c <HAL_DMA_Init+0x440>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d009      	beq.n	8003ab6 <HAL_DMA_Init+0x38a>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a32      	ldr	r2, [pc, #200]	@ (8003b70 <HAL_DMA_Init+0x444>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d004      	beq.n	8003ab6 <HAL_DMA_Init+0x38a>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a30      	ldr	r2, [pc, #192]	@ (8003b74 <HAL_DMA_Init+0x448>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d101      	bne.n	8003aba <HAL_DMA_Init+0x38e>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <HAL_DMA_Init+0x390>
 8003aba:	2300      	movs	r3, #0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 8097 	beq.w	8003bf0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a24      	ldr	r2, [pc, #144]	@ (8003b58 <HAL_DMA_Init+0x42c>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d021      	beq.n	8003b10 <HAL_DMA_Init+0x3e4>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a22      	ldr	r2, [pc, #136]	@ (8003b5c <HAL_DMA_Init+0x430>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d01c      	beq.n	8003b10 <HAL_DMA_Init+0x3e4>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a21      	ldr	r2, [pc, #132]	@ (8003b60 <HAL_DMA_Init+0x434>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d017      	beq.n	8003b10 <HAL_DMA_Init+0x3e4>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a1f      	ldr	r2, [pc, #124]	@ (8003b64 <HAL_DMA_Init+0x438>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d012      	beq.n	8003b10 <HAL_DMA_Init+0x3e4>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a1e      	ldr	r2, [pc, #120]	@ (8003b68 <HAL_DMA_Init+0x43c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d00d      	beq.n	8003b10 <HAL_DMA_Init+0x3e4>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a1c      	ldr	r2, [pc, #112]	@ (8003b6c <HAL_DMA_Init+0x440>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d008      	beq.n	8003b10 <HAL_DMA_Init+0x3e4>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a1b      	ldr	r2, [pc, #108]	@ (8003b70 <HAL_DMA_Init+0x444>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d003      	beq.n	8003b10 <HAL_DMA_Init+0x3e4>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a19      	ldr	r2, [pc, #100]	@ (8003b74 <HAL_DMA_Init+0x448>)
 8003b0e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2202      	movs	r2, #2
 8003b14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	4b13      	ldr	r3, [pc, #76]	@ (8003b78 <HAL_DMA_Init+0x44c>)
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	2b40      	cmp	r3, #64	@ 0x40
 8003b36:	d021      	beq.n	8003b7c <HAL_DMA_Init+0x450>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	2b80      	cmp	r3, #128	@ 0x80
 8003b3e:	d102      	bne.n	8003b46 <HAL_DMA_Init+0x41a>
 8003b40:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003b44:	e01b      	b.n	8003b7e <HAL_DMA_Init+0x452>
 8003b46:	2300      	movs	r3, #0
 8003b48:	e019      	b.n	8003b7e <HAL_DMA_Init+0x452>
 8003b4a:	bf00      	nop
 8003b4c:	fe10803f 	.word	0xfe10803f
 8003b50:	5c001000 	.word	0x5c001000
 8003b54:	ffff0000 	.word	0xffff0000
 8003b58:	58025408 	.word	0x58025408
 8003b5c:	5802541c 	.word	0x5802541c
 8003b60:	58025430 	.word	0x58025430
 8003b64:	58025444 	.word	0x58025444
 8003b68:	58025458 	.word	0x58025458
 8003b6c:	5802546c 	.word	0x5802546c
 8003b70:	58025480 	.word	0x58025480
 8003b74:	58025494 	.word	0x58025494
 8003b78:	fffe000f 	.word	0xfffe000f
 8003b7c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	68d2      	ldr	r2, [r2, #12]
 8003b82:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003b8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003b94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003b9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003ba4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003bac:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	4b6e      	ldr	r3, [pc, #440]	@ (8003d7c <HAL_DMA_Init+0x650>)
 8003bc4:	4413      	add	r3, r2
 8003bc6:	4a6e      	ldr	r2, [pc, #440]	@ (8003d80 <HAL_DMA_Init+0x654>)
 8003bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bcc:	091b      	lsrs	r3, r3, #4
 8003bce:	009a      	lsls	r2, r3, #2
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f001 fd93 	bl	8005700 <DMA_CalcBaseAndBitshift>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003be2:	f003 031f 	and.w	r3, r3, #31
 8003be6:	2201      	movs	r2, #1
 8003be8:	409a      	lsls	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	605a      	str	r2, [r3, #4]
 8003bee:	e008      	b.n	8003c02 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2240      	movs	r2, #64	@ 0x40
 8003bf4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2203      	movs	r2, #3
 8003bfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e0b7      	b.n	8003d72 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a5f      	ldr	r2, [pc, #380]	@ (8003d84 <HAL_DMA_Init+0x658>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d072      	beq.n	8003cf2 <HAL_DMA_Init+0x5c6>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a5d      	ldr	r2, [pc, #372]	@ (8003d88 <HAL_DMA_Init+0x65c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d06d      	beq.n	8003cf2 <HAL_DMA_Init+0x5c6>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a5c      	ldr	r2, [pc, #368]	@ (8003d8c <HAL_DMA_Init+0x660>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d068      	beq.n	8003cf2 <HAL_DMA_Init+0x5c6>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a5a      	ldr	r2, [pc, #360]	@ (8003d90 <HAL_DMA_Init+0x664>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d063      	beq.n	8003cf2 <HAL_DMA_Init+0x5c6>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a59      	ldr	r2, [pc, #356]	@ (8003d94 <HAL_DMA_Init+0x668>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d05e      	beq.n	8003cf2 <HAL_DMA_Init+0x5c6>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a57      	ldr	r2, [pc, #348]	@ (8003d98 <HAL_DMA_Init+0x66c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d059      	beq.n	8003cf2 <HAL_DMA_Init+0x5c6>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a56      	ldr	r2, [pc, #344]	@ (8003d9c <HAL_DMA_Init+0x670>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d054      	beq.n	8003cf2 <HAL_DMA_Init+0x5c6>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a54      	ldr	r2, [pc, #336]	@ (8003da0 <HAL_DMA_Init+0x674>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d04f      	beq.n	8003cf2 <HAL_DMA_Init+0x5c6>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a53      	ldr	r2, [pc, #332]	@ (8003da4 <HAL_DMA_Init+0x678>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d04a      	beq.n	8003cf2 <HAL_DMA_Init+0x5c6>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a51      	ldr	r2, [pc, #324]	@ (8003da8 <HAL_DMA_Init+0x67c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d045      	beq.n	8003cf2 <HAL_DMA_Init+0x5c6>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a50      	ldr	r2, [pc, #320]	@ (8003dac <HAL_DMA_Init+0x680>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d040      	beq.n	8003cf2 <HAL_DMA_Init+0x5c6>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a4e      	ldr	r2, [pc, #312]	@ (8003db0 <HAL_DMA_Init+0x684>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d03b      	beq.n	8003cf2 <HAL_DMA_Init+0x5c6>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a4d      	ldr	r2, [pc, #308]	@ (8003db4 <HAL_DMA_Init+0x688>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d036      	beq.n	8003cf2 <HAL_DMA_Init+0x5c6>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a4b      	ldr	r2, [pc, #300]	@ (8003db8 <HAL_DMA_Init+0x68c>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d031      	beq.n	8003cf2 <HAL_DMA_Init+0x5c6>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a4a      	ldr	r2, [pc, #296]	@ (8003dbc <HAL_DMA_Init+0x690>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d02c      	beq.n	8003cf2 <HAL_DMA_Init+0x5c6>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a48      	ldr	r2, [pc, #288]	@ (8003dc0 <HAL_DMA_Init+0x694>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d027      	beq.n	8003cf2 <HAL_DMA_Init+0x5c6>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a47      	ldr	r2, [pc, #284]	@ (8003dc4 <HAL_DMA_Init+0x698>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d022      	beq.n	8003cf2 <HAL_DMA_Init+0x5c6>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a45      	ldr	r2, [pc, #276]	@ (8003dc8 <HAL_DMA_Init+0x69c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d01d      	beq.n	8003cf2 <HAL_DMA_Init+0x5c6>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a44      	ldr	r2, [pc, #272]	@ (8003dcc <HAL_DMA_Init+0x6a0>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d018      	beq.n	8003cf2 <HAL_DMA_Init+0x5c6>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a42      	ldr	r2, [pc, #264]	@ (8003dd0 <HAL_DMA_Init+0x6a4>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d013      	beq.n	8003cf2 <HAL_DMA_Init+0x5c6>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a41      	ldr	r2, [pc, #260]	@ (8003dd4 <HAL_DMA_Init+0x6a8>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d00e      	beq.n	8003cf2 <HAL_DMA_Init+0x5c6>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a3f      	ldr	r2, [pc, #252]	@ (8003dd8 <HAL_DMA_Init+0x6ac>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d009      	beq.n	8003cf2 <HAL_DMA_Init+0x5c6>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a3e      	ldr	r2, [pc, #248]	@ (8003ddc <HAL_DMA_Init+0x6b0>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d004      	beq.n	8003cf2 <HAL_DMA_Init+0x5c6>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a3c      	ldr	r2, [pc, #240]	@ (8003de0 <HAL_DMA_Init+0x6b4>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d101      	bne.n	8003cf6 <HAL_DMA_Init+0x5ca>
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e000      	b.n	8003cf8 <HAL_DMA_Init+0x5cc>
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d032      	beq.n	8003d62 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f001 fe2d 	bl	800595c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2b80      	cmp	r3, #128	@ 0x80
 8003d08:	d102      	bne.n	8003d10 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d18:	b2d2      	uxtb	r2, r2
 8003d1a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003d24:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d010      	beq.n	8003d50 <HAL_DMA_Init+0x624>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	2b08      	cmp	r3, #8
 8003d34:	d80c      	bhi.n	8003d50 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f001 feaa 	bl	8005a90 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003d4c:	605a      	str	r2, [r3, #4]
 8003d4e:	e008      	b.n	8003d62 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3718      	adds	r7, #24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	a7fdabf8 	.word	0xa7fdabf8
 8003d80:	cccccccd 	.word	0xcccccccd
 8003d84:	40020010 	.word	0x40020010
 8003d88:	40020028 	.word	0x40020028
 8003d8c:	40020040 	.word	0x40020040
 8003d90:	40020058 	.word	0x40020058
 8003d94:	40020070 	.word	0x40020070
 8003d98:	40020088 	.word	0x40020088
 8003d9c:	400200a0 	.word	0x400200a0
 8003da0:	400200b8 	.word	0x400200b8
 8003da4:	40020410 	.word	0x40020410
 8003da8:	40020428 	.word	0x40020428
 8003dac:	40020440 	.word	0x40020440
 8003db0:	40020458 	.word	0x40020458
 8003db4:	40020470 	.word	0x40020470
 8003db8:	40020488 	.word	0x40020488
 8003dbc:	400204a0 	.word	0x400204a0
 8003dc0:	400204b8 	.word	0x400204b8
 8003dc4:	58025408 	.word	0x58025408
 8003dc8:	5802541c 	.word	0x5802541c
 8003dcc:	58025430 	.word	0x58025430
 8003dd0:	58025444 	.word	0x58025444
 8003dd4:	58025458 	.word	0x58025458
 8003dd8:	5802546c 	.word	0x5802546c
 8003ddc:	58025480 	.word	0x58025480
 8003de0:	58025494 	.word	0x58025494

08003de4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003dec:	f7fe f80c 	bl	8001e08 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e2dc      	b.n	80043b6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d008      	beq.n	8003e1a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2280      	movs	r2, #128	@ 0x80
 8003e0c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e2cd      	b.n	80043b6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a76      	ldr	r2, [pc, #472]	@ (8003ff8 <HAL_DMA_Abort+0x214>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d04a      	beq.n	8003eba <HAL_DMA_Abort+0xd6>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a74      	ldr	r2, [pc, #464]	@ (8003ffc <HAL_DMA_Abort+0x218>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d045      	beq.n	8003eba <HAL_DMA_Abort+0xd6>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a73      	ldr	r2, [pc, #460]	@ (8004000 <HAL_DMA_Abort+0x21c>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d040      	beq.n	8003eba <HAL_DMA_Abort+0xd6>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a71      	ldr	r2, [pc, #452]	@ (8004004 <HAL_DMA_Abort+0x220>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d03b      	beq.n	8003eba <HAL_DMA_Abort+0xd6>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a70      	ldr	r2, [pc, #448]	@ (8004008 <HAL_DMA_Abort+0x224>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d036      	beq.n	8003eba <HAL_DMA_Abort+0xd6>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a6e      	ldr	r2, [pc, #440]	@ (800400c <HAL_DMA_Abort+0x228>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d031      	beq.n	8003eba <HAL_DMA_Abort+0xd6>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a6d      	ldr	r2, [pc, #436]	@ (8004010 <HAL_DMA_Abort+0x22c>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d02c      	beq.n	8003eba <HAL_DMA_Abort+0xd6>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a6b      	ldr	r2, [pc, #428]	@ (8004014 <HAL_DMA_Abort+0x230>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d027      	beq.n	8003eba <HAL_DMA_Abort+0xd6>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a6a      	ldr	r2, [pc, #424]	@ (8004018 <HAL_DMA_Abort+0x234>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d022      	beq.n	8003eba <HAL_DMA_Abort+0xd6>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a68      	ldr	r2, [pc, #416]	@ (800401c <HAL_DMA_Abort+0x238>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d01d      	beq.n	8003eba <HAL_DMA_Abort+0xd6>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a67      	ldr	r2, [pc, #412]	@ (8004020 <HAL_DMA_Abort+0x23c>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d018      	beq.n	8003eba <HAL_DMA_Abort+0xd6>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a65      	ldr	r2, [pc, #404]	@ (8004024 <HAL_DMA_Abort+0x240>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d013      	beq.n	8003eba <HAL_DMA_Abort+0xd6>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a64      	ldr	r2, [pc, #400]	@ (8004028 <HAL_DMA_Abort+0x244>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d00e      	beq.n	8003eba <HAL_DMA_Abort+0xd6>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a62      	ldr	r2, [pc, #392]	@ (800402c <HAL_DMA_Abort+0x248>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d009      	beq.n	8003eba <HAL_DMA_Abort+0xd6>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a61      	ldr	r2, [pc, #388]	@ (8004030 <HAL_DMA_Abort+0x24c>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d004      	beq.n	8003eba <HAL_DMA_Abort+0xd6>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a5f      	ldr	r2, [pc, #380]	@ (8004034 <HAL_DMA_Abort+0x250>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d101      	bne.n	8003ebe <HAL_DMA_Abort+0xda>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <HAL_DMA_Abort+0xdc>
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d013      	beq.n	8003eec <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 021e 	bic.w	r2, r2, #30
 8003ed2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	695a      	ldr	r2, [r3, #20]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ee2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	617b      	str	r3, [r7, #20]
 8003eea:	e00a      	b.n	8003f02 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 020e 	bic.w	r2, r2, #14
 8003efa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a3c      	ldr	r2, [pc, #240]	@ (8003ff8 <HAL_DMA_Abort+0x214>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d072      	beq.n	8003ff2 <HAL_DMA_Abort+0x20e>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a3a      	ldr	r2, [pc, #232]	@ (8003ffc <HAL_DMA_Abort+0x218>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d06d      	beq.n	8003ff2 <HAL_DMA_Abort+0x20e>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a39      	ldr	r2, [pc, #228]	@ (8004000 <HAL_DMA_Abort+0x21c>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d068      	beq.n	8003ff2 <HAL_DMA_Abort+0x20e>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a37      	ldr	r2, [pc, #220]	@ (8004004 <HAL_DMA_Abort+0x220>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d063      	beq.n	8003ff2 <HAL_DMA_Abort+0x20e>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a36      	ldr	r2, [pc, #216]	@ (8004008 <HAL_DMA_Abort+0x224>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d05e      	beq.n	8003ff2 <HAL_DMA_Abort+0x20e>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a34      	ldr	r2, [pc, #208]	@ (800400c <HAL_DMA_Abort+0x228>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d059      	beq.n	8003ff2 <HAL_DMA_Abort+0x20e>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a33      	ldr	r2, [pc, #204]	@ (8004010 <HAL_DMA_Abort+0x22c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d054      	beq.n	8003ff2 <HAL_DMA_Abort+0x20e>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a31      	ldr	r2, [pc, #196]	@ (8004014 <HAL_DMA_Abort+0x230>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d04f      	beq.n	8003ff2 <HAL_DMA_Abort+0x20e>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a30      	ldr	r2, [pc, #192]	@ (8004018 <HAL_DMA_Abort+0x234>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d04a      	beq.n	8003ff2 <HAL_DMA_Abort+0x20e>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a2e      	ldr	r2, [pc, #184]	@ (800401c <HAL_DMA_Abort+0x238>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d045      	beq.n	8003ff2 <HAL_DMA_Abort+0x20e>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a2d      	ldr	r2, [pc, #180]	@ (8004020 <HAL_DMA_Abort+0x23c>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d040      	beq.n	8003ff2 <HAL_DMA_Abort+0x20e>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a2b      	ldr	r2, [pc, #172]	@ (8004024 <HAL_DMA_Abort+0x240>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d03b      	beq.n	8003ff2 <HAL_DMA_Abort+0x20e>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a2a      	ldr	r2, [pc, #168]	@ (8004028 <HAL_DMA_Abort+0x244>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d036      	beq.n	8003ff2 <HAL_DMA_Abort+0x20e>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a28      	ldr	r2, [pc, #160]	@ (800402c <HAL_DMA_Abort+0x248>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d031      	beq.n	8003ff2 <HAL_DMA_Abort+0x20e>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a27      	ldr	r2, [pc, #156]	@ (8004030 <HAL_DMA_Abort+0x24c>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d02c      	beq.n	8003ff2 <HAL_DMA_Abort+0x20e>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a25      	ldr	r2, [pc, #148]	@ (8004034 <HAL_DMA_Abort+0x250>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d027      	beq.n	8003ff2 <HAL_DMA_Abort+0x20e>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a24      	ldr	r2, [pc, #144]	@ (8004038 <HAL_DMA_Abort+0x254>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d022      	beq.n	8003ff2 <HAL_DMA_Abort+0x20e>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a22      	ldr	r2, [pc, #136]	@ (800403c <HAL_DMA_Abort+0x258>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d01d      	beq.n	8003ff2 <HAL_DMA_Abort+0x20e>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a21      	ldr	r2, [pc, #132]	@ (8004040 <HAL_DMA_Abort+0x25c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d018      	beq.n	8003ff2 <HAL_DMA_Abort+0x20e>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a1f      	ldr	r2, [pc, #124]	@ (8004044 <HAL_DMA_Abort+0x260>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d013      	beq.n	8003ff2 <HAL_DMA_Abort+0x20e>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a1e      	ldr	r2, [pc, #120]	@ (8004048 <HAL_DMA_Abort+0x264>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d00e      	beq.n	8003ff2 <HAL_DMA_Abort+0x20e>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a1c      	ldr	r2, [pc, #112]	@ (800404c <HAL_DMA_Abort+0x268>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d009      	beq.n	8003ff2 <HAL_DMA_Abort+0x20e>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a1b      	ldr	r2, [pc, #108]	@ (8004050 <HAL_DMA_Abort+0x26c>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d004      	beq.n	8003ff2 <HAL_DMA_Abort+0x20e>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a19      	ldr	r2, [pc, #100]	@ (8004054 <HAL_DMA_Abort+0x270>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d132      	bne.n	8004058 <HAL_DMA_Abort+0x274>
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e031      	b.n	800405a <HAL_DMA_Abort+0x276>
 8003ff6:	bf00      	nop
 8003ff8:	40020010 	.word	0x40020010
 8003ffc:	40020028 	.word	0x40020028
 8004000:	40020040 	.word	0x40020040
 8004004:	40020058 	.word	0x40020058
 8004008:	40020070 	.word	0x40020070
 800400c:	40020088 	.word	0x40020088
 8004010:	400200a0 	.word	0x400200a0
 8004014:	400200b8 	.word	0x400200b8
 8004018:	40020410 	.word	0x40020410
 800401c:	40020428 	.word	0x40020428
 8004020:	40020440 	.word	0x40020440
 8004024:	40020458 	.word	0x40020458
 8004028:	40020470 	.word	0x40020470
 800402c:	40020488 	.word	0x40020488
 8004030:	400204a0 	.word	0x400204a0
 8004034:	400204b8 	.word	0x400204b8
 8004038:	58025408 	.word	0x58025408
 800403c:	5802541c 	.word	0x5802541c
 8004040:	58025430 	.word	0x58025430
 8004044:	58025444 	.word	0x58025444
 8004048:	58025458 	.word	0x58025458
 800404c:	5802546c 	.word	0x5802546c
 8004050:	58025480 	.word	0x58025480
 8004054:	58025494 	.word	0x58025494
 8004058:	2300      	movs	r3, #0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d007      	beq.n	800406e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004068:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800406c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a6d      	ldr	r2, [pc, #436]	@ (8004228 <HAL_DMA_Abort+0x444>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d04a      	beq.n	800410e <HAL_DMA_Abort+0x32a>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a6b      	ldr	r2, [pc, #428]	@ (800422c <HAL_DMA_Abort+0x448>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d045      	beq.n	800410e <HAL_DMA_Abort+0x32a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a6a      	ldr	r2, [pc, #424]	@ (8004230 <HAL_DMA_Abort+0x44c>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d040      	beq.n	800410e <HAL_DMA_Abort+0x32a>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a68      	ldr	r2, [pc, #416]	@ (8004234 <HAL_DMA_Abort+0x450>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d03b      	beq.n	800410e <HAL_DMA_Abort+0x32a>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a67      	ldr	r2, [pc, #412]	@ (8004238 <HAL_DMA_Abort+0x454>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d036      	beq.n	800410e <HAL_DMA_Abort+0x32a>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a65      	ldr	r2, [pc, #404]	@ (800423c <HAL_DMA_Abort+0x458>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d031      	beq.n	800410e <HAL_DMA_Abort+0x32a>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a64      	ldr	r2, [pc, #400]	@ (8004240 <HAL_DMA_Abort+0x45c>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d02c      	beq.n	800410e <HAL_DMA_Abort+0x32a>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a62      	ldr	r2, [pc, #392]	@ (8004244 <HAL_DMA_Abort+0x460>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d027      	beq.n	800410e <HAL_DMA_Abort+0x32a>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a61      	ldr	r2, [pc, #388]	@ (8004248 <HAL_DMA_Abort+0x464>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d022      	beq.n	800410e <HAL_DMA_Abort+0x32a>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a5f      	ldr	r2, [pc, #380]	@ (800424c <HAL_DMA_Abort+0x468>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d01d      	beq.n	800410e <HAL_DMA_Abort+0x32a>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a5e      	ldr	r2, [pc, #376]	@ (8004250 <HAL_DMA_Abort+0x46c>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d018      	beq.n	800410e <HAL_DMA_Abort+0x32a>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a5c      	ldr	r2, [pc, #368]	@ (8004254 <HAL_DMA_Abort+0x470>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d013      	beq.n	800410e <HAL_DMA_Abort+0x32a>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a5b      	ldr	r2, [pc, #364]	@ (8004258 <HAL_DMA_Abort+0x474>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d00e      	beq.n	800410e <HAL_DMA_Abort+0x32a>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a59      	ldr	r2, [pc, #356]	@ (800425c <HAL_DMA_Abort+0x478>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d009      	beq.n	800410e <HAL_DMA_Abort+0x32a>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a58      	ldr	r2, [pc, #352]	@ (8004260 <HAL_DMA_Abort+0x47c>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d004      	beq.n	800410e <HAL_DMA_Abort+0x32a>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a56      	ldr	r2, [pc, #344]	@ (8004264 <HAL_DMA_Abort+0x480>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d108      	bne.n	8004120 <HAL_DMA_Abort+0x33c>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0201 	bic.w	r2, r2, #1
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	e007      	b.n	8004130 <HAL_DMA_Abort+0x34c>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0201 	bic.w	r2, r2, #1
 800412e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004130:	e013      	b.n	800415a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004132:	f7fd fe69 	bl	8001e08 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b05      	cmp	r3, #5
 800413e:	d90c      	bls.n	800415a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2220      	movs	r2, #32
 8004144:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2203      	movs	r2, #3
 800414a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e12d      	b.n	80043b6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1e5      	bne.n	8004132 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a2f      	ldr	r2, [pc, #188]	@ (8004228 <HAL_DMA_Abort+0x444>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d04a      	beq.n	8004206 <HAL_DMA_Abort+0x422>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a2d      	ldr	r2, [pc, #180]	@ (800422c <HAL_DMA_Abort+0x448>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d045      	beq.n	8004206 <HAL_DMA_Abort+0x422>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a2c      	ldr	r2, [pc, #176]	@ (8004230 <HAL_DMA_Abort+0x44c>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d040      	beq.n	8004206 <HAL_DMA_Abort+0x422>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a2a      	ldr	r2, [pc, #168]	@ (8004234 <HAL_DMA_Abort+0x450>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d03b      	beq.n	8004206 <HAL_DMA_Abort+0x422>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a29      	ldr	r2, [pc, #164]	@ (8004238 <HAL_DMA_Abort+0x454>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d036      	beq.n	8004206 <HAL_DMA_Abort+0x422>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a27      	ldr	r2, [pc, #156]	@ (800423c <HAL_DMA_Abort+0x458>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d031      	beq.n	8004206 <HAL_DMA_Abort+0x422>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a26      	ldr	r2, [pc, #152]	@ (8004240 <HAL_DMA_Abort+0x45c>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d02c      	beq.n	8004206 <HAL_DMA_Abort+0x422>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a24      	ldr	r2, [pc, #144]	@ (8004244 <HAL_DMA_Abort+0x460>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d027      	beq.n	8004206 <HAL_DMA_Abort+0x422>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a23      	ldr	r2, [pc, #140]	@ (8004248 <HAL_DMA_Abort+0x464>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d022      	beq.n	8004206 <HAL_DMA_Abort+0x422>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a21      	ldr	r2, [pc, #132]	@ (800424c <HAL_DMA_Abort+0x468>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d01d      	beq.n	8004206 <HAL_DMA_Abort+0x422>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a20      	ldr	r2, [pc, #128]	@ (8004250 <HAL_DMA_Abort+0x46c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d018      	beq.n	8004206 <HAL_DMA_Abort+0x422>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a1e      	ldr	r2, [pc, #120]	@ (8004254 <HAL_DMA_Abort+0x470>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d013      	beq.n	8004206 <HAL_DMA_Abort+0x422>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a1d      	ldr	r2, [pc, #116]	@ (8004258 <HAL_DMA_Abort+0x474>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d00e      	beq.n	8004206 <HAL_DMA_Abort+0x422>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a1b      	ldr	r2, [pc, #108]	@ (800425c <HAL_DMA_Abort+0x478>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d009      	beq.n	8004206 <HAL_DMA_Abort+0x422>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a1a      	ldr	r2, [pc, #104]	@ (8004260 <HAL_DMA_Abort+0x47c>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d004      	beq.n	8004206 <HAL_DMA_Abort+0x422>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a18      	ldr	r2, [pc, #96]	@ (8004264 <HAL_DMA_Abort+0x480>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d101      	bne.n	800420a <HAL_DMA_Abort+0x426>
 8004206:	2301      	movs	r3, #1
 8004208:	e000      	b.n	800420c <HAL_DMA_Abort+0x428>
 800420a:	2300      	movs	r3, #0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d02b      	beq.n	8004268 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004214:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800421a:	f003 031f 	and.w	r3, r3, #31
 800421e:	223f      	movs	r2, #63	@ 0x3f
 8004220:	409a      	lsls	r2, r3
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	609a      	str	r2, [r3, #8]
 8004226:	e02a      	b.n	800427e <HAL_DMA_Abort+0x49a>
 8004228:	40020010 	.word	0x40020010
 800422c:	40020028 	.word	0x40020028
 8004230:	40020040 	.word	0x40020040
 8004234:	40020058 	.word	0x40020058
 8004238:	40020070 	.word	0x40020070
 800423c:	40020088 	.word	0x40020088
 8004240:	400200a0 	.word	0x400200a0
 8004244:	400200b8 	.word	0x400200b8
 8004248:	40020410 	.word	0x40020410
 800424c:	40020428 	.word	0x40020428
 8004250:	40020440 	.word	0x40020440
 8004254:	40020458 	.word	0x40020458
 8004258:	40020470 	.word	0x40020470
 800425c:	40020488 	.word	0x40020488
 8004260:	400204a0 	.word	0x400204a0
 8004264:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800426c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004272:	f003 031f 	and.w	r3, r3, #31
 8004276:	2201      	movs	r2, #1
 8004278:	409a      	lsls	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a4f      	ldr	r2, [pc, #316]	@ (80043c0 <HAL_DMA_Abort+0x5dc>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d072      	beq.n	800436e <HAL_DMA_Abort+0x58a>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a4d      	ldr	r2, [pc, #308]	@ (80043c4 <HAL_DMA_Abort+0x5e0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d06d      	beq.n	800436e <HAL_DMA_Abort+0x58a>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a4c      	ldr	r2, [pc, #304]	@ (80043c8 <HAL_DMA_Abort+0x5e4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d068      	beq.n	800436e <HAL_DMA_Abort+0x58a>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a4a      	ldr	r2, [pc, #296]	@ (80043cc <HAL_DMA_Abort+0x5e8>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d063      	beq.n	800436e <HAL_DMA_Abort+0x58a>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a49      	ldr	r2, [pc, #292]	@ (80043d0 <HAL_DMA_Abort+0x5ec>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d05e      	beq.n	800436e <HAL_DMA_Abort+0x58a>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a47      	ldr	r2, [pc, #284]	@ (80043d4 <HAL_DMA_Abort+0x5f0>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d059      	beq.n	800436e <HAL_DMA_Abort+0x58a>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a46      	ldr	r2, [pc, #280]	@ (80043d8 <HAL_DMA_Abort+0x5f4>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d054      	beq.n	800436e <HAL_DMA_Abort+0x58a>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a44      	ldr	r2, [pc, #272]	@ (80043dc <HAL_DMA_Abort+0x5f8>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d04f      	beq.n	800436e <HAL_DMA_Abort+0x58a>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a43      	ldr	r2, [pc, #268]	@ (80043e0 <HAL_DMA_Abort+0x5fc>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d04a      	beq.n	800436e <HAL_DMA_Abort+0x58a>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a41      	ldr	r2, [pc, #260]	@ (80043e4 <HAL_DMA_Abort+0x600>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d045      	beq.n	800436e <HAL_DMA_Abort+0x58a>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a40      	ldr	r2, [pc, #256]	@ (80043e8 <HAL_DMA_Abort+0x604>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d040      	beq.n	800436e <HAL_DMA_Abort+0x58a>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a3e      	ldr	r2, [pc, #248]	@ (80043ec <HAL_DMA_Abort+0x608>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d03b      	beq.n	800436e <HAL_DMA_Abort+0x58a>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a3d      	ldr	r2, [pc, #244]	@ (80043f0 <HAL_DMA_Abort+0x60c>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d036      	beq.n	800436e <HAL_DMA_Abort+0x58a>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a3b      	ldr	r2, [pc, #236]	@ (80043f4 <HAL_DMA_Abort+0x610>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d031      	beq.n	800436e <HAL_DMA_Abort+0x58a>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a3a      	ldr	r2, [pc, #232]	@ (80043f8 <HAL_DMA_Abort+0x614>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d02c      	beq.n	800436e <HAL_DMA_Abort+0x58a>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a38      	ldr	r2, [pc, #224]	@ (80043fc <HAL_DMA_Abort+0x618>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d027      	beq.n	800436e <HAL_DMA_Abort+0x58a>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a37      	ldr	r2, [pc, #220]	@ (8004400 <HAL_DMA_Abort+0x61c>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d022      	beq.n	800436e <HAL_DMA_Abort+0x58a>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a35      	ldr	r2, [pc, #212]	@ (8004404 <HAL_DMA_Abort+0x620>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d01d      	beq.n	800436e <HAL_DMA_Abort+0x58a>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a34      	ldr	r2, [pc, #208]	@ (8004408 <HAL_DMA_Abort+0x624>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d018      	beq.n	800436e <HAL_DMA_Abort+0x58a>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a32      	ldr	r2, [pc, #200]	@ (800440c <HAL_DMA_Abort+0x628>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d013      	beq.n	800436e <HAL_DMA_Abort+0x58a>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a31      	ldr	r2, [pc, #196]	@ (8004410 <HAL_DMA_Abort+0x62c>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d00e      	beq.n	800436e <HAL_DMA_Abort+0x58a>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a2f      	ldr	r2, [pc, #188]	@ (8004414 <HAL_DMA_Abort+0x630>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d009      	beq.n	800436e <HAL_DMA_Abort+0x58a>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a2e      	ldr	r2, [pc, #184]	@ (8004418 <HAL_DMA_Abort+0x634>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d004      	beq.n	800436e <HAL_DMA_Abort+0x58a>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a2c      	ldr	r2, [pc, #176]	@ (800441c <HAL_DMA_Abort+0x638>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d101      	bne.n	8004372 <HAL_DMA_Abort+0x58e>
 800436e:	2301      	movs	r3, #1
 8004370:	e000      	b.n	8004374 <HAL_DMA_Abort+0x590>
 8004372:	2300      	movs	r3, #0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d015      	beq.n	80043a4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004380:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00c      	beq.n	80043a4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004394:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004398:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80043a2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	40020010 	.word	0x40020010
 80043c4:	40020028 	.word	0x40020028
 80043c8:	40020040 	.word	0x40020040
 80043cc:	40020058 	.word	0x40020058
 80043d0:	40020070 	.word	0x40020070
 80043d4:	40020088 	.word	0x40020088
 80043d8:	400200a0 	.word	0x400200a0
 80043dc:	400200b8 	.word	0x400200b8
 80043e0:	40020410 	.word	0x40020410
 80043e4:	40020428 	.word	0x40020428
 80043e8:	40020440 	.word	0x40020440
 80043ec:	40020458 	.word	0x40020458
 80043f0:	40020470 	.word	0x40020470
 80043f4:	40020488 	.word	0x40020488
 80043f8:	400204a0 	.word	0x400204a0
 80043fc:	400204b8 	.word	0x400204b8
 8004400:	58025408 	.word	0x58025408
 8004404:	5802541c 	.word	0x5802541c
 8004408:	58025430 	.word	0x58025430
 800440c:	58025444 	.word	0x58025444
 8004410:	58025458 	.word	0x58025458
 8004414:	5802546c 	.word	0x5802546c
 8004418:	58025480 	.word	0x58025480
 800441c:	58025494 	.word	0x58025494

08004420 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e237      	b.n	80048a2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d004      	beq.n	8004448 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2280      	movs	r2, #128	@ 0x80
 8004442:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e22c      	b.n	80048a2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a5c      	ldr	r2, [pc, #368]	@ (80045c0 <HAL_DMA_Abort_IT+0x1a0>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d04a      	beq.n	80044e8 <HAL_DMA_Abort_IT+0xc8>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a5b      	ldr	r2, [pc, #364]	@ (80045c4 <HAL_DMA_Abort_IT+0x1a4>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d045      	beq.n	80044e8 <HAL_DMA_Abort_IT+0xc8>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a59      	ldr	r2, [pc, #356]	@ (80045c8 <HAL_DMA_Abort_IT+0x1a8>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d040      	beq.n	80044e8 <HAL_DMA_Abort_IT+0xc8>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a58      	ldr	r2, [pc, #352]	@ (80045cc <HAL_DMA_Abort_IT+0x1ac>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d03b      	beq.n	80044e8 <HAL_DMA_Abort_IT+0xc8>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a56      	ldr	r2, [pc, #344]	@ (80045d0 <HAL_DMA_Abort_IT+0x1b0>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d036      	beq.n	80044e8 <HAL_DMA_Abort_IT+0xc8>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a55      	ldr	r2, [pc, #340]	@ (80045d4 <HAL_DMA_Abort_IT+0x1b4>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d031      	beq.n	80044e8 <HAL_DMA_Abort_IT+0xc8>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a53      	ldr	r2, [pc, #332]	@ (80045d8 <HAL_DMA_Abort_IT+0x1b8>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d02c      	beq.n	80044e8 <HAL_DMA_Abort_IT+0xc8>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a52      	ldr	r2, [pc, #328]	@ (80045dc <HAL_DMA_Abort_IT+0x1bc>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d027      	beq.n	80044e8 <HAL_DMA_Abort_IT+0xc8>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a50      	ldr	r2, [pc, #320]	@ (80045e0 <HAL_DMA_Abort_IT+0x1c0>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d022      	beq.n	80044e8 <HAL_DMA_Abort_IT+0xc8>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a4f      	ldr	r2, [pc, #316]	@ (80045e4 <HAL_DMA_Abort_IT+0x1c4>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d01d      	beq.n	80044e8 <HAL_DMA_Abort_IT+0xc8>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a4d      	ldr	r2, [pc, #308]	@ (80045e8 <HAL_DMA_Abort_IT+0x1c8>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d018      	beq.n	80044e8 <HAL_DMA_Abort_IT+0xc8>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a4c      	ldr	r2, [pc, #304]	@ (80045ec <HAL_DMA_Abort_IT+0x1cc>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d013      	beq.n	80044e8 <HAL_DMA_Abort_IT+0xc8>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a4a      	ldr	r2, [pc, #296]	@ (80045f0 <HAL_DMA_Abort_IT+0x1d0>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00e      	beq.n	80044e8 <HAL_DMA_Abort_IT+0xc8>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a49      	ldr	r2, [pc, #292]	@ (80045f4 <HAL_DMA_Abort_IT+0x1d4>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d009      	beq.n	80044e8 <HAL_DMA_Abort_IT+0xc8>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a47      	ldr	r2, [pc, #284]	@ (80045f8 <HAL_DMA_Abort_IT+0x1d8>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d004      	beq.n	80044e8 <HAL_DMA_Abort_IT+0xc8>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a46      	ldr	r2, [pc, #280]	@ (80045fc <HAL_DMA_Abort_IT+0x1dc>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d101      	bne.n	80044ec <HAL_DMA_Abort_IT+0xcc>
 80044e8:	2301      	movs	r3, #1
 80044ea:	e000      	b.n	80044ee <HAL_DMA_Abort_IT+0xce>
 80044ec:	2300      	movs	r3, #0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 8086 	beq.w	8004600 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2204      	movs	r2, #4
 80044f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a2f      	ldr	r2, [pc, #188]	@ (80045c0 <HAL_DMA_Abort_IT+0x1a0>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d04a      	beq.n	800459c <HAL_DMA_Abort_IT+0x17c>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a2e      	ldr	r2, [pc, #184]	@ (80045c4 <HAL_DMA_Abort_IT+0x1a4>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d045      	beq.n	800459c <HAL_DMA_Abort_IT+0x17c>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a2c      	ldr	r2, [pc, #176]	@ (80045c8 <HAL_DMA_Abort_IT+0x1a8>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d040      	beq.n	800459c <HAL_DMA_Abort_IT+0x17c>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a2b      	ldr	r2, [pc, #172]	@ (80045cc <HAL_DMA_Abort_IT+0x1ac>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d03b      	beq.n	800459c <HAL_DMA_Abort_IT+0x17c>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a29      	ldr	r2, [pc, #164]	@ (80045d0 <HAL_DMA_Abort_IT+0x1b0>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d036      	beq.n	800459c <HAL_DMA_Abort_IT+0x17c>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a28      	ldr	r2, [pc, #160]	@ (80045d4 <HAL_DMA_Abort_IT+0x1b4>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d031      	beq.n	800459c <HAL_DMA_Abort_IT+0x17c>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a26      	ldr	r2, [pc, #152]	@ (80045d8 <HAL_DMA_Abort_IT+0x1b8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d02c      	beq.n	800459c <HAL_DMA_Abort_IT+0x17c>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a25      	ldr	r2, [pc, #148]	@ (80045dc <HAL_DMA_Abort_IT+0x1bc>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d027      	beq.n	800459c <HAL_DMA_Abort_IT+0x17c>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a23      	ldr	r2, [pc, #140]	@ (80045e0 <HAL_DMA_Abort_IT+0x1c0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d022      	beq.n	800459c <HAL_DMA_Abort_IT+0x17c>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a22      	ldr	r2, [pc, #136]	@ (80045e4 <HAL_DMA_Abort_IT+0x1c4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d01d      	beq.n	800459c <HAL_DMA_Abort_IT+0x17c>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a20      	ldr	r2, [pc, #128]	@ (80045e8 <HAL_DMA_Abort_IT+0x1c8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d018      	beq.n	800459c <HAL_DMA_Abort_IT+0x17c>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a1f      	ldr	r2, [pc, #124]	@ (80045ec <HAL_DMA_Abort_IT+0x1cc>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d013      	beq.n	800459c <HAL_DMA_Abort_IT+0x17c>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a1d      	ldr	r2, [pc, #116]	@ (80045f0 <HAL_DMA_Abort_IT+0x1d0>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d00e      	beq.n	800459c <HAL_DMA_Abort_IT+0x17c>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a1c      	ldr	r2, [pc, #112]	@ (80045f4 <HAL_DMA_Abort_IT+0x1d4>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d009      	beq.n	800459c <HAL_DMA_Abort_IT+0x17c>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a1a      	ldr	r2, [pc, #104]	@ (80045f8 <HAL_DMA_Abort_IT+0x1d8>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d004      	beq.n	800459c <HAL_DMA_Abort_IT+0x17c>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a19      	ldr	r2, [pc, #100]	@ (80045fc <HAL_DMA_Abort_IT+0x1dc>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d108      	bne.n	80045ae <HAL_DMA_Abort_IT+0x18e>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0201 	bic.w	r2, r2, #1
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	e178      	b.n	80048a0 <HAL_DMA_Abort_IT+0x480>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 0201 	bic.w	r2, r2, #1
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	e16f      	b.n	80048a0 <HAL_DMA_Abort_IT+0x480>
 80045c0:	40020010 	.word	0x40020010
 80045c4:	40020028 	.word	0x40020028
 80045c8:	40020040 	.word	0x40020040
 80045cc:	40020058 	.word	0x40020058
 80045d0:	40020070 	.word	0x40020070
 80045d4:	40020088 	.word	0x40020088
 80045d8:	400200a0 	.word	0x400200a0
 80045dc:	400200b8 	.word	0x400200b8
 80045e0:	40020410 	.word	0x40020410
 80045e4:	40020428 	.word	0x40020428
 80045e8:	40020440 	.word	0x40020440
 80045ec:	40020458 	.word	0x40020458
 80045f0:	40020470 	.word	0x40020470
 80045f4:	40020488 	.word	0x40020488
 80045f8:	400204a0 	.word	0x400204a0
 80045fc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 020e 	bic.w	r2, r2, #14
 800460e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a6c      	ldr	r2, [pc, #432]	@ (80047c8 <HAL_DMA_Abort_IT+0x3a8>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d04a      	beq.n	80046b0 <HAL_DMA_Abort_IT+0x290>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a6b      	ldr	r2, [pc, #428]	@ (80047cc <HAL_DMA_Abort_IT+0x3ac>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d045      	beq.n	80046b0 <HAL_DMA_Abort_IT+0x290>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a69      	ldr	r2, [pc, #420]	@ (80047d0 <HAL_DMA_Abort_IT+0x3b0>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d040      	beq.n	80046b0 <HAL_DMA_Abort_IT+0x290>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a68      	ldr	r2, [pc, #416]	@ (80047d4 <HAL_DMA_Abort_IT+0x3b4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d03b      	beq.n	80046b0 <HAL_DMA_Abort_IT+0x290>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a66      	ldr	r2, [pc, #408]	@ (80047d8 <HAL_DMA_Abort_IT+0x3b8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d036      	beq.n	80046b0 <HAL_DMA_Abort_IT+0x290>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a65      	ldr	r2, [pc, #404]	@ (80047dc <HAL_DMA_Abort_IT+0x3bc>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d031      	beq.n	80046b0 <HAL_DMA_Abort_IT+0x290>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a63      	ldr	r2, [pc, #396]	@ (80047e0 <HAL_DMA_Abort_IT+0x3c0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d02c      	beq.n	80046b0 <HAL_DMA_Abort_IT+0x290>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a62      	ldr	r2, [pc, #392]	@ (80047e4 <HAL_DMA_Abort_IT+0x3c4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d027      	beq.n	80046b0 <HAL_DMA_Abort_IT+0x290>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a60      	ldr	r2, [pc, #384]	@ (80047e8 <HAL_DMA_Abort_IT+0x3c8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d022      	beq.n	80046b0 <HAL_DMA_Abort_IT+0x290>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a5f      	ldr	r2, [pc, #380]	@ (80047ec <HAL_DMA_Abort_IT+0x3cc>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d01d      	beq.n	80046b0 <HAL_DMA_Abort_IT+0x290>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a5d      	ldr	r2, [pc, #372]	@ (80047f0 <HAL_DMA_Abort_IT+0x3d0>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d018      	beq.n	80046b0 <HAL_DMA_Abort_IT+0x290>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a5c      	ldr	r2, [pc, #368]	@ (80047f4 <HAL_DMA_Abort_IT+0x3d4>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d013      	beq.n	80046b0 <HAL_DMA_Abort_IT+0x290>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a5a      	ldr	r2, [pc, #360]	@ (80047f8 <HAL_DMA_Abort_IT+0x3d8>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d00e      	beq.n	80046b0 <HAL_DMA_Abort_IT+0x290>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a59      	ldr	r2, [pc, #356]	@ (80047fc <HAL_DMA_Abort_IT+0x3dc>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d009      	beq.n	80046b0 <HAL_DMA_Abort_IT+0x290>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a57      	ldr	r2, [pc, #348]	@ (8004800 <HAL_DMA_Abort_IT+0x3e0>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d004      	beq.n	80046b0 <HAL_DMA_Abort_IT+0x290>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a56      	ldr	r2, [pc, #344]	@ (8004804 <HAL_DMA_Abort_IT+0x3e4>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d108      	bne.n	80046c2 <HAL_DMA_Abort_IT+0x2a2>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0201 	bic.w	r2, r2, #1
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	e007      	b.n	80046d2 <HAL_DMA_Abort_IT+0x2b2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0201 	bic.w	r2, r2, #1
 80046d0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a3c      	ldr	r2, [pc, #240]	@ (80047c8 <HAL_DMA_Abort_IT+0x3a8>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d072      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x3a2>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a3a      	ldr	r2, [pc, #232]	@ (80047cc <HAL_DMA_Abort_IT+0x3ac>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d06d      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x3a2>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a39      	ldr	r2, [pc, #228]	@ (80047d0 <HAL_DMA_Abort_IT+0x3b0>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d068      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x3a2>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a37      	ldr	r2, [pc, #220]	@ (80047d4 <HAL_DMA_Abort_IT+0x3b4>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d063      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x3a2>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a36      	ldr	r2, [pc, #216]	@ (80047d8 <HAL_DMA_Abort_IT+0x3b8>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d05e      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x3a2>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a34      	ldr	r2, [pc, #208]	@ (80047dc <HAL_DMA_Abort_IT+0x3bc>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d059      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x3a2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a33      	ldr	r2, [pc, #204]	@ (80047e0 <HAL_DMA_Abort_IT+0x3c0>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d054      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x3a2>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a31      	ldr	r2, [pc, #196]	@ (80047e4 <HAL_DMA_Abort_IT+0x3c4>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d04f      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x3a2>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a30      	ldr	r2, [pc, #192]	@ (80047e8 <HAL_DMA_Abort_IT+0x3c8>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d04a      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x3a2>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a2e      	ldr	r2, [pc, #184]	@ (80047ec <HAL_DMA_Abort_IT+0x3cc>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d045      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x3a2>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a2d      	ldr	r2, [pc, #180]	@ (80047f0 <HAL_DMA_Abort_IT+0x3d0>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d040      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x3a2>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a2b      	ldr	r2, [pc, #172]	@ (80047f4 <HAL_DMA_Abort_IT+0x3d4>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d03b      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x3a2>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a2a      	ldr	r2, [pc, #168]	@ (80047f8 <HAL_DMA_Abort_IT+0x3d8>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d036      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x3a2>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a28      	ldr	r2, [pc, #160]	@ (80047fc <HAL_DMA_Abort_IT+0x3dc>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d031      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x3a2>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a27      	ldr	r2, [pc, #156]	@ (8004800 <HAL_DMA_Abort_IT+0x3e0>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d02c      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x3a2>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a25      	ldr	r2, [pc, #148]	@ (8004804 <HAL_DMA_Abort_IT+0x3e4>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d027      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x3a2>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a24      	ldr	r2, [pc, #144]	@ (8004808 <HAL_DMA_Abort_IT+0x3e8>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d022      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x3a2>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a22      	ldr	r2, [pc, #136]	@ (800480c <HAL_DMA_Abort_IT+0x3ec>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d01d      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x3a2>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a21      	ldr	r2, [pc, #132]	@ (8004810 <HAL_DMA_Abort_IT+0x3f0>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d018      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x3a2>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a1f      	ldr	r2, [pc, #124]	@ (8004814 <HAL_DMA_Abort_IT+0x3f4>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d013      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x3a2>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a1e      	ldr	r2, [pc, #120]	@ (8004818 <HAL_DMA_Abort_IT+0x3f8>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d00e      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x3a2>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a1c      	ldr	r2, [pc, #112]	@ (800481c <HAL_DMA_Abort_IT+0x3fc>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d009      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x3a2>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a1b      	ldr	r2, [pc, #108]	@ (8004820 <HAL_DMA_Abort_IT+0x400>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d004      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x3a2>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a19      	ldr	r2, [pc, #100]	@ (8004824 <HAL_DMA_Abort_IT+0x404>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d132      	bne.n	8004828 <HAL_DMA_Abort_IT+0x408>
 80047c2:	2301      	movs	r3, #1
 80047c4:	e031      	b.n	800482a <HAL_DMA_Abort_IT+0x40a>
 80047c6:	bf00      	nop
 80047c8:	40020010 	.word	0x40020010
 80047cc:	40020028 	.word	0x40020028
 80047d0:	40020040 	.word	0x40020040
 80047d4:	40020058 	.word	0x40020058
 80047d8:	40020070 	.word	0x40020070
 80047dc:	40020088 	.word	0x40020088
 80047e0:	400200a0 	.word	0x400200a0
 80047e4:	400200b8 	.word	0x400200b8
 80047e8:	40020410 	.word	0x40020410
 80047ec:	40020428 	.word	0x40020428
 80047f0:	40020440 	.word	0x40020440
 80047f4:	40020458 	.word	0x40020458
 80047f8:	40020470 	.word	0x40020470
 80047fc:	40020488 	.word	0x40020488
 8004800:	400204a0 	.word	0x400204a0
 8004804:	400204b8 	.word	0x400204b8
 8004808:	58025408 	.word	0x58025408
 800480c:	5802541c 	.word	0x5802541c
 8004810:	58025430 	.word	0x58025430
 8004814:	58025444 	.word	0x58025444
 8004818:	58025458 	.word	0x58025458
 800481c:	5802546c 	.word	0x5802546c
 8004820:	58025480 	.word	0x58025480
 8004824:	58025494 	.word	0x58025494
 8004828:	2300      	movs	r3, #0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d028      	beq.n	8004880 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004838:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800483c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004842:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004848:	f003 031f 	and.w	r3, r3, #31
 800484c:	2201      	movs	r2, #1
 800484e:	409a      	lsls	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800485c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00c      	beq.n	8004880 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004870:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004874:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800487e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004894:	2b00      	cmp	r3, #0
 8004896:	d003      	beq.n	80048a0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop

080048ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b08a      	sub	sp, #40	@ 0x28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80048b8:	4b67      	ldr	r3, [pc, #412]	@ (8004a58 <HAL_DMA_IRQHandler+0x1ac>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a67      	ldr	r2, [pc, #412]	@ (8004a5c <HAL_DMA_IRQHandler+0x1b0>)
 80048be:	fba2 2303 	umull	r2, r3, r2, r3
 80048c2:	0a9b      	lsrs	r3, r3, #10
 80048c4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ca:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048d0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80048d2:	6a3b      	ldr	r3, [r7, #32]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a5f      	ldr	r2, [pc, #380]	@ (8004a60 <HAL_DMA_IRQHandler+0x1b4>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d04a      	beq.n	800497e <HAL_DMA_IRQHandler+0xd2>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a5d      	ldr	r2, [pc, #372]	@ (8004a64 <HAL_DMA_IRQHandler+0x1b8>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d045      	beq.n	800497e <HAL_DMA_IRQHandler+0xd2>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a5c      	ldr	r2, [pc, #368]	@ (8004a68 <HAL_DMA_IRQHandler+0x1bc>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d040      	beq.n	800497e <HAL_DMA_IRQHandler+0xd2>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a5a      	ldr	r2, [pc, #360]	@ (8004a6c <HAL_DMA_IRQHandler+0x1c0>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d03b      	beq.n	800497e <HAL_DMA_IRQHandler+0xd2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a59      	ldr	r2, [pc, #356]	@ (8004a70 <HAL_DMA_IRQHandler+0x1c4>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d036      	beq.n	800497e <HAL_DMA_IRQHandler+0xd2>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a57      	ldr	r2, [pc, #348]	@ (8004a74 <HAL_DMA_IRQHandler+0x1c8>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d031      	beq.n	800497e <HAL_DMA_IRQHandler+0xd2>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a56      	ldr	r2, [pc, #344]	@ (8004a78 <HAL_DMA_IRQHandler+0x1cc>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d02c      	beq.n	800497e <HAL_DMA_IRQHandler+0xd2>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a54      	ldr	r2, [pc, #336]	@ (8004a7c <HAL_DMA_IRQHandler+0x1d0>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d027      	beq.n	800497e <HAL_DMA_IRQHandler+0xd2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a53      	ldr	r2, [pc, #332]	@ (8004a80 <HAL_DMA_IRQHandler+0x1d4>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d022      	beq.n	800497e <HAL_DMA_IRQHandler+0xd2>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a51      	ldr	r2, [pc, #324]	@ (8004a84 <HAL_DMA_IRQHandler+0x1d8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d01d      	beq.n	800497e <HAL_DMA_IRQHandler+0xd2>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a50      	ldr	r2, [pc, #320]	@ (8004a88 <HAL_DMA_IRQHandler+0x1dc>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d018      	beq.n	800497e <HAL_DMA_IRQHandler+0xd2>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a4e      	ldr	r2, [pc, #312]	@ (8004a8c <HAL_DMA_IRQHandler+0x1e0>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d013      	beq.n	800497e <HAL_DMA_IRQHandler+0xd2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a4d      	ldr	r2, [pc, #308]	@ (8004a90 <HAL_DMA_IRQHandler+0x1e4>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d00e      	beq.n	800497e <HAL_DMA_IRQHandler+0xd2>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a4b      	ldr	r2, [pc, #300]	@ (8004a94 <HAL_DMA_IRQHandler+0x1e8>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d009      	beq.n	800497e <HAL_DMA_IRQHandler+0xd2>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a4a      	ldr	r2, [pc, #296]	@ (8004a98 <HAL_DMA_IRQHandler+0x1ec>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d004      	beq.n	800497e <HAL_DMA_IRQHandler+0xd2>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a48      	ldr	r2, [pc, #288]	@ (8004a9c <HAL_DMA_IRQHandler+0x1f0>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d101      	bne.n	8004982 <HAL_DMA_IRQHandler+0xd6>
 800497e:	2301      	movs	r3, #1
 8004980:	e000      	b.n	8004984 <HAL_DMA_IRQHandler+0xd8>
 8004982:	2300      	movs	r3, #0
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 842b 	beq.w	80051e0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800498e:	f003 031f 	and.w	r3, r3, #31
 8004992:	2208      	movs	r2, #8
 8004994:	409a      	lsls	r2, r3
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	4013      	ands	r3, r2
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 80a2 	beq.w	8004ae4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a2e      	ldr	r2, [pc, #184]	@ (8004a60 <HAL_DMA_IRQHandler+0x1b4>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d04a      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x194>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a2d      	ldr	r2, [pc, #180]	@ (8004a64 <HAL_DMA_IRQHandler+0x1b8>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d045      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x194>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a2b      	ldr	r2, [pc, #172]	@ (8004a68 <HAL_DMA_IRQHandler+0x1bc>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d040      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x194>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a2a      	ldr	r2, [pc, #168]	@ (8004a6c <HAL_DMA_IRQHandler+0x1c0>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d03b      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x194>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a28      	ldr	r2, [pc, #160]	@ (8004a70 <HAL_DMA_IRQHandler+0x1c4>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d036      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x194>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a27      	ldr	r2, [pc, #156]	@ (8004a74 <HAL_DMA_IRQHandler+0x1c8>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d031      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x194>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a25      	ldr	r2, [pc, #148]	@ (8004a78 <HAL_DMA_IRQHandler+0x1cc>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d02c      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x194>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a24      	ldr	r2, [pc, #144]	@ (8004a7c <HAL_DMA_IRQHandler+0x1d0>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d027      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x194>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a22      	ldr	r2, [pc, #136]	@ (8004a80 <HAL_DMA_IRQHandler+0x1d4>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d022      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x194>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a21      	ldr	r2, [pc, #132]	@ (8004a84 <HAL_DMA_IRQHandler+0x1d8>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d01d      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x194>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a1f      	ldr	r2, [pc, #124]	@ (8004a88 <HAL_DMA_IRQHandler+0x1dc>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d018      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x194>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a1e      	ldr	r2, [pc, #120]	@ (8004a8c <HAL_DMA_IRQHandler+0x1e0>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d013      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x194>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a1c      	ldr	r2, [pc, #112]	@ (8004a90 <HAL_DMA_IRQHandler+0x1e4>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d00e      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x194>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a1b      	ldr	r2, [pc, #108]	@ (8004a94 <HAL_DMA_IRQHandler+0x1e8>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d009      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x194>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a19      	ldr	r2, [pc, #100]	@ (8004a98 <HAL_DMA_IRQHandler+0x1ec>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d004      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x194>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a18      	ldr	r2, [pc, #96]	@ (8004a9c <HAL_DMA_IRQHandler+0x1f0>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d12f      	bne.n	8004aa0 <HAL_DMA_IRQHandler+0x1f4>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0304 	and.w	r3, r3, #4
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	bf14      	ite	ne
 8004a4e:	2301      	movne	r3, #1
 8004a50:	2300      	moveq	r3, #0
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	e02e      	b.n	8004ab4 <HAL_DMA_IRQHandler+0x208>
 8004a56:	bf00      	nop
 8004a58:	24000000 	.word	0x24000000
 8004a5c:	1b4e81b5 	.word	0x1b4e81b5
 8004a60:	40020010 	.word	0x40020010
 8004a64:	40020028 	.word	0x40020028
 8004a68:	40020040 	.word	0x40020040
 8004a6c:	40020058 	.word	0x40020058
 8004a70:	40020070 	.word	0x40020070
 8004a74:	40020088 	.word	0x40020088
 8004a78:	400200a0 	.word	0x400200a0
 8004a7c:	400200b8 	.word	0x400200b8
 8004a80:	40020410 	.word	0x40020410
 8004a84:	40020428 	.word	0x40020428
 8004a88:	40020440 	.word	0x40020440
 8004a8c:	40020458 	.word	0x40020458
 8004a90:	40020470 	.word	0x40020470
 8004a94:	40020488 	.word	0x40020488
 8004a98:	400204a0 	.word	0x400204a0
 8004a9c:	400204b8 	.word	0x400204b8
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0308 	and.w	r3, r3, #8
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	bf14      	ite	ne
 8004aae:	2301      	movne	r3, #1
 8004ab0:	2300      	moveq	r3, #0
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d015      	beq.n	8004ae4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0204 	bic.w	r2, r2, #4
 8004ac6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004acc:	f003 031f 	and.w	r3, r3, #31
 8004ad0:	2208      	movs	r2, #8
 8004ad2:	409a      	lsls	r2, r3
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004adc:	f043 0201 	orr.w	r2, r3, #1
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ae8:	f003 031f 	and.w	r3, r3, #31
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	fa22 f303 	lsr.w	r3, r2, r3
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d06e      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a69      	ldr	r2, [pc, #420]	@ (8004ca4 <HAL_DMA_IRQHandler+0x3f8>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d04a      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x2ee>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a67      	ldr	r2, [pc, #412]	@ (8004ca8 <HAL_DMA_IRQHandler+0x3fc>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d045      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x2ee>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a66      	ldr	r2, [pc, #408]	@ (8004cac <HAL_DMA_IRQHandler+0x400>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d040      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x2ee>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a64      	ldr	r2, [pc, #400]	@ (8004cb0 <HAL_DMA_IRQHandler+0x404>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d03b      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x2ee>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a63      	ldr	r2, [pc, #396]	@ (8004cb4 <HAL_DMA_IRQHandler+0x408>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d036      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x2ee>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a61      	ldr	r2, [pc, #388]	@ (8004cb8 <HAL_DMA_IRQHandler+0x40c>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d031      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x2ee>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a60      	ldr	r2, [pc, #384]	@ (8004cbc <HAL_DMA_IRQHandler+0x410>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d02c      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x2ee>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a5e      	ldr	r2, [pc, #376]	@ (8004cc0 <HAL_DMA_IRQHandler+0x414>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d027      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x2ee>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a5d      	ldr	r2, [pc, #372]	@ (8004cc4 <HAL_DMA_IRQHandler+0x418>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d022      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x2ee>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a5b      	ldr	r2, [pc, #364]	@ (8004cc8 <HAL_DMA_IRQHandler+0x41c>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d01d      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x2ee>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a5a      	ldr	r2, [pc, #360]	@ (8004ccc <HAL_DMA_IRQHandler+0x420>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d018      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x2ee>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a58      	ldr	r2, [pc, #352]	@ (8004cd0 <HAL_DMA_IRQHandler+0x424>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d013      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x2ee>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a57      	ldr	r2, [pc, #348]	@ (8004cd4 <HAL_DMA_IRQHandler+0x428>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d00e      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x2ee>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a55      	ldr	r2, [pc, #340]	@ (8004cd8 <HAL_DMA_IRQHandler+0x42c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d009      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x2ee>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a54      	ldr	r2, [pc, #336]	@ (8004cdc <HAL_DMA_IRQHandler+0x430>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d004      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x2ee>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a52      	ldr	r2, [pc, #328]	@ (8004ce0 <HAL_DMA_IRQHandler+0x434>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d10a      	bne.n	8004bb0 <HAL_DMA_IRQHandler+0x304>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	bf14      	ite	ne
 8004ba8:	2301      	movne	r3, #1
 8004baa:	2300      	moveq	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	e003      	b.n	8004bb8 <HAL_DMA_IRQHandler+0x30c>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00d      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bc0:	f003 031f 	and.w	r3, r3, #31
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	409a      	lsls	r2, r3
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
 8004bca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd0:	f043 0202 	orr.w	r2, r3, #2
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bdc:	f003 031f 	and.w	r3, r3, #31
 8004be0:	2204      	movs	r2, #4
 8004be2:	409a      	lsls	r2, r3
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	4013      	ands	r3, r2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 808f 	beq.w	8004d0c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a2c      	ldr	r2, [pc, #176]	@ (8004ca4 <HAL_DMA_IRQHandler+0x3f8>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d04a      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x3e2>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a2a      	ldr	r2, [pc, #168]	@ (8004ca8 <HAL_DMA_IRQHandler+0x3fc>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d045      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x3e2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a29      	ldr	r2, [pc, #164]	@ (8004cac <HAL_DMA_IRQHandler+0x400>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d040      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x3e2>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a27      	ldr	r2, [pc, #156]	@ (8004cb0 <HAL_DMA_IRQHandler+0x404>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d03b      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x3e2>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a26      	ldr	r2, [pc, #152]	@ (8004cb4 <HAL_DMA_IRQHandler+0x408>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d036      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x3e2>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a24      	ldr	r2, [pc, #144]	@ (8004cb8 <HAL_DMA_IRQHandler+0x40c>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d031      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x3e2>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a23      	ldr	r2, [pc, #140]	@ (8004cbc <HAL_DMA_IRQHandler+0x410>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d02c      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x3e2>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a21      	ldr	r2, [pc, #132]	@ (8004cc0 <HAL_DMA_IRQHandler+0x414>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d027      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x3e2>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a20      	ldr	r2, [pc, #128]	@ (8004cc4 <HAL_DMA_IRQHandler+0x418>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d022      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x3e2>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a1e      	ldr	r2, [pc, #120]	@ (8004cc8 <HAL_DMA_IRQHandler+0x41c>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d01d      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x3e2>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a1d      	ldr	r2, [pc, #116]	@ (8004ccc <HAL_DMA_IRQHandler+0x420>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d018      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x3e2>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a1b      	ldr	r2, [pc, #108]	@ (8004cd0 <HAL_DMA_IRQHandler+0x424>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d013      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x3e2>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a1a      	ldr	r2, [pc, #104]	@ (8004cd4 <HAL_DMA_IRQHandler+0x428>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d00e      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x3e2>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a18      	ldr	r2, [pc, #96]	@ (8004cd8 <HAL_DMA_IRQHandler+0x42c>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d009      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x3e2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a17      	ldr	r2, [pc, #92]	@ (8004cdc <HAL_DMA_IRQHandler+0x430>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d004      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x3e2>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a15      	ldr	r2, [pc, #84]	@ (8004ce0 <HAL_DMA_IRQHandler+0x434>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d12a      	bne.n	8004ce4 <HAL_DMA_IRQHandler+0x438>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	bf14      	ite	ne
 8004c9c:	2301      	movne	r3, #1
 8004c9e:	2300      	moveq	r3, #0
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	e023      	b.n	8004cec <HAL_DMA_IRQHandler+0x440>
 8004ca4:	40020010 	.word	0x40020010
 8004ca8:	40020028 	.word	0x40020028
 8004cac:	40020040 	.word	0x40020040
 8004cb0:	40020058 	.word	0x40020058
 8004cb4:	40020070 	.word	0x40020070
 8004cb8:	40020088 	.word	0x40020088
 8004cbc:	400200a0 	.word	0x400200a0
 8004cc0:	400200b8 	.word	0x400200b8
 8004cc4:	40020410 	.word	0x40020410
 8004cc8:	40020428 	.word	0x40020428
 8004ccc:	40020440 	.word	0x40020440
 8004cd0:	40020458 	.word	0x40020458
 8004cd4:	40020470 	.word	0x40020470
 8004cd8:	40020488 	.word	0x40020488
 8004cdc:	400204a0 	.word	0x400204a0
 8004ce0:	400204b8 	.word	0x400204b8
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2300      	movs	r3, #0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00d      	beq.n	8004d0c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cf4:	f003 031f 	and.w	r3, r3, #31
 8004cf8:	2204      	movs	r2, #4
 8004cfa:	409a      	lsls	r2, r3
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
 8004cfe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d04:	f043 0204 	orr.w	r2, r3, #4
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d10:	f003 031f 	and.w	r3, r3, #31
 8004d14:	2210      	movs	r2, #16
 8004d16:	409a      	lsls	r2, r3
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 80a6 	beq.w	8004e6e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a85      	ldr	r2, [pc, #532]	@ (8004f3c <HAL_DMA_IRQHandler+0x690>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d04a      	beq.n	8004dc2 <HAL_DMA_IRQHandler+0x516>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a83      	ldr	r2, [pc, #524]	@ (8004f40 <HAL_DMA_IRQHandler+0x694>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d045      	beq.n	8004dc2 <HAL_DMA_IRQHandler+0x516>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a82      	ldr	r2, [pc, #520]	@ (8004f44 <HAL_DMA_IRQHandler+0x698>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d040      	beq.n	8004dc2 <HAL_DMA_IRQHandler+0x516>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a80      	ldr	r2, [pc, #512]	@ (8004f48 <HAL_DMA_IRQHandler+0x69c>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d03b      	beq.n	8004dc2 <HAL_DMA_IRQHandler+0x516>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a7f      	ldr	r2, [pc, #508]	@ (8004f4c <HAL_DMA_IRQHandler+0x6a0>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d036      	beq.n	8004dc2 <HAL_DMA_IRQHandler+0x516>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a7d      	ldr	r2, [pc, #500]	@ (8004f50 <HAL_DMA_IRQHandler+0x6a4>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d031      	beq.n	8004dc2 <HAL_DMA_IRQHandler+0x516>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a7c      	ldr	r2, [pc, #496]	@ (8004f54 <HAL_DMA_IRQHandler+0x6a8>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d02c      	beq.n	8004dc2 <HAL_DMA_IRQHandler+0x516>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a7a      	ldr	r2, [pc, #488]	@ (8004f58 <HAL_DMA_IRQHandler+0x6ac>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d027      	beq.n	8004dc2 <HAL_DMA_IRQHandler+0x516>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a79      	ldr	r2, [pc, #484]	@ (8004f5c <HAL_DMA_IRQHandler+0x6b0>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d022      	beq.n	8004dc2 <HAL_DMA_IRQHandler+0x516>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a77      	ldr	r2, [pc, #476]	@ (8004f60 <HAL_DMA_IRQHandler+0x6b4>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d01d      	beq.n	8004dc2 <HAL_DMA_IRQHandler+0x516>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a76      	ldr	r2, [pc, #472]	@ (8004f64 <HAL_DMA_IRQHandler+0x6b8>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d018      	beq.n	8004dc2 <HAL_DMA_IRQHandler+0x516>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a74      	ldr	r2, [pc, #464]	@ (8004f68 <HAL_DMA_IRQHandler+0x6bc>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d013      	beq.n	8004dc2 <HAL_DMA_IRQHandler+0x516>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a73      	ldr	r2, [pc, #460]	@ (8004f6c <HAL_DMA_IRQHandler+0x6c0>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d00e      	beq.n	8004dc2 <HAL_DMA_IRQHandler+0x516>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a71      	ldr	r2, [pc, #452]	@ (8004f70 <HAL_DMA_IRQHandler+0x6c4>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d009      	beq.n	8004dc2 <HAL_DMA_IRQHandler+0x516>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a70      	ldr	r2, [pc, #448]	@ (8004f74 <HAL_DMA_IRQHandler+0x6c8>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d004      	beq.n	8004dc2 <HAL_DMA_IRQHandler+0x516>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a6e      	ldr	r2, [pc, #440]	@ (8004f78 <HAL_DMA_IRQHandler+0x6cc>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d10a      	bne.n	8004dd8 <HAL_DMA_IRQHandler+0x52c>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0308 	and.w	r3, r3, #8
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	bf14      	ite	ne
 8004dd0:	2301      	movne	r3, #1
 8004dd2:	2300      	moveq	r3, #0
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	e009      	b.n	8004dec <HAL_DMA_IRQHandler+0x540>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0304 	and.w	r3, r3, #4
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	bf14      	ite	ne
 8004de6:	2301      	movne	r3, #1
 8004de8:	2300      	moveq	r3, #0
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d03e      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004df4:	f003 031f 	and.w	r3, r3, #31
 8004df8:	2210      	movs	r2, #16
 8004dfa:	409a      	lsls	r2, r3
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d018      	beq.n	8004e40 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d108      	bne.n	8004e2e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d024      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	4798      	blx	r3
 8004e2c:	e01f      	b.n	8004e6e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d01b      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	4798      	blx	r3
 8004e3e:	e016      	b.n	8004e6e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d107      	bne.n	8004e5e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0208 	bic.w	r2, r2, #8
 8004e5c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e72:	f003 031f 	and.w	r3, r3, #31
 8004e76:	2220      	movs	r2, #32
 8004e78:	409a      	lsls	r2, r3
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 8110 	beq.w	80050a4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a2c      	ldr	r2, [pc, #176]	@ (8004f3c <HAL_DMA_IRQHandler+0x690>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d04a      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x678>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a2b      	ldr	r2, [pc, #172]	@ (8004f40 <HAL_DMA_IRQHandler+0x694>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d045      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x678>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a29      	ldr	r2, [pc, #164]	@ (8004f44 <HAL_DMA_IRQHandler+0x698>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d040      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x678>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a28      	ldr	r2, [pc, #160]	@ (8004f48 <HAL_DMA_IRQHandler+0x69c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d03b      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x678>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a26      	ldr	r2, [pc, #152]	@ (8004f4c <HAL_DMA_IRQHandler+0x6a0>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d036      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x678>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a25      	ldr	r2, [pc, #148]	@ (8004f50 <HAL_DMA_IRQHandler+0x6a4>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d031      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x678>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a23      	ldr	r2, [pc, #140]	@ (8004f54 <HAL_DMA_IRQHandler+0x6a8>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d02c      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x678>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a22      	ldr	r2, [pc, #136]	@ (8004f58 <HAL_DMA_IRQHandler+0x6ac>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d027      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x678>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a20      	ldr	r2, [pc, #128]	@ (8004f5c <HAL_DMA_IRQHandler+0x6b0>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d022      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x678>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a1f      	ldr	r2, [pc, #124]	@ (8004f60 <HAL_DMA_IRQHandler+0x6b4>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d01d      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x678>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a1d      	ldr	r2, [pc, #116]	@ (8004f64 <HAL_DMA_IRQHandler+0x6b8>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d018      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x678>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a1c      	ldr	r2, [pc, #112]	@ (8004f68 <HAL_DMA_IRQHandler+0x6bc>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d013      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x678>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a1a      	ldr	r2, [pc, #104]	@ (8004f6c <HAL_DMA_IRQHandler+0x6c0>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d00e      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x678>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a19      	ldr	r2, [pc, #100]	@ (8004f70 <HAL_DMA_IRQHandler+0x6c4>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d009      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x678>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a17      	ldr	r2, [pc, #92]	@ (8004f74 <HAL_DMA_IRQHandler+0x6c8>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d004      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x678>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a16      	ldr	r2, [pc, #88]	@ (8004f78 <HAL_DMA_IRQHandler+0x6cc>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d12b      	bne.n	8004f7c <HAL_DMA_IRQHandler+0x6d0>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0310 	and.w	r3, r3, #16
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	bf14      	ite	ne
 8004f32:	2301      	movne	r3, #1
 8004f34:	2300      	moveq	r3, #0
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	e02a      	b.n	8004f90 <HAL_DMA_IRQHandler+0x6e4>
 8004f3a:	bf00      	nop
 8004f3c:	40020010 	.word	0x40020010
 8004f40:	40020028 	.word	0x40020028
 8004f44:	40020040 	.word	0x40020040
 8004f48:	40020058 	.word	0x40020058
 8004f4c:	40020070 	.word	0x40020070
 8004f50:	40020088 	.word	0x40020088
 8004f54:	400200a0 	.word	0x400200a0
 8004f58:	400200b8 	.word	0x400200b8
 8004f5c:	40020410 	.word	0x40020410
 8004f60:	40020428 	.word	0x40020428
 8004f64:	40020440 	.word	0x40020440
 8004f68:	40020458 	.word	0x40020458
 8004f6c:	40020470 	.word	0x40020470
 8004f70:	40020488 	.word	0x40020488
 8004f74:	400204a0 	.word	0x400204a0
 8004f78:	400204b8 	.word	0x400204b8
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	bf14      	ite	ne
 8004f8a:	2301      	movne	r3, #1
 8004f8c:	2300      	moveq	r3, #0
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 8087 	beq.w	80050a4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f9a:	f003 031f 	and.w	r3, r3, #31
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	409a      	lsls	r2, r3
 8004fa2:	6a3b      	ldr	r3, [r7, #32]
 8004fa4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b04      	cmp	r3, #4
 8004fb0:	d139      	bne.n	8005026 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f022 0216 	bic.w	r2, r2, #22
 8004fc0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	695a      	ldr	r2, [r3, #20]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004fd0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d103      	bne.n	8004fe2 <HAL_DMA_IRQHandler+0x736>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d007      	beq.n	8004ff2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 0208 	bic.w	r2, r2, #8
 8004ff0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ff6:	f003 031f 	and.w	r3, r3, #31
 8004ffa:	223f      	movs	r2, #63	@ 0x3f
 8004ffc:	409a      	lsls	r2, r3
 8004ffe:	6a3b      	ldr	r3, [r7, #32]
 8005000:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005016:	2b00      	cmp	r3, #0
 8005018:	f000 834a 	beq.w	80056b0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	4798      	blx	r3
          }
          return;
 8005024:	e344      	b.n	80056b0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d018      	beq.n	8005066 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d108      	bne.n	8005054 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005046:	2b00      	cmp	r3, #0
 8005048:	d02c      	beq.n	80050a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	4798      	blx	r3
 8005052:	e027      	b.n	80050a4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005058:	2b00      	cmp	r3, #0
 800505a:	d023      	beq.n	80050a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	4798      	blx	r3
 8005064:	e01e      	b.n	80050a4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10f      	bne.n	8005094 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f022 0210 	bic.w	r2, r2, #16
 8005082:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 8306 	beq.w	80056ba <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 8088 	beq.w	80051cc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2204      	movs	r2, #4
 80050c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a7a      	ldr	r2, [pc, #488]	@ (80052b4 <HAL_DMA_IRQHandler+0xa08>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d04a      	beq.n	8005164 <HAL_DMA_IRQHandler+0x8b8>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a79      	ldr	r2, [pc, #484]	@ (80052b8 <HAL_DMA_IRQHandler+0xa0c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d045      	beq.n	8005164 <HAL_DMA_IRQHandler+0x8b8>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a77      	ldr	r2, [pc, #476]	@ (80052bc <HAL_DMA_IRQHandler+0xa10>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d040      	beq.n	8005164 <HAL_DMA_IRQHandler+0x8b8>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a76      	ldr	r2, [pc, #472]	@ (80052c0 <HAL_DMA_IRQHandler+0xa14>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d03b      	beq.n	8005164 <HAL_DMA_IRQHandler+0x8b8>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a74      	ldr	r2, [pc, #464]	@ (80052c4 <HAL_DMA_IRQHandler+0xa18>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d036      	beq.n	8005164 <HAL_DMA_IRQHandler+0x8b8>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a73      	ldr	r2, [pc, #460]	@ (80052c8 <HAL_DMA_IRQHandler+0xa1c>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d031      	beq.n	8005164 <HAL_DMA_IRQHandler+0x8b8>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a71      	ldr	r2, [pc, #452]	@ (80052cc <HAL_DMA_IRQHandler+0xa20>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d02c      	beq.n	8005164 <HAL_DMA_IRQHandler+0x8b8>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a70      	ldr	r2, [pc, #448]	@ (80052d0 <HAL_DMA_IRQHandler+0xa24>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d027      	beq.n	8005164 <HAL_DMA_IRQHandler+0x8b8>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a6e      	ldr	r2, [pc, #440]	@ (80052d4 <HAL_DMA_IRQHandler+0xa28>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d022      	beq.n	8005164 <HAL_DMA_IRQHandler+0x8b8>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a6d      	ldr	r2, [pc, #436]	@ (80052d8 <HAL_DMA_IRQHandler+0xa2c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d01d      	beq.n	8005164 <HAL_DMA_IRQHandler+0x8b8>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a6b      	ldr	r2, [pc, #428]	@ (80052dc <HAL_DMA_IRQHandler+0xa30>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d018      	beq.n	8005164 <HAL_DMA_IRQHandler+0x8b8>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a6a      	ldr	r2, [pc, #424]	@ (80052e0 <HAL_DMA_IRQHandler+0xa34>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d013      	beq.n	8005164 <HAL_DMA_IRQHandler+0x8b8>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a68      	ldr	r2, [pc, #416]	@ (80052e4 <HAL_DMA_IRQHandler+0xa38>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d00e      	beq.n	8005164 <HAL_DMA_IRQHandler+0x8b8>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a67      	ldr	r2, [pc, #412]	@ (80052e8 <HAL_DMA_IRQHandler+0xa3c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d009      	beq.n	8005164 <HAL_DMA_IRQHandler+0x8b8>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a65      	ldr	r2, [pc, #404]	@ (80052ec <HAL_DMA_IRQHandler+0xa40>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d004      	beq.n	8005164 <HAL_DMA_IRQHandler+0x8b8>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a64      	ldr	r2, [pc, #400]	@ (80052f0 <HAL_DMA_IRQHandler+0xa44>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d108      	bne.n	8005176 <HAL_DMA_IRQHandler+0x8ca>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 0201 	bic.w	r2, r2, #1
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	e007      	b.n	8005186 <HAL_DMA_IRQHandler+0x8da>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 0201 	bic.w	r2, r2, #1
 8005184:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	3301      	adds	r3, #1
 800518a:	60fb      	str	r3, [r7, #12]
 800518c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800518e:	429a      	cmp	r2, r3
 8005190:	d307      	bcc.n	80051a2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1f2      	bne.n	8005186 <HAL_DMA_IRQHandler+0x8da>
 80051a0:	e000      	b.n	80051a4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80051a2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d004      	beq.n	80051bc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2203      	movs	r2, #3
 80051b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80051ba:	e003      	b.n	80051c4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f000 8272 	beq.w	80056ba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	4798      	blx	r3
 80051de:	e26c      	b.n	80056ba <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a43      	ldr	r2, [pc, #268]	@ (80052f4 <HAL_DMA_IRQHandler+0xa48>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d022      	beq.n	8005230 <HAL_DMA_IRQHandler+0x984>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a42      	ldr	r2, [pc, #264]	@ (80052f8 <HAL_DMA_IRQHandler+0xa4c>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d01d      	beq.n	8005230 <HAL_DMA_IRQHandler+0x984>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a40      	ldr	r2, [pc, #256]	@ (80052fc <HAL_DMA_IRQHandler+0xa50>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d018      	beq.n	8005230 <HAL_DMA_IRQHandler+0x984>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a3f      	ldr	r2, [pc, #252]	@ (8005300 <HAL_DMA_IRQHandler+0xa54>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d013      	beq.n	8005230 <HAL_DMA_IRQHandler+0x984>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a3d      	ldr	r2, [pc, #244]	@ (8005304 <HAL_DMA_IRQHandler+0xa58>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d00e      	beq.n	8005230 <HAL_DMA_IRQHandler+0x984>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a3c      	ldr	r2, [pc, #240]	@ (8005308 <HAL_DMA_IRQHandler+0xa5c>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d009      	beq.n	8005230 <HAL_DMA_IRQHandler+0x984>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a3a      	ldr	r2, [pc, #232]	@ (800530c <HAL_DMA_IRQHandler+0xa60>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d004      	beq.n	8005230 <HAL_DMA_IRQHandler+0x984>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a39      	ldr	r2, [pc, #228]	@ (8005310 <HAL_DMA_IRQHandler+0xa64>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d101      	bne.n	8005234 <HAL_DMA_IRQHandler+0x988>
 8005230:	2301      	movs	r3, #1
 8005232:	e000      	b.n	8005236 <HAL_DMA_IRQHandler+0x98a>
 8005234:	2300      	movs	r3, #0
 8005236:	2b00      	cmp	r3, #0
 8005238:	f000 823f 	beq.w	80056ba <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005248:	f003 031f 	and.w	r3, r3, #31
 800524c:	2204      	movs	r2, #4
 800524e:	409a      	lsls	r2, r3
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	4013      	ands	r3, r2
 8005254:	2b00      	cmp	r3, #0
 8005256:	f000 80cd 	beq.w	80053f4 <HAL_DMA_IRQHandler+0xb48>
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	f003 0304 	and.w	r3, r3, #4
 8005260:	2b00      	cmp	r3, #0
 8005262:	f000 80c7 	beq.w	80053f4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800526a:	f003 031f 	and.w	r3, r3, #31
 800526e:	2204      	movs	r2, #4
 8005270:	409a      	lsls	r2, r3
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d049      	beq.n	8005314 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d109      	bne.n	800529e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800528e:	2b00      	cmp	r3, #0
 8005290:	f000 8210 	beq.w	80056b4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800529c:	e20a      	b.n	80056b4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 8206 	beq.w	80056b4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052b0:	e200      	b.n	80056b4 <HAL_DMA_IRQHandler+0xe08>
 80052b2:	bf00      	nop
 80052b4:	40020010 	.word	0x40020010
 80052b8:	40020028 	.word	0x40020028
 80052bc:	40020040 	.word	0x40020040
 80052c0:	40020058 	.word	0x40020058
 80052c4:	40020070 	.word	0x40020070
 80052c8:	40020088 	.word	0x40020088
 80052cc:	400200a0 	.word	0x400200a0
 80052d0:	400200b8 	.word	0x400200b8
 80052d4:	40020410 	.word	0x40020410
 80052d8:	40020428 	.word	0x40020428
 80052dc:	40020440 	.word	0x40020440
 80052e0:	40020458 	.word	0x40020458
 80052e4:	40020470 	.word	0x40020470
 80052e8:	40020488 	.word	0x40020488
 80052ec:	400204a0 	.word	0x400204a0
 80052f0:	400204b8 	.word	0x400204b8
 80052f4:	58025408 	.word	0x58025408
 80052f8:	5802541c 	.word	0x5802541c
 80052fc:	58025430 	.word	0x58025430
 8005300:	58025444 	.word	0x58025444
 8005304:	58025458 	.word	0x58025458
 8005308:	5802546c 	.word	0x5802546c
 800530c:	58025480 	.word	0x58025480
 8005310:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	f003 0320 	and.w	r3, r3, #32
 800531a:	2b00      	cmp	r3, #0
 800531c:	d160      	bne.n	80053e0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a7f      	ldr	r2, [pc, #508]	@ (8005520 <HAL_DMA_IRQHandler+0xc74>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d04a      	beq.n	80053be <HAL_DMA_IRQHandler+0xb12>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a7d      	ldr	r2, [pc, #500]	@ (8005524 <HAL_DMA_IRQHandler+0xc78>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d045      	beq.n	80053be <HAL_DMA_IRQHandler+0xb12>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a7c      	ldr	r2, [pc, #496]	@ (8005528 <HAL_DMA_IRQHandler+0xc7c>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d040      	beq.n	80053be <HAL_DMA_IRQHandler+0xb12>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a7a      	ldr	r2, [pc, #488]	@ (800552c <HAL_DMA_IRQHandler+0xc80>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d03b      	beq.n	80053be <HAL_DMA_IRQHandler+0xb12>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a79      	ldr	r2, [pc, #484]	@ (8005530 <HAL_DMA_IRQHandler+0xc84>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d036      	beq.n	80053be <HAL_DMA_IRQHandler+0xb12>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a77      	ldr	r2, [pc, #476]	@ (8005534 <HAL_DMA_IRQHandler+0xc88>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d031      	beq.n	80053be <HAL_DMA_IRQHandler+0xb12>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a76      	ldr	r2, [pc, #472]	@ (8005538 <HAL_DMA_IRQHandler+0xc8c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d02c      	beq.n	80053be <HAL_DMA_IRQHandler+0xb12>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a74      	ldr	r2, [pc, #464]	@ (800553c <HAL_DMA_IRQHandler+0xc90>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d027      	beq.n	80053be <HAL_DMA_IRQHandler+0xb12>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a73      	ldr	r2, [pc, #460]	@ (8005540 <HAL_DMA_IRQHandler+0xc94>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d022      	beq.n	80053be <HAL_DMA_IRQHandler+0xb12>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a71      	ldr	r2, [pc, #452]	@ (8005544 <HAL_DMA_IRQHandler+0xc98>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d01d      	beq.n	80053be <HAL_DMA_IRQHandler+0xb12>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a70      	ldr	r2, [pc, #448]	@ (8005548 <HAL_DMA_IRQHandler+0xc9c>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d018      	beq.n	80053be <HAL_DMA_IRQHandler+0xb12>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a6e      	ldr	r2, [pc, #440]	@ (800554c <HAL_DMA_IRQHandler+0xca0>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d013      	beq.n	80053be <HAL_DMA_IRQHandler+0xb12>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a6d      	ldr	r2, [pc, #436]	@ (8005550 <HAL_DMA_IRQHandler+0xca4>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d00e      	beq.n	80053be <HAL_DMA_IRQHandler+0xb12>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a6b      	ldr	r2, [pc, #428]	@ (8005554 <HAL_DMA_IRQHandler+0xca8>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d009      	beq.n	80053be <HAL_DMA_IRQHandler+0xb12>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a6a      	ldr	r2, [pc, #424]	@ (8005558 <HAL_DMA_IRQHandler+0xcac>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d004      	beq.n	80053be <HAL_DMA_IRQHandler+0xb12>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a68      	ldr	r2, [pc, #416]	@ (800555c <HAL_DMA_IRQHandler+0xcb0>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d108      	bne.n	80053d0 <HAL_DMA_IRQHandler+0xb24>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 0208 	bic.w	r2, r2, #8
 80053cc:	601a      	str	r2, [r3, #0]
 80053ce:	e007      	b.n	80053e0 <HAL_DMA_IRQHandler+0xb34>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 0204 	bic.w	r2, r2, #4
 80053de:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f000 8165 	beq.w	80056b4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053f2:	e15f      	b.n	80056b4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053f8:	f003 031f 	and.w	r3, r3, #31
 80053fc:	2202      	movs	r2, #2
 80053fe:	409a      	lsls	r2, r3
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	4013      	ands	r3, r2
 8005404:	2b00      	cmp	r3, #0
 8005406:	f000 80c5 	beq.w	8005594 <HAL_DMA_IRQHandler+0xce8>
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 80bf 	beq.w	8005594 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800541a:	f003 031f 	and.w	r3, r3, #31
 800541e:	2202      	movs	r2, #2
 8005420:	409a      	lsls	r2, r3
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d018      	beq.n	8005462 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d109      	bne.n	800544e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800543e:	2b00      	cmp	r3, #0
 8005440:	f000 813a 	beq.w	80056b8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800544c:	e134      	b.n	80056b8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 8130 	beq.w	80056b8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005460:	e12a      	b.n	80056b8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	f003 0320 	and.w	r3, r3, #32
 8005468:	2b00      	cmp	r3, #0
 800546a:	f040 8089 	bne.w	8005580 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a2b      	ldr	r2, [pc, #172]	@ (8005520 <HAL_DMA_IRQHandler+0xc74>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d04a      	beq.n	800550e <HAL_DMA_IRQHandler+0xc62>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a29      	ldr	r2, [pc, #164]	@ (8005524 <HAL_DMA_IRQHandler+0xc78>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d045      	beq.n	800550e <HAL_DMA_IRQHandler+0xc62>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a28      	ldr	r2, [pc, #160]	@ (8005528 <HAL_DMA_IRQHandler+0xc7c>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d040      	beq.n	800550e <HAL_DMA_IRQHandler+0xc62>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a26      	ldr	r2, [pc, #152]	@ (800552c <HAL_DMA_IRQHandler+0xc80>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d03b      	beq.n	800550e <HAL_DMA_IRQHandler+0xc62>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a25      	ldr	r2, [pc, #148]	@ (8005530 <HAL_DMA_IRQHandler+0xc84>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d036      	beq.n	800550e <HAL_DMA_IRQHandler+0xc62>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a23      	ldr	r2, [pc, #140]	@ (8005534 <HAL_DMA_IRQHandler+0xc88>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d031      	beq.n	800550e <HAL_DMA_IRQHandler+0xc62>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a22      	ldr	r2, [pc, #136]	@ (8005538 <HAL_DMA_IRQHandler+0xc8c>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d02c      	beq.n	800550e <HAL_DMA_IRQHandler+0xc62>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a20      	ldr	r2, [pc, #128]	@ (800553c <HAL_DMA_IRQHandler+0xc90>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d027      	beq.n	800550e <HAL_DMA_IRQHandler+0xc62>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a1f      	ldr	r2, [pc, #124]	@ (8005540 <HAL_DMA_IRQHandler+0xc94>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d022      	beq.n	800550e <HAL_DMA_IRQHandler+0xc62>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005544 <HAL_DMA_IRQHandler+0xc98>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d01d      	beq.n	800550e <HAL_DMA_IRQHandler+0xc62>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a1c      	ldr	r2, [pc, #112]	@ (8005548 <HAL_DMA_IRQHandler+0xc9c>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d018      	beq.n	800550e <HAL_DMA_IRQHandler+0xc62>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a1a      	ldr	r2, [pc, #104]	@ (800554c <HAL_DMA_IRQHandler+0xca0>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d013      	beq.n	800550e <HAL_DMA_IRQHandler+0xc62>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a19      	ldr	r2, [pc, #100]	@ (8005550 <HAL_DMA_IRQHandler+0xca4>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d00e      	beq.n	800550e <HAL_DMA_IRQHandler+0xc62>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a17      	ldr	r2, [pc, #92]	@ (8005554 <HAL_DMA_IRQHandler+0xca8>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d009      	beq.n	800550e <HAL_DMA_IRQHandler+0xc62>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a16      	ldr	r2, [pc, #88]	@ (8005558 <HAL_DMA_IRQHandler+0xcac>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d004      	beq.n	800550e <HAL_DMA_IRQHandler+0xc62>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a14      	ldr	r2, [pc, #80]	@ (800555c <HAL_DMA_IRQHandler+0xcb0>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d128      	bne.n	8005560 <HAL_DMA_IRQHandler+0xcb4>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 0214 	bic.w	r2, r2, #20
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	e027      	b.n	8005570 <HAL_DMA_IRQHandler+0xcc4>
 8005520:	40020010 	.word	0x40020010
 8005524:	40020028 	.word	0x40020028
 8005528:	40020040 	.word	0x40020040
 800552c:	40020058 	.word	0x40020058
 8005530:	40020070 	.word	0x40020070
 8005534:	40020088 	.word	0x40020088
 8005538:	400200a0 	.word	0x400200a0
 800553c:	400200b8 	.word	0x400200b8
 8005540:	40020410 	.word	0x40020410
 8005544:	40020428 	.word	0x40020428
 8005548:	40020440 	.word	0x40020440
 800554c:	40020458 	.word	0x40020458
 8005550:	40020470 	.word	0x40020470
 8005554:	40020488 	.word	0x40020488
 8005558:	400204a0 	.word	0x400204a0
 800555c:	400204b8 	.word	0x400204b8
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f022 020a 	bic.w	r2, r2, #10
 800556e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 8097 	beq.w	80056b8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005592:	e091      	b.n	80056b8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005598:	f003 031f 	and.w	r3, r3, #31
 800559c:	2208      	movs	r2, #8
 800559e:	409a      	lsls	r2, r3
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	4013      	ands	r3, r2
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 8088 	beq.w	80056ba <HAL_DMA_IRQHandler+0xe0e>
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	f003 0308 	and.w	r3, r3, #8
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f000 8082 	beq.w	80056ba <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a41      	ldr	r2, [pc, #260]	@ (80056c0 <HAL_DMA_IRQHandler+0xe14>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d04a      	beq.n	8005656 <HAL_DMA_IRQHandler+0xdaa>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a3f      	ldr	r2, [pc, #252]	@ (80056c4 <HAL_DMA_IRQHandler+0xe18>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d045      	beq.n	8005656 <HAL_DMA_IRQHandler+0xdaa>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a3e      	ldr	r2, [pc, #248]	@ (80056c8 <HAL_DMA_IRQHandler+0xe1c>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d040      	beq.n	8005656 <HAL_DMA_IRQHandler+0xdaa>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a3c      	ldr	r2, [pc, #240]	@ (80056cc <HAL_DMA_IRQHandler+0xe20>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d03b      	beq.n	8005656 <HAL_DMA_IRQHandler+0xdaa>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a3b      	ldr	r2, [pc, #236]	@ (80056d0 <HAL_DMA_IRQHandler+0xe24>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d036      	beq.n	8005656 <HAL_DMA_IRQHandler+0xdaa>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a39      	ldr	r2, [pc, #228]	@ (80056d4 <HAL_DMA_IRQHandler+0xe28>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d031      	beq.n	8005656 <HAL_DMA_IRQHandler+0xdaa>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a38      	ldr	r2, [pc, #224]	@ (80056d8 <HAL_DMA_IRQHandler+0xe2c>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d02c      	beq.n	8005656 <HAL_DMA_IRQHandler+0xdaa>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a36      	ldr	r2, [pc, #216]	@ (80056dc <HAL_DMA_IRQHandler+0xe30>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d027      	beq.n	8005656 <HAL_DMA_IRQHandler+0xdaa>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a35      	ldr	r2, [pc, #212]	@ (80056e0 <HAL_DMA_IRQHandler+0xe34>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d022      	beq.n	8005656 <HAL_DMA_IRQHandler+0xdaa>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a33      	ldr	r2, [pc, #204]	@ (80056e4 <HAL_DMA_IRQHandler+0xe38>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d01d      	beq.n	8005656 <HAL_DMA_IRQHandler+0xdaa>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a32      	ldr	r2, [pc, #200]	@ (80056e8 <HAL_DMA_IRQHandler+0xe3c>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d018      	beq.n	8005656 <HAL_DMA_IRQHandler+0xdaa>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a30      	ldr	r2, [pc, #192]	@ (80056ec <HAL_DMA_IRQHandler+0xe40>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d013      	beq.n	8005656 <HAL_DMA_IRQHandler+0xdaa>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a2f      	ldr	r2, [pc, #188]	@ (80056f0 <HAL_DMA_IRQHandler+0xe44>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00e      	beq.n	8005656 <HAL_DMA_IRQHandler+0xdaa>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a2d      	ldr	r2, [pc, #180]	@ (80056f4 <HAL_DMA_IRQHandler+0xe48>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d009      	beq.n	8005656 <HAL_DMA_IRQHandler+0xdaa>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a2c      	ldr	r2, [pc, #176]	@ (80056f8 <HAL_DMA_IRQHandler+0xe4c>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d004      	beq.n	8005656 <HAL_DMA_IRQHandler+0xdaa>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a2a      	ldr	r2, [pc, #168]	@ (80056fc <HAL_DMA_IRQHandler+0xe50>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d108      	bne.n	8005668 <HAL_DMA_IRQHandler+0xdbc>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f022 021c 	bic.w	r2, r2, #28
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	e007      	b.n	8005678 <HAL_DMA_IRQHandler+0xdcc>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f022 020e 	bic.w	r2, r2, #14
 8005676:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800567c:	f003 031f 	and.w	r3, r3, #31
 8005680:	2201      	movs	r2, #1
 8005682:	409a      	lsls	r2, r3
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d009      	beq.n	80056ba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	4798      	blx	r3
 80056ae:	e004      	b.n	80056ba <HAL_DMA_IRQHandler+0xe0e>
          return;
 80056b0:	bf00      	nop
 80056b2:	e002      	b.n	80056ba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056b4:	bf00      	nop
 80056b6:	e000      	b.n	80056ba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056b8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80056ba:	3728      	adds	r7, #40	@ 0x28
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	40020010 	.word	0x40020010
 80056c4:	40020028 	.word	0x40020028
 80056c8:	40020040 	.word	0x40020040
 80056cc:	40020058 	.word	0x40020058
 80056d0:	40020070 	.word	0x40020070
 80056d4:	40020088 	.word	0x40020088
 80056d8:	400200a0 	.word	0x400200a0
 80056dc:	400200b8 	.word	0x400200b8
 80056e0:	40020410 	.word	0x40020410
 80056e4:	40020428 	.word	0x40020428
 80056e8:	40020440 	.word	0x40020440
 80056ec:	40020458 	.word	0x40020458
 80056f0:	40020470 	.word	0x40020470
 80056f4:	40020488 	.word	0x40020488
 80056f8:	400204a0 	.word	0x400204a0
 80056fc:	400204b8 	.word	0x400204b8

08005700 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a42      	ldr	r2, [pc, #264]	@ (8005818 <DMA_CalcBaseAndBitshift+0x118>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d04a      	beq.n	80057a8 <DMA_CalcBaseAndBitshift+0xa8>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a41      	ldr	r2, [pc, #260]	@ (800581c <DMA_CalcBaseAndBitshift+0x11c>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d045      	beq.n	80057a8 <DMA_CalcBaseAndBitshift+0xa8>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a3f      	ldr	r2, [pc, #252]	@ (8005820 <DMA_CalcBaseAndBitshift+0x120>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d040      	beq.n	80057a8 <DMA_CalcBaseAndBitshift+0xa8>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a3e      	ldr	r2, [pc, #248]	@ (8005824 <DMA_CalcBaseAndBitshift+0x124>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d03b      	beq.n	80057a8 <DMA_CalcBaseAndBitshift+0xa8>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a3c      	ldr	r2, [pc, #240]	@ (8005828 <DMA_CalcBaseAndBitshift+0x128>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d036      	beq.n	80057a8 <DMA_CalcBaseAndBitshift+0xa8>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a3b      	ldr	r2, [pc, #236]	@ (800582c <DMA_CalcBaseAndBitshift+0x12c>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d031      	beq.n	80057a8 <DMA_CalcBaseAndBitshift+0xa8>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a39      	ldr	r2, [pc, #228]	@ (8005830 <DMA_CalcBaseAndBitshift+0x130>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d02c      	beq.n	80057a8 <DMA_CalcBaseAndBitshift+0xa8>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a38      	ldr	r2, [pc, #224]	@ (8005834 <DMA_CalcBaseAndBitshift+0x134>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d027      	beq.n	80057a8 <DMA_CalcBaseAndBitshift+0xa8>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a36      	ldr	r2, [pc, #216]	@ (8005838 <DMA_CalcBaseAndBitshift+0x138>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d022      	beq.n	80057a8 <DMA_CalcBaseAndBitshift+0xa8>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a35      	ldr	r2, [pc, #212]	@ (800583c <DMA_CalcBaseAndBitshift+0x13c>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d01d      	beq.n	80057a8 <DMA_CalcBaseAndBitshift+0xa8>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a33      	ldr	r2, [pc, #204]	@ (8005840 <DMA_CalcBaseAndBitshift+0x140>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d018      	beq.n	80057a8 <DMA_CalcBaseAndBitshift+0xa8>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a32      	ldr	r2, [pc, #200]	@ (8005844 <DMA_CalcBaseAndBitshift+0x144>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d013      	beq.n	80057a8 <DMA_CalcBaseAndBitshift+0xa8>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a30      	ldr	r2, [pc, #192]	@ (8005848 <DMA_CalcBaseAndBitshift+0x148>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d00e      	beq.n	80057a8 <DMA_CalcBaseAndBitshift+0xa8>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a2f      	ldr	r2, [pc, #188]	@ (800584c <DMA_CalcBaseAndBitshift+0x14c>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d009      	beq.n	80057a8 <DMA_CalcBaseAndBitshift+0xa8>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a2d      	ldr	r2, [pc, #180]	@ (8005850 <DMA_CalcBaseAndBitshift+0x150>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d004      	beq.n	80057a8 <DMA_CalcBaseAndBitshift+0xa8>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a2c      	ldr	r2, [pc, #176]	@ (8005854 <DMA_CalcBaseAndBitshift+0x154>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d101      	bne.n	80057ac <DMA_CalcBaseAndBitshift+0xac>
 80057a8:	2301      	movs	r3, #1
 80057aa:	e000      	b.n	80057ae <DMA_CalcBaseAndBitshift+0xae>
 80057ac:	2300      	movs	r3, #0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d024      	beq.n	80057fc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	3b10      	subs	r3, #16
 80057ba:	4a27      	ldr	r2, [pc, #156]	@ (8005858 <DMA_CalcBaseAndBitshift+0x158>)
 80057bc:	fba2 2303 	umull	r2, r3, r2, r3
 80057c0:	091b      	lsrs	r3, r3, #4
 80057c2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f003 0307 	and.w	r3, r3, #7
 80057ca:	4a24      	ldr	r2, [pc, #144]	@ (800585c <DMA_CalcBaseAndBitshift+0x15c>)
 80057cc:	5cd3      	ldrb	r3, [r2, r3]
 80057ce:	461a      	mov	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2b03      	cmp	r3, #3
 80057d8:	d908      	bls.n	80057ec <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	461a      	mov	r2, r3
 80057e0:	4b1f      	ldr	r3, [pc, #124]	@ (8005860 <DMA_CalcBaseAndBitshift+0x160>)
 80057e2:	4013      	ands	r3, r2
 80057e4:	1d1a      	adds	r2, r3, #4
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	659a      	str	r2, [r3, #88]	@ 0x58
 80057ea:	e00d      	b.n	8005808 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	461a      	mov	r2, r3
 80057f2:	4b1b      	ldr	r3, [pc, #108]	@ (8005860 <DMA_CalcBaseAndBitshift+0x160>)
 80057f4:	4013      	ands	r3, r2
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80057fa:	e005      	b.n	8005808 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800580c:	4618      	mov	r0, r3
 800580e:	3714      	adds	r7, #20
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr
 8005818:	40020010 	.word	0x40020010
 800581c:	40020028 	.word	0x40020028
 8005820:	40020040 	.word	0x40020040
 8005824:	40020058 	.word	0x40020058
 8005828:	40020070 	.word	0x40020070
 800582c:	40020088 	.word	0x40020088
 8005830:	400200a0 	.word	0x400200a0
 8005834:	400200b8 	.word	0x400200b8
 8005838:	40020410 	.word	0x40020410
 800583c:	40020428 	.word	0x40020428
 8005840:	40020440 	.word	0x40020440
 8005844:	40020458 	.word	0x40020458
 8005848:	40020470 	.word	0x40020470
 800584c:	40020488 	.word	0x40020488
 8005850:	400204a0 	.word	0x400204a0
 8005854:	400204b8 	.word	0x400204b8
 8005858:	aaaaaaab 	.word	0xaaaaaaab
 800585c:	08012810 	.word	0x08012810
 8005860:	fffffc00 	.word	0xfffffc00

08005864 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800586c:	2300      	movs	r3, #0
 800586e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d120      	bne.n	80058ba <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800587c:	2b03      	cmp	r3, #3
 800587e:	d858      	bhi.n	8005932 <DMA_CheckFifoParam+0xce>
 8005880:	a201      	add	r2, pc, #4	@ (adr r2, 8005888 <DMA_CheckFifoParam+0x24>)
 8005882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005886:	bf00      	nop
 8005888:	08005899 	.word	0x08005899
 800588c:	080058ab 	.word	0x080058ab
 8005890:	08005899 	.word	0x08005899
 8005894:	08005933 	.word	0x08005933
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d048      	beq.n	8005936 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058a8:	e045      	b.n	8005936 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80058b2:	d142      	bne.n	800593a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058b8:	e03f      	b.n	800593a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058c2:	d123      	bne.n	800590c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c8:	2b03      	cmp	r3, #3
 80058ca:	d838      	bhi.n	800593e <DMA_CheckFifoParam+0xda>
 80058cc:	a201      	add	r2, pc, #4	@ (adr r2, 80058d4 <DMA_CheckFifoParam+0x70>)
 80058ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d2:	bf00      	nop
 80058d4:	080058e5 	.word	0x080058e5
 80058d8:	080058eb 	.word	0x080058eb
 80058dc:	080058e5 	.word	0x080058e5
 80058e0:	080058fd 	.word	0x080058fd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	73fb      	strb	r3, [r7, #15]
        break;
 80058e8:	e030      	b.n	800594c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d025      	beq.n	8005942 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058fa:	e022      	b.n	8005942 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005900:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005904:	d11f      	bne.n	8005946 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800590a:	e01c      	b.n	8005946 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005910:	2b02      	cmp	r3, #2
 8005912:	d902      	bls.n	800591a <DMA_CheckFifoParam+0xb6>
 8005914:	2b03      	cmp	r3, #3
 8005916:	d003      	beq.n	8005920 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005918:	e018      	b.n	800594c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	73fb      	strb	r3, [r7, #15]
        break;
 800591e:	e015      	b.n	800594c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005924:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00e      	beq.n	800594a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	73fb      	strb	r3, [r7, #15]
    break;
 8005930:	e00b      	b.n	800594a <DMA_CheckFifoParam+0xe6>
        break;
 8005932:	bf00      	nop
 8005934:	e00a      	b.n	800594c <DMA_CheckFifoParam+0xe8>
        break;
 8005936:	bf00      	nop
 8005938:	e008      	b.n	800594c <DMA_CheckFifoParam+0xe8>
        break;
 800593a:	bf00      	nop
 800593c:	e006      	b.n	800594c <DMA_CheckFifoParam+0xe8>
        break;
 800593e:	bf00      	nop
 8005940:	e004      	b.n	800594c <DMA_CheckFifoParam+0xe8>
        break;
 8005942:	bf00      	nop
 8005944:	e002      	b.n	800594c <DMA_CheckFifoParam+0xe8>
        break;
 8005946:	bf00      	nop
 8005948:	e000      	b.n	800594c <DMA_CheckFifoParam+0xe8>
    break;
 800594a:	bf00      	nop
    }
  }

  return status;
 800594c:	7bfb      	ldrb	r3, [r7, #15]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop

0800595c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a38      	ldr	r2, [pc, #224]	@ (8005a50 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d022      	beq.n	80059ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a36      	ldr	r2, [pc, #216]	@ (8005a54 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d01d      	beq.n	80059ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a35      	ldr	r2, [pc, #212]	@ (8005a58 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d018      	beq.n	80059ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a33      	ldr	r2, [pc, #204]	@ (8005a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d013      	beq.n	80059ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a32      	ldr	r2, [pc, #200]	@ (8005a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d00e      	beq.n	80059ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a30      	ldr	r2, [pc, #192]	@ (8005a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d009      	beq.n	80059ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a2f      	ldr	r2, [pc, #188]	@ (8005a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d004      	beq.n	80059ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a2d      	ldr	r2, [pc, #180]	@ (8005a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d101      	bne.n	80059be <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80059ba:	2301      	movs	r3, #1
 80059bc:	e000      	b.n	80059c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80059be:	2300      	movs	r3, #0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d01a      	beq.n	80059fa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	3b08      	subs	r3, #8
 80059cc:	4a28      	ldr	r2, [pc, #160]	@ (8005a70 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80059ce:	fba2 2303 	umull	r2, r3, r2, r3
 80059d2:	091b      	lsrs	r3, r3, #4
 80059d4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4b26      	ldr	r3, [pc, #152]	@ (8005a74 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80059da:	4413      	add	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	461a      	mov	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a24      	ldr	r2, [pc, #144]	@ (8005a78 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80059e8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f003 031f 	and.w	r3, r3, #31
 80059f0:	2201      	movs	r2, #1
 80059f2:	409a      	lsls	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80059f8:	e024      	b.n	8005a44 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	3b10      	subs	r3, #16
 8005a02:	4a1e      	ldr	r2, [pc, #120]	@ (8005a7c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005a04:	fba2 2303 	umull	r2, r3, r2, r3
 8005a08:	091b      	lsrs	r3, r3, #4
 8005a0a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	4a1c      	ldr	r2, [pc, #112]	@ (8005a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d806      	bhi.n	8005a22 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	4a1b      	ldr	r2, [pc, #108]	@ (8005a84 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d902      	bls.n	8005a22 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	3308      	adds	r3, #8
 8005a20:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	4b18      	ldr	r3, [pc, #96]	@ (8005a88 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005a26:	4413      	add	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a16      	ldr	r2, [pc, #88]	@ (8005a8c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005a34:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f003 031f 	and.w	r3, r3, #31
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	409a      	lsls	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005a44:	bf00      	nop
 8005a46:	3714      	adds	r7, #20
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr
 8005a50:	58025408 	.word	0x58025408
 8005a54:	5802541c 	.word	0x5802541c
 8005a58:	58025430 	.word	0x58025430
 8005a5c:	58025444 	.word	0x58025444
 8005a60:	58025458 	.word	0x58025458
 8005a64:	5802546c 	.word	0x5802546c
 8005a68:	58025480 	.word	0x58025480
 8005a6c:	58025494 	.word	0x58025494
 8005a70:	cccccccd 	.word	0xcccccccd
 8005a74:	16009600 	.word	0x16009600
 8005a78:	58025880 	.word	0x58025880
 8005a7c:	aaaaaaab 	.word	0xaaaaaaab
 8005a80:	400204b8 	.word	0x400204b8
 8005a84:	4002040f 	.word	0x4002040f
 8005a88:	10008200 	.word	0x10008200
 8005a8c:	40020880 	.word	0x40020880

08005a90 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d04a      	beq.n	8005b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d847      	bhi.n	8005b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a25      	ldr	r2, [pc, #148]	@ (8005b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d022      	beq.n	8005afc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a24      	ldr	r2, [pc, #144]	@ (8005b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d01d      	beq.n	8005afc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a22      	ldr	r2, [pc, #136]	@ (8005b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d018      	beq.n	8005afc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a21      	ldr	r2, [pc, #132]	@ (8005b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d013      	beq.n	8005afc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a1f      	ldr	r2, [pc, #124]	@ (8005b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d00e      	beq.n	8005afc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8005b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d009      	beq.n	8005afc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a1c      	ldr	r2, [pc, #112]	@ (8005b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d004      	beq.n	8005afc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a1b      	ldr	r2, [pc, #108]	@ (8005b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d101      	bne.n	8005b00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005afc:	2301      	movs	r3, #1
 8005afe:	e000      	b.n	8005b02 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005b00:	2300      	movs	r3, #0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00a      	beq.n	8005b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	4b17      	ldr	r3, [pc, #92]	@ (8005b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005b0a:	4413      	add	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	461a      	mov	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a15      	ldr	r2, [pc, #84]	@ (8005b6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005b18:	671a      	str	r2, [r3, #112]	@ 0x70
 8005b1a:	e009      	b.n	8005b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	4b14      	ldr	r3, [pc, #80]	@ (8005b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005b20:	4413      	add	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	461a      	mov	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a11      	ldr	r2, [pc, #68]	@ (8005b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005b2e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	3b01      	subs	r3, #1
 8005b34:	2201      	movs	r2, #1
 8005b36:	409a      	lsls	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005b3c:	bf00      	nop
 8005b3e:	3714      	adds	r7, #20
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr
 8005b48:	58025408 	.word	0x58025408
 8005b4c:	5802541c 	.word	0x5802541c
 8005b50:	58025430 	.word	0x58025430
 8005b54:	58025444 	.word	0x58025444
 8005b58:	58025458 	.word	0x58025458
 8005b5c:	5802546c 	.word	0x5802546c
 8005b60:	58025480 	.word	0x58025480
 8005b64:	58025494 	.word	0x58025494
 8005b68:	1600963f 	.word	0x1600963f
 8005b6c:	58025940 	.word	0x58025940
 8005b70:	1000823f 	.word	0x1000823f
 8005b74:	40020940 	.word	0x40020940

08005b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b089      	sub	sp, #36	@ 0x24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005b82:	2300      	movs	r3, #0
 8005b84:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005b86:	4b89      	ldr	r3, [pc, #548]	@ (8005dac <HAL_GPIO_Init+0x234>)
 8005b88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b8a:	e194      	b.n	8005eb6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	2101      	movs	r1, #1
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	fa01 f303 	lsl.w	r3, r1, r3
 8005b98:	4013      	ands	r3, r2
 8005b9a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	f000 8186 	beq.w	8005eb0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f003 0303 	and.w	r3, r3, #3
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d005      	beq.n	8005bbc <HAL_GPIO_Init+0x44>
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	f003 0303 	and.w	r3, r3, #3
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d130      	bne.n	8005c1e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	005b      	lsls	r3, r3, #1
 8005bc6:	2203      	movs	r2, #3
 8005bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bcc:	43db      	mvns	r3, r3
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	68da      	ldr	r2, [r3, #12]
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	005b      	lsls	r3, r3, #1
 8005bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfa:	43db      	mvns	r3, r3
 8005bfc:	69ba      	ldr	r2, [r7, #24]
 8005bfe:	4013      	ands	r3, r2
 8005c00:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	091b      	lsrs	r3, r3, #4
 8005c08:	f003 0201 	and.w	r2, r3, #1
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	69ba      	ldr	r2, [r7, #24]
 8005c1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f003 0303 	and.w	r3, r3, #3
 8005c26:	2b03      	cmp	r3, #3
 8005c28:	d017      	beq.n	8005c5a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	005b      	lsls	r3, r3, #1
 8005c34:	2203      	movs	r2, #3
 8005c36:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3a:	43db      	mvns	r3, r3
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	4013      	ands	r3, r2
 8005c40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	689a      	ldr	r2, [r3, #8]
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	005b      	lsls	r3, r3, #1
 8005c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f003 0303 	and.w	r3, r3, #3
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d123      	bne.n	8005cae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	08da      	lsrs	r2, r3, #3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	3208      	adds	r2, #8
 8005c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	f003 0307 	and.w	r3, r3, #7
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	220f      	movs	r2, #15
 8005c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c82:	43db      	mvns	r3, r3
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	4013      	ands	r3, r2
 8005c88:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	691a      	ldr	r2, [r3, #16]
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	f003 0307 	and.w	r3, r3, #7
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9a:	69ba      	ldr	r2, [r7, #24]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	08da      	lsrs	r2, r3, #3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	3208      	adds	r2, #8
 8005ca8:	69b9      	ldr	r1, [r7, #24]
 8005caa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	005b      	lsls	r3, r3, #1
 8005cb8:	2203      	movs	r2, #3
 8005cba:	fa02 f303 	lsl.w	r3, r2, r3
 8005cbe:	43db      	mvns	r3, r3
 8005cc0:	69ba      	ldr	r2, [r7, #24]
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f003 0203 	and.w	r2, r3, #3
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd6:	69ba      	ldr	r2, [r7, #24]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	69ba      	ldr	r2, [r7, #24]
 8005ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f000 80e0 	beq.w	8005eb0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cf0:	4b2f      	ldr	r3, [pc, #188]	@ (8005db0 <HAL_GPIO_Init+0x238>)
 8005cf2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005cf6:	4a2e      	ldr	r2, [pc, #184]	@ (8005db0 <HAL_GPIO_Init+0x238>)
 8005cf8:	f043 0302 	orr.w	r3, r3, #2
 8005cfc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005d00:	4b2b      	ldr	r3, [pc, #172]	@ (8005db0 <HAL_GPIO_Init+0x238>)
 8005d02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	60fb      	str	r3, [r7, #12]
 8005d0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d0e:	4a29      	ldr	r2, [pc, #164]	@ (8005db4 <HAL_GPIO_Init+0x23c>)
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	089b      	lsrs	r3, r3, #2
 8005d14:	3302      	adds	r3, #2
 8005d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	f003 0303 	and.w	r3, r3, #3
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	220f      	movs	r2, #15
 8005d26:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2a:	43db      	mvns	r3, r3
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	4013      	ands	r3, r2
 8005d30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a20      	ldr	r2, [pc, #128]	@ (8005db8 <HAL_GPIO_Init+0x240>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d052      	beq.n	8005de0 <HAL_GPIO_Init+0x268>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a1f      	ldr	r2, [pc, #124]	@ (8005dbc <HAL_GPIO_Init+0x244>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d031      	beq.n	8005da6 <HAL_GPIO_Init+0x22e>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a1e      	ldr	r2, [pc, #120]	@ (8005dc0 <HAL_GPIO_Init+0x248>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d02b      	beq.n	8005da2 <HAL_GPIO_Init+0x22a>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a1d      	ldr	r2, [pc, #116]	@ (8005dc4 <HAL_GPIO_Init+0x24c>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d025      	beq.n	8005d9e <HAL_GPIO_Init+0x226>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a1c      	ldr	r2, [pc, #112]	@ (8005dc8 <HAL_GPIO_Init+0x250>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d01f      	beq.n	8005d9a <HAL_GPIO_Init+0x222>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a1b      	ldr	r2, [pc, #108]	@ (8005dcc <HAL_GPIO_Init+0x254>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d019      	beq.n	8005d96 <HAL_GPIO_Init+0x21e>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a1a      	ldr	r2, [pc, #104]	@ (8005dd0 <HAL_GPIO_Init+0x258>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d013      	beq.n	8005d92 <HAL_GPIO_Init+0x21a>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a19      	ldr	r2, [pc, #100]	@ (8005dd4 <HAL_GPIO_Init+0x25c>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d00d      	beq.n	8005d8e <HAL_GPIO_Init+0x216>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a18      	ldr	r2, [pc, #96]	@ (8005dd8 <HAL_GPIO_Init+0x260>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d007      	beq.n	8005d8a <HAL_GPIO_Init+0x212>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a17      	ldr	r2, [pc, #92]	@ (8005ddc <HAL_GPIO_Init+0x264>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d101      	bne.n	8005d86 <HAL_GPIO_Init+0x20e>
 8005d82:	2309      	movs	r3, #9
 8005d84:	e02d      	b.n	8005de2 <HAL_GPIO_Init+0x26a>
 8005d86:	230a      	movs	r3, #10
 8005d88:	e02b      	b.n	8005de2 <HAL_GPIO_Init+0x26a>
 8005d8a:	2308      	movs	r3, #8
 8005d8c:	e029      	b.n	8005de2 <HAL_GPIO_Init+0x26a>
 8005d8e:	2307      	movs	r3, #7
 8005d90:	e027      	b.n	8005de2 <HAL_GPIO_Init+0x26a>
 8005d92:	2306      	movs	r3, #6
 8005d94:	e025      	b.n	8005de2 <HAL_GPIO_Init+0x26a>
 8005d96:	2305      	movs	r3, #5
 8005d98:	e023      	b.n	8005de2 <HAL_GPIO_Init+0x26a>
 8005d9a:	2304      	movs	r3, #4
 8005d9c:	e021      	b.n	8005de2 <HAL_GPIO_Init+0x26a>
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e01f      	b.n	8005de2 <HAL_GPIO_Init+0x26a>
 8005da2:	2302      	movs	r3, #2
 8005da4:	e01d      	b.n	8005de2 <HAL_GPIO_Init+0x26a>
 8005da6:	2301      	movs	r3, #1
 8005da8:	e01b      	b.n	8005de2 <HAL_GPIO_Init+0x26a>
 8005daa:	bf00      	nop
 8005dac:	58000080 	.word	0x58000080
 8005db0:	58024400 	.word	0x58024400
 8005db4:	58000400 	.word	0x58000400
 8005db8:	58020000 	.word	0x58020000
 8005dbc:	58020400 	.word	0x58020400
 8005dc0:	58020800 	.word	0x58020800
 8005dc4:	58020c00 	.word	0x58020c00
 8005dc8:	58021000 	.word	0x58021000
 8005dcc:	58021400 	.word	0x58021400
 8005dd0:	58021800 	.word	0x58021800
 8005dd4:	58021c00 	.word	0x58021c00
 8005dd8:	58022000 	.word	0x58022000
 8005ddc:	58022400 	.word	0x58022400
 8005de0:	2300      	movs	r3, #0
 8005de2:	69fa      	ldr	r2, [r7, #28]
 8005de4:	f002 0203 	and.w	r2, r2, #3
 8005de8:	0092      	lsls	r2, r2, #2
 8005dea:	4093      	lsls	r3, r2
 8005dec:	69ba      	ldr	r2, [r7, #24]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005df2:	4938      	ldr	r1, [pc, #224]	@ (8005ed4 <HAL_GPIO_Init+0x35c>)
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	089b      	lsrs	r3, r3, #2
 8005df8:	3302      	adds	r3, #2
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	43db      	mvns	r3, r3
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	4013      	ands	r3, r2
 8005e10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005e1e:	69ba      	ldr	r2, [r7, #24]
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005e26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005e2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	43db      	mvns	r3, r3
 8005e3a:	69ba      	ldr	r2, [r7, #24]
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d003      	beq.n	8005e54 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005e54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	43db      	mvns	r3, r3
 8005e66:	69ba      	ldr	r2, [r7, #24]
 8005e68:	4013      	ands	r3, r2
 8005e6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d003      	beq.n	8005e80 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	69ba      	ldr	r2, [r7, #24]
 8005e84:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	43db      	mvns	r3, r3
 8005e90:	69ba      	ldr	r2, [r7, #24]
 8005e92:	4013      	ands	r3, r2
 8005e94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d003      	beq.n	8005eaa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005ea2:	69ba      	ldr	r2, [r7, #24]
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	69ba      	ldr	r2, [r7, #24]
 8005eae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f47f ae63 	bne.w	8005b8c <HAL_GPIO_Init+0x14>
  }
}
 8005ec6:	bf00      	nop
 8005ec8:	bf00      	nop
 8005eca:	3724      	adds	r7, #36	@ 0x24
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	58000400 	.word	0x58000400

08005ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	807b      	strh	r3, [r7, #2]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ee8:	787b      	ldrb	r3, [r7, #1]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d003      	beq.n	8005ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005eee:	887a      	ldrh	r2, [r7, #2]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005ef4:	e003      	b.n	8005efe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005ef6:	887b      	ldrh	r3, [r7, #2]
 8005ef8:	041a      	lsls	r2, r3, #16
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	619a      	str	r2, [r3, #24]
}
 8005efe:	bf00      	nop
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
	...

08005f0c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005f14:	4a08      	ldr	r2, [pc, #32]	@ (8005f38 <HAL_HSEM_FastTake+0x2c>)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	3320      	adds	r3, #32
 8005f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f1e:	4a07      	ldr	r2, [pc, #28]	@ (8005f3c <HAL_HSEM_FastTake+0x30>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d101      	bne.n	8005f28 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005f24:	2300      	movs	r3, #0
 8005f26:	e000      	b.n	8005f2a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	58026400 	.word	0x58026400
 8005f3c:	80000300 	.word	0x80000300

08005f40 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005f4a:	4906      	ldr	r1, [pc, #24]	@ (8005f64 <HAL_HSEM_Release+0x24>)
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr
 8005f64:	58026400 	.word	0x58026400

08005f68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e08b      	b.n	8006092 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d106      	bne.n	8005f94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7fb f888 	bl	80010a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2224      	movs	r2, #36	@ 0x24
 8005f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 0201 	bic.w	r2, r2, #1
 8005faa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005fb8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689a      	ldr	r2, [r3, #8]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005fc8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d107      	bne.n	8005fe2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	689a      	ldr	r2, [r3, #8]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005fde:	609a      	str	r2, [r3, #8]
 8005fe0:	e006      	b.n	8005ff0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	689a      	ldr	r2, [r3, #8]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005fee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d108      	bne.n	800600a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006006:	605a      	str	r2, [r3, #4]
 8006008:	e007      	b.n	800601a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	685a      	ldr	r2, [r3, #4]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006018:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	6859      	ldr	r1, [r3, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	4b1d      	ldr	r3, [pc, #116]	@ (800609c <HAL_I2C_Init+0x134>)
 8006026:	430b      	orrs	r3, r1
 8006028:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68da      	ldr	r2, [r3, #12]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006038:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	691a      	ldr	r2, [r3, #16]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	430a      	orrs	r2, r1
 8006052:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	69d9      	ldr	r1, [r3, #28]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a1a      	ldr	r2, [r3, #32]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	430a      	orrs	r2, r1
 8006062:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f042 0201 	orr.w	r2, r2, #1
 8006072:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2220      	movs	r2, #32
 800607e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	02008000 	.word	0x02008000

080060a0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b088      	sub	sp, #32
 80060a4:	af02      	add	r7, sp, #8
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	607a      	str	r2, [r7, #4]
 80060aa:	461a      	mov	r2, r3
 80060ac:	460b      	mov	r3, r1
 80060ae:	817b      	strh	r3, [r7, #10]
 80060b0:	4613      	mov	r3, r2
 80060b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	2b20      	cmp	r3, #32
 80060be:	f040 80fd 	bne.w	80062bc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d101      	bne.n	80060d0 <HAL_I2C_Master_Transmit+0x30>
 80060cc:	2302      	movs	r3, #2
 80060ce:	e0f6      	b.n	80062be <HAL_I2C_Master_Transmit+0x21e>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80060d8:	f7fb fe96 	bl	8001e08 <HAL_GetTick>
 80060dc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	2319      	movs	r3, #25
 80060e4:	2201      	movs	r2, #1
 80060e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f000 f914 	bl	8006318 <I2C_WaitOnFlagUntilTimeout>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e0e1      	b.n	80062be <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2221      	movs	r2, #33	@ 0x21
 80060fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2210      	movs	r2, #16
 8006106:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	893a      	ldrh	r2, [r7, #8]
 800611a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006126:	b29b      	uxth	r3, r3
 8006128:	2bff      	cmp	r3, #255	@ 0xff
 800612a:	d906      	bls.n	800613a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	22ff      	movs	r2, #255	@ 0xff
 8006130:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006132:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006136:	617b      	str	r3, [r7, #20]
 8006138:	e007      	b.n	800614a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800613e:	b29a      	uxth	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006144:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006148:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800614e:	2b00      	cmp	r3, #0
 8006150:	d024      	beq.n	800619c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006156:	781a      	ldrb	r2, [r3, #0]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006162:	1c5a      	adds	r2, r3, #1
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800616c:	b29b      	uxth	r3, r3
 800616e:	3b01      	subs	r3, #1
 8006170:	b29a      	uxth	r2, r3
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800617a:	3b01      	subs	r3, #1
 800617c:	b29a      	uxth	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006186:	b2db      	uxtb	r3, r3
 8006188:	3301      	adds	r3, #1
 800618a:	b2da      	uxtb	r2, r3
 800618c:	8979      	ldrh	r1, [r7, #10]
 800618e:	4b4e      	ldr	r3, [pc, #312]	@ (80062c8 <HAL_I2C_Master_Transmit+0x228>)
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f000 fa83 	bl	80066a0 <I2C_TransferConfig>
 800619a:	e066      	b.n	800626a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061a0:	b2da      	uxtb	r2, r3
 80061a2:	8979      	ldrh	r1, [r7, #10]
 80061a4:	4b48      	ldr	r3, [pc, #288]	@ (80062c8 <HAL_I2C_Master_Transmit+0x228>)
 80061a6:	9300      	str	r3, [sp, #0]
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f000 fa78 	bl	80066a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80061b0:	e05b      	b.n	800626a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	6a39      	ldr	r1, [r7, #32]
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f000 f907 	bl	80063ca <I2C_WaitOnTXISFlagUntilTimeout>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d001      	beq.n	80061c6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e07b      	b.n	80062be <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ca:	781a      	ldrb	r2, [r3, #0]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d6:	1c5a      	adds	r2, r3, #1
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	3b01      	subs	r3, #1
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061ee:	3b01      	subs	r3, #1
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d034      	beq.n	800626a <HAL_I2C_Master_Transmit+0x1ca>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006204:	2b00      	cmp	r3, #0
 8006206:	d130      	bne.n	800626a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	6a3b      	ldr	r3, [r7, #32]
 800620e:	2200      	movs	r2, #0
 8006210:	2180      	movs	r1, #128	@ 0x80
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f000 f880 	bl	8006318 <I2C_WaitOnFlagUntilTimeout>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e04d      	b.n	80062be <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006226:	b29b      	uxth	r3, r3
 8006228:	2bff      	cmp	r3, #255	@ 0xff
 800622a:	d90e      	bls.n	800624a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	22ff      	movs	r2, #255	@ 0xff
 8006230:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006236:	b2da      	uxtb	r2, r3
 8006238:	8979      	ldrh	r1, [r7, #10]
 800623a:	2300      	movs	r3, #0
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f000 fa2c 	bl	80066a0 <I2C_TransferConfig>
 8006248:	e00f      	b.n	800626a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800624e:	b29a      	uxth	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006258:	b2da      	uxtb	r2, r3
 800625a:	8979      	ldrh	r1, [r7, #10]
 800625c:	2300      	movs	r3, #0
 800625e:	9300      	str	r3, [sp, #0]
 8006260:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f000 fa1b 	bl	80066a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800626e:	b29b      	uxth	r3, r3
 8006270:	2b00      	cmp	r3, #0
 8006272:	d19e      	bne.n	80061b2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	6a39      	ldr	r1, [r7, #32]
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f000 f8ed 	bl	8006458 <I2C_WaitOnSTOPFlagUntilTimeout>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d001      	beq.n	8006288 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e01a      	b.n	80062be <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2220      	movs	r2, #32
 800628e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6859      	ldr	r1, [r3, #4]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	4b0c      	ldr	r3, [pc, #48]	@ (80062cc <HAL_I2C_Master_Transmit+0x22c>)
 800629c:	400b      	ands	r3, r1
 800629e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2220      	movs	r2, #32
 80062a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80062b8:	2300      	movs	r3, #0
 80062ba:	e000      	b.n	80062be <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80062bc:	2302      	movs	r3, #2
  }
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3718      	adds	r7, #24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	80002000 	.word	0x80002000
 80062cc:	fe00e800 	.word	0xfe00e800

080062d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	f003 0302 	and.w	r3, r3, #2
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d103      	bne.n	80062ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2200      	movs	r2, #0
 80062ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d007      	beq.n	800630c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	699a      	ldr	r2, [r3, #24]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f042 0201 	orr.w	r2, r2, #1
 800630a:	619a      	str	r2, [r3, #24]
  }
}
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	603b      	str	r3, [r7, #0]
 8006324:	4613      	mov	r3, r2
 8006326:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006328:	e03b      	b.n	80063a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800632a:	69ba      	ldr	r2, [r7, #24]
 800632c:	6839      	ldr	r1, [r7, #0]
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f000 f8d6 	bl	80064e0 <I2C_IsErrorOccurred>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d001      	beq.n	800633e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e041      	b.n	80063c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006344:	d02d      	beq.n	80063a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006346:	f7fb fd5f 	bl	8001e08 <HAL_GetTick>
 800634a:	4602      	mov	r2, r0
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	683a      	ldr	r2, [r7, #0]
 8006352:	429a      	cmp	r2, r3
 8006354:	d302      	bcc.n	800635c <I2C_WaitOnFlagUntilTimeout+0x44>
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d122      	bne.n	80063a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	699a      	ldr	r2, [r3, #24]
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	4013      	ands	r3, r2
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	429a      	cmp	r2, r3
 800636a:	bf0c      	ite	eq
 800636c:	2301      	moveq	r3, #1
 800636e:	2300      	movne	r3, #0
 8006370:	b2db      	uxtb	r3, r3
 8006372:	461a      	mov	r2, r3
 8006374:	79fb      	ldrb	r3, [r7, #7]
 8006376:	429a      	cmp	r2, r3
 8006378:	d113      	bne.n	80063a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800637e:	f043 0220 	orr.w	r2, r3, #32
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2220      	movs	r2, #32
 800638a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e00f      	b.n	80063c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	699a      	ldr	r2, [r3, #24]
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	4013      	ands	r3, r2
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	bf0c      	ite	eq
 80063b2:	2301      	moveq	r3, #1
 80063b4:	2300      	movne	r3, #0
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	461a      	mov	r2, r3
 80063ba:	79fb      	ldrb	r3, [r7, #7]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d0b4      	beq.n	800632a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b084      	sub	sp, #16
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	60f8      	str	r0, [r7, #12]
 80063d2:	60b9      	str	r1, [r7, #8]
 80063d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80063d6:	e033      	b.n	8006440 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	68b9      	ldr	r1, [r7, #8]
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f000 f87f 	bl	80064e0 <I2C_IsErrorOccurred>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d001      	beq.n	80063ec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e031      	b.n	8006450 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f2:	d025      	beq.n	8006440 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063f4:	f7fb fd08 	bl	8001e08 <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	429a      	cmp	r2, r3
 8006402:	d302      	bcc.n	800640a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d11a      	bne.n	8006440 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b02      	cmp	r3, #2
 8006416:	d013      	beq.n	8006440 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800641c:	f043 0220 	orr.w	r2, r3, #32
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2220      	movs	r2, #32
 8006428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e007      	b.n	8006450 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	f003 0302 	and.w	r3, r3, #2
 800644a:	2b02      	cmp	r3, #2
 800644c:	d1c4      	bne.n	80063d8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006464:	e02f      	b.n	80064c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	68b9      	ldr	r1, [r7, #8]
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 f838 	bl	80064e0 <I2C_IsErrorOccurred>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d001      	beq.n	800647a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e02d      	b.n	80064d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800647a:	f7fb fcc5 	bl	8001e08 <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	68ba      	ldr	r2, [r7, #8]
 8006486:	429a      	cmp	r2, r3
 8006488:	d302      	bcc.n	8006490 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d11a      	bne.n	80064c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	f003 0320 	and.w	r3, r3, #32
 800649a:	2b20      	cmp	r3, #32
 800649c:	d013      	beq.n	80064c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064a2:	f043 0220 	orr.w	r2, r3, #32
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2220      	movs	r2, #32
 80064ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e007      	b.n	80064d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	f003 0320 	and.w	r3, r3, #32
 80064d0:	2b20      	cmp	r3, #32
 80064d2:	d1c8      	bne.n	8006466 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
	...

080064e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b08a      	sub	sp, #40	@ 0x28
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064ec:	2300      	movs	r3, #0
 80064ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80064fa:	2300      	movs	r3, #0
 80064fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	f003 0310 	and.w	r3, r3, #16
 8006508:	2b00      	cmp	r3, #0
 800650a:	d068      	beq.n	80065de <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2210      	movs	r2, #16
 8006512:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006514:	e049      	b.n	80065aa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651c:	d045      	beq.n	80065aa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800651e:	f7fb fc73 	bl	8001e08 <HAL_GetTick>
 8006522:	4602      	mov	r2, r0
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	429a      	cmp	r2, r3
 800652c:	d302      	bcc.n	8006534 <I2C_IsErrorOccurred+0x54>
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d13a      	bne.n	80065aa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800653e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006546:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006552:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006556:	d121      	bne.n	800659c <I2C_IsErrorOccurred+0xbc>
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800655e:	d01d      	beq.n	800659c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006560:	7cfb      	ldrb	r3, [r7, #19]
 8006562:	2b20      	cmp	r3, #32
 8006564:	d01a      	beq.n	800659c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006574:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006576:	f7fb fc47 	bl	8001e08 <HAL_GetTick>
 800657a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800657c:	e00e      	b.n	800659c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800657e:	f7fb fc43 	bl	8001e08 <HAL_GetTick>
 8006582:	4602      	mov	r2, r0
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	2b19      	cmp	r3, #25
 800658a:	d907      	bls.n	800659c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800658c:	6a3b      	ldr	r3, [r7, #32]
 800658e:	f043 0320 	orr.w	r3, r3, #32
 8006592:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800659a:	e006      	b.n	80065aa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	f003 0320 	and.w	r3, r3, #32
 80065a6:	2b20      	cmp	r3, #32
 80065a8:	d1e9      	bne.n	800657e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	f003 0320 	and.w	r3, r3, #32
 80065b4:	2b20      	cmp	r3, #32
 80065b6:	d003      	beq.n	80065c0 <I2C_IsErrorOccurred+0xe0>
 80065b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d0aa      	beq.n	8006516 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80065c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d103      	bne.n	80065d0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2220      	movs	r2, #32
 80065ce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80065d0:	6a3b      	ldr	r3, [r7, #32]
 80065d2:	f043 0304 	orr.w	r3, r3, #4
 80065d6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00b      	beq.n	8006608 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80065f0:	6a3b      	ldr	r3, [r7, #32]
 80065f2:	f043 0301 	orr.w	r3, r3, #1
 80065f6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006600:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00b      	beq.n	800662a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006612:	6a3b      	ldr	r3, [r7, #32]
 8006614:	f043 0308 	orr.w	r3, r3, #8
 8006618:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006622:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00b      	beq.n	800664c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006634:	6a3b      	ldr	r3, [r7, #32]
 8006636:	f043 0302 	orr.w	r3, r3, #2
 800663a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006644:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800664c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006650:	2b00      	cmp	r3, #0
 8006652:	d01c      	beq.n	800668e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f7ff fe3b 	bl	80062d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6859      	ldr	r1, [r3, #4]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	4b0d      	ldr	r3, [pc, #52]	@ (800669c <I2C_IsErrorOccurred+0x1bc>)
 8006666:	400b      	ands	r3, r1
 8006668:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800666e:	6a3b      	ldr	r3, [r7, #32]
 8006670:	431a      	orrs	r2, r3
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2220      	movs	r2, #32
 800667a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800668e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006692:	4618      	mov	r0, r3
 8006694:	3728      	adds	r7, #40	@ 0x28
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	fe00e800 	.word	0xfe00e800

080066a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b087      	sub	sp, #28
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	607b      	str	r3, [r7, #4]
 80066aa:	460b      	mov	r3, r1
 80066ac:	817b      	strh	r3, [r7, #10]
 80066ae:	4613      	mov	r3, r2
 80066b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80066b2:	897b      	ldrh	r3, [r7, #10]
 80066b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80066b8:	7a7b      	ldrb	r3, [r7, #9]
 80066ba:	041b      	lsls	r3, r3, #16
 80066bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80066c0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80066c6:	6a3b      	ldr	r3, [r7, #32]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80066ce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	685a      	ldr	r2, [r3, #4]
 80066d6:	6a3b      	ldr	r3, [r7, #32]
 80066d8:	0d5b      	lsrs	r3, r3, #21
 80066da:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80066de:	4b08      	ldr	r3, [pc, #32]	@ (8006700 <I2C_TransferConfig+0x60>)
 80066e0:	430b      	orrs	r3, r1
 80066e2:	43db      	mvns	r3, r3
 80066e4:	ea02 0103 	and.w	r1, r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	430a      	orrs	r2, r1
 80066f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80066f2:	bf00      	nop
 80066f4:	371c      	adds	r7, #28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	03ff63ff 	.word	0x03ff63ff

08006704 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006714:	b2db      	uxtb	r3, r3
 8006716:	2b20      	cmp	r3, #32
 8006718:	d138      	bne.n	800678c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006720:	2b01      	cmp	r3, #1
 8006722:	d101      	bne.n	8006728 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006724:	2302      	movs	r3, #2
 8006726:	e032      	b.n	800678e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2224      	movs	r2, #36	@ 0x24
 8006734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f022 0201 	bic.w	r2, r2, #1
 8006746:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006756:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6819      	ldr	r1, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	430a      	orrs	r2, r1
 8006766:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f042 0201 	orr.w	r2, r2, #1
 8006776:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2220      	movs	r2, #32
 800677c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006788:	2300      	movs	r3, #0
 800678a:	e000      	b.n	800678e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800678c:	2302      	movs	r3, #2
  }
}
 800678e:	4618      	mov	r0, r3
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800679a:	b480      	push	{r7}
 800679c:	b085      	sub	sp, #20
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
 80067a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	2b20      	cmp	r3, #32
 80067ae:	d139      	bne.n	8006824 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d101      	bne.n	80067be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80067ba:	2302      	movs	r3, #2
 80067bc:	e033      	b.n	8006826 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2224      	movs	r2, #36	@ 0x24
 80067ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 0201 	bic.w	r2, r2, #1
 80067dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80067ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	021b      	lsls	r3, r3, #8
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f042 0201 	orr.w	r2, r2, #1
 800680e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2220      	movs	r2, #32
 8006814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006820:	2300      	movs	r3, #0
 8006822:	e000      	b.n	8006826 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006824:	2302      	movs	r3, #2
  }
}
 8006826:	4618      	mov	r0, r3
 8006828:	3714      	adds	r7, #20
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
	...

08006834 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800683c:	4b29      	ldr	r3, [pc, #164]	@ (80068e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	f003 0307 	and.w	r3, r3, #7
 8006844:	2b06      	cmp	r3, #6
 8006846:	d00a      	beq.n	800685e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006848:	4b26      	ldr	r3, [pc, #152]	@ (80068e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	429a      	cmp	r2, r3
 8006854:	d001      	beq.n	800685a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e040      	b.n	80068dc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800685a:	2300      	movs	r3, #0
 800685c:	e03e      	b.n	80068dc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800685e:	4b21      	ldr	r3, [pc, #132]	@ (80068e4 <HAL_PWREx_ConfigSupply+0xb0>)
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8006866:	491f      	ldr	r1, [pc, #124]	@ (80068e4 <HAL_PWREx_ConfigSupply+0xb0>)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4313      	orrs	r3, r2
 800686c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800686e:	f7fb facb 	bl	8001e08 <HAL_GetTick>
 8006872:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006874:	e009      	b.n	800688a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006876:	f7fb fac7 	bl	8001e08 <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006884:	d901      	bls.n	800688a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e028      	b.n	80068dc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800688a:	4b16      	ldr	r3, [pc, #88]	@ (80068e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006892:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006896:	d1ee      	bne.n	8006876 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b1e      	cmp	r3, #30
 800689c:	d008      	beq.n	80068b0 <HAL_PWREx_ConfigSupply+0x7c>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80068a2:	d005      	beq.n	80068b0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2b1d      	cmp	r3, #29
 80068a8:	d002      	beq.n	80068b0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2b2d      	cmp	r3, #45	@ 0x2d
 80068ae:	d114      	bne.n	80068da <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80068b0:	f7fb faaa 	bl	8001e08 <HAL_GetTick>
 80068b4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80068b6:	e009      	b.n	80068cc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80068b8:	f7fb faa6 	bl	8001e08 <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80068c6:	d901      	bls.n	80068cc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e007      	b.n	80068dc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80068cc:	4b05      	ldr	r3, [pc, #20]	@ (80068e4 <HAL_PWREx_ConfigSupply+0xb0>)
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068d8:	d1ee      	bne.n	80068b8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	58024800 	.word	0x58024800

080068e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b08c      	sub	sp, #48	@ 0x30
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d102      	bne.n	80068fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	f000 bc48 	b.w	800718c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0301 	and.w	r3, r3, #1
 8006904:	2b00      	cmp	r3, #0
 8006906:	f000 8088 	beq.w	8006a1a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800690a:	4b99      	ldr	r3, [pc, #612]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006912:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006914:	4b96      	ldr	r3, [pc, #600]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 8006916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006918:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800691a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800691c:	2b10      	cmp	r3, #16
 800691e:	d007      	beq.n	8006930 <HAL_RCC_OscConfig+0x48>
 8006920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006922:	2b18      	cmp	r3, #24
 8006924:	d111      	bne.n	800694a <HAL_RCC_OscConfig+0x62>
 8006926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006928:	f003 0303 	and.w	r3, r3, #3
 800692c:	2b02      	cmp	r3, #2
 800692e:	d10c      	bne.n	800694a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006930:	4b8f      	ldr	r3, [pc, #572]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006938:	2b00      	cmp	r3, #0
 800693a:	d06d      	beq.n	8006a18 <HAL_RCC_OscConfig+0x130>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d169      	bne.n	8006a18 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	f000 bc21 	b.w	800718c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006952:	d106      	bne.n	8006962 <HAL_RCC_OscConfig+0x7a>
 8006954:	4b86      	ldr	r3, [pc, #536]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a85      	ldr	r2, [pc, #532]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 800695a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800695e:	6013      	str	r3, [r2, #0]
 8006960:	e02e      	b.n	80069c0 <HAL_RCC_OscConfig+0xd8>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10c      	bne.n	8006984 <HAL_RCC_OscConfig+0x9c>
 800696a:	4b81      	ldr	r3, [pc, #516]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a80      	ldr	r2, [pc, #512]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 8006970:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006974:	6013      	str	r3, [r2, #0]
 8006976:	4b7e      	ldr	r3, [pc, #504]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a7d      	ldr	r2, [pc, #500]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 800697c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006980:	6013      	str	r3, [r2, #0]
 8006982:	e01d      	b.n	80069c0 <HAL_RCC_OscConfig+0xd8>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800698c:	d10c      	bne.n	80069a8 <HAL_RCC_OscConfig+0xc0>
 800698e:	4b78      	ldr	r3, [pc, #480]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a77      	ldr	r2, [pc, #476]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 8006994:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006998:	6013      	str	r3, [r2, #0]
 800699a:	4b75      	ldr	r3, [pc, #468]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a74      	ldr	r2, [pc, #464]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 80069a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069a4:	6013      	str	r3, [r2, #0]
 80069a6:	e00b      	b.n	80069c0 <HAL_RCC_OscConfig+0xd8>
 80069a8:	4b71      	ldr	r3, [pc, #452]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a70      	ldr	r2, [pc, #448]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 80069ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069b2:	6013      	str	r3, [r2, #0]
 80069b4:	4b6e      	ldr	r3, [pc, #440]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a6d      	ldr	r2, [pc, #436]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 80069ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80069be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d013      	beq.n	80069f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c8:	f7fb fa1e 	bl	8001e08 <HAL_GetTick>
 80069cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069ce:	e008      	b.n	80069e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069d0:	f7fb fa1a 	bl	8001e08 <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	2b64      	cmp	r3, #100	@ 0x64
 80069dc:	d901      	bls.n	80069e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e3d4      	b.n	800718c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069e2:	4b63      	ldr	r3, [pc, #396]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d0f0      	beq.n	80069d0 <HAL_RCC_OscConfig+0xe8>
 80069ee:	e014      	b.n	8006a1a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069f0:	f7fb fa0a 	bl	8001e08 <HAL_GetTick>
 80069f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80069f6:	e008      	b.n	8006a0a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069f8:	f7fb fa06 	bl	8001e08 <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	2b64      	cmp	r3, #100	@ 0x64
 8006a04:	d901      	bls.n	8006a0a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e3c0      	b.n	800718c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006a0a:	4b59      	ldr	r3, [pc, #356]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1f0      	bne.n	80069f8 <HAL_RCC_OscConfig+0x110>
 8006a16:	e000      	b.n	8006a1a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0302 	and.w	r3, r3, #2
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f000 80ca 	beq.w	8006bbc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a28:	4b51      	ldr	r3, [pc, #324]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a30:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a32:	4b4f      	ldr	r3, [pc, #316]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 8006a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a36:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006a38:	6a3b      	ldr	r3, [r7, #32]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d007      	beq.n	8006a4e <HAL_RCC_OscConfig+0x166>
 8006a3e:	6a3b      	ldr	r3, [r7, #32]
 8006a40:	2b18      	cmp	r3, #24
 8006a42:	d156      	bne.n	8006af2 <HAL_RCC_OscConfig+0x20a>
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	f003 0303 	and.w	r3, r3, #3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d151      	bne.n	8006af2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a4e:	4b48      	ldr	r3, [pc, #288]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 0304 	and.w	r3, r3, #4
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d005      	beq.n	8006a66 <HAL_RCC_OscConfig+0x17e>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d101      	bne.n	8006a66 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e392      	b.n	800718c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006a66:	4b42      	ldr	r3, [pc, #264]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f023 0219 	bic.w	r2, r3, #25
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	493f      	ldr	r1, [pc, #252]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 8006a74:	4313      	orrs	r3, r2
 8006a76:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a78:	f7fb f9c6 	bl	8001e08 <HAL_GetTick>
 8006a7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a7e:	e008      	b.n	8006a92 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a80:	f7fb f9c2 	bl	8001e08 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d901      	bls.n	8006a92 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e37c      	b.n	800718c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a92:	4b37      	ldr	r3, [pc, #220]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 0304 	and.w	r3, r3, #4
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d0f0      	beq.n	8006a80 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a9e:	f7fb f9e3 	bl	8001e68 <HAL_GetREVID>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d817      	bhi.n	8006adc <HAL_RCC_OscConfig+0x1f4>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	2b40      	cmp	r3, #64	@ 0x40
 8006ab2:	d108      	bne.n	8006ac6 <HAL_RCC_OscConfig+0x1de>
 8006ab4:	4b2e      	ldr	r3, [pc, #184]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006abc:	4a2c      	ldr	r2, [pc, #176]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 8006abe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ac2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ac4:	e07a      	b.n	8006bbc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	031b      	lsls	r3, r3, #12
 8006ad4:	4926      	ldr	r1, [pc, #152]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ada:	e06f      	b.n	8006bbc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006adc:	4b24      	ldr	r3, [pc, #144]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	061b      	lsls	r3, r3, #24
 8006aea:	4921      	ldr	r1, [pc, #132]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 8006aec:	4313      	orrs	r3, r2
 8006aee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006af0:	e064      	b.n	8006bbc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d047      	beq.n	8006b8a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006afa:	4b1d      	ldr	r3, [pc, #116]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f023 0219 	bic.w	r2, r3, #25
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	491a      	ldr	r1, [pc, #104]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b0c:	f7fb f97c 	bl	8001e08 <HAL_GetTick>
 8006b10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b12:	e008      	b.n	8006b26 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b14:	f7fb f978 	bl	8001e08 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d901      	bls.n	8006b26 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e332      	b.n	800718c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b26:	4b12      	ldr	r3, [pc, #72]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0304 	and.w	r3, r3, #4
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d0f0      	beq.n	8006b14 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b32:	f7fb f999 	bl	8001e68 <HAL_GetREVID>
 8006b36:	4603      	mov	r3, r0
 8006b38:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d819      	bhi.n	8006b74 <HAL_RCC_OscConfig+0x28c>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	2b40      	cmp	r3, #64	@ 0x40
 8006b46:	d108      	bne.n	8006b5a <HAL_RCC_OscConfig+0x272>
 8006b48:	4b09      	ldr	r3, [pc, #36]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006b50:	4a07      	ldr	r2, [pc, #28]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 8006b52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b56:	6053      	str	r3, [r2, #4]
 8006b58:	e030      	b.n	8006bbc <HAL_RCC_OscConfig+0x2d4>
 8006b5a:	4b05      	ldr	r3, [pc, #20]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	031b      	lsls	r3, r3, #12
 8006b68:	4901      	ldr	r1, [pc, #4]	@ (8006b70 <HAL_RCC_OscConfig+0x288>)
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	604b      	str	r3, [r1, #4]
 8006b6e:	e025      	b.n	8006bbc <HAL_RCC_OscConfig+0x2d4>
 8006b70:	58024400 	.word	0x58024400
 8006b74:	4b9a      	ldr	r3, [pc, #616]	@ (8006de0 <HAL_RCC_OscConfig+0x4f8>)
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	061b      	lsls	r3, r3, #24
 8006b82:	4997      	ldr	r1, [pc, #604]	@ (8006de0 <HAL_RCC_OscConfig+0x4f8>)
 8006b84:	4313      	orrs	r3, r2
 8006b86:	604b      	str	r3, [r1, #4]
 8006b88:	e018      	b.n	8006bbc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b8a:	4b95      	ldr	r3, [pc, #596]	@ (8006de0 <HAL_RCC_OscConfig+0x4f8>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a94      	ldr	r2, [pc, #592]	@ (8006de0 <HAL_RCC_OscConfig+0x4f8>)
 8006b90:	f023 0301 	bic.w	r3, r3, #1
 8006b94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b96:	f7fb f937 	bl	8001e08 <HAL_GetTick>
 8006b9a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006b9c:	e008      	b.n	8006bb0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b9e:	f7fb f933 	bl	8001e08 <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d901      	bls.n	8006bb0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e2ed      	b.n	800718c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006bb0:	4b8b      	ldr	r3, [pc, #556]	@ (8006de0 <HAL_RCC_OscConfig+0x4f8>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0304 	and.w	r3, r3, #4
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1f0      	bne.n	8006b9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0310 	and.w	r3, r3, #16
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f000 80a9 	beq.w	8006d1c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bca:	4b85      	ldr	r3, [pc, #532]	@ (8006de0 <HAL_RCC_OscConfig+0x4f8>)
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006bd2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006bd4:	4b82      	ldr	r3, [pc, #520]	@ (8006de0 <HAL_RCC_OscConfig+0x4f8>)
 8006bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bd8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	2b08      	cmp	r3, #8
 8006bde:	d007      	beq.n	8006bf0 <HAL_RCC_OscConfig+0x308>
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	2b18      	cmp	r3, #24
 8006be4:	d13a      	bne.n	8006c5c <HAL_RCC_OscConfig+0x374>
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f003 0303 	and.w	r3, r3, #3
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d135      	bne.n	8006c5c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006bf0:	4b7b      	ldr	r3, [pc, #492]	@ (8006de0 <HAL_RCC_OscConfig+0x4f8>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d005      	beq.n	8006c08 <HAL_RCC_OscConfig+0x320>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	69db      	ldr	r3, [r3, #28]
 8006c00:	2b80      	cmp	r3, #128	@ 0x80
 8006c02:	d001      	beq.n	8006c08 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e2c1      	b.n	800718c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c08:	f7fb f92e 	bl	8001e68 <HAL_GetREVID>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d817      	bhi.n	8006c46 <HAL_RCC_OscConfig+0x35e>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	2b20      	cmp	r3, #32
 8006c1c:	d108      	bne.n	8006c30 <HAL_RCC_OscConfig+0x348>
 8006c1e:	4b70      	ldr	r3, [pc, #448]	@ (8006de0 <HAL_RCC_OscConfig+0x4f8>)
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006c26:	4a6e      	ldr	r2, [pc, #440]	@ (8006de0 <HAL_RCC_OscConfig+0x4f8>)
 8006c28:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006c2c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c2e:	e075      	b.n	8006d1c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c30:	4b6b      	ldr	r3, [pc, #428]	@ (8006de0 <HAL_RCC_OscConfig+0x4f8>)
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a1b      	ldr	r3, [r3, #32]
 8006c3c:	069b      	lsls	r3, r3, #26
 8006c3e:	4968      	ldr	r1, [pc, #416]	@ (8006de0 <HAL_RCC_OscConfig+0x4f8>)
 8006c40:	4313      	orrs	r3, r2
 8006c42:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c44:	e06a      	b.n	8006d1c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c46:	4b66      	ldr	r3, [pc, #408]	@ (8006de0 <HAL_RCC_OscConfig+0x4f8>)
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	061b      	lsls	r3, r3, #24
 8006c54:	4962      	ldr	r1, [pc, #392]	@ (8006de0 <HAL_RCC_OscConfig+0x4f8>)
 8006c56:	4313      	orrs	r3, r2
 8006c58:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c5a:	e05f      	b.n	8006d1c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	69db      	ldr	r3, [r3, #28]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d042      	beq.n	8006cea <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006c64:	4b5e      	ldr	r3, [pc, #376]	@ (8006de0 <HAL_RCC_OscConfig+0x4f8>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a5d      	ldr	r2, [pc, #372]	@ (8006de0 <HAL_RCC_OscConfig+0x4f8>)
 8006c6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c70:	f7fb f8ca 	bl	8001e08 <HAL_GetTick>
 8006c74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c76:	e008      	b.n	8006c8a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006c78:	f7fb f8c6 	bl	8001e08 <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d901      	bls.n	8006c8a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e280      	b.n	800718c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c8a:	4b55      	ldr	r3, [pc, #340]	@ (8006de0 <HAL_RCC_OscConfig+0x4f8>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d0f0      	beq.n	8006c78 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c96:	f7fb f8e7 	bl	8001e68 <HAL_GetREVID>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d817      	bhi.n	8006cd4 <HAL_RCC_OscConfig+0x3ec>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6a1b      	ldr	r3, [r3, #32]
 8006ca8:	2b20      	cmp	r3, #32
 8006caa:	d108      	bne.n	8006cbe <HAL_RCC_OscConfig+0x3d6>
 8006cac:	4b4c      	ldr	r3, [pc, #304]	@ (8006de0 <HAL_RCC_OscConfig+0x4f8>)
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006cb4:	4a4a      	ldr	r2, [pc, #296]	@ (8006de0 <HAL_RCC_OscConfig+0x4f8>)
 8006cb6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006cba:	6053      	str	r3, [r2, #4]
 8006cbc:	e02e      	b.n	8006d1c <HAL_RCC_OscConfig+0x434>
 8006cbe:	4b48      	ldr	r3, [pc, #288]	@ (8006de0 <HAL_RCC_OscConfig+0x4f8>)
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	069b      	lsls	r3, r3, #26
 8006ccc:	4944      	ldr	r1, [pc, #272]	@ (8006de0 <HAL_RCC_OscConfig+0x4f8>)
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	604b      	str	r3, [r1, #4]
 8006cd2:	e023      	b.n	8006d1c <HAL_RCC_OscConfig+0x434>
 8006cd4:	4b42      	ldr	r3, [pc, #264]	@ (8006de0 <HAL_RCC_OscConfig+0x4f8>)
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a1b      	ldr	r3, [r3, #32]
 8006ce0:	061b      	lsls	r3, r3, #24
 8006ce2:	493f      	ldr	r1, [pc, #252]	@ (8006de0 <HAL_RCC_OscConfig+0x4f8>)
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	60cb      	str	r3, [r1, #12]
 8006ce8:	e018      	b.n	8006d1c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006cea:	4b3d      	ldr	r3, [pc, #244]	@ (8006de0 <HAL_RCC_OscConfig+0x4f8>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a3c      	ldr	r2, [pc, #240]	@ (8006de0 <HAL_RCC_OscConfig+0x4f8>)
 8006cf0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf6:	f7fb f887 	bl	8001e08 <HAL_GetTick>
 8006cfa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006cfc:	e008      	b.n	8006d10 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006cfe:	f7fb f883 	bl	8001e08 <HAL_GetTick>
 8006d02:	4602      	mov	r2, r0
 8006d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d901      	bls.n	8006d10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e23d      	b.n	800718c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006d10:	4b33      	ldr	r3, [pc, #204]	@ (8006de0 <HAL_RCC_OscConfig+0x4f8>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1f0      	bne.n	8006cfe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0308 	and.w	r3, r3, #8
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d036      	beq.n	8006d96 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	695b      	ldr	r3, [r3, #20]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d019      	beq.n	8006d64 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d30:	4b2b      	ldr	r3, [pc, #172]	@ (8006de0 <HAL_RCC_OscConfig+0x4f8>)
 8006d32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d34:	4a2a      	ldr	r2, [pc, #168]	@ (8006de0 <HAL_RCC_OscConfig+0x4f8>)
 8006d36:	f043 0301 	orr.w	r3, r3, #1
 8006d3a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d3c:	f7fb f864 	bl	8001e08 <HAL_GetTick>
 8006d40:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d42:	e008      	b.n	8006d56 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d44:	f7fb f860 	bl	8001e08 <HAL_GetTick>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d901      	bls.n	8006d56 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e21a      	b.n	800718c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d56:	4b22      	ldr	r3, [pc, #136]	@ (8006de0 <HAL_RCC_OscConfig+0x4f8>)
 8006d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d5a:	f003 0302 	and.w	r3, r3, #2
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d0f0      	beq.n	8006d44 <HAL_RCC_OscConfig+0x45c>
 8006d62:	e018      	b.n	8006d96 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d64:	4b1e      	ldr	r3, [pc, #120]	@ (8006de0 <HAL_RCC_OscConfig+0x4f8>)
 8006d66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d68:	4a1d      	ldr	r2, [pc, #116]	@ (8006de0 <HAL_RCC_OscConfig+0x4f8>)
 8006d6a:	f023 0301 	bic.w	r3, r3, #1
 8006d6e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d70:	f7fb f84a 	bl	8001e08 <HAL_GetTick>
 8006d74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d76:	e008      	b.n	8006d8a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d78:	f7fb f846 	bl	8001e08 <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d901      	bls.n	8006d8a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e200      	b.n	800718c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d8a:	4b15      	ldr	r3, [pc, #84]	@ (8006de0 <HAL_RCC_OscConfig+0x4f8>)
 8006d8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d8e:	f003 0302 	and.w	r3, r3, #2
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1f0      	bne.n	8006d78 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 0320 	and.w	r3, r3, #32
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d039      	beq.n	8006e16 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d01c      	beq.n	8006de4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006daa:	4b0d      	ldr	r3, [pc, #52]	@ (8006de0 <HAL_RCC_OscConfig+0x4f8>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a0c      	ldr	r2, [pc, #48]	@ (8006de0 <HAL_RCC_OscConfig+0x4f8>)
 8006db0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006db4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006db6:	f7fb f827 	bl	8001e08 <HAL_GetTick>
 8006dba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006dbc:	e008      	b.n	8006dd0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006dbe:	f7fb f823 	bl	8001e08 <HAL_GetTick>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d901      	bls.n	8006dd0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e1dd      	b.n	800718c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006dd0:	4b03      	ldr	r3, [pc, #12]	@ (8006de0 <HAL_RCC_OscConfig+0x4f8>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d0f0      	beq.n	8006dbe <HAL_RCC_OscConfig+0x4d6>
 8006ddc:	e01b      	b.n	8006e16 <HAL_RCC_OscConfig+0x52e>
 8006dde:	bf00      	nop
 8006de0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006de4:	4b9b      	ldr	r3, [pc, #620]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a9a      	ldr	r2, [pc, #616]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8006dea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006dee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006df0:	f7fb f80a 	bl	8001e08 <HAL_GetTick>
 8006df4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006df6:	e008      	b.n	8006e0a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006df8:	f7fb f806 	bl	8001e08 <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d901      	bls.n	8006e0a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	e1c0      	b.n	800718c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006e0a:	4b92      	ldr	r3, [pc, #584]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1f0      	bne.n	8006df8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0304 	and.w	r3, r3, #4
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f000 8081 	beq.w	8006f26 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006e24:	4b8c      	ldr	r3, [pc, #560]	@ (8007058 <HAL_RCC_OscConfig+0x770>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a8b      	ldr	r2, [pc, #556]	@ (8007058 <HAL_RCC_OscConfig+0x770>)
 8006e2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e30:	f7fa ffea 	bl	8001e08 <HAL_GetTick>
 8006e34:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e36:	e008      	b.n	8006e4a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e38:	f7fa ffe6 	bl	8001e08 <HAL_GetTick>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	2b64      	cmp	r3, #100	@ 0x64
 8006e44:	d901      	bls.n	8006e4a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e1a0      	b.n	800718c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e4a:	4b83      	ldr	r3, [pc, #524]	@ (8007058 <HAL_RCC_OscConfig+0x770>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d0f0      	beq.n	8006e38 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d106      	bne.n	8006e6c <HAL_RCC_OscConfig+0x584>
 8006e5e:	4b7d      	ldr	r3, [pc, #500]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8006e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e62:	4a7c      	ldr	r2, [pc, #496]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8006e64:	f043 0301 	orr.w	r3, r3, #1
 8006e68:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e6a:	e02d      	b.n	8006ec8 <HAL_RCC_OscConfig+0x5e0>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10c      	bne.n	8006e8e <HAL_RCC_OscConfig+0x5a6>
 8006e74:	4b77      	ldr	r3, [pc, #476]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8006e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e78:	4a76      	ldr	r2, [pc, #472]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8006e7a:	f023 0301 	bic.w	r3, r3, #1
 8006e7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e80:	4b74      	ldr	r3, [pc, #464]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8006e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e84:	4a73      	ldr	r2, [pc, #460]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8006e86:	f023 0304 	bic.w	r3, r3, #4
 8006e8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e8c:	e01c      	b.n	8006ec8 <HAL_RCC_OscConfig+0x5e0>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	2b05      	cmp	r3, #5
 8006e94:	d10c      	bne.n	8006eb0 <HAL_RCC_OscConfig+0x5c8>
 8006e96:	4b6f      	ldr	r3, [pc, #444]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8006e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e9a:	4a6e      	ldr	r2, [pc, #440]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8006e9c:	f043 0304 	orr.w	r3, r3, #4
 8006ea0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ea2:	4b6c      	ldr	r3, [pc, #432]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8006ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ea6:	4a6b      	ldr	r2, [pc, #428]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8006ea8:	f043 0301 	orr.w	r3, r3, #1
 8006eac:	6713      	str	r3, [r2, #112]	@ 0x70
 8006eae:	e00b      	b.n	8006ec8 <HAL_RCC_OscConfig+0x5e0>
 8006eb0:	4b68      	ldr	r3, [pc, #416]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8006eb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eb4:	4a67      	ldr	r2, [pc, #412]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8006eb6:	f023 0301 	bic.w	r3, r3, #1
 8006eba:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ebc:	4b65      	ldr	r3, [pc, #404]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8006ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ec0:	4a64      	ldr	r2, [pc, #400]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8006ec2:	f023 0304 	bic.w	r3, r3, #4
 8006ec6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d015      	beq.n	8006efc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ed0:	f7fa ff9a 	bl	8001e08 <HAL_GetTick>
 8006ed4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ed6:	e00a      	b.n	8006eee <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ed8:	f7fa ff96 	bl	8001e08 <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d901      	bls.n	8006eee <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e14e      	b.n	800718c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006eee:	4b59      	ldr	r3, [pc, #356]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8006ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ef2:	f003 0302 	and.w	r3, r3, #2
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d0ee      	beq.n	8006ed8 <HAL_RCC_OscConfig+0x5f0>
 8006efa:	e014      	b.n	8006f26 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006efc:	f7fa ff84 	bl	8001e08 <HAL_GetTick>
 8006f00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006f02:	e00a      	b.n	8006f1a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f04:	f7fa ff80 	bl	8001e08 <HAL_GetTick>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d901      	bls.n	8006f1a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e138      	b.n	800718c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006f1a:	4b4e      	ldr	r3, [pc, #312]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8006f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f1e:	f003 0302 	and.w	r3, r3, #2
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1ee      	bne.n	8006f04 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f000 812d 	beq.w	800718a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006f30:	4b48      	ldr	r3, [pc, #288]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f38:	2b18      	cmp	r3, #24
 8006f3a:	f000 80bd 	beq.w	80070b8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	f040 809e 	bne.w	8007084 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f48:	4b42      	ldr	r3, [pc, #264]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a41      	ldr	r2, [pc, #260]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8006f4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f54:	f7fa ff58 	bl	8001e08 <HAL_GetTick>
 8006f58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f5a:	e008      	b.n	8006f6e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f5c:	f7fa ff54 	bl	8001e08 <HAL_GetTick>
 8006f60:	4602      	mov	r2, r0
 8006f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d901      	bls.n	8006f6e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e10e      	b.n	800718c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f6e:	4b39      	ldr	r3, [pc, #228]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1f0      	bne.n	8006f5c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f7a:	4b36      	ldr	r3, [pc, #216]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8006f7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f7e:	4b37      	ldr	r3, [pc, #220]	@ (800705c <HAL_RCC_OscConfig+0x774>)
 8006f80:	4013      	ands	r3, r2
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006f8a:	0112      	lsls	r2, r2, #4
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	4931      	ldr	r1, [pc, #196]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8006f90:	4313      	orrs	r3, r2
 8006f92:	628b      	str	r3, [r1, #40]	@ 0x28
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	025b      	lsls	r3, r3, #9
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	431a      	orrs	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	041b      	lsls	r3, r3, #16
 8006fb2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006fb6:	431a      	orrs	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	061b      	lsls	r3, r3, #24
 8006fc0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006fc4:	4923      	ldr	r1, [pc, #140]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006fca:	4b22      	ldr	r3, [pc, #136]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8006fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fce:	4a21      	ldr	r2, [pc, #132]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8006fd0:	f023 0301 	bic.w	r3, r3, #1
 8006fd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006fd6:	4b1f      	ldr	r3, [pc, #124]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8006fd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fda:	4b21      	ldr	r3, [pc, #132]	@ (8007060 <HAL_RCC_OscConfig+0x778>)
 8006fdc:	4013      	ands	r3, r2
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006fe2:	00d2      	lsls	r2, r2, #3
 8006fe4:	491b      	ldr	r1, [pc, #108]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006fea:	4b1a      	ldr	r3, [pc, #104]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8006fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fee:	f023 020c 	bic.w	r2, r3, #12
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ff6:	4917      	ldr	r1, [pc, #92]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006ffc:	4b15      	ldr	r3, [pc, #84]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8006ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007000:	f023 0202 	bic.w	r2, r3, #2
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007008:	4912      	ldr	r1, [pc, #72]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 800700a:	4313      	orrs	r3, r2
 800700c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800700e:	4b11      	ldr	r3, [pc, #68]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8007010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007012:	4a10      	ldr	r2, [pc, #64]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8007014:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007018:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800701a:	4b0e      	ldr	r3, [pc, #56]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 800701c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800701e:	4a0d      	ldr	r2, [pc, #52]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8007020:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007024:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007026:	4b0b      	ldr	r3, [pc, #44]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8007028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800702a:	4a0a      	ldr	r2, [pc, #40]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 800702c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007030:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007032:	4b08      	ldr	r3, [pc, #32]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8007034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007036:	4a07      	ldr	r2, [pc, #28]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8007038:	f043 0301 	orr.w	r3, r3, #1
 800703c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800703e:	4b05      	ldr	r3, [pc, #20]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a04      	ldr	r2, [pc, #16]	@ (8007054 <HAL_RCC_OscConfig+0x76c>)
 8007044:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007048:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800704a:	f7fa fedd 	bl	8001e08 <HAL_GetTick>
 800704e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007050:	e011      	b.n	8007076 <HAL_RCC_OscConfig+0x78e>
 8007052:	bf00      	nop
 8007054:	58024400 	.word	0x58024400
 8007058:	58024800 	.word	0x58024800
 800705c:	fffffc0c 	.word	0xfffffc0c
 8007060:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007064:	f7fa fed0 	bl	8001e08 <HAL_GetTick>
 8007068:	4602      	mov	r2, r0
 800706a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	2b02      	cmp	r3, #2
 8007070:	d901      	bls.n	8007076 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e08a      	b.n	800718c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007076:	4b47      	ldr	r3, [pc, #284]	@ (8007194 <HAL_RCC_OscConfig+0x8ac>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d0f0      	beq.n	8007064 <HAL_RCC_OscConfig+0x77c>
 8007082:	e082      	b.n	800718a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007084:	4b43      	ldr	r3, [pc, #268]	@ (8007194 <HAL_RCC_OscConfig+0x8ac>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a42      	ldr	r2, [pc, #264]	@ (8007194 <HAL_RCC_OscConfig+0x8ac>)
 800708a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800708e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007090:	f7fa feba 	bl	8001e08 <HAL_GetTick>
 8007094:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007096:	e008      	b.n	80070aa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007098:	f7fa feb6 	bl	8001e08 <HAL_GetTick>
 800709c:	4602      	mov	r2, r0
 800709e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d901      	bls.n	80070aa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80070a6:	2303      	movs	r3, #3
 80070a8:	e070      	b.n	800718c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80070aa:	4b3a      	ldr	r3, [pc, #232]	@ (8007194 <HAL_RCC_OscConfig+0x8ac>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1f0      	bne.n	8007098 <HAL_RCC_OscConfig+0x7b0>
 80070b6:	e068      	b.n	800718a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80070b8:	4b36      	ldr	r3, [pc, #216]	@ (8007194 <HAL_RCC_OscConfig+0x8ac>)
 80070ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070bc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80070be:	4b35      	ldr	r3, [pc, #212]	@ (8007194 <HAL_RCC_OscConfig+0x8ac>)
 80070c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070c2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d031      	beq.n	8007130 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	f003 0203 	and.w	r2, r3, #3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d12a      	bne.n	8007130 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	091b      	lsrs	r3, r3, #4
 80070de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d122      	bne.n	8007130 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d11a      	bne.n	8007130 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	0a5b      	lsrs	r3, r3, #9
 80070fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007106:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007108:	429a      	cmp	r2, r3
 800710a:	d111      	bne.n	8007130 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	0c1b      	lsrs	r3, r3, #16
 8007110:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007118:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800711a:	429a      	cmp	r2, r3
 800711c:	d108      	bne.n	8007130 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	0e1b      	lsrs	r3, r3, #24
 8007122:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800712a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800712c:	429a      	cmp	r2, r3
 800712e:	d001      	beq.n	8007134 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e02b      	b.n	800718c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007134:	4b17      	ldr	r3, [pc, #92]	@ (8007194 <HAL_RCC_OscConfig+0x8ac>)
 8007136:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007138:	08db      	lsrs	r3, r3, #3
 800713a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800713e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007144:	693a      	ldr	r2, [r7, #16]
 8007146:	429a      	cmp	r2, r3
 8007148:	d01f      	beq.n	800718a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800714a:	4b12      	ldr	r3, [pc, #72]	@ (8007194 <HAL_RCC_OscConfig+0x8ac>)
 800714c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800714e:	4a11      	ldr	r2, [pc, #68]	@ (8007194 <HAL_RCC_OscConfig+0x8ac>)
 8007150:	f023 0301 	bic.w	r3, r3, #1
 8007154:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007156:	f7fa fe57 	bl	8001e08 <HAL_GetTick>
 800715a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800715c:	bf00      	nop
 800715e:	f7fa fe53 	bl	8001e08 <HAL_GetTick>
 8007162:	4602      	mov	r2, r0
 8007164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007166:	4293      	cmp	r3, r2
 8007168:	d0f9      	beq.n	800715e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800716a:	4b0a      	ldr	r3, [pc, #40]	@ (8007194 <HAL_RCC_OscConfig+0x8ac>)
 800716c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800716e:	4b0a      	ldr	r3, [pc, #40]	@ (8007198 <HAL_RCC_OscConfig+0x8b0>)
 8007170:	4013      	ands	r3, r2
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007176:	00d2      	lsls	r2, r2, #3
 8007178:	4906      	ldr	r1, [pc, #24]	@ (8007194 <HAL_RCC_OscConfig+0x8ac>)
 800717a:	4313      	orrs	r3, r2
 800717c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800717e:	4b05      	ldr	r3, [pc, #20]	@ (8007194 <HAL_RCC_OscConfig+0x8ac>)
 8007180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007182:	4a04      	ldr	r2, [pc, #16]	@ (8007194 <HAL_RCC_OscConfig+0x8ac>)
 8007184:	f043 0301 	orr.w	r3, r3, #1
 8007188:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3730      	adds	r7, #48	@ 0x30
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}
 8007194:	58024400 	.word	0x58024400
 8007198:	ffff0007 	.word	0xffff0007

0800719c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d101      	bne.n	80071b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	e19c      	b.n	80074ea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80071b0:	4b8a      	ldr	r3, [pc, #552]	@ (80073dc <HAL_RCC_ClockConfig+0x240>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 030f 	and.w	r3, r3, #15
 80071b8:	683a      	ldr	r2, [r7, #0]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d910      	bls.n	80071e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071be:	4b87      	ldr	r3, [pc, #540]	@ (80073dc <HAL_RCC_ClockConfig+0x240>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f023 020f 	bic.w	r2, r3, #15
 80071c6:	4985      	ldr	r1, [pc, #532]	@ (80073dc <HAL_RCC_ClockConfig+0x240>)
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ce:	4b83      	ldr	r3, [pc, #524]	@ (80073dc <HAL_RCC_ClockConfig+0x240>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 030f 	and.w	r3, r3, #15
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d001      	beq.n	80071e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	e184      	b.n	80074ea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 0304 	and.w	r3, r3, #4
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d010      	beq.n	800720e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	691a      	ldr	r2, [r3, #16]
 80071f0:	4b7b      	ldr	r3, [pc, #492]	@ (80073e0 <HAL_RCC_ClockConfig+0x244>)
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d908      	bls.n	800720e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80071fc:	4b78      	ldr	r3, [pc, #480]	@ (80073e0 <HAL_RCC_ClockConfig+0x244>)
 80071fe:	699b      	ldr	r3, [r3, #24]
 8007200:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	4975      	ldr	r1, [pc, #468]	@ (80073e0 <HAL_RCC_ClockConfig+0x244>)
 800720a:	4313      	orrs	r3, r2
 800720c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0308 	and.w	r3, r3, #8
 8007216:	2b00      	cmp	r3, #0
 8007218:	d010      	beq.n	800723c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	695a      	ldr	r2, [r3, #20]
 800721e:	4b70      	ldr	r3, [pc, #448]	@ (80073e0 <HAL_RCC_ClockConfig+0x244>)
 8007220:	69db      	ldr	r3, [r3, #28]
 8007222:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007226:	429a      	cmp	r2, r3
 8007228:	d908      	bls.n	800723c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800722a:	4b6d      	ldr	r3, [pc, #436]	@ (80073e0 <HAL_RCC_ClockConfig+0x244>)
 800722c:	69db      	ldr	r3, [r3, #28]
 800722e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	496a      	ldr	r1, [pc, #424]	@ (80073e0 <HAL_RCC_ClockConfig+0x244>)
 8007238:	4313      	orrs	r3, r2
 800723a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0310 	and.w	r3, r3, #16
 8007244:	2b00      	cmp	r3, #0
 8007246:	d010      	beq.n	800726a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	699a      	ldr	r2, [r3, #24]
 800724c:	4b64      	ldr	r3, [pc, #400]	@ (80073e0 <HAL_RCC_ClockConfig+0x244>)
 800724e:	69db      	ldr	r3, [r3, #28]
 8007250:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007254:	429a      	cmp	r2, r3
 8007256:	d908      	bls.n	800726a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007258:	4b61      	ldr	r3, [pc, #388]	@ (80073e0 <HAL_RCC_ClockConfig+0x244>)
 800725a:	69db      	ldr	r3, [r3, #28]
 800725c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	699b      	ldr	r3, [r3, #24]
 8007264:	495e      	ldr	r1, [pc, #376]	@ (80073e0 <HAL_RCC_ClockConfig+0x244>)
 8007266:	4313      	orrs	r3, r2
 8007268:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 0320 	and.w	r3, r3, #32
 8007272:	2b00      	cmp	r3, #0
 8007274:	d010      	beq.n	8007298 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	69da      	ldr	r2, [r3, #28]
 800727a:	4b59      	ldr	r3, [pc, #356]	@ (80073e0 <HAL_RCC_ClockConfig+0x244>)
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007282:	429a      	cmp	r2, r3
 8007284:	d908      	bls.n	8007298 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007286:	4b56      	ldr	r3, [pc, #344]	@ (80073e0 <HAL_RCC_ClockConfig+0x244>)
 8007288:	6a1b      	ldr	r3, [r3, #32]
 800728a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	69db      	ldr	r3, [r3, #28]
 8007292:	4953      	ldr	r1, [pc, #332]	@ (80073e0 <HAL_RCC_ClockConfig+0x244>)
 8007294:	4313      	orrs	r3, r2
 8007296:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 0302 	and.w	r3, r3, #2
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d010      	beq.n	80072c6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	68da      	ldr	r2, [r3, #12]
 80072a8:	4b4d      	ldr	r3, [pc, #308]	@ (80073e0 <HAL_RCC_ClockConfig+0x244>)
 80072aa:	699b      	ldr	r3, [r3, #24]
 80072ac:	f003 030f 	and.w	r3, r3, #15
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d908      	bls.n	80072c6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072b4:	4b4a      	ldr	r3, [pc, #296]	@ (80073e0 <HAL_RCC_ClockConfig+0x244>)
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	f023 020f 	bic.w	r2, r3, #15
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	4947      	ldr	r1, [pc, #284]	@ (80073e0 <HAL_RCC_ClockConfig+0x244>)
 80072c2:	4313      	orrs	r3, r2
 80072c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 0301 	and.w	r3, r3, #1
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d055      	beq.n	800737e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80072d2:	4b43      	ldr	r3, [pc, #268]	@ (80073e0 <HAL_RCC_ClockConfig+0x244>)
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	4940      	ldr	r1, [pc, #256]	@ (80073e0 <HAL_RCC_ClockConfig+0x244>)
 80072e0:	4313      	orrs	r3, r2
 80072e2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d107      	bne.n	80072fc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80072ec:	4b3c      	ldr	r3, [pc, #240]	@ (80073e0 <HAL_RCC_ClockConfig+0x244>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d121      	bne.n	800733c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e0f6      	b.n	80074ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	2b03      	cmp	r3, #3
 8007302:	d107      	bne.n	8007314 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007304:	4b36      	ldr	r3, [pc, #216]	@ (80073e0 <HAL_RCC_ClockConfig+0x244>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d115      	bne.n	800733c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e0ea      	b.n	80074ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d107      	bne.n	800732c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800731c:	4b30      	ldr	r3, [pc, #192]	@ (80073e0 <HAL_RCC_ClockConfig+0x244>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007324:	2b00      	cmp	r3, #0
 8007326:	d109      	bne.n	800733c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	e0de      	b.n	80074ea <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800732c:	4b2c      	ldr	r3, [pc, #176]	@ (80073e0 <HAL_RCC_ClockConfig+0x244>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 0304 	and.w	r3, r3, #4
 8007334:	2b00      	cmp	r3, #0
 8007336:	d101      	bne.n	800733c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e0d6      	b.n	80074ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800733c:	4b28      	ldr	r3, [pc, #160]	@ (80073e0 <HAL_RCC_ClockConfig+0x244>)
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	f023 0207 	bic.w	r2, r3, #7
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	4925      	ldr	r1, [pc, #148]	@ (80073e0 <HAL_RCC_ClockConfig+0x244>)
 800734a:	4313      	orrs	r3, r2
 800734c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800734e:	f7fa fd5b 	bl	8001e08 <HAL_GetTick>
 8007352:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007354:	e00a      	b.n	800736c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007356:	f7fa fd57 	bl	8001e08 <HAL_GetTick>
 800735a:	4602      	mov	r2, r0
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007364:	4293      	cmp	r3, r2
 8007366:	d901      	bls.n	800736c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007368:	2303      	movs	r3, #3
 800736a:	e0be      	b.n	80074ea <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800736c:	4b1c      	ldr	r3, [pc, #112]	@ (80073e0 <HAL_RCC_ClockConfig+0x244>)
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	00db      	lsls	r3, r3, #3
 800737a:	429a      	cmp	r2, r3
 800737c:	d1eb      	bne.n	8007356 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0302 	and.w	r3, r3, #2
 8007386:	2b00      	cmp	r3, #0
 8007388:	d010      	beq.n	80073ac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	68da      	ldr	r2, [r3, #12]
 800738e:	4b14      	ldr	r3, [pc, #80]	@ (80073e0 <HAL_RCC_ClockConfig+0x244>)
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	f003 030f 	and.w	r3, r3, #15
 8007396:	429a      	cmp	r2, r3
 8007398:	d208      	bcs.n	80073ac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800739a:	4b11      	ldr	r3, [pc, #68]	@ (80073e0 <HAL_RCC_ClockConfig+0x244>)
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	f023 020f 	bic.w	r2, r3, #15
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	490e      	ldr	r1, [pc, #56]	@ (80073e0 <HAL_RCC_ClockConfig+0x244>)
 80073a8:	4313      	orrs	r3, r2
 80073aa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80073ac:	4b0b      	ldr	r3, [pc, #44]	@ (80073dc <HAL_RCC_ClockConfig+0x240>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 030f 	and.w	r3, r3, #15
 80073b4:	683a      	ldr	r2, [r7, #0]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d214      	bcs.n	80073e4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073ba:	4b08      	ldr	r3, [pc, #32]	@ (80073dc <HAL_RCC_ClockConfig+0x240>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f023 020f 	bic.w	r2, r3, #15
 80073c2:	4906      	ldr	r1, [pc, #24]	@ (80073dc <HAL_RCC_ClockConfig+0x240>)
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073ca:	4b04      	ldr	r3, [pc, #16]	@ (80073dc <HAL_RCC_ClockConfig+0x240>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 030f 	and.w	r3, r3, #15
 80073d2:	683a      	ldr	r2, [r7, #0]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d005      	beq.n	80073e4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	e086      	b.n	80074ea <HAL_RCC_ClockConfig+0x34e>
 80073dc:	52002000 	.word	0x52002000
 80073e0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 0304 	and.w	r3, r3, #4
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d010      	beq.n	8007412 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	691a      	ldr	r2, [r3, #16]
 80073f4:	4b3f      	ldr	r3, [pc, #252]	@ (80074f4 <HAL_RCC_ClockConfig+0x358>)
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d208      	bcs.n	8007412 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007400:	4b3c      	ldr	r3, [pc, #240]	@ (80074f4 <HAL_RCC_ClockConfig+0x358>)
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	4939      	ldr	r1, [pc, #228]	@ (80074f4 <HAL_RCC_ClockConfig+0x358>)
 800740e:	4313      	orrs	r3, r2
 8007410:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0308 	and.w	r3, r3, #8
 800741a:	2b00      	cmp	r3, #0
 800741c:	d010      	beq.n	8007440 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	695a      	ldr	r2, [r3, #20]
 8007422:	4b34      	ldr	r3, [pc, #208]	@ (80074f4 <HAL_RCC_ClockConfig+0x358>)
 8007424:	69db      	ldr	r3, [r3, #28]
 8007426:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800742a:	429a      	cmp	r2, r3
 800742c:	d208      	bcs.n	8007440 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800742e:	4b31      	ldr	r3, [pc, #196]	@ (80074f4 <HAL_RCC_ClockConfig+0x358>)
 8007430:	69db      	ldr	r3, [r3, #28]
 8007432:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	695b      	ldr	r3, [r3, #20]
 800743a:	492e      	ldr	r1, [pc, #184]	@ (80074f4 <HAL_RCC_ClockConfig+0x358>)
 800743c:	4313      	orrs	r3, r2
 800743e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 0310 	and.w	r3, r3, #16
 8007448:	2b00      	cmp	r3, #0
 800744a:	d010      	beq.n	800746e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	699a      	ldr	r2, [r3, #24]
 8007450:	4b28      	ldr	r3, [pc, #160]	@ (80074f4 <HAL_RCC_ClockConfig+0x358>)
 8007452:	69db      	ldr	r3, [r3, #28]
 8007454:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007458:	429a      	cmp	r2, r3
 800745a:	d208      	bcs.n	800746e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800745c:	4b25      	ldr	r3, [pc, #148]	@ (80074f4 <HAL_RCC_ClockConfig+0x358>)
 800745e:	69db      	ldr	r3, [r3, #28]
 8007460:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	4922      	ldr	r1, [pc, #136]	@ (80074f4 <HAL_RCC_ClockConfig+0x358>)
 800746a:	4313      	orrs	r3, r2
 800746c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 0320 	and.w	r3, r3, #32
 8007476:	2b00      	cmp	r3, #0
 8007478:	d010      	beq.n	800749c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	69da      	ldr	r2, [r3, #28]
 800747e:	4b1d      	ldr	r3, [pc, #116]	@ (80074f4 <HAL_RCC_ClockConfig+0x358>)
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007486:	429a      	cmp	r2, r3
 8007488:	d208      	bcs.n	800749c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800748a:	4b1a      	ldr	r3, [pc, #104]	@ (80074f4 <HAL_RCC_ClockConfig+0x358>)
 800748c:	6a1b      	ldr	r3, [r3, #32]
 800748e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	69db      	ldr	r3, [r3, #28]
 8007496:	4917      	ldr	r1, [pc, #92]	@ (80074f4 <HAL_RCC_ClockConfig+0x358>)
 8007498:	4313      	orrs	r3, r2
 800749a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800749c:	f000 f834 	bl	8007508 <HAL_RCC_GetSysClockFreq>
 80074a0:	4602      	mov	r2, r0
 80074a2:	4b14      	ldr	r3, [pc, #80]	@ (80074f4 <HAL_RCC_ClockConfig+0x358>)
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	0a1b      	lsrs	r3, r3, #8
 80074a8:	f003 030f 	and.w	r3, r3, #15
 80074ac:	4912      	ldr	r1, [pc, #72]	@ (80074f8 <HAL_RCC_ClockConfig+0x35c>)
 80074ae:	5ccb      	ldrb	r3, [r1, r3]
 80074b0:	f003 031f 	and.w	r3, r3, #31
 80074b4:	fa22 f303 	lsr.w	r3, r2, r3
 80074b8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80074ba:	4b0e      	ldr	r3, [pc, #56]	@ (80074f4 <HAL_RCC_ClockConfig+0x358>)
 80074bc:	699b      	ldr	r3, [r3, #24]
 80074be:	f003 030f 	and.w	r3, r3, #15
 80074c2:	4a0d      	ldr	r2, [pc, #52]	@ (80074f8 <HAL_RCC_ClockConfig+0x35c>)
 80074c4:	5cd3      	ldrb	r3, [r2, r3]
 80074c6:	f003 031f 	and.w	r3, r3, #31
 80074ca:	693a      	ldr	r2, [r7, #16]
 80074cc:	fa22 f303 	lsr.w	r3, r2, r3
 80074d0:	4a0a      	ldr	r2, [pc, #40]	@ (80074fc <HAL_RCC_ClockConfig+0x360>)
 80074d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80074d4:	4a0a      	ldr	r2, [pc, #40]	@ (8007500 <HAL_RCC_ClockConfig+0x364>)
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80074da:	4b0a      	ldr	r3, [pc, #40]	@ (8007504 <HAL_RCC_ClockConfig+0x368>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4618      	mov	r0, r3
 80074e0:	f7fa fc48 	bl	8001d74 <HAL_InitTick>
 80074e4:	4603      	mov	r3, r0
 80074e6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80074e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3718      	adds	r7, #24
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	58024400 	.word	0x58024400
 80074f8:	08012800 	.word	0x08012800
 80074fc:	24000004 	.word	0x24000004
 8007500:	24000000 	.word	0x24000000
 8007504:	24000008 	.word	0x24000008

08007508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007508:	b480      	push	{r7}
 800750a:	b089      	sub	sp, #36	@ 0x24
 800750c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800750e:	4bb3      	ldr	r3, [pc, #716]	@ (80077dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007516:	2b18      	cmp	r3, #24
 8007518:	f200 8155 	bhi.w	80077c6 <HAL_RCC_GetSysClockFreq+0x2be>
 800751c:	a201      	add	r2, pc, #4	@ (adr r2, 8007524 <HAL_RCC_GetSysClockFreq+0x1c>)
 800751e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007522:	bf00      	nop
 8007524:	08007589 	.word	0x08007589
 8007528:	080077c7 	.word	0x080077c7
 800752c:	080077c7 	.word	0x080077c7
 8007530:	080077c7 	.word	0x080077c7
 8007534:	080077c7 	.word	0x080077c7
 8007538:	080077c7 	.word	0x080077c7
 800753c:	080077c7 	.word	0x080077c7
 8007540:	080077c7 	.word	0x080077c7
 8007544:	080075af 	.word	0x080075af
 8007548:	080077c7 	.word	0x080077c7
 800754c:	080077c7 	.word	0x080077c7
 8007550:	080077c7 	.word	0x080077c7
 8007554:	080077c7 	.word	0x080077c7
 8007558:	080077c7 	.word	0x080077c7
 800755c:	080077c7 	.word	0x080077c7
 8007560:	080077c7 	.word	0x080077c7
 8007564:	080075b5 	.word	0x080075b5
 8007568:	080077c7 	.word	0x080077c7
 800756c:	080077c7 	.word	0x080077c7
 8007570:	080077c7 	.word	0x080077c7
 8007574:	080077c7 	.word	0x080077c7
 8007578:	080077c7 	.word	0x080077c7
 800757c:	080077c7 	.word	0x080077c7
 8007580:	080077c7 	.word	0x080077c7
 8007584:	080075bb 	.word	0x080075bb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007588:	4b94      	ldr	r3, [pc, #592]	@ (80077dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f003 0320 	and.w	r3, r3, #32
 8007590:	2b00      	cmp	r3, #0
 8007592:	d009      	beq.n	80075a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007594:	4b91      	ldr	r3, [pc, #580]	@ (80077dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	08db      	lsrs	r3, r3, #3
 800759a:	f003 0303 	and.w	r3, r3, #3
 800759e:	4a90      	ldr	r2, [pc, #576]	@ (80077e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80075a0:	fa22 f303 	lsr.w	r3, r2, r3
 80075a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80075a6:	e111      	b.n	80077cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80075a8:	4b8d      	ldr	r3, [pc, #564]	@ (80077e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80075aa:	61bb      	str	r3, [r7, #24]
      break;
 80075ac:	e10e      	b.n	80077cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80075ae:	4b8d      	ldr	r3, [pc, #564]	@ (80077e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80075b0:	61bb      	str	r3, [r7, #24]
      break;
 80075b2:	e10b      	b.n	80077cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80075b4:	4b8c      	ldr	r3, [pc, #560]	@ (80077e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80075b6:	61bb      	str	r3, [r7, #24]
      break;
 80075b8:	e108      	b.n	80077cc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075ba:	4b88      	ldr	r3, [pc, #544]	@ (80077dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075be:	f003 0303 	and.w	r3, r3, #3
 80075c2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80075c4:	4b85      	ldr	r3, [pc, #532]	@ (80077dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c8:	091b      	lsrs	r3, r3, #4
 80075ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075ce:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80075d0:	4b82      	ldr	r3, [pc, #520]	@ (80077dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d4:	f003 0301 	and.w	r3, r3, #1
 80075d8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80075da:	4b80      	ldr	r3, [pc, #512]	@ (80077dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075de:	08db      	lsrs	r3, r3, #3
 80075e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075e4:	68fa      	ldr	r2, [r7, #12]
 80075e6:	fb02 f303 	mul.w	r3, r2, r3
 80075ea:	ee07 3a90 	vmov	s15, r3
 80075ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075f2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f000 80e1 	beq.w	80077c0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	2b02      	cmp	r3, #2
 8007602:	f000 8083 	beq.w	800770c <HAL_RCC_GetSysClockFreq+0x204>
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	2b02      	cmp	r3, #2
 800760a:	f200 80a1 	bhi.w	8007750 <HAL_RCC_GetSysClockFreq+0x248>
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d003      	beq.n	800761c <HAL_RCC_GetSysClockFreq+0x114>
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	2b01      	cmp	r3, #1
 8007618:	d056      	beq.n	80076c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800761a:	e099      	b.n	8007750 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800761c:	4b6f      	ldr	r3, [pc, #444]	@ (80077dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 0320 	and.w	r3, r3, #32
 8007624:	2b00      	cmp	r3, #0
 8007626:	d02d      	beq.n	8007684 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007628:	4b6c      	ldr	r3, [pc, #432]	@ (80077dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	08db      	lsrs	r3, r3, #3
 800762e:	f003 0303 	and.w	r3, r3, #3
 8007632:	4a6b      	ldr	r2, [pc, #428]	@ (80077e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007634:	fa22 f303 	lsr.w	r3, r2, r3
 8007638:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	ee07 3a90 	vmov	s15, r3
 8007640:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	ee07 3a90 	vmov	s15, r3
 800764a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800764e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007652:	4b62      	ldr	r3, [pc, #392]	@ (80077dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800765a:	ee07 3a90 	vmov	s15, r3
 800765e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007662:	ed97 6a02 	vldr	s12, [r7, #8]
 8007666:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80077ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800766a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800766e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007672:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800767a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800767e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007682:	e087      	b.n	8007794 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	ee07 3a90 	vmov	s15, r3
 800768a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800768e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80077f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007696:	4b51      	ldr	r3, [pc, #324]	@ (80077dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800769a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800769e:	ee07 3a90 	vmov	s15, r3
 80076a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80076aa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80077ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80076ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80076c6:	e065      	b.n	8007794 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	ee07 3a90 	vmov	s15, r3
 80076ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076d2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80077f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80076d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076da:	4b40      	ldr	r3, [pc, #256]	@ (80077dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076e2:	ee07 3a90 	vmov	s15, r3
 80076e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80076ee:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80077ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80076f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007706:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800770a:	e043      	b.n	8007794 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	ee07 3a90 	vmov	s15, r3
 8007712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007716:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80077f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800771a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800771e:	4b2f      	ldr	r3, [pc, #188]	@ (80077dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007726:	ee07 3a90 	vmov	s15, r3
 800772a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800772e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007732:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80077ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8007736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800773a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800773e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800774a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800774e:	e021      	b.n	8007794 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	ee07 3a90 	vmov	s15, r3
 8007756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800775a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80077f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800775e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007762:	4b1e      	ldr	r3, [pc, #120]	@ (80077dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800776a:	ee07 3a90 	vmov	s15, r3
 800776e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007772:	ed97 6a02 	vldr	s12, [r7, #8]
 8007776:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80077ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800777a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800777e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007782:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800778a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800778e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007792:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007794:	4b11      	ldr	r3, [pc, #68]	@ (80077dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007798:	0a5b      	lsrs	r3, r3, #9
 800779a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800779e:	3301      	adds	r3, #1
 80077a0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	ee07 3a90 	vmov	s15, r3
 80077a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80077ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80077b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077b8:	ee17 3a90 	vmov	r3, s15
 80077bc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80077be:	e005      	b.n	80077cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80077c0:	2300      	movs	r3, #0
 80077c2:	61bb      	str	r3, [r7, #24]
      break;
 80077c4:	e002      	b.n	80077cc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80077c6:	4b07      	ldr	r3, [pc, #28]	@ (80077e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80077c8:	61bb      	str	r3, [r7, #24]
      break;
 80077ca:	bf00      	nop
  }

  return sysclockfreq;
 80077cc:	69bb      	ldr	r3, [r7, #24]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3724      	adds	r7, #36	@ 0x24
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	58024400 	.word	0x58024400
 80077e0:	03d09000 	.word	0x03d09000
 80077e4:	003d0900 	.word	0x003d0900
 80077e8:	017d7840 	.word	0x017d7840
 80077ec:	46000000 	.word	0x46000000
 80077f0:	4c742400 	.word	0x4c742400
 80077f4:	4a742400 	.word	0x4a742400
 80077f8:	4bbebc20 	.word	0x4bbebc20

080077fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007802:	f7ff fe81 	bl	8007508 <HAL_RCC_GetSysClockFreq>
 8007806:	4602      	mov	r2, r0
 8007808:	4b10      	ldr	r3, [pc, #64]	@ (800784c <HAL_RCC_GetHCLKFreq+0x50>)
 800780a:	699b      	ldr	r3, [r3, #24]
 800780c:	0a1b      	lsrs	r3, r3, #8
 800780e:	f003 030f 	and.w	r3, r3, #15
 8007812:	490f      	ldr	r1, [pc, #60]	@ (8007850 <HAL_RCC_GetHCLKFreq+0x54>)
 8007814:	5ccb      	ldrb	r3, [r1, r3]
 8007816:	f003 031f 	and.w	r3, r3, #31
 800781a:	fa22 f303 	lsr.w	r3, r2, r3
 800781e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007820:	4b0a      	ldr	r3, [pc, #40]	@ (800784c <HAL_RCC_GetHCLKFreq+0x50>)
 8007822:	699b      	ldr	r3, [r3, #24]
 8007824:	f003 030f 	and.w	r3, r3, #15
 8007828:	4a09      	ldr	r2, [pc, #36]	@ (8007850 <HAL_RCC_GetHCLKFreq+0x54>)
 800782a:	5cd3      	ldrb	r3, [r2, r3]
 800782c:	f003 031f 	and.w	r3, r3, #31
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	fa22 f303 	lsr.w	r3, r2, r3
 8007836:	4a07      	ldr	r2, [pc, #28]	@ (8007854 <HAL_RCC_GetHCLKFreq+0x58>)
 8007838:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800783a:	4a07      	ldr	r2, [pc, #28]	@ (8007858 <HAL_RCC_GetHCLKFreq+0x5c>)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007840:	4b04      	ldr	r3, [pc, #16]	@ (8007854 <HAL_RCC_GetHCLKFreq+0x58>)
 8007842:	681b      	ldr	r3, [r3, #0]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3708      	adds	r7, #8
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	58024400 	.word	0x58024400
 8007850:	08012800 	.word	0x08012800
 8007854:	24000004 	.word	0x24000004
 8007858:	24000000 	.word	0x24000000

0800785c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007860:	f7ff ffcc 	bl	80077fc <HAL_RCC_GetHCLKFreq>
 8007864:	4602      	mov	r2, r0
 8007866:	4b06      	ldr	r3, [pc, #24]	@ (8007880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007868:	69db      	ldr	r3, [r3, #28]
 800786a:	091b      	lsrs	r3, r3, #4
 800786c:	f003 0307 	and.w	r3, r3, #7
 8007870:	4904      	ldr	r1, [pc, #16]	@ (8007884 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007872:	5ccb      	ldrb	r3, [r1, r3]
 8007874:	f003 031f 	and.w	r3, r3, #31
 8007878:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800787c:	4618      	mov	r0, r3
 800787e:	bd80      	pop	{r7, pc}
 8007880:	58024400 	.word	0x58024400
 8007884:	08012800 	.word	0x08012800

08007888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800788c:	f7ff ffb6 	bl	80077fc <HAL_RCC_GetHCLKFreq>
 8007890:	4602      	mov	r2, r0
 8007892:	4b06      	ldr	r3, [pc, #24]	@ (80078ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8007894:	69db      	ldr	r3, [r3, #28]
 8007896:	0a1b      	lsrs	r3, r3, #8
 8007898:	f003 0307 	and.w	r3, r3, #7
 800789c:	4904      	ldr	r1, [pc, #16]	@ (80078b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800789e:	5ccb      	ldrb	r3, [r1, r3]
 80078a0:	f003 031f 	and.w	r3, r3, #31
 80078a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	58024400 	.word	0x58024400
 80078b0:	08012800 	.word	0x08012800

080078b4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078b8:	b0ca      	sub	sp, #296	@ 0x128
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80078c0:	2300      	movs	r3, #0
 80078c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80078c6:	2300      	movs	r3, #0
 80078c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80078cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80078d8:	2500      	movs	r5, #0
 80078da:	ea54 0305 	orrs.w	r3, r4, r5
 80078de:	d049      	beq.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80078e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80078e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80078ea:	d02f      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80078ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80078f0:	d828      	bhi.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80078f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80078f6:	d01a      	beq.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80078f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80078fc:	d822      	bhi.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d003      	beq.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007902:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007906:	d007      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007908:	e01c      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800790a:	4bb8      	ldr	r3, [pc, #736]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800790c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800790e:	4ab7      	ldr	r2, [pc, #732]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007910:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007914:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007916:	e01a      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800791c:	3308      	adds	r3, #8
 800791e:	2102      	movs	r1, #2
 8007920:	4618      	mov	r0, r3
 8007922:	f002 fb61 	bl	8009fe8 <RCCEx_PLL2_Config>
 8007926:	4603      	mov	r3, r0
 8007928:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800792c:	e00f      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800792e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007932:	3328      	adds	r3, #40	@ 0x28
 8007934:	2102      	movs	r1, #2
 8007936:	4618      	mov	r0, r3
 8007938:	f002 fc08 	bl	800a14c <RCCEx_PLL3_Config>
 800793c:	4603      	mov	r3, r0
 800793e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007942:	e004      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800794a:	e000      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800794c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800794e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10a      	bne.n	800796c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007956:	4ba5      	ldr	r3, [pc, #660]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007958:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800795a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800795e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007962:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007964:	4aa1      	ldr	r2, [pc, #644]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007966:	430b      	orrs	r3, r1
 8007968:	6513      	str	r3, [r2, #80]	@ 0x50
 800796a:	e003      	b.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800796c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007970:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007980:	f04f 0900 	mov.w	r9, #0
 8007984:	ea58 0309 	orrs.w	r3, r8, r9
 8007988:	d047      	beq.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800798a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800798e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007990:	2b04      	cmp	r3, #4
 8007992:	d82a      	bhi.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007994:	a201      	add	r2, pc, #4	@ (adr r2, 800799c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800799a:	bf00      	nop
 800799c:	080079b1 	.word	0x080079b1
 80079a0:	080079bf 	.word	0x080079bf
 80079a4:	080079d5 	.word	0x080079d5
 80079a8:	080079f3 	.word	0x080079f3
 80079ac:	080079f3 	.word	0x080079f3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079b0:	4b8e      	ldr	r3, [pc, #568]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b4:	4a8d      	ldr	r2, [pc, #564]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80079bc:	e01a      	b.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079c2:	3308      	adds	r3, #8
 80079c4:	2100      	movs	r1, #0
 80079c6:	4618      	mov	r0, r3
 80079c8:	f002 fb0e 	bl	8009fe8 <RCCEx_PLL2_Config>
 80079cc:	4603      	mov	r3, r0
 80079ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80079d2:	e00f      	b.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80079d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079d8:	3328      	adds	r3, #40	@ 0x28
 80079da:	2100      	movs	r1, #0
 80079dc:	4618      	mov	r0, r3
 80079de:	f002 fbb5 	bl	800a14c <RCCEx_PLL3_Config>
 80079e2:	4603      	mov	r3, r0
 80079e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80079e8:	e004      	b.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079f0:	e000      	b.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80079f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d10a      	bne.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80079fc:	4b7b      	ldr	r3, [pc, #492]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a00:	f023 0107 	bic.w	r1, r3, #7
 8007a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a0a:	4a78      	ldr	r2, [pc, #480]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a0c:	430b      	orrs	r3, r1
 8007a0e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a10:	e003      	b.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a22:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007a26:	f04f 0b00 	mov.w	fp, #0
 8007a2a:	ea5a 030b 	orrs.w	r3, sl, fp
 8007a2e:	d04c      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a3a:	d030      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007a3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a40:	d829      	bhi.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007a42:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a44:	d02d      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007a46:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a48:	d825      	bhi.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007a4a:	2b80      	cmp	r3, #128	@ 0x80
 8007a4c:	d018      	beq.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007a4e:	2b80      	cmp	r3, #128	@ 0x80
 8007a50:	d821      	bhi.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d002      	beq.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007a56:	2b40      	cmp	r3, #64	@ 0x40
 8007a58:	d007      	beq.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007a5a:	e01c      	b.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a5c:	4b63      	ldr	r3, [pc, #396]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a60:	4a62      	ldr	r2, [pc, #392]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007a68:	e01c      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a6e:	3308      	adds	r3, #8
 8007a70:	2100      	movs	r1, #0
 8007a72:	4618      	mov	r0, r3
 8007a74:	f002 fab8 	bl	8009fe8 <RCCEx_PLL2_Config>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007a7e:	e011      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a84:	3328      	adds	r3, #40	@ 0x28
 8007a86:	2100      	movs	r1, #0
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f002 fb5f 	bl	800a14c <RCCEx_PLL3_Config>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007a94:	e006      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a9c:	e002      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007a9e:	bf00      	nop
 8007aa0:	e000      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007aa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10a      	bne.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007aac:	4b4f      	ldr	r3, [pc, #316]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007aae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ab0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007aba:	4a4c      	ldr	r2, [pc, #304]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007abc:	430b      	orrs	r3, r1
 8007abe:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ac0:	e003      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ac6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007ad6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007ada:	2300      	movs	r3, #0
 8007adc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007ae0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	d053      	beq.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007af2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007af6:	d035      	beq.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007af8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007afc:	d82e      	bhi.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007afe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007b02:	d031      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007b04:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007b08:	d828      	bhi.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007b0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b0e:	d01a      	beq.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007b10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b14:	d822      	bhi.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d003      	beq.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007b1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b1e:	d007      	beq.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007b20:	e01c      	b.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b22:	4b32      	ldr	r3, [pc, #200]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b26:	4a31      	ldr	r2, [pc, #196]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b2e:	e01c      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b34:	3308      	adds	r3, #8
 8007b36:	2100      	movs	r1, #0
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f002 fa55 	bl	8009fe8 <RCCEx_PLL2_Config>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007b44:	e011      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b4a:	3328      	adds	r3, #40	@ 0x28
 8007b4c:	2100      	movs	r1, #0
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f002 fafc 	bl	800a14c <RCCEx_PLL3_Config>
 8007b54:	4603      	mov	r3, r0
 8007b56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b5a:	e006      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b62:	e002      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007b64:	bf00      	nop
 8007b66:	e000      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007b68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d10b      	bne.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007b72:	4b1e      	ldr	r3, [pc, #120]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b76:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007b82:	4a1a      	ldr	r2, [pc, #104]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b84:	430b      	orrs	r3, r1
 8007b86:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b88:	e003      	b.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007b9e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007ba8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007bac:	460b      	mov	r3, r1
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	d056      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007bba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007bbe:	d038      	beq.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007bc0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007bc4:	d831      	bhi.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007bc6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007bca:	d034      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007bcc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007bd0:	d82b      	bhi.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007bd2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007bd6:	d01d      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007bd8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007bdc:	d825      	bhi.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d006      	beq.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007be2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007be6:	d00a      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007be8:	e01f      	b.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007bea:	bf00      	nop
 8007bec:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bf0:	4ba2      	ldr	r3, [pc, #648]	@ (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bf4:	4aa1      	ldr	r2, [pc, #644]	@ (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007bfc:	e01c      	b.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c02:	3308      	adds	r3, #8
 8007c04:	2100      	movs	r1, #0
 8007c06:	4618      	mov	r0, r3
 8007c08:	f002 f9ee 	bl	8009fe8 <RCCEx_PLL2_Config>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007c12:	e011      	b.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c18:	3328      	adds	r3, #40	@ 0x28
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f002 fa95 	bl	800a14c <RCCEx_PLL3_Config>
 8007c22:	4603      	mov	r3, r0
 8007c24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c28:	e006      	b.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c30:	e002      	b.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007c32:	bf00      	nop
 8007c34:	e000      	b.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007c36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d10b      	bne.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007c40:	4b8e      	ldr	r3, [pc, #568]	@ (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c44:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c4c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007c50:	4a8a      	ldr	r2, [pc, #552]	@ (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c52:	430b      	orrs	r3, r1
 8007c54:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c56:	e003      	b.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c68:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007c6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007c70:	2300      	movs	r3, #0
 8007c72:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007c76:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	d03a      	beq.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c86:	2b30      	cmp	r3, #48	@ 0x30
 8007c88:	d01f      	beq.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007c8a:	2b30      	cmp	r3, #48	@ 0x30
 8007c8c:	d819      	bhi.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007c8e:	2b20      	cmp	r3, #32
 8007c90:	d00c      	beq.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007c92:	2b20      	cmp	r3, #32
 8007c94:	d815      	bhi.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d019      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007c9a:	2b10      	cmp	r3, #16
 8007c9c:	d111      	bne.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c9e:	4b77      	ldr	r3, [pc, #476]	@ (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca2:	4a76      	ldr	r2, [pc, #472]	@ (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ca4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ca8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007caa:	e011      	b.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cb0:	3308      	adds	r3, #8
 8007cb2:	2102      	movs	r1, #2
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f002 f997 	bl	8009fe8 <RCCEx_PLL2_Config>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007cc0:	e006      	b.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007cc8:	e002      	b.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007cca:	bf00      	nop
 8007ccc:	e000      	b.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007cce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10a      	bne.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007cd8:	4b68      	ldr	r3, [pc, #416]	@ (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cdc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ce6:	4a65      	ldr	r2, [pc, #404]	@ (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ce8:	430b      	orrs	r3, r1
 8007cea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007cec:	e003      	b.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cf2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfe:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007d02:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007d06:	2300      	movs	r3, #0
 8007d08:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007d0c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007d10:	460b      	mov	r3, r1
 8007d12:	4313      	orrs	r3, r2
 8007d14:	d051      	beq.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d20:	d035      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007d22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d26:	d82e      	bhi.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007d28:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007d2c:	d031      	beq.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007d2e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007d32:	d828      	bhi.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007d34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d38:	d01a      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007d3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d3e:	d822      	bhi.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d003      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007d44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d48:	d007      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007d4a:	e01c      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d4c:	4b4b      	ldr	r3, [pc, #300]	@ (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d50:	4a4a      	ldr	r2, [pc, #296]	@ (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007d58:	e01c      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d5e:	3308      	adds	r3, #8
 8007d60:	2100      	movs	r1, #0
 8007d62:	4618      	mov	r0, r3
 8007d64:	f002 f940 	bl	8009fe8 <RCCEx_PLL2_Config>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007d6e:	e011      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d74:	3328      	adds	r3, #40	@ 0x28
 8007d76:	2100      	movs	r1, #0
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f002 f9e7 	bl	800a14c <RCCEx_PLL3_Config>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007d84:	e006      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d8c:	e002      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007d8e:	bf00      	nop
 8007d90:	e000      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007d92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10a      	bne.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007d9c:	4b37      	ldr	r3, [pc, #220]	@ (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007da0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007daa:	4a34      	ldr	r2, [pc, #208]	@ (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007dac:	430b      	orrs	r3, r1
 8007dae:	6513      	str	r3, [r2, #80]	@ 0x50
 8007db0:	e003      	b.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007db2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007db6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007dc6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007dca:	2300      	movs	r3, #0
 8007dcc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007dd0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	d056      	beq.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007de0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007de4:	d033      	beq.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007de6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007dea:	d82c      	bhi.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007dec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007df0:	d02f      	beq.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007df2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007df6:	d826      	bhi.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007df8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007dfc:	d02b      	beq.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007dfe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007e02:	d820      	bhi.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007e04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e08:	d012      	beq.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007e0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e0e:	d81a      	bhi.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d022      	beq.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007e14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e18:	d115      	bne.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e1e:	3308      	adds	r3, #8
 8007e20:	2101      	movs	r1, #1
 8007e22:	4618      	mov	r0, r3
 8007e24:	f002 f8e0 	bl	8009fe8 <RCCEx_PLL2_Config>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007e2e:	e015      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e34:	3328      	adds	r3, #40	@ 0x28
 8007e36:	2101      	movs	r1, #1
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f002 f987 	bl	800a14c <RCCEx_PLL3_Config>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007e44:	e00a      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e4c:	e006      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007e4e:	bf00      	nop
 8007e50:	e004      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007e52:	bf00      	nop
 8007e54:	e002      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007e56:	bf00      	nop
 8007e58:	e000      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007e5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d10d      	bne.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007e64:	4b05      	ldr	r3, [pc, #20]	@ (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e68:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e72:	4a02      	ldr	r2, [pc, #8]	@ (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e74:	430b      	orrs	r3, r1
 8007e76:	6513      	str	r3, [r2, #80]	@ 0x50
 8007e78:	e006      	b.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007e7a:	bf00      	nop
 8007e7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e90:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007e94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007e98:	2300      	movs	r3, #0
 8007e9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007e9e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	d055      	beq.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007eb4:	d033      	beq.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007eb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007eba:	d82c      	bhi.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ec0:	d02f      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ec6:	d826      	bhi.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007ec8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007ecc:	d02b      	beq.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007ece:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007ed2:	d820      	bhi.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007ed4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ed8:	d012      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007eda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ede:	d81a      	bhi.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d022      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007ee4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ee8:	d115      	bne.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eee:	3308      	adds	r3, #8
 8007ef0:	2101      	movs	r1, #1
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f002 f878 	bl	8009fe8 <RCCEx_PLL2_Config>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007efe:	e015      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f04:	3328      	adds	r3, #40	@ 0x28
 8007f06:	2101      	movs	r1, #1
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f002 f91f 	bl	800a14c <RCCEx_PLL3_Config>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007f14:	e00a      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f1c:	e006      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007f1e:	bf00      	nop
 8007f20:	e004      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007f22:	bf00      	nop
 8007f24:	e002      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007f26:	bf00      	nop
 8007f28:	e000      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007f2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d10b      	bne.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007f34:	4ba3      	ldr	r3, [pc, #652]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f38:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007f44:	4a9f      	ldr	r2, [pc, #636]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f46:	430b      	orrs	r3, r1
 8007f48:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f4a:	e003      	b.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007f60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007f64:	2300      	movs	r3, #0
 8007f66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007f6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007f6e:	460b      	mov	r3, r1
 8007f70:	4313      	orrs	r3, r2
 8007f72:	d037      	beq.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f7e:	d00e      	beq.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007f80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f84:	d816      	bhi.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d018      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007f8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f8e:	d111      	bne.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f90:	4b8c      	ldr	r3, [pc, #560]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f94:	4a8b      	ldr	r2, [pc, #556]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007f9c:	e00f      	b.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fa2:	3308      	adds	r3, #8
 8007fa4:	2101      	movs	r1, #1
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f002 f81e 	bl	8009fe8 <RCCEx_PLL2_Config>
 8007fac:	4603      	mov	r3, r0
 8007fae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007fb2:	e004      	b.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007fba:	e000      	b.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007fbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d10a      	bne.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007fc6:	4b7f      	ldr	r3, [pc, #508]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fca:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fd4:	4a7b      	ldr	r2, [pc, #492]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fd6:	430b      	orrs	r3, r1
 8007fd8:	6513      	str	r3, [r2, #80]	@ 0x50
 8007fda:	e003      	b.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fe0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fec:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007ff0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007ffa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007ffe:	460b      	mov	r3, r1
 8008000:	4313      	orrs	r3, r2
 8008002:	d039      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008008:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800800a:	2b03      	cmp	r3, #3
 800800c:	d81c      	bhi.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800800e:	a201      	add	r2, pc, #4	@ (adr r2, 8008014 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008014:	08008051 	.word	0x08008051
 8008018:	08008025 	.word	0x08008025
 800801c:	08008033 	.word	0x08008033
 8008020:	08008051 	.word	0x08008051
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008024:	4b67      	ldr	r3, [pc, #412]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008028:	4a66      	ldr	r2, [pc, #408]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800802a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800802e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008030:	e00f      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008036:	3308      	adds	r3, #8
 8008038:	2102      	movs	r1, #2
 800803a:	4618      	mov	r0, r3
 800803c:	f001 ffd4 	bl	8009fe8 <RCCEx_PLL2_Config>
 8008040:	4603      	mov	r3, r0
 8008042:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008046:	e004      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008048:	2301      	movs	r3, #1
 800804a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800804e:	e000      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008050:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008052:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10a      	bne.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800805a:	4b5a      	ldr	r3, [pc, #360]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800805c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800805e:	f023 0103 	bic.w	r1, r3, #3
 8008062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008066:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008068:	4a56      	ldr	r2, [pc, #344]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800806a:	430b      	orrs	r3, r1
 800806c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800806e:	e003      	b.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008070:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008074:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800807c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008080:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008084:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008088:	2300      	movs	r3, #0
 800808a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800808e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008092:	460b      	mov	r3, r1
 8008094:	4313      	orrs	r3, r2
 8008096:	f000 809f 	beq.w	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800809a:	4b4b      	ldr	r3, [pc, #300]	@ (80081c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a4a      	ldr	r2, [pc, #296]	@ (80081c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80080a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80080a6:	f7f9 feaf 	bl	8001e08 <HAL_GetTick>
 80080aa:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80080ae:	e00b      	b.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080b0:	f7f9 feaa 	bl	8001e08 <HAL_GetTick>
 80080b4:	4602      	mov	r2, r0
 80080b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80080ba:	1ad3      	subs	r3, r2, r3
 80080bc:	2b64      	cmp	r3, #100	@ 0x64
 80080be:	d903      	bls.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80080c0:	2303      	movs	r3, #3
 80080c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080c6:	e005      	b.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80080c8:	4b3f      	ldr	r3, [pc, #252]	@ (80081c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d0ed      	beq.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80080d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d179      	bne.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80080dc:	4b39      	ldr	r3, [pc, #228]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080de:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80080e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80080e8:	4053      	eors	r3, r2
 80080ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d015      	beq.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80080f2:	4b34      	ldr	r3, [pc, #208]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080fa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80080fe:	4b31      	ldr	r3, [pc, #196]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008102:	4a30      	ldr	r2, [pc, #192]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008104:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008108:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800810a:	4b2e      	ldr	r3, [pc, #184]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800810c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800810e:	4a2d      	ldr	r2, [pc, #180]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008110:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008114:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008116:	4a2b      	ldr	r2, [pc, #172]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008118:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800811c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800811e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008122:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008126:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800812a:	d118      	bne.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800812c:	f7f9 fe6c 	bl	8001e08 <HAL_GetTick>
 8008130:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008134:	e00d      	b.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008136:	f7f9 fe67 	bl	8001e08 <HAL_GetTick>
 800813a:	4602      	mov	r2, r0
 800813c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008140:	1ad2      	subs	r2, r2, r3
 8008142:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008146:	429a      	cmp	r2, r3
 8008148:	d903      	bls.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800814a:	2303      	movs	r3, #3
 800814c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8008150:	e005      	b.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008152:	4b1c      	ldr	r3, [pc, #112]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008156:	f003 0302 	and.w	r3, r3, #2
 800815a:	2b00      	cmp	r3, #0
 800815c:	d0eb      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800815e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008162:	2b00      	cmp	r3, #0
 8008164:	d129      	bne.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800816a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800816e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008172:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008176:	d10e      	bne.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008178:	4b12      	ldr	r3, [pc, #72]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008184:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008188:	091a      	lsrs	r2, r3, #4
 800818a:	4b10      	ldr	r3, [pc, #64]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800818c:	4013      	ands	r3, r2
 800818e:	4a0d      	ldr	r2, [pc, #52]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008190:	430b      	orrs	r3, r1
 8008192:	6113      	str	r3, [r2, #16]
 8008194:	e005      	b.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008196:	4b0b      	ldr	r3, [pc, #44]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	4a0a      	ldr	r2, [pc, #40]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800819c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80081a0:	6113      	str	r3, [r2, #16]
 80081a2:	4b08      	ldr	r3, [pc, #32]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081a4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80081a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80081ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081b2:	4a04      	ldr	r2, [pc, #16]	@ (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081b4:	430b      	orrs	r3, r1
 80081b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80081b8:	e00e      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80081ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80081c2:	e009      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80081c4:	58024400 	.word	0x58024400
 80081c8:	58024800 	.word	0x58024800
 80081cc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80081d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e0:	f002 0301 	and.w	r3, r2, #1
 80081e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80081e8:	2300      	movs	r3, #0
 80081ea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80081ee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80081f2:	460b      	mov	r3, r1
 80081f4:	4313      	orrs	r3, r2
 80081f6:	f000 8089 	beq.w	800830c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80081fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008200:	2b28      	cmp	r3, #40	@ 0x28
 8008202:	d86b      	bhi.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008204:	a201      	add	r2, pc, #4	@ (adr r2, 800820c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800820a:	bf00      	nop
 800820c:	080082e5 	.word	0x080082e5
 8008210:	080082dd 	.word	0x080082dd
 8008214:	080082dd 	.word	0x080082dd
 8008218:	080082dd 	.word	0x080082dd
 800821c:	080082dd 	.word	0x080082dd
 8008220:	080082dd 	.word	0x080082dd
 8008224:	080082dd 	.word	0x080082dd
 8008228:	080082dd 	.word	0x080082dd
 800822c:	080082b1 	.word	0x080082b1
 8008230:	080082dd 	.word	0x080082dd
 8008234:	080082dd 	.word	0x080082dd
 8008238:	080082dd 	.word	0x080082dd
 800823c:	080082dd 	.word	0x080082dd
 8008240:	080082dd 	.word	0x080082dd
 8008244:	080082dd 	.word	0x080082dd
 8008248:	080082dd 	.word	0x080082dd
 800824c:	080082c7 	.word	0x080082c7
 8008250:	080082dd 	.word	0x080082dd
 8008254:	080082dd 	.word	0x080082dd
 8008258:	080082dd 	.word	0x080082dd
 800825c:	080082dd 	.word	0x080082dd
 8008260:	080082dd 	.word	0x080082dd
 8008264:	080082dd 	.word	0x080082dd
 8008268:	080082dd 	.word	0x080082dd
 800826c:	080082e5 	.word	0x080082e5
 8008270:	080082dd 	.word	0x080082dd
 8008274:	080082dd 	.word	0x080082dd
 8008278:	080082dd 	.word	0x080082dd
 800827c:	080082dd 	.word	0x080082dd
 8008280:	080082dd 	.word	0x080082dd
 8008284:	080082dd 	.word	0x080082dd
 8008288:	080082dd 	.word	0x080082dd
 800828c:	080082e5 	.word	0x080082e5
 8008290:	080082dd 	.word	0x080082dd
 8008294:	080082dd 	.word	0x080082dd
 8008298:	080082dd 	.word	0x080082dd
 800829c:	080082dd 	.word	0x080082dd
 80082a0:	080082dd 	.word	0x080082dd
 80082a4:	080082dd 	.word	0x080082dd
 80082a8:	080082dd 	.word	0x080082dd
 80082ac:	080082e5 	.word	0x080082e5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80082b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082b4:	3308      	adds	r3, #8
 80082b6:	2101      	movs	r1, #1
 80082b8:	4618      	mov	r0, r3
 80082ba:	f001 fe95 	bl	8009fe8 <RCCEx_PLL2_Config>
 80082be:	4603      	mov	r3, r0
 80082c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80082c4:	e00f      	b.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ca:	3328      	adds	r3, #40	@ 0x28
 80082cc:	2101      	movs	r1, #1
 80082ce:	4618      	mov	r0, r3
 80082d0:	f001 ff3c 	bl	800a14c <RCCEx_PLL3_Config>
 80082d4:	4603      	mov	r3, r0
 80082d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80082da:	e004      	b.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80082e2:	e000      	b.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80082e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10a      	bne.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80082ee:	4bbf      	ldr	r3, [pc, #764]	@ (80085ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80082f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082f2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80082f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082fc:	4abb      	ldr	r2, [pc, #748]	@ (80085ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80082fe:	430b      	orrs	r3, r1
 8008300:	6553      	str	r3, [r2, #84]	@ 0x54
 8008302:	e003      	b.n	800830c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008304:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008308:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800830c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008314:	f002 0302 	and.w	r3, r2, #2
 8008318:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800831c:	2300      	movs	r3, #0
 800831e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008322:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008326:	460b      	mov	r3, r1
 8008328:	4313      	orrs	r3, r2
 800832a:	d041      	beq.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800832c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008330:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008332:	2b05      	cmp	r3, #5
 8008334:	d824      	bhi.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008336:	a201      	add	r2, pc, #4	@ (adr r2, 800833c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833c:	08008389 	.word	0x08008389
 8008340:	08008355 	.word	0x08008355
 8008344:	0800836b 	.word	0x0800836b
 8008348:	08008389 	.word	0x08008389
 800834c:	08008389 	.word	0x08008389
 8008350:	08008389 	.word	0x08008389
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008358:	3308      	adds	r3, #8
 800835a:	2101      	movs	r1, #1
 800835c:	4618      	mov	r0, r3
 800835e:	f001 fe43 	bl	8009fe8 <RCCEx_PLL2_Config>
 8008362:	4603      	mov	r3, r0
 8008364:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008368:	e00f      	b.n	800838a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800836a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800836e:	3328      	adds	r3, #40	@ 0x28
 8008370:	2101      	movs	r1, #1
 8008372:	4618      	mov	r0, r3
 8008374:	f001 feea 	bl	800a14c <RCCEx_PLL3_Config>
 8008378:	4603      	mov	r3, r0
 800837a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800837e:	e004      	b.n	800838a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008386:	e000      	b.n	800838a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008388:	bf00      	nop
    }

    if (ret == HAL_OK)
 800838a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800838e:	2b00      	cmp	r3, #0
 8008390:	d10a      	bne.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008392:	4b96      	ldr	r3, [pc, #600]	@ (80085ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008396:	f023 0107 	bic.w	r1, r3, #7
 800839a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800839e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80083a0:	4a92      	ldr	r2, [pc, #584]	@ (80085ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80083a2:	430b      	orrs	r3, r1
 80083a4:	6553      	str	r3, [r2, #84]	@ 0x54
 80083a6:	e003      	b.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80083b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b8:	f002 0304 	and.w	r3, r2, #4
 80083bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80083c0:	2300      	movs	r3, #0
 80083c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80083c6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80083ca:	460b      	mov	r3, r1
 80083cc:	4313      	orrs	r3, r2
 80083ce:	d044      	beq.n	800845a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80083d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80083d8:	2b05      	cmp	r3, #5
 80083da:	d825      	bhi.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80083dc:	a201      	add	r2, pc, #4	@ (adr r2, 80083e4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80083de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e2:	bf00      	nop
 80083e4:	08008431 	.word	0x08008431
 80083e8:	080083fd 	.word	0x080083fd
 80083ec:	08008413 	.word	0x08008413
 80083f0:	08008431 	.word	0x08008431
 80083f4:	08008431 	.word	0x08008431
 80083f8:	08008431 	.word	0x08008431
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008400:	3308      	adds	r3, #8
 8008402:	2101      	movs	r1, #1
 8008404:	4618      	mov	r0, r3
 8008406:	f001 fdef 	bl	8009fe8 <RCCEx_PLL2_Config>
 800840a:	4603      	mov	r3, r0
 800840c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008410:	e00f      	b.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008416:	3328      	adds	r3, #40	@ 0x28
 8008418:	2101      	movs	r1, #1
 800841a:	4618      	mov	r0, r3
 800841c:	f001 fe96 	bl	800a14c <RCCEx_PLL3_Config>
 8008420:	4603      	mov	r3, r0
 8008422:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008426:	e004      	b.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800842e:	e000      	b.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008430:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008432:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008436:	2b00      	cmp	r3, #0
 8008438:	d10b      	bne.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800843a:	4b6c      	ldr	r3, [pc, #432]	@ (80085ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800843c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800843e:	f023 0107 	bic.w	r1, r3, #7
 8008442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008446:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800844a:	4a68      	ldr	r2, [pc, #416]	@ (80085ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800844c:	430b      	orrs	r3, r1
 800844e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008450:	e003      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008452:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008456:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800845a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800845e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008462:	f002 0320 	and.w	r3, r2, #32
 8008466:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800846a:	2300      	movs	r3, #0
 800846c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008470:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008474:	460b      	mov	r3, r1
 8008476:	4313      	orrs	r3, r2
 8008478:	d055      	beq.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800847a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800847e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008482:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008486:	d033      	beq.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008488:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800848c:	d82c      	bhi.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800848e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008492:	d02f      	beq.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008494:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008498:	d826      	bhi.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800849a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800849e:	d02b      	beq.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80084a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80084a4:	d820      	bhi.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80084a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084aa:	d012      	beq.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80084ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084b0:	d81a      	bhi.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d022      	beq.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80084b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084ba:	d115      	bne.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084c0:	3308      	adds	r3, #8
 80084c2:	2100      	movs	r1, #0
 80084c4:	4618      	mov	r0, r3
 80084c6:	f001 fd8f 	bl	8009fe8 <RCCEx_PLL2_Config>
 80084ca:	4603      	mov	r3, r0
 80084cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80084d0:	e015      	b.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80084d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084d6:	3328      	adds	r3, #40	@ 0x28
 80084d8:	2102      	movs	r1, #2
 80084da:	4618      	mov	r0, r3
 80084dc:	f001 fe36 	bl	800a14c <RCCEx_PLL3_Config>
 80084e0:	4603      	mov	r3, r0
 80084e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80084e6:	e00a      	b.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084ee:	e006      	b.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80084f0:	bf00      	nop
 80084f2:	e004      	b.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80084f4:	bf00      	nop
 80084f6:	e002      	b.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80084f8:	bf00      	nop
 80084fa:	e000      	b.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80084fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008502:	2b00      	cmp	r3, #0
 8008504:	d10b      	bne.n	800851e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008506:	4b39      	ldr	r3, [pc, #228]	@ (80085ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800850a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800850e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008516:	4a35      	ldr	r2, [pc, #212]	@ (80085ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008518:	430b      	orrs	r3, r1
 800851a:	6553      	str	r3, [r2, #84]	@ 0x54
 800851c:	e003      	b.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800851e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008522:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800852a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008532:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008536:	2300      	movs	r3, #0
 8008538:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800853c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008540:	460b      	mov	r3, r1
 8008542:	4313      	orrs	r3, r2
 8008544:	d058      	beq.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800854a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800854e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008552:	d033      	beq.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008554:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008558:	d82c      	bhi.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800855a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800855e:	d02f      	beq.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008560:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008564:	d826      	bhi.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008566:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800856a:	d02b      	beq.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800856c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008570:	d820      	bhi.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008572:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008576:	d012      	beq.n	800859e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008578:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800857c:	d81a      	bhi.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800857e:	2b00      	cmp	r3, #0
 8008580:	d022      	beq.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008582:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008586:	d115      	bne.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800858c:	3308      	adds	r3, #8
 800858e:	2100      	movs	r1, #0
 8008590:	4618      	mov	r0, r3
 8008592:	f001 fd29 	bl	8009fe8 <RCCEx_PLL2_Config>
 8008596:	4603      	mov	r3, r0
 8008598:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800859c:	e015      	b.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800859e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085a2:	3328      	adds	r3, #40	@ 0x28
 80085a4:	2102      	movs	r1, #2
 80085a6:	4618      	mov	r0, r3
 80085a8:	f001 fdd0 	bl	800a14c <RCCEx_PLL3_Config>
 80085ac:	4603      	mov	r3, r0
 80085ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80085b2:	e00a      	b.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80085ba:	e006      	b.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80085bc:	bf00      	nop
 80085be:	e004      	b.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80085c0:	bf00      	nop
 80085c2:	e002      	b.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80085c4:	bf00      	nop
 80085c6:	e000      	b.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80085c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d10e      	bne.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80085d2:	4b06      	ldr	r3, [pc, #24]	@ (80085ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80085d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085d6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80085da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80085e2:	4a02      	ldr	r2, [pc, #8]	@ (80085ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80085e4:	430b      	orrs	r3, r1
 80085e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80085e8:	e006      	b.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80085ea:	bf00      	nop
 80085ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80085f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008600:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008604:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008608:	2300      	movs	r3, #0
 800860a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800860e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008612:	460b      	mov	r3, r1
 8008614:	4313      	orrs	r3, r2
 8008616:	d055      	beq.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800861c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008620:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008624:	d033      	beq.n	800868e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008626:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800862a:	d82c      	bhi.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800862c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008630:	d02f      	beq.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008632:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008636:	d826      	bhi.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008638:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800863c:	d02b      	beq.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800863e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008642:	d820      	bhi.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008644:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008648:	d012      	beq.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800864a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800864e:	d81a      	bhi.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008650:	2b00      	cmp	r3, #0
 8008652:	d022      	beq.n	800869a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008654:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008658:	d115      	bne.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800865a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800865e:	3308      	adds	r3, #8
 8008660:	2100      	movs	r1, #0
 8008662:	4618      	mov	r0, r3
 8008664:	f001 fcc0 	bl	8009fe8 <RCCEx_PLL2_Config>
 8008668:	4603      	mov	r3, r0
 800866a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800866e:	e015      	b.n	800869c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008674:	3328      	adds	r3, #40	@ 0x28
 8008676:	2102      	movs	r1, #2
 8008678:	4618      	mov	r0, r3
 800867a:	f001 fd67 	bl	800a14c <RCCEx_PLL3_Config>
 800867e:	4603      	mov	r3, r0
 8008680:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008684:	e00a      	b.n	800869c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800868c:	e006      	b.n	800869c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800868e:	bf00      	nop
 8008690:	e004      	b.n	800869c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008692:	bf00      	nop
 8008694:	e002      	b.n	800869c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008696:	bf00      	nop
 8008698:	e000      	b.n	800869c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800869a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800869c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d10b      	bne.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80086a4:	4ba1      	ldr	r3, [pc, #644]	@ (800892c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086a8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80086ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80086b4:	4a9d      	ldr	r2, [pc, #628]	@ (800892c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086b6:	430b      	orrs	r3, r1
 80086b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80086ba:	e003      	b.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80086c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086cc:	f002 0308 	and.w	r3, r2, #8
 80086d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80086d4:	2300      	movs	r3, #0
 80086d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80086da:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80086de:	460b      	mov	r3, r1
 80086e0:	4313      	orrs	r3, r2
 80086e2:	d01e      	beq.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80086e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086f0:	d10c      	bne.n	800870c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80086f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086f6:	3328      	adds	r3, #40	@ 0x28
 80086f8:	2102      	movs	r1, #2
 80086fa:	4618      	mov	r0, r3
 80086fc:	f001 fd26 	bl	800a14c <RCCEx_PLL3_Config>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d002      	beq.n	800870c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008706:	2301      	movs	r3, #1
 8008708:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800870c:	4b87      	ldr	r3, [pc, #540]	@ (800892c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800870e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008710:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008718:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800871c:	4a83      	ldr	r2, [pc, #524]	@ (800892c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800871e:	430b      	orrs	r3, r1
 8008720:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872a:	f002 0310 	and.w	r3, r2, #16
 800872e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008732:	2300      	movs	r3, #0
 8008734:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008738:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800873c:	460b      	mov	r3, r1
 800873e:	4313      	orrs	r3, r2
 8008740:	d01e      	beq.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008746:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800874a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800874e:	d10c      	bne.n	800876a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008754:	3328      	adds	r3, #40	@ 0x28
 8008756:	2102      	movs	r1, #2
 8008758:	4618      	mov	r0, r3
 800875a:	f001 fcf7 	bl	800a14c <RCCEx_PLL3_Config>
 800875e:	4603      	mov	r3, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	d002      	beq.n	800876a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800876a:	4b70      	ldr	r3, [pc, #448]	@ (800892c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800876c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800876e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008776:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800877a:	4a6c      	ldr	r2, [pc, #432]	@ (800892c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800877c:	430b      	orrs	r3, r1
 800877e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008788:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800878c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008790:	2300      	movs	r3, #0
 8008792:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008796:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800879a:	460b      	mov	r3, r1
 800879c:	4313      	orrs	r3, r2
 800879e:	d03e      	beq.n	800881e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80087a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80087a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087ac:	d022      	beq.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80087ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087b2:	d81b      	bhi.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d003      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80087b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087bc:	d00b      	beq.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80087be:	e015      	b.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80087c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087c4:	3308      	adds	r3, #8
 80087c6:	2100      	movs	r1, #0
 80087c8:	4618      	mov	r0, r3
 80087ca:	f001 fc0d 	bl	8009fe8 <RCCEx_PLL2_Config>
 80087ce:	4603      	mov	r3, r0
 80087d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80087d4:	e00f      	b.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80087d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087da:	3328      	adds	r3, #40	@ 0x28
 80087dc:	2102      	movs	r1, #2
 80087de:	4618      	mov	r0, r3
 80087e0:	f001 fcb4 	bl	800a14c <RCCEx_PLL3_Config>
 80087e4:	4603      	mov	r3, r0
 80087e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80087ea:	e004      	b.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80087f2:	e000      	b.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80087f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d10b      	bne.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80087fe:	4b4b      	ldr	r3, [pc, #300]	@ (800892c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008802:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800880a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800880e:	4a47      	ldr	r2, [pc, #284]	@ (800892c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008810:	430b      	orrs	r3, r1
 8008812:	6593      	str	r3, [r2, #88]	@ 0x58
 8008814:	e003      	b.n	800881e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008816:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800881a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800881e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008826:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800882a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800882c:	2300      	movs	r3, #0
 800882e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008830:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008834:	460b      	mov	r3, r1
 8008836:	4313      	orrs	r3, r2
 8008838:	d03b      	beq.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800883a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800883e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008842:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008846:	d01f      	beq.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008848:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800884c:	d818      	bhi.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800884e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008852:	d003      	beq.n	800885c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008854:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008858:	d007      	beq.n	800886a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800885a:	e011      	b.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800885c:	4b33      	ldr	r3, [pc, #204]	@ (800892c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800885e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008860:	4a32      	ldr	r2, [pc, #200]	@ (800892c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008862:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008866:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008868:	e00f      	b.n	800888a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800886a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800886e:	3328      	adds	r3, #40	@ 0x28
 8008870:	2101      	movs	r1, #1
 8008872:	4618      	mov	r0, r3
 8008874:	f001 fc6a 	bl	800a14c <RCCEx_PLL3_Config>
 8008878:	4603      	mov	r3, r0
 800887a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800887e:	e004      	b.n	800888a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008886:	e000      	b.n	800888a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008888:	bf00      	nop
    }

    if (ret == HAL_OK)
 800888a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800888e:	2b00      	cmp	r3, #0
 8008890:	d10b      	bne.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008892:	4b26      	ldr	r3, [pc, #152]	@ (800892c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008896:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800889a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800889e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088a2:	4a22      	ldr	r2, [pc, #136]	@ (800892c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088a4:	430b      	orrs	r3, r1
 80088a6:	6553      	str	r3, [r2, #84]	@ 0x54
 80088a8:	e003      	b.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80088b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ba:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80088be:	673b      	str	r3, [r7, #112]	@ 0x70
 80088c0:	2300      	movs	r3, #0
 80088c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80088c4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80088c8:	460b      	mov	r3, r1
 80088ca:	4313      	orrs	r3, r2
 80088cc:	d034      	beq.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80088ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d003      	beq.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80088d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088dc:	d007      	beq.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80088de:	e011      	b.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088e0:	4b12      	ldr	r3, [pc, #72]	@ (800892c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e4:	4a11      	ldr	r2, [pc, #68]	@ (800892c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80088ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80088ec:	e00e      	b.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80088ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088f2:	3308      	adds	r3, #8
 80088f4:	2102      	movs	r1, #2
 80088f6:	4618      	mov	r0, r3
 80088f8:	f001 fb76 	bl	8009fe8 <RCCEx_PLL2_Config>
 80088fc:	4603      	mov	r3, r0
 80088fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008902:	e003      	b.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800890a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800890c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008910:	2b00      	cmp	r3, #0
 8008912:	d10d      	bne.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008914:	4b05      	ldr	r3, [pc, #20]	@ (800892c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008916:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008918:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800891c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008922:	4a02      	ldr	r2, [pc, #8]	@ (800892c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008924:	430b      	orrs	r3, r1
 8008926:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008928:	e006      	b.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800892a:	bf00      	nop
 800892c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008930:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008934:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800893c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008940:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008944:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008946:	2300      	movs	r3, #0
 8008948:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800894a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800894e:	460b      	mov	r3, r1
 8008950:	4313      	orrs	r3, r2
 8008952:	d00c      	beq.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008958:	3328      	adds	r3, #40	@ 0x28
 800895a:	2102      	movs	r1, #2
 800895c:	4618      	mov	r0, r3
 800895e:	f001 fbf5 	bl	800a14c <RCCEx_PLL3_Config>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d002      	beq.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800896e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008976:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800897a:	663b      	str	r3, [r7, #96]	@ 0x60
 800897c:	2300      	movs	r3, #0
 800897e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008980:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008984:	460b      	mov	r3, r1
 8008986:	4313      	orrs	r3, r2
 8008988:	d038      	beq.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800898a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800898e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008992:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008996:	d018      	beq.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008998:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800899c:	d811      	bhi.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800899e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089a2:	d014      	beq.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80089a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089a8:	d80b      	bhi.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d011      	beq.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80089ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089b2:	d106      	bne.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089b4:	4bc3      	ldr	r3, [pc, #780]	@ (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089b8:	4ac2      	ldr	r2, [pc, #776]	@ (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80089c0:	e008      	b.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80089c8:	e004      	b.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80089ca:	bf00      	nop
 80089cc:	e002      	b.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80089ce:	bf00      	nop
 80089d0:	e000      	b.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80089d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d10b      	bne.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80089dc:	4bb9      	ldr	r3, [pc, #740]	@ (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089e0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80089e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089ec:	4ab5      	ldr	r2, [pc, #724]	@ (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089ee:	430b      	orrs	r3, r1
 80089f0:	6553      	str	r3, [r2, #84]	@ 0x54
 80089f2:	e003      	b.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80089fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a04:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008a08:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008a0e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008a12:	460b      	mov	r3, r1
 8008a14:	4313      	orrs	r3, r2
 8008a16:	d009      	beq.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008a18:	4baa      	ldr	r3, [pc, #680]	@ (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a1c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a26:	4aa7      	ldr	r2, [pc, #668]	@ (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a28:	430b      	orrs	r3, r1
 8008a2a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a34:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008a38:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	657b      	str	r3, [r7, #84]	@ 0x54
 8008a3e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008a42:	460b      	mov	r3, r1
 8008a44:	4313      	orrs	r3, r2
 8008a46:	d00a      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008a48:	4b9e      	ldr	r3, [pc, #632]	@ (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a54:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008a58:	4a9a      	ldr	r2, [pc, #616]	@ (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a5a:	430b      	orrs	r3, r1
 8008a5c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a66:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008a6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a70:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008a74:	460b      	mov	r3, r1
 8008a76:	4313      	orrs	r3, r2
 8008a78:	d009      	beq.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008a7a:	4b92      	ldr	r3, [pc, #584]	@ (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a7e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a88:	4a8e      	ldr	r2, [pc, #568]	@ (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a8a:	430b      	orrs	r3, r1
 8008a8c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a96:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008a9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008aa0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	d00e      	beq.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008aaa:	4b86      	ldr	r3, [pc, #536]	@ (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	4a85      	ldr	r2, [pc, #532]	@ (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ab0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008ab4:	6113      	str	r3, [r2, #16]
 8008ab6:	4b83      	ldr	r3, [pc, #524]	@ (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ab8:	6919      	ldr	r1, [r3, #16]
 8008aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008abe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008ac2:	4a80      	ldr	r2, [pc, #512]	@ (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ac4:	430b      	orrs	r3, r1
 8008ac6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008ad4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ada:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008ade:	460b      	mov	r3, r1
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	d009      	beq.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008ae4:	4b77      	ldr	r3, [pc, #476]	@ (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ae6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ae8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008af2:	4a74      	ldr	r2, [pc, #464]	@ (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008af4:	430b      	orrs	r3, r1
 8008af6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b00:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008b04:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b06:	2300      	movs	r3, #0
 8008b08:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b0a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008b0e:	460b      	mov	r3, r1
 8008b10:	4313      	orrs	r3, r2
 8008b12:	d00a      	beq.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008b14:	4b6b      	ldr	r3, [pc, #428]	@ (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b18:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b24:	4a67      	ldr	r2, [pc, #412]	@ (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b26:	430b      	orrs	r3, r1
 8008b28:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b32:	2100      	movs	r1, #0
 8008b34:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008b36:	f003 0301 	and.w	r3, r3, #1
 8008b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b3c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008b40:	460b      	mov	r3, r1
 8008b42:	4313      	orrs	r3, r2
 8008b44:	d011      	beq.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b4a:	3308      	adds	r3, #8
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f001 fa4a 	bl	8009fe8 <RCCEx_PLL2_Config>
 8008b54:	4603      	mov	r3, r0
 8008b56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d003      	beq.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b72:	2100      	movs	r1, #0
 8008b74:	6239      	str	r1, [r7, #32]
 8008b76:	f003 0302 	and.w	r3, r3, #2
 8008b7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b7c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008b80:	460b      	mov	r3, r1
 8008b82:	4313      	orrs	r3, r2
 8008b84:	d011      	beq.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b8a:	3308      	adds	r3, #8
 8008b8c:	2101      	movs	r1, #1
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f001 fa2a 	bl	8009fe8 <RCCEx_PLL2_Config>
 8008b94:	4603      	mov	r3, r0
 8008b96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008b9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d003      	beq.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ba6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb2:	2100      	movs	r1, #0
 8008bb4:	61b9      	str	r1, [r7, #24]
 8008bb6:	f003 0304 	and.w	r3, r3, #4
 8008bba:	61fb      	str	r3, [r7, #28]
 8008bbc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	d011      	beq.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bca:	3308      	adds	r3, #8
 8008bcc:	2102      	movs	r1, #2
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f001 fa0a 	bl	8009fe8 <RCCEx_PLL2_Config>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008bda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d003      	beq.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008be2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008be6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	6139      	str	r1, [r7, #16]
 8008bf6:	f003 0308 	and.w	r3, r3, #8
 8008bfa:	617b      	str	r3, [r7, #20]
 8008bfc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008c00:	460b      	mov	r3, r1
 8008c02:	4313      	orrs	r3, r2
 8008c04:	d011      	beq.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c0a:	3328      	adds	r3, #40	@ 0x28
 8008c0c:	2100      	movs	r1, #0
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f001 fa9c 	bl	800a14c <RCCEx_PLL3_Config>
 8008c14:	4603      	mov	r3, r0
 8008c16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008c1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d003      	beq.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c32:	2100      	movs	r1, #0
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	f003 0310 	and.w	r3, r3, #16
 8008c3a:	60fb      	str	r3, [r7, #12]
 8008c3c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008c40:	460b      	mov	r3, r1
 8008c42:	4313      	orrs	r3, r2
 8008c44:	d011      	beq.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c4a:	3328      	adds	r3, #40	@ 0x28
 8008c4c:	2101      	movs	r1, #1
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f001 fa7c 	bl	800a14c <RCCEx_PLL3_Config>
 8008c54:	4603      	mov	r3, r0
 8008c56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008c5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d003      	beq.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c72:	2100      	movs	r1, #0
 8008c74:	6039      	str	r1, [r7, #0]
 8008c76:	f003 0320 	and.w	r3, r3, #32
 8008c7a:	607b      	str	r3, [r7, #4]
 8008c7c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008c80:	460b      	mov	r3, r1
 8008c82:	4313      	orrs	r3, r2
 8008c84:	d011      	beq.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c8a:	3328      	adds	r3, #40	@ 0x28
 8008c8c:	2102      	movs	r1, #2
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f001 fa5c 	bl	800a14c <RCCEx_PLL3_Config>
 8008c94:	4603      	mov	r3, r0
 8008c96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d003      	beq.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ca6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008caa:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d101      	bne.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	e000      	b.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008cc4:	58024400 	.word	0x58024400

08008cc8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b090      	sub	sp, #64	@ 0x40
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008cd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cd6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008cda:	430b      	orrs	r3, r1
 8008cdc:	f040 8094 	bne.w	8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008ce0:	4b9e      	ldr	r3, [pc, #632]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ce2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ce4:	f003 0307 	and.w	r3, r3, #7
 8008ce8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cec:	2b04      	cmp	r3, #4
 8008cee:	f200 8087 	bhi.w	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf8:	08008d0d 	.word	0x08008d0d
 8008cfc:	08008d35 	.word	0x08008d35
 8008d00:	08008d5d 	.word	0x08008d5d
 8008d04:	08008df9 	.word	0x08008df9
 8008d08:	08008d85 	.word	0x08008d85
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d0c:	4b93      	ldr	r3, [pc, #588]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d18:	d108      	bne.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f001 f810 	bl	8009d44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d28:	f000 bd45 	b.w	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d30:	f000 bd41 	b.w	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d34:	4b89      	ldr	r3, [pc, #548]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d40:	d108      	bne.n	8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d42:	f107 0318 	add.w	r3, r7, #24
 8008d46:	4618      	mov	r0, r3
 8008d48:	f000 fd54 	bl	80097f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d4c:	69bb      	ldr	r3, [r7, #24]
 8008d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d50:	f000 bd31 	b.w	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d54:	2300      	movs	r3, #0
 8008d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d58:	f000 bd2d 	b.w	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d5c:	4b7f      	ldr	r3, [pc, #508]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d68:	d108      	bne.n	8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d6a:	f107 030c 	add.w	r3, r7, #12
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f000 fe94 	bl	8009a9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d78:	f000 bd1d 	b.w	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d80:	f000 bd19 	b.w	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d84:	4b75      	ldr	r3, [pc, #468]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d88:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008d8c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d8e:	4b73      	ldr	r3, [pc, #460]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f003 0304 	and.w	r3, r3, #4
 8008d96:	2b04      	cmp	r3, #4
 8008d98:	d10c      	bne.n	8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d109      	bne.n	8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008da0:	4b6e      	ldr	r3, [pc, #440]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	08db      	lsrs	r3, r3, #3
 8008da6:	f003 0303 	and.w	r3, r3, #3
 8008daa:	4a6d      	ldr	r2, [pc, #436]	@ (8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008dac:	fa22 f303 	lsr.w	r3, r2, r3
 8008db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008db2:	e01f      	b.n	8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008db4:	4b69      	ldr	r3, [pc, #420]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008dc0:	d106      	bne.n	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008dc8:	d102      	bne.n	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008dca:	4b66      	ldr	r3, [pc, #408]	@ (8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008dce:	e011      	b.n	8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008dd0:	4b62      	ldr	r3, [pc, #392]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ddc:	d106      	bne.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008dde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008de0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008de4:	d102      	bne.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008de6:	4b60      	ldr	r3, [pc, #384]	@ (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008dea:	e003      	b.n	8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008dec:	2300      	movs	r3, #0
 8008dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008df0:	f000 bce1 	b.w	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008df4:	f000 bcdf 	b.w	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008df8:	4b5c      	ldr	r3, [pc, #368]	@ (8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dfc:	f000 bcdb 	b.w	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008e00:	2300      	movs	r3, #0
 8008e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e04:	f000 bcd7 	b.w	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008e08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e0c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008e10:	430b      	orrs	r3, r1
 8008e12:	f040 80ad 	bne.w	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008e16:	4b51      	ldr	r3, [pc, #324]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e1a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008e1e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e26:	d056      	beq.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e2e:	f200 8090 	bhi.w	8008f52 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e34:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e36:	f000 8088 	beq.w	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e3c:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e3e:	f200 8088 	bhi.w	8008f52 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e44:	2b80      	cmp	r3, #128	@ 0x80
 8008e46:	d032      	beq.n	8008eae <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e4a:	2b80      	cmp	r3, #128	@ 0x80
 8008e4c:	f200 8081 	bhi.w	8008f52 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d003      	beq.n	8008e5e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e58:	2b40      	cmp	r3, #64	@ 0x40
 8008e5a:	d014      	beq.n	8008e86 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008e5c:	e079      	b.n	8008f52 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e5e:	4b3f      	ldr	r3, [pc, #252]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e6a:	d108      	bne.n	8008e7e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e70:	4618      	mov	r0, r3
 8008e72:	f000 ff67 	bl	8009d44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e7a:	f000 bc9c 	b.w	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e82:	f000 bc98 	b.w	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e86:	4b35      	ldr	r3, [pc, #212]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e92:	d108      	bne.n	8008ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e94:	f107 0318 	add.w	r3, r7, #24
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f000 fcab 	bl	80097f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ea2:	f000 bc88 	b.w	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eaa:	f000 bc84 	b.w	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008eae:	4b2b      	ldr	r3, [pc, #172]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008eb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008eba:	d108      	bne.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ebc:	f107 030c 	add.w	r3, r7, #12
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f000 fdeb 	bl	8009a9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008eca:	f000 bc74 	b.w	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ed2:	f000 bc70 	b.w	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ed6:	4b21      	ldr	r3, [pc, #132]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008eda:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008ede:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f003 0304 	and.w	r3, r3, #4
 8008ee8:	2b04      	cmp	r3, #4
 8008eea:	d10c      	bne.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d109      	bne.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	08db      	lsrs	r3, r3, #3
 8008ef8:	f003 0303 	and.w	r3, r3, #3
 8008efc:	4a18      	ldr	r2, [pc, #96]	@ (8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008efe:	fa22 f303 	lsr.w	r3, r2, r3
 8008f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f04:	e01f      	b.n	8008f46 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f06:	4b15      	ldr	r3, [pc, #84]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f12:	d106      	bne.n	8008f22 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f1a:	d102      	bne.n	8008f22 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008f1c:	4b11      	ldr	r3, [pc, #68]	@ (8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f20:	e011      	b.n	8008f46 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f22:	4b0e      	ldr	r3, [pc, #56]	@ (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f2e:	d106      	bne.n	8008f3e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f36:	d102      	bne.n	8008f3e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008f38:	4b0b      	ldr	r3, [pc, #44]	@ (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f3c:	e003      	b.n	8008f46 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008f42:	f000 bc38 	b.w	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008f46:	f000 bc36 	b.w	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008f4a:	4b08      	ldr	r3, [pc, #32]	@ (8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f4e:	f000 bc32 	b.w	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008f52:	2300      	movs	r3, #0
 8008f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f56:	f000 bc2e 	b.w	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008f5a:	bf00      	nop
 8008f5c:	58024400 	.word	0x58024400
 8008f60:	03d09000 	.word	0x03d09000
 8008f64:	003d0900 	.word	0x003d0900
 8008f68:	017d7840 	.word	0x017d7840
 8008f6c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008f70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f74:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008f78:	430b      	orrs	r3, r1
 8008f7a:	f040 809c 	bne.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008f7e:	4b9e      	ldr	r3, [pc, #632]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f82:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008f86:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f8a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008f8e:	d054      	beq.n	800903a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f92:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008f96:	f200 808b 	bhi.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f9c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008fa0:	f000 8083 	beq.w	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008faa:	f200 8081 	bhi.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008fb4:	d02f      	beq.n	8009016 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008fbc:	d878      	bhi.n	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d004      	beq.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008fca:	d012      	beq.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008fcc:	e070      	b.n	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008fce:	4b8a      	ldr	r3, [pc, #552]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fd6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008fda:	d107      	bne.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f000 feaf 	bl	8009d44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fea:	e3e4      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fec:	2300      	movs	r3, #0
 8008fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ff0:	e3e1      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ff2:	4b81      	ldr	r3, [pc, #516]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ffa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ffe:	d107      	bne.n	8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009000:	f107 0318 	add.w	r3, r7, #24
 8009004:	4618      	mov	r0, r3
 8009006:	f000 fbf5 	bl	80097f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800900e:	e3d2      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009010:	2300      	movs	r3, #0
 8009012:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009014:	e3cf      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009016:	4b78      	ldr	r3, [pc, #480]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800901e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009022:	d107      	bne.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009024:	f107 030c 	add.w	r3, r7, #12
 8009028:	4618      	mov	r0, r3
 800902a:	f000 fd37 	bl	8009a9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009032:	e3c0      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009034:	2300      	movs	r3, #0
 8009036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009038:	e3bd      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800903a:	4b6f      	ldr	r3, [pc, #444]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800903c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800903e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009042:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009044:	4b6c      	ldr	r3, [pc, #432]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f003 0304 	and.w	r3, r3, #4
 800904c:	2b04      	cmp	r3, #4
 800904e:	d10c      	bne.n	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009052:	2b00      	cmp	r3, #0
 8009054:	d109      	bne.n	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009056:	4b68      	ldr	r3, [pc, #416]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	08db      	lsrs	r3, r3, #3
 800905c:	f003 0303 	and.w	r3, r3, #3
 8009060:	4a66      	ldr	r2, [pc, #408]	@ (80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009062:	fa22 f303 	lsr.w	r3, r2, r3
 8009066:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009068:	e01e      	b.n	80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800906a:	4b63      	ldr	r3, [pc, #396]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009072:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009076:	d106      	bne.n	8009086 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800907a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800907e:	d102      	bne.n	8009086 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009080:	4b5f      	ldr	r3, [pc, #380]	@ (8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009082:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009084:	e010      	b.n	80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009086:	4b5c      	ldr	r3, [pc, #368]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800908e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009092:	d106      	bne.n	80090a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009096:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800909a:	d102      	bne.n	80090a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800909c:	4b59      	ldr	r3, [pc, #356]	@ (8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800909e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090a0:	e002      	b.n	80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80090a2:	2300      	movs	r3, #0
 80090a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80090a6:	e386      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80090a8:	e385      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80090aa:	4b57      	ldr	r3, [pc, #348]	@ (8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80090ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090ae:	e382      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80090b0:	2300      	movs	r3, #0
 80090b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090b4:	e37f      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80090b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090ba:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80090be:	430b      	orrs	r3, r1
 80090c0:	f040 80a7 	bne.w	8009212 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80090c4:	4b4c      	ldr	r3, [pc, #304]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80090c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090c8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80090cc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80090ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80090d4:	d055      	beq.n	8009182 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80090d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80090dc:	f200 8096 	bhi.w	800920c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80090e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80090e6:	f000 8084 	beq.w	80091f2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80090ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80090f0:	f200 808c 	bhi.w	800920c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80090f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80090fa:	d030      	beq.n	800915e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80090fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009102:	f200 8083 	bhi.w	800920c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009108:	2b00      	cmp	r3, #0
 800910a:	d004      	beq.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800910c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800910e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009112:	d012      	beq.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009114:	e07a      	b.n	800920c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009116:	4b38      	ldr	r3, [pc, #224]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800911e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009122:	d107      	bne.n	8009134 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009124:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009128:	4618      	mov	r0, r3
 800912a:	f000 fe0b 	bl	8009d44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800912e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009130:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009132:	e340      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009134:	2300      	movs	r3, #0
 8009136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009138:	e33d      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800913a:	4b2f      	ldr	r3, [pc, #188]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009142:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009146:	d107      	bne.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009148:	f107 0318 	add.w	r3, r7, #24
 800914c:	4618      	mov	r0, r3
 800914e:	f000 fb51 	bl	80097f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009156:	e32e      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009158:	2300      	movs	r3, #0
 800915a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800915c:	e32b      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800915e:	4b26      	ldr	r3, [pc, #152]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009166:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800916a:	d107      	bne.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800916c:	f107 030c 	add.w	r3, r7, #12
 8009170:	4618      	mov	r0, r3
 8009172:	f000 fc93 	bl	8009a9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800917a:	e31c      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800917c:	2300      	movs	r3, #0
 800917e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009180:	e319      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009182:	4b1d      	ldr	r3, [pc, #116]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009186:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800918a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800918c:	4b1a      	ldr	r3, [pc, #104]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f003 0304 	and.w	r3, r3, #4
 8009194:	2b04      	cmp	r3, #4
 8009196:	d10c      	bne.n	80091b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800919a:	2b00      	cmp	r3, #0
 800919c:	d109      	bne.n	80091b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800919e:	4b16      	ldr	r3, [pc, #88]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	08db      	lsrs	r3, r3, #3
 80091a4:	f003 0303 	and.w	r3, r3, #3
 80091a8:	4a14      	ldr	r2, [pc, #80]	@ (80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80091aa:	fa22 f303 	lsr.w	r3, r2, r3
 80091ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091b0:	e01e      	b.n	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80091b2:	4b11      	ldr	r3, [pc, #68]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091be:	d106      	bne.n	80091ce <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80091c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80091c6:	d102      	bne.n	80091ce <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80091c8:	4b0d      	ldr	r3, [pc, #52]	@ (8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80091ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091cc:	e010      	b.n	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80091ce:	4b0a      	ldr	r3, [pc, #40]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091da:	d106      	bne.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80091dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091e2:	d102      	bne.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80091e4:	4b07      	ldr	r3, [pc, #28]	@ (8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80091e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091e8:	e002      	b.n	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80091ea:	2300      	movs	r3, #0
 80091ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80091ee:	e2e2      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80091f0:	e2e1      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80091f2:	4b05      	ldr	r3, [pc, #20]	@ (8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80091f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091f6:	e2de      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80091f8:	58024400 	.word	0x58024400
 80091fc:	03d09000 	.word	0x03d09000
 8009200:	003d0900 	.word	0x003d0900
 8009204:	017d7840 	.word	0x017d7840
 8009208:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800920c:	2300      	movs	r3, #0
 800920e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009210:	e2d1      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009212:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009216:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800921a:	430b      	orrs	r3, r1
 800921c:	f040 809c 	bne.w	8009358 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009220:	4b93      	ldr	r3, [pc, #588]	@ (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009224:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009228:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800922a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800922c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009230:	d054      	beq.n	80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009234:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009238:	f200 808b 	bhi.w	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800923c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800923e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009242:	f000 8083 	beq.w	800934c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8009246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009248:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800924c:	f200 8081 	bhi.w	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009252:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009256:	d02f      	beq.n	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800925a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800925e:	d878      	bhi.n	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009262:	2b00      	cmp	r3, #0
 8009264:	d004      	beq.n	8009270 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009268:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800926c:	d012      	beq.n	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800926e:	e070      	b.n	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009270:	4b7f      	ldr	r3, [pc, #508]	@ (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009278:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800927c:	d107      	bne.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800927e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009282:	4618      	mov	r0, r3
 8009284:	f000 fd5e 	bl	8009d44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800928a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800928c:	e293      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800928e:	2300      	movs	r3, #0
 8009290:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009292:	e290      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009294:	4b76      	ldr	r3, [pc, #472]	@ (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800929c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092a0:	d107      	bne.n	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092a2:	f107 0318 	add.w	r3, r7, #24
 80092a6:	4618      	mov	r0, r3
 80092a8:	f000 faa4 	bl	80097f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80092ac:	69bb      	ldr	r3, [r7, #24]
 80092ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092b0:	e281      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092b2:	2300      	movs	r3, #0
 80092b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092b6:	e27e      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80092b8:	4b6d      	ldr	r3, [pc, #436]	@ (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80092c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092c4:	d107      	bne.n	80092d6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092c6:	f107 030c 	add.w	r3, r7, #12
 80092ca:	4618      	mov	r0, r3
 80092cc:	f000 fbe6 	bl	8009a9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092d4:	e26f      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092d6:	2300      	movs	r3, #0
 80092d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092da:	e26c      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80092dc:	4b64      	ldr	r3, [pc, #400]	@ (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80092e4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092e6:	4b62      	ldr	r3, [pc, #392]	@ (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f003 0304 	and.w	r3, r3, #4
 80092ee:	2b04      	cmp	r3, #4
 80092f0:	d10c      	bne.n	800930c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80092f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d109      	bne.n	800930c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092f8:	4b5d      	ldr	r3, [pc, #372]	@ (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	08db      	lsrs	r3, r3, #3
 80092fe:	f003 0303 	and.w	r3, r3, #3
 8009302:	4a5c      	ldr	r2, [pc, #368]	@ (8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009304:	fa22 f303 	lsr.w	r3, r2, r3
 8009308:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800930a:	e01e      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800930c:	4b58      	ldr	r3, [pc, #352]	@ (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009314:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009318:	d106      	bne.n	8009328 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800931a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800931c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009320:	d102      	bne.n	8009328 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009322:	4b55      	ldr	r3, [pc, #340]	@ (8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009324:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009326:	e010      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009328:	4b51      	ldr	r3, [pc, #324]	@ (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009330:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009334:	d106      	bne.n	8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009338:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800933c:	d102      	bne.n	8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800933e:	4b4f      	ldr	r3, [pc, #316]	@ (800947c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009340:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009342:	e002      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009344:	2300      	movs	r3, #0
 8009346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009348:	e235      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800934a:	e234      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800934c:	4b4c      	ldr	r3, [pc, #304]	@ (8009480 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800934e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009350:	e231      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009352:	2300      	movs	r3, #0
 8009354:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009356:	e22e      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009358:	e9d7 2300 	ldrd	r2, r3, [r7]
 800935c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009360:	430b      	orrs	r3, r1
 8009362:	f040 808f 	bne.w	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009366:	4b42      	ldr	r3, [pc, #264]	@ (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009368:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800936a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800936e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009372:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009376:	d06b      	beq.n	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800937a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800937e:	d874      	bhi.n	800946a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009382:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009386:	d056      	beq.n	8009436 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800938a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800938e:	d86c      	bhi.n	800946a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009392:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009396:	d03b      	beq.n	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800939a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800939e:	d864      	bhi.n	800946a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80093a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093a6:	d021      	beq.n	80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80093a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093ae:	d85c      	bhi.n	800946a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80093b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d004      	beq.n	80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80093b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093bc:	d004      	beq.n	80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80093be:	e054      	b.n	800946a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80093c0:	f7fe fa4c 	bl	800785c <HAL_RCC_GetPCLK1Freq>
 80093c4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80093c6:	e1f6      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80093c8:	4b29      	ldr	r3, [pc, #164]	@ (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093d4:	d107      	bne.n	80093e6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093d6:	f107 0318 	add.w	r3, r7, #24
 80093da:	4618      	mov	r0, r3
 80093dc:	f000 fa0a 	bl	80097f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80093e0:	69fb      	ldr	r3, [r7, #28]
 80093e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093e4:	e1e7      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093e6:	2300      	movs	r3, #0
 80093e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093ea:	e1e4      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093ec:	4b20      	ldr	r3, [pc, #128]	@ (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80093f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093f8:	d107      	bne.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093fa:	f107 030c 	add.w	r3, r7, #12
 80093fe:	4618      	mov	r0, r3
 8009400:	f000 fb4c 	bl	8009a9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009408:	e1d5      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800940a:	2300      	movs	r3, #0
 800940c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800940e:	e1d2      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009410:	4b17      	ldr	r3, [pc, #92]	@ (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f003 0304 	and.w	r3, r3, #4
 8009418:	2b04      	cmp	r3, #4
 800941a:	d109      	bne.n	8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800941c:	4b14      	ldr	r3, [pc, #80]	@ (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	08db      	lsrs	r3, r3, #3
 8009422:	f003 0303 	and.w	r3, r3, #3
 8009426:	4a13      	ldr	r2, [pc, #76]	@ (8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009428:	fa22 f303 	lsr.w	r3, r2, r3
 800942c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800942e:	e1c2      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009430:	2300      	movs	r3, #0
 8009432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009434:	e1bf      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009436:	4b0e      	ldr	r3, [pc, #56]	@ (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800943e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009442:	d102      	bne.n	800944a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009444:	4b0c      	ldr	r3, [pc, #48]	@ (8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009448:	e1b5      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800944a:	2300      	movs	r3, #0
 800944c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800944e:	e1b2      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009450:	4b07      	ldr	r3, [pc, #28]	@ (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009458:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800945c:	d102      	bne.n	8009464 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800945e:	4b07      	ldr	r3, [pc, #28]	@ (800947c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009460:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009462:	e1a8      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009464:	2300      	movs	r3, #0
 8009466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009468:	e1a5      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800946a:	2300      	movs	r3, #0
 800946c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800946e:	e1a2      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009470:	58024400 	.word	0x58024400
 8009474:	03d09000 	.word	0x03d09000
 8009478:	003d0900 	.word	0x003d0900
 800947c:	017d7840 	.word	0x017d7840
 8009480:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009484:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009488:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800948c:	430b      	orrs	r3, r1
 800948e:	d173      	bne.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009490:	4b9c      	ldr	r3, [pc, #624]	@ (8009704 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009494:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009498:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800949a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800949c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094a0:	d02f      	beq.n	8009502 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80094a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094a8:	d863      	bhi.n	8009572 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80094aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d004      	beq.n	80094ba <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80094b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094b6:	d012      	beq.n	80094de <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80094b8:	e05b      	b.n	8009572 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80094ba:	4b92      	ldr	r3, [pc, #584]	@ (8009704 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094c6:	d107      	bne.n	80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094c8:	f107 0318 	add.w	r3, r7, #24
 80094cc:	4618      	mov	r0, r3
 80094ce:	f000 f991 	bl	80097f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80094d2:	69bb      	ldr	r3, [r7, #24]
 80094d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094d6:	e16e      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094d8:	2300      	movs	r3, #0
 80094da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094dc:	e16b      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094de:	4b89      	ldr	r3, [pc, #548]	@ (8009704 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80094e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094ea:	d107      	bne.n	80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094ec:	f107 030c 	add.w	r3, r7, #12
 80094f0:	4618      	mov	r0, r3
 80094f2:	f000 fad3 	bl	8009a9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094fa:	e15c      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094fc:	2300      	movs	r3, #0
 80094fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009500:	e159      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009502:	4b80      	ldr	r3, [pc, #512]	@ (8009704 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009506:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800950a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800950c:	4b7d      	ldr	r3, [pc, #500]	@ (8009704 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f003 0304 	and.w	r3, r3, #4
 8009514:	2b04      	cmp	r3, #4
 8009516:	d10c      	bne.n	8009532 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800951a:	2b00      	cmp	r3, #0
 800951c:	d109      	bne.n	8009532 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800951e:	4b79      	ldr	r3, [pc, #484]	@ (8009704 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	08db      	lsrs	r3, r3, #3
 8009524:	f003 0303 	and.w	r3, r3, #3
 8009528:	4a77      	ldr	r2, [pc, #476]	@ (8009708 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800952a:	fa22 f303 	lsr.w	r3, r2, r3
 800952e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009530:	e01e      	b.n	8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009532:	4b74      	ldr	r3, [pc, #464]	@ (8009704 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800953a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800953e:	d106      	bne.n	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009542:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009546:	d102      	bne.n	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009548:	4b70      	ldr	r3, [pc, #448]	@ (800970c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800954a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800954c:	e010      	b.n	8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800954e:	4b6d      	ldr	r3, [pc, #436]	@ (8009704 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009556:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800955a:	d106      	bne.n	800956a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800955c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800955e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009562:	d102      	bne.n	800956a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009564:	4b6a      	ldr	r3, [pc, #424]	@ (8009710 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009566:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009568:	e002      	b.n	8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800956a:	2300      	movs	r3, #0
 800956c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800956e:	e122      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009570:	e121      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009572:	2300      	movs	r3, #0
 8009574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009576:	e11e      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009578:	e9d7 2300 	ldrd	r2, r3, [r7]
 800957c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009580:	430b      	orrs	r3, r1
 8009582:	d133      	bne.n	80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009584:	4b5f      	ldr	r3, [pc, #380]	@ (8009704 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009586:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009588:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800958c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800958e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009590:	2b00      	cmp	r3, #0
 8009592:	d004      	beq.n	800959e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009596:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800959a:	d012      	beq.n	80095c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800959c:	e023      	b.n	80095e6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800959e:	4b59      	ldr	r3, [pc, #356]	@ (8009704 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80095a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80095aa:	d107      	bne.n	80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80095ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80095b0:	4618      	mov	r0, r3
 80095b2:	f000 fbc7 	bl	8009d44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80095b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095ba:	e0fc      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095bc:	2300      	movs	r3, #0
 80095be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095c0:	e0f9      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095c2:	4b50      	ldr	r3, [pc, #320]	@ (8009704 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095ce:	d107      	bne.n	80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095d0:	f107 0318 	add.w	r3, r7, #24
 80095d4:	4618      	mov	r0, r3
 80095d6:	f000 f90d 	bl	80097f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80095da:	6a3b      	ldr	r3, [r7, #32]
 80095dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095de:	e0ea      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095e0:	2300      	movs	r3, #0
 80095e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095e4:	e0e7      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80095e6:	2300      	movs	r3, #0
 80095e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095ea:	e0e4      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80095ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095f0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80095f4:	430b      	orrs	r3, r1
 80095f6:	f040 808d 	bne.w	8009714 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80095fa:	4b42      	ldr	r3, [pc, #264]	@ (8009704 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80095fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095fe:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009602:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009606:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800960a:	d06b      	beq.n	80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800960c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800960e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009612:	d874      	bhi.n	80096fe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009616:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800961a:	d056      	beq.n	80096ca <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800961c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800961e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009622:	d86c      	bhi.n	80096fe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009626:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800962a:	d03b      	beq.n	80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800962c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800962e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009632:	d864      	bhi.n	80096fe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009636:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800963a:	d021      	beq.n	8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800963c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800963e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009642:	d85c      	bhi.n	80096fe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009646:	2b00      	cmp	r3, #0
 8009648:	d004      	beq.n	8009654 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800964a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800964c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009650:	d004      	beq.n	800965c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009652:	e054      	b.n	80096fe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009654:	f000 f8b8 	bl	80097c8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009658:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800965a:	e0ac      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800965c:	4b29      	ldr	r3, [pc, #164]	@ (8009704 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009664:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009668:	d107      	bne.n	800967a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800966a:	f107 0318 	add.w	r3, r7, #24
 800966e:	4618      	mov	r0, r3
 8009670:	f000 f8c0 	bl	80097f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009678:	e09d      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800967a:	2300      	movs	r3, #0
 800967c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800967e:	e09a      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009680:	4b20      	ldr	r3, [pc, #128]	@ (8009704 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009688:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800968c:	d107      	bne.n	800969e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800968e:	f107 030c 	add.w	r3, r7, #12
 8009692:	4618      	mov	r0, r3
 8009694:	f000 fa02 	bl	8009a9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800969c:	e08b      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800969e:	2300      	movs	r3, #0
 80096a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096a2:	e088      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80096a4:	4b17      	ldr	r3, [pc, #92]	@ (8009704 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f003 0304 	and.w	r3, r3, #4
 80096ac:	2b04      	cmp	r3, #4
 80096ae:	d109      	bne.n	80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80096b0:	4b14      	ldr	r3, [pc, #80]	@ (8009704 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	08db      	lsrs	r3, r3, #3
 80096b6:	f003 0303 	and.w	r3, r3, #3
 80096ba:	4a13      	ldr	r2, [pc, #76]	@ (8009708 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80096bc:	fa22 f303 	lsr.w	r3, r2, r3
 80096c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096c2:	e078      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096c4:	2300      	movs	r3, #0
 80096c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096c8:	e075      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80096ca:	4b0e      	ldr	r3, [pc, #56]	@ (8009704 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096d6:	d102      	bne.n	80096de <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80096d8:	4b0c      	ldr	r3, [pc, #48]	@ (800970c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80096da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096dc:	e06b      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096de:	2300      	movs	r3, #0
 80096e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096e2:	e068      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80096e4:	4b07      	ldr	r3, [pc, #28]	@ (8009704 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096f0:	d102      	bne.n	80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80096f2:	4b07      	ldr	r3, [pc, #28]	@ (8009710 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80096f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096f6:	e05e      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096f8:	2300      	movs	r3, #0
 80096fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096fc:	e05b      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80096fe:	2300      	movs	r3, #0
 8009700:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009702:	e058      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009704:	58024400 	.word	0x58024400
 8009708:	03d09000 	.word	0x03d09000
 800970c:	003d0900 	.word	0x003d0900
 8009710:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009714:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009718:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800971c:	430b      	orrs	r3, r1
 800971e:	d148      	bne.n	80097b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009720:	4b27      	ldr	r3, [pc, #156]	@ (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009724:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009728:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800972a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800972c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009730:	d02a      	beq.n	8009788 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8009732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009734:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009738:	d838      	bhi.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800973a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800973c:	2b00      	cmp	r3, #0
 800973e:	d004      	beq.n	800974a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009742:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009746:	d00d      	beq.n	8009764 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009748:	e030      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800974a:	4b1d      	ldr	r3, [pc, #116]	@ (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009752:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009756:	d102      	bne.n	800975e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009758:	4b1a      	ldr	r3, [pc, #104]	@ (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800975a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800975c:	e02b      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800975e:	2300      	movs	r3, #0
 8009760:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009762:	e028      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009764:	4b16      	ldr	r3, [pc, #88]	@ (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800976c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009770:	d107      	bne.n	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009772:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009776:	4618      	mov	r0, r3
 8009778:	f000 fae4 	bl	8009d44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800977c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800977e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009780:	e019      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009782:	2300      	movs	r3, #0
 8009784:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009786:	e016      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009788:	4b0d      	ldr	r3, [pc, #52]	@ (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009790:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009794:	d107      	bne.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009796:	f107 0318 	add.w	r3, r7, #24
 800979a:	4618      	mov	r0, r3
 800979c:	f000 f82a 	bl	80097f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80097a0:	69fb      	ldr	r3, [r7, #28]
 80097a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097a4:	e007      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097a6:	2300      	movs	r3, #0
 80097a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097aa:	e004      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80097ac:	2300      	movs	r3, #0
 80097ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097b0:	e001      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80097b2:	2300      	movs	r3, #0
 80097b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80097b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3740      	adds	r7, #64	@ 0x40
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}
 80097c0:	58024400 	.word	0x58024400
 80097c4:	017d7840 	.word	0x017d7840

080097c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80097cc:	f7fe f816 	bl	80077fc <HAL_RCC_GetHCLKFreq>
 80097d0:	4602      	mov	r2, r0
 80097d2:	4b06      	ldr	r3, [pc, #24]	@ (80097ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80097d4:	6a1b      	ldr	r3, [r3, #32]
 80097d6:	091b      	lsrs	r3, r3, #4
 80097d8:	f003 0307 	and.w	r3, r3, #7
 80097dc:	4904      	ldr	r1, [pc, #16]	@ (80097f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80097de:	5ccb      	ldrb	r3, [r1, r3]
 80097e0:	f003 031f 	and.w	r3, r3, #31
 80097e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	58024400 	.word	0x58024400
 80097f0:	08012800 	.word	0x08012800

080097f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b089      	sub	sp, #36	@ 0x24
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097fc:	4ba1      	ldr	r3, [pc, #644]	@ (8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009800:	f003 0303 	and.w	r3, r3, #3
 8009804:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009806:	4b9f      	ldr	r3, [pc, #636]	@ (8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800980a:	0b1b      	lsrs	r3, r3, #12
 800980c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009810:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009812:	4b9c      	ldr	r3, [pc, #624]	@ (8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009816:	091b      	lsrs	r3, r3, #4
 8009818:	f003 0301 	and.w	r3, r3, #1
 800981c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800981e:	4b99      	ldr	r3, [pc, #612]	@ (8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009822:	08db      	lsrs	r3, r3, #3
 8009824:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009828:	693a      	ldr	r2, [r7, #16]
 800982a:	fb02 f303 	mul.w	r3, r2, r3
 800982e:	ee07 3a90 	vmov	s15, r3
 8009832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009836:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	2b00      	cmp	r3, #0
 800983e:	f000 8111 	beq.w	8009a64 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	2b02      	cmp	r3, #2
 8009846:	f000 8083 	beq.w	8009950 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800984a:	69bb      	ldr	r3, [r7, #24]
 800984c:	2b02      	cmp	r3, #2
 800984e:	f200 80a1 	bhi.w	8009994 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009852:	69bb      	ldr	r3, [r7, #24]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d003      	beq.n	8009860 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009858:	69bb      	ldr	r3, [r7, #24]
 800985a:	2b01      	cmp	r3, #1
 800985c:	d056      	beq.n	800990c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800985e:	e099      	b.n	8009994 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009860:	4b88      	ldr	r3, [pc, #544]	@ (8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f003 0320 	and.w	r3, r3, #32
 8009868:	2b00      	cmp	r3, #0
 800986a:	d02d      	beq.n	80098c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800986c:	4b85      	ldr	r3, [pc, #532]	@ (8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	08db      	lsrs	r3, r3, #3
 8009872:	f003 0303 	and.w	r3, r3, #3
 8009876:	4a84      	ldr	r2, [pc, #528]	@ (8009a88 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009878:	fa22 f303 	lsr.w	r3, r2, r3
 800987c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	ee07 3a90 	vmov	s15, r3
 8009884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	ee07 3a90 	vmov	s15, r3
 800988e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009896:	4b7b      	ldr	r3, [pc, #492]	@ (8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800989a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800989e:	ee07 3a90 	vmov	s15, r3
 80098a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80098aa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009a8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80098c6:	e087      	b.n	80099d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	ee07 3a90 	vmov	s15, r3
 80098ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098d2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009a90 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80098d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098da:	4b6a      	ldr	r3, [pc, #424]	@ (8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098e2:	ee07 3a90 	vmov	s15, r3
 80098e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80098ee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009a8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009906:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800990a:	e065      	b.n	80099d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	ee07 3a90 	vmov	s15, r3
 8009912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009916:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009a94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800991a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800991e:	4b59      	ldr	r3, [pc, #356]	@ (8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009926:	ee07 3a90 	vmov	s15, r3
 800992a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800992e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009932:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009a8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800993a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800993e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800994a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800994e:	e043      	b.n	80099d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	ee07 3a90 	vmov	s15, r3
 8009956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800995a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009a98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800995e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009962:	4b48      	ldr	r3, [pc, #288]	@ (8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800996a:	ee07 3a90 	vmov	s15, r3
 800996e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009972:	ed97 6a03 	vldr	s12, [r7, #12]
 8009976:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009a8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800997a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800997e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009982:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800998a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800998e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009992:	e021      	b.n	80099d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	ee07 3a90 	vmov	s15, r3
 800999a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800999e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009a94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80099a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099a6:	4b37      	ldr	r3, [pc, #220]	@ (8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ae:	ee07 3a90 	vmov	s15, r3
 80099b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80099ba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009a8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80099be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80099d8:	4b2a      	ldr	r3, [pc, #168]	@ (8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099dc:	0a5b      	lsrs	r3, r3, #9
 80099de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099e2:	ee07 3a90 	vmov	s15, r3
 80099e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80099ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80099f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099fe:	ee17 2a90 	vmov	r2, s15
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009a06:	4b1f      	ldr	r3, [pc, #124]	@ (8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a0a:	0c1b      	lsrs	r3, r3, #16
 8009a0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a10:	ee07 3a90 	vmov	s15, r3
 8009a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a20:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a2c:	ee17 2a90 	vmov	r2, s15
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009a34:	4b13      	ldr	r3, [pc, #76]	@ (8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a38:	0e1b      	lsrs	r3, r3, #24
 8009a3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a3e:	ee07 3a90 	vmov	s15, r3
 8009a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a5a:	ee17 2a90 	vmov	r2, s15
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009a62:	e008      	b.n	8009a76 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	609a      	str	r2, [r3, #8]
}
 8009a76:	bf00      	nop
 8009a78:	3724      	adds	r7, #36	@ 0x24
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop
 8009a84:	58024400 	.word	0x58024400
 8009a88:	03d09000 	.word	0x03d09000
 8009a8c:	46000000 	.word	0x46000000
 8009a90:	4c742400 	.word	0x4c742400
 8009a94:	4a742400 	.word	0x4a742400
 8009a98:	4bbebc20 	.word	0x4bbebc20

08009a9c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b089      	sub	sp, #36	@ 0x24
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009aa4:	4ba1      	ldr	r3, [pc, #644]	@ (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aa8:	f003 0303 	and.w	r3, r3, #3
 8009aac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009aae:	4b9f      	ldr	r3, [pc, #636]	@ (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ab2:	0d1b      	lsrs	r3, r3, #20
 8009ab4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009ab8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009aba:	4b9c      	ldr	r3, [pc, #624]	@ (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009abe:	0a1b      	lsrs	r3, r3, #8
 8009ac0:	f003 0301 	and.w	r3, r3, #1
 8009ac4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009ac6:	4b99      	ldr	r3, [pc, #612]	@ (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009aca:	08db      	lsrs	r3, r3, #3
 8009acc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ad0:	693a      	ldr	r2, [r7, #16]
 8009ad2:	fb02 f303 	mul.w	r3, r2, r3
 8009ad6:	ee07 3a90 	vmov	s15, r3
 8009ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ade:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	f000 8111 	beq.w	8009d0c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	2b02      	cmp	r3, #2
 8009aee:	f000 8083 	beq.w	8009bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009af2:	69bb      	ldr	r3, [r7, #24]
 8009af4:	2b02      	cmp	r3, #2
 8009af6:	f200 80a1 	bhi.w	8009c3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009afa:	69bb      	ldr	r3, [r7, #24]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d003      	beq.n	8009b08 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009b00:	69bb      	ldr	r3, [r7, #24]
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d056      	beq.n	8009bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009b06:	e099      	b.n	8009c3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b08:	4b88      	ldr	r3, [pc, #544]	@ (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f003 0320 	and.w	r3, r3, #32
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d02d      	beq.n	8009b70 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b14:	4b85      	ldr	r3, [pc, #532]	@ (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	08db      	lsrs	r3, r3, #3
 8009b1a:	f003 0303 	and.w	r3, r3, #3
 8009b1e:	4a84      	ldr	r2, [pc, #528]	@ (8009d30 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009b20:	fa22 f303 	lsr.w	r3, r2, r3
 8009b24:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	ee07 3a90 	vmov	s15, r3
 8009b2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	ee07 3a90 	vmov	s15, r3
 8009b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b3e:	4b7b      	ldr	r3, [pc, #492]	@ (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b46:	ee07 3a90 	vmov	s15, r3
 8009b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b52:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009d34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009b6e:	e087      	b.n	8009c80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	ee07 3a90 	vmov	s15, r3
 8009b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b7a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009d38 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b82:	4b6a      	ldr	r3, [pc, #424]	@ (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b8a:	ee07 3a90 	vmov	s15, r3
 8009b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b92:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b96:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009d34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ba2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bb2:	e065      	b.n	8009c80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	ee07 3a90 	vmov	s15, r3
 8009bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bbe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009d3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bc6:	4b59      	ldr	r3, [pc, #356]	@ (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bce:	ee07 3a90 	vmov	s15, r3
 8009bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bda:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009d34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009be6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bf6:	e043      	b.n	8009c80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	ee07 3a90 	vmov	s15, r3
 8009bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c02:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009d40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c0a:	4b48      	ldr	r3, [pc, #288]	@ (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c12:	ee07 3a90 	vmov	s15, r3
 8009c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c1e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009d34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c3a:	e021      	b.n	8009c80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	ee07 3a90 	vmov	s15, r3
 8009c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c46:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009d3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c4e:	4b37      	ldr	r3, [pc, #220]	@ (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c56:	ee07 3a90 	vmov	s15, r3
 8009c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c62:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009d34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c7e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009c80:	4b2a      	ldr	r3, [pc, #168]	@ (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c84:	0a5b      	lsrs	r3, r3, #9
 8009c86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c8a:	ee07 3a90 	vmov	s15, r3
 8009c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ca2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ca6:	ee17 2a90 	vmov	r2, s15
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009cae:	4b1f      	ldr	r3, [pc, #124]	@ (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cb2:	0c1b      	lsrs	r3, r3, #16
 8009cb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cb8:	ee07 3a90 	vmov	s15, r3
 8009cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cc0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009cc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ccc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cd4:	ee17 2a90 	vmov	r2, s15
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009cdc:	4b13      	ldr	r3, [pc, #76]	@ (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ce0:	0e1b      	lsrs	r3, r3, #24
 8009ce2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ce6:	ee07 3a90 	vmov	s15, r3
 8009cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009cf2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cf6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d02:	ee17 2a90 	vmov	r2, s15
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009d0a:	e008      	b.n	8009d1e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	609a      	str	r2, [r3, #8]
}
 8009d1e:	bf00      	nop
 8009d20:	3724      	adds	r7, #36	@ 0x24
 8009d22:	46bd      	mov	sp, r7
 8009d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d28:	4770      	bx	lr
 8009d2a:	bf00      	nop
 8009d2c:	58024400 	.word	0x58024400
 8009d30:	03d09000 	.word	0x03d09000
 8009d34:	46000000 	.word	0x46000000
 8009d38:	4c742400 	.word	0x4c742400
 8009d3c:	4a742400 	.word	0x4a742400
 8009d40:	4bbebc20 	.word	0x4bbebc20

08009d44 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b089      	sub	sp, #36	@ 0x24
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d4c:	4ba0      	ldr	r3, [pc, #640]	@ (8009fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d50:	f003 0303 	and.w	r3, r3, #3
 8009d54:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009d56:	4b9e      	ldr	r3, [pc, #632]	@ (8009fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d5a:	091b      	lsrs	r3, r3, #4
 8009d5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009d60:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009d62:	4b9b      	ldr	r3, [pc, #620]	@ (8009fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d66:	f003 0301 	and.w	r3, r3, #1
 8009d6a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009d6c:	4b98      	ldr	r3, [pc, #608]	@ (8009fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d70:	08db      	lsrs	r3, r3, #3
 8009d72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d76:	693a      	ldr	r2, [r7, #16]
 8009d78:	fb02 f303 	mul.w	r3, r2, r3
 8009d7c:	ee07 3a90 	vmov	s15, r3
 8009d80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d84:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	f000 8111 	beq.w	8009fb2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009d90:	69bb      	ldr	r3, [r7, #24]
 8009d92:	2b02      	cmp	r3, #2
 8009d94:	f000 8083 	beq.w	8009e9e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009d98:	69bb      	ldr	r3, [r7, #24]
 8009d9a:	2b02      	cmp	r3, #2
 8009d9c:	f200 80a1 	bhi.w	8009ee2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009da0:	69bb      	ldr	r3, [r7, #24]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d003      	beq.n	8009dae <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009da6:	69bb      	ldr	r3, [r7, #24]
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d056      	beq.n	8009e5a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009dac:	e099      	b.n	8009ee2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009dae:	4b88      	ldr	r3, [pc, #544]	@ (8009fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f003 0320 	and.w	r3, r3, #32
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d02d      	beq.n	8009e16 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009dba:	4b85      	ldr	r3, [pc, #532]	@ (8009fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	08db      	lsrs	r3, r3, #3
 8009dc0:	f003 0303 	and.w	r3, r3, #3
 8009dc4:	4a83      	ldr	r2, [pc, #524]	@ (8009fd4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8009dca:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	ee07 3a90 	vmov	s15, r3
 8009dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	ee07 3a90 	vmov	s15, r3
 8009ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009de0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009de4:	4b7a      	ldr	r3, [pc, #488]	@ (8009fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009de8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dec:	ee07 3a90 	vmov	s15, r3
 8009df0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009df4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009df8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009dfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e10:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009e14:	e087      	b.n	8009f26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	ee07 3a90 	vmov	s15, r3
 8009e1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e20:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009fdc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009e24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e28:	4b69      	ldr	r3, [pc, #420]	@ (8009fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e30:	ee07 3a90 	vmov	s15, r3
 8009e34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e38:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e3c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e58:	e065      	b.n	8009f26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	ee07 3a90 	vmov	s15, r3
 8009e60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e64:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009e68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e6c:	4b58      	ldr	r3, [pc, #352]	@ (8009fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e74:	ee07 3a90 	vmov	s15, r3
 8009e78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e80:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e9c:	e043      	b.n	8009f26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	ee07 3a90 	vmov	s15, r3
 8009ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ea8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009fe4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009eac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eb0:	4b47      	ldr	r3, [pc, #284]	@ (8009fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eb8:	ee07 3a90 	vmov	s15, r3
 8009ebc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ec0:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ec4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ec8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ecc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ed0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ed4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009edc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ee0:	e021      	b.n	8009f26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	ee07 3a90 	vmov	s15, r3
 8009ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eec:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009fdc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009ef0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ef4:	4b36      	ldr	r3, [pc, #216]	@ (8009fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009efc:	ee07 3a90 	vmov	s15, r3
 8009f00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f04:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f08:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009f0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f24:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009f26:	4b2a      	ldr	r3, [pc, #168]	@ (8009fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f2a:	0a5b      	lsrs	r3, r3, #9
 8009f2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f30:	ee07 3a90 	vmov	s15, r3
 8009f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f40:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f4c:	ee17 2a90 	vmov	r2, s15
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009f54:	4b1e      	ldr	r3, [pc, #120]	@ (8009fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f58:	0c1b      	lsrs	r3, r3, #16
 8009f5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f5e:	ee07 3a90 	vmov	s15, r3
 8009f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f7a:	ee17 2a90 	vmov	r2, s15
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009f82:	4b13      	ldr	r3, [pc, #76]	@ (8009fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f86:	0e1b      	lsrs	r3, r3, #24
 8009f88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f8c:	ee07 3a90 	vmov	s15, r3
 8009f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fa8:	ee17 2a90 	vmov	r2, s15
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009fb0:	e008      	b.n	8009fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	609a      	str	r2, [r3, #8]
}
 8009fc4:	bf00      	nop
 8009fc6:	3724      	adds	r7, #36	@ 0x24
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr
 8009fd0:	58024400 	.word	0x58024400
 8009fd4:	03d09000 	.word	0x03d09000
 8009fd8:	46000000 	.word	0x46000000
 8009fdc:	4c742400 	.word	0x4c742400
 8009fe0:	4a742400 	.word	0x4a742400
 8009fe4:	4bbebc20 	.word	0x4bbebc20

08009fe8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009ff6:	4b53      	ldr	r3, [pc, #332]	@ (800a144 <RCCEx_PLL2_Config+0x15c>)
 8009ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ffa:	f003 0303 	and.w	r3, r3, #3
 8009ffe:	2b03      	cmp	r3, #3
 800a000:	d101      	bne.n	800a006 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a002:	2301      	movs	r3, #1
 800a004:	e099      	b.n	800a13a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a006:	4b4f      	ldr	r3, [pc, #316]	@ (800a144 <RCCEx_PLL2_Config+0x15c>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a4e      	ldr	r2, [pc, #312]	@ (800a144 <RCCEx_PLL2_Config+0x15c>)
 800a00c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a010:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a012:	f7f7 fef9 	bl	8001e08 <HAL_GetTick>
 800a016:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a018:	e008      	b.n	800a02c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a01a:	f7f7 fef5 	bl	8001e08 <HAL_GetTick>
 800a01e:	4602      	mov	r2, r0
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	1ad3      	subs	r3, r2, r3
 800a024:	2b02      	cmp	r3, #2
 800a026:	d901      	bls.n	800a02c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a028:	2303      	movs	r3, #3
 800a02a:	e086      	b.n	800a13a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a02c:	4b45      	ldr	r3, [pc, #276]	@ (800a144 <RCCEx_PLL2_Config+0x15c>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a034:	2b00      	cmp	r3, #0
 800a036:	d1f0      	bne.n	800a01a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a038:	4b42      	ldr	r3, [pc, #264]	@ (800a144 <RCCEx_PLL2_Config+0x15c>)
 800a03a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a03c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	031b      	lsls	r3, r3, #12
 800a046:	493f      	ldr	r1, [pc, #252]	@ (800a144 <RCCEx_PLL2_Config+0x15c>)
 800a048:	4313      	orrs	r3, r2
 800a04a:	628b      	str	r3, [r1, #40]	@ 0x28
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	3b01      	subs	r3, #1
 800a052:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	689b      	ldr	r3, [r3, #8]
 800a05a:	3b01      	subs	r3, #1
 800a05c:	025b      	lsls	r3, r3, #9
 800a05e:	b29b      	uxth	r3, r3
 800a060:	431a      	orrs	r2, r3
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	68db      	ldr	r3, [r3, #12]
 800a066:	3b01      	subs	r3, #1
 800a068:	041b      	lsls	r3, r3, #16
 800a06a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a06e:	431a      	orrs	r2, r3
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	691b      	ldr	r3, [r3, #16]
 800a074:	3b01      	subs	r3, #1
 800a076:	061b      	lsls	r3, r3, #24
 800a078:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a07c:	4931      	ldr	r1, [pc, #196]	@ (800a144 <RCCEx_PLL2_Config+0x15c>)
 800a07e:	4313      	orrs	r3, r2
 800a080:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a082:	4b30      	ldr	r3, [pc, #192]	@ (800a144 <RCCEx_PLL2_Config+0x15c>)
 800a084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a086:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	695b      	ldr	r3, [r3, #20]
 800a08e:	492d      	ldr	r1, [pc, #180]	@ (800a144 <RCCEx_PLL2_Config+0x15c>)
 800a090:	4313      	orrs	r3, r2
 800a092:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a094:	4b2b      	ldr	r3, [pc, #172]	@ (800a144 <RCCEx_PLL2_Config+0x15c>)
 800a096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a098:	f023 0220 	bic.w	r2, r3, #32
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	699b      	ldr	r3, [r3, #24]
 800a0a0:	4928      	ldr	r1, [pc, #160]	@ (800a144 <RCCEx_PLL2_Config+0x15c>)
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a0a6:	4b27      	ldr	r3, [pc, #156]	@ (800a144 <RCCEx_PLL2_Config+0x15c>)
 800a0a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0aa:	4a26      	ldr	r2, [pc, #152]	@ (800a144 <RCCEx_PLL2_Config+0x15c>)
 800a0ac:	f023 0310 	bic.w	r3, r3, #16
 800a0b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a0b2:	4b24      	ldr	r3, [pc, #144]	@ (800a144 <RCCEx_PLL2_Config+0x15c>)
 800a0b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a0b6:	4b24      	ldr	r3, [pc, #144]	@ (800a148 <RCCEx_PLL2_Config+0x160>)
 800a0b8:	4013      	ands	r3, r2
 800a0ba:	687a      	ldr	r2, [r7, #4]
 800a0bc:	69d2      	ldr	r2, [r2, #28]
 800a0be:	00d2      	lsls	r2, r2, #3
 800a0c0:	4920      	ldr	r1, [pc, #128]	@ (800a144 <RCCEx_PLL2_Config+0x15c>)
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a0c6:	4b1f      	ldr	r3, [pc, #124]	@ (800a144 <RCCEx_PLL2_Config+0x15c>)
 800a0c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0ca:	4a1e      	ldr	r2, [pc, #120]	@ (800a144 <RCCEx_PLL2_Config+0x15c>)
 800a0cc:	f043 0310 	orr.w	r3, r3, #16
 800a0d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d106      	bne.n	800a0e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a0d8:	4b1a      	ldr	r3, [pc, #104]	@ (800a144 <RCCEx_PLL2_Config+0x15c>)
 800a0da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0dc:	4a19      	ldr	r2, [pc, #100]	@ (800a144 <RCCEx_PLL2_Config+0x15c>)
 800a0de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a0e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a0e4:	e00f      	b.n	800a106 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d106      	bne.n	800a0fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a0ec:	4b15      	ldr	r3, [pc, #84]	@ (800a144 <RCCEx_PLL2_Config+0x15c>)
 800a0ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0f0:	4a14      	ldr	r2, [pc, #80]	@ (800a144 <RCCEx_PLL2_Config+0x15c>)
 800a0f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a0f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a0f8:	e005      	b.n	800a106 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a0fa:	4b12      	ldr	r3, [pc, #72]	@ (800a144 <RCCEx_PLL2_Config+0x15c>)
 800a0fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0fe:	4a11      	ldr	r2, [pc, #68]	@ (800a144 <RCCEx_PLL2_Config+0x15c>)
 800a100:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a104:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a106:	4b0f      	ldr	r3, [pc, #60]	@ (800a144 <RCCEx_PLL2_Config+0x15c>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4a0e      	ldr	r2, [pc, #56]	@ (800a144 <RCCEx_PLL2_Config+0x15c>)
 800a10c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a110:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a112:	f7f7 fe79 	bl	8001e08 <HAL_GetTick>
 800a116:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a118:	e008      	b.n	800a12c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a11a:	f7f7 fe75 	bl	8001e08 <HAL_GetTick>
 800a11e:	4602      	mov	r2, r0
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	1ad3      	subs	r3, r2, r3
 800a124:	2b02      	cmp	r3, #2
 800a126:	d901      	bls.n	800a12c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a128:	2303      	movs	r3, #3
 800a12a:	e006      	b.n	800a13a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a12c:	4b05      	ldr	r3, [pc, #20]	@ (800a144 <RCCEx_PLL2_Config+0x15c>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a134:	2b00      	cmp	r3, #0
 800a136:	d0f0      	beq.n	800a11a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a138:	7bfb      	ldrb	r3, [r7, #15]
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3710      	adds	r7, #16
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop
 800a144:	58024400 	.word	0x58024400
 800a148:	ffff0007 	.word	0xffff0007

0800a14c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b084      	sub	sp, #16
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a156:	2300      	movs	r3, #0
 800a158:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a15a:	4b53      	ldr	r3, [pc, #332]	@ (800a2a8 <RCCEx_PLL3_Config+0x15c>)
 800a15c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a15e:	f003 0303 	and.w	r3, r3, #3
 800a162:	2b03      	cmp	r3, #3
 800a164:	d101      	bne.n	800a16a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a166:	2301      	movs	r3, #1
 800a168:	e099      	b.n	800a29e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a16a:	4b4f      	ldr	r3, [pc, #316]	@ (800a2a8 <RCCEx_PLL3_Config+0x15c>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4a4e      	ldr	r2, [pc, #312]	@ (800a2a8 <RCCEx_PLL3_Config+0x15c>)
 800a170:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a174:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a176:	f7f7 fe47 	bl	8001e08 <HAL_GetTick>
 800a17a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a17c:	e008      	b.n	800a190 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a17e:	f7f7 fe43 	bl	8001e08 <HAL_GetTick>
 800a182:	4602      	mov	r2, r0
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	1ad3      	subs	r3, r2, r3
 800a188:	2b02      	cmp	r3, #2
 800a18a:	d901      	bls.n	800a190 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a18c:	2303      	movs	r3, #3
 800a18e:	e086      	b.n	800a29e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a190:	4b45      	ldr	r3, [pc, #276]	@ (800a2a8 <RCCEx_PLL3_Config+0x15c>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d1f0      	bne.n	800a17e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a19c:	4b42      	ldr	r3, [pc, #264]	@ (800a2a8 <RCCEx_PLL3_Config+0x15c>)
 800a19e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1a0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	051b      	lsls	r3, r3, #20
 800a1aa:	493f      	ldr	r1, [pc, #252]	@ (800a2a8 <RCCEx_PLL3_Config+0x15c>)
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	628b      	str	r3, [r1, #40]	@ 0x28
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	3b01      	subs	r3, #1
 800a1b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	689b      	ldr	r3, [r3, #8]
 800a1be:	3b01      	subs	r3, #1
 800a1c0:	025b      	lsls	r3, r3, #9
 800a1c2:	b29b      	uxth	r3, r3
 800a1c4:	431a      	orrs	r2, r3
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	68db      	ldr	r3, [r3, #12]
 800a1ca:	3b01      	subs	r3, #1
 800a1cc:	041b      	lsls	r3, r3, #16
 800a1ce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a1d2:	431a      	orrs	r2, r3
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	691b      	ldr	r3, [r3, #16]
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	061b      	lsls	r3, r3, #24
 800a1dc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a1e0:	4931      	ldr	r1, [pc, #196]	@ (800a2a8 <RCCEx_PLL3_Config+0x15c>)
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a1e6:	4b30      	ldr	r3, [pc, #192]	@ (800a2a8 <RCCEx_PLL3_Config+0x15c>)
 800a1e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1ea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	695b      	ldr	r3, [r3, #20]
 800a1f2:	492d      	ldr	r1, [pc, #180]	@ (800a2a8 <RCCEx_PLL3_Config+0x15c>)
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a1f8:	4b2b      	ldr	r3, [pc, #172]	@ (800a2a8 <RCCEx_PLL3_Config+0x15c>)
 800a1fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1fc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	699b      	ldr	r3, [r3, #24]
 800a204:	4928      	ldr	r1, [pc, #160]	@ (800a2a8 <RCCEx_PLL3_Config+0x15c>)
 800a206:	4313      	orrs	r3, r2
 800a208:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a20a:	4b27      	ldr	r3, [pc, #156]	@ (800a2a8 <RCCEx_PLL3_Config+0x15c>)
 800a20c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a20e:	4a26      	ldr	r2, [pc, #152]	@ (800a2a8 <RCCEx_PLL3_Config+0x15c>)
 800a210:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a214:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a216:	4b24      	ldr	r3, [pc, #144]	@ (800a2a8 <RCCEx_PLL3_Config+0x15c>)
 800a218:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a21a:	4b24      	ldr	r3, [pc, #144]	@ (800a2ac <RCCEx_PLL3_Config+0x160>)
 800a21c:	4013      	ands	r3, r2
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	69d2      	ldr	r2, [r2, #28]
 800a222:	00d2      	lsls	r2, r2, #3
 800a224:	4920      	ldr	r1, [pc, #128]	@ (800a2a8 <RCCEx_PLL3_Config+0x15c>)
 800a226:	4313      	orrs	r3, r2
 800a228:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a22a:	4b1f      	ldr	r3, [pc, #124]	@ (800a2a8 <RCCEx_PLL3_Config+0x15c>)
 800a22c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a22e:	4a1e      	ldr	r2, [pc, #120]	@ (800a2a8 <RCCEx_PLL3_Config+0x15c>)
 800a230:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a234:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d106      	bne.n	800a24a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a23c:	4b1a      	ldr	r3, [pc, #104]	@ (800a2a8 <RCCEx_PLL3_Config+0x15c>)
 800a23e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a240:	4a19      	ldr	r2, [pc, #100]	@ (800a2a8 <RCCEx_PLL3_Config+0x15c>)
 800a242:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a246:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a248:	e00f      	b.n	800a26a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d106      	bne.n	800a25e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a250:	4b15      	ldr	r3, [pc, #84]	@ (800a2a8 <RCCEx_PLL3_Config+0x15c>)
 800a252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a254:	4a14      	ldr	r2, [pc, #80]	@ (800a2a8 <RCCEx_PLL3_Config+0x15c>)
 800a256:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a25a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a25c:	e005      	b.n	800a26a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a25e:	4b12      	ldr	r3, [pc, #72]	@ (800a2a8 <RCCEx_PLL3_Config+0x15c>)
 800a260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a262:	4a11      	ldr	r2, [pc, #68]	@ (800a2a8 <RCCEx_PLL3_Config+0x15c>)
 800a264:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a268:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a26a:	4b0f      	ldr	r3, [pc, #60]	@ (800a2a8 <RCCEx_PLL3_Config+0x15c>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a0e      	ldr	r2, [pc, #56]	@ (800a2a8 <RCCEx_PLL3_Config+0x15c>)
 800a270:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a274:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a276:	f7f7 fdc7 	bl	8001e08 <HAL_GetTick>
 800a27a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a27c:	e008      	b.n	800a290 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a27e:	f7f7 fdc3 	bl	8001e08 <HAL_GetTick>
 800a282:	4602      	mov	r2, r0
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	1ad3      	subs	r3, r2, r3
 800a288:	2b02      	cmp	r3, #2
 800a28a:	d901      	bls.n	800a290 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a28c:	2303      	movs	r3, #3
 800a28e:	e006      	b.n	800a29e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a290:	4b05      	ldr	r3, [pc, #20]	@ (800a2a8 <RCCEx_PLL3_Config+0x15c>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d0f0      	beq.n	800a27e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a29c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3710      	adds	r7, #16
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	58024400 	.word	0x58024400
 800a2ac:	ffff0007 	.word	0xffff0007

0800a2b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b082      	sub	sp, #8
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d101      	bne.n	800a2c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	e049      	b.n	800a356 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a2c8:	b2db      	uxtb	r3, r3
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d106      	bne.n	800a2dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f7f7 fbae 	bl	8001a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2202      	movs	r2, #2
 800a2e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681a      	ldr	r2, [r3, #0]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	3304      	adds	r3, #4
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	4610      	mov	r0, r2
 800a2f0:	f000 fbfc 	bl	800aaec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2201      	movs	r2, #1
 800a300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2201      	movs	r2, #1
 800a310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2201      	movs	r2, #1
 800a318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2201      	movs	r2, #1
 800a320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2201      	movs	r2, #1
 800a328:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2201      	movs	r2, #1
 800a330:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2201      	movs	r2, #1
 800a338:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2201      	movs	r2, #1
 800a340:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2201      	movs	r2, #1
 800a348:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2201      	movs	r2, #1
 800a350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a354:	2300      	movs	r3, #0
}
 800a356:	4618      	mov	r0, r3
 800a358:	3708      	adds	r7, #8
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}

0800a35e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a35e:	b580      	push	{r7, lr}
 800a360:	b082      	sub	sp, #8
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d101      	bne.n	800a370 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a36c:	2301      	movs	r3, #1
 800a36e:	e049      	b.n	800a404 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a376:	b2db      	uxtb	r3, r3
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d106      	bne.n	800a38a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f000 f841 	bl	800a40c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2202      	movs	r2, #2
 800a38e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	3304      	adds	r3, #4
 800a39a:	4619      	mov	r1, r3
 800a39c:	4610      	mov	r0, r2
 800a39e:	f000 fba5 	bl	800aaec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2201      	movs	r2, #1
 800a3be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2201      	movs	r2, #1
 800a3ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2201      	movs	r2, #1
 800a3de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2201      	movs	r2, #1
 800a3e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a402:	2300      	movs	r3, #0
}
 800a404:	4618      	mov	r0, r3
 800a406:	3708      	adds	r7, #8
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b083      	sub	sp, #12
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a414:	bf00      	nop
 800a416:	370c      	adds	r7, #12
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr

0800a420 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a42a:	2300      	movs	r3, #0
 800a42c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d109      	bne.n	800a448 <HAL_TIM_PWM_Start_IT+0x28>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a43a:	b2db      	uxtb	r3, r3
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	bf14      	ite	ne
 800a440:	2301      	movne	r3, #1
 800a442:	2300      	moveq	r3, #0
 800a444:	b2db      	uxtb	r3, r3
 800a446:	e03c      	b.n	800a4c2 <HAL_TIM_PWM_Start_IT+0xa2>
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	2b04      	cmp	r3, #4
 800a44c:	d109      	bne.n	800a462 <HAL_TIM_PWM_Start_IT+0x42>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a454:	b2db      	uxtb	r3, r3
 800a456:	2b01      	cmp	r3, #1
 800a458:	bf14      	ite	ne
 800a45a:	2301      	movne	r3, #1
 800a45c:	2300      	moveq	r3, #0
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	e02f      	b.n	800a4c2 <HAL_TIM_PWM_Start_IT+0xa2>
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	2b08      	cmp	r3, #8
 800a466:	d109      	bne.n	800a47c <HAL_TIM_PWM_Start_IT+0x5c>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	2b01      	cmp	r3, #1
 800a472:	bf14      	ite	ne
 800a474:	2301      	movne	r3, #1
 800a476:	2300      	moveq	r3, #0
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	e022      	b.n	800a4c2 <HAL_TIM_PWM_Start_IT+0xa2>
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	2b0c      	cmp	r3, #12
 800a480:	d109      	bne.n	800a496 <HAL_TIM_PWM_Start_IT+0x76>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	bf14      	ite	ne
 800a48e:	2301      	movne	r3, #1
 800a490:	2300      	moveq	r3, #0
 800a492:	b2db      	uxtb	r3, r3
 800a494:	e015      	b.n	800a4c2 <HAL_TIM_PWM_Start_IT+0xa2>
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	2b10      	cmp	r3, #16
 800a49a:	d109      	bne.n	800a4b0 <HAL_TIM_PWM_Start_IT+0x90>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a4a2:	b2db      	uxtb	r3, r3
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	bf14      	ite	ne
 800a4a8:	2301      	movne	r3, #1
 800a4aa:	2300      	moveq	r3, #0
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	e008      	b.n	800a4c2 <HAL_TIM_PWM_Start_IT+0xa2>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a4b6:	b2db      	uxtb	r3, r3
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	bf14      	ite	ne
 800a4bc:	2301      	movne	r3, #1
 800a4be:	2300      	moveq	r3, #0
 800a4c0:	b2db      	uxtb	r3, r3
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d001      	beq.n	800a4ca <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e0ec      	b.n	800a6a4 <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d104      	bne.n	800a4da <HAL_TIM_PWM_Start_IT+0xba>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2202      	movs	r2, #2
 800a4d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a4d8:	e023      	b.n	800a522 <HAL_TIM_PWM_Start_IT+0x102>
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	2b04      	cmp	r3, #4
 800a4de:	d104      	bne.n	800a4ea <HAL_TIM_PWM_Start_IT+0xca>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2202      	movs	r2, #2
 800a4e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a4e8:	e01b      	b.n	800a522 <HAL_TIM_PWM_Start_IT+0x102>
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	2b08      	cmp	r3, #8
 800a4ee:	d104      	bne.n	800a4fa <HAL_TIM_PWM_Start_IT+0xda>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2202      	movs	r2, #2
 800a4f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a4f8:	e013      	b.n	800a522 <HAL_TIM_PWM_Start_IT+0x102>
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	2b0c      	cmp	r3, #12
 800a4fe:	d104      	bne.n	800a50a <HAL_TIM_PWM_Start_IT+0xea>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2202      	movs	r2, #2
 800a504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a508:	e00b      	b.n	800a522 <HAL_TIM_PWM_Start_IT+0x102>
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	2b10      	cmp	r3, #16
 800a50e:	d104      	bne.n	800a51a <HAL_TIM_PWM_Start_IT+0xfa>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2202      	movs	r2, #2
 800a514:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a518:	e003      	b.n	800a522 <HAL_TIM_PWM_Start_IT+0x102>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2202      	movs	r2, #2
 800a51e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	2b0c      	cmp	r3, #12
 800a526:	d841      	bhi.n	800a5ac <HAL_TIM_PWM_Start_IT+0x18c>
 800a528:	a201      	add	r2, pc, #4	@ (adr r2, 800a530 <HAL_TIM_PWM_Start_IT+0x110>)
 800a52a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a52e:	bf00      	nop
 800a530:	0800a565 	.word	0x0800a565
 800a534:	0800a5ad 	.word	0x0800a5ad
 800a538:	0800a5ad 	.word	0x0800a5ad
 800a53c:	0800a5ad 	.word	0x0800a5ad
 800a540:	0800a577 	.word	0x0800a577
 800a544:	0800a5ad 	.word	0x0800a5ad
 800a548:	0800a5ad 	.word	0x0800a5ad
 800a54c:	0800a5ad 	.word	0x0800a5ad
 800a550:	0800a589 	.word	0x0800a589
 800a554:	0800a5ad 	.word	0x0800a5ad
 800a558:	0800a5ad 	.word	0x0800a5ad
 800a55c:	0800a5ad 	.word	0x0800a5ad
 800a560:	0800a59b 	.word	0x0800a59b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	68da      	ldr	r2, [r3, #12]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f042 0202 	orr.w	r2, r2, #2
 800a572:	60da      	str	r2, [r3, #12]
      break;
 800a574:	e01d      	b.n	800a5b2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	68da      	ldr	r2, [r3, #12]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f042 0204 	orr.w	r2, r2, #4
 800a584:	60da      	str	r2, [r3, #12]
      break;
 800a586:	e014      	b.n	800a5b2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	68da      	ldr	r2, [r3, #12]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f042 0208 	orr.w	r2, r2, #8
 800a596:	60da      	str	r2, [r3, #12]
      break;
 800a598:	e00b      	b.n	800a5b2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	68da      	ldr	r2, [r3, #12]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f042 0210 	orr.w	r2, r2, #16
 800a5a8:	60da      	str	r2, [r3, #12]
      break;
 800a5aa:	e002      	b.n	800a5b2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	73fb      	strb	r3, [r7, #15]
      break;
 800a5b0:	bf00      	nop
  }

  if (status == HAL_OK)
 800a5b2:	7bfb      	ldrb	r3, [r7, #15]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d174      	bne.n	800a6a2 <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2201      	movs	r2, #1
 800a5be:	6839      	ldr	r1, [r7, #0]
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f000 fead 	bl	800b320 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4a38      	ldr	r2, [pc, #224]	@ (800a6ac <HAL_TIM_PWM_Start_IT+0x28c>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d013      	beq.n	800a5f8 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a36      	ldr	r2, [pc, #216]	@ (800a6b0 <HAL_TIM_PWM_Start_IT+0x290>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d00e      	beq.n	800a5f8 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4a35      	ldr	r2, [pc, #212]	@ (800a6b4 <HAL_TIM_PWM_Start_IT+0x294>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d009      	beq.n	800a5f8 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a33      	ldr	r2, [pc, #204]	@ (800a6b8 <HAL_TIM_PWM_Start_IT+0x298>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d004      	beq.n	800a5f8 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a32      	ldr	r2, [pc, #200]	@ (800a6bc <HAL_TIM_PWM_Start_IT+0x29c>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d101      	bne.n	800a5fc <HAL_TIM_PWM_Start_IT+0x1dc>
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	e000      	b.n	800a5fe <HAL_TIM_PWM_Start_IT+0x1de>
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d007      	beq.n	800a612 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a610:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4a25      	ldr	r2, [pc, #148]	@ (800a6ac <HAL_TIM_PWM_Start_IT+0x28c>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d022      	beq.n	800a662 <HAL_TIM_PWM_Start_IT+0x242>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a624:	d01d      	beq.n	800a662 <HAL_TIM_PWM_Start_IT+0x242>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4a25      	ldr	r2, [pc, #148]	@ (800a6c0 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d018      	beq.n	800a662 <HAL_TIM_PWM_Start_IT+0x242>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a23      	ldr	r2, [pc, #140]	@ (800a6c4 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d013      	beq.n	800a662 <HAL_TIM_PWM_Start_IT+0x242>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4a22      	ldr	r2, [pc, #136]	@ (800a6c8 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d00e      	beq.n	800a662 <HAL_TIM_PWM_Start_IT+0x242>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a19      	ldr	r2, [pc, #100]	@ (800a6b0 <HAL_TIM_PWM_Start_IT+0x290>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d009      	beq.n	800a662 <HAL_TIM_PWM_Start_IT+0x242>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4a1e      	ldr	r2, [pc, #120]	@ (800a6cc <HAL_TIM_PWM_Start_IT+0x2ac>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d004      	beq.n	800a662 <HAL_TIM_PWM_Start_IT+0x242>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a15      	ldr	r2, [pc, #84]	@ (800a6b4 <HAL_TIM_PWM_Start_IT+0x294>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d115      	bne.n	800a68e <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	689a      	ldr	r2, [r3, #8]
 800a668:	4b19      	ldr	r3, [pc, #100]	@ (800a6d0 <HAL_TIM_PWM_Start_IT+0x2b0>)
 800a66a:	4013      	ands	r3, r2
 800a66c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	2b06      	cmp	r3, #6
 800a672:	d015      	beq.n	800a6a0 <HAL_TIM_PWM_Start_IT+0x280>
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a67a:	d011      	beq.n	800a6a0 <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	681a      	ldr	r2, [r3, #0]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f042 0201 	orr.w	r2, r2, #1
 800a68a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a68c:	e008      	b.n	800a6a0 <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f042 0201 	orr.w	r2, r2, #1
 800a69c:	601a      	str	r2, [r3, #0]
 800a69e:	e000      	b.n	800a6a2 <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6a0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800a6a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3710      	adds	r7, #16
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}
 800a6ac:	40010000 	.word	0x40010000
 800a6b0:	40010400 	.word	0x40010400
 800a6b4:	40014000 	.word	0x40014000
 800a6b8:	40014400 	.word	0x40014400
 800a6bc:	40014800 	.word	0x40014800
 800a6c0:	40000400 	.word	0x40000400
 800a6c4:	40000800 	.word	0x40000800
 800a6c8:	40000c00 	.word	0x40000c00
 800a6cc:	40001800 	.word	0x40001800
 800a6d0:	00010007 	.word	0x00010007

0800a6d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b086      	sub	sp, #24
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	60f8      	str	r0, [r7, #12]
 800a6dc:	60b9      	str	r1, [r7, #8]
 800a6de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d101      	bne.n	800a6f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a6ee:	2302      	movs	r3, #2
 800a6f0:	e0ff      	b.n	800a8f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2b14      	cmp	r3, #20
 800a6fe:	f200 80f0 	bhi.w	800a8e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a702:	a201      	add	r2, pc, #4	@ (adr r2, 800a708 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a708:	0800a75d 	.word	0x0800a75d
 800a70c:	0800a8e3 	.word	0x0800a8e3
 800a710:	0800a8e3 	.word	0x0800a8e3
 800a714:	0800a8e3 	.word	0x0800a8e3
 800a718:	0800a79d 	.word	0x0800a79d
 800a71c:	0800a8e3 	.word	0x0800a8e3
 800a720:	0800a8e3 	.word	0x0800a8e3
 800a724:	0800a8e3 	.word	0x0800a8e3
 800a728:	0800a7df 	.word	0x0800a7df
 800a72c:	0800a8e3 	.word	0x0800a8e3
 800a730:	0800a8e3 	.word	0x0800a8e3
 800a734:	0800a8e3 	.word	0x0800a8e3
 800a738:	0800a81f 	.word	0x0800a81f
 800a73c:	0800a8e3 	.word	0x0800a8e3
 800a740:	0800a8e3 	.word	0x0800a8e3
 800a744:	0800a8e3 	.word	0x0800a8e3
 800a748:	0800a861 	.word	0x0800a861
 800a74c:	0800a8e3 	.word	0x0800a8e3
 800a750:	0800a8e3 	.word	0x0800a8e3
 800a754:	0800a8e3 	.word	0x0800a8e3
 800a758:	0800a8a1 	.word	0x0800a8a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	68b9      	ldr	r1, [r7, #8]
 800a762:	4618      	mov	r0, r3
 800a764:	f000 fa68 	bl	800ac38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	699a      	ldr	r2, [r3, #24]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f042 0208 	orr.w	r2, r2, #8
 800a776:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	699a      	ldr	r2, [r3, #24]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f022 0204 	bic.w	r2, r2, #4
 800a786:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	6999      	ldr	r1, [r3, #24]
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	691a      	ldr	r2, [r3, #16]
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	430a      	orrs	r2, r1
 800a798:	619a      	str	r2, [r3, #24]
      break;
 800a79a:	e0a5      	b.n	800a8e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	68b9      	ldr	r1, [r7, #8]
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f000 fad8 	bl	800ad58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	699a      	ldr	r2, [r3, #24]
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a7b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	699a      	ldr	r2, [r3, #24]
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a7c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	6999      	ldr	r1, [r3, #24]
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	691b      	ldr	r3, [r3, #16]
 800a7d2:	021a      	lsls	r2, r3, #8
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	430a      	orrs	r2, r1
 800a7da:	619a      	str	r2, [r3, #24]
      break;
 800a7dc:	e084      	b.n	800a8e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	68b9      	ldr	r1, [r7, #8]
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f000 fb41 	bl	800ae6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	69da      	ldr	r2, [r3, #28]
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f042 0208 	orr.w	r2, r2, #8
 800a7f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	69da      	ldr	r2, [r3, #28]
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f022 0204 	bic.w	r2, r2, #4
 800a808:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	69d9      	ldr	r1, [r3, #28]
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	691a      	ldr	r2, [r3, #16]
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	430a      	orrs	r2, r1
 800a81a:	61da      	str	r2, [r3, #28]
      break;
 800a81c:	e064      	b.n	800a8e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	68b9      	ldr	r1, [r7, #8]
 800a824:	4618      	mov	r0, r3
 800a826:	f000 fba9 	bl	800af7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	69da      	ldr	r2, [r3, #28]
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a838:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	69da      	ldr	r2, [r3, #28]
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a848:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	69d9      	ldr	r1, [r3, #28]
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	691b      	ldr	r3, [r3, #16]
 800a854:	021a      	lsls	r2, r3, #8
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	430a      	orrs	r2, r1
 800a85c:	61da      	str	r2, [r3, #28]
      break;
 800a85e:	e043      	b.n	800a8e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	68b9      	ldr	r1, [r7, #8]
 800a866:	4618      	mov	r0, r3
 800a868:	f000 fbf2 	bl	800b050 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f042 0208 	orr.w	r2, r2, #8
 800a87a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f022 0204 	bic.w	r2, r2, #4
 800a88a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	691a      	ldr	r2, [r3, #16]
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	430a      	orrs	r2, r1
 800a89c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a89e:	e023      	b.n	800a8e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	68b9      	ldr	r1, [r7, #8]
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f000 fc36 	bl	800b118 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a8ba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a8ca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	691b      	ldr	r3, [r3, #16]
 800a8d6:	021a      	lsls	r2, r3, #8
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	430a      	orrs	r2, r1
 800a8de:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a8e0:	e002      	b.n	800a8e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	75fb      	strb	r3, [r7, #23]
      break;
 800a8e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a8f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3718      	adds	r7, #24
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop

0800a8fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a906:	2300      	movs	r3, #0
 800a908:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a910:	2b01      	cmp	r3, #1
 800a912:	d101      	bne.n	800a918 <HAL_TIM_ConfigClockSource+0x1c>
 800a914:	2302      	movs	r3, #2
 800a916:	e0dc      	b.n	800aad2 <HAL_TIM_ConfigClockSource+0x1d6>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2201      	movs	r2, #1
 800a91c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2202      	movs	r2, #2
 800a924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	689b      	ldr	r3, [r3, #8]
 800a92e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a930:	68ba      	ldr	r2, [r7, #8]
 800a932:	4b6a      	ldr	r3, [pc, #424]	@ (800aadc <HAL_TIM_ConfigClockSource+0x1e0>)
 800a934:	4013      	ands	r3, r2
 800a936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a93e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	68ba      	ldr	r2, [r7, #8]
 800a946:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4a64      	ldr	r2, [pc, #400]	@ (800aae0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	f000 80a9 	beq.w	800aaa6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a954:	4a62      	ldr	r2, [pc, #392]	@ (800aae0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a956:	4293      	cmp	r3, r2
 800a958:	f200 80ae 	bhi.w	800aab8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a95c:	4a61      	ldr	r2, [pc, #388]	@ (800aae4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	f000 80a1 	beq.w	800aaa6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a964:	4a5f      	ldr	r2, [pc, #380]	@ (800aae4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a966:	4293      	cmp	r3, r2
 800a968:	f200 80a6 	bhi.w	800aab8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a96c:	4a5e      	ldr	r2, [pc, #376]	@ (800aae8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	f000 8099 	beq.w	800aaa6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a974:	4a5c      	ldr	r2, [pc, #368]	@ (800aae8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a976:	4293      	cmp	r3, r2
 800a978:	f200 809e 	bhi.w	800aab8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a97c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a980:	f000 8091 	beq.w	800aaa6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a984:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a988:	f200 8096 	bhi.w	800aab8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a98c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a990:	f000 8089 	beq.w	800aaa6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a994:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a998:	f200 808e 	bhi.w	800aab8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a99c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9a0:	d03e      	beq.n	800aa20 <HAL_TIM_ConfigClockSource+0x124>
 800a9a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9a6:	f200 8087 	bhi.w	800aab8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9ae:	f000 8086 	beq.w	800aabe <HAL_TIM_ConfigClockSource+0x1c2>
 800a9b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9b6:	d87f      	bhi.n	800aab8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9b8:	2b70      	cmp	r3, #112	@ 0x70
 800a9ba:	d01a      	beq.n	800a9f2 <HAL_TIM_ConfigClockSource+0xf6>
 800a9bc:	2b70      	cmp	r3, #112	@ 0x70
 800a9be:	d87b      	bhi.n	800aab8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9c0:	2b60      	cmp	r3, #96	@ 0x60
 800a9c2:	d050      	beq.n	800aa66 <HAL_TIM_ConfigClockSource+0x16a>
 800a9c4:	2b60      	cmp	r3, #96	@ 0x60
 800a9c6:	d877      	bhi.n	800aab8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9c8:	2b50      	cmp	r3, #80	@ 0x50
 800a9ca:	d03c      	beq.n	800aa46 <HAL_TIM_ConfigClockSource+0x14a>
 800a9cc:	2b50      	cmp	r3, #80	@ 0x50
 800a9ce:	d873      	bhi.n	800aab8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9d0:	2b40      	cmp	r3, #64	@ 0x40
 800a9d2:	d058      	beq.n	800aa86 <HAL_TIM_ConfigClockSource+0x18a>
 800a9d4:	2b40      	cmp	r3, #64	@ 0x40
 800a9d6:	d86f      	bhi.n	800aab8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9d8:	2b30      	cmp	r3, #48	@ 0x30
 800a9da:	d064      	beq.n	800aaa6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a9dc:	2b30      	cmp	r3, #48	@ 0x30
 800a9de:	d86b      	bhi.n	800aab8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9e0:	2b20      	cmp	r3, #32
 800a9e2:	d060      	beq.n	800aaa6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a9e4:	2b20      	cmp	r3, #32
 800a9e6:	d867      	bhi.n	800aab8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d05c      	beq.n	800aaa6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a9ec:	2b10      	cmp	r3, #16
 800a9ee:	d05a      	beq.n	800aaa6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a9f0:	e062      	b.n	800aab8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aa02:	f000 fc6d 	bl	800b2e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	689b      	ldr	r3, [r3, #8]
 800aa0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800aa14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	68ba      	ldr	r2, [r7, #8]
 800aa1c:	609a      	str	r2, [r3, #8]
      break;
 800aa1e:	e04f      	b.n	800aac0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aa30:	f000 fc56 	bl	800b2e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	689a      	ldr	r2, [r3, #8]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aa42:	609a      	str	r2, [r3, #8]
      break;
 800aa44:	e03c      	b.n	800aac0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa52:	461a      	mov	r2, r3
 800aa54:	f000 fbc6 	bl	800b1e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	2150      	movs	r1, #80	@ 0x50
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f000 fc20 	bl	800b2a4 <TIM_ITRx_SetConfig>
      break;
 800aa64:	e02c      	b.n	800aac0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa72:	461a      	mov	r2, r3
 800aa74:	f000 fbe5 	bl	800b242 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2160      	movs	r1, #96	@ 0x60
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f000 fc10 	bl	800b2a4 <TIM_ITRx_SetConfig>
      break;
 800aa84:	e01c      	b.n	800aac0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa92:	461a      	mov	r2, r3
 800aa94:	f000 fba6 	bl	800b1e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	2140      	movs	r1, #64	@ 0x40
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f000 fc00 	bl	800b2a4 <TIM_ITRx_SetConfig>
      break;
 800aaa4:	e00c      	b.n	800aac0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4619      	mov	r1, r3
 800aab0:	4610      	mov	r0, r2
 800aab2:	f000 fbf7 	bl	800b2a4 <TIM_ITRx_SetConfig>
      break;
 800aab6:	e003      	b.n	800aac0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800aab8:	2301      	movs	r3, #1
 800aaba:	73fb      	strb	r3, [r7, #15]
      break;
 800aabc:	e000      	b.n	800aac0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800aabe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2201      	movs	r2, #1
 800aac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aad0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3710      	adds	r7, #16
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	ffceff88 	.word	0xffceff88
 800aae0:	00100040 	.word	0x00100040
 800aae4:	00100030 	.word	0x00100030
 800aae8:	00100020 	.word	0x00100020

0800aaec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b085      	sub	sp, #20
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	4a46      	ldr	r2, [pc, #280]	@ (800ac18 <TIM_Base_SetConfig+0x12c>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d013      	beq.n	800ab2c <TIM_Base_SetConfig+0x40>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab0a:	d00f      	beq.n	800ab2c <TIM_Base_SetConfig+0x40>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	4a43      	ldr	r2, [pc, #268]	@ (800ac1c <TIM_Base_SetConfig+0x130>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d00b      	beq.n	800ab2c <TIM_Base_SetConfig+0x40>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	4a42      	ldr	r2, [pc, #264]	@ (800ac20 <TIM_Base_SetConfig+0x134>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d007      	beq.n	800ab2c <TIM_Base_SetConfig+0x40>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	4a41      	ldr	r2, [pc, #260]	@ (800ac24 <TIM_Base_SetConfig+0x138>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d003      	beq.n	800ab2c <TIM_Base_SetConfig+0x40>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	4a40      	ldr	r2, [pc, #256]	@ (800ac28 <TIM_Base_SetConfig+0x13c>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d108      	bne.n	800ab3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	68fa      	ldr	r2, [r7, #12]
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	4a35      	ldr	r2, [pc, #212]	@ (800ac18 <TIM_Base_SetConfig+0x12c>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d01f      	beq.n	800ab86 <TIM_Base_SetConfig+0x9a>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab4c:	d01b      	beq.n	800ab86 <TIM_Base_SetConfig+0x9a>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	4a32      	ldr	r2, [pc, #200]	@ (800ac1c <TIM_Base_SetConfig+0x130>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d017      	beq.n	800ab86 <TIM_Base_SetConfig+0x9a>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	4a31      	ldr	r2, [pc, #196]	@ (800ac20 <TIM_Base_SetConfig+0x134>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d013      	beq.n	800ab86 <TIM_Base_SetConfig+0x9a>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	4a30      	ldr	r2, [pc, #192]	@ (800ac24 <TIM_Base_SetConfig+0x138>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d00f      	beq.n	800ab86 <TIM_Base_SetConfig+0x9a>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	4a2f      	ldr	r2, [pc, #188]	@ (800ac28 <TIM_Base_SetConfig+0x13c>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d00b      	beq.n	800ab86 <TIM_Base_SetConfig+0x9a>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	4a2e      	ldr	r2, [pc, #184]	@ (800ac2c <TIM_Base_SetConfig+0x140>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d007      	beq.n	800ab86 <TIM_Base_SetConfig+0x9a>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	4a2d      	ldr	r2, [pc, #180]	@ (800ac30 <TIM_Base_SetConfig+0x144>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d003      	beq.n	800ab86 <TIM_Base_SetConfig+0x9a>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	4a2c      	ldr	r2, [pc, #176]	@ (800ac34 <TIM_Base_SetConfig+0x148>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d108      	bne.n	800ab98 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	68db      	ldr	r3, [r3, #12]
 800ab92:	68fa      	ldr	r2, [r7, #12]
 800ab94:	4313      	orrs	r3, r2
 800ab96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	695b      	ldr	r3, [r3, #20]
 800aba2:	4313      	orrs	r3, r2
 800aba4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	689a      	ldr	r2, [r3, #8]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	681a      	ldr	r2, [r3, #0]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	4a16      	ldr	r2, [pc, #88]	@ (800ac18 <TIM_Base_SetConfig+0x12c>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d00f      	beq.n	800abe4 <TIM_Base_SetConfig+0xf8>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	4a18      	ldr	r2, [pc, #96]	@ (800ac28 <TIM_Base_SetConfig+0x13c>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d00b      	beq.n	800abe4 <TIM_Base_SetConfig+0xf8>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	4a17      	ldr	r2, [pc, #92]	@ (800ac2c <TIM_Base_SetConfig+0x140>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d007      	beq.n	800abe4 <TIM_Base_SetConfig+0xf8>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	4a16      	ldr	r2, [pc, #88]	@ (800ac30 <TIM_Base_SetConfig+0x144>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d003      	beq.n	800abe4 <TIM_Base_SetConfig+0xf8>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	4a15      	ldr	r2, [pc, #84]	@ (800ac34 <TIM_Base_SetConfig+0x148>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d103      	bne.n	800abec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	691a      	ldr	r2, [r3, #16]
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2201      	movs	r2, #1
 800abf0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	691b      	ldr	r3, [r3, #16]
 800abf6:	f003 0301 	and.w	r3, r3, #1
 800abfa:	2b01      	cmp	r3, #1
 800abfc:	d105      	bne.n	800ac0a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	691b      	ldr	r3, [r3, #16]
 800ac02:	f023 0201 	bic.w	r2, r3, #1
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	611a      	str	r2, [r3, #16]
  }
}
 800ac0a:	bf00      	nop
 800ac0c:	3714      	adds	r7, #20
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac14:	4770      	bx	lr
 800ac16:	bf00      	nop
 800ac18:	40010000 	.word	0x40010000
 800ac1c:	40000400 	.word	0x40000400
 800ac20:	40000800 	.word	0x40000800
 800ac24:	40000c00 	.word	0x40000c00
 800ac28:	40010400 	.word	0x40010400
 800ac2c:	40014000 	.word	0x40014000
 800ac30:	40014400 	.word	0x40014400
 800ac34:	40014800 	.word	0x40014800

0800ac38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b087      	sub	sp, #28
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a1b      	ldr	r3, [r3, #32]
 800ac46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6a1b      	ldr	r3, [r3, #32]
 800ac4c:	f023 0201 	bic.w	r2, r3, #1
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	699b      	ldr	r3, [r3, #24]
 800ac5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ac60:	68fa      	ldr	r2, [r7, #12]
 800ac62:	4b37      	ldr	r3, [pc, #220]	@ (800ad40 <TIM_OC1_SetConfig+0x108>)
 800ac64:	4013      	ands	r3, r2
 800ac66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f023 0303 	bic.w	r3, r3, #3
 800ac6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	68fa      	ldr	r2, [r7, #12]
 800ac76:	4313      	orrs	r3, r2
 800ac78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	f023 0302 	bic.w	r3, r3, #2
 800ac80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	689b      	ldr	r3, [r3, #8]
 800ac86:	697a      	ldr	r2, [r7, #20]
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	4a2d      	ldr	r2, [pc, #180]	@ (800ad44 <TIM_OC1_SetConfig+0x10c>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d00f      	beq.n	800acb4 <TIM_OC1_SetConfig+0x7c>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	4a2c      	ldr	r2, [pc, #176]	@ (800ad48 <TIM_OC1_SetConfig+0x110>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d00b      	beq.n	800acb4 <TIM_OC1_SetConfig+0x7c>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	4a2b      	ldr	r2, [pc, #172]	@ (800ad4c <TIM_OC1_SetConfig+0x114>)
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d007      	beq.n	800acb4 <TIM_OC1_SetConfig+0x7c>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	4a2a      	ldr	r2, [pc, #168]	@ (800ad50 <TIM_OC1_SetConfig+0x118>)
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d003      	beq.n	800acb4 <TIM_OC1_SetConfig+0x7c>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	4a29      	ldr	r2, [pc, #164]	@ (800ad54 <TIM_OC1_SetConfig+0x11c>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d10c      	bne.n	800acce <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	f023 0308 	bic.w	r3, r3, #8
 800acba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	68db      	ldr	r3, [r3, #12]
 800acc0:	697a      	ldr	r2, [r7, #20]
 800acc2:	4313      	orrs	r3, r2
 800acc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	f023 0304 	bic.w	r3, r3, #4
 800accc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	4a1c      	ldr	r2, [pc, #112]	@ (800ad44 <TIM_OC1_SetConfig+0x10c>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d00f      	beq.n	800acf6 <TIM_OC1_SetConfig+0xbe>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	4a1b      	ldr	r2, [pc, #108]	@ (800ad48 <TIM_OC1_SetConfig+0x110>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d00b      	beq.n	800acf6 <TIM_OC1_SetConfig+0xbe>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	4a1a      	ldr	r2, [pc, #104]	@ (800ad4c <TIM_OC1_SetConfig+0x114>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d007      	beq.n	800acf6 <TIM_OC1_SetConfig+0xbe>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	4a19      	ldr	r2, [pc, #100]	@ (800ad50 <TIM_OC1_SetConfig+0x118>)
 800acea:	4293      	cmp	r3, r2
 800acec:	d003      	beq.n	800acf6 <TIM_OC1_SetConfig+0xbe>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	4a18      	ldr	r2, [pc, #96]	@ (800ad54 <TIM_OC1_SetConfig+0x11c>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d111      	bne.n	800ad1a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800acfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ad04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	695b      	ldr	r3, [r3, #20]
 800ad0a:	693a      	ldr	r2, [r7, #16]
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	699b      	ldr	r3, [r3, #24]
 800ad14:	693a      	ldr	r2, [r7, #16]
 800ad16:	4313      	orrs	r3, r2
 800ad18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	693a      	ldr	r2, [r7, #16]
 800ad1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	68fa      	ldr	r2, [r7, #12]
 800ad24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	685a      	ldr	r2, [r3, #4]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	697a      	ldr	r2, [r7, #20]
 800ad32:	621a      	str	r2, [r3, #32]
}
 800ad34:	bf00      	nop
 800ad36:	371c      	adds	r7, #28
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr
 800ad40:	fffeff8f 	.word	0xfffeff8f
 800ad44:	40010000 	.word	0x40010000
 800ad48:	40010400 	.word	0x40010400
 800ad4c:	40014000 	.word	0x40014000
 800ad50:	40014400 	.word	0x40014400
 800ad54:	40014800 	.word	0x40014800

0800ad58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b087      	sub	sp, #28
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
 800ad60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6a1b      	ldr	r3, [r3, #32]
 800ad66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6a1b      	ldr	r3, [r3, #32]
 800ad6c:	f023 0210 	bic.w	r2, r3, #16
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	685b      	ldr	r3, [r3, #4]
 800ad78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	699b      	ldr	r3, [r3, #24]
 800ad7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ad80:	68fa      	ldr	r2, [r7, #12]
 800ad82:	4b34      	ldr	r3, [pc, #208]	@ (800ae54 <TIM_OC2_SetConfig+0xfc>)
 800ad84:	4013      	ands	r3, r2
 800ad86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ad8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	021b      	lsls	r3, r3, #8
 800ad96:	68fa      	ldr	r2, [r7, #12]
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	f023 0320 	bic.w	r3, r3, #32
 800ada2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	689b      	ldr	r3, [r3, #8]
 800ada8:	011b      	lsls	r3, r3, #4
 800adaa:	697a      	ldr	r2, [r7, #20]
 800adac:	4313      	orrs	r3, r2
 800adae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	4a29      	ldr	r2, [pc, #164]	@ (800ae58 <TIM_OC2_SetConfig+0x100>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d003      	beq.n	800adc0 <TIM_OC2_SetConfig+0x68>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	4a28      	ldr	r2, [pc, #160]	@ (800ae5c <TIM_OC2_SetConfig+0x104>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d10d      	bne.n	800addc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800adc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	68db      	ldr	r3, [r3, #12]
 800adcc:	011b      	lsls	r3, r3, #4
 800adce:	697a      	ldr	r2, [r7, #20]
 800add0:	4313      	orrs	r3, r2
 800add2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800adda:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	4a1e      	ldr	r2, [pc, #120]	@ (800ae58 <TIM_OC2_SetConfig+0x100>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d00f      	beq.n	800ae04 <TIM_OC2_SetConfig+0xac>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	4a1d      	ldr	r2, [pc, #116]	@ (800ae5c <TIM_OC2_SetConfig+0x104>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	d00b      	beq.n	800ae04 <TIM_OC2_SetConfig+0xac>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	4a1c      	ldr	r2, [pc, #112]	@ (800ae60 <TIM_OC2_SetConfig+0x108>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d007      	beq.n	800ae04 <TIM_OC2_SetConfig+0xac>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	4a1b      	ldr	r2, [pc, #108]	@ (800ae64 <TIM_OC2_SetConfig+0x10c>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d003      	beq.n	800ae04 <TIM_OC2_SetConfig+0xac>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	4a1a      	ldr	r2, [pc, #104]	@ (800ae68 <TIM_OC2_SetConfig+0x110>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d113      	bne.n	800ae2c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ae0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ae12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	695b      	ldr	r3, [r3, #20]
 800ae18:	009b      	lsls	r3, r3, #2
 800ae1a:	693a      	ldr	r2, [r7, #16]
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	699b      	ldr	r3, [r3, #24]
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	693a      	ldr	r2, [r7, #16]
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	693a      	ldr	r2, [r7, #16]
 800ae30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	68fa      	ldr	r2, [r7, #12]
 800ae36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	685a      	ldr	r2, [r3, #4]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	697a      	ldr	r2, [r7, #20]
 800ae44:	621a      	str	r2, [r3, #32]
}
 800ae46:	bf00      	nop
 800ae48:	371c      	adds	r7, #28
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr
 800ae52:	bf00      	nop
 800ae54:	feff8fff 	.word	0xfeff8fff
 800ae58:	40010000 	.word	0x40010000
 800ae5c:	40010400 	.word	0x40010400
 800ae60:	40014000 	.word	0x40014000
 800ae64:	40014400 	.word	0x40014400
 800ae68:	40014800 	.word	0x40014800

0800ae6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b087      	sub	sp, #28
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6a1b      	ldr	r3, [r3, #32]
 800ae7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6a1b      	ldr	r3, [r3, #32]
 800ae80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	69db      	ldr	r3, [r3, #28]
 800ae92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ae94:	68fa      	ldr	r2, [r7, #12]
 800ae96:	4b33      	ldr	r3, [pc, #204]	@ (800af64 <TIM_OC3_SetConfig+0xf8>)
 800ae98:	4013      	ands	r3, r2
 800ae9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f023 0303 	bic.w	r3, r3, #3
 800aea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	68fa      	ldr	r2, [r7, #12]
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800aeb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	689b      	ldr	r3, [r3, #8]
 800aeba:	021b      	lsls	r3, r3, #8
 800aebc:	697a      	ldr	r2, [r7, #20]
 800aebe:	4313      	orrs	r3, r2
 800aec0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	4a28      	ldr	r2, [pc, #160]	@ (800af68 <TIM_OC3_SetConfig+0xfc>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d003      	beq.n	800aed2 <TIM_OC3_SetConfig+0x66>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	4a27      	ldr	r2, [pc, #156]	@ (800af6c <TIM_OC3_SetConfig+0x100>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d10d      	bne.n	800aeee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800aed8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	68db      	ldr	r3, [r3, #12]
 800aede:	021b      	lsls	r3, r3, #8
 800aee0:	697a      	ldr	r2, [r7, #20]
 800aee2:	4313      	orrs	r3, r2
 800aee4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800aeec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	4a1d      	ldr	r2, [pc, #116]	@ (800af68 <TIM_OC3_SetConfig+0xfc>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d00f      	beq.n	800af16 <TIM_OC3_SetConfig+0xaa>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	4a1c      	ldr	r2, [pc, #112]	@ (800af6c <TIM_OC3_SetConfig+0x100>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d00b      	beq.n	800af16 <TIM_OC3_SetConfig+0xaa>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	4a1b      	ldr	r2, [pc, #108]	@ (800af70 <TIM_OC3_SetConfig+0x104>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d007      	beq.n	800af16 <TIM_OC3_SetConfig+0xaa>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	4a1a      	ldr	r2, [pc, #104]	@ (800af74 <TIM_OC3_SetConfig+0x108>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d003      	beq.n	800af16 <TIM_OC3_SetConfig+0xaa>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	4a19      	ldr	r2, [pc, #100]	@ (800af78 <TIM_OC3_SetConfig+0x10c>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d113      	bne.n	800af3e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800af1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800af24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	695b      	ldr	r3, [r3, #20]
 800af2a:	011b      	lsls	r3, r3, #4
 800af2c:	693a      	ldr	r2, [r7, #16]
 800af2e:	4313      	orrs	r3, r2
 800af30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	699b      	ldr	r3, [r3, #24]
 800af36:	011b      	lsls	r3, r3, #4
 800af38:	693a      	ldr	r2, [r7, #16]
 800af3a:	4313      	orrs	r3, r2
 800af3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	693a      	ldr	r2, [r7, #16]
 800af42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	68fa      	ldr	r2, [r7, #12]
 800af48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	685a      	ldr	r2, [r3, #4]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	697a      	ldr	r2, [r7, #20]
 800af56:	621a      	str	r2, [r3, #32]
}
 800af58:	bf00      	nop
 800af5a:	371c      	adds	r7, #28
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr
 800af64:	fffeff8f 	.word	0xfffeff8f
 800af68:	40010000 	.word	0x40010000
 800af6c:	40010400 	.word	0x40010400
 800af70:	40014000 	.word	0x40014000
 800af74:	40014400 	.word	0x40014400
 800af78:	40014800 	.word	0x40014800

0800af7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b087      	sub	sp, #28
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6a1b      	ldr	r3, [r3, #32]
 800af8a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6a1b      	ldr	r3, [r3, #32]
 800af90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	69db      	ldr	r3, [r3, #28]
 800afa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800afa4:	68fa      	ldr	r2, [r7, #12]
 800afa6:	4b24      	ldr	r3, [pc, #144]	@ (800b038 <TIM_OC4_SetConfig+0xbc>)
 800afa8:	4013      	ands	r3, r2
 800afaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800afb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	021b      	lsls	r3, r3, #8
 800afba:	68fa      	ldr	r2, [r7, #12]
 800afbc:	4313      	orrs	r3, r2
 800afbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800afc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	689b      	ldr	r3, [r3, #8]
 800afcc:	031b      	lsls	r3, r3, #12
 800afce:	693a      	ldr	r2, [r7, #16]
 800afd0:	4313      	orrs	r3, r2
 800afd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	4a19      	ldr	r2, [pc, #100]	@ (800b03c <TIM_OC4_SetConfig+0xc0>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d00f      	beq.n	800affc <TIM_OC4_SetConfig+0x80>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	4a18      	ldr	r2, [pc, #96]	@ (800b040 <TIM_OC4_SetConfig+0xc4>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d00b      	beq.n	800affc <TIM_OC4_SetConfig+0x80>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	4a17      	ldr	r2, [pc, #92]	@ (800b044 <TIM_OC4_SetConfig+0xc8>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	d007      	beq.n	800affc <TIM_OC4_SetConfig+0x80>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	4a16      	ldr	r2, [pc, #88]	@ (800b048 <TIM_OC4_SetConfig+0xcc>)
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d003      	beq.n	800affc <TIM_OC4_SetConfig+0x80>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	4a15      	ldr	r2, [pc, #84]	@ (800b04c <TIM_OC4_SetConfig+0xd0>)
 800aff8:	4293      	cmp	r3, r2
 800affa:	d109      	bne.n	800b010 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b002:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	695b      	ldr	r3, [r3, #20]
 800b008:	019b      	lsls	r3, r3, #6
 800b00a:	697a      	ldr	r2, [r7, #20]
 800b00c:	4313      	orrs	r3, r2
 800b00e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	697a      	ldr	r2, [r7, #20]
 800b014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	68fa      	ldr	r2, [r7, #12]
 800b01a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	685a      	ldr	r2, [r3, #4]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	693a      	ldr	r2, [r7, #16]
 800b028:	621a      	str	r2, [r3, #32]
}
 800b02a:	bf00      	nop
 800b02c:	371c      	adds	r7, #28
 800b02e:	46bd      	mov	sp, r7
 800b030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b034:	4770      	bx	lr
 800b036:	bf00      	nop
 800b038:	feff8fff 	.word	0xfeff8fff
 800b03c:	40010000 	.word	0x40010000
 800b040:	40010400 	.word	0x40010400
 800b044:	40014000 	.word	0x40014000
 800b048:	40014400 	.word	0x40014400
 800b04c:	40014800 	.word	0x40014800

0800b050 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b050:	b480      	push	{r7}
 800b052:	b087      	sub	sp, #28
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6a1b      	ldr	r3, [r3, #32]
 800b05e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6a1b      	ldr	r3, [r3, #32]
 800b064:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b078:	68fa      	ldr	r2, [r7, #12]
 800b07a:	4b21      	ldr	r3, [pc, #132]	@ (800b100 <TIM_OC5_SetConfig+0xb0>)
 800b07c:	4013      	ands	r3, r2
 800b07e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	68fa      	ldr	r2, [r7, #12]
 800b086:	4313      	orrs	r3, r2
 800b088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b090:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	689b      	ldr	r3, [r3, #8]
 800b096:	041b      	lsls	r3, r3, #16
 800b098:	693a      	ldr	r2, [r7, #16]
 800b09a:	4313      	orrs	r3, r2
 800b09c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	4a18      	ldr	r2, [pc, #96]	@ (800b104 <TIM_OC5_SetConfig+0xb4>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d00f      	beq.n	800b0c6 <TIM_OC5_SetConfig+0x76>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	4a17      	ldr	r2, [pc, #92]	@ (800b108 <TIM_OC5_SetConfig+0xb8>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d00b      	beq.n	800b0c6 <TIM_OC5_SetConfig+0x76>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	4a16      	ldr	r2, [pc, #88]	@ (800b10c <TIM_OC5_SetConfig+0xbc>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d007      	beq.n	800b0c6 <TIM_OC5_SetConfig+0x76>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	4a15      	ldr	r2, [pc, #84]	@ (800b110 <TIM_OC5_SetConfig+0xc0>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d003      	beq.n	800b0c6 <TIM_OC5_SetConfig+0x76>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	4a14      	ldr	r2, [pc, #80]	@ (800b114 <TIM_OC5_SetConfig+0xc4>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d109      	bne.n	800b0da <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b0cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	695b      	ldr	r3, [r3, #20]
 800b0d2:	021b      	lsls	r3, r3, #8
 800b0d4:	697a      	ldr	r2, [r7, #20]
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	697a      	ldr	r2, [r7, #20]
 800b0de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	68fa      	ldr	r2, [r7, #12]
 800b0e4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	685a      	ldr	r2, [r3, #4]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	693a      	ldr	r2, [r7, #16]
 800b0f2:	621a      	str	r2, [r3, #32]
}
 800b0f4:	bf00      	nop
 800b0f6:	371c      	adds	r7, #28
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr
 800b100:	fffeff8f 	.word	0xfffeff8f
 800b104:	40010000 	.word	0x40010000
 800b108:	40010400 	.word	0x40010400
 800b10c:	40014000 	.word	0x40014000
 800b110:	40014400 	.word	0x40014400
 800b114:	40014800 	.word	0x40014800

0800b118 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b118:	b480      	push	{r7}
 800b11a:	b087      	sub	sp, #28
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6a1b      	ldr	r3, [r3, #32]
 800b126:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6a1b      	ldr	r3, [r3, #32]
 800b12c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	685b      	ldr	r3, [r3, #4]
 800b138:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b13e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b140:	68fa      	ldr	r2, [r7, #12]
 800b142:	4b22      	ldr	r3, [pc, #136]	@ (800b1cc <TIM_OC6_SetConfig+0xb4>)
 800b144:	4013      	ands	r3, r2
 800b146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	021b      	lsls	r3, r3, #8
 800b14e:	68fa      	ldr	r2, [r7, #12]
 800b150:	4313      	orrs	r3, r2
 800b152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b15a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	689b      	ldr	r3, [r3, #8]
 800b160:	051b      	lsls	r3, r3, #20
 800b162:	693a      	ldr	r2, [r7, #16]
 800b164:	4313      	orrs	r3, r2
 800b166:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	4a19      	ldr	r2, [pc, #100]	@ (800b1d0 <TIM_OC6_SetConfig+0xb8>)
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d00f      	beq.n	800b190 <TIM_OC6_SetConfig+0x78>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	4a18      	ldr	r2, [pc, #96]	@ (800b1d4 <TIM_OC6_SetConfig+0xbc>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d00b      	beq.n	800b190 <TIM_OC6_SetConfig+0x78>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	4a17      	ldr	r2, [pc, #92]	@ (800b1d8 <TIM_OC6_SetConfig+0xc0>)
 800b17c:	4293      	cmp	r3, r2
 800b17e:	d007      	beq.n	800b190 <TIM_OC6_SetConfig+0x78>
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	4a16      	ldr	r2, [pc, #88]	@ (800b1dc <TIM_OC6_SetConfig+0xc4>)
 800b184:	4293      	cmp	r3, r2
 800b186:	d003      	beq.n	800b190 <TIM_OC6_SetConfig+0x78>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	4a15      	ldr	r2, [pc, #84]	@ (800b1e0 <TIM_OC6_SetConfig+0xc8>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d109      	bne.n	800b1a4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b196:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	695b      	ldr	r3, [r3, #20]
 800b19c:	029b      	lsls	r3, r3, #10
 800b19e:	697a      	ldr	r2, [r7, #20]
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	697a      	ldr	r2, [r7, #20]
 800b1a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	68fa      	ldr	r2, [r7, #12]
 800b1ae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	685a      	ldr	r2, [r3, #4]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	693a      	ldr	r2, [r7, #16]
 800b1bc:	621a      	str	r2, [r3, #32]
}
 800b1be:	bf00      	nop
 800b1c0:	371c      	adds	r7, #28
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c8:	4770      	bx	lr
 800b1ca:	bf00      	nop
 800b1cc:	feff8fff 	.word	0xfeff8fff
 800b1d0:	40010000 	.word	0x40010000
 800b1d4:	40010400 	.word	0x40010400
 800b1d8:	40014000 	.word	0x40014000
 800b1dc:	40014400 	.word	0x40014400
 800b1e0:	40014800 	.word	0x40014800

0800b1e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b087      	sub	sp, #28
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	60f8      	str	r0, [r7, #12]
 800b1ec:	60b9      	str	r1, [r7, #8]
 800b1ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	6a1b      	ldr	r3, [r3, #32]
 800b1f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	6a1b      	ldr	r3, [r3, #32]
 800b1fa:	f023 0201 	bic.w	r2, r3, #1
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	699b      	ldr	r3, [r3, #24]
 800b206:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b20e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	011b      	lsls	r3, r3, #4
 800b214:	693a      	ldr	r2, [r7, #16]
 800b216:	4313      	orrs	r3, r2
 800b218:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	f023 030a 	bic.w	r3, r3, #10
 800b220:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b222:	697a      	ldr	r2, [r7, #20]
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	4313      	orrs	r3, r2
 800b228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	693a      	ldr	r2, [r7, #16]
 800b22e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	697a      	ldr	r2, [r7, #20]
 800b234:	621a      	str	r2, [r3, #32]
}
 800b236:	bf00      	nop
 800b238:	371c      	adds	r7, #28
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr

0800b242 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b242:	b480      	push	{r7}
 800b244:	b087      	sub	sp, #28
 800b246:	af00      	add	r7, sp, #0
 800b248:	60f8      	str	r0, [r7, #12]
 800b24a:	60b9      	str	r1, [r7, #8]
 800b24c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	6a1b      	ldr	r3, [r3, #32]
 800b252:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	6a1b      	ldr	r3, [r3, #32]
 800b258:	f023 0210 	bic.w	r2, r3, #16
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	699b      	ldr	r3, [r3, #24]
 800b264:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b26c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	031b      	lsls	r3, r3, #12
 800b272:	693a      	ldr	r2, [r7, #16]
 800b274:	4313      	orrs	r3, r2
 800b276:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b27e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	011b      	lsls	r3, r3, #4
 800b284:	697a      	ldr	r2, [r7, #20]
 800b286:	4313      	orrs	r3, r2
 800b288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	693a      	ldr	r2, [r7, #16]
 800b28e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	697a      	ldr	r2, [r7, #20]
 800b294:	621a      	str	r2, [r3, #32]
}
 800b296:	bf00      	nop
 800b298:	371c      	adds	r7, #28
 800b29a:	46bd      	mov	sp, r7
 800b29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a0:	4770      	bx	lr
	...

0800b2a4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b085      	sub	sp, #20
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	689b      	ldr	r3, [r3, #8]
 800b2b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b2b4:	68fa      	ldr	r2, [r7, #12]
 800b2b6:	4b09      	ldr	r3, [pc, #36]	@ (800b2dc <TIM_ITRx_SetConfig+0x38>)
 800b2b8:	4013      	ands	r3, r2
 800b2ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b2bc:	683a      	ldr	r2, [r7, #0]
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	4313      	orrs	r3, r2
 800b2c2:	f043 0307 	orr.w	r3, r3, #7
 800b2c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	68fa      	ldr	r2, [r7, #12]
 800b2cc:	609a      	str	r2, [r3, #8]
}
 800b2ce:	bf00      	nop
 800b2d0:	3714      	adds	r7, #20
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d8:	4770      	bx	lr
 800b2da:	bf00      	nop
 800b2dc:	ffcfff8f 	.word	0xffcfff8f

0800b2e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b087      	sub	sp, #28
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	60f8      	str	r0, [r7, #12]
 800b2e8:	60b9      	str	r1, [r7, #8]
 800b2ea:	607a      	str	r2, [r7, #4]
 800b2ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	689b      	ldr	r3, [r3, #8]
 800b2f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b2fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	021a      	lsls	r2, r3, #8
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	431a      	orrs	r2, r3
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	4313      	orrs	r3, r2
 800b308:	697a      	ldr	r2, [r7, #20]
 800b30a:	4313      	orrs	r3, r2
 800b30c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	697a      	ldr	r2, [r7, #20]
 800b312:	609a      	str	r2, [r3, #8]
}
 800b314:	bf00      	nop
 800b316:	371c      	adds	r7, #28
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr

0800b320 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b320:	b480      	push	{r7}
 800b322:	b087      	sub	sp, #28
 800b324:	af00      	add	r7, sp, #0
 800b326:	60f8      	str	r0, [r7, #12]
 800b328:	60b9      	str	r1, [r7, #8]
 800b32a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	f003 031f 	and.w	r3, r3, #31
 800b332:	2201      	movs	r2, #1
 800b334:	fa02 f303 	lsl.w	r3, r2, r3
 800b338:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	6a1a      	ldr	r2, [r3, #32]
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	43db      	mvns	r3, r3
 800b342:	401a      	ands	r2, r3
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	6a1a      	ldr	r2, [r3, #32]
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	f003 031f 	and.w	r3, r3, #31
 800b352:	6879      	ldr	r1, [r7, #4]
 800b354:	fa01 f303 	lsl.w	r3, r1, r3
 800b358:	431a      	orrs	r2, r3
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	621a      	str	r2, [r3, #32]
}
 800b35e:	bf00      	nop
 800b360:	371c      	adds	r7, #28
 800b362:	46bd      	mov	sp, r7
 800b364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b368:	4770      	bx	lr
	...

0800b36c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b085      	sub	sp, #20
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d101      	bne.n	800b384 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b380:	2302      	movs	r3, #2
 800b382:	e06d      	b.n	800b460 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2201      	movs	r2, #1
 800b388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2202      	movs	r2, #2
 800b390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	689b      	ldr	r3, [r3, #8]
 800b3a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	4a30      	ldr	r2, [pc, #192]	@ (800b46c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d004      	beq.n	800b3b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4a2f      	ldr	r2, [pc, #188]	@ (800b470 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d108      	bne.n	800b3ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b3be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	68fa      	ldr	r2, [r7, #12]
 800b3c6:	4313      	orrs	r3, r2
 800b3c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	68fa      	ldr	r2, [r7, #12]
 800b3d8:	4313      	orrs	r3, r2
 800b3da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	68fa      	ldr	r2, [r7, #12]
 800b3e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	4a20      	ldr	r2, [pc, #128]	@ (800b46c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d022      	beq.n	800b434 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3f6:	d01d      	beq.n	800b434 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	4a1d      	ldr	r2, [pc, #116]	@ (800b474 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d018      	beq.n	800b434 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	4a1c      	ldr	r2, [pc, #112]	@ (800b478 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b408:	4293      	cmp	r3, r2
 800b40a:	d013      	beq.n	800b434 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	4a1a      	ldr	r2, [pc, #104]	@ (800b47c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b412:	4293      	cmp	r3, r2
 800b414:	d00e      	beq.n	800b434 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	4a15      	ldr	r2, [pc, #84]	@ (800b470 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b41c:	4293      	cmp	r3, r2
 800b41e:	d009      	beq.n	800b434 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4a16      	ldr	r2, [pc, #88]	@ (800b480 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b426:	4293      	cmp	r3, r2
 800b428:	d004      	beq.n	800b434 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	4a15      	ldr	r2, [pc, #84]	@ (800b484 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b430:	4293      	cmp	r3, r2
 800b432:	d10c      	bne.n	800b44e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b43a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	689b      	ldr	r3, [r3, #8]
 800b440:	68ba      	ldr	r2, [r7, #8]
 800b442:	4313      	orrs	r3, r2
 800b444:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	68ba      	ldr	r2, [r7, #8]
 800b44c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2201      	movs	r2, #1
 800b452:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2200      	movs	r2, #0
 800b45a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b45e:	2300      	movs	r3, #0
}
 800b460:	4618      	mov	r0, r3
 800b462:	3714      	adds	r7, #20
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr
 800b46c:	40010000 	.word	0x40010000
 800b470:	40010400 	.word	0x40010400
 800b474:	40000400 	.word	0x40000400
 800b478:	40000800 	.word	0x40000800
 800b47c:	40000c00 	.word	0x40000c00
 800b480:	40001800 	.word	0x40001800
 800b484:	40014000 	.word	0x40014000

0800b488 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d101      	bne.n	800b49a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b496:	2301      	movs	r3, #1
 800b498:	e042      	b.n	800b520 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d106      	bne.n	800b4b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f7f6 fb89 	bl	8001bc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2224      	movs	r2, #36	@ 0x24
 800b4b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	681a      	ldr	r2, [r3, #0]
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f022 0201 	bic.w	r2, r2, #1
 800b4c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d002      	beq.n	800b4d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f001 fa44 	bl	800c960 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f000 fcd9 	bl	800be90 <UART_SetConfig>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d101      	bne.n	800b4e8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	e01b      	b.n	800b520 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	685a      	ldr	r2, [r3, #4]
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b4f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	689a      	ldr	r2, [r3, #8]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b506:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	681a      	ldr	r2, [r3, #0]
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f042 0201 	orr.w	r2, r2, #1
 800b516:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f001 fac3 	bl	800caa4 <UART_CheckIdleState>
 800b51e:	4603      	mov	r3, r0
}
 800b520:	4618      	mov	r0, r3
 800b522:	3708      	adds	r7, #8
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}

0800b528 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b08a      	sub	sp, #40	@ 0x28
 800b52c:	af02      	add	r7, sp, #8
 800b52e:	60f8      	str	r0, [r7, #12]
 800b530:	60b9      	str	r1, [r7, #8]
 800b532:	603b      	str	r3, [r7, #0]
 800b534:	4613      	mov	r3, r2
 800b536:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b53e:	2b20      	cmp	r3, #32
 800b540:	d17b      	bne.n	800b63a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d002      	beq.n	800b54e <HAL_UART_Transmit+0x26>
 800b548:	88fb      	ldrh	r3, [r7, #6]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d101      	bne.n	800b552 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b54e:	2301      	movs	r3, #1
 800b550:	e074      	b.n	800b63c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	2200      	movs	r2, #0
 800b556:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2221      	movs	r2, #33	@ 0x21
 800b55e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b562:	f7f6 fc51 	bl	8001e08 <HAL_GetTick>
 800b566:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	88fa      	ldrh	r2, [r7, #6]
 800b56c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	88fa      	ldrh	r2, [r7, #6]
 800b574:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	689b      	ldr	r3, [r3, #8]
 800b57c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b580:	d108      	bne.n	800b594 <HAL_UART_Transmit+0x6c>
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	691b      	ldr	r3, [r3, #16]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d104      	bne.n	800b594 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b58a:	2300      	movs	r3, #0
 800b58c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	61bb      	str	r3, [r7, #24]
 800b592:	e003      	b.n	800b59c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b598:	2300      	movs	r3, #0
 800b59a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b59c:	e030      	b.n	800b600 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	9300      	str	r3, [sp, #0]
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	2180      	movs	r1, #128	@ 0x80
 800b5a8:	68f8      	ldr	r0, [r7, #12]
 800b5aa:	f001 fb25 	bl	800cbf8 <UART_WaitOnFlagUntilTimeout>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d005      	beq.n	800b5c0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	2220      	movs	r2, #32
 800b5b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b5bc:	2303      	movs	r3, #3
 800b5be:	e03d      	b.n	800b63c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b5c0:	69fb      	ldr	r3, [r7, #28]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d10b      	bne.n	800b5de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b5c6:	69bb      	ldr	r3, [r7, #24]
 800b5c8:	881b      	ldrh	r3, [r3, #0]
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b5d4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b5d6:	69bb      	ldr	r3, [r7, #24]
 800b5d8:	3302      	adds	r3, #2
 800b5da:	61bb      	str	r3, [r7, #24]
 800b5dc:	e007      	b.n	800b5ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b5de:	69fb      	ldr	r3, [r7, #28]
 800b5e0:	781a      	ldrb	r2, [r3, #0]
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b5e8:	69fb      	ldr	r3, [r7, #28]
 800b5ea:	3301      	adds	r3, #1
 800b5ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b5f4:	b29b      	uxth	r3, r3
 800b5f6:	3b01      	subs	r3, #1
 800b5f8:	b29a      	uxth	r2, r3
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b606:	b29b      	uxth	r3, r3
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d1c8      	bne.n	800b59e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	9300      	str	r3, [sp, #0]
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	2200      	movs	r2, #0
 800b614:	2140      	movs	r1, #64	@ 0x40
 800b616:	68f8      	ldr	r0, [r7, #12]
 800b618:	f001 faee 	bl	800cbf8 <UART_WaitOnFlagUntilTimeout>
 800b61c:	4603      	mov	r3, r0
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d005      	beq.n	800b62e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	2220      	movs	r2, #32
 800b626:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b62a:	2303      	movs	r3, #3
 800b62c:	e006      	b.n	800b63c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2220      	movs	r2, #32
 800b632:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b636:	2300      	movs	r3, #0
 800b638:	e000      	b.n	800b63c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b63a:	2302      	movs	r3, #2
  }
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3720      	adds	r7, #32
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}

0800b644 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b08a      	sub	sp, #40	@ 0x28
 800b648:	af00      	add	r7, sp, #0
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	60b9      	str	r1, [r7, #8]
 800b64e:	4613      	mov	r3, r2
 800b650:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b658:	2b20      	cmp	r3, #32
 800b65a:	d137      	bne.n	800b6cc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d002      	beq.n	800b668 <HAL_UART_Receive_IT+0x24>
 800b662:	88fb      	ldrh	r3, [r7, #6]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d101      	bne.n	800b66c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b668:	2301      	movs	r3, #1
 800b66a:	e030      	b.n	800b6ce <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2200      	movs	r2, #0
 800b670:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	4a18      	ldr	r2, [pc, #96]	@ (800b6d8 <HAL_UART_Receive_IT+0x94>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d01f      	beq.n	800b6bc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b686:	2b00      	cmp	r3, #0
 800b688:	d018      	beq.n	800b6bc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	e853 3f00 	ldrex	r3, [r3]
 800b696:	613b      	str	r3, [r7, #16]
   return(result);
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b69e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	461a      	mov	r2, r3
 800b6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6a8:	623b      	str	r3, [r7, #32]
 800b6aa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ac:	69f9      	ldr	r1, [r7, #28]
 800b6ae:	6a3a      	ldr	r2, [r7, #32]
 800b6b0:	e841 2300 	strex	r3, r2, [r1]
 800b6b4:	61bb      	str	r3, [r7, #24]
   return(result);
 800b6b6:	69bb      	ldr	r3, [r7, #24]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d1e6      	bne.n	800b68a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b6bc:	88fb      	ldrh	r3, [r7, #6]
 800b6be:	461a      	mov	r2, r3
 800b6c0:	68b9      	ldr	r1, [r7, #8]
 800b6c2:	68f8      	ldr	r0, [r7, #12]
 800b6c4:	f001 fb06 	bl	800ccd4 <UART_Start_Receive_IT>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	e000      	b.n	800b6ce <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b6cc:	2302      	movs	r3, #2
  }
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3728      	adds	r7, #40	@ 0x28
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}
 800b6d6:	bf00      	nop
 800b6d8:	58000c00 	.word	0x58000c00

0800b6dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b0ba      	sub	sp, #232	@ 0xe8
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	69db      	ldr	r3, [r3, #28]
 800b6ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	689b      	ldr	r3, [r3, #8]
 800b6fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b702:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b706:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b70a:	4013      	ands	r3, r2
 800b70c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b710:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b714:	2b00      	cmp	r3, #0
 800b716:	d11b      	bne.n	800b750 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b71c:	f003 0320 	and.w	r3, r3, #32
 800b720:	2b00      	cmp	r3, #0
 800b722:	d015      	beq.n	800b750 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b728:	f003 0320 	and.w	r3, r3, #32
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d105      	bne.n	800b73c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b730:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d009      	beq.n	800b750 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b740:	2b00      	cmp	r3, #0
 800b742:	f000 8377 	beq.w	800be34 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	4798      	blx	r3
      }
      return;
 800b74e:	e371      	b.n	800be34 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b750:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b754:	2b00      	cmp	r3, #0
 800b756:	f000 8123 	beq.w	800b9a0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b75a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b75e:	4b8d      	ldr	r3, [pc, #564]	@ (800b994 <HAL_UART_IRQHandler+0x2b8>)
 800b760:	4013      	ands	r3, r2
 800b762:	2b00      	cmp	r3, #0
 800b764:	d106      	bne.n	800b774 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b766:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b76a:	4b8b      	ldr	r3, [pc, #556]	@ (800b998 <HAL_UART_IRQHandler+0x2bc>)
 800b76c:	4013      	ands	r3, r2
 800b76e:	2b00      	cmp	r3, #0
 800b770:	f000 8116 	beq.w	800b9a0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b778:	f003 0301 	and.w	r3, r3, #1
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d011      	beq.n	800b7a4 <HAL_UART_IRQHandler+0xc8>
 800b780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d00b      	beq.n	800b7a4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	2201      	movs	r2, #1
 800b792:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b79a:	f043 0201 	orr.w	r2, r3, #1
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b7a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b7a8:	f003 0302 	and.w	r3, r3, #2
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d011      	beq.n	800b7d4 <HAL_UART_IRQHandler+0xf8>
 800b7b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b7b4:	f003 0301 	and.w	r3, r3, #1
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d00b      	beq.n	800b7d4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	2202      	movs	r2, #2
 800b7c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7ca:	f043 0204 	orr.w	r2, r3, #4
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b7d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b7d8:	f003 0304 	and.w	r3, r3, #4
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d011      	beq.n	800b804 <HAL_UART_IRQHandler+0x128>
 800b7e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b7e4:	f003 0301 	and.w	r3, r3, #1
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d00b      	beq.n	800b804 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	2204      	movs	r2, #4
 800b7f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7fa:	f043 0202 	orr.w	r2, r3, #2
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b808:	f003 0308 	and.w	r3, r3, #8
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d017      	beq.n	800b840 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b814:	f003 0320 	and.w	r3, r3, #32
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d105      	bne.n	800b828 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b81c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b820:	4b5c      	ldr	r3, [pc, #368]	@ (800b994 <HAL_UART_IRQHandler+0x2b8>)
 800b822:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b824:	2b00      	cmp	r3, #0
 800b826:	d00b      	beq.n	800b840 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	2208      	movs	r2, #8
 800b82e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b836:	f043 0208 	orr.w	r2, r3, #8
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b844:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d012      	beq.n	800b872 <HAL_UART_IRQHandler+0x196>
 800b84c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b850:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b854:	2b00      	cmp	r3, #0
 800b856:	d00c      	beq.n	800b872 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b860:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b868:	f043 0220 	orr.w	r2, r3, #32
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b878:	2b00      	cmp	r3, #0
 800b87a:	f000 82dd 	beq.w	800be38 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b87e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b882:	f003 0320 	and.w	r3, r3, #32
 800b886:	2b00      	cmp	r3, #0
 800b888:	d013      	beq.n	800b8b2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b88a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b88e:	f003 0320 	and.w	r3, r3, #32
 800b892:	2b00      	cmp	r3, #0
 800b894:	d105      	bne.n	800b8a2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b896:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b89a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d007      	beq.n	800b8b2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d003      	beq.n	800b8b2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	689b      	ldr	r3, [r3, #8]
 800b8c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8c6:	2b40      	cmp	r3, #64	@ 0x40
 800b8c8:	d005      	beq.n	800b8d6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b8ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b8ce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d054      	beq.n	800b980 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f001 fb1e 	bl	800cf18 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	689b      	ldr	r3, [r3, #8]
 800b8e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8e6:	2b40      	cmp	r3, #64	@ 0x40
 800b8e8:	d146      	bne.n	800b978 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	3308      	adds	r3, #8
 800b8f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b8f8:	e853 3f00 	ldrex	r3, [r3]
 800b8fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b900:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b904:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b908:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	3308      	adds	r3, #8
 800b912:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b916:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b91a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b91e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b922:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b926:	e841 2300 	strex	r3, r2, [r1]
 800b92a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b92e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b932:	2b00      	cmp	r3, #0
 800b934:	d1d9      	bne.n	800b8ea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d017      	beq.n	800b970 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b946:	4a15      	ldr	r2, [pc, #84]	@ (800b99c <HAL_UART_IRQHandler+0x2c0>)
 800b948:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b950:	4618      	mov	r0, r3
 800b952:	f7f8 fd65 	bl	8004420 <HAL_DMA_Abort_IT>
 800b956:	4603      	mov	r3, r0
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d019      	beq.n	800b990 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b962:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b964:	687a      	ldr	r2, [r7, #4]
 800b966:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b96a:	4610      	mov	r0, r2
 800b96c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b96e:	e00f      	b.n	800b990 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 fa77 	bl	800be64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b976:	e00b      	b.n	800b990 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f000 fa73 	bl	800be64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b97e:	e007      	b.n	800b990 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f000 fa6f 	bl	800be64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2200      	movs	r2, #0
 800b98a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b98e:	e253      	b.n	800be38 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b990:	bf00      	nop
    return;
 800b992:	e251      	b.n	800be38 <HAL_UART_IRQHandler+0x75c>
 800b994:	10000001 	.word	0x10000001
 800b998:	04000120 	.word	0x04000120
 800b99c:	0800cfe5 	.word	0x0800cfe5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	f040 81e7 	bne.w	800bd78 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b9aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9ae:	f003 0310 	and.w	r3, r3, #16
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	f000 81e0 	beq.w	800bd78 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b9b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b9bc:	f003 0310 	and.w	r3, r3, #16
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	f000 81d9 	beq.w	800bd78 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	2210      	movs	r2, #16
 800b9cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	689b      	ldr	r3, [r3, #8]
 800b9d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9d8:	2b40      	cmp	r3, #64	@ 0x40
 800b9da:	f040 8151 	bne.w	800bc80 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	4a96      	ldr	r2, [pc, #600]	@ (800bc40 <HAL_UART_IRQHandler+0x564>)
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d068      	beq.n	800babe <HAL_UART_IRQHandler+0x3e2>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4a93      	ldr	r2, [pc, #588]	@ (800bc44 <HAL_UART_IRQHandler+0x568>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d061      	beq.n	800babe <HAL_UART_IRQHandler+0x3e2>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4a91      	ldr	r2, [pc, #580]	@ (800bc48 <HAL_UART_IRQHandler+0x56c>)
 800ba04:	4293      	cmp	r3, r2
 800ba06:	d05a      	beq.n	800babe <HAL_UART_IRQHandler+0x3e2>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	4a8e      	ldr	r2, [pc, #568]	@ (800bc4c <HAL_UART_IRQHandler+0x570>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d053      	beq.n	800babe <HAL_UART_IRQHandler+0x3e2>
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	4a8c      	ldr	r2, [pc, #560]	@ (800bc50 <HAL_UART_IRQHandler+0x574>)
 800ba20:	4293      	cmp	r3, r2
 800ba22:	d04c      	beq.n	800babe <HAL_UART_IRQHandler+0x3e2>
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	4a89      	ldr	r2, [pc, #548]	@ (800bc54 <HAL_UART_IRQHandler+0x578>)
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d045      	beq.n	800babe <HAL_UART_IRQHandler+0x3e2>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4a87      	ldr	r2, [pc, #540]	@ (800bc58 <HAL_UART_IRQHandler+0x57c>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d03e      	beq.n	800babe <HAL_UART_IRQHandler+0x3e2>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	4a84      	ldr	r2, [pc, #528]	@ (800bc5c <HAL_UART_IRQHandler+0x580>)
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d037      	beq.n	800babe <HAL_UART_IRQHandler+0x3e2>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	4a82      	ldr	r2, [pc, #520]	@ (800bc60 <HAL_UART_IRQHandler+0x584>)
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	d030      	beq.n	800babe <HAL_UART_IRQHandler+0x3e2>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4a7f      	ldr	r2, [pc, #508]	@ (800bc64 <HAL_UART_IRQHandler+0x588>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d029      	beq.n	800babe <HAL_UART_IRQHandler+0x3e2>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	4a7d      	ldr	r2, [pc, #500]	@ (800bc68 <HAL_UART_IRQHandler+0x58c>)
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d022      	beq.n	800babe <HAL_UART_IRQHandler+0x3e2>
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	4a7a      	ldr	r2, [pc, #488]	@ (800bc6c <HAL_UART_IRQHandler+0x590>)
 800ba82:	4293      	cmp	r3, r2
 800ba84:	d01b      	beq.n	800babe <HAL_UART_IRQHandler+0x3e2>
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	4a78      	ldr	r2, [pc, #480]	@ (800bc70 <HAL_UART_IRQHandler+0x594>)
 800ba90:	4293      	cmp	r3, r2
 800ba92:	d014      	beq.n	800babe <HAL_UART_IRQHandler+0x3e2>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	4a75      	ldr	r2, [pc, #468]	@ (800bc74 <HAL_UART_IRQHandler+0x598>)
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d00d      	beq.n	800babe <HAL_UART_IRQHandler+0x3e2>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4a73      	ldr	r2, [pc, #460]	@ (800bc78 <HAL_UART_IRQHandler+0x59c>)
 800baac:	4293      	cmp	r3, r2
 800baae:	d006      	beq.n	800babe <HAL_UART_IRQHandler+0x3e2>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4a70      	ldr	r2, [pc, #448]	@ (800bc7c <HAL_UART_IRQHandler+0x5a0>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d106      	bne.n	800bacc <HAL_UART_IRQHandler+0x3f0>
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	685b      	ldr	r3, [r3, #4]
 800bac8:	b29b      	uxth	r3, r3
 800baca:	e005      	b.n	800bad8 <HAL_UART_IRQHandler+0x3fc>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	685b      	ldr	r3, [r3, #4]
 800bad6:	b29b      	uxth	r3, r3
 800bad8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800badc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	f000 81ab 	beq.w	800be3c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800baec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800baf0:	429a      	cmp	r2, r3
 800baf2:	f080 81a3 	bcs.w	800be3c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bafc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb06:	69db      	ldr	r3, [r3, #28]
 800bb08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb0c:	f000 8087 	beq.w	800bc1e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb18:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bb1c:	e853 3f00 	ldrex	r3, [r3]
 800bb20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800bb24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bb28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bb2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	461a      	mov	r2, r3
 800bb36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bb3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bb3e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb42:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800bb46:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bb4a:	e841 2300 	strex	r3, r2, [r1]
 800bb4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800bb52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d1da      	bne.n	800bb10 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	3308      	adds	r3, #8
 800bb60:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bb64:	e853 3f00 	ldrex	r3, [r3]
 800bb68:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bb6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bb6c:	f023 0301 	bic.w	r3, r3, #1
 800bb70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	3308      	adds	r3, #8
 800bb7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bb7e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bb82:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb84:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bb86:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bb8a:	e841 2300 	strex	r3, r2, [r1]
 800bb8e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bb90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d1e1      	bne.n	800bb5a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	3308      	adds	r3, #8
 800bb9c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bba0:	e853 3f00 	ldrex	r3, [r3]
 800bba4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bba6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bba8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bbac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	3308      	adds	r3, #8
 800bbb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bbba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bbbc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbbe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bbc0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bbc2:	e841 2300 	strex	r3, r2, [r1]
 800bbc6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bbc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d1e3      	bne.n	800bb96 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2220      	movs	r2, #32
 800bbd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbe4:	e853 3f00 	ldrex	r3, [r3]
 800bbe8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bbea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bbec:	f023 0310 	bic.w	r3, r3, #16
 800bbf0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bbfe:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bc00:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc02:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bc04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bc06:	e841 2300 	strex	r3, r2, [r1]
 800bc0a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bc0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d1e4      	bne.n	800bbdc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f7f8 f8e3 	bl	8003de4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2202      	movs	r2, #2
 800bc22:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bc30:	b29b      	uxth	r3, r3
 800bc32:	1ad3      	subs	r3, r2, r3
 800bc34:	b29b      	uxth	r3, r3
 800bc36:	4619      	mov	r1, r3
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f000 f91d 	bl	800be78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bc3e:	e0fd      	b.n	800be3c <HAL_UART_IRQHandler+0x760>
 800bc40:	40020010 	.word	0x40020010
 800bc44:	40020028 	.word	0x40020028
 800bc48:	40020040 	.word	0x40020040
 800bc4c:	40020058 	.word	0x40020058
 800bc50:	40020070 	.word	0x40020070
 800bc54:	40020088 	.word	0x40020088
 800bc58:	400200a0 	.word	0x400200a0
 800bc5c:	400200b8 	.word	0x400200b8
 800bc60:	40020410 	.word	0x40020410
 800bc64:	40020428 	.word	0x40020428
 800bc68:	40020440 	.word	0x40020440
 800bc6c:	40020458 	.word	0x40020458
 800bc70:	40020470 	.word	0x40020470
 800bc74:	40020488 	.word	0x40020488
 800bc78:	400204a0 	.word	0x400204a0
 800bc7c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	1ad3      	subs	r3, r2, r3
 800bc90:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bc9a:	b29b      	uxth	r3, r3
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	f000 80cf 	beq.w	800be40 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800bca2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	f000 80ca 	beq.w	800be40 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcb4:	e853 3f00 	ldrex	r3, [r3]
 800bcb8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bcba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bcc0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	461a      	mov	r2, r3
 800bcca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bcce:	647b      	str	r3, [r7, #68]	@ 0x44
 800bcd0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcd2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bcd4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bcd6:	e841 2300 	strex	r3, r2, [r1]
 800bcda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bcdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d1e4      	bne.n	800bcac <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	3308      	adds	r3, #8
 800bce8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcec:	e853 3f00 	ldrex	r3, [r3]
 800bcf0:	623b      	str	r3, [r7, #32]
   return(result);
 800bcf2:	6a3a      	ldr	r2, [r7, #32]
 800bcf4:	4b55      	ldr	r3, [pc, #340]	@ (800be4c <HAL_UART_IRQHandler+0x770>)
 800bcf6:	4013      	ands	r3, r2
 800bcf8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	3308      	adds	r3, #8
 800bd02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800bd06:	633a      	str	r2, [r7, #48]	@ 0x30
 800bd08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bd0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd0e:	e841 2300 	strex	r3, r2, [r1]
 800bd12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bd14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d1e3      	bne.n	800bce2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2220      	movs	r2, #32
 800bd1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2200      	movs	r2, #0
 800bd26:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	e853 3f00 	ldrex	r3, [r3]
 800bd3a:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	f023 0310 	bic.w	r3, r3, #16
 800bd42:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	461a      	mov	r2, r3
 800bd4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bd50:	61fb      	str	r3, [r7, #28]
 800bd52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd54:	69b9      	ldr	r1, [r7, #24]
 800bd56:	69fa      	ldr	r2, [r7, #28]
 800bd58:	e841 2300 	strex	r3, r2, [r1]
 800bd5c:	617b      	str	r3, [r7, #20]
   return(result);
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d1e4      	bne.n	800bd2e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2202      	movs	r2, #2
 800bd68:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bd6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bd6e:	4619      	mov	r1, r3
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f000 f881 	bl	800be78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bd76:	e063      	b.n	800be40 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bd78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d00e      	beq.n	800bda2 <HAL_UART_IRQHandler+0x6c6>
 800bd84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bd88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d008      	beq.n	800bda2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800bd98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f001 fe80 	bl	800daa0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bda0:	e051      	b.n	800be46 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bda2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bda6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d014      	beq.n	800bdd8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bdae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bdb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d105      	bne.n	800bdc6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bdba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bdbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d008      	beq.n	800bdd8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d03a      	beq.n	800be44 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	4798      	blx	r3
    }
    return;
 800bdd6:	e035      	b.n	800be44 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bdd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d009      	beq.n	800bdf8 <HAL_UART_IRQHandler+0x71c>
 800bde4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bde8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d003      	beq.n	800bdf8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f001 f90d 	bl	800d010 <UART_EndTransmit_IT>
    return;
 800bdf6:	e026      	b.n	800be46 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bdf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bdfc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800be00:	2b00      	cmp	r3, #0
 800be02:	d009      	beq.n	800be18 <HAL_UART_IRQHandler+0x73c>
 800be04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be08:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d003      	beq.n	800be18 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f001 fe59 	bl	800dac8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800be16:	e016      	b.n	800be46 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800be18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800be20:	2b00      	cmp	r3, #0
 800be22:	d010      	beq.n	800be46 <HAL_UART_IRQHandler+0x76a>
 800be24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be28:	2b00      	cmp	r3, #0
 800be2a:	da0c      	bge.n	800be46 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f001 fe41 	bl	800dab4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800be32:	e008      	b.n	800be46 <HAL_UART_IRQHandler+0x76a>
      return;
 800be34:	bf00      	nop
 800be36:	e006      	b.n	800be46 <HAL_UART_IRQHandler+0x76a>
    return;
 800be38:	bf00      	nop
 800be3a:	e004      	b.n	800be46 <HAL_UART_IRQHandler+0x76a>
      return;
 800be3c:	bf00      	nop
 800be3e:	e002      	b.n	800be46 <HAL_UART_IRQHandler+0x76a>
      return;
 800be40:	bf00      	nop
 800be42:	e000      	b.n	800be46 <HAL_UART_IRQHandler+0x76a>
    return;
 800be44:	bf00      	nop
  }
}
 800be46:	37e8      	adds	r7, #232	@ 0xe8
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}
 800be4c:	effffffe 	.word	0xeffffffe

0800be50 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800be50:	b480      	push	{r7}
 800be52:	b083      	sub	sp, #12
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800be58:	bf00      	nop
 800be5a:	370c      	adds	r7, #12
 800be5c:	46bd      	mov	sp, r7
 800be5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be62:	4770      	bx	lr

0800be64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800be64:	b480      	push	{r7}
 800be66:	b083      	sub	sp, #12
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800be6c:	bf00      	nop
 800be6e:	370c      	adds	r7, #12
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr

0800be78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800be78:	b480      	push	{r7}
 800be7a:	b083      	sub	sp, #12
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	460b      	mov	r3, r1
 800be82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800be84:	bf00      	nop
 800be86:	370c      	adds	r7, #12
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr

0800be90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800be94:	b092      	sub	sp, #72	@ 0x48
 800be96:	af00      	add	r7, sp, #0
 800be98:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800be9a:	2300      	movs	r3, #0
 800be9c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	689a      	ldr	r2, [r3, #8]
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	691b      	ldr	r3, [r3, #16]
 800bea8:	431a      	orrs	r2, r3
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	695b      	ldr	r3, [r3, #20]
 800beae:	431a      	orrs	r2, r3
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	69db      	ldr	r3, [r3, #28]
 800beb4:	4313      	orrs	r3, r2
 800beb6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	681a      	ldr	r2, [r3, #0]
 800bebe:	4bbe      	ldr	r3, [pc, #760]	@ (800c1b8 <UART_SetConfig+0x328>)
 800bec0:	4013      	ands	r3, r2
 800bec2:	697a      	ldr	r2, [r7, #20]
 800bec4:	6812      	ldr	r2, [r2, #0]
 800bec6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bec8:	430b      	orrs	r3, r1
 800beca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	685b      	ldr	r3, [r3, #4]
 800bed2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	68da      	ldr	r2, [r3, #12]
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	430a      	orrs	r2, r1
 800bee0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	699b      	ldr	r3, [r3, #24]
 800bee6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	4ab3      	ldr	r2, [pc, #716]	@ (800c1bc <UART_SetConfig+0x32c>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	d004      	beq.n	800befc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	6a1b      	ldr	r3, [r3, #32]
 800bef6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bef8:	4313      	orrs	r3, r2
 800befa:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	689a      	ldr	r2, [r3, #8]
 800bf02:	4baf      	ldr	r3, [pc, #700]	@ (800c1c0 <UART_SetConfig+0x330>)
 800bf04:	4013      	ands	r3, r2
 800bf06:	697a      	ldr	r2, [r7, #20]
 800bf08:	6812      	ldr	r2, [r2, #0]
 800bf0a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bf0c:	430b      	orrs	r3, r1
 800bf0e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf16:	f023 010f 	bic.w	r1, r3, #15
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	430a      	orrs	r2, r1
 800bf24:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bf26:	697b      	ldr	r3, [r7, #20]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	4aa6      	ldr	r2, [pc, #664]	@ (800c1c4 <UART_SetConfig+0x334>)
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	d177      	bne.n	800c020 <UART_SetConfig+0x190>
 800bf30:	4ba5      	ldr	r3, [pc, #660]	@ (800c1c8 <UART_SetConfig+0x338>)
 800bf32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf34:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bf38:	2b28      	cmp	r3, #40	@ 0x28
 800bf3a:	d86d      	bhi.n	800c018 <UART_SetConfig+0x188>
 800bf3c:	a201      	add	r2, pc, #4	@ (adr r2, 800bf44 <UART_SetConfig+0xb4>)
 800bf3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf42:	bf00      	nop
 800bf44:	0800bfe9 	.word	0x0800bfe9
 800bf48:	0800c019 	.word	0x0800c019
 800bf4c:	0800c019 	.word	0x0800c019
 800bf50:	0800c019 	.word	0x0800c019
 800bf54:	0800c019 	.word	0x0800c019
 800bf58:	0800c019 	.word	0x0800c019
 800bf5c:	0800c019 	.word	0x0800c019
 800bf60:	0800c019 	.word	0x0800c019
 800bf64:	0800bff1 	.word	0x0800bff1
 800bf68:	0800c019 	.word	0x0800c019
 800bf6c:	0800c019 	.word	0x0800c019
 800bf70:	0800c019 	.word	0x0800c019
 800bf74:	0800c019 	.word	0x0800c019
 800bf78:	0800c019 	.word	0x0800c019
 800bf7c:	0800c019 	.word	0x0800c019
 800bf80:	0800c019 	.word	0x0800c019
 800bf84:	0800bff9 	.word	0x0800bff9
 800bf88:	0800c019 	.word	0x0800c019
 800bf8c:	0800c019 	.word	0x0800c019
 800bf90:	0800c019 	.word	0x0800c019
 800bf94:	0800c019 	.word	0x0800c019
 800bf98:	0800c019 	.word	0x0800c019
 800bf9c:	0800c019 	.word	0x0800c019
 800bfa0:	0800c019 	.word	0x0800c019
 800bfa4:	0800c001 	.word	0x0800c001
 800bfa8:	0800c019 	.word	0x0800c019
 800bfac:	0800c019 	.word	0x0800c019
 800bfb0:	0800c019 	.word	0x0800c019
 800bfb4:	0800c019 	.word	0x0800c019
 800bfb8:	0800c019 	.word	0x0800c019
 800bfbc:	0800c019 	.word	0x0800c019
 800bfc0:	0800c019 	.word	0x0800c019
 800bfc4:	0800c009 	.word	0x0800c009
 800bfc8:	0800c019 	.word	0x0800c019
 800bfcc:	0800c019 	.word	0x0800c019
 800bfd0:	0800c019 	.word	0x0800c019
 800bfd4:	0800c019 	.word	0x0800c019
 800bfd8:	0800c019 	.word	0x0800c019
 800bfdc:	0800c019 	.word	0x0800c019
 800bfe0:	0800c019 	.word	0x0800c019
 800bfe4:	0800c011 	.word	0x0800c011
 800bfe8:	2301      	movs	r3, #1
 800bfea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfee:	e222      	b.n	800c436 <UART_SetConfig+0x5a6>
 800bff0:	2304      	movs	r3, #4
 800bff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bff6:	e21e      	b.n	800c436 <UART_SetConfig+0x5a6>
 800bff8:	2308      	movs	r3, #8
 800bffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bffe:	e21a      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c000:	2310      	movs	r3, #16
 800c002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c006:	e216      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c008:	2320      	movs	r3, #32
 800c00a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c00e:	e212      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c010:	2340      	movs	r3, #64	@ 0x40
 800c012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c016:	e20e      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c018:	2380      	movs	r3, #128	@ 0x80
 800c01a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c01e:	e20a      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	4a69      	ldr	r2, [pc, #420]	@ (800c1cc <UART_SetConfig+0x33c>)
 800c026:	4293      	cmp	r3, r2
 800c028:	d130      	bne.n	800c08c <UART_SetConfig+0x1fc>
 800c02a:	4b67      	ldr	r3, [pc, #412]	@ (800c1c8 <UART_SetConfig+0x338>)
 800c02c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c02e:	f003 0307 	and.w	r3, r3, #7
 800c032:	2b05      	cmp	r3, #5
 800c034:	d826      	bhi.n	800c084 <UART_SetConfig+0x1f4>
 800c036:	a201      	add	r2, pc, #4	@ (adr r2, 800c03c <UART_SetConfig+0x1ac>)
 800c038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c03c:	0800c055 	.word	0x0800c055
 800c040:	0800c05d 	.word	0x0800c05d
 800c044:	0800c065 	.word	0x0800c065
 800c048:	0800c06d 	.word	0x0800c06d
 800c04c:	0800c075 	.word	0x0800c075
 800c050:	0800c07d 	.word	0x0800c07d
 800c054:	2300      	movs	r3, #0
 800c056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c05a:	e1ec      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c05c:	2304      	movs	r3, #4
 800c05e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c062:	e1e8      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c064:	2308      	movs	r3, #8
 800c066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c06a:	e1e4      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c06c:	2310      	movs	r3, #16
 800c06e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c072:	e1e0      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c074:	2320      	movs	r3, #32
 800c076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c07a:	e1dc      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c07c:	2340      	movs	r3, #64	@ 0x40
 800c07e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c082:	e1d8      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c084:	2380      	movs	r3, #128	@ 0x80
 800c086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c08a:	e1d4      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	4a4f      	ldr	r2, [pc, #316]	@ (800c1d0 <UART_SetConfig+0x340>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d130      	bne.n	800c0f8 <UART_SetConfig+0x268>
 800c096:	4b4c      	ldr	r3, [pc, #304]	@ (800c1c8 <UART_SetConfig+0x338>)
 800c098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c09a:	f003 0307 	and.w	r3, r3, #7
 800c09e:	2b05      	cmp	r3, #5
 800c0a0:	d826      	bhi.n	800c0f0 <UART_SetConfig+0x260>
 800c0a2:	a201      	add	r2, pc, #4	@ (adr r2, 800c0a8 <UART_SetConfig+0x218>)
 800c0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0a8:	0800c0c1 	.word	0x0800c0c1
 800c0ac:	0800c0c9 	.word	0x0800c0c9
 800c0b0:	0800c0d1 	.word	0x0800c0d1
 800c0b4:	0800c0d9 	.word	0x0800c0d9
 800c0b8:	0800c0e1 	.word	0x0800c0e1
 800c0bc:	0800c0e9 	.word	0x0800c0e9
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0c6:	e1b6      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c0c8:	2304      	movs	r3, #4
 800c0ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0ce:	e1b2      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c0d0:	2308      	movs	r3, #8
 800c0d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0d6:	e1ae      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c0d8:	2310      	movs	r3, #16
 800c0da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0de:	e1aa      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c0e0:	2320      	movs	r3, #32
 800c0e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0e6:	e1a6      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c0e8:	2340      	movs	r3, #64	@ 0x40
 800c0ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0ee:	e1a2      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c0f0:	2380      	movs	r3, #128	@ 0x80
 800c0f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0f6:	e19e      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	4a35      	ldr	r2, [pc, #212]	@ (800c1d4 <UART_SetConfig+0x344>)
 800c0fe:	4293      	cmp	r3, r2
 800c100:	d130      	bne.n	800c164 <UART_SetConfig+0x2d4>
 800c102:	4b31      	ldr	r3, [pc, #196]	@ (800c1c8 <UART_SetConfig+0x338>)
 800c104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c106:	f003 0307 	and.w	r3, r3, #7
 800c10a:	2b05      	cmp	r3, #5
 800c10c:	d826      	bhi.n	800c15c <UART_SetConfig+0x2cc>
 800c10e:	a201      	add	r2, pc, #4	@ (adr r2, 800c114 <UART_SetConfig+0x284>)
 800c110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c114:	0800c12d 	.word	0x0800c12d
 800c118:	0800c135 	.word	0x0800c135
 800c11c:	0800c13d 	.word	0x0800c13d
 800c120:	0800c145 	.word	0x0800c145
 800c124:	0800c14d 	.word	0x0800c14d
 800c128:	0800c155 	.word	0x0800c155
 800c12c:	2300      	movs	r3, #0
 800c12e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c132:	e180      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c134:	2304      	movs	r3, #4
 800c136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c13a:	e17c      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c13c:	2308      	movs	r3, #8
 800c13e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c142:	e178      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c144:	2310      	movs	r3, #16
 800c146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c14a:	e174      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c14c:	2320      	movs	r3, #32
 800c14e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c152:	e170      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c154:	2340      	movs	r3, #64	@ 0x40
 800c156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c15a:	e16c      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c15c:	2380      	movs	r3, #128	@ 0x80
 800c15e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c162:	e168      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	4a1b      	ldr	r2, [pc, #108]	@ (800c1d8 <UART_SetConfig+0x348>)
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d142      	bne.n	800c1f4 <UART_SetConfig+0x364>
 800c16e:	4b16      	ldr	r3, [pc, #88]	@ (800c1c8 <UART_SetConfig+0x338>)
 800c170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c172:	f003 0307 	and.w	r3, r3, #7
 800c176:	2b05      	cmp	r3, #5
 800c178:	d838      	bhi.n	800c1ec <UART_SetConfig+0x35c>
 800c17a:	a201      	add	r2, pc, #4	@ (adr r2, 800c180 <UART_SetConfig+0x2f0>)
 800c17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c180:	0800c199 	.word	0x0800c199
 800c184:	0800c1a1 	.word	0x0800c1a1
 800c188:	0800c1a9 	.word	0x0800c1a9
 800c18c:	0800c1b1 	.word	0x0800c1b1
 800c190:	0800c1dd 	.word	0x0800c1dd
 800c194:	0800c1e5 	.word	0x0800c1e5
 800c198:	2300      	movs	r3, #0
 800c19a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c19e:	e14a      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c1a0:	2304      	movs	r3, #4
 800c1a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1a6:	e146      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c1a8:	2308      	movs	r3, #8
 800c1aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1ae:	e142      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c1b0:	2310      	movs	r3, #16
 800c1b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1b6:	e13e      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c1b8:	cfff69f3 	.word	0xcfff69f3
 800c1bc:	58000c00 	.word	0x58000c00
 800c1c0:	11fff4ff 	.word	0x11fff4ff
 800c1c4:	40011000 	.word	0x40011000
 800c1c8:	58024400 	.word	0x58024400
 800c1cc:	40004400 	.word	0x40004400
 800c1d0:	40004800 	.word	0x40004800
 800c1d4:	40004c00 	.word	0x40004c00
 800c1d8:	40005000 	.word	0x40005000
 800c1dc:	2320      	movs	r3, #32
 800c1de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1e2:	e128      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c1e4:	2340      	movs	r3, #64	@ 0x40
 800c1e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1ea:	e124      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c1ec:	2380      	movs	r3, #128	@ 0x80
 800c1ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1f2:	e120      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	4acb      	ldr	r2, [pc, #812]	@ (800c528 <UART_SetConfig+0x698>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d176      	bne.n	800c2ec <UART_SetConfig+0x45c>
 800c1fe:	4bcb      	ldr	r3, [pc, #812]	@ (800c52c <UART_SetConfig+0x69c>)
 800c200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c202:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c206:	2b28      	cmp	r3, #40	@ 0x28
 800c208:	d86c      	bhi.n	800c2e4 <UART_SetConfig+0x454>
 800c20a:	a201      	add	r2, pc, #4	@ (adr r2, 800c210 <UART_SetConfig+0x380>)
 800c20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c210:	0800c2b5 	.word	0x0800c2b5
 800c214:	0800c2e5 	.word	0x0800c2e5
 800c218:	0800c2e5 	.word	0x0800c2e5
 800c21c:	0800c2e5 	.word	0x0800c2e5
 800c220:	0800c2e5 	.word	0x0800c2e5
 800c224:	0800c2e5 	.word	0x0800c2e5
 800c228:	0800c2e5 	.word	0x0800c2e5
 800c22c:	0800c2e5 	.word	0x0800c2e5
 800c230:	0800c2bd 	.word	0x0800c2bd
 800c234:	0800c2e5 	.word	0x0800c2e5
 800c238:	0800c2e5 	.word	0x0800c2e5
 800c23c:	0800c2e5 	.word	0x0800c2e5
 800c240:	0800c2e5 	.word	0x0800c2e5
 800c244:	0800c2e5 	.word	0x0800c2e5
 800c248:	0800c2e5 	.word	0x0800c2e5
 800c24c:	0800c2e5 	.word	0x0800c2e5
 800c250:	0800c2c5 	.word	0x0800c2c5
 800c254:	0800c2e5 	.word	0x0800c2e5
 800c258:	0800c2e5 	.word	0x0800c2e5
 800c25c:	0800c2e5 	.word	0x0800c2e5
 800c260:	0800c2e5 	.word	0x0800c2e5
 800c264:	0800c2e5 	.word	0x0800c2e5
 800c268:	0800c2e5 	.word	0x0800c2e5
 800c26c:	0800c2e5 	.word	0x0800c2e5
 800c270:	0800c2cd 	.word	0x0800c2cd
 800c274:	0800c2e5 	.word	0x0800c2e5
 800c278:	0800c2e5 	.word	0x0800c2e5
 800c27c:	0800c2e5 	.word	0x0800c2e5
 800c280:	0800c2e5 	.word	0x0800c2e5
 800c284:	0800c2e5 	.word	0x0800c2e5
 800c288:	0800c2e5 	.word	0x0800c2e5
 800c28c:	0800c2e5 	.word	0x0800c2e5
 800c290:	0800c2d5 	.word	0x0800c2d5
 800c294:	0800c2e5 	.word	0x0800c2e5
 800c298:	0800c2e5 	.word	0x0800c2e5
 800c29c:	0800c2e5 	.word	0x0800c2e5
 800c2a0:	0800c2e5 	.word	0x0800c2e5
 800c2a4:	0800c2e5 	.word	0x0800c2e5
 800c2a8:	0800c2e5 	.word	0x0800c2e5
 800c2ac:	0800c2e5 	.word	0x0800c2e5
 800c2b0:	0800c2dd 	.word	0x0800c2dd
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ba:	e0bc      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c2bc:	2304      	movs	r3, #4
 800c2be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2c2:	e0b8      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c2c4:	2308      	movs	r3, #8
 800c2c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ca:	e0b4      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c2cc:	2310      	movs	r3, #16
 800c2ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2d2:	e0b0      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c2d4:	2320      	movs	r3, #32
 800c2d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2da:	e0ac      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c2dc:	2340      	movs	r3, #64	@ 0x40
 800c2de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2e2:	e0a8      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c2e4:	2380      	movs	r3, #128	@ 0x80
 800c2e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ea:	e0a4      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	4a8f      	ldr	r2, [pc, #572]	@ (800c530 <UART_SetConfig+0x6a0>)
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	d130      	bne.n	800c358 <UART_SetConfig+0x4c8>
 800c2f6:	4b8d      	ldr	r3, [pc, #564]	@ (800c52c <UART_SetConfig+0x69c>)
 800c2f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2fa:	f003 0307 	and.w	r3, r3, #7
 800c2fe:	2b05      	cmp	r3, #5
 800c300:	d826      	bhi.n	800c350 <UART_SetConfig+0x4c0>
 800c302:	a201      	add	r2, pc, #4	@ (adr r2, 800c308 <UART_SetConfig+0x478>)
 800c304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c308:	0800c321 	.word	0x0800c321
 800c30c:	0800c329 	.word	0x0800c329
 800c310:	0800c331 	.word	0x0800c331
 800c314:	0800c339 	.word	0x0800c339
 800c318:	0800c341 	.word	0x0800c341
 800c31c:	0800c349 	.word	0x0800c349
 800c320:	2300      	movs	r3, #0
 800c322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c326:	e086      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c328:	2304      	movs	r3, #4
 800c32a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c32e:	e082      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c330:	2308      	movs	r3, #8
 800c332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c336:	e07e      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c338:	2310      	movs	r3, #16
 800c33a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c33e:	e07a      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c340:	2320      	movs	r3, #32
 800c342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c346:	e076      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c348:	2340      	movs	r3, #64	@ 0x40
 800c34a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c34e:	e072      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c350:	2380      	movs	r3, #128	@ 0x80
 800c352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c356:	e06e      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	4a75      	ldr	r2, [pc, #468]	@ (800c534 <UART_SetConfig+0x6a4>)
 800c35e:	4293      	cmp	r3, r2
 800c360:	d130      	bne.n	800c3c4 <UART_SetConfig+0x534>
 800c362:	4b72      	ldr	r3, [pc, #456]	@ (800c52c <UART_SetConfig+0x69c>)
 800c364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c366:	f003 0307 	and.w	r3, r3, #7
 800c36a:	2b05      	cmp	r3, #5
 800c36c:	d826      	bhi.n	800c3bc <UART_SetConfig+0x52c>
 800c36e:	a201      	add	r2, pc, #4	@ (adr r2, 800c374 <UART_SetConfig+0x4e4>)
 800c370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c374:	0800c38d 	.word	0x0800c38d
 800c378:	0800c395 	.word	0x0800c395
 800c37c:	0800c39d 	.word	0x0800c39d
 800c380:	0800c3a5 	.word	0x0800c3a5
 800c384:	0800c3ad 	.word	0x0800c3ad
 800c388:	0800c3b5 	.word	0x0800c3b5
 800c38c:	2300      	movs	r3, #0
 800c38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c392:	e050      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c394:	2304      	movs	r3, #4
 800c396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c39a:	e04c      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c39c:	2308      	movs	r3, #8
 800c39e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3a2:	e048      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c3a4:	2310      	movs	r3, #16
 800c3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3aa:	e044      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c3ac:	2320      	movs	r3, #32
 800c3ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3b2:	e040      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c3b4:	2340      	movs	r3, #64	@ 0x40
 800c3b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3ba:	e03c      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c3bc:	2380      	movs	r3, #128	@ 0x80
 800c3be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3c2:	e038      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c3c4:	697b      	ldr	r3, [r7, #20]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4a5b      	ldr	r2, [pc, #364]	@ (800c538 <UART_SetConfig+0x6a8>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d130      	bne.n	800c430 <UART_SetConfig+0x5a0>
 800c3ce:	4b57      	ldr	r3, [pc, #348]	@ (800c52c <UART_SetConfig+0x69c>)
 800c3d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c3d2:	f003 0307 	and.w	r3, r3, #7
 800c3d6:	2b05      	cmp	r3, #5
 800c3d8:	d826      	bhi.n	800c428 <UART_SetConfig+0x598>
 800c3da:	a201      	add	r2, pc, #4	@ (adr r2, 800c3e0 <UART_SetConfig+0x550>)
 800c3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3e0:	0800c3f9 	.word	0x0800c3f9
 800c3e4:	0800c401 	.word	0x0800c401
 800c3e8:	0800c409 	.word	0x0800c409
 800c3ec:	0800c411 	.word	0x0800c411
 800c3f0:	0800c419 	.word	0x0800c419
 800c3f4:	0800c421 	.word	0x0800c421
 800c3f8:	2302      	movs	r3, #2
 800c3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3fe:	e01a      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c400:	2304      	movs	r3, #4
 800c402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c406:	e016      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c408:	2308      	movs	r3, #8
 800c40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c40e:	e012      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c410:	2310      	movs	r3, #16
 800c412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c416:	e00e      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c418:	2320      	movs	r3, #32
 800c41a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c41e:	e00a      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c420:	2340      	movs	r3, #64	@ 0x40
 800c422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c426:	e006      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c428:	2380      	movs	r3, #128	@ 0x80
 800c42a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c42e:	e002      	b.n	800c436 <UART_SetConfig+0x5a6>
 800c430:	2380      	movs	r3, #128	@ 0x80
 800c432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4a3f      	ldr	r2, [pc, #252]	@ (800c538 <UART_SetConfig+0x6a8>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	f040 80f8 	bne.w	800c632 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c442:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c446:	2b20      	cmp	r3, #32
 800c448:	dc46      	bgt.n	800c4d8 <UART_SetConfig+0x648>
 800c44a:	2b02      	cmp	r3, #2
 800c44c:	f2c0 8082 	blt.w	800c554 <UART_SetConfig+0x6c4>
 800c450:	3b02      	subs	r3, #2
 800c452:	2b1e      	cmp	r3, #30
 800c454:	d87e      	bhi.n	800c554 <UART_SetConfig+0x6c4>
 800c456:	a201      	add	r2, pc, #4	@ (adr r2, 800c45c <UART_SetConfig+0x5cc>)
 800c458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c45c:	0800c4df 	.word	0x0800c4df
 800c460:	0800c555 	.word	0x0800c555
 800c464:	0800c4e7 	.word	0x0800c4e7
 800c468:	0800c555 	.word	0x0800c555
 800c46c:	0800c555 	.word	0x0800c555
 800c470:	0800c555 	.word	0x0800c555
 800c474:	0800c4f7 	.word	0x0800c4f7
 800c478:	0800c555 	.word	0x0800c555
 800c47c:	0800c555 	.word	0x0800c555
 800c480:	0800c555 	.word	0x0800c555
 800c484:	0800c555 	.word	0x0800c555
 800c488:	0800c555 	.word	0x0800c555
 800c48c:	0800c555 	.word	0x0800c555
 800c490:	0800c555 	.word	0x0800c555
 800c494:	0800c507 	.word	0x0800c507
 800c498:	0800c555 	.word	0x0800c555
 800c49c:	0800c555 	.word	0x0800c555
 800c4a0:	0800c555 	.word	0x0800c555
 800c4a4:	0800c555 	.word	0x0800c555
 800c4a8:	0800c555 	.word	0x0800c555
 800c4ac:	0800c555 	.word	0x0800c555
 800c4b0:	0800c555 	.word	0x0800c555
 800c4b4:	0800c555 	.word	0x0800c555
 800c4b8:	0800c555 	.word	0x0800c555
 800c4bc:	0800c555 	.word	0x0800c555
 800c4c0:	0800c555 	.word	0x0800c555
 800c4c4:	0800c555 	.word	0x0800c555
 800c4c8:	0800c555 	.word	0x0800c555
 800c4cc:	0800c555 	.word	0x0800c555
 800c4d0:	0800c555 	.word	0x0800c555
 800c4d4:	0800c547 	.word	0x0800c547
 800c4d8:	2b40      	cmp	r3, #64	@ 0x40
 800c4da:	d037      	beq.n	800c54c <UART_SetConfig+0x6bc>
 800c4dc:	e03a      	b.n	800c554 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c4de:	f7fd f973 	bl	80097c8 <HAL_RCCEx_GetD3PCLK1Freq>
 800c4e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c4e4:	e03c      	b.n	800c560 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7fd f982 	bl	80097f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c4f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4f4:	e034      	b.n	800c560 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4f6:	f107 0318 	add.w	r3, r7, #24
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f7fd face 	bl	8009a9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c500:	69fb      	ldr	r3, [r7, #28]
 800c502:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c504:	e02c      	b.n	800c560 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c506:	4b09      	ldr	r3, [pc, #36]	@ (800c52c <UART_SetConfig+0x69c>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f003 0320 	and.w	r3, r3, #32
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d016      	beq.n	800c540 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c512:	4b06      	ldr	r3, [pc, #24]	@ (800c52c <UART_SetConfig+0x69c>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	08db      	lsrs	r3, r3, #3
 800c518:	f003 0303 	and.w	r3, r3, #3
 800c51c:	4a07      	ldr	r2, [pc, #28]	@ (800c53c <UART_SetConfig+0x6ac>)
 800c51e:	fa22 f303 	lsr.w	r3, r2, r3
 800c522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c524:	e01c      	b.n	800c560 <UART_SetConfig+0x6d0>
 800c526:	bf00      	nop
 800c528:	40011400 	.word	0x40011400
 800c52c:	58024400 	.word	0x58024400
 800c530:	40007800 	.word	0x40007800
 800c534:	40007c00 	.word	0x40007c00
 800c538:	58000c00 	.word	0x58000c00
 800c53c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c540:	4b9d      	ldr	r3, [pc, #628]	@ (800c7b8 <UART_SetConfig+0x928>)
 800c542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c544:	e00c      	b.n	800c560 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c546:	4b9d      	ldr	r3, [pc, #628]	@ (800c7bc <UART_SetConfig+0x92c>)
 800c548:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c54a:	e009      	b.n	800c560 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c54c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c550:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c552:	e005      	b.n	800c560 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c554:	2300      	movs	r3, #0
 800c556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c558:	2301      	movs	r3, #1
 800c55a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c55e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c560:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c562:	2b00      	cmp	r3, #0
 800c564:	f000 81de 	beq.w	800c924 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c56c:	4a94      	ldr	r2, [pc, #592]	@ (800c7c0 <UART_SetConfig+0x930>)
 800c56e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c572:	461a      	mov	r2, r3
 800c574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c576:	fbb3 f3f2 	udiv	r3, r3, r2
 800c57a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	685a      	ldr	r2, [r3, #4]
 800c580:	4613      	mov	r3, r2
 800c582:	005b      	lsls	r3, r3, #1
 800c584:	4413      	add	r3, r2
 800c586:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c588:	429a      	cmp	r2, r3
 800c58a:	d305      	bcc.n	800c598 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	685b      	ldr	r3, [r3, #4]
 800c590:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c592:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c594:	429a      	cmp	r2, r3
 800c596:	d903      	bls.n	800c5a0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c598:	2301      	movs	r3, #1
 800c59a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c59e:	e1c1      	b.n	800c924 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c5a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	60bb      	str	r3, [r7, #8]
 800c5a6:	60fa      	str	r2, [r7, #12]
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5ac:	4a84      	ldr	r2, [pc, #528]	@ (800c7c0 <UART_SetConfig+0x930>)
 800c5ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c5b2:	b29b      	uxth	r3, r3
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	603b      	str	r3, [r7, #0]
 800c5b8:	607a      	str	r2, [r7, #4]
 800c5ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c5c2:	f7f4 f8a1 	bl	8000708 <__aeabi_uldivmod>
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	460b      	mov	r3, r1
 800c5ca:	4610      	mov	r0, r2
 800c5cc:	4619      	mov	r1, r3
 800c5ce:	f04f 0200 	mov.w	r2, #0
 800c5d2:	f04f 0300 	mov.w	r3, #0
 800c5d6:	020b      	lsls	r3, r1, #8
 800c5d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c5dc:	0202      	lsls	r2, r0, #8
 800c5de:	6979      	ldr	r1, [r7, #20]
 800c5e0:	6849      	ldr	r1, [r1, #4]
 800c5e2:	0849      	lsrs	r1, r1, #1
 800c5e4:	2000      	movs	r0, #0
 800c5e6:	460c      	mov	r4, r1
 800c5e8:	4605      	mov	r5, r0
 800c5ea:	eb12 0804 	adds.w	r8, r2, r4
 800c5ee:	eb43 0905 	adc.w	r9, r3, r5
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	685b      	ldr	r3, [r3, #4]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	469a      	mov	sl, r3
 800c5fa:	4693      	mov	fp, r2
 800c5fc:	4652      	mov	r2, sl
 800c5fe:	465b      	mov	r3, fp
 800c600:	4640      	mov	r0, r8
 800c602:	4649      	mov	r1, r9
 800c604:	f7f4 f880 	bl	8000708 <__aeabi_uldivmod>
 800c608:	4602      	mov	r2, r0
 800c60a:	460b      	mov	r3, r1
 800c60c:	4613      	mov	r3, r2
 800c60e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c612:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c616:	d308      	bcc.n	800c62a <UART_SetConfig+0x79a>
 800c618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c61a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c61e:	d204      	bcs.n	800c62a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c626:	60da      	str	r2, [r3, #12]
 800c628:	e17c      	b.n	800c924 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c62a:	2301      	movs	r3, #1
 800c62c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c630:	e178      	b.n	800c924 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	69db      	ldr	r3, [r3, #28]
 800c636:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c63a:	f040 80c5 	bne.w	800c7c8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c63e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c642:	2b20      	cmp	r3, #32
 800c644:	dc48      	bgt.n	800c6d8 <UART_SetConfig+0x848>
 800c646:	2b00      	cmp	r3, #0
 800c648:	db7b      	blt.n	800c742 <UART_SetConfig+0x8b2>
 800c64a:	2b20      	cmp	r3, #32
 800c64c:	d879      	bhi.n	800c742 <UART_SetConfig+0x8b2>
 800c64e:	a201      	add	r2, pc, #4	@ (adr r2, 800c654 <UART_SetConfig+0x7c4>)
 800c650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c654:	0800c6df 	.word	0x0800c6df
 800c658:	0800c6e7 	.word	0x0800c6e7
 800c65c:	0800c743 	.word	0x0800c743
 800c660:	0800c743 	.word	0x0800c743
 800c664:	0800c6ef 	.word	0x0800c6ef
 800c668:	0800c743 	.word	0x0800c743
 800c66c:	0800c743 	.word	0x0800c743
 800c670:	0800c743 	.word	0x0800c743
 800c674:	0800c6ff 	.word	0x0800c6ff
 800c678:	0800c743 	.word	0x0800c743
 800c67c:	0800c743 	.word	0x0800c743
 800c680:	0800c743 	.word	0x0800c743
 800c684:	0800c743 	.word	0x0800c743
 800c688:	0800c743 	.word	0x0800c743
 800c68c:	0800c743 	.word	0x0800c743
 800c690:	0800c743 	.word	0x0800c743
 800c694:	0800c70f 	.word	0x0800c70f
 800c698:	0800c743 	.word	0x0800c743
 800c69c:	0800c743 	.word	0x0800c743
 800c6a0:	0800c743 	.word	0x0800c743
 800c6a4:	0800c743 	.word	0x0800c743
 800c6a8:	0800c743 	.word	0x0800c743
 800c6ac:	0800c743 	.word	0x0800c743
 800c6b0:	0800c743 	.word	0x0800c743
 800c6b4:	0800c743 	.word	0x0800c743
 800c6b8:	0800c743 	.word	0x0800c743
 800c6bc:	0800c743 	.word	0x0800c743
 800c6c0:	0800c743 	.word	0x0800c743
 800c6c4:	0800c743 	.word	0x0800c743
 800c6c8:	0800c743 	.word	0x0800c743
 800c6cc:	0800c743 	.word	0x0800c743
 800c6d0:	0800c743 	.word	0x0800c743
 800c6d4:	0800c735 	.word	0x0800c735
 800c6d8:	2b40      	cmp	r3, #64	@ 0x40
 800c6da:	d02e      	beq.n	800c73a <UART_SetConfig+0x8aa>
 800c6dc:	e031      	b.n	800c742 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c6de:	f7fb f8bd 	bl	800785c <HAL_RCC_GetPCLK1Freq>
 800c6e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c6e4:	e033      	b.n	800c74e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c6e6:	f7fb f8cf 	bl	8007888 <HAL_RCC_GetPCLK2Freq>
 800c6ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c6ec:	e02f      	b.n	800c74e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f7fd f87e 	bl	80097f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c6f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6fc:	e027      	b.n	800c74e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6fe:	f107 0318 	add.w	r3, r7, #24
 800c702:	4618      	mov	r0, r3
 800c704:	f7fd f9ca 	bl	8009a9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c708:	69fb      	ldr	r3, [r7, #28]
 800c70a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c70c:	e01f      	b.n	800c74e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c70e:	4b2d      	ldr	r3, [pc, #180]	@ (800c7c4 <UART_SetConfig+0x934>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f003 0320 	and.w	r3, r3, #32
 800c716:	2b00      	cmp	r3, #0
 800c718:	d009      	beq.n	800c72e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c71a:	4b2a      	ldr	r3, [pc, #168]	@ (800c7c4 <UART_SetConfig+0x934>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	08db      	lsrs	r3, r3, #3
 800c720:	f003 0303 	and.w	r3, r3, #3
 800c724:	4a24      	ldr	r2, [pc, #144]	@ (800c7b8 <UART_SetConfig+0x928>)
 800c726:	fa22 f303 	lsr.w	r3, r2, r3
 800c72a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c72c:	e00f      	b.n	800c74e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c72e:	4b22      	ldr	r3, [pc, #136]	@ (800c7b8 <UART_SetConfig+0x928>)
 800c730:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c732:	e00c      	b.n	800c74e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c734:	4b21      	ldr	r3, [pc, #132]	@ (800c7bc <UART_SetConfig+0x92c>)
 800c736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c738:	e009      	b.n	800c74e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c73a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c73e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c740:	e005      	b.n	800c74e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c742:	2300      	movs	r3, #0
 800c744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c746:	2301      	movs	r3, #1
 800c748:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c74c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c74e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c750:	2b00      	cmp	r3, #0
 800c752:	f000 80e7 	beq.w	800c924 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c75a:	4a19      	ldr	r2, [pc, #100]	@ (800c7c0 <UART_SetConfig+0x930>)
 800c75c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c760:	461a      	mov	r2, r3
 800c762:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c764:	fbb3 f3f2 	udiv	r3, r3, r2
 800c768:	005a      	lsls	r2, r3, #1
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	685b      	ldr	r3, [r3, #4]
 800c76e:	085b      	lsrs	r3, r3, #1
 800c770:	441a      	add	r2, r3
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	fbb2 f3f3 	udiv	r3, r2, r3
 800c77a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c77c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c77e:	2b0f      	cmp	r3, #15
 800c780:	d916      	bls.n	800c7b0 <UART_SetConfig+0x920>
 800c782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c784:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c788:	d212      	bcs.n	800c7b0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c78a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c78c:	b29b      	uxth	r3, r3
 800c78e:	f023 030f 	bic.w	r3, r3, #15
 800c792:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c796:	085b      	lsrs	r3, r3, #1
 800c798:	b29b      	uxth	r3, r3
 800c79a:	f003 0307 	and.w	r3, r3, #7
 800c79e:	b29a      	uxth	r2, r3
 800c7a0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c7a2:	4313      	orrs	r3, r2
 800c7a4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c7ac:	60da      	str	r2, [r3, #12]
 800c7ae:	e0b9      	b.n	800c924 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c7b6:	e0b5      	b.n	800c924 <UART_SetConfig+0xa94>
 800c7b8:	03d09000 	.word	0x03d09000
 800c7bc:	003d0900 	.word	0x003d0900
 800c7c0:	08012818 	.word	0x08012818
 800c7c4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c7c8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c7cc:	2b20      	cmp	r3, #32
 800c7ce:	dc49      	bgt.n	800c864 <UART_SetConfig+0x9d4>
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	db7c      	blt.n	800c8ce <UART_SetConfig+0xa3e>
 800c7d4:	2b20      	cmp	r3, #32
 800c7d6:	d87a      	bhi.n	800c8ce <UART_SetConfig+0xa3e>
 800c7d8:	a201      	add	r2, pc, #4	@ (adr r2, 800c7e0 <UART_SetConfig+0x950>)
 800c7da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7de:	bf00      	nop
 800c7e0:	0800c86b 	.word	0x0800c86b
 800c7e4:	0800c873 	.word	0x0800c873
 800c7e8:	0800c8cf 	.word	0x0800c8cf
 800c7ec:	0800c8cf 	.word	0x0800c8cf
 800c7f0:	0800c87b 	.word	0x0800c87b
 800c7f4:	0800c8cf 	.word	0x0800c8cf
 800c7f8:	0800c8cf 	.word	0x0800c8cf
 800c7fc:	0800c8cf 	.word	0x0800c8cf
 800c800:	0800c88b 	.word	0x0800c88b
 800c804:	0800c8cf 	.word	0x0800c8cf
 800c808:	0800c8cf 	.word	0x0800c8cf
 800c80c:	0800c8cf 	.word	0x0800c8cf
 800c810:	0800c8cf 	.word	0x0800c8cf
 800c814:	0800c8cf 	.word	0x0800c8cf
 800c818:	0800c8cf 	.word	0x0800c8cf
 800c81c:	0800c8cf 	.word	0x0800c8cf
 800c820:	0800c89b 	.word	0x0800c89b
 800c824:	0800c8cf 	.word	0x0800c8cf
 800c828:	0800c8cf 	.word	0x0800c8cf
 800c82c:	0800c8cf 	.word	0x0800c8cf
 800c830:	0800c8cf 	.word	0x0800c8cf
 800c834:	0800c8cf 	.word	0x0800c8cf
 800c838:	0800c8cf 	.word	0x0800c8cf
 800c83c:	0800c8cf 	.word	0x0800c8cf
 800c840:	0800c8cf 	.word	0x0800c8cf
 800c844:	0800c8cf 	.word	0x0800c8cf
 800c848:	0800c8cf 	.word	0x0800c8cf
 800c84c:	0800c8cf 	.word	0x0800c8cf
 800c850:	0800c8cf 	.word	0x0800c8cf
 800c854:	0800c8cf 	.word	0x0800c8cf
 800c858:	0800c8cf 	.word	0x0800c8cf
 800c85c:	0800c8cf 	.word	0x0800c8cf
 800c860:	0800c8c1 	.word	0x0800c8c1
 800c864:	2b40      	cmp	r3, #64	@ 0x40
 800c866:	d02e      	beq.n	800c8c6 <UART_SetConfig+0xa36>
 800c868:	e031      	b.n	800c8ce <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c86a:	f7fa fff7 	bl	800785c <HAL_RCC_GetPCLK1Freq>
 800c86e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c870:	e033      	b.n	800c8da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c872:	f7fb f809 	bl	8007888 <HAL_RCC_GetPCLK2Freq>
 800c876:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c878:	e02f      	b.n	800c8da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c87a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c87e:	4618      	mov	r0, r3
 800c880:	f7fc ffb8 	bl	80097f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c888:	e027      	b.n	800c8da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c88a:	f107 0318 	add.w	r3, r7, #24
 800c88e:	4618      	mov	r0, r3
 800c890:	f7fd f904 	bl	8009a9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c894:	69fb      	ldr	r3, [r7, #28]
 800c896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c898:	e01f      	b.n	800c8da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c89a:	4b2d      	ldr	r3, [pc, #180]	@ (800c950 <UART_SetConfig+0xac0>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f003 0320 	and.w	r3, r3, #32
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d009      	beq.n	800c8ba <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c8a6:	4b2a      	ldr	r3, [pc, #168]	@ (800c950 <UART_SetConfig+0xac0>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	08db      	lsrs	r3, r3, #3
 800c8ac:	f003 0303 	and.w	r3, r3, #3
 800c8b0:	4a28      	ldr	r2, [pc, #160]	@ (800c954 <UART_SetConfig+0xac4>)
 800c8b2:	fa22 f303 	lsr.w	r3, r2, r3
 800c8b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c8b8:	e00f      	b.n	800c8da <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c8ba:	4b26      	ldr	r3, [pc, #152]	@ (800c954 <UART_SetConfig+0xac4>)
 800c8bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8be:	e00c      	b.n	800c8da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c8c0:	4b25      	ldr	r3, [pc, #148]	@ (800c958 <UART_SetConfig+0xac8>)
 800c8c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8c4:	e009      	b.n	800c8da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c8c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c8ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8cc:	e005      	b.n	800c8da <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c8d8:	bf00      	nop
    }

    if (pclk != 0U)
 800c8da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d021      	beq.n	800c924 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8e4:	4a1d      	ldr	r2, [pc, #116]	@ (800c95c <UART_SetConfig+0xacc>)
 800c8e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8ee:	fbb3 f2f2 	udiv	r2, r3, r2
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	685b      	ldr	r3, [r3, #4]
 800c8f6:	085b      	lsrs	r3, r3, #1
 800c8f8:	441a      	add	r2, r3
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	685b      	ldr	r3, [r3, #4]
 800c8fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800c902:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c906:	2b0f      	cmp	r3, #15
 800c908:	d909      	bls.n	800c91e <UART_SetConfig+0xa8e>
 800c90a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c90c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c910:	d205      	bcs.n	800c91e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c914:	b29a      	uxth	r2, r3
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	60da      	str	r2, [r3, #12]
 800c91c:	e002      	b.n	800c924 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c91e:	2301      	movs	r3, #1
 800c920:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	2201      	movs	r2, #1
 800c928:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	2201      	movs	r2, #1
 800c930:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	2200      	movs	r2, #0
 800c938:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	2200      	movs	r2, #0
 800c93e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c940:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c944:	4618      	mov	r0, r3
 800c946:	3748      	adds	r7, #72	@ 0x48
 800c948:	46bd      	mov	sp, r7
 800c94a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c94e:	bf00      	nop
 800c950:	58024400 	.word	0x58024400
 800c954:	03d09000 	.word	0x03d09000
 800c958:	003d0900 	.word	0x003d0900
 800c95c:	08012818 	.word	0x08012818

0800c960 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c960:	b480      	push	{r7}
 800c962:	b083      	sub	sp, #12
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c96c:	f003 0308 	and.w	r3, r3, #8
 800c970:	2b00      	cmp	r3, #0
 800c972:	d00a      	beq.n	800c98a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	685b      	ldr	r3, [r3, #4]
 800c97a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	430a      	orrs	r2, r1
 800c988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c98e:	f003 0301 	and.w	r3, r3, #1
 800c992:	2b00      	cmp	r3, #0
 800c994:	d00a      	beq.n	800c9ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	685b      	ldr	r3, [r3, #4]
 800c99c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	430a      	orrs	r2, r1
 800c9aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9b0:	f003 0302 	and.w	r3, r3, #2
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d00a      	beq.n	800c9ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	685b      	ldr	r3, [r3, #4]
 800c9be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	430a      	orrs	r2, r1
 800c9cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9d2:	f003 0304 	and.w	r3, r3, #4
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d00a      	beq.n	800c9f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	430a      	orrs	r2, r1
 800c9ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9f4:	f003 0310 	and.w	r3, r3, #16
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d00a      	beq.n	800ca12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	689b      	ldr	r3, [r3, #8]
 800ca02:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	430a      	orrs	r2, r1
 800ca10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca16:	f003 0320 	and.w	r3, r3, #32
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d00a      	beq.n	800ca34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	689b      	ldr	r3, [r3, #8]
 800ca24:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	430a      	orrs	r2, r1
 800ca32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d01a      	beq.n	800ca76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	685b      	ldr	r3, [r3, #4]
 800ca46:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	430a      	orrs	r2, r1
 800ca54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ca5e:	d10a      	bne.n	800ca76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	685b      	ldr	r3, [r3, #4]
 800ca66:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	430a      	orrs	r2, r1
 800ca74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d00a      	beq.n	800ca98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	685b      	ldr	r3, [r3, #4]
 800ca88:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	430a      	orrs	r2, r1
 800ca96:	605a      	str	r2, [r3, #4]
  }
}
 800ca98:	bf00      	nop
 800ca9a:	370c      	adds	r7, #12
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa2:	4770      	bx	lr

0800caa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b098      	sub	sp, #96	@ 0x60
 800caa8:	af02      	add	r7, sp, #8
 800caaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2200      	movs	r2, #0
 800cab0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cab4:	f7f5 f9a8 	bl	8001e08 <HAL_GetTick>
 800cab8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	f003 0308 	and.w	r3, r3, #8
 800cac4:	2b08      	cmp	r3, #8
 800cac6:	d12f      	bne.n	800cb28 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cac8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cacc:	9300      	str	r3, [sp, #0]
 800cace:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cad0:	2200      	movs	r2, #0
 800cad2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f000 f88e 	bl	800cbf8 <UART_WaitOnFlagUntilTimeout>
 800cadc:	4603      	mov	r3, r0
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d022      	beq.n	800cb28 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caea:	e853 3f00 	ldrex	r3, [r3]
 800caee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800caf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caf2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800caf6:	653b      	str	r3, [r7, #80]	@ 0x50
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	461a      	mov	r2, r3
 800cafe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb00:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb02:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cb06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb08:	e841 2300 	strex	r3, r2, [r1]
 800cb0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cb0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d1e6      	bne.n	800cae2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2220      	movs	r2, #32
 800cb18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cb24:	2303      	movs	r3, #3
 800cb26:	e063      	b.n	800cbf0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	f003 0304 	and.w	r3, r3, #4
 800cb32:	2b04      	cmp	r3, #4
 800cb34:	d149      	bne.n	800cbca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb36:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cb3a:	9300      	str	r3, [sp, #0]
 800cb3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb3e:	2200      	movs	r2, #0
 800cb40:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f000 f857 	bl	800cbf8 <UART_WaitOnFlagUntilTimeout>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d03c      	beq.n	800cbca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb58:	e853 3f00 	ldrex	r3, [r3]
 800cb5c:	623b      	str	r3, [r7, #32]
   return(result);
 800cb5e:	6a3b      	ldr	r3, [r7, #32]
 800cb60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cb64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	461a      	mov	r2, r3
 800cb6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb6e:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb70:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cb74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb76:	e841 2300 	strex	r3, r2, [r1]
 800cb7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cb7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d1e6      	bne.n	800cb50 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	3308      	adds	r3, #8
 800cb88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	e853 3f00 	ldrex	r3, [r3]
 800cb90:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	f023 0301 	bic.w	r3, r3, #1
 800cb98:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	3308      	adds	r3, #8
 800cba0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cba2:	61fa      	str	r2, [r7, #28]
 800cba4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cba6:	69b9      	ldr	r1, [r7, #24]
 800cba8:	69fa      	ldr	r2, [r7, #28]
 800cbaa:	e841 2300 	strex	r3, r2, [r1]
 800cbae:	617b      	str	r3, [r7, #20]
   return(result);
 800cbb0:	697b      	ldr	r3, [r7, #20]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d1e5      	bne.n	800cb82 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2220      	movs	r2, #32
 800cbba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cbc6:	2303      	movs	r3, #3
 800cbc8:	e012      	b.n	800cbf0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2220      	movs	r2, #32
 800cbce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2220      	movs	r2, #32
 800cbd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cbee:	2300      	movs	r3, #0
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3758      	adds	r7, #88	@ 0x58
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}

0800cbf8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b084      	sub	sp, #16
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	60f8      	str	r0, [r7, #12]
 800cc00:	60b9      	str	r1, [r7, #8]
 800cc02:	603b      	str	r3, [r7, #0]
 800cc04:	4613      	mov	r3, r2
 800cc06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc08:	e04f      	b.n	800ccaa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cc0a:	69bb      	ldr	r3, [r7, #24]
 800cc0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc10:	d04b      	beq.n	800ccaa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cc12:	f7f5 f8f9 	bl	8001e08 <HAL_GetTick>
 800cc16:	4602      	mov	r2, r0
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	1ad3      	subs	r3, r2, r3
 800cc1c:	69ba      	ldr	r2, [r7, #24]
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d302      	bcc.n	800cc28 <UART_WaitOnFlagUntilTimeout+0x30>
 800cc22:	69bb      	ldr	r3, [r7, #24]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d101      	bne.n	800cc2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cc28:	2303      	movs	r3, #3
 800cc2a:	e04e      	b.n	800ccca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f003 0304 	and.w	r3, r3, #4
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d037      	beq.n	800ccaa <UART_WaitOnFlagUntilTimeout+0xb2>
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	2b80      	cmp	r3, #128	@ 0x80
 800cc3e:	d034      	beq.n	800ccaa <UART_WaitOnFlagUntilTimeout+0xb2>
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	2b40      	cmp	r3, #64	@ 0x40
 800cc44:	d031      	beq.n	800ccaa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	69db      	ldr	r3, [r3, #28]
 800cc4c:	f003 0308 	and.w	r3, r3, #8
 800cc50:	2b08      	cmp	r3, #8
 800cc52:	d110      	bne.n	800cc76 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	2208      	movs	r2, #8
 800cc5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cc5c:	68f8      	ldr	r0, [r7, #12]
 800cc5e:	f000 f95b 	bl	800cf18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	2208      	movs	r2, #8
 800cc66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800cc72:	2301      	movs	r3, #1
 800cc74:	e029      	b.n	800ccca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	69db      	ldr	r3, [r3, #28]
 800cc7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cc80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cc84:	d111      	bne.n	800ccaa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cc8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cc90:	68f8      	ldr	r0, [r7, #12]
 800cc92:	f000 f941 	bl	800cf18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	2220      	movs	r2, #32
 800cc9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	2200      	movs	r2, #0
 800cca2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800cca6:	2303      	movs	r3, #3
 800cca8:	e00f      	b.n	800ccca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	69da      	ldr	r2, [r3, #28]
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	4013      	ands	r3, r2
 800ccb4:	68ba      	ldr	r2, [r7, #8]
 800ccb6:	429a      	cmp	r2, r3
 800ccb8:	bf0c      	ite	eq
 800ccba:	2301      	moveq	r3, #1
 800ccbc:	2300      	movne	r3, #0
 800ccbe:	b2db      	uxtb	r3, r3
 800ccc0:	461a      	mov	r2, r3
 800ccc2:	79fb      	ldrb	r3, [r7, #7]
 800ccc4:	429a      	cmp	r2, r3
 800ccc6:	d0a0      	beq.n	800cc0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ccc8:	2300      	movs	r3, #0
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3710      	adds	r7, #16
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}
	...

0800ccd4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b0a3      	sub	sp, #140	@ 0x8c
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	60f8      	str	r0, [r7, #12]
 800ccdc:	60b9      	str	r1, [r7, #8]
 800ccde:	4613      	mov	r3, r2
 800cce0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	68ba      	ldr	r2, [r7, #8]
 800cce6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	88fa      	ldrh	r2, [r7, #6]
 800ccec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	88fa      	ldrh	r2, [r7, #6]
 800ccf4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	689b      	ldr	r3, [r3, #8]
 800cd02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd06:	d10e      	bne.n	800cd26 <UART_Start_Receive_IT+0x52>
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	691b      	ldr	r3, [r3, #16]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d105      	bne.n	800cd1c <UART_Start_Receive_IT+0x48>
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800cd16:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cd1a:	e02d      	b.n	800cd78 <UART_Start_Receive_IT+0xa4>
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	22ff      	movs	r2, #255	@ 0xff
 800cd20:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cd24:	e028      	b.n	800cd78 <UART_Start_Receive_IT+0xa4>
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	689b      	ldr	r3, [r3, #8]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d10d      	bne.n	800cd4a <UART_Start_Receive_IT+0x76>
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	691b      	ldr	r3, [r3, #16]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d104      	bne.n	800cd40 <UART_Start_Receive_IT+0x6c>
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	22ff      	movs	r2, #255	@ 0xff
 800cd3a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cd3e:	e01b      	b.n	800cd78 <UART_Start_Receive_IT+0xa4>
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	227f      	movs	r2, #127	@ 0x7f
 800cd44:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cd48:	e016      	b.n	800cd78 <UART_Start_Receive_IT+0xa4>
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	689b      	ldr	r3, [r3, #8]
 800cd4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd52:	d10d      	bne.n	800cd70 <UART_Start_Receive_IT+0x9c>
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	691b      	ldr	r3, [r3, #16]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d104      	bne.n	800cd66 <UART_Start_Receive_IT+0x92>
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	227f      	movs	r2, #127	@ 0x7f
 800cd60:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cd64:	e008      	b.n	800cd78 <UART_Start_Receive_IT+0xa4>
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	223f      	movs	r2, #63	@ 0x3f
 800cd6a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cd6e:	e003      	b.n	800cd78 <UART_Start_Receive_IT+0xa4>
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	2200      	movs	r2, #0
 800cd74:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	2222      	movs	r2, #34	@ 0x22
 800cd84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	3308      	adds	r3, #8
 800cd8e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cd92:	e853 3f00 	ldrex	r3, [r3]
 800cd96:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800cd98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cd9a:	f043 0301 	orr.w	r3, r3, #1
 800cd9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	3308      	adds	r3, #8
 800cda8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800cdac:	673a      	str	r2, [r7, #112]	@ 0x70
 800cdae:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdb0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800cdb2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800cdb4:	e841 2300 	strex	r3, r2, [r1]
 800cdb8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800cdba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d1e3      	bne.n	800cd88 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cdc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cdc8:	d14f      	bne.n	800ce6a <UART_Start_Receive_IT+0x196>
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cdd0:	88fa      	ldrh	r2, [r7, #6]
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	d349      	bcc.n	800ce6a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	689b      	ldr	r3, [r3, #8]
 800cdda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cdde:	d107      	bne.n	800cdf0 <UART_Start_Receive_IT+0x11c>
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	691b      	ldr	r3, [r3, #16]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d103      	bne.n	800cdf0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	4a47      	ldr	r2, [pc, #284]	@ (800cf08 <UART_Start_Receive_IT+0x234>)
 800cdec:	675a      	str	r2, [r3, #116]	@ 0x74
 800cdee:	e002      	b.n	800cdf6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	4a46      	ldr	r2, [pc, #280]	@ (800cf0c <UART_Start_Receive_IT+0x238>)
 800cdf4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	691b      	ldr	r3, [r3, #16]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d01a      	beq.n	800ce34 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce06:	e853 3f00 	ldrex	r3, [r3]
 800ce0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ce0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ce12:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	461a      	mov	r2, r3
 800ce1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ce20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ce22:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce24:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ce26:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ce28:	e841 2300 	strex	r3, r2, [r1]
 800ce2c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800ce2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d1e4      	bne.n	800cdfe <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	3308      	adds	r3, #8
 800ce3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce3e:	e853 3f00 	ldrex	r3, [r3]
 800ce42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ce44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ce4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	3308      	adds	r3, #8
 800ce52:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ce54:	64ba      	str	r2, [r7, #72]	@ 0x48
 800ce56:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce58:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ce5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ce5c:	e841 2300 	strex	r3, r2, [r1]
 800ce60:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ce62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d1e5      	bne.n	800ce34 <UART_Start_Receive_IT+0x160>
 800ce68:	e046      	b.n	800cef8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	689b      	ldr	r3, [r3, #8]
 800ce6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ce72:	d107      	bne.n	800ce84 <UART_Start_Receive_IT+0x1b0>
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	691b      	ldr	r3, [r3, #16]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d103      	bne.n	800ce84 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	4a24      	ldr	r2, [pc, #144]	@ (800cf10 <UART_Start_Receive_IT+0x23c>)
 800ce80:	675a      	str	r2, [r3, #116]	@ 0x74
 800ce82:	e002      	b.n	800ce8a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	4a23      	ldr	r2, [pc, #140]	@ (800cf14 <UART_Start_Receive_IT+0x240>)
 800ce88:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	691b      	ldr	r3, [r3, #16]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d019      	beq.n	800cec6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce9a:	e853 3f00 	ldrex	r3, [r3]
 800ce9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cea2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800cea6:	677b      	str	r3, [r7, #116]	@ 0x74
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	461a      	mov	r2, r3
 800ceae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ceb0:	637b      	str	r3, [r7, #52]	@ 0x34
 800ceb2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceb4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ceb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ceb8:	e841 2300 	strex	r3, r2, [r1]
 800cebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800cebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d1e6      	bne.n	800ce92 <UART_Start_Receive_IT+0x1be>
 800cec4:	e018      	b.n	800cef8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	e853 3f00 	ldrex	r3, [r3]
 800ced2:	613b      	str	r3, [r7, #16]
   return(result);
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	f043 0320 	orr.w	r3, r3, #32
 800ceda:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	461a      	mov	r2, r3
 800cee2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cee4:	623b      	str	r3, [r7, #32]
 800cee6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cee8:	69f9      	ldr	r1, [r7, #28]
 800ceea:	6a3a      	ldr	r2, [r7, #32]
 800ceec:	e841 2300 	strex	r3, r2, [r1]
 800cef0:	61bb      	str	r3, [r7, #24]
   return(result);
 800cef2:	69bb      	ldr	r3, [r7, #24]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d1e6      	bne.n	800cec6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800cef8:	2300      	movs	r3, #0
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	378c      	adds	r7, #140	@ 0x8c
 800cefe:	46bd      	mov	sp, r7
 800cf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf04:	4770      	bx	lr
 800cf06:	bf00      	nop
 800cf08:	0800d739 	.word	0x0800d739
 800cf0c:	0800d3d9 	.word	0x0800d3d9
 800cf10:	0800d221 	.word	0x0800d221
 800cf14:	0800d069 	.word	0x0800d069

0800cf18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cf18:	b480      	push	{r7}
 800cf1a:	b095      	sub	sp, #84	@ 0x54
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf28:	e853 3f00 	ldrex	r3, [r3]
 800cf2c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cf2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cf34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	461a      	mov	r2, r3
 800cf3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf3e:	643b      	str	r3, [r7, #64]	@ 0x40
 800cf40:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cf44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cf46:	e841 2300 	strex	r3, r2, [r1]
 800cf4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cf4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d1e6      	bne.n	800cf20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	3308      	adds	r3, #8
 800cf58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf5a:	6a3b      	ldr	r3, [r7, #32]
 800cf5c:	e853 3f00 	ldrex	r3, [r3]
 800cf60:	61fb      	str	r3, [r7, #28]
   return(result);
 800cf62:	69fa      	ldr	r2, [r7, #28]
 800cf64:	4b1e      	ldr	r3, [pc, #120]	@ (800cfe0 <UART_EndRxTransfer+0xc8>)
 800cf66:	4013      	ands	r3, r2
 800cf68:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	3308      	adds	r3, #8
 800cf70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cf72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cf74:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cf78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cf7a:	e841 2300 	strex	r3, r2, [r1]
 800cf7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cf80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d1e5      	bne.n	800cf52 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf8a:	2b01      	cmp	r3, #1
 800cf8c:	d118      	bne.n	800cfc0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	e853 3f00 	ldrex	r3, [r3]
 800cf9a:	60bb      	str	r3, [r7, #8]
   return(result);
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	f023 0310 	bic.w	r3, r3, #16
 800cfa2:	647b      	str	r3, [r7, #68]	@ 0x44
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	461a      	mov	r2, r3
 800cfaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cfac:	61bb      	str	r3, [r7, #24]
 800cfae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfb0:	6979      	ldr	r1, [r7, #20]
 800cfb2:	69ba      	ldr	r2, [r7, #24]
 800cfb4:	e841 2300 	strex	r3, r2, [r1]
 800cfb8:	613b      	str	r3, [r7, #16]
   return(result);
 800cfba:	693b      	ldr	r3, [r7, #16]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d1e6      	bne.n	800cf8e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2220      	movs	r2, #32
 800cfc4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2200      	movs	r2, #0
 800cfcc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cfd4:	bf00      	nop
 800cfd6:	3754      	adds	r7, #84	@ 0x54
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfde:	4770      	bx	lr
 800cfe0:	effffffe 	.word	0xeffffffe

0800cfe4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b084      	sub	sp, #16
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cff0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	2200      	movs	r2, #0
 800cff6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	2200      	movs	r2, #0
 800cffe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d002:	68f8      	ldr	r0, [r7, #12]
 800d004:	f7fe ff2e 	bl	800be64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d008:	bf00      	nop
 800d00a:	3710      	adds	r7, #16
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}

0800d010 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b088      	sub	sp, #32
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	e853 3f00 	ldrex	r3, [r3]
 800d024:	60bb      	str	r3, [r7, #8]
   return(result);
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d02c:	61fb      	str	r3, [r7, #28]
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	461a      	mov	r2, r3
 800d034:	69fb      	ldr	r3, [r7, #28]
 800d036:	61bb      	str	r3, [r7, #24]
 800d038:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d03a:	6979      	ldr	r1, [r7, #20]
 800d03c:	69ba      	ldr	r2, [r7, #24]
 800d03e:	e841 2300 	strex	r3, r2, [r1]
 800d042:	613b      	str	r3, [r7, #16]
   return(result);
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d1e6      	bne.n	800d018 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2220      	movs	r2, #32
 800d04e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2200      	movs	r2, #0
 800d056:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f7fe fef9 	bl	800be50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d05e:	bf00      	nop
 800d060:	3720      	adds	r7, #32
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}
	...

0800d068 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b09c      	sub	sp, #112	@ 0x70
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d076:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d080:	2b22      	cmp	r3, #34	@ 0x22
 800d082:	f040 80be 	bne.w	800d202 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d08c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d090:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d094:	b2d9      	uxtb	r1, r3
 800d096:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d09a:	b2da      	uxtb	r2, r3
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0a0:	400a      	ands	r2, r1
 800d0a2:	b2d2      	uxtb	r2, r2
 800d0a4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0aa:	1c5a      	adds	r2, r3, #1
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d0b6:	b29b      	uxth	r3, r3
 800d0b8:	3b01      	subs	r3, #1
 800d0ba:	b29a      	uxth	r2, r3
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d0c8:	b29b      	uxth	r3, r3
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	f040 80a1 	bne.w	800d212 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d0d8:	e853 3f00 	ldrex	r3, [r3]
 800d0dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d0de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d0e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d0e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	461a      	mov	r2, r3
 800d0ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d0ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d0f0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d0f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d0f6:	e841 2300 	strex	r3, r2, [r1]
 800d0fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d0fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d1e6      	bne.n	800d0d0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	3308      	adds	r3, #8
 800d108:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d10a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d10c:	e853 3f00 	ldrex	r3, [r3]
 800d110:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d114:	f023 0301 	bic.w	r3, r3, #1
 800d118:	667b      	str	r3, [r7, #100]	@ 0x64
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	3308      	adds	r3, #8
 800d120:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d122:	647a      	str	r2, [r7, #68]	@ 0x44
 800d124:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d126:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d128:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d12a:	e841 2300 	strex	r3, r2, [r1]
 800d12e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d130:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d132:	2b00      	cmp	r3, #0
 800d134:	d1e5      	bne.n	800d102 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2220      	movs	r2, #32
 800d13a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2200      	movs	r2, #0
 800d142:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2200      	movs	r2, #0
 800d148:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	4a33      	ldr	r2, [pc, #204]	@ (800d21c <UART_RxISR_8BIT+0x1b4>)
 800d150:	4293      	cmp	r3, r2
 800d152:	d01f      	beq.n	800d194 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	685b      	ldr	r3, [r3, #4]
 800d15a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d018      	beq.n	800d194 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d16a:	e853 3f00 	ldrex	r3, [r3]
 800d16e:	623b      	str	r3, [r7, #32]
   return(result);
 800d170:	6a3b      	ldr	r3, [r7, #32]
 800d172:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d176:	663b      	str	r3, [r7, #96]	@ 0x60
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	461a      	mov	r2, r3
 800d17e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d180:	633b      	str	r3, [r7, #48]	@ 0x30
 800d182:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d184:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d186:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d188:	e841 2300 	strex	r3, r2, [r1]
 800d18c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d18e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d190:	2b00      	cmp	r3, #0
 800d192:	d1e6      	bne.n	800d162 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d198:	2b01      	cmp	r3, #1
 800d19a:	d12e      	bne.n	800d1fa <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	e853 3f00 	ldrex	r3, [r3]
 800d1ae:	60fb      	str	r3, [r7, #12]
   return(result);
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	f023 0310 	bic.w	r3, r3, #16
 800d1b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	461a      	mov	r2, r3
 800d1be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d1c0:	61fb      	str	r3, [r7, #28]
 800d1c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1c4:	69b9      	ldr	r1, [r7, #24]
 800d1c6:	69fa      	ldr	r2, [r7, #28]
 800d1c8:	e841 2300 	strex	r3, r2, [r1]
 800d1cc:	617b      	str	r3, [r7, #20]
   return(result);
 800d1ce:	697b      	ldr	r3, [r7, #20]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d1e6      	bne.n	800d1a2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	69db      	ldr	r3, [r3, #28]
 800d1da:	f003 0310 	and.w	r3, r3, #16
 800d1de:	2b10      	cmp	r3, #16
 800d1e0:	d103      	bne.n	800d1ea <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	2210      	movs	r2, #16
 800d1e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d1f0:	4619      	mov	r1, r3
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	f7fe fe40 	bl	800be78 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d1f8:	e00b      	b.n	800d212 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f7f4 f8c6 	bl	800138c <HAL_UART_RxCpltCallback>
}
 800d200:	e007      	b.n	800d212 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	699a      	ldr	r2, [r3, #24]
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f042 0208 	orr.w	r2, r2, #8
 800d210:	619a      	str	r2, [r3, #24]
}
 800d212:	bf00      	nop
 800d214:	3770      	adds	r7, #112	@ 0x70
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}
 800d21a:	bf00      	nop
 800d21c:	58000c00 	.word	0x58000c00

0800d220 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b09c      	sub	sp, #112	@ 0x70
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d22e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d238:	2b22      	cmp	r3, #34	@ 0x22
 800d23a:	f040 80be 	bne.w	800d3ba <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d244:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d24c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800d24e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800d252:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d256:	4013      	ands	r3, r2
 800d258:	b29a      	uxth	r2, r3
 800d25a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d25c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d262:	1c9a      	adds	r2, r3, #2
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d26e:	b29b      	uxth	r3, r3
 800d270:	3b01      	subs	r3, #1
 800d272:	b29a      	uxth	r2, r3
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d280:	b29b      	uxth	r3, r3
 800d282:	2b00      	cmp	r3, #0
 800d284:	f040 80a1 	bne.w	800d3ca <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d28e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d290:	e853 3f00 	ldrex	r3, [r3]
 800d294:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d296:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d298:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d29c:	667b      	str	r3, [r7, #100]	@ 0x64
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	461a      	mov	r2, r3
 800d2a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d2a6:	657b      	str	r3, [r7, #84]	@ 0x54
 800d2a8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2aa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d2ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d2ae:	e841 2300 	strex	r3, r2, [r1]
 800d2b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d2b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d1e6      	bne.n	800d288 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	3308      	adds	r3, #8
 800d2c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2c4:	e853 3f00 	ldrex	r3, [r3]
 800d2c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2cc:	f023 0301 	bic.w	r3, r3, #1
 800d2d0:	663b      	str	r3, [r7, #96]	@ 0x60
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	3308      	adds	r3, #8
 800d2d8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d2da:	643a      	str	r2, [r7, #64]	@ 0x40
 800d2dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d2e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d2e2:	e841 2300 	strex	r3, r2, [r1]
 800d2e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d2e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d1e5      	bne.n	800d2ba <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	2220      	movs	r2, #32
 800d2f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2200      	movs	r2, #0
 800d300:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	4a33      	ldr	r2, [pc, #204]	@ (800d3d4 <UART_RxISR_16BIT+0x1b4>)
 800d308:	4293      	cmp	r3, r2
 800d30a:	d01f      	beq.n	800d34c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	685b      	ldr	r3, [r3, #4]
 800d312:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d316:	2b00      	cmp	r3, #0
 800d318:	d018      	beq.n	800d34c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d320:	6a3b      	ldr	r3, [r7, #32]
 800d322:	e853 3f00 	ldrex	r3, [r3]
 800d326:	61fb      	str	r3, [r7, #28]
   return(result);
 800d328:	69fb      	ldr	r3, [r7, #28]
 800d32a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d32e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	461a      	mov	r2, r3
 800d336:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d338:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d33a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d33c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d33e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d340:	e841 2300 	strex	r3, r2, [r1]
 800d344:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d1e6      	bne.n	800d31a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d350:	2b01      	cmp	r3, #1
 800d352:	d12e      	bne.n	800d3b2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2200      	movs	r2, #0
 800d358:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	e853 3f00 	ldrex	r3, [r3]
 800d366:	60bb      	str	r3, [r7, #8]
   return(result);
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	f023 0310 	bic.w	r3, r3, #16
 800d36e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	461a      	mov	r2, r3
 800d376:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d378:	61bb      	str	r3, [r7, #24]
 800d37a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d37c:	6979      	ldr	r1, [r7, #20]
 800d37e:	69ba      	ldr	r2, [r7, #24]
 800d380:	e841 2300 	strex	r3, r2, [r1]
 800d384:	613b      	str	r3, [r7, #16]
   return(result);
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d1e6      	bne.n	800d35a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	69db      	ldr	r3, [r3, #28]
 800d392:	f003 0310 	and.w	r3, r3, #16
 800d396:	2b10      	cmp	r3, #16
 800d398:	d103      	bne.n	800d3a2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	2210      	movs	r2, #16
 800d3a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d3a8:	4619      	mov	r1, r3
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f7fe fd64 	bl	800be78 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d3b0:	e00b      	b.n	800d3ca <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f7f3 ffea 	bl	800138c <HAL_UART_RxCpltCallback>
}
 800d3b8:	e007      	b.n	800d3ca <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	699a      	ldr	r2, [r3, #24]
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	f042 0208 	orr.w	r2, r2, #8
 800d3c8:	619a      	str	r2, [r3, #24]
}
 800d3ca:	bf00      	nop
 800d3cc:	3770      	adds	r7, #112	@ 0x70
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}
 800d3d2:	bf00      	nop
 800d3d4:	58000c00 	.word	0x58000c00

0800d3d8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b0ac      	sub	sp, #176	@ 0xb0
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d3e6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	69db      	ldr	r3, [r3, #28]
 800d3f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	689b      	ldr	r3, [r3, #8]
 800d404:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d40e:	2b22      	cmp	r3, #34	@ 0x22
 800d410:	f040 8180 	bne.w	800d714 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d41a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d41e:	e123      	b.n	800d668 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d426:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d42a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800d42e:	b2d9      	uxtb	r1, r3
 800d430:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800d434:	b2da      	uxtb	r2, r3
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d43a:	400a      	ands	r2, r1
 800d43c:	b2d2      	uxtb	r2, r2
 800d43e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d444:	1c5a      	adds	r2, r3, #1
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d450:	b29b      	uxth	r3, r3
 800d452:	3b01      	subs	r3, #1
 800d454:	b29a      	uxth	r2, r3
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	69db      	ldr	r3, [r3, #28]
 800d462:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d466:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d46a:	f003 0307 	and.w	r3, r3, #7
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d053      	beq.n	800d51a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d472:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d476:	f003 0301 	and.w	r3, r3, #1
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d011      	beq.n	800d4a2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800d47e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d486:	2b00      	cmp	r3, #0
 800d488:	d00b      	beq.n	800d4a2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	2201      	movs	r2, #1
 800d490:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d498:	f043 0201 	orr.w	r2, r3, #1
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d4a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d4a6:	f003 0302 	and.w	r3, r3, #2
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d011      	beq.n	800d4d2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800d4ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d4b2:	f003 0301 	and.w	r3, r3, #1
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d00b      	beq.n	800d4d2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	2202      	movs	r2, #2
 800d4c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d4c8:	f043 0204 	orr.w	r2, r3, #4
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d4d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d4d6:	f003 0304 	and.w	r3, r3, #4
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d011      	beq.n	800d502 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800d4de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d4e2:	f003 0301 	and.w	r3, r3, #1
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d00b      	beq.n	800d502 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	2204      	movs	r2, #4
 800d4f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d4f8:	f043 0202 	orr.w	r2, r3, #2
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d006      	beq.n	800d51a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f7fe fca9 	bl	800be64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2200      	movs	r2, #0
 800d516:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d520:	b29b      	uxth	r3, r3
 800d522:	2b00      	cmp	r3, #0
 800d524:	f040 80a0 	bne.w	800d668 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d52e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d530:	e853 3f00 	ldrex	r3, [r3]
 800d534:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800d536:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d538:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d53c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	461a      	mov	r2, r3
 800d546:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d54a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d54c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d54e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800d550:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d552:	e841 2300 	strex	r3, r2, [r1]
 800d556:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800d558:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d1e4      	bne.n	800d528 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	3308      	adds	r3, #8
 800d564:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d566:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d568:	e853 3f00 	ldrex	r3, [r3]
 800d56c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800d56e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d570:	4b6e      	ldr	r3, [pc, #440]	@ (800d72c <UART_RxISR_8BIT_FIFOEN+0x354>)
 800d572:	4013      	ands	r3, r2
 800d574:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	3308      	adds	r3, #8
 800d57e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d582:	66ba      	str	r2, [r7, #104]	@ 0x68
 800d584:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d586:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800d588:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d58a:	e841 2300 	strex	r3, r2, [r1]
 800d58e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800d590:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d592:	2b00      	cmp	r3, #0
 800d594:	d1e3      	bne.n	800d55e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	2220      	movs	r2, #32
 800d59a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	4a60      	ldr	r2, [pc, #384]	@ (800d730 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	d021      	beq.n	800d5f8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	685b      	ldr	r3, [r3, #4]
 800d5ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d01a      	beq.n	800d5f8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d5ca:	e853 3f00 	ldrex	r3, [r3]
 800d5ce:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d5d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d5d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d5d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	461a      	mov	r2, r3
 800d5e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d5e4:	657b      	str	r3, [r7, #84]	@ 0x54
 800d5e6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5e8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d5ea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d5ec:	e841 2300 	strex	r3, r2, [r1]
 800d5f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d5f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d1e4      	bne.n	800d5c2 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d5fc:	2b01      	cmp	r3, #1
 800d5fe:	d130      	bne.n	800d662 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2200      	movs	r2, #0
 800d604:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d60c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d60e:	e853 3f00 	ldrex	r3, [r3]
 800d612:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d616:	f023 0310 	bic.w	r3, r3, #16
 800d61a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	461a      	mov	r2, r3
 800d624:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d628:	643b      	str	r3, [r7, #64]	@ 0x40
 800d62a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d62c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d62e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d630:	e841 2300 	strex	r3, r2, [r1]
 800d634:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d1e4      	bne.n	800d606 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	69db      	ldr	r3, [r3, #28]
 800d642:	f003 0310 	and.w	r3, r3, #16
 800d646:	2b10      	cmp	r3, #16
 800d648:	d103      	bne.n	800d652 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	2210      	movs	r2, #16
 800d650:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d658:	4619      	mov	r1, r3
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f7fe fc0c 	bl	800be78 <HAL_UARTEx_RxEventCallback>
 800d660:	e002      	b.n	800d668 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f7f3 fe92 	bl	800138c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d668:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d006      	beq.n	800d67e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800d670:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d674:	f003 0320 	and.w	r3, r3, #32
 800d678:	2b00      	cmp	r3, #0
 800d67a:	f47f aed1 	bne.w	800d420 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d684:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d688:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d049      	beq.n	800d724 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d696:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800d69a:	429a      	cmp	r2, r3
 800d69c:	d242      	bcs.n	800d724 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	3308      	adds	r3, #8
 800d6a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6a6:	6a3b      	ldr	r3, [r7, #32]
 800d6a8:	e853 3f00 	ldrex	r3, [r3]
 800d6ac:	61fb      	str	r3, [r7, #28]
   return(result);
 800d6ae:	69fb      	ldr	r3, [r7, #28]
 800d6b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d6b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	3308      	adds	r3, #8
 800d6be:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d6c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d6c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d6c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d6ca:	e841 2300 	strex	r3, r2, [r1]
 800d6ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d1e3      	bne.n	800d69e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	4a16      	ldr	r2, [pc, #88]	@ (800d734 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800d6da:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	e853 3f00 	ldrex	r3, [r3]
 800d6e8:	60bb      	str	r3, [r7, #8]
   return(result);
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	f043 0320 	orr.w	r3, r3, #32
 800d6f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	461a      	mov	r2, r3
 800d6fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d6fe:	61bb      	str	r3, [r7, #24]
 800d700:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d702:	6979      	ldr	r1, [r7, #20]
 800d704:	69ba      	ldr	r2, [r7, #24]
 800d706:	e841 2300 	strex	r3, r2, [r1]
 800d70a:	613b      	str	r3, [r7, #16]
   return(result);
 800d70c:	693b      	ldr	r3, [r7, #16]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d1e4      	bne.n	800d6dc <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d712:	e007      	b.n	800d724 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	699a      	ldr	r2, [r3, #24]
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	f042 0208 	orr.w	r2, r2, #8
 800d722:	619a      	str	r2, [r3, #24]
}
 800d724:	bf00      	nop
 800d726:	37b0      	adds	r7, #176	@ 0xb0
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}
 800d72c:	effffffe 	.word	0xeffffffe
 800d730:	58000c00 	.word	0x58000c00
 800d734:	0800d069 	.word	0x0800d069

0800d738 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b0ae      	sub	sp, #184	@ 0xb8
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d746:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	69db      	ldr	r3, [r3, #28]
 800d750:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	689b      	ldr	r3, [r3, #8]
 800d764:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d76e:	2b22      	cmp	r3, #34	@ 0x22
 800d770:	f040 8184 	bne.w	800da7c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d77a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d77e:	e127      	b.n	800d9d0 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d786:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d78e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800d792:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800d796:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800d79a:	4013      	ands	r3, r2
 800d79c:	b29a      	uxth	r2, r3
 800d79e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d7a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d7a8:	1c9a      	adds	r2, r3, #2
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d7b4:	b29b      	uxth	r3, r3
 800d7b6:	3b01      	subs	r3, #1
 800d7b8:	b29a      	uxth	r2, r3
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	69db      	ldr	r3, [r3, #28]
 800d7c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d7ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d7ce:	f003 0307 	and.w	r3, r3, #7
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d053      	beq.n	800d87e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d7d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d7da:	f003 0301 	and.w	r3, r3, #1
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d011      	beq.n	800d806 <UART_RxISR_16BIT_FIFOEN+0xce>
 800d7e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d7e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d00b      	beq.n	800d806 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	2201      	movs	r2, #1
 800d7f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d7fc:	f043 0201 	orr.w	r2, r3, #1
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d806:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d80a:	f003 0302 	and.w	r3, r3, #2
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d011      	beq.n	800d836 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800d812:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d816:	f003 0301 	and.w	r3, r3, #1
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d00b      	beq.n	800d836 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	2202      	movs	r2, #2
 800d824:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d82c:	f043 0204 	orr.w	r2, r3, #4
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d836:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d83a:	f003 0304 	and.w	r3, r3, #4
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d011      	beq.n	800d866 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800d842:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d846:	f003 0301 	and.w	r3, r3, #1
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d00b      	beq.n	800d866 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	2204      	movs	r2, #4
 800d854:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d85c:	f043 0202 	orr.w	r2, r3, #2
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d006      	beq.n	800d87e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	f7fe faf7 	bl	800be64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2200      	movs	r2, #0
 800d87a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d884:	b29b      	uxth	r3, r3
 800d886:	2b00      	cmp	r3, #0
 800d888:	f040 80a2 	bne.w	800d9d0 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d892:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d894:	e853 3f00 	ldrex	r3, [r3]
 800d898:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d89a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d89c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d8a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	461a      	mov	r2, r3
 800d8aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d8ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d8b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d8b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d8ba:	e841 2300 	strex	r3, r2, [r1]
 800d8be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d8c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d1e2      	bne.n	800d88c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	3308      	adds	r3, #8
 800d8cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d8d0:	e853 3f00 	ldrex	r3, [r3]
 800d8d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d8d6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d8d8:	4b6e      	ldr	r3, [pc, #440]	@ (800da94 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800d8da:	4013      	ands	r3, r2
 800d8dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	3308      	adds	r3, #8
 800d8e6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d8ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d8ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d8f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d8f2:	e841 2300 	strex	r3, r2, [r1]
 800d8f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d8f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d1e3      	bne.n	800d8c6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	2220      	movs	r2, #32
 800d902:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	2200      	movs	r2, #0
 800d90a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2200      	movs	r2, #0
 800d910:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	4a60      	ldr	r2, [pc, #384]	@ (800da98 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800d918:	4293      	cmp	r3, r2
 800d91a:	d021      	beq.n	800d960 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	685b      	ldr	r3, [r3, #4]
 800d922:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d926:	2b00      	cmp	r3, #0
 800d928:	d01a      	beq.n	800d960 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d930:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d932:	e853 3f00 	ldrex	r3, [r3]
 800d936:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d938:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d93a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d93e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	461a      	mov	r2, r3
 800d948:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d94c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d94e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d950:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d952:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d954:	e841 2300 	strex	r3, r2, [r1]
 800d958:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d95a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d1e4      	bne.n	800d92a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d964:	2b01      	cmp	r3, #1
 800d966:	d130      	bne.n	800d9ca <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2200      	movs	r2, #0
 800d96c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d976:	e853 3f00 	ldrex	r3, [r3]
 800d97a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d97c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d97e:	f023 0310 	bic.w	r3, r3, #16
 800d982:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	461a      	mov	r2, r3
 800d98c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d990:	647b      	str	r3, [r7, #68]	@ 0x44
 800d992:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d994:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d996:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d998:	e841 2300 	strex	r3, r2, [r1]
 800d99c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d99e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d1e4      	bne.n	800d96e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	69db      	ldr	r3, [r3, #28]
 800d9aa:	f003 0310 	and.w	r3, r3, #16
 800d9ae:	2b10      	cmp	r3, #16
 800d9b0:	d103      	bne.n	800d9ba <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	2210      	movs	r2, #16
 800d9b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d9c0:	4619      	mov	r1, r3
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f7fe fa58 	bl	800be78 <HAL_UARTEx_RxEventCallback>
 800d9c8:	e002      	b.n	800d9d0 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d9ca:	6878      	ldr	r0, [r7, #4]
 800d9cc:	f7f3 fcde 	bl	800138c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d9d0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d006      	beq.n	800d9e6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800d9d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d9dc:	f003 0320 	and.w	r3, r3, #32
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	f47f aecd 	bne.w	800d780 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d9ec:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d9f0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d049      	beq.n	800da8c <UART_RxISR_16BIT_FIFOEN+0x354>
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d9fe:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800da02:	429a      	cmp	r2, r3
 800da04:	d242      	bcs.n	800da8c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	3308      	adds	r3, #8
 800da0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da10:	e853 3f00 	ldrex	r3, [r3]
 800da14:	623b      	str	r3, [r7, #32]
   return(result);
 800da16:	6a3b      	ldr	r3, [r7, #32]
 800da18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800da1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	3308      	adds	r3, #8
 800da26:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800da2a:	633a      	str	r2, [r7, #48]	@ 0x30
 800da2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800da30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da32:	e841 2300 	strex	r3, r2, [r1]
 800da36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800da38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d1e3      	bne.n	800da06 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	4a16      	ldr	r2, [pc, #88]	@ (800da9c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800da42:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da4a:	693b      	ldr	r3, [r7, #16]
 800da4c:	e853 3f00 	ldrex	r3, [r3]
 800da50:	60fb      	str	r3, [r7, #12]
   return(result);
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	f043 0320 	orr.w	r3, r3, #32
 800da58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	461a      	mov	r2, r3
 800da62:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800da66:	61fb      	str	r3, [r7, #28]
 800da68:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da6a:	69b9      	ldr	r1, [r7, #24]
 800da6c:	69fa      	ldr	r2, [r7, #28]
 800da6e:	e841 2300 	strex	r3, r2, [r1]
 800da72:	617b      	str	r3, [r7, #20]
   return(result);
 800da74:	697b      	ldr	r3, [r7, #20]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d1e4      	bne.n	800da44 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800da7a:	e007      	b.n	800da8c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	699a      	ldr	r2, [r3, #24]
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	f042 0208 	orr.w	r2, r2, #8
 800da8a:	619a      	str	r2, [r3, #24]
}
 800da8c:	bf00      	nop
 800da8e:	37b8      	adds	r7, #184	@ 0xb8
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}
 800da94:	effffffe 	.word	0xeffffffe
 800da98:	58000c00 	.word	0x58000c00
 800da9c:	0800d221 	.word	0x0800d221

0800daa0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800daa0:	b480      	push	{r7}
 800daa2:	b083      	sub	sp, #12
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800daa8:	bf00      	nop
 800daaa:	370c      	adds	r7, #12
 800daac:	46bd      	mov	sp, r7
 800daae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab2:	4770      	bx	lr

0800dab4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dab4:	b480      	push	{r7}
 800dab6:	b083      	sub	sp, #12
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dabc:	bf00      	nop
 800dabe:	370c      	adds	r7, #12
 800dac0:	46bd      	mov	sp, r7
 800dac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac6:	4770      	bx	lr

0800dac8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dac8:	b480      	push	{r7}
 800daca:	b083      	sub	sp, #12
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dad0:	bf00      	nop
 800dad2:	370c      	adds	r7, #12
 800dad4:	46bd      	mov	sp, r7
 800dad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dada:	4770      	bx	lr

0800dadc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dadc:	b480      	push	{r7}
 800dade:	b085      	sub	sp, #20
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800daea:	2b01      	cmp	r3, #1
 800daec:	d101      	bne.n	800daf2 <HAL_UARTEx_DisableFifoMode+0x16>
 800daee:	2302      	movs	r3, #2
 800daf0:	e027      	b.n	800db42 <HAL_UARTEx_DisableFifoMode+0x66>
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2201      	movs	r2, #1
 800daf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2224      	movs	r2, #36	@ 0x24
 800dafe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	681a      	ldr	r2, [r3, #0]
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	f022 0201 	bic.w	r2, r2, #1
 800db18:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800db20:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	2200      	movs	r2, #0
 800db26:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	68fa      	ldr	r2, [r7, #12]
 800db2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2220      	movs	r2, #32
 800db34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2200      	movs	r2, #0
 800db3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800db40:	2300      	movs	r3, #0
}
 800db42:	4618      	mov	r0, r3
 800db44:	3714      	adds	r7, #20
 800db46:	46bd      	mov	sp, r7
 800db48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4c:	4770      	bx	lr

0800db4e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800db4e:	b580      	push	{r7, lr}
 800db50:	b084      	sub	sp, #16
 800db52:	af00      	add	r7, sp, #0
 800db54:	6078      	str	r0, [r7, #4]
 800db56:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800db5e:	2b01      	cmp	r3, #1
 800db60:	d101      	bne.n	800db66 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800db62:	2302      	movs	r3, #2
 800db64:	e02d      	b.n	800dbc2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	2201      	movs	r2, #1
 800db6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	2224      	movs	r2, #36	@ 0x24
 800db72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	681a      	ldr	r2, [r3, #0]
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	f022 0201 	bic.w	r2, r2, #1
 800db8c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	689b      	ldr	r3, [r3, #8]
 800db94:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	683a      	ldr	r2, [r7, #0]
 800db9e:	430a      	orrs	r2, r1
 800dba0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f000 f850 	bl	800dc48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	68fa      	ldr	r2, [r7, #12]
 800dbae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2220      	movs	r2, #32
 800dbb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2200      	movs	r2, #0
 800dbbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dbc0:	2300      	movs	r3, #0
}
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	3710      	adds	r7, #16
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}

0800dbca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dbca:	b580      	push	{r7, lr}
 800dbcc:	b084      	sub	sp, #16
 800dbce:	af00      	add	r7, sp, #0
 800dbd0:	6078      	str	r0, [r7, #4]
 800dbd2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dbda:	2b01      	cmp	r3, #1
 800dbdc:	d101      	bne.n	800dbe2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dbde:	2302      	movs	r3, #2
 800dbe0:	e02d      	b.n	800dc3e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2201      	movs	r2, #1
 800dbe6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	2224      	movs	r2, #36	@ 0x24
 800dbee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	681a      	ldr	r2, [r3, #0]
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	f022 0201 	bic.w	r2, r2, #1
 800dc08:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	689b      	ldr	r3, [r3, #8]
 800dc10:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	683a      	ldr	r2, [r7, #0]
 800dc1a:	430a      	orrs	r2, r1
 800dc1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f000 f812 	bl	800dc48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	68fa      	ldr	r2, [r7, #12]
 800dc2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2220      	movs	r2, #32
 800dc30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2200      	movs	r2, #0
 800dc38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dc3c:	2300      	movs	r3, #0
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3710      	adds	r7, #16
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}
	...

0800dc48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b085      	sub	sp, #20
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d108      	bne.n	800dc6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2201      	movs	r2, #1
 800dc5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2201      	movs	r2, #1
 800dc64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dc68:	e031      	b.n	800dcce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dc6a:	2310      	movs	r3, #16
 800dc6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dc6e:	2310      	movs	r3, #16
 800dc70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	689b      	ldr	r3, [r3, #8]
 800dc78:	0e5b      	lsrs	r3, r3, #25
 800dc7a:	b2db      	uxtb	r3, r3
 800dc7c:	f003 0307 	and.w	r3, r3, #7
 800dc80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	689b      	ldr	r3, [r3, #8]
 800dc88:	0f5b      	lsrs	r3, r3, #29
 800dc8a:	b2db      	uxtb	r3, r3
 800dc8c:	f003 0307 	and.w	r3, r3, #7
 800dc90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dc92:	7bbb      	ldrb	r3, [r7, #14]
 800dc94:	7b3a      	ldrb	r2, [r7, #12]
 800dc96:	4911      	ldr	r1, [pc, #68]	@ (800dcdc <UARTEx_SetNbDataToProcess+0x94>)
 800dc98:	5c8a      	ldrb	r2, [r1, r2]
 800dc9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dc9e:	7b3a      	ldrb	r2, [r7, #12]
 800dca0:	490f      	ldr	r1, [pc, #60]	@ (800dce0 <UARTEx_SetNbDataToProcess+0x98>)
 800dca2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dca4:	fb93 f3f2 	sdiv	r3, r3, r2
 800dca8:	b29a      	uxth	r2, r3
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dcb0:	7bfb      	ldrb	r3, [r7, #15]
 800dcb2:	7b7a      	ldrb	r2, [r7, #13]
 800dcb4:	4909      	ldr	r1, [pc, #36]	@ (800dcdc <UARTEx_SetNbDataToProcess+0x94>)
 800dcb6:	5c8a      	ldrb	r2, [r1, r2]
 800dcb8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dcbc:	7b7a      	ldrb	r2, [r7, #13]
 800dcbe:	4908      	ldr	r1, [pc, #32]	@ (800dce0 <UARTEx_SetNbDataToProcess+0x98>)
 800dcc0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dcc2:	fb93 f3f2 	sdiv	r3, r3, r2
 800dcc6:	b29a      	uxth	r2, r3
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800dcce:	bf00      	nop
 800dcd0:	3714      	adds	r7, #20
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd8:	4770      	bx	lr
 800dcda:	bf00      	nop
 800dcdc:	08012830 	.word	0x08012830
 800dce0:	08012838 	.word	0x08012838

0800dce4 <__cvt>:
 800dce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dce6:	ed2d 8b02 	vpush	{d8}
 800dcea:	eeb0 8b40 	vmov.f64	d8, d0
 800dcee:	b085      	sub	sp, #20
 800dcf0:	4617      	mov	r7, r2
 800dcf2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800dcf4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dcf6:	ee18 2a90 	vmov	r2, s17
 800dcfa:	f025 0520 	bic.w	r5, r5, #32
 800dcfe:	2a00      	cmp	r2, #0
 800dd00:	bfb6      	itet	lt
 800dd02:	222d      	movlt	r2, #45	@ 0x2d
 800dd04:	2200      	movge	r2, #0
 800dd06:	eeb1 8b40 	vneglt.f64	d8, d0
 800dd0a:	2d46      	cmp	r5, #70	@ 0x46
 800dd0c:	460c      	mov	r4, r1
 800dd0e:	701a      	strb	r2, [r3, #0]
 800dd10:	d004      	beq.n	800dd1c <__cvt+0x38>
 800dd12:	2d45      	cmp	r5, #69	@ 0x45
 800dd14:	d100      	bne.n	800dd18 <__cvt+0x34>
 800dd16:	3401      	adds	r4, #1
 800dd18:	2102      	movs	r1, #2
 800dd1a:	e000      	b.n	800dd1e <__cvt+0x3a>
 800dd1c:	2103      	movs	r1, #3
 800dd1e:	ab03      	add	r3, sp, #12
 800dd20:	9301      	str	r3, [sp, #4]
 800dd22:	ab02      	add	r3, sp, #8
 800dd24:	9300      	str	r3, [sp, #0]
 800dd26:	4622      	mov	r2, r4
 800dd28:	4633      	mov	r3, r6
 800dd2a:	eeb0 0b48 	vmov.f64	d0, d8
 800dd2e:	f001 f84f 	bl	800edd0 <_dtoa_r>
 800dd32:	2d47      	cmp	r5, #71	@ 0x47
 800dd34:	d114      	bne.n	800dd60 <__cvt+0x7c>
 800dd36:	07fb      	lsls	r3, r7, #31
 800dd38:	d50a      	bpl.n	800dd50 <__cvt+0x6c>
 800dd3a:	1902      	adds	r2, r0, r4
 800dd3c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800dd40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd44:	bf08      	it	eq
 800dd46:	9203      	streq	r2, [sp, #12]
 800dd48:	2130      	movs	r1, #48	@ 0x30
 800dd4a:	9b03      	ldr	r3, [sp, #12]
 800dd4c:	4293      	cmp	r3, r2
 800dd4e:	d319      	bcc.n	800dd84 <__cvt+0xa0>
 800dd50:	9b03      	ldr	r3, [sp, #12]
 800dd52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dd54:	1a1b      	subs	r3, r3, r0
 800dd56:	6013      	str	r3, [r2, #0]
 800dd58:	b005      	add	sp, #20
 800dd5a:	ecbd 8b02 	vpop	{d8}
 800dd5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd60:	2d46      	cmp	r5, #70	@ 0x46
 800dd62:	eb00 0204 	add.w	r2, r0, r4
 800dd66:	d1e9      	bne.n	800dd3c <__cvt+0x58>
 800dd68:	7803      	ldrb	r3, [r0, #0]
 800dd6a:	2b30      	cmp	r3, #48	@ 0x30
 800dd6c:	d107      	bne.n	800dd7e <__cvt+0x9a>
 800dd6e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800dd72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd76:	bf1c      	itt	ne
 800dd78:	f1c4 0401 	rsbne	r4, r4, #1
 800dd7c:	6034      	strne	r4, [r6, #0]
 800dd7e:	6833      	ldr	r3, [r6, #0]
 800dd80:	441a      	add	r2, r3
 800dd82:	e7db      	b.n	800dd3c <__cvt+0x58>
 800dd84:	1c5c      	adds	r4, r3, #1
 800dd86:	9403      	str	r4, [sp, #12]
 800dd88:	7019      	strb	r1, [r3, #0]
 800dd8a:	e7de      	b.n	800dd4a <__cvt+0x66>

0800dd8c <__exponent>:
 800dd8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd8e:	2900      	cmp	r1, #0
 800dd90:	bfba      	itte	lt
 800dd92:	4249      	neglt	r1, r1
 800dd94:	232d      	movlt	r3, #45	@ 0x2d
 800dd96:	232b      	movge	r3, #43	@ 0x2b
 800dd98:	2909      	cmp	r1, #9
 800dd9a:	7002      	strb	r2, [r0, #0]
 800dd9c:	7043      	strb	r3, [r0, #1]
 800dd9e:	dd29      	ble.n	800ddf4 <__exponent+0x68>
 800dda0:	f10d 0307 	add.w	r3, sp, #7
 800dda4:	461d      	mov	r5, r3
 800dda6:	270a      	movs	r7, #10
 800dda8:	461a      	mov	r2, r3
 800ddaa:	fbb1 f6f7 	udiv	r6, r1, r7
 800ddae:	fb07 1416 	mls	r4, r7, r6, r1
 800ddb2:	3430      	adds	r4, #48	@ 0x30
 800ddb4:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ddb8:	460c      	mov	r4, r1
 800ddba:	2c63      	cmp	r4, #99	@ 0x63
 800ddbc:	f103 33ff 	add.w	r3, r3, #4294967295
 800ddc0:	4631      	mov	r1, r6
 800ddc2:	dcf1      	bgt.n	800dda8 <__exponent+0x1c>
 800ddc4:	3130      	adds	r1, #48	@ 0x30
 800ddc6:	1e94      	subs	r4, r2, #2
 800ddc8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ddcc:	1c41      	adds	r1, r0, #1
 800ddce:	4623      	mov	r3, r4
 800ddd0:	42ab      	cmp	r3, r5
 800ddd2:	d30a      	bcc.n	800ddea <__exponent+0x5e>
 800ddd4:	f10d 0309 	add.w	r3, sp, #9
 800ddd8:	1a9b      	subs	r3, r3, r2
 800ddda:	42ac      	cmp	r4, r5
 800dddc:	bf88      	it	hi
 800ddde:	2300      	movhi	r3, #0
 800dde0:	3302      	adds	r3, #2
 800dde2:	4403      	add	r3, r0
 800dde4:	1a18      	subs	r0, r3, r0
 800dde6:	b003      	add	sp, #12
 800dde8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddea:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ddee:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ddf2:	e7ed      	b.n	800ddd0 <__exponent+0x44>
 800ddf4:	2330      	movs	r3, #48	@ 0x30
 800ddf6:	3130      	adds	r1, #48	@ 0x30
 800ddf8:	7083      	strb	r3, [r0, #2]
 800ddfa:	70c1      	strb	r1, [r0, #3]
 800ddfc:	1d03      	adds	r3, r0, #4
 800ddfe:	e7f1      	b.n	800dde4 <__exponent+0x58>

0800de00 <_printf_float>:
 800de00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de04:	b08d      	sub	sp, #52	@ 0x34
 800de06:	460c      	mov	r4, r1
 800de08:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800de0c:	4616      	mov	r6, r2
 800de0e:	461f      	mov	r7, r3
 800de10:	4605      	mov	r5, r0
 800de12:	f000 fed7 	bl	800ebc4 <_localeconv_r>
 800de16:	f8d0 b000 	ldr.w	fp, [r0]
 800de1a:	4658      	mov	r0, fp
 800de1c:	f7f2 fab0 	bl	8000380 <strlen>
 800de20:	2300      	movs	r3, #0
 800de22:	930a      	str	r3, [sp, #40]	@ 0x28
 800de24:	f8d8 3000 	ldr.w	r3, [r8]
 800de28:	f894 9018 	ldrb.w	r9, [r4, #24]
 800de2c:	6822      	ldr	r2, [r4, #0]
 800de2e:	9005      	str	r0, [sp, #20]
 800de30:	3307      	adds	r3, #7
 800de32:	f023 0307 	bic.w	r3, r3, #7
 800de36:	f103 0108 	add.w	r1, r3, #8
 800de3a:	f8c8 1000 	str.w	r1, [r8]
 800de3e:	ed93 0b00 	vldr	d0, [r3]
 800de42:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800e0a0 <_printf_float+0x2a0>
 800de46:	eeb0 7bc0 	vabs.f64	d7, d0
 800de4a:	eeb4 7b46 	vcmp.f64	d7, d6
 800de4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de52:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800de56:	dd24      	ble.n	800dea2 <_printf_float+0xa2>
 800de58:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800de5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de60:	d502      	bpl.n	800de68 <_printf_float+0x68>
 800de62:	232d      	movs	r3, #45	@ 0x2d
 800de64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800de68:	498f      	ldr	r1, [pc, #572]	@ (800e0a8 <_printf_float+0x2a8>)
 800de6a:	4b90      	ldr	r3, [pc, #576]	@ (800e0ac <_printf_float+0x2ac>)
 800de6c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800de70:	bf94      	ite	ls
 800de72:	4688      	movls	r8, r1
 800de74:	4698      	movhi	r8, r3
 800de76:	f022 0204 	bic.w	r2, r2, #4
 800de7a:	2303      	movs	r3, #3
 800de7c:	6123      	str	r3, [r4, #16]
 800de7e:	6022      	str	r2, [r4, #0]
 800de80:	f04f 0a00 	mov.w	sl, #0
 800de84:	9700      	str	r7, [sp, #0]
 800de86:	4633      	mov	r3, r6
 800de88:	aa0b      	add	r2, sp, #44	@ 0x2c
 800de8a:	4621      	mov	r1, r4
 800de8c:	4628      	mov	r0, r5
 800de8e:	f000 f9d1 	bl	800e234 <_printf_common>
 800de92:	3001      	adds	r0, #1
 800de94:	f040 8089 	bne.w	800dfaa <_printf_float+0x1aa>
 800de98:	f04f 30ff 	mov.w	r0, #4294967295
 800de9c:	b00d      	add	sp, #52	@ 0x34
 800de9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dea2:	eeb4 0b40 	vcmp.f64	d0, d0
 800dea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deaa:	d709      	bvc.n	800dec0 <_printf_float+0xc0>
 800deac:	ee10 3a90 	vmov	r3, s1
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	bfbc      	itt	lt
 800deb4:	232d      	movlt	r3, #45	@ 0x2d
 800deb6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800deba:	497d      	ldr	r1, [pc, #500]	@ (800e0b0 <_printf_float+0x2b0>)
 800debc:	4b7d      	ldr	r3, [pc, #500]	@ (800e0b4 <_printf_float+0x2b4>)
 800debe:	e7d5      	b.n	800de6c <_printf_float+0x6c>
 800dec0:	6863      	ldr	r3, [r4, #4]
 800dec2:	1c59      	adds	r1, r3, #1
 800dec4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800dec8:	d139      	bne.n	800df3e <_printf_float+0x13e>
 800deca:	2306      	movs	r3, #6
 800decc:	6063      	str	r3, [r4, #4]
 800dece:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ded2:	2300      	movs	r3, #0
 800ded4:	6022      	str	r2, [r4, #0]
 800ded6:	9303      	str	r3, [sp, #12]
 800ded8:	ab0a      	add	r3, sp, #40	@ 0x28
 800deda:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800dede:	ab09      	add	r3, sp, #36	@ 0x24
 800dee0:	9300      	str	r3, [sp, #0]
 800dee2:	6861      	ldr	r1, [r4, #4]
 800dee4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800dee8:	4628      	mov	r0, r5
 800deea:	f7ff fefb 	bl	800dce4 <__cvt>
 800deee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800def2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800def4:	4680      	mov	r8, r0
 800def6:	d129      	bne.n	800df4c <_printf_float+0x14c>
 800def8:	1cc8      	adds	r0, r1, #3
 800defa:	db02      	blt.n	800df02 <_printf_float+0x102>
 800defc:	6863      	ldr	r3, [r4, #4]
 800defe:	4299      	cmp	r1, r3
 800df00:	dd41      	ble.n	800df86 <_printf_float+0x186>
 800df02:	f1a9 0902 	sub.w	r9, r9, #2
 800df06:	fa5f f989 	uxtb.w	r9, r9
 800df0a:	3901      	subs	r1, #1
 800df0c:	464a      	mov	r2, r9
 800df0e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800df12:	9109      	str	r1, [sp, #36]	@ 0x24
 800df14:	f7ff ff3a 	bl	800dd8c <__exponent>
 800df18:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800df1a:	1813      	adds	r3, r2, r0
 800df1c:	2a01      	cmp	r2, #1
 800df1e:	4682      	mov	sl, r0
 800df20:	6123      	str	r3, [r4, #16]
 800df22:	dc02      	bgt.n	800df2a <_printf_float+0x12a>
 800df24:	6822      	ldr	r2, [r4, #0]
 800df26:	07d2      	lsls	r2, r2, #31
 800df28:	d501      	bpl.n	800df2e <_printf_float+0x12e>
 800df2a:	3301      	adds	r3, #1
 800df2c:	6123      	str	r3, [r4, #16]
 800df2e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800df32:	2b00      	cmp	r3, #0
 800df34:	d0a6      	beq.n	800de84 <_printf_float+0x84>
 800df36:	232d      	movs	r3, #45	@ 0x2d
 800df38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800df3c:	e7a2      	b.n	800de84 <_printf_float+0x84>
 800df3e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800df42:	d1c4      	bne.n	800dece <_printf_float+0xce>
 800df44:	2b00      	cmp	r3, #0
 800df46:	d1c2      	bne.n	800dece <_printf_float+0xce>
 800df48:	2301      	movs	r3, #1
 800df4a:	e7bf      	b.n	800decc <_printf_float+0xcc>
 800df4c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800df50:	d9db      	bls.n	800df0a <_printf_float+0x10a>
 800df52:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800df56:	d118      	bne.n	800df8a <_printf_float+0x18a>
 800df58:	2900      	cmp	r1, #0
 800df5a:	6863      	ldr	r3, [r4, #4]
 800df5c:	dd0b      	ble.n	800df76 <_printf_float+0x176>
 800df5e:	6121      	str	r1, [r4, #16]
 800df60:	b913      	cbnz	r3, 800df68 <_printf_float+0x168>
 800df62:	6822      	ldr	r2, [r4, #0]
 800df64:	07d0      	lsls	r0, r2, #31
 800df66:	d502      	bpl.n	800df6e <_printf_float+0x16e>
 800df68:	3301      	adds	r3, #1
 800df6a:	440b      	add	r3, r1
 800df6c:	6123      	str	r3, [r4, #16]
 800df6e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800df70:	f04f 0a00 	mov.w	sl, #0
 800df74:	e7db      	b.n	800df2e <_printf_float+0x12e>
 800df76:	b913      	cbnz	r3, 800df7e <_printf_float+0x17e>
 800df78:	6822      	ldr	r2, [r4, #0]
 800df7a:	07d2      	lsls	r2, r2, #31
 800df7c:	d501      	bpl.n	800df82 <_printf_float+0x182>
 800df7e:	3302      	adds	r3, #2
 800df80:	e7f4      	b.n	800df6c <_printf_float+0x16c>
 800df82:	2301      	movs	r3, #1
 800df84:	e7f2      	b.n	800df6c <_printf_float+0x16c>
 800df86:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800df8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df8c:	4299      	cmp	r1, r3
 800df8e:	db05      	blt.n	800df9c <_printf_float+0x19c>
 800df90:	6823      	ldr	r3, [r4, #0]
 800df92:	6121      	str	r1, [r4, #16]
 800df94:	07d8      	lsls	r0, r3, #31
 800df96:	d5ea      	bpl.n	800df6e <_printf_float+0x16e>
 800df98:	1c4b      	adds	r3, r1, #1
 800df9a:	e7e7      	b.n	800df6c <_printf_float+0x16c>
 800df9c:	2900      	cmp	r1, #0
 800df9e:	bfd4      	ite	le
 800dfa0:	f1c1 0202 	rsble	r2, r1, #2
 800dfa4:	2201      	movgt	r2, #1
 800dfa6:	4413      	add	r3, r2
 800dfa8:	e7e0      	b.n	800df6c <_printf_float+0x16c>
 800dfaa:	6823      	ldr	r3, [r4, #0]
 800dfac:	055a      	lsls	r2, r3, #21
 800dfae:	d407      	bmi.n	800dfc0 <_printf_float+0x1c0>
 800dfb0:	6923      	ldr	r3, [r4, #16]
 800dfb2:	4642      	mov	r2, r8
 800dfb4:	4631      	mov	r1, r6
 800dfb6:	4628      	mov	r0, r5
 800dfb8:	47b8      	blx	r7
 800dfba:	3001      	adds	r0, #1
 800dfbc:	d12a      	bne.n	800e014 <_printf_float+0x214>
 800dfbe:	e76b      	b.n	800de98 <_printf_float+0x98>
 800dfc0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800dfc4:	f240 80e0 	bls.w	800e188 <_printf_float+0x388>
 800dfc8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800dfcc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dfd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfd4:	d133      	bne.n	800e03e <_printf_float+0x23e>
 800dfd6:	4a38      	ldr	r2, [pc, #224]	@ (800e0b8 <_printf_float+0x2b8>)
 800dfd8:	2301      	movs	r3, #1
 800dfda:	4631      	mov	r1, r6
 800dfdc:	4628      	mov	r0, r5
 800dfde:	47b8      	blx	r7
 800dfe0:	3001      	adds	r0, #1
 800dfe2:	f43f af59 	beq.w	800de98 <_printf_float+0x98>
 800dfe6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800dfea:	4543      	cmp	r3, r8
 800dfec:	db02      	blt.n	800dff4 <_printf_float+0x1f4>
 800dfee:	6823      	ldr	r3, [r4, #0]
 800dff0:	07d8      	lsls	r0, r3, #31
 800dff2:	d50f      	bpl.n	800e014 <_printf_float+0x214>
 800dff4:	9b05      	ldr	r3, [sp, #20]
 800dff6:	465a      	mov	r2, fp
 800dff8:	4631      	mov	r1, r6
 800dffa:	4628      	mov	r0, r5
 800dffc:	47b8      	blx	r7
 800dffe:	3001      	adds	r0, #1
 800e000:	f43f af4a 	beq.w	800de98 <_printf_float+0x98>
 800e004:	f04f 0900 	mov.w	r9, #0
 800e008:	f108 38ff 	add.w	r8, r8, #4294967295
 800e00c:	f104 0a1a 	add.w	sl, r4, #26
 800e010:	45c8      	cmp	r8, r9
 800e012:	dc09      	bgt.n	800e028 <_printf_float+0x228>
 800e014:	6823      	ldr	r3, [r4, #0]
 800e016:	079b      	lsls	r3, r3, #30
 800e018:	f100 8107 	bmi.w	800e22a <_printf_float+0x42a>
 800e01c:	68e0      	ldr	r0, [r4, #12]
 800e01e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e020:	4298      	cmp	r0, r3
 800e022:	bfb8      	it	lt
 800e024:	4618      	movlt	r0, r3
 800e026:	e739      	b.n	800de9c <_printf_float+0x9c>
 800e028:	2301      	movs	r3, #1
 800e02a:	4652      	mov	r2, sl
 800e02c:	4631      	mov	r1, r6
 800e02e:	4628      	mov	r0, r5
 800e030:	47b8      	blx	r7
 800e032:	3001      	adds	r0, #1
 800e034:	f43f af30 	beq.w	800de98 <_printf_float+0x98>
 800e038:	f109 0901 	add.w	r9, r9, #1
 800e03c:	e7e8      	b.n	800e010 <_printf_float+0x210>
 800e03e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e040:	2b00      	cmp	r3, #0
 800e042:	dc3b      	bgt.n	800e0bc <_printf_float+0x2bc>
 800e044:	4a1c      	ldr	r2, [pc, #112]	@ (800e0b8 <_printf_float+0x2b8>)
 800e046:	2301      	movs	r3, #1
 800e048:	4631      	mov	r1, r6
 800e04a:	4628      	mov	r0, r5
 800e04c:	47b8      	blx	r7
 800e04e:	3001      	adds	r0, #1
 800e050:	f43f af22 	beq.w	800de98 <_printf_float+0x98>
 800e054:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e058:	ea59 0303 	orrs.w	r3, r9, r3
 800e05c:	d102      	bne.n	800e064 <_printf_float+0x264>
 800e05e:	6823      	ldr	r3, [r4, #0]
 800e060:	07d9      	lsls	r1, r3, #31
 800e062:	d5d7      	bpl.n	800e014 <_printf_float+0x214>
 800e064:	9b05      	ldr	r3, [sp, #20]
 800e066:	465a      	mov	r2, fp
 800e068:	4631      	mov	r1, r6
 800e06a:	4628      	mov	r0, r5
 800e06c:	47b8      	blx	r7
 800e06e:	3001      	adds	r0, #1
 800e070:	f43f af12 	beq.w	800de98 <_printf_float+0x98>
 800e074:	f04f 0a00 	mov.w	sl, #0
 800e078:	f104 0b1a 	add.w	fp, r4, #26
 800e07c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e07e:	425b      	negs	r3, r3
 800e080:	4553      	cmp	r3, sl
 800e082:	dc01      	bgt.n	800e088 <_printf_float+0x288>
 800e084:	464b      	mov	r3, r9
 800e086:	e794      	b.n	800dfb2 <_printf_float+0x1b2>
 800e088:	2301      	movs	r3, #1
 800e08a:	465a      	mov	r2, fp
 800e08c:	4631      	mov	r1, r6
 800e08e:	4628      	mov	r0, r5
 800e090:	47b8      	blx	r7
 800e092:	3001      	adds	r0, #1
 800e094:	f43f af00 	beq.w	800de98 <_printf_float+0x98>
 800e098:	f10a 0a01 	add.w	sl, sl, #1
 800e09c:	e7ee      	b.n	800e07c <_printf_float+0x27c>
 800e09e:	bf00      	nop
 800e0a0:	ffffffff 	.word	0xffffffff
 800e0a4:	7fefffff 	.word	0x7fefffff
 800e0a8:	08012840 	.word	0x08012840
 800e0ac:	08012844 	.word	0x08012844
 800e0b0:	08012848 	.word	0x08012848
 800e0b4:	0801284c 	.word	0x0801284c
 800e0b8:	08012850 	.word	0x08012850
 800e0bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e0be:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e0c2:	4553      	cmp	r3, sl
 800e0c4:	bfa8      	it	ge
 800e0c6:	4653      	movge	r3, sl
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	4699      	mov	r9, r3
 800e0cc:	dc37      	bgt.n	800e13e <_printf_float+0x33e>
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	9307      	str	r3, [sp, #28]
 800e0d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e0d6:	f104 021a 	add.w	r2, r4, #26
 800e0da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e0dc:	9907      	ldr	r1, [sp, #28]
 800e0de:	9306      	str	r3, [sp, #24]
 800e0e0:	eba3 0309 	sub.w	r3, r3, r9
 800e0e4:	428b      	cmp	r3, r1
 800e0e6:	dc31      	bgt.n	800e14c <_printf_float+0x34c>
 800e0e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0ea:	459a      	cmp	sl, r3
 800e0ec:	dc3b      	bgt.n	800e166 <_printf_float+0x366>
 800e0ee:	6823      	ldr	r3, [r4, #0]
 800e0f0:	07da      	lsls	r2, r3, #31
 800e0f2:	d438      	bmi.n	800e166 <_printf_float+0x366>
 800e0f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0f6:	ebaa 0903 	sub.w	r9, sl, r3
 800e0fa:	9b06      	ldr	r3, [sp, #24]
 800e0fc:	ebaa 0303 	sub.w	r3, sl, r3
 800e100:	4599      	cmp	r9, r3
 800e102:	bfa8      	it	ge
 800e104:	4699      	movge	r9, r3
 800e106:	f1b9 0f00 	cmp.w	r9, #0
 800e10a:	dc34      	bgt.n	800e176 <_printf_float+0x376>
 800e10c:	f04f 0800 	mov.w	r8, #0
 800e110:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e114:	f104 0b1a 	add.w	fp, r4, #26
 800e118:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e11a:	ebaa 0303 	sub.w	r3, sl, r3
 800e11e:	eba3 0309 	sub.w	r3, r3, r9
 800e122:	4543      	cmp	r3, r8
 800e124:	f77f af76 	ble.w	800e014 <_printf_float+0x214>
 800e128:	2301      	movs	r3, #1
 800e12a:	465a      	mov	r2, fp
 800e12c:	4631      	mov	r1, r6
 800e12e:	4628      	mov	r0, r5
 800e130:	47b8      	blx	r7
 800e132:	3001      	adds	r0, #1
 800e134:	f43f aeb0 	beq.w	800de98 <_printf_float+0x98>
 800e138:	f108 0801 	add.w	r8, r8, #1
 800e13c:	e7ec      	b.n	800e118 <_printf_float+0x318>
 800e13e:	4642      	mov	r2, r8
 800e140:	4631      	mov	r1, r6
 800e142:	4628      	mov	r0, r5
 800e144:	47b8      	blx	r7
 800e146:	3001      	adds	r0, #1
 800e148:	d1c1      	bne.n	800e0ce <_printf_float+0x2ce>
 800e14a:	e6a5      	b.n	800de98 <_printf_float+0x98>
 800e14c:	2301      	movs	r3, #1
 800e14e:	4631      	mov	r1, r6
 800e150:	4628      	mov	r0, r5
 800e152:	9206      	str	r2, [sp, #24]
 800e154:	47b8      	blx	r7
 800e156:	3001      	adds	r0, #1
 800e158:	f43f ae9e 	beq.w	800de98 <_printf_float+0x98>
 800e15c:	9b07      	ldr	r3, [sp, #28]
 800e15e:	9a06      	ldr	r2, [sp, #24]
 800e160:	3301      	adds	r3, #1
 800e162:	9307      	str	r3, [sp, #28]
 800e164:	e7b9      	b.n	800e0da <_printf_float+0x2da>
 800e166:	9b05      	ldr	r3, [sp, #20]
 800e168:	465a      	mov	r2, fp
 800e16a:	4631      	mov	r1, r6
 800e16c:	4628      	mov	r0, r5
 800e16e:	47b8      	blx	r7
 800e170:	3001      	adds	r0, #1
 800e172:	d1bf      	bne.n	800e0f4 <_printf_float+0x2f4>
 800e174:	e690      	b.n	800de98 <_printf_float+0x98>
 800e176:	9a06      	ldr	r2, [sp, #24]
 800e178:	464b      	mov	r3, r9
 800e17a:	4442      	add	r2, r8
 800e17c:	4631      	mov	r1, r6
 800e17e:	4628      	mov	r0, r5
 800e180:	47b8      	blx	r7
 800e182:	3001      	adds	r0, #1
 800e184:	d1c2      	bne.n	800e10c <_printf_float+0x30c>
 800e186:	e687      	b.n	800de98 <_printf_float+0x98>
 800e188:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800e18c:	f1b9 0f01 	cmp.w	r9, #1
 800e190:	dc01      	bgt.n	800e196 <_printf_float+0x396>
 800e192:	07db      	lsls	r3, r3, #31
 800e194:	d536      	bpl.n	800e204 <_printf_float+0x404>
 800e196:	2301      	movs	r3, #1
 800e198:	4642      	mov	r2, r8
 800e19a:	4631      	mov	r1, r6
 800e19c:	4628      	mov	r0, r5
 800e19e:	47b8      	blx	r7
 800e1a0:	3001      	adds	r0, #1
 800e1a2:	f43f ae79 	beq.w	800de98 <_printf_float+0x98>
 800e1a6:	9b05      	ldr	r3, [sp, #20]
 800e1a8:	465a      	mov	r2, fp
 800e1aa:	4631      	mov	r1, r6
 800e1ac:	4628      	mov	r0, r5
 800e1ae:	47b8      	blx	r7
 800e1b0:	3001      	adds	r0, #1
 800e1b2:	f43f ae71 	beq.w	800de98 <_printf_float+0x98>
 800e1b6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800e1ba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e1be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1c2:	f109 39ff 	add.w	r9, r9, #4294967295
 800e1c6:	d018      	beq.n	800e1fa <_printf_float+0x3fa>
 800e1c8:	464b      	mov	r3, r9
 800e1ca:	f108 0201 	add.w	r2, r8, #1
 800e1ce:	4631      	mov	r1, r6
 800e1d0:	4628      	mov	r0, r5
 800e1d2:	47b8      	blx	r7
 800e1d4:	3001      	adds	r0, #1
 800e1d6:	d10c      	bne.n	800e1f2 <_printf_float+0x3f2>
 800e1d8:	e65e      	b.n	800de98 <_printf_float+0x98>
 800e1da:	2301      	movs	r3, #1
 800e1dc:	465a      	mov	r2, fp
 800e1de:	4631      	mov	r1, r6
 800e1e0:	4628      	mov	r0, r5
 800e1e2:	47b8      	blx	r7
 800e1e4:	3001      	adds	r0, #1
 800e1e6:	f43f ae57 	beq.w	800de98 <_printf_float+0x98>
 800e1ea:	f108 0801 	add.w	r8, r8, #1
 800e1ee:	45c8      	cmp	r8, r9
 800e1f0:	dbf3      	blt.n	800e1da <_printf_float+0x3da>
 800e1f2:	4653      	mov	r3, sl
 800e1f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e1f8:	e6dc      	b.n	800dfb4 <_printf_float+0x1b4>
 800e1fa:	f04f 0800 	mov.w	r8, #0
 800e1fe:	f104 0b1a 	add.w	fp, r4, #26
 800e202:	e7f4      	b.n	800e1ee <_printf_float+0x3ee>
 800e204:	2301      	movs	r3, #1
 800e206:	4642      	mov	r2, r8
 800e208:	e7e1      	b.n	800e1ce <_printf_float+0x3ce>
 800e20a:	2301      	movs	r3, #1
 800e20c:	464a      	mov	r2, r9
 800e20e:	4631      	mov	r1, r6
 800e210:	4628      	mov	r0, r5
 800e212:	47b8      	blx	r7
 800e214:	3001      	adds	r0, #1
 800e216:	f43f ae3f 	beq.w	800de98 <_printf_float+0x98>
 800e21a:	f108 0801 	add.w	r8, r8, #1
 800e21e:	68e3      	ldr	r3, [r4, #12]
 800e220:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e222:	1a5b      	subs	r3, r3, r1
 800e224:	4543      	cmp	r3, r8
 800e226:	dcf0      	bgt.n	800e20a <_printf_float+0x40a>
 800e228:	e6f8      	b.n	800e01c <_printf_float+0x21c>
 800e22a:	f04f 0800 	mov.w	r8, #0
 800e22e:	f104 0919 	add.w	r9, r4, #25
 800e232:	e7f4      	b.n	800e21e <_printf_float+0x41e>

0800e234 <_printf_common>:
 800e234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e238:	4616      	mov	r6, r2
 800e23a:	4698      	mov	r8, r3
 800e23c:	688a      	ldr	r2, [r1, #8]
 800e23e:	690b      	ldr	r3, [r1, #16]
 800e240:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e244:	4293      	cmp	r3, r2
 800e246:	bfb8      	it	lt
 800e248:	4613      	movlt	r3, r2
 800e24a:	6033      	str	r3, [r6, #0]
 800e24c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e250:	4607      	mov	r7, r0
 800e252:	460c      	mov	r4, r1
 800e254:	b10a      	cbz	r2, 800e25a <_printf_common+0x26>
 800e256:	3301      	adds	r3, #1
 800e258:	6033      	str	r3, [r6, #0]
 800e25a:	6823      	ldr	r3, [r4, #0]
 800e25c:	0699      	lsls	r1, r3, #26
 800e25e:	bf42      	ittt	mi
 800e260:	6833      	ldrmi	r3, [r6, #0]
 800e262:	3302      	addmi	r3, #2
 800e264:	6033      	strmi	r3, [r6, #0]
 800e266:	6825      	ldr	r5, [r4, #0]
 800e268:	f015 0506 	ands.w	r5, r5, #6
 800e26c:	d106      	bne.n	800e27c <_printf_common+0x48>
 800e26e:	f104 0a19 	add.w	sl, r4, #25
 800e272:	68e3      	ldr	r3, [r4, #12]
 800e274:	6832      	ldr	r2, [r6, #0]
 800e276:	1a9b      	subs	r3, r3, r2
 800e278:	42ab      	cmp	r3, r5
 800e27a:	dc26      	bgt.n	800e2ca <_printf_common+0x96>
 800e27c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e280:	6822      	ldr	r2, [r4, #0]
 800e282:	3b00      	subs	r3, #0
 800e284:	bf18      	it	ne
 800e286:	2301      	movne	r3, #1
 800e288:	0692      	lsls	r2, r2, #26
 800e28a:	d42b      	bmi.n	800e2e4 <_printf_common+0xb0>
 800e28c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e290:	4641      	mov	r1, r8
 800e292:	4638      	mov	r0, r7
 800e294:	47c8      	blx	r9
 800e296:	3001      	adds	r0, #1
 800e298:	d01e      	beq.n	800e2d8 <_printf_common+0xa4>
 800e29a:	6823      	ldr	r3, [r4, #0]
 800e29c:	6922      	ldr	r2, [r4, #16]
 800e29e:	f003 0306 	and.w	r3, r3, #6
 800e2a2:	2b04      	cmp	r3, #4
 800e2a4:	bf02      	ittt	eq
 800e2a6:	68e5      	ldreq	r5, [r4, #12]
 800e2a8:	6833      	ldreq	r3, [r6, #0]
 800e2aa:	1aed      	subeq	r5, r5, r3
 800e2ac:	68a3      	ldr	r3, [r4, #8]
 800e2ae:	bf0c      	ite	eq
 800e2b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e2b4:	2500      	movne	r5, #0
 800e2b6:	4293      	cmp	r3, r2
 800e2b8:	bfc4      	itt	gt
 800e2ba:	1a9b      	subgt	r3, r3, r2
 800e2bc:	18ed      	addgt	r5, r5, r3
 800e2be:	2600      	movs	r6, #0
 800e2c0:	341a      	adds	r4, #26
 800e2c2:	42b5      	cmp	r5, r6
 800e2c4:	d11a      	bne.n	800e2fc <_printf_common+0xc8>
 800e2c6:	2000      	movs	r0, #0
 800e2c8:	e008      	b.n	800e2dc <_printf_common+0xa8>
 800e2ca:	2301      	movs	r3, #1
 800e2cc:	4652      	mov	r2, sl
 800e2ce:	4641      	mov	r1, r8
 800e2d0:	4638      	mov	r0, r7
 800e2d2:	47c8      	blx	r9
 800e2d4:	3001      	adds	r0, #1
 800e2d6:	d103      	bne.n	800e2e0 <_printf_common+0xac>
 800e2d8:	f04f 30ff 	mov.w	r0, #4294967295
 800e2dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2e0:	3501      	adds	r5, #1
 800e2e2:	e7c6      	b.n	800e272 <_printf_common+0x3e>
 800e2e4:	18e1      	adds	r1, r4, r3
 800e2e6:	1c5a      	adds	r2, r3, #1
 800e2e8:	2030      	movs	r0, #48	@ 0x30
 800e2ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e2ee:	4422      	add	r2, r4
 800e2f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e2f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e2f8:	3302      	adds	r3, #2
 800e2fa:	e7c7      	b.n	800e28c <_printf_common+0x58>
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	4622      	mov	r2, r4
 800e300:	4641      	mov	r1, r8
 800e302:	4638      	mov	r0, r7
 800e304:	47c8      	blx	r9
 800e306:	3001      	adds	r0, #1
 800e308:	d0e6      	beq.n	800e2d8 <_printf_common+0xa4>
 800e30a:	3601      	adds	r6, #1
 800e30c:	e7d9      	b.n	800e2c2 <_printf_common+0x8e>
	...

0800e310 <_printf_i>:
 800e310:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e314:	7e0f      	ldrb	r7, [r1, #24]
 800e316:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e318:	2f78      	cmp	r7, #120	@ 0x78
 800e31a:	4691      	mov	r9, r2
 800e31c:	4680      	mov	r8, r0
 800e31e:	460c      	mov	r4, r1
 800e320:	469a      	mov	sl, r3
 800e322:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e326:	d807      	bhi.n	800e338 <_printf_i+0x28>
 800e328:	2f62      	cmp	r7, #98	@ 0x62
 800e32a:	d80a      	bhi.n	800e342 <_printf_i+0x32>
 800e32c:	2f00      	cmp	r7, #0
 800e32e:	f000 80d2 	beq.w	800e4d6 <_printf_i+0x1c6>
 800e332:	2f58      	cmp	r7, #88	@ 0x58
 800e334:	f000 80b9 	beq.w	800e4aa <_printf_i+0x19a>
 800e338:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e33c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e340:	e03a      	b.n	800e3b8 <_printf_i+0xa8>
 800e342:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e346:	2b15      	cmp	r3, #21
 800e348:	d8f6      	bhi.n	800e338 <_printf_i+0x28>
 800e34a:	a101      	add	r1, pc, #4	@ (adr r1, 800e350 <_printf_i+0x40>)
 800e34c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e350:	0800e3a9 	.word	0x0800e3a9
 800e354:	0800e3bd 	.word	0x0800e3bd
 800e358:	0800e339 	.word	0x0800e339
 800e35c:	0800e339 	.word	0x0800e339
 800e360:	0800e339 	.word	0x0800e339
 800e364:	0800e339 	.word	0x0800e339
 800e368:	0800e3bd 	.word	0x0800e3bd
 800e36c:	0800e339 	.word	0x0800e339
 800e370:	0800e339 	.word	0x0800e339
 800e374:	0800e339 	.word	0x0800e339
 800e378:	0800e339 	.word	0x0800e339
 800e37c:	0800e4bd 	.word	0x0800e4bd
 800e380:	0800e3e7 	.word	0x0800e3e7
 800e384:	0800e477 	.word	0x0800e477
 800e388:	0800e339 	.word	0x0800e339
 800e38c:	0800e339 	.word	0x0800e339
 800e390:	0800e4df 	.word	0x0800e4df
 800e394:	0800e339 	.word	0x0800e339
 800e398:	0800e3e7 	.word	0x0800e3e7
 800e39c:	0800e339 	.word	0x0800e339
 800e3a0:	0800e339 	.word	0x0800e339
 800e3a4:	0800e47f 	.word	0x0800e47f
 800e3a8:	6833      	ldr	r3, [r6, #0]
 800e3aa:	1d1a      	adds	r2, r3, #4
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	6032      	str	r2, [r6, #0]
 800e3b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e3b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e3b8:	2301      	movs	r3, #1
 800e3ba:	e09d      	b.n	800e4f8 <_printf_i+0x1e8>
 800e3bc:	6833      	ldr	r3, [r6, #0]
 800e3be:	6820      	ldr	r0, [r4, #0]
 800e3c0:	1d19      	adds	r1, r3, #4
 800e3c2:	6031      	str	r1, [r6, #0]
 800e3c4:	0606      	lsls	r6, r0, #24
 800e3c6:	d501      	bpl.n	800e3cc <_printf_i+0xbc>
 800e3c8:	681d      	ldr	r5, [r3, #0]
 800e3ca:	e003      	b.n	800e3d4 <_printf_i+0xc4>
 800e3cc:	0645      	lsls	r5, r0, #25
 800e3ce:	d5fb      	bpl.n	800e3c8 <_printf_i+0xb8>
 800e3d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e3d4:	2d00      	cmp	r5, #0
 800e3d6:	da03      	bge.n	800e3e0 <_printf_i+0xd0>
 800e3d8:	232d      	movs	r3, #45	@ 0x2d
 800e3da:	426d      	negs	r5, r5
 800e3dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e3e0:	4859      	ldr	r0, [pc, #356]	@ (800e548 <_printf_i+0x238>)
 800e3e2:	230a      	movs	r3, #10
 800e3e4:	e011      	b.n	800e40a <_printf_i+0xfa>
 800e3e6:	6821      	ldr	r1, [r4, #0]
 800e3e8:	6833      	ldr	r3, [r6, #0]
 800e3ea:	0608      	lsls	r0, r1, #24
 800e3ec:	f853 5b04 	ldr.w	r5, [r3], #4
 800e3f0:	d402      	bmi.n	800e3f8 <_printf_i+0xe8>
 800e3f2:	0649      	lsls	r1, r1, #25
 800e3f4:	bf48      	it	mi
 800e3f6:	b2ad      	uxthmi	r5, r5
 800e3f8:	2f6f      	cmp	r7, #111	@ 0x6f
 800e3fa:	4853      	ldr	r0, [pc, #332]	@ (800e548 <_printf_i+0x238>)
 800e3fc:	6033      	str	r3, [r6, #0]
 800e3fe:	bf14      	ite	ne
 800e400:	230a      	movne	r3, #10
 800e402:	2308      	moveq	r3, #8
 800e404:	2100      	movs	r1, #0
 800e406:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e40a:	6866      	ldr	r6, [r4, #4]
 800e40c:	60a6      	str	r6, [r4, #8]
 800e40e:	2e00      	cmp	r6, #0
 800e410:	bfa2      	ittt	ge
 800e412:	6821      	ldrge	r1, [r4, #0]
 800e414:	f021 0104 	bicge.w	r1, r1, #4
 800e418:	6021      	strge	r1, [r4, #0]
 800e41a:	b90d      	cbnz	r5, 800e420 <_printf_i+0x110>
 800e41c:	2e00      	cmp	r6, #0
 800e41e:	d04b      	beq.n	800e4b8 <_printf_i+0x1a8>
 800e420:	4616      	mov	r6, r2
 800e422:	fbb5 f1f3 	udiv	r1, r5, r3
 800e426:	fb03 5711 	mls	r7, r3, r1, r5
 800e42a:	5dc7      	ldrb	r7, [r0, r7]
 800e42c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e430:	462f      	mov	r7, r5
 800e432:	42bb      	cmp	r3, r7
 800e434:	460d      	mov	r5, r1
 800e436:	d9f4      	bls.n	800e422 <_printf_i+0x112>
 800e438:	2b08      	cmp	r3, #8
 800e43a:	d10b      	bne.n	800e454 <_printf_i+0x144>
 800e43c:	6823      	ldr	r3, [r4, #0]
 800e43e:	07df      	lsls	r7, r3, #31
 800e440:	d508      	bpl.n	800e454 <_printf_i+0x144>
 800e442:	6923      	ldr	r3, [r4, #16]
 800e444:	6861      	ldr	r1, [r4, #4]
 800e446:	4299      	cmp	r1, r3
 800e448:	bfde      	ittt	le
 800e44a:	2330      	movle	r3, #48	@ 0x30
 800e44c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e450:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e454:	1b92      	subs	r2, r2, r6
 800e456:	6122      	str	r2, [r4, #16]
 800e458:	f8cd a000 	str.w	sl, [sp]
 800e45c:	464b      	mov	r3, r9
 800e45e:	aa03      	add	r2, sp, #12
 800e460:	4621      	mov	r1, r4
 800e462:	4640      	mov	r0, r8
 800e464:	f7ff fee6 	bl	800e234 <_printf_common>
 800e468:	3001      	adds	r0, #1
 800e46a:	d14a      	bne.n	800e502 <_printf_i+0x1f2>
 800e46c:	f04f 30ff 	mov.w	r0, #4294967295
 800e470:	b004      	add	sp, #16
 800e472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e476:	6823      	ldr	r3, [r4, #0]
 800e478:	f043 0320 	orr.w	r3, r3, #32
 800e47c:	6023      	str	r3, [r4, #0]
 800e47e:	4833      	ldr	r0, [pc, #204]	@ (800e54c <_printf_i+0x23c>)
 800e480:	2778      	movs	r7, #120	@ 0x78
 800e482:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e486:	6823      	ldr	r3, [r4, #0]
 800e488:	6831      	ldr	r1, [r6, #0]
 800e48a:	061f      	lsls	r7, r3, #24
 800e48c:	f851 5b04 	ldr.w	r5, [r1], #4
 800e490:	d402      	bmi.n	800e498 <_printf_i+0x188>
 800e492:	065f      	lsls	r7, r3, #25
 800e494:	bf48      	it	mi
 800e496:	b2ad      	uxthmi	r5, r5
 800e498:	6031      	str	r1, [r6, #0]
 800e49a:	07d9      	lsls	r1, r3, #31
 800e49c:	bf44      	itt	mi
 800e49e:	f043 0320 	orrmi.w	r3, r3, #32
 800e4a2:	6023      	strmi	r3, [r4, #0]
 800e4a4:	b11d      	cbz	r5, 800e4ae <_printf_i+0x19e>
 800e4a6:	2310      	movs	r3, #16
 800e4a8:	e7ac      	b.n	800e404 <_printf_i+0xf4>
 800e4aa:	4827      	ldr	r0, [pc, #156]	@ (800e548 <_printf_i+0x238>)
 800e4ac:	e7e9      	b.n	800e482 <_printf_i+0x172>
 800e4ae:	6823      	ldr	r3, [r4, #0]
 800e4b0:	f023 0320 	bic.w	r3, r3, #32
 800e4b4:	6023      	str	r3, [r4, #0]
 800e4b6:	e7f6      	b.n	800e4a6 <_printf_i+0x196>
 800e4b8:	4616      	mov	r6, r2
 800e4ba:	e7bd      	b.n	800e438 <_printf_i+0x128>
 800e4bc:	6833      	ldr	r3, [r6, #0]
 800e4be:	6825      	ldr	r5, [r4, #0]
 800e4c0:	6961      	ldr	r1, [r4, #20]
 800e4c2:	1d18      	adds	r0, r3, #4
 800e4c4:	6030      	str	r0, [r6, #0]
 800e4c6:	062e      	lsls	r6, r5, #24
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	d501      	bpl.n	800e4d0 <_printf_i+0x1c0>
 800e4cc:	6019      	str	r1, [r3, #0]
 800e4ce:	e002      	b.n	800e4d6 <_printf_i+0x1c6>
 800e4d0:	0668      	lsls	r0, r5, #25
 800e4d2:	d5fb      	bpl.n	800e4cc <_printf_i+0x1bc>
 800e4d4:	8019      	strh	r1, [r3, #0]
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	6123      	str	r3, [r4, #16]
 800e4da:	4616      	mov	r6, r2
 800e4dc:	e7bc      	b.n	800e458 <_printf_i+0x148>
 800e4de:	6833      	ldr	r3, [r6, #0]
 800e4e0:	1d1a      	adds	r2, r3, #4
 800e4e2:	6032      	str	r2, [r6, #0]
 800e4e4:	681e      	ldr	r6, [r3, #0]
 800e4e6:	6862      	ldr	r2, [r4, #4]
 800e4e8:	2100      	movs	r1, #0
 800e4ea:	4630      	mov	r0, r6
 800e4ec:	f7f1 fef8 	bl	80002e0 <memchr>
 800e4f0:	b108      	cbz	r0, 800e4f6 <_printf_i+0x1e6>
 800e4f2:	1b80      	subs	r0, r0, r6
 800e4f4:	6060      	str	r0, [r4, #4]
 800e4f6:	6863      	ldr	r3, [r4, #4]
 800e4f8:	6123      	str	r3, [r4, #16]
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e500:	e7aa      	b.n	800e458 <_printf_i+0x148>
 800e502:	6923      	ldr	r3, [r4, #16]
 800e504:	4632      	mov	r2, r6
 800e506:	4649      	mov	r1, r9
 800e508:	4640      	mov	r0, r8
 800e50a:	47d0      	blx	sl
 800e50c:	3001      	adds	r0, #1
 800e50e:	d0ad      	beq.n	800e46c <_printf_i+0x15c>
 800e510:	6823      	ldr	r3, [r4, #0]
 800e512:	079b      	lsls	r3, r3, #30
 800e514:	d413      	bmi.n	800e53e <_printf_i+0x22e>
 800e516:	68e0      	ldr	r0, [r4, #12]
 800e518:	9b03      	ldr	r3, [sp, #12]
 800e51a:	4298      	cmp	r0, r3
 800e51c:	bfb8      	it	lt
 800e51e:	4618      	movlt	r0, r3
 800e520:	e7a6      	b.n	800e470 <_printf_i+0x160>
 800e522:	2301      	movs	r3, #1
 800e524:	4632      	mov	r2, r6
 800e526:	4649      	mov	r1, r9
 800e528:	4640      	mov	r0, r8
 800e52a:	47d0      	blx	sl
 800e52c:	3001      	adds	r0, #1
 800e52e:	d09d      	beq.n	800e46c <_printf_i+0x15c>
 800e530:	3501      	adds	r5, #1
 800e532:	68e3      	ldr	r3, [r4, #12]
 800e534:	9903      	ldr	r1, [sp, #12]
 800e536:	1a5b      	subs	r3, r3, r1
 800e538:	42ab      	cmp	r3, r5
 800e53a:	dcf2      	bgt.n	800e522 <_printf_i+0x212>
 800e53c:	e7eb      	b.n	800e516 <_printf_i+0x206>
 800e53e:	2500      	movs	r5, #0
 800e540:	f104 0619 	add.w	r6, r4, #25
 800e544:	e7f5      	b.n	800e532 <_printf_i+0x222>
 800e546:	bf00      	nop
 800e548:	08012852 	.word	0x08012852
 800e54c:	08012863 	.word	0x08012863

0800e550 <_scanf_float>:
 800e550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e554:	b087      	sub	sp, #28
 800e556:	4617      	mov	r7, r2
 800e558:	9303      	str	r3, [sp, #12]
 800e55a:	688b      	ldr	r3, [r1, #8]
 800e55c:	1e5a      	subs	r2, r3, #1
 800e55e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e562:	bf81      	itttt	hi
 800e564:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e568:	eb03 0b05 	addhi.w	fp, r3, r5
 800e56c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e570:	608b      	strhi	r3, [r1, #8]
 800e572:	680b      	ldr	r3, [r1, #0]
 800e574:	460a      	mov	r2, r1
 800e576:	f04f 0500 	mov.w	r5, #0
 800e57a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e57e:	f842 3b1c 	str.w	r3, [r2], #28
 800e582:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e586:	4680      	mov	r8, r0
 800e588:	460c      	mov	r4, r1
 800e58a:	bf98      	it	ls
 800e58c:	f04f 0b00 	movls.w	fp, #0
 800e590:	9201      	str	r2, [sp, #4]
 800e592:	4616      	mov	r6, r2
 800e594:	46aa      	mov	sl, r5
 800e596:	46a9      	mov	r9, r5
 800e598:	9502      	str	r5, [sp, #8]
 800e59a:	68a2      	ldr	r2, [r4, #8]
 800e59c:	b152      	cbz	r2, 800e5b4 <_scanf_float+0x64>
 800e59e:	683b      	ldr	r3, [r7, #0]
 800e5a0:	781b      	ldrb	r3, [r3, #0]
 800e5a2:	2b4e      	cmp	r3, #78	@ 0x4e
 800e5a4:	d864      	bhi.n	800e670 <_scanf_float+0x120>
 800e5a6:	2b40      	cmp	r3, #64	@ 0x40
 800e5a8:	d83c      	bhi.n	800e624 <_scanf_float+0xd4>
 800e5aa:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e5ae:	b2c8      	uxtb	r0, r1
 800e5b0:	280e      	cmp	r0, #14
 800e5b2:	d93a      	bls.n	800e62a <_scanf_float+0xda>
 800e5b4:	f1b9 0f00 	cmp.w	r9, #0
 800e5b8:	d003      	beq.n	800e5c2 <_scanf_float+0x72>
 800e5ba:	6823      	ldr	r3, [r4, #0]
 800e5bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e5c0:	6023      	str	r3, [r4, #0]
 800e5c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e5c6:	f1ba 0f01 	cmp.w	sl, #1
 800e5ca:	f200 8117 	bhi.w	800e7fc <_scanf_float+0x2ac>
 800e5ce:	9b01      	ldr	r3, [sp, #4]
 800e5d0:	429e      	cmp	r6, r3
 800e5d2:	f200 8108 	bhi.w	800e7e6 <_scanf_float+0x296>
 800e5d6:	2001      	movs	r0, #1
 800e5d8:	b007      	add	sp, #28
 800e5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5de:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e5e2:	2a0d      	cmp	r2, #13
 800e5e4:	d8e6      	bhi.n	800e5b4 <_scanf_float+0x64>
 800e5e6:	a101      	add	r1, pc, #4	@ (adr r1, 800e5ec <_scanf_float+0x9c>)
 800e5e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e5ec:	0800e733 	.word	0x0800e733
 800e5f0:	0800e5b5 	.word	0x0800e5b5
 800e5f4:	0800e5b5 	.word	0x0800e5b5
 800e5f8:	0800e5b5 	.word	0x0800e5b5
 800e5fc:	0800e793 	.word	0x0800e793
 800e600:	0800e76b 	.word	0x0800e76b
 800e604:	0800e5b5 	.word	0x0800e5b5
 800e608:	0800e5b5 	.word	0x0800e5b5
 800e60c:	0800e741 	.word	0x0800e741
 800e610:	0800e5b5 	.word	0x0800e5b5
 800e614:	0800e5b5 	.word	0x0800e5b5
 800e618:	0800e5b5 	.word	0x0800e5b5
 800e61c:	0800e5b5 	.word	0x0800e5b5
 800e620:	0800e6f9 	.word	0x0800e6f9
 800e624:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800e628:	e7db      	b.n	800e5e2 <_scanf_float+0x92>
 800e62a:	290e      	cmp	r1, #14
 800e62c:	d8c2      	bhi.n	800e5b4 <_scanf_float+0x64>
 800e62e:	a001      	add	r0, pc, #4	@ (adr r0, 800e634 <_scanf_float+0xe4>)
 800e630:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e634:	0800e6e9 	.word	0x0800e6e9
 800e638:	0800e5b5 	.word	0x0800e5b5
 800e63c:	0800e6e9 	.word	0x0800e6e9
 800e640:	0800e77f 	.word	0x0800e77f
 800e644:	0800e5b5 	.word	0x0800e5b5
 800e648:	0800e691 	.word	0x0800e691
 800e64c:	0800e6cf 	.word	0x0800e6cf
 800e650:	0800e6cf 	.word	0x0800e6cf
 800e654:	0800e6cf 	.word	0x0800e6cf
 800e658:	0800e6cf 	.word	0x0800e6cf
 800e65c:	0800e6cf 	.word	0x0800e6cf
 800e660:	0800e6cf 	.word	0x0800e6cf
 800e664:	0800e6cf 	.word	0x0800e6cf
 800e668:	0800e6cf 	.word	0x0800e6cf
 800e66c:	0800e6cf 	.word	0x0800e6cf
 800e670:	2b6e      	cmp	r3, #110	@ 0x6e
 800e672:	d809      	bhi.n	800e688 <_scanf_float+0x138>
 800e674:	2b60      	cmp	r3, #96	@ 0x60
 800e676:	d8b2      	bhi.n	800e5de <_scanf_float+0x8e>
 800e678:	2b54      	cmp	r3, #84	@ 0x54
 800e67a:	d07b      	beq.n	800e774 <_scanf_float+0x224>
 800e67c:	2b59      	cmp	r3, #89	@ 0x59
 800e67e:	d199      	bne.n	800e5b4 <_scanf_float+0x64>
 800e680:	2d07      	cmp	r5, #7
 800e682:	d197      	bne.n	800e5b4 <_scanf_float+0x64>
 800e684:	2508      	movs	r5, #8
 800e686:	e02c      	b.n	800e6e2 <_scanf_float+0x192>
 800e688:	2b74      	cmp	r3, #116	@ 0x74
 800e68a:	d073      	beq.n	800e774 <_scanf_float+0x224>
 800e68c:	2b79      	cmp	r3, #121	@ 0x79
 800e68e:	e7f6      	b.n	800e67e <_scanf_float+0x12e>
 800e690:	6821      	ldr	r1, [r4, #0]
 800e692:	05c8      	lsls	r0, r1, #23
 800e694:	d51b      	bpl.n	800e6ce <_scanf_float+0x17e>
 800e696:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800e69a:	6021      	str	r1, [r4, #0]
 800e69c:	f109 0901 	add.w	r9, r9, #1
 800e6a0:	f1bb 0f00 	cmp.w	fp, #0
 800e6a4:	d003      	beq.n	800e6ae <_scanf_float+0x15e>
 800e6a6:	3201      	adds	r2, #1
 800e6a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e6ac:	60a2      	str	r2, [r4, #8]
 800e6ae:	68a3      	ldr	r3, [r4, #8]
 800e6b0:	3b01      	subs	r3, #1
 800e6b2:	60a3      	str	r3, [r4, #8]
 800e6b4:	6923      	ldr	r3, [r4, #16]
 800e6b6:	3301      	adds	r3, #1
 800e6b8:	6123      	str	r3, [r4, #16]
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	3b01      	subs	r3, #1
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	607b      	str	r3, [r7, #4]
 800e6c2:	f340 8087 	ble.w	800e7d4 <_scanf_float+0x284>
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	3301      	adds	r3, #1
 800e6ca:	603b      	str	r3, [r7, #0]
 800e6cc:	e765      	b.n	800e59a <_scanf_float+0x4a>
 800e6ce:	eb1a 0105 	adds.w	r1, sl, r5
 800e6d2:	f47f af6f 	bne.w	800e5b4 <_scanf_float+0x64>
 800e6d6:	6822      	ldr	r2, [r4, #0]
 800e6d8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800e6dc:	6022      	str	r2, [r4, #0]
 800e6de:	460d      	mov	r5, r1
 800e6e0:	468a      	mov	sl, r1
 800e6e2:	f806 3b01 	strb.w	r3, [r6], #1
 800e6e6:	e7e2      	b.n	800e6ae <_scanf_float+0x15e>
 800e6e8:	6822      	ldr	r2, [r4, #0]
 800e6ea:	0610      	lsls	r0, r2, #24
 800e6ec:	f57f af62 	bpl.w	800e5b4 <_scanf_float+0x64>
 800e6f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e6f4:	6022      	str	r2, [r4, #0]
 800e6f6:	e7f4      	b.n	800e6e2 <_scanf_float+0x192>
 800e6f8:	f1ba 0f00 	cmp.w	sl, #0
 800e6fc:	d10e      	bne.n	800e71c <_scanf_float+0x1cc>
 800e6fe:	f1b9 0f00 	cmp.w	r9, #0
 800e702:	d10e      	bne.n	800e722 <_scanf_float+0x1d2>
 800e704:	6822      	ldr	r2, [r4, #0]
 800e706:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e70a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e70e:	d108      	bne.n	800e722 <_scanf_float+0x1d2>
 800e710:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e714:	6022      	str	r2, [r4, #0]
 800e716:	f04f 0a01 	mov.w	sl, #1
 800e71a:	e7e2      	b.n	800e6e2 <_scanf_float+0x192>
 800e71c:	f1ba 0f02 	cmp.w	sl, #2
 800e720:	d055      	beq.n	800e7ce <_scanf_float+0x27e>
 800e722:	2d01      	cmp	r5, #1
 800e724:	d002      	beq.n	800e72c <_scanf_float+0x1dc>
 800e726:	2d04      	cmp	r5, #4
 800e728:	f47f af44 	bne.w	800e5b4 <_scanf_float+0x64>
 800e72c:	3501      	adds	r5, #1
 800e72e:	b2ed      	uxtb	r5, r5
 800e730:	e7d7      	b.n	800e6e2 <_scanf_float+0x192>
 800e732:	f1ba 0f01 	cmp.w	sl, #1
 800e736:	f47f af3d 	bne.w	800e5b4 <_scanf_float+0x64>
 800e73a:	f04f 0a02 	mov.w	sl, #2
 800e73e:	e7d0      	b.n	800e6e2 <_scanf_float+0x192>
 800e740:	b97d      	cbnz	r5, 800e762 <_scanf_float+0x212>
 800e742:	f1b9 0f00 	cmp.w	r9, #0
 800e746:	f47f af38 	bne.w	800e5ba <_scanf_float+0x6a>
 800e74a:	6822      	ldr	r2, [r4, #0]
 800e74c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e750:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e754:	f040 8101 	bne.w	800e95a <_scanf_float+0x40a>
 800e758:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e75c:	6022      	str	r2, [r4, #0]
 800e75e:	2501      	movs	r5, #1
 800e760:	e7bf      	b.n	800e6e2 <_scanf_float+0x192>
 800e762:	2d03      	cmp	r5, #3
 800e764:	d0e2      	beq.n	800e72c <_scanf_float+0x1dc>
 800e766:	2d05      	cmp	r5, #5
 800e768:	e7de      	b.n	800e728 <_scanf_float+0x1d8>
 800e76a:	2d02      	cmp	r5, #2
 800e76c:	f47f af22 	bne.w	800e5b4 <_scanf_float+0x64>
 800e770:	2503      	movs	r5, #3
 800e772:	e7b6      	b.n	800e6e2 <_scanf_float+0x192>
 800e774:	2d06      	cmp	r5, #6
 800e776:	f47f af1d 	bne.w	800e5b4 <_scanf_float+0x64>
 800e77a:	2507      	movs	r5, #7
 800e77c:	e7b1      	b.n	800e6e2 <_scanf_float+0x192>
 800e77e:	6822      	ldr	r2, [r4, #0]
 800e780:	0591      	lsls	r1, r2, #22
 800e782:	f57f af17 	bpl.w	800e5b4 <_scanf_float+0x64>
 800e786:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e78a:	6022      	str	r2, [r4, #0]
 800e78c:	f8cd 9008 	str.w	r9, [sp, #8]
 800e790:	e7a7      	b.n	800e6e2 <_scanf_float+0x192>
 800e792:	6822      	ldr	r2, [r4, #0]
 800e794:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e798:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e79c:	d006      	beq.n	800e7ac <_scanf_float+0x25c>
 800e79e:	0550      	lsls	r0, r2, #21
 800e7a0:	f57f af08 	bpl.w	800e5b4 <_scanf_float+0x64>
 800e7a4:	f1b9 0f00 	cmp.w	r9, #0
 800e7a8:	f000 80d7 	beq.w	800e95a <_scanf_float+0x40a>
 800e7ac:	0591      	lsls	r1, r2, #22
 800e7ae:	bf58      	it	pl
 800e7b0:	9902      	ldrpl	r1, [sp, #8]
 800e7b2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e7b6:	bf58      	it	pl
 800e7b8:	eba9 0101 	subpl.w	r1, r9, r1
 800e7bc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800e7c0:	bf58      	it	pl
 800e7c2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e7c6:	6022      	str	r2, [r4, #0]
 800e7c8:	f04f 0900 	mov.w	r9, #0
 800e7cc:	e789      	b.n	800e6e2 <_scanf_float+0x192>
 800e7ce:	f04f 0a03 	mov.w	sl, #3
 800e7d2:	e786      	b.n	800e6e2 <_scanf_float+0x192>
 800e7d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e7d8:	4639      	mov	r1, r7
 800e7da:	4640      	mov	r0, r8
 800e7dc:	4798      	blx	r3
 800e7de:	2800      	cmp	r0, #0
 800e7e0:	f43f aedb 	beq.w	800e59a <_scanf_float+0x4a>
 800e7e4:	e6e6      	b.n	800e5b4 <_scanf_float+0x64>
 800e7e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e7ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e7ee:	463a      	mov	r2, r7
 800e7f0:	4640      	mov	r0, r8
 800e7f2:	4798      	blx	r3
 800e7f4:	6923      	ldr	r3, [r4, #16]
 800e7f6:	3b01      	subs	r3, #1
 800e7f8:	6123      	str	r3, [r4, #16]
 800e7fa:	e6e8      	b.n	800e5ce <_scanf_float+0x7e>
 800e7fc:	1e6b      	subs	r3, r5, #1
 800e7fe:	2b06      	cmp	r3, #6
 800e800:	d824      	bhi.n	800e84c <_scanf_float+0x2fc>
 800e802:	2d02      	cmp	r5, #2
 800e804:	d836      	bhi.n	800e874 <_scanf_float+0x324>
 800e806:	9b01      	ldr	r3, [sp, #4]
 800e808:	429e      	cmp	r6, r3
 800e80a:	f67f aee4 	bls.w	800e5d6 <_scanf_float+0x86>
 800e80e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e812:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e816:	463a      	mov	r2, r7
 800e818:	4640      	mov	r0, r8
 800e81a:	4798      	blx	r3
 800e81c:	6923      	ldr	r3, [r4, #16]
 800e81e:	3b01      	subs	r3, #1
 800e820:	6123      	str	r3, [r4, #16]
 800e822:	e7f0      	b.n	800e806 <_scanf_float+0x2b6>
 800e824:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e828:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800e82c:	463a      	mov	r2, r7
 800e82e:	4640      	mov	r0, r8
 800e830:	4798      	blx	r3
 800e832:	6923      	ldr	r3, [r4, #16]
 800e834:	3b01      	subs	r3, #1
 800e836:	6123      	str	r3, [r4, #16]
 800e838:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e83c:	fa5f fa8a 	uxtb.w	sl, sl
 800e840:	f1ba 0f02 	cmp.w	sl, #2
 800e844:	d1ee      	bne.n	800e824 <_scanf_float+0x2d4>
 800e846:	3d03      	subs	r5, #3
 800e848:	b2ed      	uxtb	r5, r5
 800e84a:	1b76      	subs	r6, r6, r5
 800e84c:	6823      	ldr	r3, [r4, #0]
 800e84e:	05da      	lsls	r2, r3, #23
 800e850:	d530      	bpl.n	800e8b4 <_scanf_float+0x364>
 800e852:	055b      	lsls	r3, r3, #21
 800e854:	d511      	bpl.n	800e87a <_scanf_float+0x32a>
 800e856:	9b01      	ldr	r3, [sp, #4]
 800e858:	429e      	cmp	r6, r3
 800e85a:	f67f aebc 	bls.w	800e5d6 <_scanf_float+0x86>
 800e85e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e862:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e866:	463a      	mov	r2, r7
 800e868:	4640      	mov	r0, r8
 800e86a:	4798      	blx	r3
 800e86c:	6923      	ldr	r3, [r4, #16]
 800e86e:	3b01      	subs	r3, #1
 800e870:	6123      	str	r3, [r4, #16]
 800e872:	e7f0      	b.n	800e856 <_scanf_float+0x306>
 800e874:	46aa      	mov	sl, r5
 800e876:	46b3      	mov	fp, r6
 800e878:	e7de      	b.n	800e838 <_scanf_float+0x2e8>
 800e87a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e87e:	6923      	ldr	r3, [r4, #16]
 800e880:	2965      	cmp	r1, #101	@ 0x65
 800e882:	f103 33ff 	add.w	r3, r3, #4294967295
 800e886:	f106 35ff 	add.w	r5, r6, #4294967295
 800e88a:	6123      	str	r3, [r4, #16]
 800e88c:	d00c      	beq.n	800e8a8 <_scanf_float+0x358>
 800e88e:	2945      	cmp	r1, #69	@ 0x45
 800e890:	d00a      	beq.n	800e8a8 <_scanf_float+0x358>
 800e892:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e896:	463a      	mov	r2, r7
 800e898:	4640      	mov	r0, r8
 800e89a:	4798      	blx	r3
 800e89c:	6923      	ldr	r3, [r4, #16]
 800e89e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e8a2:	3b01      	subs	r3, #1
 800e8a4:	1eb5      	subs	r5, r6, #2
 800e8a6:	6123      	str	r3, [r4, #16]
 800e8a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e8ac:	463a      	mov	r2, r7
 800e8ae:	4640      	mov	r0, r8
 800e8b0:	4798      	blx	r3
 800e8b2:	462e      	mov	r6, r5
 800e8b4:	6822      	ldr	r2, [r4, #0]
 800e8b6:	f012 0210 	ands.w	r2, r2, #16
 800e8ba:	d001      	beq.n	800e8c0 <_scanf_float+0x370>
 800e8bc:	2000      	movs	r0, #0
 800e8be:	e68b      	b.n	800e5d8 <_scanf_float+0x88>
 800e8c0:	7032      	strb	r2, [r6, #0]
 800e8c2:	6823      	ldr	r3, [r4, #0]
 800e8c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e8c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e8cc:	d11a      	bne.n	800e904 <_scanf_float+0x3b4>
 800e8ce:	9b02      	ldr	r3, [sp, #8]
 800e8d0:	454b      	cmp	r3, r9
 800e8d2:	eba3 0209 	sub.w	r2, r3, r9
 800e8d6:	d121      	bne.n	800e91c <_scanf_float+0x3cc>
 800e8d8:	9901      	ldr	r1, [sp, #4]
 800e8da:	2200      	movs	r2, #0
 800e8dc:	4640      	mov	r0, r8
 800e8de:	f002 fb2d 	bl	8010f3c <_strtod_r>
 800e8e2:	9b03      	ldr	r3, [sp, #12]
 800e8e4:	6821      	ldr	r1, [r4, #0]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	f011 0f02 	tst.w	r1, #2
 800e8ec:	f103 0204 	add.w	r2, r3, #4
 800e8f0:	d01f      	beq.n	800e932 <_scanf_float+0x3e2>
 800e8f2:	9903      	ldr	r1, [sp, #12]
 800e8f4:	600a      	str	r2, [r1, #0]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	ed83 0b00 	vstr	d0, [r3]
 800e8fc:	68e3      	ldr	r3, [r4, #12]
 800e8fe:	3301      	adds	r3, #1
 800e900:	60e3      	str	r3, [r4, #12]
 800e902:	e7db      	b.n	800e8bc <_scanf_float+0x36c>
 800e904:	9b04      	ldr	r3, [sp, #16]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d0e6      	beq.n	800e8d8 <_scanf_float+0x388>
 800e90a:	9905      	ldr	r1, [sp, #20]
 800e90c:	230a      	movs	r3, #10
 800e90e:	3101      	adds	r1, #1
 800e910:	4640      	mov	r0, r8
 800e912:	f002 fb93 	bl	801103c <_strtol_r>
 800e916:	9b04      	ldr	r3, [sp, #16]
 800e918:	9e05      	ldr	r6, [sp, #20]
 800e91a:	1ac2      	subs	r2, r0, r3
 800e91c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e920:	429e      	cmp	r6, r3
 800e922:	bf28      	it	cs
 800e924:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e928:	490d      	ldr	r1, [pc, #52]	@ (800e960 <_scanf_float+0x410>)
 800e92a:	4630      	mov	r0, r6
 800e92c:	f000 f8de 	bl	800eaec <siprintf>
 800e930:	e7d2      	b.n	800e8d8 <_scanf_float+0x388>
 800e932:	f011 0f04 	tst.w	r1, #4
 800e936:	9903      	ldr	r1, [sp, #12]
 800e938:	600a      	str	r2, [r1, #0]
 800e93a:	d1dc      	bne.n	800e8f6 <_scanf_float+0x3a6>
 800e93c:	eeb4 0b40 	vcmp.f64	d0, d0
 800e940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e944:	681d      	ldr	r5, [r3, #0]
 800e946:	d705      	bvc.n	800e954 <_scanf_float+0x404>
 800e948:	4806      	ldr	r0, [pc, #24]	@ (800e964 <_scanf_float+0x414>)
 800e94a:	f000 f9b3 	bl	800ecb4 <nanf>
 800e94e:	ed85 0a00 	vstr	s0, [r5]
 800e952:	e7d3      	b.n	800e8fc <_scanf_float+0x3ac>
 800e954:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800e958:	e7f9      	b.n	800e94e <_scanf_float+0x3fe>
 800e95a:	f04f 0900 	mov.w	r9, #0
 800e95e:	e630      	b.n	800e5c2 <_scanf_float+0x72>
 800e960:	08012874 	.word	0x08012874
 800e964:	08012c0d 	.word	0x08012c0d

0800e968 <std>:
 800e968:	2300      	movs	r3, #0
 800e96a:	b510      	push	{r4, lr}
 800e96c:	4604      	mov	r4, r0
 800e96e:	e9c0 3300 	strd	r3, r3, [r0]
 800e972:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e976:	6083      	str	r3, [r0, #8]
 800e978:	8181      	strh	r1, [r0, #12]
 800e97a:	6643      	str	r3, [r0, #100]	@ 0x64
 800e97c:	81c2      	strh	r2, [r0, #14]
 800e97e:	6183      	str	r3, [r0, #24]
 800e980:	4619      	mov	r1, r3
 800e982:	2208      	movs	r2, #8
 800e984:	305c      	adds	r0, #92	@ 0x5c
 800e986:	f000 f914 	bl	800ebb2 <memset>
 800e98a:	4b0d      	ldr	r3, [pc, #52]	@ (800e9c0 <std+0x58>)
 800e98c:	6263      	str	r3, [r4, #36]	@ 0x24
 800e98e:	4b0d      	ldr	r3, [pc, #52]	@ (800e9c4 <std+0x5c>)
 800e990:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e992:	4b0d      	ldr	r3, [pc, #52]	@ (800e9c8 <std+0x60>)
 800e994:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e996:	4b0d      	ldr	r3, [pc, #52]	@ (800e9cc <std+0x64>)
 800e998:	6323      	str	r3, [r4, #48]	@ 0x30
 800e99a:	4b0d      	ldr	r3, [pc, #52]	@ (800e9d0 <std+0x68>)
 800e99c:	6224      	str	r4, [r4, #32]
 800e99e:	429c      	cmp	r4, r3
 800e9a0:	d006      	beq.n	800e9b0 <std+0x48>
 800e9a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e9a6:	4294      	cmp	r4, r2
 800e9a8:	d002      	beq.n	800e9b0 <std+0x48>
 800e9aa:	33d0      	adds	r3, #208	@ 0xd0
 800e9ac:	429c      	cmp	r4, r3
 800e9ae:	d105      	bne.n	800e9bc <std+0x54>
 800e9b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e9b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9b8:	f000 b978 	b.w	800ecac <__retarget_lock_init_recursive>
 800e9bc:	bd10      	pop	{r4, pc}
 800e9be:	bf00      	nop
 800e9c0:	0800eb2d 	.word	0x0800eb2d
 800e9c4:	0800eb4f 	.word	0x0800eb4f
 800e9c8:	0800eb87 	.word	0x0800eb87
 800e9cc:	0800ebab 	.word	0x0800ebab
 800e9d0:	24000434 	.word	0x24000434

0800e9d4 <stdio_exit_handler>:
 800e9d4:	4a02      	ldr	r2, [pc, #8]	@ (800e9e0 <stdio_exit_handler+0xc>)
 800e9d6:	4903      	ldr	r1, [pc, #12]	@ (800e9e4 <stdio_exit_handler+0x10>)
 800e9d8:	4803      	ldr	r0, [pc, #12]	@ (800e9e8 <stdio_exit_handler+0x14>)
 800e9da:	f000 b869 	b.w	800eab0 <_fwalk_sglue>
 800e9de:	bf00      	nop
 800e9e0:	24000010 	.word	0x24000010
 800e9e4:	080113f9 	.word	0x080113f9
 800e9e8:	24000020 	.word	0x24000020

0800e9ec <cleanup_stdio>:
 800e9ec:	6841      	ldr	r1, [r0, #4]
 800e9ee:	4b0c      	ldr	r3, [pc, #48]	@ (800ea20 <cleanup_stdio+0x34>)
 800e9f0:	4299      	cmp	r1, r3
 800e9f2:	b510      	push	{r4, lr}
 800e9f4:	4604      	mov	r4, r0
 800e9f6:	d001      	beq.n	800e9fc <cleanup_stdio+0x10>
 800e9f8:	f002 fcfe 	bl	80113f8 <_fflush_r>
 800e9fc:	68a1      	ldr	r1, [r4, #8]
 800e9fe:	4b09      	ldr	r3, [pc, #36]	@ (800ea24 <cleanup_stdio+0x38>)
 800ea00:	4299      	cmp	r1, r3
 800ea02:	d002      	beq.n	800ea0a <cleanup_stdio+0x1e>
 800ea04:	4620      	mov	r0, r4
 800ea06:	f002 fcf7 	bl	80113f8 <_fflush_r>
 800ea0a:	68e1      	ldr	r1, [r4, #12]
 800ea0c:	4b06      	ldr	r3, [pc, #24]	@ (800ea28 <cleanup_stdio+0x3c>)
 800ea0e:	4299      	cmp	r1, r3
 800ea10:	d004      	beq.n	800ea1c <cleanup_stdio+0x30>
 800ea12:	4620      	mov	r0, r4
 800ea14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea18:	f002 bcee 	b.w	80113f8 <_fflush_r>
 800ea1c:	bd10      	pop	{r4, pc}
 800ea1e:	bf00      	nop
 800ea20:	24000434 	.word	0x24000434
 800ea24:	2400049c 	.word	0x2400049c
 800ea28:	24000504 	.word	0x24000504

0800ea2c <global_stdio_init.part.0>:
 800ea2c:	b510      	push	{r4, lr}
 800ea2e:	4b0b      	ldr	r3, [pc, #44]	@ (800ea5c <global_stdio_init.part.0+0x30>)
 800ea30:	4c0b      	ldr	r4, [pc, #44]	@ (800ea60 <global_stdio_init.part.0+0x34>)
 800ea32:	4a0c      	ldr	r2, [pc, #48]	@ (800ea64 <global_stdio_init.part.0+0x38>)
 800ea34:	601a      	str	r2, [r3, #0]
 800ea36:	4620      	mov	r0, r4
 800ea38:	2200      	movs	r2, #0
 800ea3a:	2104      	movs	r1, #4
 800ea3c:	f7ff ff94 	bl	800e968 <std>
 800ea40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ea44:	2201      	movs	r2, #1
 800ea46:	2109      	movs	r1, #9
 800ea48:	f7ff ff8e 	bl	800e968 <std>
 800ea4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ea50:	2202      	movs	r2, #2
 800ea52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea56:	2112      	movs	r1, #18
 800ea58:	f7ff bf86 	b.w	800e968 <std>
 800ea5c:	2400056c 	.word	0x2400056c
 800ea60:	24000434 	.word	0x24000434
 800ea64:	0800e9d5 	.word	0x0800e9d5

0800ea68 <__sfp_lock_acquire>:
 800ea68:	4801      	ldr	r0, [pc, #4]	@ (800ea70 <__sfp_lock_acquire+0x8>)
 800ea6a:	f000 b920 	b.w	800ecae <__retarget_lock_acquire_recursive>
 800ea6e:	bf00      	nop
 800ea70:	24000575 	.word	0x24000575

0800ea74 <__sfp_lock_release>:
 800ea74:	4801      	ldr	r0, [pc, #4]	@ (800ea7c <__sfp_lock_release+0x8>)
 800ea76:	f000 b91b 	b.w	800ecb0 <__retarget_lock_release_recursive>
 800ea7a:	bf00      	nop
 800ea7c:	24000575 	.word	0x24000575

0800ea80 <__sinit>:
 800ea80:	b510      	push	{r4, lr}
 800ea82:	4604      	mov	r4, r0
 800ea84:	f7ff fff0 	bl	800ea68 <__sfp_lock_acquire>
 800ea88:	6a23      	ldr	r3, [r4, #32]
 800ea8a:	b11b      	cbz	r3, 800ea94 <__sinit+0x14>
 800ea8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea90:	f7ff bff0 	b.w	800ea74 <__sfp_lock_release>
 800ea94:	4b04      	ldr	r3, [pc, #16]	@ (800eaa8 <__sinit+0x28>)
 800ea96:	6223      	str	r3, [r4, #32]
 800ea98:	4b04      	ldr	r3, [pc, #16]	@ (800eaac <__sinit+0x2c>)
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d1f5      	bne.n	800ea8c <__sinit+0xc>
 800eaa0:	f7ff ffc4 	bl	800ea2c <global_stdio_init.part.0>
 800eaa4:	e7f2      	b.n	800ea8c <__sinit+0xc>
 800eaa6:	bf00      	nop
 800eaa8:	0800e9ed 	.word	0x0800e9ed
 800eaac:	2400056c 	.word	0x2400056c

0800eab0 <_fwalk_sglue>:
 800eab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eab4:	4607      	mov	r7, r0
 800eab6:	4688      	mov	r8, r1
 800eab8:	4614      	mov	r4, r2
 800eaba:	2600      	movs	r6, #0
 800eabc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eac0:	f1b9 0901 	subs.w	r9, r9, #1
 800eac4:	d505      	bpl.n	800ead2 <_fwalk_sglue+0x22>
 800eac6:	6824      	ldr	r4, [r4, #0]
 800eac8:	2c00      	cmp	r4, #0
 800eaca:	d1f7      	bne.n	800eabc <_fwalk_sglue+0xc>
 800eacc:	4630      	mov	r0, r6
 800eace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ead2:	89ab      	ldrh	r3, [r5, #12]
 800ead4:	2b01      	cmp	r3, #1
 800ead6:	d907      	bls.n	800eae8 <_fwalk_sglue+0x38>
 800ead8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eadc:	3301      	adds	r3, #1
 800eade:	d003      	beq.n	800eae8 <_fwalk_sglue+0x38>
 800eae0:	4629      	mov	r1, r5
 800eae2:	4638      	mov	r0, r7
 800eae4:	47c0      	blx	r8
 800eae6:	4306      	orrs	r6, r0
 800eae8:	3568      	adds	r5, #104	@ 0x68
 800eaea:	e7e9      	b.n	800eac0 <_fwalk_sglue+0x10>

0800eaec <siprintf>:
 800eaec:	b40e      	push	{r1, r2, r3}
 800eaee:	b500      	push	{lr}
 800eaf0:	b09c      	sub	sp, #112	@ 0x70
 800eaf2:	ab1d      	add	r3, sp, #116	@ 0x74
 800eaf4:	9002      	str	r0, [sp, #8]
 800eaf6:	9006      	str	r0, [sp, #24]
 800eaf8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800eafc:	4809      	ldr	r0, [pc, #36]	@ (800eb24 <siprintf+0x38>)
 800eafe:	9107      	str	r1, [sp, #28]
 800eb00:	9104      	str	r1, [sp, #16]
 800eb02:	4909      	ldr	r1, [pc, #36]	@ (800eb28 <siprintf+0x3c>)
 800eb04:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb08:	9105      	str	r1, [sp, #20]
 800eb0a:	6800      	ldr	r0, [r0, #0]
 800eb0c:	9301      	str	r3, [sp, #4]
 800eb0e:	a902      	add	r1, sp, #8
 800eb10:	f002 faf2 	bl	80110f8 <_svfiprintf_r>
 800eb14:	9b02      	ldr	r3, [sp, #8]
 800eb16:	2200      	movs	r2, #0
 800eb18:	701a      	strb	r2, [r3, #0]
 800eb1a:	b01c      	add	sp, #112	@ 0x70
 800eb1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb20:	b003      	add	sp, #12
 800eb22:	4770      	bx	lr
 800eb24:	2400001c 	.word	0x2400001c
 800eb28:	ffff0208 	.word	0xffff0208

0800eb2c <__sread>:
 800eb2c:	b510      	push	{r4, lr}
 800eb2e:	460c      	mov	r4, r1
 800eb30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb34:	f000 f86c 	bl	800ec10 <_read_r>
 800eb38:	2800      	cmp	r0, #0
 800eb3a:	bfab      	itete	ge
 800eb3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800eb3e:	89a3      	ldrhlt	r3, [r4, #12]
 800eb40:	181b      	addge	r3, r3, r0
 800eb42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800eb46:	bfac      	ite	ge
 800eb48:	6563      	strge	r3, [r4, #84]	@ 0x54
 800eb4a:	81a3      	strhlt	r3, [r4, #12]
 800eb4c:	bd10      	pop	{r4, pc}

0800eb4e <__swrite>:
 800eb4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb52:	461f      	mov	r7, r3
 800eb54:	898b      	ldrh	r3, [r1, #12]
 800eb56:	05db      	lsls	r3, r3, #23
 800eb58:	4605      	mov	r5, r0
 800eb5a:	460c      	mov	r4, r1
 800eb5c:	4616      	mov	r6, r2
 800eb5e:	d505      	bpl.n	800eb6c <__swrite+0x1e>
 800eb60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb64:	2302      	movs	r3, #2
 800eb66:	2200      	movs	r2, #0
 800eb68:	f000 f840 	bl	800ebec <_lseek_r>
 800eb6c:	89a3      	ldrh	r3, [r4, #12]
 800eb6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eb76:	81a3      	strh	r3, [r4, #12]
 800eb78:	4632      	mov	r2, r6
 800eb7a:	463b      	mov	r3, r7
 800eb7c:	4628      	mov	r0, r5
 800eb7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb82:	f000 b857 	b.w	800ec34 <_write_r>

0800eb86 <__sseek>:
 800eb86:	b510      	push	{r4, lr}
 800eb88:	460c      	mov	r4, r1
 800eb8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb8e:	f000 f82d 	bl	800ebec <_lseek_r>
 800eb92:	1c43      	adds	r3, r0, #1
 800eb94:	89a3      	ldrh	r3, [r4, #12]
 800eb96:	bf15      	itete	ne
 800eb98:	6560      	strne	r0, [r4, #84]	@ 0x54
 800eb9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800eb9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800eba2:	81a3      	strheq	r3, [r4, #12]
 800eba4:	bf18      	it	ne
 800eba6:	81a3      	strhne	r3, [r4, #12]
 800eba8:	bd10      	pop	{r4, pc}

0800ebaa <__sclose>:
 800ebaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebae:	f000 b80d 	b.w	800ebcc <_close_r>

0800ebb2 <memset>:
 800ebb2:	4402      	add	r2, r0
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	4293      	cmp	r3, r2
 800ebb8:	d100      	bne.n	800ebbc <memset+0xa>
 800ebba:	4770      	bx	lr
 800ebbc:	f803 1b01 	strb.w	r1, [r3], #1
 800ebc0:	e7f9      	b.n	800ebb6 <memset+0x4>
	...

0800ebc4 <_localeconv_r>:
 800ebc4:	4800      	ldr	r0, [pc, #0]	@ (800ebc8 <_localeconv_r+0x4>)
 800ebc6:	4770      	bx	lr
 800ebc8:	2400015c 	.word	0x2400015c

0800ebcc <_close_r>:
 800ebcc:	b538      	push	{r3, r4, r5, lr}
 800ebce:	4d06      	ldr	r5, [pc, #24]	@ (800ebe8 <_close_r+0x1c>)
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	4604      	mov	r4, r0
 800ebd4:	4608      	mov	r0, r1
 800ebd6:	602b      	str	r3, [r5, #0]
 800ebd8:	f7f2 fe42 	bl	8001860 <_close>
 800ebdc:	1c43      	adds	r3, r0, #1
 800ebde:	d102      	bne.n	800ebe6 <_close_r+0x1a>
 800ebe0:	682b      	ldr	r3, [r5, #0]
 800ebe2:	b103      	cbz	r3, 800ebe6 <_close_r+0x1a>
 800ebe4:	6023      	str	r3, [r4, #0]
 800ebe6:	bd38      	pop	{r3, r4, r5, pc}
 800ebe8:	24000570 	.word	0x24000570

0800ebec <_lseek_r>:
 800ebec:	b538      	push	{r3, r4, r5, lr}
 800ebee:	4d07      	ldr	r5, [pc, #28]	@ (800ec0c <_lseek_r+0x20>)
 800ebf0:	4604      	mov	r4, r0
 800ebf2:	4608      	mov	r0, r1
 800ebf4:	4611      	mov	r1, r2
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	602a      	str	r2, [r5, #0]
 800ebfa:	461a      	mov	r2, r3
 800ebfc:	f7f2 fe57 	bl	80018ae <_lseek>
 800ec00:	1c43      	adds	r3, r0, #1
 800ec02:	d102      	bne.n	800ec0a <_lseek_r+0x1e>
 800ec04:	682b      	ldr	r3, [r5, #0]
 800ec06:	b103      	cbz	r3, 800ec0a <_lseek_r+0x1e>
 800ec08:	6023      	str	r3, [r4, #0]
 800ec0a:	bd38      	pop	{r3, r4, r5, pc}
 800ec0c:	24000570 	.word	0x24000570

0800ec10 <_read_r>:
 800ec10:	b538      	push	{r3, r4, r5, lr}
 800ec12:	4d07      	ldr	r5, [pc, #28]	@ (800ec30 <_read_r+0x20>)
 800ec14:	4604      	mov	r4, r0
 800ec16:	4608      	mov	r0, r1
 800ec18:	4611      	mov	r1, r2
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	602a      	str	r2, [r5, #0]
 800ec1e:	461a      	mov	r2, r3
 800ec20:	f7f2 fde5 	bl	80017ee <_read>
 800ec24:	1c43      	adds	r3, r0, #1
 800ec26:	d102      	bne.n	800ec2e <_read_r+0x1e>
 800ec28:	682b      	ldr	r3, [r5, #0]
 800ec2a:	b103      	cbz	r3, 800ec2e <_read_r+0x1e>
 800ec2c:	6023      	str	r3, [r4, #0]
 800ec2e:	bd38      	pop	{r3, r4, r5, pc}
 800ec30:	24000570 	.word	0x24000570

0800ec34 <_write_r>:
 800ec34:	b538      	push	{r3, r4, r5, lr}
 800ec36:	4d07      	ldr	r5, [pc, #28]	@ (800ec54 <_write_r+0x20>)
 800ec38:	4604      	mov	r4, r0
 800ec3a:	4608      	mov	r0, r1
 800ec3c:	4611      	mov	r1, r2
 800ec3e:	2200      	movs	r2, #0
 800ec40:	602a      	str	r2, [r5, #0]
 800ec42:	461a      	mov	r2, r3
 800ec44:	f7f2 fdf0 	bl	8001828 <_write>
 800ec48:	1c43      	adds	r3, r0, #1
 800ec4a:	d102      	bne.n	800ec52 <_write_r+0x1e>
 800ec4c:	682b      	ldr	r3, [r5, #0]
 800ec4e:	b103      	cbz	r3, 800ec52 <_write_r+0x1e>
 800ec50:	6023      	str	r3, [r4, #0]
 800ec52:	bd38      	pop	{r3, r4, r5, pc}
 800ec54:	24000570 	.word	0x24000570

0800ec58 <__errno>:
 800ec58:	4b01      	ldr	r3, [pc, #4]	@ (800ec60 <__errno+0x8>)
 800ec5a:	6818      	ldr	r0, [r3, #0]
 800ec5c:	4770      	bx	lr
 800ec5e:	bf00      	nop
 800ec60:	2400001c 	.word	0x2400001c

0800ec64 <__libc_init_array>:
 800ec64:	b570      	push	{r4, r5, r6, lr}
 800ec66:	4d0d      	ldr	r5, [pc, #52]	@ (800ec9c <__libc_init_array+0x38>)
 800ec68:	4c0d      	ldr	r4, [pc, #52]	@ (800eca0 <__libc_init_array+0x3c>)
 800ec6a:	1b64      	subs	r4, r4, r5
 800ec6c:	10a4      	asrs	r4, r4, #2
 800ec6e:	2600      	movs	r6, #0
 800ec70:	42a6      	cmp	r6, r4
 800ec72:	d109      	bne.n	800ec88 <__libc_init_array+0x24>
 800ec74:	4d0b      	ldr	r5, [pc, #44]	@ (800eca4 <__libc_init_array+0x40>)
 800ec76:	4c0c      	ldr	r4, [pc, #48]	@ (800eca8 <__libc_init_array+0x44>)
 800ec78:	f003 fdaa 	bl	80127d0 <_init>
 800ec7c:	1b64      	subs	r4, r4, r5
 800ec7e:	10a4      	asrs	r4, r4, #2
 800ec80:	2600      	movs	r6, #0
 800ec82:	42a6      	cmp	r6, r4
 800ec84:	d105      	bne.n	800ec92 <__libc_init_array+0x2e>
 800ec86:	bd70      	pop	{r4, r5, r6, pc}
 800ec88:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec8c:	4798      	blx	r3
 800ec8e:	3601      	adds	r6, #1
 800ec90:	e7ee      	b.n	800ec70 <__libc_init_array+0xc>
 800ec92:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec96:	4798      	blx	r3
 800ec98:	3601      	adds	r6, #1
 800ec9a:	e7f2      	b.n	800ec82 <__libc_init_array+0x1e>
 800ec9c:	08014530 	.word	0x08014530
 800eca0:	08014530 	.word	0x08014530
 800eca4:	08014530 	.word	0x08014530
 800eca8:	08014534 	.word	0x08014534

0800ecac <__retarget_lock_init_recursive>:
 800ecac:	4770      	bx	lr

0800ecae <__retarget_lock_acquire_recursive>:
 800ecae:	4770      	bx	lr

0800ecb0 <__retarget_lock_release_recursive>:
 800ecb0:	4770      	bx	lr
	...

0800ecb4 <nanf>:
 800ecb4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ecbc <nanf+0x8>
 800ecb8:	4770      	bx	lr
 800ecba:	bf00      	nop
 800ecbc:	7fc00000 	.word	0x7fc00000

0800ecc0 <quorem>:
 800ecc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecc4:	6903      	ldr	r3, [r0, #16]
 800ecc6:	690c      	ldr	r4, [r1, #16]
 800ecc8:	42a3      	cmp	r3, r4
 800ecca:	4607      	mov	r7, r0
 800eccc:	db7e      	blt.n	800edcc <quorem+0x10c>
 800ecce:	3c01      	subs	r4, #1
 800ecd0:	f101 0814 	add.w	r8, r1, #20
 800ecd4:	00a3      	lsls	r3, r4, #2
 800ecd6:	f100 0514 	add.w	r5, r0, #20
 800ecda:	9300      	str	r3, [sp, #0]
 800ecdc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ece0:	9301      	str	r3, [sp, #4]
 800ece2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ece6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ecea:	3301      	adds	r3, #1
 800ecec:	429a      	cmp	r2, r3
 800ecee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ecf2:	fbb2 f6f3 	udiv	r6, r2, r3
 800ecf6:	d32e      	bcc.n	800ed56 <quorem+0x96>
 800ecf8:	f04f 0a00 	mov.w	sl, #0
 800ecfc:	46c4      	mov	ip, r8
 800ecfe:	46ae      	mov	lr, r5
 800ed00:	46d3      	mov	fp, sl
 800ed02:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ed06:	b298      	uxth	r0, r3
 800ed08:	fb06 a000 	mla	r0, r6, r0, sl
 800ed0c:	0c02      	lsrs	r2, r0, #16
 800ed0e:	0c1b      	lsrs	r3, r3, #16
 800ed10:	fb06 2303 	mla	r3, r6, r3, r2
 800ed14:	f8de 2000 	ldr.w	r2, [lr]
 800ed18:	b280      	uxth	r0, r0
 800ed1a:	b292      	uxth	r2, r2
 800ed1c:	1a12      	subs	r2, r2, r0
 800ed1e:	445a      	add	r2, fp
 800ed20:	f8de 0000 	ldr.w	r0, [lr]
 800ed24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ed28:	b29b      	uxth	r3, r3
 800ed2a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ed2e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ed32:	b292      	uxth	r2, r2
 800ed34:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ed38:	45e1      	cmp	r9, ip
 800ed3a:	f84e 2b04 	str.w	r2, [lr], #4
 800ed3e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ed42:	d2de      	bcs.n	800ed02 <quorem+0x42>
 800ed44:	9b00      	ldr	r3, [sp, #0]
 800ed46:	58eb      	ldr	r3, [r5, r3]
 800ed48:	b92b      	cbnz	r3, 800ed56 <quorem+0x96>
 800ed4a:	9b01      	ldr	r3, [sp, #4]
 800ed4c:	3b04      	subs	r3, #4
 800ed4e:	429d      	cmp	r5, r3
 800ed50:	461a      	mov	r2, r3
 800ed52:	d32f      	bcc.n	800edb4 <quorem+0xf4>
 800ed54:	613c      	str	r4, [r7, #16]
 800ed56:	4638      	mov	r0, r7
 800ed58:	f001 f954 	bl	8010004 <__mcmp>
 800ed5c:	2800      	cmp	r0, #0
 800ed5e:	db25      	blt.n	800edac <quorem+0xec>
 800ed60:	4629      	mov	r1, r5
 800ed62:	2000      	movs	r0, #0
 800ed64:	f858 2b04 	ldr.w	r2, [r8], #4
 800ed68:	f8d1 c000 	ldr.w	ip, [r1]
 800ed6c:	fa1f fe82 	uxth.w	lr, r2
 800ed70:	fa1f f38c 	uxth.w	r3, ip
 800ed74:	eba3 030e 	sub.w	r3, r3, lr
 800ed78:	4403      	add	r3, r0
 800ed7a:	0c12      	lsrs	r2, r2, #16
 800ed7c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ed80:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ed84:	b29b      	uxth	r3, r3
 800ed86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ed8a:	45c1      	cmp	r9, r8
 800ed8c:	f841 3b04 	str.w	r3, [r1], #4
 800ed90:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ed94:	d2e6      	bcs.n	800ed64 <quorem+0xa4>
 800ed96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ed9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ed9e:	b922      	cbnz	r2, 800edaa <quorem+0xea>
 800eda0:	3b04      	subs	r3, #4
 800eda2:	429d      	cmp	r5, r3
 800eda4:	461a      	mov	r2, r3
 800eda6:	d30b      	bcc.n	800edc0 <quorem+0x100>
 800eda8:	613c      	str	r4, [r7, #16]
 800edaa:	3601      	adds	r6, #1
 800edac:	4630      	mov	r0, r6
 800edae:	b003      	add	sp, #12
 800edb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edb4:	6812      	ldr	r2, [r2, #0]
 800edb6:	3b04      	subs	r3, #4
 800edb8:	2a00      	cmp	r2, #0
 800edba:	d1cb      	bne.n	800ed54 <quorem+0x94>
 800edbc:	3c01      	subs	r4, #1
 800edbe:	e7c6      	b.n	800ed4e <quorem+0x8e>
 800edc0:	6812      	ldr	r2, [r2, #0]
 800edc2:	3b04      	subs	r3, #4
 800edc4:	2a00      	cmp	r2, #0
 800edc6:	d1ef      	bne.n	800eda8 <quorem+0xe8>
 800edc8:	3c01      	subs	r4, #1
 800edca:	e7ea      	b.n	800eda2 <quorem+0xe2>
 800edcc:	2000      	movs	r0, #0
 800edce:	e7ee      	b.n	800edae <quorem+0xee>

0800edd0 <_dtoa_r>:
 800edd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edd4:	ed2d 8b02 	vpush	{d8}
 800edd8:	69c7      	ldr	r7, [r0, #28]
 800edda:	b091      	sub	sp, #68	@ 0x44
 800eddc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ede0:	ec55 4b10 	vmov	r4, r5, d0
 800ede4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800ede6:	9107      	str	r1, [sp, #28]
 800ede8:	4681      	mov	r9, r0
 800edea:	9209      	str	r2, [sp, #36]	@ 0x24
 800edec:	930d      	str	r3, [sp, #52]	@ 0x34
 800edee:	b97f      	cbnz	r7, 800ee10 <_dtoa_r+0x40>
 800edf0:	2010      	movs	r0, #16
 800edf2:	f000 fd8d 	bl	800f910 <malloc>
 800edf6:	4602      	mov	r2, r0
 800edf8:	f8c9 001c 	str.w	r0, [r9, #28]
 800edfc:	b920      	cbnz	r0, 800ee08 <_dtoa_r+0x38>
 800edfe:	4ba0      	ldr	r3, [pc, #640]	@ (800f080 <_dtoa_r+0x2b0>)
 800ee00:	21ef      	movs	r1, #239	@ 0xef
 800ee02:	48a0      	ldr	r0, [pc, #640]	@ (800f084 <_dtoa_r+0x2b4>)
 800ee04:	f002 fb74 	bl	80114f0 <__assert_func>
 800ee08:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ee0c:	6007      	str	r7, [r0, #0]
 800ee0e:	60c7      	str	r7, [r0, #12]
 800ee10:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ee14:	6819      	ldr	r1, [r3, #0]
 800ee16:	b159      	cbz	r1, 800ee30 <_dtoa_r+0x60>
 800ee18:	685a      	ldr	r2, [r3, #4]
 800ee1a:	604a      	str	r2, [r1, #4]
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	4093      	lsls	r3, r2
 800ee20:	608b      	str	r3, [r1, #8]
 800ee22:	4648      	mov	r0, r9
 800ee24:	f000 fe6a 	bl	800fafc <_Bfree>
 800ee28:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	601a      	str	r2, [r3, #0]
 800ee30:	1e2b      	subs	r3, r5, #0
 800ee32:	bfbb      	ittet	lt
 800ee34:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ee38:	9303      	strlt	r3, [sp, #12]
 800ee3a:	2300      	movge	r3, #0
 800ee3c:	2201      	movlt	r2, #1
 800ee3e:	bfac      	ite	ge
 800ee40:	6033      	strge	r3, [r6, #0]
 800ee42:	6032      	strlt	r2, [r6, #0]
 800ee44:	4b90      	ldr	r3, [pc, #576]	@ (800f088 <_dtoa_r+0x2b8>)
 800ee46:	9e03      	ldr	r6, [sp, #12]
 800ee48:	43b3      	bics	r3, r6
 800ee4a:	d110      	bne.n	800ee6e <_dtoa_r+0x9e>
 800ee4c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ee4e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ee52:	6013      	str	r3, [r2, #0]
 800ee54:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800ee58:	4323      	orrs	r3, r4
 800ee5a:	f000 84de 	beq.w	800f81a <_dtoa_r+0xa4a>
 800ee5e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ee60:	4f8a      	ldr	r7, [pc, #552]	@ (800f08c <_dtoa_r+0x2bc>)
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	f000 84e0 	beq.w	800f828 <_dtoa_r+0xa58>
 800ee68:	1cfb      	adds	r3, r7, #3
 800ee6a:	f000 bcdb 	b.w	800f824 <_dtoa_r+0xa54>
 800ee6e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800ee72:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ee76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee7a:	d10a      	bne.n	800ee92 <_dtoa_r+0xc2>
 800ee7c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ee7e:	2301      	movs	r3, #1
 800ee80:	6013      	str	r3, [r2, #0]
 800ee82:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ee84:	b113      	cbz	r3, 800ee8c <_dtoa_r+0xbc>
 800ee86:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800ee88:	4b81      	ldr	r3, [pc, #516]	@ (800f090 <_dtoa_r+0x2c0>)
 800ee8a:	6013      	str	r3, [r2, #0]
 800ee8c:	4f81      	ldr	r7, [pc, #516]	@ (800f094 <_dtoa_r+0x2c4>)
 800ee8e:	f000 bccb 	b.w	800f828 <_dtoa_r+0xa58>
 800ee92:	aa0e      	add	r2, sp, #56	@ 0x38
 800ee94:	a90f      	add	r1, sp, #60	@ 0x3c
 800ee96:	4648      	mov	r0, r9
 800ee98:	eeb0 0b48 	vmov.f64	d0, d8
 800ee9c:	f001 f9d2 	bl	8010244 <__d2b>
 800eea0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800eea4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eea6:	9001      	str	r0, [sp, #4]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d045      	beq.n	800ef38 <_dtoa_r+0x168>
 800eeac:	eeb0 7b48 	vmov.f64	d7, d8
 800eeb0:	ee18 1a90 	vmov	r1, s17
 800eeb4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800eeb8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800eebc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800eec0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800eec4:	2500      	movs	r5, #0
 800eec6:	ee07 1a90 	vmov	s15, r1
 800eeca:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800eece:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f068 <_dtoa_r+0x298>
 800eed2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800eed6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800f070 <_dtoa_r+0x2a0>
 800eeda:	eea7 6b05 	vfma.f64	d6, d7, d5
 800eede:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f078 <_dtoa_r+0x2a8>
 800eee2:	ee07 3a90 	vmov	s15, r3
 800eee6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800eeea:	eeb0 7b46 	vmov.f64	d7, d6
 800eeee:	eea4 7b05 	vfma.f64	d7, d4, d5
 800eef2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800eef6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800eefa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eefe:	ee16 8a90 	vmov	r8, s13
 800ef02:	d508      	bpl.n	800ef16 <_dtoa_r+0x146>
 800ef04:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ef08:	eeb4 6b47 	vcmp.f64	d6, d7
 800ef0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef10:	bf18      	it	ne
 800ef12:	f108 38ff 	addne.w	r8, r8, #4294967295
 800ef16:	f1b8 0f16 	cmp.w	r8, #22
 800ef1a:	d82b      	bhi.n	800ef74 <_dtoa_r+0x1a4>
 800ef1c:	495e      	ldr	r1, [pc, #376]	@ (800f098 <_dtoa_r+0x2c8>)
 800ef1e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800ef22:	ed91 7b00 	vldr	d7, [r1]
 800ef26:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ef2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef2e:	d501      	bpl.n	800ef34 <_dtoa_r+0x164>
 800ef30:	f108 38ff 	add.w	r8, r8, #4294967295
 800ef34:	2100      	movs	r1, #0
 800ef36:	e01e      	b.n	800ef76 <_dtoa_r+0x1a6>
 800ef38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef3a:	4413      	add	r3, r2
 800ef3c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800ef40:	2920      	cmp	r1, #32
 800ef42:	bfc1      	itttt	gt
 800ef44:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800ef48:	408e      	lslgt	r6, r1
 800ef4a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800ef4e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800ef52:	bfd6      	itet	le
 800ef54:	f1c1 0120 	rsble	r1, r1, #32
 800ef58:	4331      	orrgt	r1, r6
 800ef5a:	fa04 f101 	lslle.w	r1, r4, r1
 800ef5e:	ee07 1a90 	vmov	s15, r1
 800ef62:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ef66:	3b01      	subs	r3, #1
 800ef68:	ee17 1a90 	vmov	r1, s15
 800ef6c:	2501      	movs	r5, #1
 800ef6e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800ef72:	e7a8      	b.n	800eec6 <_dtoa_r+0xf6>
 800ef74:	2101      	movs	r1, #1
 800ef76:	1ad2      	subs	r2, r2, r3
 800ef78:	1e53      	subs	r3, r2, #1
 800ef7a:	9306      	str	r3, [sp, #24]
 800ef7c:	bf45      	ittet	mi
 800ef7e:	f1c2 0301 	rsbmi	r3, r2, #1
 800ef82:	9305      	strmi	r3, [sp, #20]
 800ef84:	2300      	movpl	r3, #0
 800ef86:	2300      	movmi	r3, #0
 800ef88:	bf4c      	ite	mi
 800ef8a:	9306      	strmi	r3, [sp, #24]
 800ef8c:	9305      	strpl	r3, [sp, #20]
 800ef8e:	f1b8 0f00 	cmp.w	r8, #0
 800ef92:	910c      	str	r1, [sp, #48]	@ 0x30
 800ef94:	db18      	blt.n	800efc8 <_dtoa_r+0x1f8>
 800ef96:	9b06      	ldr	r3, [sp, #24]
 800ef98:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800ef9c:	4443      	add	r3, r8
 800ef9e:	9306      	str	r3, [sp, #24]
 800efa0:	2300      	movs	r3, #0
 800efa2:	9a07      	ldr	r2, [sp, #28]
 800efa4:	2a09      	cmp	r2, #9
 800efa6:	d849      	bhi.n	800f03c <_dtoa_r+0x26c>
 800efa8:	2a05      	cmp	r2, #5
 800efaa:	bfc4      	itt	gt
 800efac:	3a04      	subgt	r2, #4
 800efae:	9207      	strgt	r2, [sp, #28]
 800efb0:	9a07      	ldr	r2, [sp, #28]
 800efb2:	f1a2 0202 	sub.w	r2, r2, #2
 800efb6:	bfcc      	ite	gt
 800efb8:	2400      	movgt	r4, #0
 800efba:	2401      	movle	r4, #1
 800efbc:	2a03      	cmp	r2, #3
 800efbe:	d848      	bhi.n	800f052 <_dtoa_r+0x282>
 800efc0:	e8df f002 	tbb	[pc, r2]
 800efc4:	3a2c2e0b 	.word	0x3a2c2e0b
 800efc8:	9b05      	ldr	r3, [sp, #20]
 800efca:	2200      	movs	r2, #0
 800efcc:	eba3 0308 	sub.w	r3, r3, r8
 800efd0:	9305      	str	r3, [sp, #20]
 800efd2:	920a      	str	r2, [sp, #40]	@ 0x28
 800efd4:	f1c8 0300 	rsb	r3, r8, #0
 800efd8:	e7e3      	b.n	800efa2 <_dtoa_r+0x1d2>
 800efda:	2200      	movs	r2, #0
 800efdc:	9208      	str	r2, [sp, #32]
 800efde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800efe0:	2a00      	cmp	r2, #0
 800efe2:	dc39      	bgt.n	800f058 <_dtoa_r+0x288>
 800efe4:	f04f 0b01 	mov.w	fp, #1
 800efe8:	46da      	mov	sl, fp
 800efea:	465a      	mov	r2, fp
 800efec:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800eff0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800eff4:	2100      	movs	r1, #0
 800eff6:	2004      	movs	r0, #4
 800eff8:	f100 0614 	add.w	r6, r0, #20
 800effc:	4296      	cmp	r6, r2
 800effe:	d930      	bls.n	800f062 <_dtoa_r+0x292>
 800f000:	6079      	str	r1, [r7, #4]
 800f002:	4648      	mov	r0, r9
 800f004:	9304      	str	r3, [sp, #16]
 800f006:	f000 fd39 	bl	800fa7c <_Balloc>
 800f00a:	9b04      	ldr	r3, [sp, #16]
 800f00c:	4607      	mov	r7, r0
 800f00e:	2800      	cmp	r0, #0
 800f010:	d146      	bne.n	800f0a0 <_dtoa_r+0x2d0>
 800f012:	4b22      	ldr	r3, [pc, #136]	@ (800f09c <_dtoa_r+0x2cc>)
 800f014:	4602      	mov	r2, r0
 800f016:	f240 11af 	movw	r1, #431	@ 0x1af
 800f01a:	e6f2      	b.n	800ee02 <_dtoa_r+0x32>
 800f01c:	2201      	movs	r2, #1
 800f01e:	e7dd      	b.n	800efdc <_dtoa_r+0x20c>
 800f020:	2200      	movs	r2, #0
 800f022:	9208      	str	r2, [sp, #32]
 800f024:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f026:	eb08 0b02 	add.w	fp, r8, r2
 800f02a:	f10b 0a01 	add.w	sl, fp, #1
 800f02e:	4652      	mov	r2, sl
 800f030:	2a01      	cmp	r2, #1
 800f032:	bfb8      	it	lt
 800f034:	2201      	movlt	r2, #1
 800f036:	e7db      	b.n	800eff0 <_dtoa_r+0x220>
 800f038:	2201      	movs	r2, #1
 800f03a:	e7f2      	b.n	800f022 <_dtoa_r+0x252>
 800f03c:	2401      	movs	r4, #1
 800f03e:	2200      	movs	r2, #0
 800f040:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800f044:	f04f 3bff 	mov.w	fp, #4294967295
 800f048:	2100      	movs	r1, #0
 800f04a:	46da      	mov	sl, fp
 800f04c:	2212      	movs	r2, #18
 800f04e:	9109      	str	r1, [sp, #36]	@ 0x24
 800f050:	e7ce      	b.n	800eff0 <_dtoa_r+0x220>
 800f052:	2201      	movs	r2, #1
 800f054:	9208      	str	r2, [sp, #32]
 800f056:	e7f5      	b.n	800f044 <_dtoa_r+0x274>
 800f058:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800f05c:	46da      	mov	sl, fp
 800f05e:	465a      	mov	r2, fp
 800f060:	e7c6      	b.n	800eff0 <_dtoa_r+0x220>
 800f062:	3101      	adds	r1, #1
 800f064:	0040      	lsls	r0, r0, #1
 800f066:	e7c7      	b.n	800eff8 <_dtoa_r+0x228>
 800f068:	636f4361 	.word	0x636f4361
 800f06c:	3fd287a7 	.word	0x3fd287a7
 800f070:	8b60c8b3 	.word	0x8b60c8b3
 800f074:	3fc68a28 	.word	0x3fc68a28
 800f078:	509f79fb 	.word	0x509f79fb
 800f07c:	3fd34413 	.word	0x3fd34413
 800f080:	08012886 	.word	0x08012886
 800f084:	0801289d 	.word	0x0801289d
 800f088:	7ff00000 	.word	0x7ff00000
 800f08c:	08012882 	.word	0x08012882
 800f090:	08012851 	.word	0x08012851
 800f094:	08012850 	.word	0x08012850
 800f098:	08012998 	.word	0x08012998
 800f09c:	080128f5 	.word	0x080128f5
 800f0a0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800f0a4:	f1ba 0f0e 	cmp.w	sl, #14
 800f0a8:	6010      	str	r0, [r2, #0]
 800f0aa:	d86f      	bhi.n	800f18c <_dtoa_r+0x3bc>
 800f0ac:	2c00      	cmp	r4, #0
 800f0ae:	d06d      	beq.n	800f18c <_dtoa_r+0x3bc>
 800f0b0:	f1b8 0f00 	cmp.w	r8, #0
 800f0b4:	f340 80c2 	ble.w	800f23c <_dtoa_r+0x46c>
 800f0b8:	4aca      	ldr	r2, [pc, #808]	@ (800f3e4 <_dtoa_r+0x614>)
 800f0ba:	f008 010f 	and.w	r1, r8, #15
 800f0be:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f0c2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800f0c6:	ed92 7b00 	vldr	d7, [r2]
 800f0ca:	ea4f 1128 	mov.w	r1, r8, asr #4
 800f0ce:	f000 80a9 	beq.w	800f224 <_dtoa_r+0x454>
 800f0d2:	4ac5      	ldr	r2, [pc, #788]	@ (800f3e8 <_dtoa_r+0x618>)
 800f0d4:	ed92 6b08 	vldr	d6, [r2, #32]
 800f0d8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800f0dc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f0e0:	f001 010f 	and.w	r1, r1, #15
 800f0e4:	2203      	movs	r2, #3
 800f0e6:	48c0      	ldr	r0, [pc, #768]	@ (800f3e8 <_dtoa_r+0x618>)
 800f0e8:	2900      	cmp	r1, #0
 800f0ea:	f040 809d 	bne.w	800f228 <_dtoa_r+0x458>
 800f0ee:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f0f2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f0f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f0fa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f0fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f100:	2900      	cmp	r1, #0
 800f102:	f000 80c1 	beq.w	800f288 <_dtoa_r+0x4b8>
 800f106:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800f10a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f10e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f112:	f140 80b9 	bpl.w	800f288 <_dtoa_r+0x4b8>
 800f116:	f1ba 0f00 	cmp.w	sl, #0
 800f11a:	f000 80b5 	beq.w	800f288 <_dtoa_r+0x4b8>
 800f11e:	f1bb 0f00 	cmp.w	fp, #0
 800f122:	dd31      	ble.n	800f188 <_dtoa_r+0x3b8>
 800f124:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800f128:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f12c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f130:	f108 31ff 	add.w	r1, r8, #4294967295
 800f134:	9104      	str	r1, [sp, #16]
 800f136:	3201      	adds	r2, #1
 800f138:	465c      	mov	r4, fp
 800f13a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f13e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800f142:	ee07 2a90 	vmov	s15, r2
 800f146:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f14a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f14e:	ee15 2a90 	vmov	r2, s11
 800f152:	ec51 0b15 	vmov	r0, r1, d5
 800f156:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800f15a:	2c00      	cmp	r4, #0
 800f15c:	f040 8098 	bne.w	800f290 <_dtoa_r+0x4c0>
 800f160:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f164:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f168:	ec41 0b17 	vmov	d7, r0, r1
 800f16c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f174:	f300 8261 	bgt.w	800f63a <_dtoa_r+0x86a>
 800f178:	eeb1 7b47 	vneg.f64	d7, d7
 800f17c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f184:	f100 80f5 	bmi.w	800f372 <_dtoa_r+0x5a2>
 800f188:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f18c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f18e:	2a00      	cmp	r2, #0
 800f190:	f2c0 812c 	blt.w	800f3ec <_dtoa_r+0x61c>
 800f194:	f1b8 0f0e 	cmp.w	r8, #14
 800f198:	f300 8128 	bgt.w	800f3ec <_dtoa_r+0x61c>
 800f19c:	4b91      	ldr	r3, [pc, #580]	@ (800f3e4 <_dtoa_r+0x614>)
 800f19e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f1a2:	ed93 6b00 	vldr	d6, [r3]
 800f1a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	da03      	bge.n	800f1b4 <_dtoa_r+0x3e4>
 800f1ac:	f1ba 0f00 	cmp.w	sl, #0
 800f1b0:	f340 80d2 	ble.w	800f358 <_dtoa_r+0x588>
 800f1b4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800f1b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f1bc:	463e      	mov	r6, r7
 800f1be:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f1c2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f1c6:	ee15 3a10 	vmov	r3, s10
 800f1ca:	3330      	adds	r3, #48	@ 0x30
 800f1cc:	f806 3b01 	strb.w	r3, [r6], #1
 800f1d0:	1bf3      	subs	r3, r6, r7
 800f1d2:	459a      	cmp	sl, r3
 800f1d4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f1d8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f1dc:	f040 80f8 	bne.w	800f3d0 <_dtoa_r+0x600>
 800f1e0:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f1e4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f1e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1ec:	f300 80dd 	bgt.w	800f3aa <_dtoa_r+0x5da>
 800f1f0:	eeb4 7b46 	vcmp.f64	d7, d6
 800f1f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1f8:	d104      	bne.n	800f204 <_dtoa_r+0x434>
 800f1fa:	ee15 3a10 	vmov	r3, s10
 800f1fe:	07db      	lsls	r3, r3, #31
 800f200:	f100 80d3 	bmi.w	800f3aa <_dtoa_r+0x5da>
 800f204:	9901      	ldr	r1, [sp, #4]
 800f206:	4648      	mov	r0, r9
 800f208:	f000 fc78 	bl	800fafc <_Bfree>
 800f20c:	2300      	movs	r3, #0
 800f20e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f210:	7033      	strb	r3, [r6, #0]
 800f212:	f108 0301 	add.w	r3, r8, #1
 800f216:	6013      	str	r3, [r2, #0]
 800f218:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	f000 8304 	beq.w	800f828 <_dtoa_r+0xa58>
 800f220:	601e      	str	r6, [r3, #0]
 800f222:	e301      	b.n	800f828 <_dtoa_r+0xa58>
 800f224:	2202      	movs	r2, #2
 800f226:	e75e      	b.n	800f0e6 <_dtoa_r+0x316>
 800f228:	07cc      	lsls	r4, r1, #31
 800f22a:	d504      	bpl.n	800f236 <_dtoa_r+0x466>
 800f22c:	ed90 6b00 	vldr	d6, [r0]
 800f230:	3201      	adds	r2, #1
 800f232:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f236:	1049      	asrs	r1, r1, #1
 800f238:	3008      	adds	r0, #8
 800f23a:	e755      	b.n	800f0e8 <_dtoa_r+0x318>
 800f23c:	d022      	beq.n	800f284 <_dtoa_r+0x4b4>
 800f23e:	f1c8 0100 	rsb	r1, r8, #0
 800f242:	4a68      	ldr	r2, [pc, #416]	@ (800f3e4 <_dtoa_r+0x614>)
 800f244:	f001 000f 	and.w	r0, r1, #15
 800f248:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f24c:	ed92 7b00 	vldr	d7, [r2]
 800f250:	ee28 7b07 	vmul.f64	d7, d8, d7
 800f254:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f258:	4863      	ldr	r0, [pc, #396]	@ (800f3e8 <_dtoa_r+0x618>)
 800f25a:	1109      	asrs	r1, r1, #4
 800f25c:	2400      	movs	r4, #0
 800f25e:	2202      	movs	r2, #2
 800f260:	b929      	cbnz	r1, 800f26e <_dtoa_r+0x49e>
 800f262:	2c00      	cmp	r4, #0
 800f264:	f43f af49 	beq.w	800f0fa <_dtoa_r+0x32a>
 800f268:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f26c:	e745      	b.n	800f0fa <_dtoa_r+0x32a>
 800f26e:	07ce      	lsls	r6, r1, #31
 800f270:	d505      	bpl.n	800f27e <_dtoa_r+0x4ae>
 800f272:	ed90 6b00 	vldr	d6, [r0]
 800f276:	3201      	adds	r2, #1
 800f278:	2401      	movs	r4, #1
 800f27a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f27e:	1049      	asrs	r1, r1, #1
 800f280:	3008      	adds	r0, #8
 800f282:	e7ed      	b.n	800f260 <_dtoa_r+0x490>
 800f284:	2202      	movs	r2, #2
 800f286:	e738      	b.n	800f0fa <_dtoa_r+0x32a>
 800f288:	f8cd 8010 	str.w	r8, [sp, #16]
 800f28c:	4654      	mov	r4, sl
 800f28e:	e754      	b.n	800f13a <_dtoa_r+0x36a>
 800f290:	4a54      	ldr	r2, [pc, #336]	@ (800f3e4 <_dtoa_r+0x614>)
 800f292:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800f296:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f29a:	9a08      	ldr	r2, [sp, #32]
 800f29c:	ec41 0b17 	vmov	d7, r0, r1
 800f2a0:	443c      	add	r4, r7
 800f2a2:	b34a      	cbz	r2, 800f2f8 <_dtoa_r+0x528>
 800f2a4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800f2a8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800f2ac:	463e      	mov	r6, r7
 800f2ae:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f2b2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f2b6:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f2ba:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f2be:	ee14 2a90 	vmov	r2, s9
 800f2c2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f2c6:	3230      	adds	r2, #48	@ 0x30
 800f2c8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f2cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f2d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2d4:	f806 2b01 	strb.w	r2, [r6], #1
 800f2d8:	d438      	bmi.n	800f34c <_dtoa_r+0x57c>
 800f2da:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f2de:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f2e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2e6:	d462      	bmi.n	800f3ae <_dtoa_r+0x5de>
 800f2e8:	42a6      	cmp	r6, r4
 800f2ea:	f43f af4d 	beq.w	800f188 <_dtoa_r+0x3b8>
 800f2ee:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f2f2:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f2f6:	e7e0      	b.n	800f2ba <_dtoa_r+0x4ea>
 800f2f8:	4621      	mov	r1, r4
 800f2fa:	463e      	mov	r6, r7
 800f2fc:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f300:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f304:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f308:	ee14 2a90 	vmov	r2, s9
 800f30c:	3230      	adds	r2, #48	@ 0x30
 800f30e:	f806 2b01 	strb.w	r2, [r6], #1
 800f312:	42a6      	cmp	r6, r4
 800f314:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f318:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f31c:	d119      	bne.n	800f352 <_dtoa_r+0x582>
 800f31e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800f322:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f326:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f32a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f32e:	dc3e      	bgt.n	800f3ae <_dtoa_r+0x5de>
 800f330:	ee35 5b47 	vsub.f64	d5, d5, d7
 800f334:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800f338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f33c:	f57f af24 	bpl.w	800f188 <_dtoa_r+0x3b8>
 800f340:	460e      	mov	r6, r1
 800f342:	3901      	subs	r1, #1
 800f344:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f348:	2b30      	cmp	r3, #48	@ 0x30
 800f34a:	d0f9      	beq.n	800f340 <_dtoa_r+0x570>
 800f34c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f350:	e758      	b.n	800f204 <_dtoa_r+0x434>
 800f352:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f356:	e7d5      	b.n	800f304 <_dtoa_r+0x534>
 800f358:	d10b      	bne.n	800f372 <_dtoa_r+0x5a2>
 800f35a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f35e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f362:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f366:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f36a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f36e:	f2c0 8161 	blt.w	800f634 <_dtoa_r+0x864>
 800f372:	2400      	movs	r4, #0
 800f374:	4625      	mov	r5, r4
 800f376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f378:	43db      	mvns	r3, r3
 800f37a:	9304      	str	r3, [sp, #16]
 800f37c:	463e      	mov	r6, r7
 800f37e:	f04f 0800 	mov.w	r8, #0
 800f382:	4621      	mov	r1, r4
 800f384:	4648      	mov	r0, r9
 800f386:	f000 fbb9 	bl	800fafc <_Bfree>
 800f38a:	2d00      	cmp	r5, #0
 800f38c:	d0de      	beq.n	800f34c <_dtoa_r+0x57c>
 800f38e:	f1b8 0f00 	cmp.w	r8, #0
 800f392:	d005      	beq.n	800f3a0 <_dtoa_r+0x5d0>
 800f394:	45a8      	cmp	r8, r5
 800f396:	d003      	beq.n	800f3a0 <_dtoa_r+0x5d0>
 800f398:	4641      	mov	r1, r8
 800f39a:	4648      	mov	r0, r9
 800f39c:	f000 fbae 	bl	800fafc <_Bfree>
 800f3a0:	4629      	mov	r1, r5
 800f3a2:	4648      	mov	r0, r9
 800f3a4:	f000 fbaa 	bl	800fafc <_Bfree>
 800f3a8:	e7d0      	b.n	800f34c <_dtoa_r+0x57c>
 800f3aa:	f8cd 8010 	str.w	r8, [sp, #16]
 800f3ae:	4633      	mov	r3, r6
 800f3b0:	461e      	mov	r6, r3
 800f3b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f3b6:	2a39      	cmp	r2, #57	@ 0x39
 800f3b8:	d106      	bne.n	800f3c8 <_dtoa_r+0x5f8>
 800f3ba:	429f      	cmp	r7, r3
 800f3bc:	d1f8      	bne.n	800f3b0 <_dtoa_r+0x5e0>
 800f3be:	9a04      	ldr	r2, [sp, #16]
 800f3c0:	3201      	adds	r2, #1
 800f3c2:	9204      	str	r2, [sp, #16]
 800f3c4:	2230      	movs	r2, #48	@ 0x30
 800f3c6:	703a      	strb	r2, [r7, #0]
 800f3c8:	781a      	ldrb	r2, [r3, #0]
 800f3ca:	3201      	adds	r2, #1
 800f3cc:	701a      	strb	r2, [r3, #0]
 800f3ce:	e7bd      	b.n	800f34c <_dtoa_r+0x57c>
 800f3d0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f3d4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f3d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3dc:	f47f aeef 	bne.w	800f1be <_dtoa_r+0x3ee>
 800f3e0:	e710      	b.n	800f204 <_dtoa_r+0x434>
 800f3e2:	bf00      	nop
 800f3e4:	08012998 	.word	0x08012998
 800f3e8:	08012970 	.word	0x08012970
 800f3ec:	9908      	ldr	r1, [sp, #32]
 800f3ee:	2900      	cmp	r1, #0
 800f3f0:	f000 80e3 	beq.w	800f5ba <_dtoa_r+0x7ea>
 800f3f4:	9907      	ldr	r1, [sp, #28]
 800f3f6:	2901      	cmp	r1, #1
 800f3f8:	f300 80c8 	bgt.w	800f58c <_dtoa_r+0x7bc>
 800f3fc:	2d00      	cmp	r5, #0
 800f3fe:	f000 80c1 	beq.w	800f584 <_dtoa_r+0x7b4>
 800f402:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f406:	9e05      	ldr	r6, [sp, #20]
 800f408:	461c      	mov	r4, r3
 800f40a:	9304      	str	r3, [sp, #16]
 800f40c:	9b05      	ldr	r3, [sp, #20]
 800f40e:	4413      	add	r3, r2
 800f410:	9305      	str	r3, [sp, #20]
 800f412:	9b06      	ldr	r3, [sp, #24]
 800f414:	2101      	movs	r1, #1
 800f416:	4413      	add	r3, r2
 800f418:	4648      	mov	r0, r9
 800f41a:	9306      	str	r3, [sp, #24]
 800f41c:	f000 fc6c 	bl	800fcf8 <__i2b>
 800f420:	9b04      	ldr	r3, [sp, #16]
 800f422:	4605      	mov	r5, r0
 800f424:	b166      	cbz	r6, 800f440 <_dtoa_r+0x670>
 800f426:	9a06      	ldr	r2, [sp, #24]
 800f428:	2a00      	cmp	r2, #0
 800f42a:	dd09      	ble.n	800f440 <_dtoa_r+0x670>
 800f42c:	42b2      	cmp	r2, r6
 800f42e:	9905      	ldr	r1, [sp, #20]
 800f430:	bfa8      	it	ge
 800f432:	4632      	movge	r2, r6
 800f434:	1a89      	subs	r1, r1, r2
 800f436:	9105      	str	r1, [sp, #20]
 800f438:	9906      	ldr	r1, [sp, #24]
 800f43a:	1ab6      	subs	r6, r6, r2
 800f43c:	1a8a      	subs	r2, r1, r2
 800f43e:	9206      	str	r2, [sp, #24]
 800f440:	b1fb      	cbz	r3, 800f482 <_dtoa_r+0x6b2>
 800f442:	9a08      	ldr	r2, [sp, #32]
 800f444:	2a00      	cmp	r2, #0
 800f446:	f000 80bc 	beq.w	800f5c2 <_dtoa_r+0x7f2>
 800f44a:	b19c      	cbz	r4, 800f474 <_dtoa_r+0x6a4>
 800f44c:	4629      	mov	r1, r5
 800f44e:	4622      	mov	r2, r4
 800f450:	4648      	mov	r0, r9
 800f452:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f454:	f000 fd10 	bl	800fe78 <__pow5mult>
 800f458:	9a01      	ldr	r2, [sp, #4]
 800f45a:	4601      	mov	r1, r0
 800f45c:	4605      	mov	r5, r0
 800f45e:	4648      	mov	r0, r9
 800f460:	f000 fc60 	bl	800fd24 <__multiply>
 800f464:	9901      	ldr	r1, [sp, #4]
 800f466:	9004      	str	r0, [sp, #16]
 800f468:	4648      	mov	r0, r9
 800f46a:	f000 fb47 	bl	800fafc <_Bfree>
 800f46e:	9a04      	ldr	r2, [sp, #16]
 800f470:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f472:	9201      	str	r2, [sp, #4]
 800f474:	1b1a      	subs	r2, r3, r4
 800f476:	d004      	beq.n	800f482 <_dtoa_r+0x6b2>
 800f478:	9901      	ldr	r1, [sp, #4]
 800f47a:	4648      	mov	r0, r9
 800f47c:	f000 fcfc 	bl	800fe78 <__pow5mult>
 800f480:	9001      	str	r0, [sp, #4]
 800f482:	2101      	movs	r1, #1
 800f484:	4648      	mov	r0, r9
 800f486:	f000 fc37 	bl	800fcf8 <__i2b>
 800f48a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f48c:	4604      	mov	r4, r0
 800f48e:	2b00      	cmp	r3, #0
 800f490:	f000 81d0 	beq.w	800f834 <_dtoa_r+0xa64>
 800f494:	461a      	mov	r2, r3
 800f496:	4601      	mov	r1, r0
 800f498:	4648      	mov	r0, r9
 800f49a:	f000 fced 	bl	800fe78 <__pow5mult>
 800f49e:	9b07      	ldr	r3, [sp, #28]
 800f4a0:	2b01      	cmp	r3, #1
 800f4a2:	4604      	mov	r4, r0
 800f4a4:	f300 8095 	bgt.w	800f5d2 <_dtoa_r+0x802>
 800f4a8:	9b02      	ldr	r3, [sp, #8]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	f040 808b 	bne.w	800f5c6 <_dtoa_r+0x7f6>
 800f4b0:	9b03      	ldr	r3, [sp, #12]
 800f4b2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800f4b6:	2a00      	cmp	r2, #0
 800f4b8:	f040 8087 	bne.w	800f5ca <_dtoa_r+0x7fa>
 800f4bc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800f4c0:	0d12      	lsrs	r2, r2, #20
 800f4c2:	0512      	lsls	r2, r2, #20
 800f4c4:	2a00      	cmp	r2, #0
 800f4c6:	f000 8082 	beq.w	800f5ce <_dtoa_r+0x7fe>
 800f4ca:	9b05      	ldr	r3, [sp, #20]
 800f4cc:	3301      	adds	r3, #1
 800f4ce:	9305      	str	r3, [sp, #20]
 800f4d0:	9b06      	ldr	r3, [sp, #24]
 800f4d2:	3301      	adds	r3, #1
 800f4d4:	9306      	str	r3, [sp, #24]
 800f4d6:	2301      	movs	r3, #1
 800f4d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f4da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	f000 81af 	beq.w	800f840 <_dtoa_r+0xa70>
 800f4e2:	6922      	ldr	r2, [r4, #16]
 800f4e4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f4e8:	6910      	ldr	r0, [r2, #16]
 800f4ea:	f000 fbb9 	bl	800fc60 <__hi0bits>
 800f4ee:	f1c0 0020 	rsb	r0, r0, #32
 800f4f2:	9b06      	ldr	r3, [sp, #24]
 800f4f4:	4418      	add	r0, r3
 800f4f6:	f010 001f 	ands.w	r0, r0, #31
 800f4fa:	d076      	beq.n	800f5ea <_dtoa_r+0x81a>
 800f4fc:	f1c0 0220 	rsb	r2, r0, #32
 800f500:	2a04      	cmp	r2, #4
 800f502:	dd69      	ble.n	800f5d8 <_dtoa_r+0x808>
 800f504:	9b05      	ldr	r3, [sp, #20]
 800f506:	f1c0 001c 	rsb	r0, r0, #28
 800f50a:	4403      	add	r3, r0
 800f50c:	9305      	str	r3, [sp, #20]
 800f50e:	9b06      	ldr	r3, [sp, #24]
 800f510:	4406      	add	r6, r0
 800f512:	4403      	add	r3, r0
 800f514:	9306      	str	r3, [sp, #24]
 800f516:	9b05      	ldr	r3, [sp, #20]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	dd05      	ble.n	800f528 <_dtoa_r+0x758>
 800f51c:	9901      	ldr	r1, [sp, #4]
 800f51e:	461a      	mov	r2, r3
 800f520:	4648      	mov	r0, r9
 800f522:	f000 fd03 	bl	800ff2c <__lshift>
 800f526:	9001      	str	r0, [sp, #4]
 800f528:	9b06      	ldr	r3, [sp, #24]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	dd05      	ble.n	800f53a <_dtoa_r+0x76a>
 800f52e:	4621      	mov	r1, r4
 800f530:	461a      	mov	r2, r3
 800f532:	4648      	mov	r0, r9
 800f534:	f000 fcfa 	bl	800ff2c <__lshift>
 800f538:	4604      	mov	r4, r0
 800f53a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d056      	beq.n	800f5ee <_dtoa_r+0x81e>
 800f540:	9801      	ldr	r0, [sp, #4]
 800f542:	4621      	mov	r1, r4
 800f544:	f000 fd5e 	bl	8010004 <__mcmp>
 800f548:	2800      	cmp	r0, #0
 800f54a:	da50      	bge.n	800f5ee <_dtoa_r+0x81e>
 800f54c:	f108 33ff 	add.w	r3, r8, #4294967295
 800f550:	9304      	str	r3, [sp, #16]
 800f552:	9901      	ldr	r1, [sp, #4]
 800f554:	2300      	movs	r3, #0
 800f556:	220a      	movs	r2, #10
 800f558:	4648      	mov	r0, r9
 800f55a:	f000 faf1 	bl	800fb40 <__multadd>
 800f55e:	9b08      	ldr	r3, [sp, #32]
 800f560:	9001      	str	r0, [sp, #4]
 800f562:	2b00      	cmp	r3, #0
 800f564:	f000 816e 	beq.w	800f844 <_dtoa_r+0xa74>
 800f568:	4629      	mov	r1, r5
 800f56a:	2300      	movs	r3, #0
 800f56c:	220a      	movs	r2, #10
 800f56e:	4648      	mov	r0, r9
 800f570:	f000 fae6 	bl	800fb40 <__multadd>
 800f574:	f1bb 0f00 	cmp.w	fp, #0
 800f578:	4605      	mov	r5, r0
 800f57a:	dc64      	bgt.n	800f646 <_dtoa_r+0x876>
 800f57c:	9b07      	ldr	r3, [sp, #28]
 800f57e:	2b02      	cmp	r3, #2
 800f580:	dc3e      	bgt.n	800f600 <_dtoa_r+0x830>
 800f582:	e060      	b.n	800f646 <_dtoa_r+0x876>
 800f584:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f586:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f58a:	e73c      	b.n	800f406 <_dtoa_r+0x636>
 800f58c:	f10a 34ff 	add.w	r4, sl, #4294967295
 800f590:	42a3      	cmp	r3, r4
 800f592:	bfbf      	itttt	lt
 800f594:	1ae2      	sublt	r2, r4, r3
 800f596:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f598:	189b      	addlt	r3, r3, r2
 800f59a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800f59c:	bfae      	itee	ge
 800f59e:	1b1c      	subge	r4, r3, r4
 800f5a0:	4623      	movlt	r3, r4
 800f5a2:	2400      	movlt	r4, #0
 800f5a4:	f1ba 0f00 	cmp.w	sl, #0
 800f5a8:	bfb5      	itete	lt
 800f5aa:	9a05      	ldrlt	r2, [sp, #20]
 800f5ac:	9e05      	ldrge	r6, [sp, #20]
 800f5ae:	eba2 060a 	sublt.w	r6, r2, sl
 800f5b2:	4652      	movge	r2, sl
 800f5b4:	bfb8      	it	lt
 800f5b6:	2200      	movlt	r2, #0
 800f5b8:	e727      	b.n	800f40a <_dtoa_r+0x63a>
 800f5ba:	9e05      	ldr	r6, [sp, #20]
 800f5bc:	9d08      	ldr	r5, [sp, #32]
 800f5be:	461c      	mov	r4, r3
 800f5c0:	e730      	b.n	800f424 <_dtoa_r+0x654>
 800f5c2:	461a      	mov	r2, r3
 800f5c4:	e758      	b.n	800f478 <_dtoa_r+0x6a8>
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	e786      	b.n	800f4d8 <_dtoa_r+0x708>
 800f5ca:	9b02      	ldr	r3, [sp, #8]
 800f5cc:	e784      	b.n	800f4d8 <_dtoa_r+0x708>
 800f5ce:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f5d0:	e783      	b.n	800f4da <_dtoa_r+0x70a>
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f5d6:	e784      	b.n	800f4e2 <_dtoa_r+0x712>
 800f5d8:	d09d      	beq.n	800f516 <_dtoa_r+0x746>
 800f5da:	9b05      	ldr	r3, [sp, #20]
 800f5dc:	321c      	adds	r2, #28
 800f5de:	4413      	add	r3, r2
 800f5e0:	9305      	str	r3, [sp, #20]
 800f5e2:	9b06      	ldr	r3, [sp, #24]
 800f5e4:	4416      	add	r6, r2
 800f5e6:	4413      	add	r3, r2
 800f5e8:	e794      	b.n	800f514 <_dtoa_r+0x744>
 800f5ea:	4602      	mov	r2, r0
 800f5ec:	e7f5      	b.n	800f5da <_dtoa_r+0x80a>
 800f5ee:	f1ba 0f00 	cmp.w	sl, #0
 800f5f2:	f8cd 8010 	str.w	r8, [sp, #16]
 800f5f6:	46d3      	mov	fp, sl
 800f5f8:	dc21      	bgt.n	800f63e <_dtoa_r+0x86e>
 800f5fa:	9b07      	ldr	r3, [sp, #28]
 800f5fc:	2b02      	cmp	r3, #2
 800f5fe:	dd1e      	ble.n	800f63e <_dtoa_r+0x86e>
 800f600:	f1bb 0f00 	cmp.w	fp, #0
 800f604:	f47f aeb7 	bne.w	800f376 <_dtoa_r+0x5a6>
 800f608:	4621      	mov	r1, r4
 800f60a:	465b      	mov	r3, fp
 800f60c:	2205      	movs	r2, #5
 800f60e:	4648      	mov	r0, r9
 800f610:	f000 fa96 	bl	800fb40 <__multadd>
 800f614:	4601      	mov	r1, r0
 800f616:	4604      	mov	r4, r0
 800f618:	9801      	ldr	r0, [sp, #4]
 800f61a:	f000 fcf3 	bl	8010004 <__mcmp>
 800f61e:	2800      	cmp	r0, #0
 800f620:	f77f aea9 	ble.w	800f376 <_dtoa_r+0x5a6>
 800f624:	463e      	mov	r6, r7
 800f626:	2331      	movs	r3, #49	@ 0x31
 800f628:	f806 3b01 	strb.w	r3, [r6], #1
 800f62c:	9b04      	ldr	r3, [sp, #16]
 800f62e:	3301      	adds	r3, #1
 800f630:	9304      	str	r3, [sp, #16]
 800f632:	e6a4      	b.n	800f37e <_dtoa_r+0x5ae>
 800f634:	f8cd 8010 	str.w	r8, [sp, #16]
 800f638:	4654      	mov	r4, sl
 800f63a:	4625      	mov	r5, r4
 800f63c:	e7f2      	b.n	800f624 <_dtoa_r+0x854>
 800f63e:	9b08      	ldr	r3, [sp, #32]
 800f640:	2b00      	cmp	r3, #0
 800f642:	f000 8103 	beq.w	800f84c <_dtoa_r+0xa7c>
 800f646:	2e00      	cmp	r6, #0
 800f648:	dd05      	ble.n	800f656 <_dtoa_r+0x886>
 800f64a:	4629      	mov	r1, r5
 800f64c:	4632      	mov	r2, r6
 800f64e:	4648      	mov	r0, r9
 800f650:	f000 fc6c 	bl	800ff2c <__lshift>
 800f654:	4605      	mov	r5, r0
 800f656:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d058      	beq.n	800f70e <_dtoa_r+0x93e>
 800f65c:	6869      	ldr	r1, [r5, #4]
 800f65e:	4648      	mov	r0, r9
 800f660:	f000 fa0c 	bl	800fa7c <_Balloc>
 800f664:	4606      	mov	r6, r0
 800f666:	b928      	cbnz	r0, 800f674 <_dtoa_r+0x8a4>
 800f668:	4b82      	ldr	r3, [pc, #520]	@ (800f874 <_dtoa_r+0xaa4>)
 800f66a:	4602      	mov	r2, r0
 800f66c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f670:	f7ff bbc7 	b.w	800ee02 <_dtoa_r+0x32>
 800f674:	692a      	ldr	r2, [r5, #16]
 800f676:	3202      	adds	r2, #2
 800f678:	0092      	lsls	r2, r2, #2
 800f67a:	f105 010c 	add.w	r1, r5, #12
 800f67e:	300c      	adds	r0, #12
 800f680:	f001 ff1e 	bl	80114c0 <memcpy>
 800f684:	2201      	movs	r2, #1
 800f686:	4631      	mov	r1, r6
 800f688:	4648      	mov	r0, r9
 800f68a:	f000 fc4f 	bl	800ff2c <__lshift>
 800f68e:	1c7b      	adds	r3, r7, #1
 800f690:	9305      	str	r3, [sp, #20]
 800f692:	eb07 030b 	add.w	r3, r7, fp
 800f696:	9309      	str	r3, [sp, #36]	@ 0x24
 800f698:	9b02      	ldr	r3, [sp, #8]
 800f69a:	f003 0301 	and.w	r3, r3, #1
 800f69e:	46a8      	mov	r8, r5
 800f6a0:	9308      	str	r3, [sp, #32]
 800f6a2:	4605      	mov	r5, r0
 800f6a4:	9b05      	ldr	r3, [sp, #20]
 800f6a6:	9801      	ldr	r0, [sp, #4]
 800f6a8:	4621      	mov	r1, r4
 800f6aa:	f103 3bff 	add.w	fp, r3, #4294967295
 800f6ae:	f7ff fb07 	bl	800ecc0 <quorem>
 800f6b2:	4641      	mov	r1, r8
 800f6b4:	9002      	str	r0, [sp, #8]
 800f6b6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800f6ba:	9801      	ldr	r0, [sp, #4]
 800f6bc:	f000 fca2 	bl	8010004 <__mcmp>
 800f6c0:	462a      	mov	r2, r5
 800f6c2:	9006      	str	r0, [sp, #24]
 800f6c4:	4621      	mov	r1, r4
 800f6c6:	4648      	mov	r0, r9
 800f6c8:	f000 fcb8 	bl	801003c <__mdiff>
 800f6cc:	68c2      	ldr	r2, [r0, #12]
 800f6ce:	4606      	mov	r6, r0
 800f6d0:	b9fa      	cbnz	r2, 800f712 <_dtoa_r+0x942>
 800f6d2:	4601      	mov	r1, r0
 800f6d4:	9801      	ldr	r0, [sp, #4]
 800f6d6:	f000 fc95 	bl	8010004 <__mcmp>
 800f6da:	4602      	mov	r2, r0
 800f6dc:	4631      	mov	r1, r6
 800f6de:	4648      	mov	r0, r9
 800f6e0:	920a      	str	r2, [sp, #40]	@ 0x28
 800f6e2:	f000 fa0b 	bl	800fafc <_Bfree>
 800f6e6:	9b07      	ldr	r3, [sp, #28]
 800f6e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f6ea:	9e05      	ldr	r6, [sp, #20]
 800f6ec:	ea43 0102 	orr.w	r1, r3, r2
 800f6f0:	9b08      	ldr	r3, [sp, #32]
 800f6f2:	4319      	orrs	r1, r3
 800f6f4:	d10f      	bne.n	800f716 <_dtoa_r+0x946>
 800f6f6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f6fa:	d028      	beq.n	800f74e <_dtoa_r+0x97e>
 800f6fc:	9b06      	ldr	r3, [sp, #24]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	dd02      	ble.n	800f708 <_dtoa_r+0x938>
 800f702:	9b02      	ldr	r3, [sp, #8]
 800f704:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800f708:	f88b a000 	strb.w	sl, [fp]
 800f70c:	e639      	b.n	800f382 <_dtoa_r+0x5b2>
 800f70e:	4628      	mov	r0, r5
 800f710:	e7bd      	b.n	800f68e <_dtoa_r+0x8be>
 800f712:	2201      	movs	r2, #1
 800f714:	e7e2      	b.n	800f6dc <_dtoa_r+0x90c>
 800f716:	9b06      	ldr	r3, [sp, #24]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	db04      	blt.n	800f726 <_dtoa_r+0x956>
 800f71c:	9907      	ldr	r1, [sp, #28]
 800f71e:	430b      	orrs	r3, r1
 800f720:	9908      	ldr	r1, [sp, #32]
 800f722:	430b      	orrs	r3, r1
 800f724:	d120      	bne.n	800f768 <_dtoa_r+0x998>
 800f726:	2a00      	cmp	r2, #0
 800f728:	ddee      	ble.n	800f708 <_dtoa_r+0x938>
 800f72a:	9901      	ldr	r1, [sp, #4]
 800f72c:	2201      	movs	r2, #1
 800f72e:	4648      	mov	r0, r9
 800f730:	f000 fbfc 	bl	800ff2c <__lshift>
 800f734:	4621      	mov	r1, r4
 800f736:	9001      	str	r0, [sp, #4]
 800f738:	f000 fc64 	bl	8010004 <__mcmp>
 800f73c:	2800      	cmp	r0, #0
 800f73e:	dc03      	bgt.n	800f748 <_dtoa_r+0x978>
 800f740:	d1e2      	bne.n	800f708 <_dtoa_r+0x938>
 800f742:	f01a 0f01 	tst.w	sl, #1
 800f746:	d0df      	beq.n	800f708 <_dtoa_r+0x938>
 800f748:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f74c:	d1d9      	bne.n	800f702 <_dtoa_r+0x932>
 800f74e:	2339      	movs	r3, #57	@ 0x39
 800f750:	f88b 3000 	strb.w	r3, [fp]
 800f754:	4633      	mov	r3, r6
 800f756:	461e      	mov	r6, r3
 800f758:	3b01      	subs	r3, #1
 800f75a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f75e:	2a39      	cmp	r2, #57	@ 0x39
 800f760:	d053      	beq.n	800f80a <_dtoa_r+0xa3a>
 800f762:	3201      	adds	r2, #1
 800f764:	701a      	strb	r2, [r3, #0]
 800f766:	e60c      	b.n	800f382 <_dtoa_r+0x5b2>
 800f768:	2a00      	cmp	r2, #0
 800f76a:	dd07      	ble.n	800f77c <_dtoa_r+0x9ac>
 800f76c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f770:	d0ed      	beq.n	800f74e <_dtoa_r+0x97e>
 800f772:	f10a 0301 	add.w	r3, sl, #1
 800f776:	f88b 3000 	strb.w	r3, [fp]
 800f77a:	e602      	b.n	800f382 <_dtoa_r+0x5b2>
 800f77c:	9b05      	ldr	r3, [sp, #20]
 800f77e:	9a05      	ldr	r2, [sp, #20]
 800f780:	f803 ac01 	strb.w	sl, [r3, #-1]
 800f784:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f786:	4293      	cmp	r3, r2
 800f788:	d029      	beq.n	800f7de <_dtoa_r+0xa0e>
 800f78a:	9901      	ldr	r1, [sp, #4]
 800f78c:	2300      	movs	r3, #0
 800f78e:	220a      	movs	r2, #10
 800f790:	4648      	mov	r0, r9
 800f792:	f000 f9d5 	bl	800fb40 <__multadd>
 800f796:	45a8      	cmp	r8, r5
 800f798:	9001      	str	r0, [sp, #4]
 800f79a:	f04f 0300 	mov.w	r3, #0
 800f79e:	f04f 020a 	mov.w	r2, #10
 800f7a2:	4641      	mov	r1, r8
 800f7a4:	4648      	mov	r0, r9
 800f7a6:	d107      	bne.n	800f7b8 <_dtoa_r+0x9e8>
 800f7a8:	f000 f9ca 	bl	800fb40 <__multadd>
 800f7ac:	4680      	mov	r8, r0
 800f7ae:	4605      	mov	r5, r0
 800f7b0:	9b05      	ldr	r3, [sp, #20]
 800f7b2:	3301      	adds	r3, #1
 800f7b4:	9305      	str	r3, [sp, #20]
 800f7b6:	e775      	b.n	800f6a4 <_dtoa_r+0x8d4>
 800f7b8:	f000 f9c2 	bl	800fb40 <__multadd>
 800f7bc:	4629      	mov	r1, r5
 800f7be:	4680      	mov	r8, r0
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	220a      	movs	r2, #10
 800f7c4:	4648      	mov	r0, r9
 800f7c6:	f000 f9bb 	bl	800fb40 <__multadd>
 800f7ca:	4605      	mov	r5, r0
 800f7cc:	e7f0      	b.n	800f7b0 <_dtoa_r+0x9e0>
 800f7ce:	f1bb 0f00 	cmp.w	fp, #0
 800f7d2:	bfcc      	ite	gt
 800f7d4:	465e      	movgt	r6, fp
 800f7d6:	2601      	movle	r6, #1
 800f7d8:	443e      	add	r6, r7
 800f7da:	f04f 0800 	mov.w	r8, #0
 800f7de:	9901      	ldr	r1, [sp, #4]
 800f7e0:	2201      	movs	r2, #1
 800f7e2:	4648      	mov	r0, r9
 800f7e4:	f000 fba2 	bl	800ff2c <__lshift>
 800f7e8:	4621      	mov	r1, r4
 800f7ea:	9001      	str	r0, [sp, #4]
 800f7ec:	f000 fc0a 	bl	8010004 <__mcmp>
 800f7f0:	2800      	cmp	r0, #0
 800f7f2:	dcaf      	bgt.n	800f754 <_dtoa_r+0x984>
 800f7f4:	d102      	bne.n	800f7fc <_dtoa_r+0xa2c>
 800f7f6:	f01a 0f01 	tst.w	sl, #1
 800f7fa:	d1ab      	bne.n	800f754 <_dtoa_r+0x984>
 800f7fc:	4633      	mov	r3, r6
 800f7fe:	461e      	mov	r6, r3
 800f800:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f804:	2a30      	cmp	r2, #48	@ 0x30
 800f806:	d0fa      	beq.n	800f7fe <_dtoa_r+0xa2e>
 800f808:	e5bb      	b.n	800f382 <_dtoa_r+0x5b2>
 800f80a:	429f      	cmp	r7, r3
 800f80c:	d1a3      	bne.n	800f756 <_dtoa_r+0x986>
 800f80e:	9b04      	ldr	r3, [sp, #16]
 800f810:	3301      	adds	r3, #1
 800f812:	9304      	str	r3, [sp, #16]
 800f814:	2331      	movs	r3, #49	@ 0x31
 800f816:	703b      	strb	r3, [r7, #0]
 800f818:	e5b3      	b.n	800f382 <_dtoa_r+0x5b2>
 800f81a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f81c:	4f16      	ldr	r7, [pc, #88]	@ (800f878 <_dtoa_r+0xaa8>)
 800f81e:	b11b      	cbz	r3, 800f828 <_dtoa_r+0xa58>
 800f820:	f107 0308 	add.w	r3, r7, #8
 800f824:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800f826:	6013      	str	r3, [r2, #0]
 800f828:	4638      	mov	r0, r7
 800f82a:	b011      	add	sp, #68	@ 0x44
 800f82c:	ecbd 8b02 	vpop	{d8}
 800f830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f834:	9b07      	ldr	r3, [sp, #28]
 800f836:	2b01      	cmp	r3, #1
 800f838:	f77f ae36 	ble.w	800f4a8 <_dtoa_r+0x6d8>
 800f83c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f83e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f840:	2001      	movs	r0, #1
 800f842:	e656      	b.n	800f4f2 <_dtoa_r+0x722>
 800f844:	f1bb 0f00 	cmp.w	fp, #0
 800f848:	f77f aed7 	ble.w	800f5fa <_dtoa_r+0x82a>
 800f84c:	463e      	mov	r6, r7
 800f84e:	9801      	ldr	r0, [sp, #4]
 800f850:	4621      	mov	r1, r4
 800f852:	f7ff fa35 	bl	800ecc0 <quorem>
 800f856:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800f85a:	f806 ab01 	strb.w	sl, [r6], #1
 800f85e:	1bf2      	subs	r2, r6, r7
 800f860:	4593      	cmp	fp, r2
 800f862:	ddb4      	ble.n	800f7ce <_dtoa_r+0x9fe>
 800f864:	9901      	ldr	r1, [sp, #4]
 800f866:	2300      	movs	r3, #0
 800f868:	220a      	movs	r2, #10
 800f86a:	4648      	mov	r0, r9
 800f86c:	f000 f968 	bl	800fb40 <__multadd>
 800f870:	9001      	str	r0, [sp, #4]
 800f872:	e7ec      	b.n	800f84e <_dtoa_r+0xa7e>
 800f874:	080128f5 	.word	0x080128f5
 800f878:	08012879 	.word	0x08012879

0800f87c <_free_r>:
 800f87c:	b538      	push	{r3, r4, r5, lr}
 800f87e:	4605      	mov	r5, r0
 800f880:	2900      	cmp	r1, #0
 800f882:	d041      	beq.n	800f908 <_free_r+0x8c>
 800f884:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f888:	1f0c      	subs	r4, r1, #4
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	bfb8      	it	lt
 800f88e:	18e4      	addlt	r4, r4, r3
 800f890:	f000 f8e8 	bl	800fa64 <__malloc_lock>
 800f894:	4a1d      	ldr	r2, [pc, #116]	@ (800f90c <_free_r+0x90>)
 800f896:	6813      	ldr	r3, [r2, #0]
 800f898:	b933      	cbnz	r3, 800f8a8 <_free_r+0x2c>
 800f89a:	6063      	str	r3, [r4, #4]
 800f89c:	6014      	str	r4, [r2, #0]
 800f89e:	4628      	mov	r0, r5
 800f8a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f8a4:	f000 b8e4 	b.w	800fa70 <__malloc_unlock>
 800f8a8:	42a3      	cmp	r3, r4
 800f8aa:	d908      	bls.n	800f8be <_free_r+0x42>
 800f8ac:	6820      	ldr	r0, [r4, #0]
 800f8ae:	1821      	adds	r1, r4, r0
 800f8b0:	428b      	cmp	r3, r1
 800f8b2:	bf01      	itttt	eq
 800f8b4:	6819      	ldreq	r1, [r3, #0]
 800f8b6:	685b      	ldreq	r3, [r3, #4]
 800f8b8:	1809      	addeq	r1, r1, r0
 800f8ba:	6021      	streq	r1, [r4, #0]
 800f8bc:	e7ed      	b.n	800f89a <_free_r+0x1e>
 800f8be:	461a      	mov	r2, r3
 800f8c0:	685b      	ldr	r3, [r3, #4]
 800f8c2:	b10b      	cbz	r3, 800f8c8 <_free_r+0x4c>
 800f8c4:	42a3      	cmp	r3, r4
 800f8c6:	d9fa      	bls.n	800f8be <_free_r+0x42>
 800f8c8:	6811      	ldr	r1, [r2, #0]
 800f8ca:	1850      	adds	r0, r2, r1
 800f8cc:	42a0      	cmp	r0, r4
 800f8ce:	d10b      	bne.n	800f8e8 <_free_r+0x6c>
 800f8d0:	6820      	ldr	r0, [r4, #0]
 800f8d2:	4401      	add	r1, r0
 800f8d4:	1850      	adds	r0, r2, r1
 800f8d6:	4283      	cmp	r3, r0
 800f8d8:	6011      	str	r1, [r2, #0]
 800f8da:	d1e0      	bne.n	800f89e <_free_r+0x22>
 800f8dc:	6818      	ldr	r0, [r3, #0]
 800f8de:	685b      	ldr	r3, [r3, #4]
 800f8e0:	6053      	str	r3, [r2, #4]
 800f8e2:	4408      	add	r0, r1
 800f8e4:	6010      	str	r0, [r2, #0]
 800f8e6:	e7da      	b.n	800f89e <_free_r+0x22>
 800f8e8:	d902      	bls.n	800f8f0 <_free_r+0x74>
 800f8ea:	230c      	movs	r3, #12
 800f8ec:	602b      	str	r3, [r5, #0]
 800f8ee:	e7d6      	b.n	800f89e <_free_r+0x22>
 800f8f0:	6820      	ldr	r0, [r4, #0]
 800f8f2:	1821      	adds	r1, r4, r0
 800f8f4:	428b      	cmp	r3, r1
 800f8f6:	bf04      	itt	eq
 800f8f8:	6819      	ldreq	r1, [r3, #0]
 800f8fa:	685b      	ldreq	r3, [r3, #4]
 800f8fc:	6063      	str	r3, [r4, #4]
 800f8fe:	bf04      	itt	eq
 800f900:	1809      	addeq	r1, r1, r0
 800f902:	6021      	streq	r1, [r4, #0]
 800f904:	6054      	str	r4, [r2, #4]
 800f906:	e7ca      	b.n	800f89e <_free_r+0x22>
 800f908:	bd38      	pop	{r3, r4, r5, pc}
 800f90a:	bf00      	nop
 800f90c:	2400057c 	.word	0x2400057c

0800f910 <malloc>:
 800f910:	4b02      	ldr	r3, [pc, #8]	@ (800f91c <malloc+0xc>)
 800f912:	4601      	mov	r1, r0
 800f914:	6818      	ldr	r0, [r3, #0]
 800f916:	f000 b825 	b.w	800f964 <_malloc_r>
 800f91a:	bf00      	nop
 800f91c:	2400001c 	.word	0x2400001c

0800f920 <sbrk_aligned>:
 800f920:	b570      	push	{r4, r5, r6, lr}
 800f922:	4e0f      	ldr	r6, [pc, #60]	@ (800f960 <sbrk_aligned+0x40>)
 800f924:	460c      	mov	r4, r1
 800f926:	6831      	ldr	r1, [r6, #0]
 800f928:	4605      	mov	r5, r0
 800f92a:	b911      	cbnz	r1, 800f932 <sbrk_aligned+0x12>
 800f92c:	f001 fdb8 	bl	80114a0 <_sbrk_r>
 800f930:	6030      	str	r0, [r6, #0]
 800f932:	4621      	mov	r1, r4
 800f934:	4628      	mov	r0, r5
 800f936:	f001 fdb3 	bl	80114a0 <_sbrk_r>
 800f93a:	1c43      	adds	r3, r0, #1
 800f93c:	d103      	bne.n	800f946 <sbrk_aligned+0x26>
 800f93e:	f04f 34ff 	mov.w	r4, #4294967295
 800f942:	4620      	mov	r0, r4
 800f944:	bd70      	pop	{r4, r5, r6, pc}
 800f946:	1cc4      	adds	r4, r0, #3
 800f948:	f024 0403 	bic.w	r4, r4, #3
 800f94c:	42a0      	cmp	r0, r4
 800f94e:	d0f8      	beq.n	800f942 <sbrk_aligned+0x22>
 800f950:	1a21      	subs	r1, r4, r0
 800f952:	4628      	mov	r0, r5
 800f954:	f001 fda4 	bl	80114a0 <_sbrk_r>
 800f958:	3001      	adds	r0, #1
 800f95a:	d1f2      	bne.n	800f942 <sbrk_aligned+0x22>
 800f95c:	e7ef      	b.n	800f93e <sbrk_aligned+0x1e>
 800f95e:	bf00      	nop
 800f960:	24000578 	.word	0x24000578

0800f964 <_malloc_r>:
 800f964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f968:	1ccd      	adds	r5, r1, #3
 800f96a:	f025 0503 	bic.w	r5, r5, #3
 800f96e:	3508      	adds	r5, #8
 800f970:	2d0c      	cmp	r5, #12
 800f972:	bf38      	it	cc
 800f974:	250c      	movcc	r5, #12
 800f976:	2d00      	cmp	r5, #0
 800f978:	4606      	mov	r6, r0
 800f97a:	db01      	blt.n	800f980 <_malloc_r+0x1c>
 800f97c:	42a9      	cmp	r1, r5
 800f97e:	d904      	bls.n	800f98a <_malloc_r+0x26>
 800f980:	230c      	movs	r3, #12
 800f982:	6033      	str	r3, [r6, #0]
 800f984:	2000      	movs	r0, #0
 800f986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f98a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fa60 <_malloc_r+0xfc>
 800f98e:	f000 f869 	bl	800fa64 <__malloc_lock>
 800f992:	f8d8 3000 	ldr.w	r3, [r8]
 800f996:	461c      	mov	r4, r3
 800f998:	bb44      	cbnz	r4, 800f9ec <_malloc_r+0x88>
 800f99a:	4629      	mov	r1, r5
 800f99c:	4630      	mov	r0, r6
 800f99e:	f7ff ffbf 	bl	800f920 <sbrk_aligned>
 800f9a2:	1c43      	adds	r3, r0, #1
 800f9a4:	4604      	mov	r4, r0
 800f9a6:	d158      	bne.n	800fa5a <_malloc_r+0xf6>
 800f9a8:	f8d8 4000 	ldr.w	r4, [r8]
 800f9ac:	4627      	mov	r7, r4
 800f9ae:	2f00      	cmp	r7, #0
 800f9b0:	d143      	bne.n	800fa3a <_malloc_r+0xd6>
 800f9b2:	2c00      	cmp	r4, #0
 800f9b4:	d04b      	beq.n	800fa4e <_malloc_r+0xea>
 800f9b6:	6823      	ldr	r3, [r4, #0]
 800f9b8:	4639      	mov	r1, r7
 800f9ba:	4630      	mov	r0, r6
 800f9bc:	eb04 0903 	add.w	r9, r4, r3
 800f9c0:	f001 fd6e 	bl	80114a0 <_sbrk_r>
 800f9c4:	4581      	cmp	r9, r0
 800f9c6:	d142      	bne.n	800fa4e <_malloc_r+0xea>
 800f9c8:	6821      	ldr	r1, [r4, #0]
 800f9ca:	1a6d      	subs	r5, r5, r1
 800f9cc:	4629      	mov	r1, r5
 800f9ce:	4630      	mov	r0, r6
 800f9d0:	f7ff ffa6 	bl	800f920 <sbrk_aligned>
 800f9d4:	3001      	adds	r0, #1
 800f9d6:	d03a      	beq.n	800fa4e <_malloc_r+0xea>
 800f9d8:	6823      	ldr	r3, [r4, #0]
 800f9da:	442b      	add	r3, r5
 800f9dc:	6023      	str	r3, [r4, #0]
 800f9de:	f8d8 3000 	ldr.w	r3, [r8]
 800f9e2:	685a      	ldr	r2, [r3, #4]
 800f9e4:	bb62      	cbnz	r2, 800fa40 <_malloc_r+0xdc>
 800f9e6:	f8c8 7000 	str.w	r7, [r8]
 800f9ea:	e00f      	b.n	800fa0c <_malloc_r+0xa8>
 800f9ec:	6822      	ldr	r2, [r4, #0]
 800f9ee:	1b52      	subs	r2, r2, r5
 800f9f0:	d420      	bmi.n	800fa34 <_malloc_r+0xd0>
 800f9f2:	2a0b      	cmp	r2, #11
 800f9f4:	d917      	bls.n	800fa26 <_malloc_r+0xc2>
 800f9f6:	1961      	adds	r1, r4, r5
 800f9f8:	42a3      	cmp	r3, r4
 800f9fa:	6025      	str	r5, [r4, #0]
 800f9fc:	bf18      	it	ne
 800f9fe:	6059      	strne	r1, [r3, #4]
 800fa00:	6863      	ldr	r3, [r4, #4]
 800fa02:	bf08      	it	eq
 800fa04:	f8c8 1000 	streq.w	r1, [r8]
 800fa08:	5162      	str	r2, [r4, r5]
 800fa0a:	604b      	str	r3, [r1, #4]
 800fa0c:	4630      	mov	r0, r6
 800fa0e:	f000 f82f 	bl	800fa70 <__malloc_unlock>
 800fa12:	f104 000b 	add.w	r0, r4, #11
 800fa16:	1d23      	adds	r3, r4, #4
 800fa18:	f020 0007 	bic.w	r0, r0, #7
 800fa1c:	1ac2      	subs	r2, r0, r3
 800fa1e:	bf1c      	itt	ne
 800fa20:	1a1b      	subne	r3, r3, r0
 800fa22:	50a3      	strne	r3, [r4, r2]
 800fa24:	e7af      	b.n	800f986 <_malloc_r+0x22>
 800fa26:	6862      	ldr	r2, [r4, #4]
 800fa28:	42a3      	cmp	r3, r4
 800fa2a:	bf0c      	ite	eq
 800fa2c:	f8c8 2000 	streq.w	r2, [r8]
 800fa30:	605a      	strne	r2, [r3, #4]
 800fa32:	e7eb      	b.n	800fa0c <_malloc_r+0xa8>
 800fa34:	4623      	mov	r3, r4
 800fa36:	6864      	ldr	r4, [r4, #4]
 800fa38:	e7ae      	b.n	800f998 <_malloc_r+0x34>
 800fa3a:	463c      	mov	r4, r7
 800fa3c:	687f      	ldr	r7, [r7, #4]
 800fa3e:	e7b6      	b.n	800f9ae <_malloc_r+0x4a>
 800fa40:	461a      	mov	r2, r3
 800fa42:	685b      	ldr	r3, [r3, #4]
 800fa44:	42a3      	cmp	r3, r4
 800fa46:	d1fb      	bne.n	800fa40 <_malloc_r+0xdc>
 800fa48:	2300      	movs	r3, #0
 800fa4a:	6053      	str	r3, [r2, #4]
 800fa4c:	e7de      	b.n	800fa0c <_malloc_r+0xa8>
 800fa4e:	230c      	movs	r3, #12
 800fa50:	6033      	str	r3, [r6, #0]
 800fa52:	4630      	mov	r0, r6
 800fa54:	f000 f80c 	bl	800fa70 <__malloc_unlock>
 800fa58:	e794      	b.n	800f984 <_malloc_r+0x20>
 800fa5a:	6005      	str	r5, [r0, #0]
 800fa5c:	e7d6      	b.n	800fa0c <_malloc_r+0xa8>
 800fa5e:	bf00      	nop
 800fa60:	2400057c 	.word	0x2400057c

0800fa64 <__malloc_lock>:
 800fa64:	4801      	ldr	r0, [pc, #4]	@ (800fa6c <__malloc_lock+0x8>)
 800fa66:	f7ff b922 	b.w	800ecae <__retarget_lock_acquire_recursive>
 800fa6a:	bf00      	nop
 800fa6c:	24000574 	.word	0x24000574

0800fa70 <__malloc_unlock>:
 800fa70:	4801      	ldr	r0, [pc, #4]	@ (800fa78 <__malloc_unlock+0x8>)
 800fa72:	f7ff b91d 	b.w	800ecb0 <__retarget_lock_release_recursive>
 800fa76:	bf00      	nop
 800fa78:	24000574 	.word	0x24000574

0800fa7c <_Balloc>:
 800fa7c:	b570      	push	{r4, r5, r6, lr}
 800fa7e:	69c6      	ldr	r6, [r0, #28]
 800fa80:	4604      	mov	r4, r0
 800fa82:	460d      	mov	r5, r1
 800fa84:	b976      	cbnz	r6, 800faa4 <_Balloc+0x28>
 800fa86:	2010      	movs	r0, #16
 800fa88:	f7ff ff42 	bl	800f910 <malloc>
 800fa8c:	4602      	mov	r2, r0
 800fa8e:	61e0      	str	r0, [r4, #28]
 800fa90:	b920      	cbnz	r0, 800fa9c <_Balloc+0x20>
 800fa92:	4b18      	ldr	r3, [pc, #96]	@ (800faf4 <_Balloc+0x78>)
 800fa94:	4818      	ldr	r0, [pc, #96]	@ (800faf8 <_Balloc+0x7c>)
 800fa96:	216b      	movs	r1, #107	@ 0x6b
 800fa98:	f001 fd2a 	bl	80114f0 <__assert_func>
 800fa9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800faa0:	6006      	str	r6, [r0, #0]
 800faa2:	60c6      	str	r6, [r0, #12]
 800faa4:	69e6      	ldr	r6, [r4, #28]
 800faa6:	68f3      	ldr	r3, [r6, #12]
 800faa8:	b183      	cbz	r3, 800facc <_Balloc+0x50>
 800faaa:	69e3      	ldr	r3, [r4, #28]
 800faac:	68db      	ldr	r3, [r3, #12]
 800faae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fab2:	b9b8      	cbnz	r0, 800fae4 <_Balloc+0x68>
 800fab4:	2101      	movs	r1, #1
 800fab6:	fa01 f605 	lsl.w	r6, r1, r5
 800faba:	1d72      	adds	r2, r6, #5
 800fabc:	0092      	lsls	r2, r2, #2
 800fabe:	4620      	mov	r0, r4
 800fac0:	f001 fd34 	bl	801152c <_calloc_r>
 800fac4:	b160      	cbz	r0, 800fae0 <_Balloc+0x64>
 800fac6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800faca:	e00e      	b.n	800faea <_Balloc+0x6e>
 800facc:	2221      	movs	r2, #33	@ 0x21
 800face:	2104      	movs	r1, #4
 800fad0:	4620      	mov	r0, r4
 800fad2:	f001 fd2b 	bl	801152c <_calloc_r>
 800fad6:	69e3      	ldr	r3, [r4, #28]
 800fad8:	60f0      	str	r0, [r6, #12]
 800fada:	68db      	ldr	r3, [r3, #12]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d1e4      	bne.n	800faaa <_Balloc+0x2e>
 800fae0:	2000      	movs	r0, #0
 800fae2:	bd70      	pop	{r4, r5, r6, pc}
 800fae4:	6802      	ldr	r2, [r0, #0]
 800fae6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800faea:	2300      	movs	r3, #0
 800faec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800faf0:	e7f7      	b.n	800fae2 <_Balloc+0x66>
 800faf2:	bf00      	nop
 800faf4:	08012886 	.word	0x08012886
 800faf8:	08012906 	.word	0x08012906

0800fafc <_Bfree>:
 800fafc:	b570      	push	{r4, r5, r6, lr}
 800fafe:	69c6      	ldr	r6, [r0, #28]
 800fb00:	4605      	mov	r5, r0
 800fb02:	460c      	mov	r4, r1
 800fb04:	b976      	cbnz	r6, 800fb24 <_Bfree+0x28>
 800fb06:	2010      	movs	r0, #16
 800fb08:	f7ff ff02 	bl	800f910 <malloc>
 800fb0c:	4602      	mov	r2, r0
 800fb0e:	61e8      	str	r0, [r5, #28]
 800fb10:	b920      	cbnz	r0, 800fb1c <_Bfree+0x20>
 800fb12:	4b09      	ldr	r3, [pc, #36]	@ (800fb38 <_Bfree+0x3c>)
 800fb14:	4809      	ldr	r0, [pc, #36]	@ (800fb3c <_Bfree+0x40>)
 800fb16:	218f      	movs	r1, #143	@ 0x8f
 800fb18:	f001 fcea 	bl	80114f0 <__assert_func>
 800fb1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fb20:	6006      	str	r6, [r0, #0]
 800fb22:	60c6      	str	r6, [r0, #12]
 800fb24:	b13c      	cbz	r4, 800fb36 <_Bfree+0x3a>
 800fb26:	69eb      	ldr	r3, [r5, #28]
 800fb28:	6862      	ldr	r2, [r4, #4]
 800fb2a:	68db      	ldr	r3, [r3, #12]
 800fb2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fb30:	6021      	str	r1, [r4, #0]
 800fb32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fb36:	bd70      	pop	{r4, r5, r6, pc}
 800fb38:	08012886 	.word	0x08012886
 800fb3c:	08012906 	.word	0x08012906

0800fb40 <__multadd>:
 800fb40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb44:	690d      	ldr	r5, [r1, #16]
 800fb46:	4607      	mov	r7, r0
 800fb48:	460c      	mov	r4, r1
 800fb4a:	461e      	mov	r6, r3
 800fb4c:	f101 0c14 	add.w	ip, r1, #20
 800fb50:	2000      	movs	r0, #0
 800fb52:	f8dc 3000 	ldr.w	r3, [ip]
 800fb56:	b299      	uxth	r1, r3
 800fb58:	fb02 6101 	mla	r1, r2, r1, r6
 800fb5c:	0c1e      	lsrs	r6, r3, #16
 800fb5e:	0c0b      	lsrs	r3, r1, #16
 800fb60:	fb02 3306 	mla	r3, r2, r6, r3
 800fb64:	b289      	uxth	r1, r1
 800fb66:	3001      	adds	r0, #1
 800fb68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fb6c:	4285      	cmp	r5, r0
 800fb6e:	f84c 1b04 	str.w	r1, [ip], #4
 800fb72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fb76:	dcec      	bgt.n	800fb52 <__multadd+0x12>
 800fb78:	b30e      	cbz	r6, 800fbbe <__multadd+0x7e>
 800fb7a:	68a3      	ldr	r3, [r4, #8]
 800fb7c:	42ab      	cmp	r3, r5
 800fb7e:	dc19      	bgt.n	800fbb4 <__multadd+0x74>
 800fb80:	6861      	ldr	r1, [r4, #4]
 800fb82:	4638      	mov	r0, r7
 800fb84:	3101      	adds	r1, #1
 800fb86:	f7ff ff79 	bl	800fa7c <_Balloc>
 800fb8a:	4680      	mov	r8, r0
 800fb8c:	b928      	cbnz	r0, 800fb9a <__multadd+0x5a>
 800fb8e:	4602      	mov	r2, r0
 800fb90:	4b0c      	ldr	r3, [pc, #48]	@ (800fbc4 <__multadd+0x84>)
 800fb92:	480d      	ldr	r0, [pc, #52]	@ (800fbc8 <__multadd+0x88>)
 800fb94:	21ba      	movs	r1, #186	@ 0xba
 800fb96:	f001 fcab 	bl	80114f0 <__assert_func>
 800fb9a:	6922      	ldr	r2, [r4, #16]
 800fb9c:	3202      	adds	r2, #2
 800fb9e:	f104 010c 	add.w	r1, r4, #12
 800fba2:	0092      	lsls	r2, r2, #2
 800fba4:	300c      	adds	r0, #12
 800fba6:	f001 fc8b 	bl	80114c0 <memcpy>
 800fbaa:	4621      	mov	r1, r4
 800fbac:	4638      	mov	r0, r7
 800fbae:	f7ff ffa5 	bl	800fafc <_Bfree>
 800fbb2:	4644      	mov	r4, r8
 800fbb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fbb8:	3501      	adds	r5, #1
 800fbba:	615e      	str	r6, [r3, #20]
 800fbbc:	6125      	str	r5, [r4, #16]
 800fbbe:	4620      	mov	r0, r4
 800fbc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbc4:	080128f5 	.word	0x080128f5
 800fbc8:	08012906 	.word	0x08012906

0800fbcc <__s2b>:
 800fbcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbd0:	460c      	mov	r4, r1
 800fbd2:	4615      	mov	r5, r2
 800fbd4:	461f      	mov	r7, r3
 800fbd6:	2209      	movs	r2, #9
 800fbd8:	3308      	adds	r3, #8
 800fbda:	4606      	mov	r6, r0
 800fbdc:	fb93 f3f2 	sdiv	r3, r3, r2
 800fbe0:	2100      	movs	r1, #0
 800fbe2:	2201      	movs	r2, #1
 800fbe4:	429a      	cmp	r2, r3
 800fbe6:	db09      	blt.n	800fbfc <__s2b+0x30>
 800fbe8:	4630      	mov	r0, r6
 800fbea:	f7ff ff47 	bl	800fa7c <_Balloc>
 800fbee:	b940      	cbnz	r0, 800fc02 <__s2b+0x36>
 800fbf0:	4602      	mov	r2, r0
 800fbf2:	4b19      	ldr	r3, [pc, #100]	@ (800fc58 <__s2b+0x8c>)
 800fbf4:	4819      	ldr	r0, [pc, #100]	@ (800fc5c <__s2b+0x90>)
 800fbf6:	21d3      	movs	r1, #211	@ 0xd3
 800fbf8:	f001 fc7a 	bl	80114f0 <__assert_func>
 800fbfc:	0052      	lsls	r2, r2, #1
 800fbfe:	3101      	adds	r1, #1
 800fc00:	e7f0      	b.n	800fbe4 <__s2b+0x18>
 800fc02:	9b08      	ldr	r3, [sp, #32]
 800fc04:	6143      	str	r3, [r0, #20]
 800fc06:	2d09      	cmp	r5, #9
 800fc08:	f04f 0301 	mov.w	r3, #1
 800fc0c:	6103      	str	r3, [r0, #16]
 800fc0e:	dd16      	ble.n	800fc3e <__s2b+0x72>
 800fc10:	f104 0909 	add.w	r9, r4, #9
 800fc14:	46c8      	mov	r8, r9
 800fc16:	442c      	add	r4, r5
 800fc18:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fc1c:	4601      	mov	r1, r0
 800fc1e:	3b30      	subs	r3, #48	@ 0x30
 800fc20:	220a      	movs	r2, #10
 800fc22:	4630      	mov	r0, r6
 800fc24:	f7ff ff8c 	bl	800fb40 <__multadd>
 800fc28:	45a0      	cmp	r8, r4
 800fc2a:	d1f5      	bne.n	800fc18 <__s2b+0x4c>
 800fc2c:	f1a5 0408 	sub.w	r4, r5, #8
 800fc30:	444c      	add	r4, r9
 800fc32:	1b2d      	subs	r5, r5, r4
 800fc34:	1963      	adds	r3, r4, r5
 800fc36:	42bb      	cmp	r3, r7
 800fc38:	db04      	blt.n	800fc44 <__s2b+0x78>
 800fc3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc3e:	340a      	adds	r4, #10
 800fc40:	2509      	movs	r5, #9
 800fc42:	e7f6      	b.n	800fc32 <__s2b+0x66>
 800fc44:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fc48:	4601      	mov	r1, r0
 800fc4a:	3b30      	subs	r3, #48	@ 0x30
 800fc4c:	220a      	movs	r2, #10
 800fc4e:	4630      	mov	r0, r6
 800fc50:	f7ff ff76 	bl	800fb40 <__multadd>
 800fc54:	e7ee      	b.n	800fc34 <__s2b+0x68>
 800fc56:	bf00      	nop
 800fc58:	080128f5 	.word	0x080128f5
 800fc5c:	08012906 	.word	0x08012906

0800fc60 <__hi0bits>:
 800fc60:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fc64:	4603      	mov	r3, r0
 800fc66:	bf36      	itet	cc
 800fc68:	0403      	lslcc	r3, r0, #16
 800fc6a:	2000      	movcs	r0, #0
 800fc6c:	2010      	movcc	r0, #16
 800fc6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fc72:	bf3c      	itt	cc
 800fc74:	021b      	lslcc	r3, r3, #8
 800fc76:	3008      	addcc	r0, #8
 800fc78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fc7c:	bf3c      	itt	cc
 800fc7e:	011b      	lslcc	r3, r3, #4
 800fc80:	3004      	addcc	r0, #4
 800fc82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fc86:	bf3c      	itt	cc
 800fc88:	009b      	lslcc	r3, r3, #2
 800fc8a:	3002      	addcc	r0, #2
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	db05      	blt.n	800fc9c <__hi0bits+0x3c>
 800fc90:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fc94:	f100 0001 	add.w	r0, r0, #1
 800fc98:	bf08      	it	eq
 800fc9a:	2020      	moveq	r0, #32
 800fc9c:	4770      	bx	lr

0800fc9e <__lo0bits>:
 800fc9e:	6803      	ldr	r3, [r0, #0]
 800fca0:	4602      	mov	r2, r0
 800fca2:	f013 0007 	ands.w	r0, r3, #7
 800fca6:	d00b      	beq.n	800fcc0 <__lo0bits+0x22>
 800fca8:	07d9      	lsls	r1, r3, #31
 800fcaa:	d421      	bmi.n	800fcf0 <__lo0bits+0x52>
 800fcac:	0798      	lsls	r0, r3, #30
 800fcae:	bf49      	itett	mi
 800fcb0:	085b      	lsrmi	r3, r3, #1
 800fcb2:	089b      	lsrpl	r3, r3, #2
 800fcb4:	2001      	movmi	r0, #1
 800fcb6:	6013      	strmi	r3, [r2, #0]
 800fcb8:	bf5c      	itt	pl
 800fcba:	6013      	strpl	r3, [r2, #0]
 800fcbc:	2002      	movpl	r0, #2
 800fcbe:	4770      	bx	lr
 800fcc0:	b299      	uxth	r1, r3
 800fcc2:	b909      	cbnz	r1, 800fcc8 <__lo0bits+0x2a>
 800fcc4:	0c1b      	lsrs	r3, r3, #16
 800fcc6:	2010      	movs	r0, #16
 800fcc8:	b2d9      	uxtb	r1, r3
 800fcca:	b909      	cbnz	r1, 800fcd0 <__lo0bits+0x32>
 800fccc:	3008      	adds	r0, #8
 800fcce:	0a1b      	lsrs	r3, r3, #8
 800fcd0:	0719      	lsls	r1, r3, #28
 800fcd2:	bf04      	itt	eq
 800fcd4:	091b      	lsreq	r3, r3, #4
 800fcd6:	3004      	addeq	r0, #4
 800fcd8:	0799      	lsls	r1, r3, #30
 800fcda:	bf04      	itt	eq
 800fcdc:	089b      	lsreq	r3, r3, #2
 800fcde:	3002      	addeq	r0, #2
 800fce0:	07d9      	lsls	r1, r3, #31
 800fce2:	d403      	bmi.n	800fcec <__lo0bits+0x4e>
 800fce4:	085b      	lsrs	r3, r3, #1
 800fce6:	f100 0001 	add.w	r0, r0, #1
 800fcea:	d003      	beq.n	800fcf4 <__lo0bits+0x56>
 800fcec:	6013      	str	r3, [r2, #0]
 800fcee:	4770      	bx	lr
 800fcf0:	2000      	movs	r0, #0
 800fcf2:	4770      	bx	lr
 800fcf4:	2020      	movs	r0, #32
 800fcf6:	4770      	bx	lr

0800fcf8 <__i2b>:
 800fcf8:	b510      	push	{r4, lr}
 800fcfa:	460c      	mov	r4, r1
 800fcfc:	2101      	movs	r1, #1
 800fcfe:	f7ff febd 	bl	800fa7c <_Balloc>
 800fd02:	4602      	mov	r2, r0
 800fd04:	b928      	cbnz	r0, 800fd12 <__i2b+0x1a>
 800fd06:	4b05      	ldr	r3, [pc, #20]	@ (800fd1c <__i2b+0x24>)
 800fd08:	4805      	ldr	r0, [pc, #20]	@ (800fd20 <__i2b+0x28>)
 800fd0a:	f240 1145 	movw	r1, #325	@ 0x145
 800fd0e:	f001 fbef 	bl	80114f0 <__assert_func>
 800fd12:	2301      	movs	r3, #1
 800fd14:	6144      	str	r4, [r0, #20]
 800fd16:	6103      	str	r3, [r0, #16]
 800fd18:	bd10      	pop	{r4, pc}
 800fd1a:	bf00      	nop
 800fd1c:	080128f5 	.word	0x080128f5
 800fd20:	08012906 	.word	0x08012906

0800fd24 <__multiply>:
 800fd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd28:	4614      	mov	r4, r2
 800fd2a:	690a      	ldr	r2, [r1, #16]
 800fd2c:	6923      	ldr	r3, [r4, #16]
 800fd2e:	429a      	cmp	r2, r3
 800fd30:	bfa8      	it	ge
 800fd32:	4623      	movge	r3, r4
 800fd34:	460f      	mov	r7, r1
 800fd36:	bfa4      	itt	ge
 800fd38:	460c      	movge	r4, r1
 800fd3a:	461f      	movge	r7, r3
 800fd3c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800fd40:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800fd44:	68a3      	ldr	r3, [r4, #8]
 800fd46:	6861      	ldr	r1, [r4, #4]
 800fd48:	eb0a 0609 	add.w	r6, sl, r9
 800fd4c:	42b3      	cmp	r3, r6
 800fd4e:	b085      	sub	sp, #20
 800fd50:	bfb8      	it	lt
 800fd52:	3101      	addlt	r1, #1
 800fd54:	f7ff fe92 	bl	800fa7c <_Balloc>
 800fd58:	b930      	cbnz	r0, 800fd68 <__multiply+0x44>
 800fd5a:	4602      	mov	r2, r0
 800fd5c:	4b44      	ldr	r3, [pc, #272]	@ (800fe70 <__multiply+0x14c>)
 800fd5e:	4845      	ldr	r0, [pc, #276]	@ (800fe74 <__multiply+0x150>)
 800fd60:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fd64:	f001 fbc4 	bl	80114f0 <__assert_func>
 800fd68:	f100 0514 	add.w	r5, r0, #20
 800fd6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fd70:	462b      	mov	r3, r5
 800fd72:	2200      	movs	r2, #0
 800fd74:	4543      	cmp	r3, r8
 800fd76:	d321      	bcc.n	800fdbc <__multiply+0x98>
 800fd78:	f107 0114 	add.w	r1, r7, #20
 800fd7c:	f104 0214 	add.w	r2, r4, #20
 800fd80:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800fd84:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800fd88:	9302      	str	r3, [sp, #8]
 800fd8a:	1b13      	subs	r3, r2, r4
 800fd8c:	3b15      	subs	r3, #21
 800fd8e:	f023 0303 	bic.w	r3, r3, #3
 800fd92:	3304      	adds	r3, #4
 800fd94:	f104 0715 	add.w	r7, r4, #21
 800fd98:	42ba      	cmp	r2, r7
 800fd9a:	bf38      	it	cc
 800fd9c:	2304      	movcc	r3, #4
 800fd9e:	9301      	str	r3, [sp, #4]
 800fda0:	9b02      	ldr	r3, [sp, #8]
 800fda2:	9103      	str	r1, [sp, #12]
 800fda4:	428b      	cmp	r3, r1
 800fda6:	d80c      	bhi.n	800fdc2 <__multiply+0x9e>
 800fda8:	2e00      	cmp	r6, #0
 800fdaa:	dd03      	ble.n	800fdb4 <__multiply+0x90>
 800fdac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d05b      	beq.n	800fe6c <__multiply+0x148>
 800fdb4:	6106      	str	r6, [r0, #16]
 800fdb6:	b005      	add	sp, #20
 800fdb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdbc:	f843 2b04 	str.w	r2, [r3], #4
 800fdc0:	e7d8      	b.n	800fd74 <__multiply+0x50>
 800fdc2:	f8b1 a000 	ldrh.w	sl, [r1]
 800fdc6:	f1ba 0f00 	cmp.w	sl, #0
 800fdca:	d024      	beq.n	800fe16 <__multiply+0xf2>
 800fdcc:	f104 0e14 	add.w	lr, r4, #20
 800fdd0:	46a9      	mov	r9, r5
 800fdd2:	f04f 0c00 	mov.w	ip, #0
 800fdd6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fdda:	f8d9 3000 	ldr.w	r3, [r9]
 800fdde:	fa1f fb87 	uxth.w	fp, r7
 800fde2:	b29b      	uxth	r3, r3
 800fde4:	fb0a 330b 	mla	r3, sl, fp, r3
 800fde8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800fdec:	f8d9 7000 	ldr.w	r7, [r9]
 800fdf0:	4463      	add	r3, ip
 800fdf2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fdf6:	fb0a c70b 	mla	r7, sl, fp, ip
 800fdfa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800fdfe:	b29b      	uxth	r3, r3
 800fe00:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fe04:	4572      	cmp	r2, lr
 800fe06:	f849 3b04 	str.w	r3, [r9], #4
 800fe0a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fe0e:	d8e2      	bhi.n	800fdd6 <__multiply+0xb2>
 800fe10:	9b01      	ldr	r3, [sp, #4]
 800fe12:	f845 c003 	str.w	ip, [r5, r3]
 800fe16:	9b03      	ldr	r3, [sp, #12]
 800fe18:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fe1c:	3104      	adds	r1, #4
 800fe1e:	f1b9 0f00 	cmp.w	r9, #0
 800fe22:	d021      	beq.n	800fe68 <__multiply+0x144>
 800fe24:	682b      	ldr	r3, [r5, #0]
 800fe26:	f104 0c14 	add.w	ip, r4, #20
 800fe2a:	46ae      	mov	lr, r5
 800fe2c:	f04f 0a00 	mov.w	sl, #0
 800fe30:	f8bc b000 	ldrh.w	fp, [ip]
 800fe34:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800fe38:	fb09 770b 	mla	r7, r9, fp, r7
 800fe3c:	4457      	add	r7, sl
 800fe3e:	b29b      	uxth	r3, r3
 800fe40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fe44:	f84e 3b04 	str.w	r3, [lr], #4
 800fe48:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fe4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fe50:	f8be 3000 	ldrh.w	r3, [lr]
 800fe54:	fb09 330a 	mla	r3, r9, sl, r3
 800fe58:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800fe5c:	4562      	cmp	r2, ip
 800fe5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fe62:	d8e5      	bhi.n	800fe30 <__multiply+0x10c>
 800fe64:	9f01      	ldr	r7, [sp, #4]
 800fe66:	51eb      	str	r3, [r5, r7]
 800fe68:	3504      	adds	r5, #4
 800fe6a:	e799      	b.n	800fda0 <__multiply+0x7c>
 800fe6c:	3e01      	subs	r6, #1
 800fe6e:	e79b      	b.n	800fda8 <__multiply+0x84>
 800fe70:	080128f5 	.word	0x080128f5
 800fe74:	08012906 	.word	0x08012906

0800fe78 <__pow5mult>:
 800fe78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe7c:	4615      	mov	r5, r2
 800fe7e:	f012 0203 	ands.w	r2, r2, #3
 800fe82:	4607      	mov	r7, r0
 800fe84:	460e      	mov	r6, r1
 800fe86:	d007      	beq.n	800fe98 <__pow5mult+0x20>
 800fe88:	4c25      	ldr	r4, [pc, #148]	@ (800ff20 <__pow5mult+0xa8>)
 800fe8a:	3a01      	subs	r2, #1
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fe92:	f7ff fe55 	bl	800fb40 <__multadd>
 800fe96:	4606      	mov	r6, r0
 800fe98:	10ad      	asrs	r5, r5, #2
 800fe9a:	d03d      	beq.n	800ff18 <__pow5mult+0xa0>
 800fe9c:	69fc      	ldr	r4, [r7, #28]
 800fe9e:	b97c      	cbnz	r4, 800fec0 <__pow5mult+0x48>
 800fea0:	2010      	movs	r0, #16
 800fea2:	f7ff fd35 	bl	800f910 <malloc>
 800fea6:	4602      	mov	r2, r0
 800fea8:	61f8      	str	r0, [r7, #28]
 800feaa:	b928      	cbnz	r0, 800feb8 <__pow5mult+0x40>
 800feac:	4b1d      	ldr	r3, [pc, #116]	@ (800ff24 <__pow5mult+0xac>)
 800feae:	481e      	ldr	r0, [pc, #120]	@ (800ff28 <__pow5mult+0xb0>)
 800feb0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800feb4:	f001 fb1c 	bl	80114f0 <__assert_func>
 800feb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800febc:	6004      	str	r4, [r0, #0]
 800febe:	60c4      	str	r4, [r0, #12]
 800fec0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fec4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fec8:	b94c      	cbnz	r4, 800fede <__pow5mult+0x66>
 800feca:	f240 2171 	movw	r1, #625	@ 0x271
 800fece:	4638      	mov	r0, r7
 800fed0:	f7ff ff12 	bl	800fcf8 <__i2b>
 800fed4:	2300      	movs	r3, #0
 800fed6:	f8c8 0008 	str.w	r0, [r8, #8]
 800feda:	4604      	mov	r4, r0
 800fedc:	6003      	str	r3, [r0, #0]
 800fede:	f04f 0900 	mov.w	r9, #0
 800fee2:	07eb      	lsls	r3, r5, #31
 800fee4:	d50a      	bpl.n	800fefc <__pow5mult+0x84>
 800fee6:	4631      	mov	r1, r6
 800fee8:	4622      	mov	r2, r4
 800feea:	4638      	mov	r0, r7
 800feec:	f7ff ff1a 	bl	800fd24 <__multiply>
 800fef0:	4631      	mov	r1, r6
 800fef2:	4680      	mov	r8, r0
 800fef4:	4638      	mov	r0, r7
 800fef6:	f7ff fe01 	bl	800fafc <_Bfree>
 800fefa:	4646      	mov	r6, r8
 800fefc:	106d      	asrs	r5, r5, #1
 800fefe:	d00b      	beq.n	800ff18 <__pow5mult+0xa0>
 800ff00:	6820      	ldr	r0, [r4, #0]
 800ff02:	b938      	cbnz	r0, 800ff14 <__pow5mult+0x9c>
 800ff04:	4622      	mov	r2, r4
 800ff06:	4621      	mov	r1, r4
 800ff08:	4638      	mov	r0, r7
 800ff0a:	f7ff ff0b 	bl	800fd24 <__multiply>
 800ff0e:	6020      	str	r0, [r4, #0]
 800ff10:	f8c0 9000 	str.w	r9, [r0]
 800ff14:	4604      	mov	r4, r0
 800ff16:	e7e4      	b.n	800fee2 <__pow5mult+0x6a>
 800ff18:	4630      	mov	r0, r6
 800ff1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff1e:	bf00      	nop
 800ff20:	08012960 	.word	0x08012960
 800ff24:	08012886 	.word	0x08012886
 800ff28:	08012906 	.word	0x08012906

0800ff2c <__lshift>:
 800ff2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff30:	460c      	mov	r4, r1
 800ff32:	6849      	ldr	r1, [r1, #4]
 800ff34:	6923      	ldr	r3, [r4, #16]
 800ff36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ff3a:	68a3      	ldr	r3, [r4, #8]
 800ff3c:	4607      	mov	r7, r0
 800ff3e:	4691      	mov	r9, r2
 800ff40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ff44:	f108 0601 	add.w	r6, r8, #1
 800ff48:	42b3      	cmp	r3, r6
 800ff4a:	db0b      	blt.n	800ff64 <__lshift+0x38>
 800ff4c:	4638      	mov	r0, r7
 800ff4e:	f7ff fd95 	bl	800fa7c <_Balloc>
 800ff52:	4605      	mov	r5, r0
 800ff54:	b948      	cbnz	r0, 800ff6a <__lshift+0x3e>
 800ff56:	4602      	mov	r2, r0
 800ff58:	4b28      	ldr	r3, [pc, #160]	@ (800fffc <__lshift+0xd0>)
 800ff5a:	4829      	ldr	r0, [pc, #164]	@ (8010000 <__lshift+0xd4>)
 800ff5c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ff60:	f001 fac6 	bl	80114f0 <__assert_func>
 800ff64:	3101      	adds	r1, #1
 800ff66:	005b      	lsls	r3, r3, #1
 800ff68:	e7ee      	b.n	800ff48 <__lshift+0x1c>
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	f100 0114 	add.w	r1, r0, #20
 800ff70:	f100 0210 	add.w	r2, r0, #16
 800ff74:	4618      	mov	r0, r3
 800ff76:	4553      	cmp	r3, sl
 800ff78:	db33      	blt.n	800ffe2 <__lshift+0xb6>
 800ff7a:	6920      	ldr	r0, [r4, #16]
 800ff7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ff80:	f104 0314 	add.w	r3, r4, #20
 800ff84:	f019 091f 	ands.w	r9, r9, #31
 800ff88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ff8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ff90:	d02b      	beq.n	800ffea <__lshift+0xbe>
 800ff92:	f1c9 0e20 	rsb	lr, r9, #32
 800ff96:	468a      	mov	sl, r1
 800ff98:	2200      	movs	r2, #0
 800ff9a:	6818      	ldr	r0, [r3, #0]
 800ff9c:	fa00 f009 	lsl.w	r0, r0, r9
 800ffa0:	4310      	orrs	r0, r2
 800ffa2:	f84a 0b04 	str.w	r0, [sl], #4
 800ffa6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffaa:	459c      	cmp	ip, r3
 800ffac:	fa22 f20e 	lsr.w	r2, r2, lr
 800ffb0:	d8f3      	bhi.n	800ff9a <__lshift+0x6e>
 800ffb2:	ebac 0304 	sub.w	r3, ip, r4
 800ffb6:	3b15      	subs	r3, #21
 800ffb8:	f023 0303 	bic.w	r3, r3, #3
 800ffbc:	3304      	adds	r3, #4
 800ffbe:	f104 0015 	add.w	r0, r4, #21
 800ffc2:	4584      	cmp	ip, r0
 800ffc4:	bf38      	it	cc
 800ffc6:	2304      	movcc	r3, #4
 800ffc8:	50ca      	str	r2, [r1, r3]
 800ffca:	b10a      	cbz	r2, 800ffd0 <__lshift+0xa4>
 800ffcc:	f108 0602 	add.w	r6, r8, #2
 800ffd0:	3e01      	subs	r6, #1
 800ffd2:	4638      	mov	r0, r7
 800ffd4:	612e      	str	r6, [r5, #16]
 800ffd6:	4621      	mov	r1, r4
 800ffd8:	f7ff fd90 	bl	800fafc <_Bfree>
 800ffdc:	4628      	mov	r0, r5
 800ffde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffe2:	f842 0f04 	str.w	r0, [r2, #4]!
 800ffe6:	3301      	adds	r3, #1
 800ffe8:	e7c5      	b.n	800ff76 <__lshift+0x4a>
 800ffea:	3904      	subs	r1, #4
 800ffec:	f853 2b04 	ldr.w	r2, [r3], #4
 800fff0:	f841 2f04 	str.w	r2, [r1, #4]!
 800fff4:	459c      	cmp	ip, r3
 800fff6:	d8f9      	bhi.n	800ffec <__lshift+0xc0>
 800fff8:	e7ea      	b.n	800ffd0 <__lshift+0xa4>
 800fffa:	bf00      	nop
 800fffc:	080128f5 	.word	0x080128f5
 8010000:	08012906 	.word	0x08012906

08010004 <__mcmp>:
 8010004:	690a      	ldr	r2, [r1, #16]
 8010006:	4603      	mov	r3, r0
 8010008:	6900      	ldr	r0, [r0, #16]
 801000a:	1a80      	subs	r0, r0, r2
 801000c:	b530      	push	{r4, r5, lr}
 801000e:	d10e      	bne.n	801002e <__mcmp+0x2a>
 8010010:	3314      	adds	r3, #20
 8010012:	3114      	adds	r1, #20
 8010014:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010018:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801001c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010020:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010024:	4295      	cmp	r5, r2
 8010026:	d003      	beq.n	8010030 <__mcmp+0x2c>
 8010028:	d205      	bcs.n	8010036 <__mcmp+0x32>
 801002a:	f04f 30ff 	mov.w	r0, #4294967295
 801002e:	bd30      	pop	{r4, r5, pc}
 8010030:	42a3      	cmp	r3, r4
 8010032:	d3f3      	bcc.n	801001c <__mcmp+0x18>
 8010034:	e7fb      	b.n	801002e <__mcmp+0x2a>
 8010036:	2001      	movs	r0, #1
 8010038:	e7f9      	b.n	801002e <__mcmp+0x2a>
	...

0801003c <__mdiff>:
 801003c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010040:	4689      	mov	r9, r1
 8010042:	4606      	mov	r6, r0
 8010044:	4611      	mov	r1, r2
 8010046:	4648      	mov	r0, r9
 8010048:	4614      	mov	r4, r2
 801004a:	f7ff ffdb 	bl	8010004 <__mcmp>
 801004e:	1e05      	subs	r5, r0, #0
 8010050:	d112      	bne.n	8010078 <__mdiff+0x3c>
 8010052:	4629      	mov	r1, r5
 8010054:	4630      	mov	r0, r6
 8010056:	f7ff fd11 	bl	800fa7c <_Balloc>
 801005a:	4602      	mov	r2, r0
 801005c:	b928      	cbnz	r0, 801006a <__mdiff+0x2e>
 801005e:	4b3f      	ldr	r3, [pc, #252]	@ (801015c <__mdiff+0x120>)
 8010060:	f240 2137 	movw	r1, #567	@ 0x237
 8010064:	483e      	ldr	r0, [pc, #248]	@ (8010160 <__mdiff+0x124>)
 8010066:	f001 fa43 	bl	80114f0 <__assert_func>
 801006a:	2301      	movs	r3, #1
 801006c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010070:	4610      	mov	r0, r2
 8010072:	b003      	add	sp, #12
 8010074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010078:	bfbc      	itt	lt
 801007a:	464b      	movlt	r3, r9
 801007c:	46a1      	movlt	r9, r4
 801007e:	4630      	mov	r0, r6
 8010080:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010084:	bfba      	itte	lt
 8010086:	461c      	movlt	r4, r3
 8010088:	2501      	movlt	r5, #1
 801008a:	2500      	movge	r5, #0
 801008c:	f7ff fcf6 	bl	800fa7c <_Balloc>
 8010090:	4602      	mov	r2, r0
 8010092:	b918      	cbnz	r0, 801009c <__mdiff+0x60>
 8010094:	4b31      	ldr	r3, [pc, #196]	@ (801015c <__mdiff+0x120>)
 8010096:	f240 2145 	movw	r1, #581	@ 0x245
 801009a:	e7e3      	b.n	8010064 <__mdiff+0x28>
 801009c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80100a0:	6926      	ldr	r6, [r4, #16]
 80100a2:	60c5      	str	r5, [r0, #12]
 80100a4:	f109 0310 	add.w	r3, r9, #16
 80100a8:	f109 0514 	add.w	r5, r9, #20
 80100ac:	f104 0e14 	add.w	lr, r4, #20
 80100b0:	f100 0b14 	add.w	fp, r0, #20
 80100b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80100b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80100bc:	9301      	str	r3, [sp, #4]
 80100be:	46d9      	mov	r9, fp
 80100c0:	f04f 0c00 	mov.w	ip, #0
 80100c4:	9b01      	ldr	r3, [sp, #4]
 80100c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80100ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 80100ce:	9301      	str	r3, [sp, #4]
 80100d0:	fa1f f38a 	uxth.w	r3, sl
 80100d4:	4619      	mov	r1, r3
 80100d6:	b283      	uxth	r3, r0
 80100d8:	1acb      	subs	r3, r1, r3
 80100da:	0c00      	lsrs	r0, r0, #16
 80100dc:	4463      	add	r3, ip
 80100de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80100e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80100e6:	b29b      	uxth	r3, r3
 80100e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80100ec:	4576      	cmp	r6, lr
 80100ee:	f849 3b04 	str.w	r3, [r9], #4
 80100f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80100f6:	d8e5      	bhi.n	80100c4 <__mdiff+0x88>
 80100f8:	1b33      	subs	r3, r6, r4
 80100fa:	3b15      	subs	r3, #21
 80100fc:	f023 0303 	bic.w	r3, r3, #3
 8010100:	3415      	adds	r4, #21
 8010102:	3304      	adds	r3, #4
 8010104:	42a6      	cmp	r6, r4
 8010106:	bf38      	it	cc
 8010108:	2304      	movcc	r3, #4
 801010a:	441d      	add	r5, r3
 801010c:	445b      	add	r3, fp
 801010e:	461e      	mov	r6, r3
 8010110:	462c      	mov	r4, r5
 8010112:	4544      	cmp	r4, r8
 8010114:	d30e      	bcc.n	8010134 <__mdiff+0xf8>
 8010116:	f108 0103 	add.w	r1, r8, #3
 801011a:	1b49      	subs	r1, r1, r5
 801011c:	f021 0103 	bic.w	r1, r1, #3
 8010120:	3d03      	subs	r5, #3
 8010122:	45a8      	cmp	r8, r5
 8010124:	bf38      	it	cc
 8010126:	2100      	movcc	r1, #0
 8010128:	440b      	add	r3, r1
 801012a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801012e:	b191      	cbz	r1, 8010156 <__mdiff+0x11a>
 8010130:	6117      	str	r7, [r2, #16]
 8010132:	e79d      	b.n	8010070 <__mdiff+0x34>
 8010134:	f854 1b04 	ldr.w	r1, [r4], #4
 8010138:	46e6      	mov	lr, ip
 801013a:	0c08      	lsrs	r0, r1, #16
 801013c:	fa1c fc81 	uxtah	ip, ip, r1
 8010140:	4471      	add	r1, lr
 8010142:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010146:	b289      	uxth	r1, r1
 8010148:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801014c:	f846 1b04 	str.w	r1, [r6], #4
 8010150:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010154:	e7dd      	b.n	8010112 <__mdiff+0xd6>
 8010156:	3f01      	subs	r7, #1
 8010158:	e7e7      	b.n	801012a <__mdiff+0xee>
 801015a:	bf00      	nop
 801015c:	080128f5 	.word	0x080128f5
 8010160:	08012906 	.word	0x08012906

08010164 <__ulp>:
 8010164:	b082      	sub	sp, #8
 8010166:	ed8d 0b00 	vstr	d0, [sp]
 801016a:	9a01      	ldr	r2, [sp, #4]
 801016c:	4b0f      	ldr	r3, [pc, #60]	@ (80101ac <__ulp+0x48>)
 801016e:	4013      	ands	r3, r2
 8010170:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010174:	2b00      	cmp	r3, #0
 8010176:	dc08      	bgt.n	801018a <__ulp+0x26>
 8010178:	425b      	negs	r3, r3
 801017a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801017e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010182:	da04      	bge.n	801018e <__ulp+0x2a>
 8010184:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010188:	4113      	asrs	r3, r2
 801018a:	2200      	movs	r2, #0
 801018c:	e008      	b.n	80101a0 <__ulp+0x3c>
 801018e:	f1a2 0314 	sub.w	r3, r2, #20
 8010192:	2b1e      	cmp	r3, #30
 8010194:	bfda      	itte	le
 8010196:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801019a:	40da      	lsrle	r2, r3
 801019c:	2201      	movgt	r2, #1
 801019e:	2300      	movs	r3, #0
 80101a0:	4619      	mov	r1, r3
 80101a2:	4610      	mov	r0, r2
 80101a4:	ec41 0b10 	vmov	d0, r0, r1
 80101a8:	b002      	add	sp, #8
 80101aa:	4770      	bx	lr
 80101ac:	7ff00000 	.word	0x7ff00000

080101b0 <__b2d>:
 80101b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101b4:	6906      	ldr	r6, [r0, #16]
 80101b6:	f100 0814 	add.w	r8, r0, #20
 80101ba:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80101be:	1f37      	subs	r7, r6, #4
 80101c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80101c4:	4610      	mov	r0, r2
 80101c6:	f7ff fd4b 	bl	800fc60 <__hi0bits>
 80101ca:	f1c0 0320 	rsb	r3, r0, #32
 80101ce:	280a      	cmp	r0, #10
 80101d0:	600b      	str	r3, [r1, #0]
 80101d2:	491b      	ldr	r1, [pc, #108]	@ (8010240 <__b2d+0x90>)
 80101d4:	dc15      	bgt.n	8010202 <__b2d+0x52>
 80101d6:	f1c0 0c0b 	rsb	ip, r0, #11
 80101da:	fa22 f30c 	lsr.w	r3, r2, ip
 80101de:	45b8      	cmp	r8, r7
 80101e0:	ea43 0501 	orr.w	r5, r3, r1
 80101e4:	bf34      	ite	cc
 80101e6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80101ea:	2300      	movcs	r3, #0
 80101ec:	3015      	adds	r0, #21
 80101ee:	fa02 f000 	lsl.w	r0, r2, r0
 80101f2:	fa23 f30c 	lsr.w	r3, r3, ip
 80101f6:	4303      	orrs	r3, r0
 80101f8:	461c      	mov	r4, r3
 80101fa:	ec45 4b10 	vmov	d0, r4, r5
 80101fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010202:	45b8      	cmp	r8, r7
 8010204:	bf3a      	itte	cc
 8010206:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801020a:	f1a6 0708 	subcc.w	r7, r6, #8
 801020e:	2300      	movcs	r3, #0
 8010210:	380b      	subs	r0, #11
 8010212:	d012      	beq.n	801023a <__b2d+0x8a>
 8010214:	f1c0 0120 	rsb	r1, r0, #32
 8010218:	fa23 f401 	lsr.w	r4, r3, r1
 801021c:	4082      	lsls	r2, r0
 801021e:	4322      	orrs	r2, r4
 8010220:	4547      	cmp	r7, r8
 8010222:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8010226:	bf8c      	ite	hi
 8010228:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801022c:	2200      	movls	r2, #0
 801022e:	4083      	lsls	r3, r0
 8010230:	40ca      	lsrs	r2, r1
 8010232:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010236:	4313      	orrs	r3, r2
 8010238:	e7de      	b.n	80101f8 <__b2d+0x48>
 801023a:	ea42 0501 	orr.w	r5, r2, r1
 801023e:	e7db      	b.n	80101f8 <__b2d+0x48>
 8010240:	3ff00000 	.word	0x3ff00000

08010244 <__d2b>:
 8010244:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010248:	460f      	mov	r7, r1
 801024a:	2101      	movs	r1, #1
 801024c:	ec59 8b10 	vmov	r8, r9, d0
 8010250:	4616      	mov	r6, r2
 8010252:	f7ff fc13 	bl	800fa7c <_Balloc>
 8010256:	4604      	mov	r4, r0
 8010258:	b930      	cbnz	r0, 8010268 <__d2b+0x24>
 801025a:	4602      	mov	r2, r0
 801025c:	4b23      	ldr	r3, [pc, #140]	@ (80102ec <__d2b+0xa8>)
 801025e:	4824      	ldr	r0, [pc, #144]	@ (80102f0 <__d2b+0xac>)
 8010260:	f240 310f 	movw	r1, #783	@ 0x30f
 8010264:	f001 f944 	bl	80114f0 <__assert_func>
 8010268:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801026c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010270:	b10d      	cbz	r5, 8010276 <__d2b+0x32>
 8010272:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010276:	9301      	str	r3, [sp, #4]
 8010278:	f1b8 0300 	subs.w	r3, r8, #0
 801027c:	d023      	beq.n	80102c6 <__d2b+0x82>
 801027e:	4668      	mov	r0, sp
 8010280:	9300      	str	r3, [sp, #0]
 8010282:	f7ff fd0c 	bl	800fc9e <__lo0bits>
 8010286:	e9dd 1200 	ldrd	r1, r2, [sp]
 801028a:	b1d0      	cbz	r0, 80102c2 <__d2b+0x7e>
 801028c:	f1c0 0320 	rsb	r3, r0, #32
 8010290:	fa02 f303 	lsl.w	r3, r2, r3
 8010294:	430b      	orrs	r3, r1
 8010296:	40c2      	lsrs	r2, r0
 8010298:	6163      	str	r3, [r4, #20]
 801029a:	9201      	str	r2, [sp, #4]
 801029c:	9b01      	ldr	r3, [sp, #4]
 801029e:	61a3      	str	r3, [r4, #24]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	bf0c      	ite	eq
 80102a4:	2201      	moveq	r2, #1
 80102a6:	2202      	movne	r2, #2
 80102a8:	6122      	str	r2, [r4, #16]
 80102aa:	b1a5      	cbz	r5, 80102d6 <__d2b+0x92>
 80102ac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80102b0:	4405      	add	r5, r0
 80102b2:	603d      	str	r5, [r7, #0]
 80102b4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80102b8:	6030      	str	r0, [r6, #0]
 80102ba:	4620      	mov	r0, r4
 80102bc:	b003      	add	sp, #12
 80102be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102c2:	6161      	str	r1, [r4, #20]
 80102c4:	e7ea      	b.n	801029c <__d2b+0x58>
 80102c6:	a801      	add	r0, sp, #4
 80102c8:	f7ff fce9 	bl	800fc9e <__lo0bits>
 80102cc:	9b01      	ldr	r3, [sp, #4]
 80102ce:	6163      	str	r3, [r4, #20]
 80102d0:	3020      	adds	r0, #32
 80102d2:	2201      	movs	r2, #1
 80102d4:	e7e8      	b.n	80102a8 <__d2b+0x64>
 80102d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80102da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80102de:	6038      	str	r0, [r7, #0]
 80102e0:	6918      	ldr	r0, [r3, #16]
 80102e2:	f7ff fcbd 	bl	800fc60 <__hi0bits>
 80102e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80102ea:	e7e5      	b.n	80102b8 <__d2b+0x74>
 80102ec:	080128f5 	.word	0x080128f5
 80102f0:	08012906 	.word	0x08012906

080102f4 <__ratio>:
 80102f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102f8:	4688      	mov	r8, r1
 80102fa:	4669      	mov	r1, sp
 80102fc:	4681      	mov	r9, r0
 80102fe:	f7ff ff57 	bl	80101b0 <__b2d>
 8010302:	a901      	add	r1, sp, #4
 8010304:	4640      	mov	r0, r8
 8010306:	ec55 4b10 	vmov	r4, r5, d0
 801030a:	f7ff ff51 	bl	80101b0 <__b2d>
 801030e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8010312:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8010316:	1ad2      	subs	r2, r2, r3
 8010318:	e9dd 3100 	ldrd	r3, r1, [sp]
 801031c:	1a5b      	subs	r3, r3, r1
 801031e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8010322:	ec57 6b10 	vmov	r6, r7, d0
 8010326:	2b00      	cmp	r3, #0
 8010328:	bfd6      	itet	le
 801032a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801032e:	462a      	movgt	r2, r5
 8010330:	463a      	movle	r2, r7
 8010332:	46ab      	mov	fp, r5
 8010334:	46a2      	mov	sl, r4
 8010336:	bfce      	itee	gt
 8010338:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801033c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8010340:	ee00 3a90 	vmovle	s1, r3
 8010344:	ec4b ab17 	vmov	d7, sl, fp
 8010348:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801034c:	b003      	add	sp, #12
 801034e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010352 <__copybits>:
 8010352:	3901      	subs	r1, #1
 8010354:	b570      	push	{r4, r5, r6, lr}
 8010356:	1149      	asrs	r1, r1, #5
 8010358:	6914      	ldr	r4, [r2, #16]
 801035a:	3101      	adds	r1, #1
 801035c:	f102 0314 	add.w	r3, r2, #20
 8010360:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010364:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010368:	1f05      	subs	r5, r0, #4
 801036a:	42a3      	cmp	r3, r4
 801036c:	d30c      	bcc.n	8010388 <__copybits+0x36>
 801036e:	1aa3      	subs	r3, r4, r2
 8010370:	3b11      	subs	r3, #17
 8010372:	f023 0303 	bic.w	r3, r3, #3
 8010376:	3211      	adds	r2, #17
 8010378:	42a2      	cmp	r2, r4
 801037a:	bf88      	it	hi
 801037c:	2300      	movhi	r3, #0
 801037e:	4418      	add	r0, r3
 8010380:	2300      	movs	r3, #0
 8010382:	4288      	cmp	r0, r1
 8010384:	d305      	bcc.n	8010392 <__copybits+0x40>
 8010386:	bd70      	pop	{r4, r5, r6, pc}
 8010388:	f853 6b04 	ldr.w	r6, [r3], #4
 801038c:	f845 6f04 	str.w	r6, [r5, #4]!
 8010390:	e7eb      	b.n	801036a <__copybits+0x18>
 8010392:	f840 3b04 	str.w	r3, [r0], #4
 8010396:	e7f4      	b.n	8010382 <__copybits+0x30>

08010398 <__any_on>:
 8010398:	f100 0214 	add.w	r2, r0, #20
 801039c:	6900      	ldr	r0, [r0, #16]
 801039e:	114b      	asrs	r3, r1, #5
 80103a0:	4298      	cmp	r0, r3
 80103a2:	b510      	push	{r4, lr}
 80103a4:	db11      	blt.n	80103ca <__any_on+0x32>
 80103a6:	dd0a      	ble.n	80103be <__any_on+0x26>
 80103a8:	f011 011f 	ands.w	r1, r1, #31
 80103ac:	d007      	beq.n	80103be <__any_on+0x26>
 80103ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80103b2:	fa24 f001 	lsr.w	r0, r4, r1
 80103b6:	fa00 f101 	lsl.w	r1, r0, r1
 80103ba:	428c      	cmp	r4, r1
 80103bc:	d10b      	bne.n	80103d6 <__any_on+0x3e>
 80103be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80103c2:	4293      	cmp	r3, r2
 80103c4:	d803      	bhi.n	80103ce <__any_on+0x36>
 80103c6:	2000      	movs	r0, #0
 80103c8:	bd10      	pop	{r4, pc}
 80103ca:	4603      	mov	r3, r0
 80103cc:	e7f7      	b.n	80103be <__any_on+0x26>
 80103ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80103d2:	2900      	cmp	r1, #0
 80103d4:	d0f5      	beq.n	80103c2 <__any_on+0x2a>
 80103d6:	2001      	movs	r0, #1
 80103d8:	e7f6      	b.n	80103c8 <__any_on+0x30>

080103da <sulp>:
 80103da:	b570      	push	{r4, r5, r6, lr}
 80103dc:	4604      	mov	r4, r0
 80103de:	460d      	mov	r5, r1
 80103e0:	4616      	mov	r6, r2
 80103e2:	ec45 4b10 	vmov	d0, r4, r5
 80103e6:	f7ff febd 	bl	8010164 <__ulp>
 80103ea:	b17e      	cbz	r6, 801040c <sulp+0x32>
 80103ec:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80103f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	dd09      	ble.n	801040c <sulp+0x32>
 80103f8:	051b      	lsls	r3, r3, #20
 80103fa:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80103fe:	2000      	movs	r0, #0
 8010400:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8010404:	ec41 0b17 	vmov	d7, r0, r1
 8010408:	ee20 0b07 	vmul.f64	d0, d0, d7
 801040c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010410 <_strtod_l>:
 8010410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010414:	ed2d 8b0a 	vpush	{d8-d12}
 8010418:	b097      	sub	sp, #92	@ 0x5c
 801041a:	4688      	mov	r8, r1
 801041c:	920e      	str	r2, [sp, #56]	@ 0x38
 801041e:	2200      	movs	r2, #0
 8010420:	9212      	str	r2, [sp, #72]	@ 0x48
 8010422:	9005      	str	r0, [sp, #20]
 8010424:	f04f 0a00 	mov.w	sl, #0
 8010428:	f04f 0b00 	mov.w	fp, #0
 801042c:	460a      	mov	r2, r1
 801042e:	9211      	str	r2, [sp, #68]	@ 0x44
 8010430:	7811      	ldrb	r1, [r2, #0]
 8010432:	292b      	cmp	r1, #43	@ 0x2b
 8010434:	d04c      	beq.n	80104d0 <_strtod_l+0xc0>
 8010436:	d839      	bhi.n	80104ac <_strtod_l+0x9c>
 8010438:	290d      	cmp	r1, #13
 801043a:	d833      	bhi.n	80104a4 <_strtod_l+0x94>
 801043c:	2908      	cmp	r1, #8
 801043e:	d833      	bhi.n	80104a8 <_strtod_l+0x98>
 8010440:	2900      	cmp	r1, #0
 8010442:	d03c      	beq.n	80104be <_strtod_l+0xae>
 8010444:	2200      	movs	r2, #0
 8010446:	9208      	str	r2, [sp, #32]
 8010448:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801044a:	782a      	ldrb	r2, [r5, #0]
 801044c:	2a30      	cmp	r2, #48	@ 0x30
 801044e:	f040 80b5 	bne.w	80105bc <_strtod_l+0x1ac>
 8010452:	786a      	ldrb	r2, [r5, #1]
 8010454:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010458:	2a58      	cmp	r2, #88	@ 0x58
 801045a:	d170      	bne.n	801053e <_strtod_l+0x12e>
 801045c:	9302      	str	r3, [sp, #8]
 801045e:	9b08      	ldr	r3, [sp, #32]
 8010460:	9301      	str	r3, [sp, #4]
 8010462:	ab12      	add	r3, sp, #72	@ 0x48
 8010464:	9300      	str	r3, [sp, #0]
 8010466:	4a8b      	ldr	r2, [pc, #556]	@ (8010694 <_strtod_l+0x284>)
 8010468:	9805      	ldr	r0, [sp, #20]
 801046a:	ab13      	add	r3, sp, #76	@ 0x4c
 801046c:	a911      	add	r1, sp, #68	@ 0x44
 801046e:	f001 f8d9 	bl	8011624 <__gethex>
 8010472:	f010 060f 	ands.w	r6, r0, #15
 8010476:	4604      	mov	r4, r0
 8010478:	d005      	beq.n	8010486 <_strtod_l+0x76>
 801047a:	2e06      	cmp	r6, #6
 801047c:	d12a      	bne.n	80104d4 <_strtod_l+0xc4>
 801047e:	3501      	adds	r5, #1
 8010480:	2300      	movs	r3, #0
 8010482:	9511      	str	r5, [sp, #68]	@ 0x44
 8010484:	9308      	str	r3, [sp, #32]
 8010486:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010488:	2b00      	cmp	r3, #0
 801048a:	f040 852f 	bne.w	8010eec <_strtod_l+0xadc>
 801048e:	9b08      	ldr	r3, [sp, #32]
 8010490:	ec4b ab10 	vmov	d0, sl, fp
 8010494:	b1cb      	cbz	r3, 80104ca <_strtod_l+0xba>
 8010496:	eeb1 0b40 	vneg.f64	d0, d0
 801049a:	b017      	add	sp, #92	@ 0x5c
 801049c:	ecbd 8b0a 	vpop	{d8-d12}
 80104a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104a4:	2920      	cmp	r1, #32
 80104a6:	d1cd      	bne.n	8010444 <_strtod_l+0x34>
 80104a8:	3201      	adds	r2, #1
 80104aa:	e7c0      	b.n	801042e <_strtod_l+0x1e>
 80104ac:	292d      	cmp	r1, #45	@ 0x2d
 80104ae:	d1c9      	bne.n	8010444 <_strtod_l+0x34>
 80104b0:	2101      	movs	r1, #1
 80104b2:	9108      	str	r1, [sp, #32]
 80104b4:	1c51      	adds	r1, r2, #1
 80104b6:	9111      	str	r1, [sp, #68]	@ 0x44
 80104b8:	7852      	ldrb	r2, [r2, #1]
 80104ba:	2a00      	cmp	r2, #0
 80104bc:	d1c4      	bne.n	8010448 <_strtod_l+0x38>
 80104be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80104c0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	f040 850f 	bne.w	8010ee8 <_strtod_l+0xad8>
 80104ca:	ec4b ab10 	vmov	d0, sl, fp
 80104ce:	e7e4      	b.n	801049a <_strtod_l+0x8a>
 80104d0:	2100      	movs	r1, #0
 80104d2:	e7ee      	b.n	80104b2 <_strtod_l+0xa2>
 80104d4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80104d6:	b13a      	cbz	r2, 80104e8 <_strtod_l+0xd8>
 80104d8:	2135      	movs	r1, #53	@ 0x35
 80104da:	a814      	add	r0, sp, #80	@ 0x50
 80104dc:	f7ff ff39 	bl	8010352 <__copybits>
 80104e0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80104e2:	9805      	ldr	r0, [sp, #20]
 80104e4:	f7ff fb0a 	bl	800fafc <_Bfree>
 80104e8:	1e73      	subs	r3, r6, #1
 80104ea:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80104ec:	2b04      	cmp	r3, #4
 80104ee:	d806      	bhi.n	80104fe <_strtod_l+0xee>
 80104f0:	e8df f003 	tbb	[pc, r3]
 80104f4:	201d0314 	.word	0x201d0314
 80104f8:	14          	.byte	0x14
 80104f9:	00          	.byte	0x00
 80104fa:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 80104fe:	05e3      	lsls	r3, r4, #23
 8010500:	bf48      	it	mi
 8010502:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8010506:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801050a:	0d1b      	lsrs	r3, r3, #20
 801050c:	051b      	lsls	r3, r3, #20
 801050e:	2b00      	cmp	r3, #0
 8010510:	d1b9      	bne.n	8010486 <_strtod_l+0x76>
 8010512:	f7fe fba1 	bl	800ec58 <__errno>
 8010516:	2322      	movs	r3, #34	@ 0x22
 8010518:	6003      	str	r3, [r0, #0]
 801051a:	e7b4      	b.n	8010486 <_strtod_l+0x76>
 801051c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8010520:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010524:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8010528:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801052c:	e7e7      	b.n	80104fe <_strtod_l+0xee>
 801052e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 801069c <_strtod_l+0x28c>
 8010532:	e7e4      	b.n	80104fe <_strtod_l+0xee>
 8010534:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8010538:	f04f 3aff 	mov.w	sl, #4294967295
 801053c:	e7df      	b.n	80104fe <_strtod_l+0xee>
 801053e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010540:	1c5a      	adds	r2, r3, #1
 8010542:	9211      	str	r2, [sp, #68]	@ 0x44
 8010544:	785b      	ldrb	r3, [r3, #1]
 8010546:	2b30      	cmp	r3, #48	@ 0x30
 8010548:	d0f9      	beq.n	801053e <_strtod_l+0x12e>
 801054a:	2b00      	cmp	r3, #0
 801054c:	d09b      	beq.n	8010486 <_strtod_l+0x76>
 801054e:	2301      	movs	r3, #1
 8010550:	2600      	movs	r6, #0
 8010552:	9307      	str	r3, [sp, #28]
 8010554:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010556:	930a      	str	r3, [sp, #40]	@ 0x28
 8010558:	46b1      	mov	r9, r6
 801055a:	4635      	mov	r5, r6
 801055c:	220a      	movs	r2, #10
 801055e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8010560:	7804      	ldrb	r4, [r0, #0]
 8010562:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8010566:	b2d9      	uxtb	r1, r3
 8010568:	2909      	cmp	r1, #9
 801056a:	d929      	bls.n	80105c0 <_strtod_l+0x1b0>
 801056c:	494a      	ldr	r1, [pc, #296]	@ (8010698 <_strtod_l+0x288>)
 801056e:	2201      	movs	r2, #1
 8010570:	f000 ff84 	bl	801147c <strncmp>
 8010574:	b378      	cbz	r0, 80105d6 <_strtod_l+0x1c6>
 8010576:	2000      	movs	r0, #0
 8010578:	4622      	mov	r2, r4
 801057a:	462b      	mov	r3, r5
 801057c:	4607      	mov	r7, r0
 801057e:	9006      	str	r0, [sp, #24]
 8010580:	2a65      	cmp	r2, #101	@ 0x65
 8010582:	d001      	beq.n	8010588 <_strtod_l+0x178>
 8010584:	2a45      	cmp	r2, #69	@ 0x45
 8010586:	d117      	bne.n	80105b8 <_strtod_l+0x1a8>
 8010588:	b91b      	cbnz	r3, 8010592 <_strtod_l+0x182>
 801058a:	9b07      	ldr	r3, [sp, #28]
 801058c:	4303      	orrs	r3, r0
 801058e:	d096      	beq.n	80104be <_strtod_l+0xae>
 8010590:	2300      	movs	r3, #0
 8010592:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8010596:	f108 0201 	add.w	r2, r8, #1
 801059a:	9211      	str	r2, [sp, #68]	@ 0x44
 801059c:	f898 2001 	ldrb.w	r2, [r8, #1]
 80105a0:	2a2b      	cmp	r2, #43	@ 0x2b
 80105a2:	d06b      	beq.n	801067c <_strtod_l+0x26c>
 80105a4:	2a2d      	cmp	r2, #45	@ 0x2d
 80105a6:	d071      	beq.n	801068c <_strtod_l+0x27c>
 80105a8:	f04f 0e00 	mov.w	lr, #0
 80105ac:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80105b0:	2c09      	cmp	r4, #9
 80105b2:	d979      	bls.n	80106a8 <_strtod_l+0x298>
 80105b4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80105b8:	2400      	movs	r4, #0
 80105ba:	e094      	b.n	80106e6 <_strtod_l+0x2d6>
 80105bc:	2300      	movs	r3, #0
 80105be:	e7c7      	b.n	8010550 <_strtod_l+0x140>
 80105c0:	2d08      	cmp	r5, #8
 80105c2:	f100 0001 	add.w	r0, r0, #1
 80105c6:	bfd4      	ite	le
 80105c8:	fb02 3909 	mlale	r9, r2, r9, r3
 80105cc:	fb02 3606 	mlagt	r6, r2, r6, r3
 80105d0:	3501      	adds	r5, #1
 80105d2:	9011      	str	r0, [sp, #68]	@ 0x44
 80105d4:	e7c3      	b.n	801055e <_strtod_l+0x14e>
 80105d6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80105d8:	1c5a      	adds	r2, r3, #1
 80105da:	9211      	str	r2, [sp, #68]	@ 0x44
 80105dc:	785a      	ldrb	r2, [r3, #1]
 80105de:	b375      	cbz	r5, 801063e <_strtod_l+0x22e>
 80105e0:	4607      	mov	r7, r0
 80105e2:	462b      	mov	r3, r5
 80105e4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80105e8:	2909      	cmp	r1, #9
 80105ea:	d913      	bls.n	8010614 <_strtod_l+0x204>
 80105ec:	2101      	movs	r1, #1
 80105ee:	9106      	str	r1, [sp, #24]
 80105f0:	e7c6      	b.n	8010580 <_strtod_l+0x170>
 80105f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80105f4:	1c5a      	adds	r2, r3, #1
 80105f6:	9211      	str	r2, [sp, #68]	@ 0x44
 80105f8:	785a      	ldrb	r2, [r3, #1]
 80105fa:	3001      	adds	r0, #1
 80105fc:	2a30      	cmp	r2, #48	@ 0x30
 80105fe:	d0f8      	beq.n	80105f2 <_strtod_l+0x1e2>
 8010600:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8010604:	2b08      	cmp	r3, #8
 8010606:	f200 8476 	bhi.w	8010ef6 <_strtod_l+0xae6>
 801060a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801060c:	930a      	str	r3, [sp, #40]	@ 0x28
 801060e:	4607      	mov	r7, r0
 8010610:	2000      	movs	r0, #0
 8010612:	4603      	mov	r3, r0
 8010614:	3a30      	subs	r2, #48	@ 0x30
 8010616:	f100 0101 	add.w	r1, r0, #1
 801061a:	d023      	beq.n	8010664 <_strtod_l+0x254>
 801061c:	440f      	add	r7, r1
 801061e:	eb00 0c03 	add.w	ip, r0, r3
 8010622:	4619      	mov	r1, r3
 8010624:	240a      	movs	r4, #10
 8010626:	4561      	cmp	r1, ip
 8010628:	d10b      	bne.n	8010642 <_strtod_l+0x232>
 801062a:	1c5c      	adds	r4, r3, #1
 801062c:	4403      	add	r3, r0
 801062e:	2b08      	cmp	r3, #8
 8010630:	4404      	add	r4, r0
 8010632:	dc11      	bgt.n	8010658 <_strtod_l+0x248>
 8010634:	230a      	movs	r3, #10
 8010636:	fb03 2909 	mla	r9, r3, r9, r2
 801063a:	2100      	movs	r1, #0
 801063c:	e013      	b.n	8010666 <_strtod_l+0x256>
 801063e:	4628      	mov	r0, r5
 8010640:	e7dc      	b.n	80105fc <_strtod_l+0x1ec>
 8010642:	2908      	cmp	r1, #8
 8010644:	f101 0101 	add.w	r1, r1, #1
 8010648:	dc02      	bgt.n	8010650 <_strtod_l+0x240>
 801064a:	fb04 f909 	mul.w	r9, r4, r9
 801064e:	e7ea      	b.n	8010626 <_strtod_l+0x216>
 8010650:	2910      	cmp	r1, #16
 8010652:	bfd8      	it	le
 8010654:	4366      	mulle	r6, r4
 8010656:	e7e6      	b.n	8010626 <_strtod_l+0x216>
 8010658:	2b0f      	cmp	r3, #15
 801065a:	dcee      	bgt.n	801063a <_strtod_l+0x22a>
 801065c:	230a      	movs	r3, #10
 801065e:	fb03 2606 	mla	r6, r3, r6, r2
 8010662:	e7ea      	b.n	801063a <_strtod_l+0x22a>
 8010664:	461c      	mov	r4, r3
 8010666:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010668:	1c5a      	adds	r2, r3, #1
 801066a:	9211      	str	r2, [sp, #68]	@ 0x44
 801066c:	785a      	ldrb	r2, [r3, #1]
 801066e:	4608      	mov	r0, r1
 8010670:	4623      	mov	r3, r4
 8010672:	e7b7      	b.n	80105e4 <_strtod_l+0x1d4>
 8010674:	2301      	movs	r3, #1
 8010676:	2700      	movs	r7, #0
 8010678:	9306      	str	r3, [sp, #24]
 801067a:	e786      	b.n	801058a <_strtod_l+0x17a>
 801067c:	f04f 0e00 	mov.w	lr, #0
 8010680:	f108 0202 	add.w	r2, r8, #2
 8010684:	9211      	str	r2, [sp, #68]	@ 0x44
 8010686:	f898 2002 	ldrb.w	r2, [r8, #2]
 801068a:	e78f      	b.n	80105ac <_strtod_l+0x19c>
 801068c:	f04f 0e01 	mov.w	lr, #1
 8010690:	e7f6      	b.n	8010680 <_strtod_l+0x270>
 8010692:	bf00      	nop
 8010694:	08012a78 	.word	0x08012a78
 8010698:	08012a60 	.word	0x08012a60
 801069c:	7ff00000 	.word	0x7ff00000
 80106a0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80106a2:	1c54      	adds	r4, r2, #1
 80106a4:	9411      	str	r4, [sp, #68]	@ 0x44
 80106a6:	7852      	ldrb	r2, [r2, #1]
 80106a8:	2a30      	cmp	r2, #48	@ 0x30
 80106aa:	d0f9      	beq.n	80106a0 <_strtod_l+0x290>
 80106ac:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 80106b0:	2c08      	cmp	r4, #8
 80106b2:	d881      	bhi.n	80105b8 <_strtod_l+0x1a8>
 80106b4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 80106b8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80106ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80106bc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80106be:	1c51      	adds	r1, r2, #1
 80106c0:	9111      	str	r1, [sp, #68]	@ 0x44
 80106c2:	7852      	ldrb	r2, [r2, #1]
 80106c4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80106c8:	2c09      	cmp	r4, #9
 80106ca:	d938      	bls.n	801073e <_strtod_l+0x32e>
 80106cc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80106ce:	1b0c      	subs	r4, r1, r4
 80106d0:	2c08      	cmp	r4, #8
 80106d2:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 80106d6:	dc02      	bgt.n	80106de <_strtod_l+0x2ce>
 80106d8:	4564      	cmp	r4, ip
 80106da:	bfa8      	it	ge
 80106dc:	4664      	movge	r4, ip
 80106de:	f1be 0f00 	cmp.w	lr, #0
 80106e2:	d000      	beq.n	80106e6 <_strtod_l+0x2d6>
 80106e4:	4264      	negs	r4, r4
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d14e      	bne.n	8010788 <_strtod_l+0x378>
 80106ea:	9b07      	ldr	r3, [sp, #28]
 80106ec:	4318      	orrs	r0, r3
 80106ee:	f47f aeca 	bne.w	8010486 <_strtod_l+0x76>
 80106f2:	9b06      	ldr	r3, [sp, #24]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	f47f aee2 	bne.w	80104be <_strtod_l+0xae>
 80106fa:	2a69      	cmp	r2, #105	@ 0x69
 80106fc:	d027      	beq.n	801074e <_strtod_l+0x33e>
 80106fe:	dc24      	bgt.n	801074a <_strtod_l+0x33a>
 8010700:	2a49      	cmp	r2, #73	@ 0x49
 8010702:	d024      	beq.n	801074e <_strtod_l+0x33e>
 8010704:	2a4e      	cmp	r2, #78	@ 0x4e
 8010706:	f47f aeda 	bne.w	80104be <_strtod_l+0xae>
 801070a:	4997      	ldr	r1, [pc, #604]	@ (8010968 <_strtod_l+0x558>)
 801070c:	a811      	add	r0, sp, #68	@ 0x44
 801070e:	f001 f9ab 	bl	8011a68 <__match>
 8010712:	2800      	cmp	r0, #0
 8010714:	f43f aed3 	beq.w	80104be <_strtod_l+0xae>
 8010718:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801071a:	781b      	ldrb	r3, [r3, #0]
 801071c:	2b28      	cmp	r3, #40	@ 0x28
 801071e:	d12d      	bne.n	801077c <_strtod_l+0x36c>
 8010720:	4992      	ldr	r1, [pc, #584]	@ (801096c <_strtod_l+0x55c>)
 8010722:	aa14      	add	r2, sp, #80	@ 0x50
 8010724:	a811      	add	r0, sp, #68	@ 0x44
 8010726:	f001 f9b3 	bl	8011a90 <__hexnan>
 801072a:	2805      	cmp	r0, #5
 801072c:	d126      	bne.n	801077c <_strtod_l+0x36c>
 801072e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010730:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8010734:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8010738:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801073c:	e6a3      	b.n	8010486 <_strtod_l+0x76>
 801073e:	240a      	movs	r4, #10
 8010740:	fb04 2c0c 	mla	ip, r4, ip, r2
 8010744:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8010748:	e7b8      	b.n	80106bc <_strtod_l+0x2ac>
 801074a:	2a6e      	cmp	r2, #110	@ 0x6e
 801074c:	e7db      	b.n	8010706 <_strtod_l+0x2f6>
 801074e:	4988      	ldr	r1, [pc, #544]	@ (8010970 <_strtod_l+0x560>)
 8010750:	a811      	add	r0, sp, #68	@ 0x44
 8010752:	f001 f989 	bl	8011a68 <__match>
 8010756:	2800      	cmp	r0, #0
 8010758:	f43f aeb1 	beq.w	80104be <_strtod_l+0xae>
 801075c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801075e:	4985      	ldr	r1, [pc, #532]	@ (8010974 <_strtod_l+0x564>)
 8010760:	3b01      	subs	r3, #1
 8010762:	a811      	add	r0, sp, #68	@ 0x44
 8010764:	9311      	str	r3, [sp, #68]	@ 0x44
 8010766:	f001 f97f 	bl	8011a68 <__match>
 801076a:	b910      	cbnz	r0, 8010772 <_strtod_l+0x362>
 801076c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801076e:	3301      	adds	r3, #1
 8010770:	9311      	str	r3, [sp, #68]	@ 0x44
 8010772:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8010988 <_strtod_l+0x578>
 8010776:	f04f 0a00 	mov.w	sl, #0
 801077a:	e684      	b.n	8010486 <_strtod_l+0x76>
 801077c:	487e      	ldr	r0, [pc, #504]	@ (8010978 <_strtod_l+0x568>)
 801077e:	f000 feaf 	bl	80114e0 <nan>
 8010782:	ec5b ab10 	vmov	sl, fp, d0
 8010786:	e67e      	b.n	8010486 <_strtod_l+0x76>
 8010788:	ee07 9a90 	vmov	s15, r9
 801078c:	1be2      	subs	r2, r4, r7
 801078e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010792:	2d00      	cmp	r5, #0
 8010794:	bf08      	it	eq
 8010796:	461d      	moveq	r5, r3
 8010798:	2b10      	cmp	r3, #16
 801079a:	9209      	str	r2, [sp, #36]	@ 0x24
 801079c:	461a      	mov	r2, r3
 801079e:	bfa8      	it	ge
 80107a0:	2210      	movge	r2, #16
 80107a2:	2b09      	cmp	r3, #9
 80107a4:	ec5b ab17 	vmov	sl, fp, d7
 80107a8:	dc15      	bgt.n	80107d6 <_strtod_l+0x3c6>
 80107aa:	1be1      	subs	r1, r4, r7
 80107ac:	2900      	cmp	r1, #0
 80107ae:	f43f ae6a 	beq.w	8010486 <_strtod_l+0x76>
 80107b2:	eba4 0107 	sub.w	r1, r4, r7
 80107b6:	dd72      	ble.n	801089e <_strtod_l+0x48e>
 80107b8:	2916      	cmp	r1, #22
 80107ba:	dc59      	bgt.n	8010870 <_strtod_l+0x460>
 80107bc:	4b6f      	ldr	r3, [pc, #444]	@ (801097c <_strtod_l+0x56c>)
 80107be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80107c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80107c4:	ed93 7b00 	vldr	d7, [r3]
 80107c8:	ec4b ab16 	vmov	d6, sl, fp
 80107cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80107d0:	ec5b ab17 	vmov	sl, fp, d7
 80107d4:	e657      	b.n	8010486 <_strtod_l+0x76>
 80107d6:	4969      	ldr	r1, [pc, #420]	@ (801097c <_strtod_l+0x56c>)
 80107d8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80107dc:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 80107e0:	ee06 6a90 	vmov	s13, r6
 80107e4:	2b0f      	cmp	r3, #15
 80107e6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80107ea:	eea7 6b05 	vfma.f64	d6, d7, d5
 80107ee:	ec5b ab16 	vmov	sl, fp, d6
 80107f2:	ddda      	ble.n	80107aa <_strtod_l+0x39a>
 80107f4:	1a9a      	subs	r2, r3, r2
 80107f6:	1be1      	subs	r1, r4, r7
 80107f8:	440a      	add	r2, r1
 80107fa:	2a00      	cmp	r2, #0
 80107fc:	f340 8094 	ble.w	8010928 <_strtod_l+0x518>
 8010800:	f012 000f 	ands.w	r0, r2, #15
 8010804:	d00a      	beq.n	801081c <_strtod_l+0x40c>
 8010806:	495d      	ldr	r1, [pc, #372]	@ (801097c <_strtod_l+0x56c>)
 8010808:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801080c:	ed91 7b00 	vldr	d7, [r1]
 8010810:	ec4b ab16 	vmov	d6, sl, fp
 8010814:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010818:	ec5b ab17 	vmov	sl, fp, d7
 801081c:	f032 020f 	bics.w	r2, r2, #15
 8010820:	d073      	beq.n	801090a <_strtod_l+0x4fa>
 8010822:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8010826:	dd47      	ble.n	80108b8 <_strtod_l+0x4a8>
 8010828:	2400      	movs	r4, #0
 801082a:	4625      	mov	r5, r4
 801082c:	9407      	str	r4, [sp, #28]
 801082e:	4626      	mov	r6, r4
 8010830:	9a05      	ldr	r2, [sp, #20]
 8010832:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8010988 <_strtod_l+0x578>
 8010836:	2322      	movs	r3, #34	@ 0x22
 8010838:	6013      	str	r3, [r2, #0]
 801083a:	f04f 0a00 	mov.w	sl, #0
 801083e:	9b07      	ldr	r3, [sp, #28]
 8010840:	2b00      	cmp	r3, #0
 8010842:	f43f ae20 	beq.w	8010486 <_strtod_l+0x76>
 8010846:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010848:	9805      	ldr	r0, [sp, #20]
 801084a:	f7ff f957 	bl	800fafc <_Bfree>
 801084e:	9805      	ldr	r0, [sp, #20]
 8010850:	4631      	mov	r1, r6
 8010852:	f7ff f953 	bl	800fafc <_Bfree>
 8010856:	9805      	ldr	r0, [sp, #20]
 8010858:	4629      	mov	r1, r5
 801085a:	f7ff f94f 	bl	800fafc <_Bfree>
 801085e:	9907      	ldr	r1, [sp, #28]
 8010860:	9805      	ldr	r0, [sp, #20]
 8010862:	f7ff f94b 	bl	800fafc <_Bfree>
 8010866:	9805      	ldr	r0, [sp, #20]
 8010868:	4621      	mov	r1, r4
 801086a:	f7ff f947 	bl	800fafc <_Bfree>
 801086e:	e60a      	b.n	8010486 <_strtod_l+0x76>
 8010870:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8010874:	1be0      	subs	r0, r4, r7
 8010876:	4281      	cmp	r1, r0
 8010878:	dbbc      	blt.n	80107f4 <_strtod_l+0x3e4>
 801087a:	4a40      	ldr	r2, [pc, #256]	@ (801097c <_strtod_l+0x56c>)
 801087c:	f1c3 030f 	rsb	r3, r3, #15
 8010880:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8010884:	ed91 7b00 	vldr	d7, [r1]
 8010888:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801088a:	ec4b ab16 	vmov	d6, sl, fp
 801088e:	1acb      	subs	r3, r1, r3
 8010890:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010894:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010898:	ed92 6b00 	vldr	d6, [r2]
 801089c:	e796      	b.n	80107cc <_strtod_l+0x3bc>
 801089e:	3116      	adds	r1, #22
 80108a0:	dba8      	blt.n	80107f4 <_strtod_l+0x3e4>
 80108a2:	4b36      	ldr	r3, [pc, #216]	@ (801097c <_strtod_l+0x56c>)
 80108a4:	1b3c      	subs	r4, r7, r4
 80108a6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80108aa:	ed94 7b00 	vldr	d7, [r4]
 80108ae:	ec4b ab16 	vmov	d6, sl, fp
 80108b2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80108b6:	e78b      	b.n	80107d0 <_strtod_l+0x3c0>
 80108b8:	2000      	movs	r0, #0
 80108ba:	ec4b ab17 	vmov	d7, sl, fp
 80108be:	4e30      	ldr	r6, [pc, #192]	@ (8010980 <_strtod_l+0x570>)
 80108c0:	1112      	asrs	r2, r2, #4
 80108c2:	4601      	mov	r1, r0
 80108c4:	2a01      	cmp	r2, #1
 80108c6:	dc23      	bgt.n	8010910 <_strtod_l+0x500>
 80108c8:	b108      	cbz	r0, 80108ce <_strtod_l+0x4be>
 80108ca:	ec5b ab17 	vmov	sl, fp, d7
 80108ce:	4a2c      	ldr	r2, [pc, #176]	@ (8010980 <_strtod_l+0x570>)
 80108d0:	482c      	ldr	r0, [pc, #176]	@ (8010984 <_strtod_l+0x574>)
 80108d2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80108d6:	ed92 7b00 	vldr	d7, [r2]
 80108da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80108de:	ec4b ab16 	vmov	d6, sl, fp
 80108e2:	4a29      	ldr	r2, [pc, #164]	@ (8010988 <_strtod_l+0x578>)
 80108e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80108e8:	ee17 1a90 	vmov	r1, s15
 80108ec:	400a      	ands	r2, r1
 80108ee:	4282      	cmp	r2, r0
 80108f0:	ec5b ab17 	vmov	sl, fp, d7
 80108f4:	d898      	bhi.n	8010828 <_strtod_l+0x418>
 80108f6:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 80108fa:	4282      	cmp	r2, r0
 80108fc:	bf86      	itte	hi
 80108fe:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 801098c <_strtod_l+0x57c>
 8010902:	f04f 3aff 	movhi.w	sl, #4294967295
 8010906:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 801090a:	2200      	movs	r2, #0
 801090c:	9206      	str	r2, [sp, #24]
 801090e:	e076      	b.n	80109fe <_strtod_l+0x5ee>
 8010910:	f012 0f01 	tst.w	r2, #1
 8010914:	d004      	beq.n	8010920 <_strtod_l+0x510>
 8010916:	ed96 6b00 	vldr	d6, [r6]
 801091a:	2001      	movs	r0, #1
 801091c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010920:	3101      	adds	r1, #1
 8010922:	1052      	asrs	r2, r2, #1
 8010924:	3608      	adds	r6, #8
 8010926:	e7cd      	b.n	80108c4 <_strtod_l+0x4b4>
 8010928:	d0ef      	beq.n	801090a <_strtod_l+0x4fa>
 801092a:	4252      	negs	r2, r2
 801092c:	f012 000f 	ands.w	r0, r2, #15
 8010930:	d00a      	beq.n	8010948 <_strtod_l+0x538>
 8010932:	4912      	ldr	r1, [pc, #72]	@ (801097c <_strtod_l+0x56c>)
 8010934:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8010938:	ed91 7b00 	vldr	d7, [r1]
 801093c:	ec4b ab16 	vmov	d6, sl, fp
 8010940:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010944:	ec5b ab17 	vmov	sl, fp, d7
 8010948:	1112      	asrs	r2, r2, #4
 801094a:	d0de      	beq.n	801090a <_strtod_l+0x4fa>
 801094c:	2a1f      	cmp	r2, #31
 801094e:	dd1f      	ble.n	8010990 <_strtod_l+0x580>
 8010950:	2400      	movs	r4, #0
 8010952:	4625      	mov	r5, r4
 8010954:	9407      	str	r4, [sp, #28]
 8010956:	4626      	mov	r6, r4
 8010958:	9a05      	ldr	r2, [sp, #20]
 801095a:	2322      	movs	r3, #34	@ 0x22
 801095c:	f04f 0a00 	mov.w	sl, #0
 8010960:	f04f 0b00 	mov.w	fp, #0
 8010964:	6013      	str	r3, [r2, #0]
 8010966:	e76a      	b.n	801083e <_strtod_l+0x42e>
 8010968:	0801284d 	.word	0x0801284d
 801096c:	08012a64 	.word	0x08012a64
 8010970:	08012845 	.word	0x08012845
 8010974:	0801287c 	.word	0x0801287c
 8010978:	08012c0d 	.word	0x08012c0d
 801097c:	08012998 	.word	0x08012998
 8010980:	08012970 	.word	0x08012970
 8010984:	7ca00000 	.word	0x7ca00000
 8010988:	7ff00000 	.word	0x7ff00000
 801098c:	7fefffff 	.word	0x7fefffff
 8010990:	f012 0110 	ands.w	r1, r2, #16
 8010994:	bf18      	it	ne
 8010996:	216a      	movne	r1, #106	@ 0x6a
 8010998:	9106      	str	r1, [sp, #24]
 801099a:	ec4b ab17 	vmov	d7, sl, fp
 801099e:	49b0      	ldr	r1, [pc, #704]	@ (8010c60 <_strtod_l+0x850>)
 80109a0:	2000      	movs	r0, #0
 80109a2:	07d6      	lsls	r6, r2, #31
 80109a4:	d504      	bpl.n	80109b0 <_strtod_l+0x5a0>
 80109a6:	ed91 6b00 	vldr	d6, [r1]
 80109aa:	2001      	movs	r0, #1
 80109ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80109b0:	1052      	asrs	r2, r2, #1
 80109b2:	f101 0108 	add.w	r1, r1, #8
 80109b6:	d1f4      	bne.n	80109a2 <_strtod_l+0x592>
 80109b8:	b108      	cbz	r0, 80109be <_strtod_l+0x5ae>
 80109ba:	ec5b ab17 	vmov	sl, fp, d7
 80109be:	9a06      	ldr	r2, [sp, #24]
 80109c0:	b1b2      	cbz	r2, 80109f0 <_strtod_l+0x5e0>
 80109c2:	f3cb 510a 	ubfx	r1, fp, #20, #11
 80109c6:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 80109ca:	2a00      	cmp	r2, #0
 80109cc:	4658      	mov	r0, fp
 80109ce:	dd0f      	ble.n	80109f0 <_strtod_l+0x5e0>
 80109d0:	2a1f      	cmp	r2, #31
 80109d2:	dd55      	ble.n	8010a80 <_strtod_l+0x670>
 80109d4:	2a34      	cmp	r2, #52	@ 0x34
 80109d6:	bfde      	ittt	le
 80109d8:	f04f 32ff 	movle.w	r2, #4294967295
 80109dc:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 80109e0:	408a      	lslle	r2, r1
 80109e2:	f04f 0a00 	mov.w	sl, #0
 80109e6:	bfcc      	ite	gt
 80109e8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80109ec:	ea02 0b00 	andle.w	fp, r2, r0
 80109f0:	ec4b ab17 	vmov	d7, sl, fp
 80109f4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80109f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109fc:	d0a8      	beq.n	8010950 <_strtod_l+0x540>
 80109fe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010a00:	9805      	ldr	r0, [sp, #20]
 8010a02:	f8cd 9000 	str.w	r9, [sp]
 8010a06:	462a      	mov	r2, r5
 8010a08:	f7ff f8e0 	bl	800fbcc <__s2b>
 8010a0c:	9007      	str	r0, [sp, #28]
 8010a0e:	2800      	cmp	r0, #0
 8010a10:	f43f af0a 	beq.w	8010828 <_strtod_l+0x418>
 8010a14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a16:	1b3f      	subs	r7, r7, r4
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	bfb4      	ite	lt
 8010a1c:	463b      	movlt	r3, r7
 8010a1e:	2300      	movge	r3, #0
 8010a20:	930a      	str	r3, [sp, #40]	@ 0x28
 8010a22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a24:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8010c50 <_strtod_l+0x840>
 8010a28:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010a2c:	2400      	movs	r4, #0
 8010a2e:	930d      	str	r3, [sp, #52]	@ 0x34
 8010a30:	4625      	mov	r5, r4
 8010a32:	9b07      	ldr	r3, [sp, #28]
 8010a34:	9805      	ldr	r0, [sp, #20]
 8010a36:	6859      	ldr	r1, [r3, #4]
 8010a38:	f7ff f820 	bl	800fa7c <_Balloc>
 8010a3c:	4606      	mov	r6, r0
 8010a3e:	2800      	cmp	r0, #0
 8010a40:	f43f aef6 	beq.w	8010830 <_strtod_l+0x420>
 8010a44:	9b07      	ldr	r3, [sp, #28]
 8010a46:	691a      	ldr	r2, [r3, #16]
 8010a48:	ec4b ab19 	vmov	d9, sl, fp
 8010a4c:	3202      	adds	r2, #2
 8010a4e:	f103 010c 	add.w	r1, r3, #12
 8010a52:	0092      	lsls	r2, r2, #2
 8010a54:	300c      	adds	r0, #12
 8010a56:	f000 fd33 	bl	80114c0 <memcpy>
 8010a5a:	eeb0 0b49 	vmov.f64	d0, d9
 8010a5e:	9805      	ldr	r0, [sp, #20]
 8010a60:	aa14      	add	r2, sp, #80	@ 0x50
 8010a62:	a913      	add	r1, sp, #76	@ 0x4c
 8010a64:	f7ff fbee 	bl	8010244 <__d2b>
 8010a68:	9012      	str	r0, [sp, #72]	@ 0x48
 8010a6a:	2800      	cmp	r0, #0
 8010a6c:	f43f aee0 	beq.w	8010830 <_strtod_l+0x420>
 8010a70:	9805      	ldr	r0, [sp, #20]
 8010a72:	2101      	movs	r1, #1
 8010a74:	f7ff f940 	bl	800fcf8 <__i2b>
 8010a78:	4605      	mov	r5, r0
 8010a7a:	b940      	cbnz	r0, 8010a8e <_strtod_l+0x67e>
 8010a7c:	2500      	movs	r5, #0
 8010a7e:	e6d7      	b.n	8010830 <_strtod_l+0x420>
 8010a80:	f04f 31ff 	mov.w	r1, #4294967295
 8010a84:	fa01 f202 	lsl.w	r2, r1, r2
 8010a88:	ea02 0a0a 	and.w	sl, r2, sl
 8010a8c:	e7b0      	b.n	80109f0 <_strtod_l+0x5e0>
 8010a8e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8010a90:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010a92:	2f00      	cmp	r7, #0
 8010a94:	bfab      	itete	ge
 8010a96:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8010a98:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8010a9a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8010a9e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8010aa2:	bfac      	ite	ge
 8010aa4:	eb07 0903 	addge.w	r9, r7, r3
 8010aa8:	eba3 0807 	sublt.w	r8, r3, r7
 8010aac:	9b06      	ldr	r3, [sp, #24]
 8010aae:	1aff      	subs	r7, r7, r3
 8010ab0:	4417      	add	r7, r2
 8010ab2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8010ab6:	4a6b      	ldr	r2, [pc, #428]	@ (8010c64 <_strtod_l+0x854>)
 8010ab8:	3f01      	subs	r7, #1
 8010aba:	4297      	cmp	r7, r2
 8010abc:	da51      	bge.n	8010b62 <_strtod_l+0x752>
 8010abe:	1bd1      	subs	r1, r2, r7
 8010ac0:	291f      	cmp	r1, #31
 8010ac2:	eba3 0301 	sub.w	r3, r3, r1
 8010ac6:	f04f 0201 	mov.w	r2, #1
 8010aca:	dc3e      	bgt.n	8010b4a <_strtod_l+0x73a>
 8010acc:	408a      	lsls	r2, r1
 8010ace:	920c      	str	r2, [sp, #48]	@ 0x30
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010ad4:	eb09 0703 	add.w	r7, r9, r3
 8010ad8:	4498      	add	r8, r3
 8010ada:	9b06      	ldr	r3, [sp, #24]
 8010adc:	45b9      	cmp	r9, r7
 8010ade:	4498      	add	r8, r3
 8010ae0:	464b      	mov	r3, r9
 8010ae2:	bfa8      	it	ge
 8010ae4:	463b      	movge	r3, r7
 8010ae6:	4543      	cmp	r3, r8
 8010ae8:	bfa8      	it	ge
 8010aea:	4643      	movge	r3, r8
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	bfc2      	ittt	gt
 8010af0:	1aff      	subgt	r7, r7, r3
 8010af2:	eba8 0803 	subgt.w	r8, r8, r3
 8010af6:	eba9 0903 	subgt.w	r9, r9, r3
 8010afa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	dd16      	ble.n	8010b2e <_strtod_l+0x71e>
 8010b00:	4629      	mov	r1, r5
 8010b02:	9805      	ldr	r0, [sp, #20]
 8010b04:	461a      	mov	r2, r3
 8010b06:	f7ff f9b7 	bl	800fe78 <__pow5mult>
 8010b0a:	4605      	mov	r5, r0
 8010b0c:	2800      	cmp	r0, #0
 8010b0e:	d0b5      	beq.n	8010a7c <_strtod_l+0x66c>
 8010b10:	4601      	mov	r1, r0
 8010b12:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010b14:	9805      	ldr	r0, [sp, #20]
 8010b16:	f7ff f905 	bl	800fd24 <__multiply>
 8010b1a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8010b1c:	2800      	cmp	r0, #0
 8010b1e:	f43f ae87 	beq.w	8010830 <_strtod_l+0x420>
 8010b22:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010b24:	9805      	ldr	r0, [sp, #20]
 8010b26:	f7fe ffe9 	bl	800fafc <_Bfree>
 8010b2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b2c:	9312      	str	r3, [sp, #72]	@ 0x48
 8010b2e:	2f00      	cmp	r7, #0
 8010b30:	dc1b      	bgt.n	8010b6a <_strtod_l+0x75a>
 8010b32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	dd21      	ble.n	8010b7c <_strtod_l+0x76c>
 8010b38:	4631      	mov	r1, r6
 8010b3a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010b3c:	9805      	ldr	r0, [sp, #20]
 8010b3e:	f7ff f99b 	bl	800fe78 <__pow5mult>
 8010b42:	4606      	mov	r6, r0
 8010b44:	b9d0      	cbnz	r0, 8010b7c <_strtod_l+0x76c>
 8010b46:	2600      	movs	r6, #0
 8010b48:	e672      	b.n	8010830 <_strtod_l+0x420>
 8010b4a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8010b4e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8010b52:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8010b56:	37e2      	adds	r7, #226	@ 0xe2
 8010b58:	fa02 f107 	lsl.w	r1, r2, r7
 8010b5c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010b5e:	920c      	str	r2, [sp, #48]	@ 0x30
 8010b60:	e7b8      	b.n	8010ad4 <_strtod_l+0x6c4>
 8010b62:	2200      	movs	r2, #0
 8010b64:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010b66:	2201      	movs	r2, #1
 8010b68:	e7f9      	b.n	8010b5e <_strtod_l+0x74e>
 8010b6a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010b6c:	9805      	ldr	r0, [sp, #20]
 8010b6e:	463a      	mov	r2, r7
 8010b70:	f7ff f9dc 	bl	800ff2c <__lshift>
 8010b74:	9012      	str	r0, [sp, #72]	@ 0x48
 8010b76:	2800      	cmp	r0, #0
 8010b78:	d1db      	bne.n	8010b32 <_strtod_l+0x722>
 8010b7a:	e659      	b.n	8010830 <_strtod_l+0x420>
 8010b7c:	f1b8 0f00 	cmp.w	r8, #0
 8010b80:	dd07      	ble.n	8010b92 <_strtod_l+0x782>
 8010b82:	4631      	mov	r1, r6
 8010b84:	9805      	ldr	r0, [sp, #20]
 8010b86:	4642      	mov	r2, r8
 8010b88:	f7ff f9d0 	bl	800ff2c <__lshift>
 8010b8c:	4606      	mov	r6, r0
 8010b8e:	2800      	cmp	r0, #0
 8010b90:	d0d9      	beq.n	8010b46 <_strtod_l+0x736>
 8010b92:	f1b9 0f00 	cmp.w	r9, #0
 8010b96:	dd08      	ble.n	8010baa <_strtod_l+0x79a>
 8010b98:	4629      	mov	r1, r5
 8010b9a:	9805      	ldr	r0, [sp, #20]
 8010b9c:	464a      	mov	r2, r9
 8010b9e:	f7ff f9c5 	bl	800ff2c <__lshift>
 8010ba2:	4605      	mov	r5, r0
 8010ba4:	2800      	cmp	r0, #0
 8010ba6:	f43f ae43 	beq.w	8010830 <_strtod_l+0x420>
 8010baa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010bac:	9805      	ldr	r0, [sp, #20]
 8010bae:	4632      	mov	r2, r6
 8010bb0:	f7ff fa44 	bl	801003c <__mdiff>
 8010bb4:	4604      	mov	r4, r0
 8010bb6:	2800      	cmp	r0, #0
 8010bb8:	f43f ae3a 	beq.w	8010830 <_strtod_l+0x420>
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8010bc2:	60c3      	str	r3, [r0, #12]
 8010bc4:	4629      	mov	r1, r5
 8010bc6:	f7ff fa1d 	bl	8010004 <__mcmp>
 8010bca:	2800      	cmp	r0, #0
 8010bcc:	da4e      	bge.n	8010c6c <_strtod_l+0x85c>
 8010bce:	ea58 080a 	orrs.w	r8, r8, sl
 8010bd2:	d174      	bne.n	8010cbe <_strtod_l+0x8ae>
 8010bd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d170      	bne.n	8010cbe <_strtod_l+0x8ae>
 8010bdc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010be0:	0d1b      	lsrs	r3, r3, #20
 8010be2:	051b      	lsls	r3, r3, #20
 8010be4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010be8:	d969      	bls.n	8010cbe <_strtod_l+0x8ae>
 8010bea:	6963      	ldr	r3, [r4, #20]
 8010bec:	b913      	cbnz	r3, 8010bf4 <_strtod_l+0x7e4>
 8010bee:	6923      	ldr	r3, [r4, #16]
 8010bf0:	2b01      	cmp	r3, #1
 8010bf2:	dd64      	ble.n	8010cbe <_strtod_l+0x8ae>
 8010bf4:	4621      	mov	r1, r4
 8010bf6:	2201      	movs	r2, #1
 8010bf8:	9805      	ldr	r0, [sp, #20]
 8010bfa:	f7ff f997 	bl	800ff2c <__lshift>
 8010bfe:	4629      	mov	r1, r5
 8010c00:	4604      	mov	r4, r0
 8010c02:	f7ff f9ff 	bl	8010004 <__mcmp>
 8010c06:	2800      	cmp	r0, #0
 8010c08:	dd59      	ble.n	8010cbe <_strtod_l+0x8ae>
 8010c0a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010c0e:	9a06      	ldr	r2, [sp, #24]
 8010c10:	0d1b      	lsrs	r3, r3, #20
 8010c12:	051b      	lsls	r3, r3, #20
 8010c14:	2a00      	cmp	r2, #0
 8010c16:	d070      	beq.n	8010cfa <_strtod_l+0x8ea>
 8010c18:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010c1c:	d86d      	bhi.n	8010cfa <_strtod_l+0x8ea>
 8010c1e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8010c22:	f67f ae99 	bls.w	8010958 <_strtod_l+0x548>
 8010c26:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8010c58 <_strtod_l+0x848>
 8010c2a:	ec4b ab16 	vmov	d6, sl, fp
 8010c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8010c68 <_strtod_l+0x858>)
 8010c30:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010c34:	ee17 2a90 	vmov	r2, s15
 8010c38:	4013      	ands	r3, r2
 8010c3a:	ec5b ab17 	vmov	sl, fp, d7
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	f47f ae01 	bne.w	8010846 <_strtod_l+0x436>
 8010c44:	9a05      	ldr	r2, [sp, #20]
 8010c46:	2322      	movs	r3, #34	@ 0x22
 8010c48:	6013      	str	r3, [r2, #0]
 8010c4a:	e5fc      	b.n	8010846 <_strtod_l+0x436>
 8010c4c:	f3af 8000 	nop.w
 8010c50:	ffc00000 	.word	0xffc00000
 8010c54:	41dfffff 	.word	0x41dfffff
 8010c58:	00000000 	.word	0x00000000
 8010c5c:	39500000 	.word	0x39500000
 8010c60:	08012a90 	.word	0x08012a90
 8010c64:	fffffc02 	.word	0xfffffc02
 8010c68:	7ff00000 	.word	0x7ff00000
 8010c6c:	46d9      	mov	r9, fp
 8010c6e:	d15d      	bne.n	8010d2c <_strtod_l+0x91c>
 8010c70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010c74:	f1b8 0f00 	cmp.w	r8, #0
 8010c78:	d02a      	beq.n	8010cd0 <_strtod_l+0x8c0>
 8010c7a:	4aab      	ldr	r2, [pc, #684]	@ (8010f28 <_strtod_l+0xb18>)
 8010c7c:	4293      	cmp	r3, r2
 8010c7e:	d12a      	bne.n	8010cd6 <_strtod_l+0x8c6>
 8010c80:	9b06      	ldr	r3, [sp, #24]
 8010c82:	4652      	mov	r2, sl
 8010c84:	b1fb      	cbz	r3, 8010cc6 <_strtod_l+0x8b6>
 8010c86:	4ba9      	ldr	r3, [pc, #676]	@ (8010f2c <_strtod_l+0xb1c>)
 8010c88:	ea0b 0303 	and.w	r3, fp, r3
 8010c8c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010c90:	f04f 31ff 	mov.w	r1, #4294967295
 8010c94:	d81a      	bhi.n	8010ccc <_strtod_l+0x8bc>
 8010c96:	0d1b      	lsrs	r3, r3, #20
 8010c98:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8010ca0:	429a      	cmp	r2, r3
 8010ca2:	d118      	bne.n	8010cd6 <_strtod_l+0x8c6>
 8010ca4:	4ba2      	ldr	r3, [pc, #648]	@ (8010f30 <_strtod_l+0xb20>)
 8010ca6:	4599      	cmp	r9, r3
 8010ca8:	d102      	bne.n	8010cb0 <_strtod_l+0x8a0>
 8010caa:	3201      	adds	r2, #1
 8010cac:	f43f adc0 	beq.w	8010830 <_strtod_l+0x420>
 8010cb0:	4b9e      	ldr	r3, [pc, #632]	@ (8010f2c <_strtod_l+0xb1c>)
 8010cb2:	ea09 0303 	and.w	r3, r9, r3
 8010cb6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8010cba:	f04f 0a00 	mov.w	sl, #0
 8010cbe:	9b06      	ldr	r3, [sp, #24]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d1b0      	bne.n	8010c26 <_strtod_l+0x816>
 8010cc4:	e5bf      	b.n	8010846 <_strtod_l+0x436>
 8010cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8010cca:	e7e9      	b.n	8010ca0 <_strtod_l+0x890>
 8010ccc:	460b      	mov	r3, r1
 8010cce:	e7e7      	b.n	8010ca0 <_strtod_l+0x890>
 8010cd0:	ea53 030a 	orrs.w	r3, r3, sl
 8010cd4:	d099      	beq.n	8010c0a <_strtod_l+0x7fa>
 8010cd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010cd8:	b1c3      	cbz	r3, 8010d0c <_strtod_l+0x8fc>
 8010cda:	ea13 0f09 	tst.w	r3, r9
 8010cde:	d0ee      	beq.n	8010cbe <_strtod_l+0x8ae>
 8010ce0:	9a06      	ldr	r2, [sp, #24]
 8010ce2:	4650      	mov	r0, sl
 8010ce4:	4659      	mov	r1, fp
 8010ce6:	f1b8 0f00 	cmp.w	r8, #0
 8010cea:	d013      	beq.n	8010d14 <_strtod_l+0x904>
 8010cec:	f7ff fb75 	bl	80103da <sulp>
 8010cf0:	ee39 7b00 	vadd.f64	d7, d9, d0
 8010cf4:	ec5b ab17 	vmov	sl, fp, d7
 8010cf8:	e7e1      	b.n	8010cbe <_strtod_l+0x8ae>
 8010cfa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8010cfe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010d02:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010d06:	f04f 3aff 	mov.w	sl, #4294967295
 8010d0a:	e7d8      	b.n	8010cbe <_strtod_l+0x8ae>
 8010d0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010d0e:	ea13 0f0a 	tst.w	r3, sl
 8010d12:	e7e4      	b.n	8010cde <_strtod_l+0x8ce>
 8010d14:	f7ff fb61 	bl	80103da <sulp>
 8010d18:	ee39 0b40 	vsub.f64	d0, d9, d0
 8010d1c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8010d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d24:	ec5b ab10 	vmov	sl, fp, d0
 8010d28:	d1c9      	bne.n	8010cbe <_strtod_l+0x8ae>
 8010d2a:	e615      	b.n	8010958 <_strtod_l+0x548>
 8010d2c:	4629      	mov	r1, r5
 8010d2e:	4620      	mov	r0, r4
 8010d30:	f7ff fae0 	bl	80102f4 <__ratio>
 8010d34:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8010d38:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8010d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d40:	d85d      	bhi.n	8010dfe <_strtod_l+0x9ee>
 8010d42:	f1b8 0f00 	cmp.w	r8, #0
 8010d46:	d164      	bne.n	8010e12 <_strtod_l+0xa02>
 8010d48:	f1ba 0f00 	cmp.w	sl, #0
 8010d4c:	d14b      	bne.n	8010de6 <_strtod_l+0x9d6>
 8010d4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010d52:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d160      	bne.n	8010e1c <_strtod_l+0xa0c>
 8010d5a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8010d5e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8010d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d66:	d401      	bmi.n	8010d6c <_strtod_l+0x95c>
 8010d68:	ee20 8b08 	vmul.f64	d8, d0, d8
 8010d6c:	eeb1 ab48 	vneg.f64	d10, d8
 8010d70:	486e      	ldr	r0, [pc, #440]	@ (8010f2c <_strtod_l+0xb1c>)
 8010d72:	4970      	ldr	r1, [pc, #448]	@ (8010f34 <_strtod_l+0xb24>)
 8010d74:	ea09 0700 	and.w	r7, r9, r0
 8010d78:	428f      	cmp	r7, r1
 8010d7a:	ec53 2b1a 	vmov	r2, r3, d10
 8010d7e:	d17d      	bne.n	8010e7c <_strtod_l+0xa6c>
 8010d80:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8010d84:	ec4b ab1c 	vmov	d12, sl, fp
 8010d88:	eeb0 0b4c 	vmov.f64	d0, d12
 8010d8c:	f7ff f9ea 	bl	8010164 <__ulp>
 8010d90:	4866      	ldr	r0, [pc, #408]	@ (8010f2c <_strtod_l+0xb1c>)
 8010d92:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8010d96:	ee1c 3a90 	vmov	r3, s25
 8010d9a:	4a67      	ldr	r2, [pc, #412]	@ (8010f38 <_strtod_l+0xb28>)
 8010d9c:	ea03 0100 	and.w	r1, r3, r0
 8010da0:	4291      	cmp	r1, r2
 8010da2:	ec5b ab1c 	vmov	sl, fp, d12
 8010da6:	d93c      	bls.n	8010e22 <_strtod_l+0xa12>
 8010da8:	ee19 2a90 	vmov	r2, s19
 8010dac:	4b60      	ldr	r3, [pc, #384]	@ (8010f30 <_strtod_l+0xb20>)
 8010dae:	429a      	cmp	r2, r3
 8010db0:	d104      	bne.n	8010dbc <_strtod_l+0x9ac>
 8010db2:	ee19 3a10 	vmov	r3, s18
 8010db6:	3301      	adds	r3, #1
 8010db8:	f43f ad3a 	beq.w	8010830 <_strtod_l+0x420>
 8010dbc:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8010f30 <_strtod_l+0xb20>
 8010dc0:	f04f 3aff 	mov.w	sl, #4294967295
 8010dc4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010dc6:	9805      	ldr	r0, [sp, #20]
 8010dc8:	f7fe fe98 	bl	800fafc <_Bfree>
 8010dcc:	9805      	ldr	r0, [sp, #20]
 8010dce:	4631      	mov	r1, r6
 8010dd0:	f7fe fe94 	bl	800fafc <_Bfree>
 8010dd4:	9805      	ldr	r0, [sp, #20]
 8010dd6:	4629      	mov	r1, r5
 8010dd8:	f7fe fe90 	bl	800fafc <_Bfree>
 8010ddc:	9805      	ldr	r0, [sp, #20]
 8010dde:	4621      	mov	r1, r4
 8010de0:	f7fe fe8c 	bl	800fafc <_Bfree>
 8010de4:	e625      	b.n	8010a32 <_strtod_l+0x622>
 8010de6:	f1ba 0f01 	cmp.w	sl, #1
 8010dea:	d103      	bne.n	8010df4 <_strtod_l+0x9e4>
 8010dec:	f1bb 0f00 	cmp.w	fp, #0
 8010df0:	f43f adb2 	beq.w	8010958 <_strtod_l+0x548>
 8010df4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8010df8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8010dfc:	e7b8      	b.n	8010d70 <_strtod_l+0x960>
 8010dfe:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8010e02:	ee20 8b08 	vmul.f64	d8, d0, d8
 8010e06:	f1b8 0f00 	cmp.w	r8, #0
 8010e0a:	d0af      	beq.n	8010d6c <_strtod_l+0x95c>
 8010e0c:	eeb0 ab48 	vmov.f64	d10, d8
 8010e10:	e7ae      	b.n	8010d70 <_strtod_l+0x960>
 8010e12:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8010e16:	eeb0 8b4a 	vmov.f64	d8, d10
 8010e1a:	e7a9      	b.n	8010d70 <_strtod_l+0x960>
 8010e1c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8010e20:	e7a6      	b.n	8010d70 <_strtod_l+0x960>
 8010e22:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8010e26:	9b06      	ldr	r3, [sp, #24]
 8010e28:	46d9      	mov	r9, fp
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d1ca      	bne.n	8010dc4 <_strtod_l+0x9b4>
 8010e2e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010e32:	0d1b      	lsrs	r3, r3, #20
 8010e34:	051b      	lsls	r3, r3, #20
 8010e36:	429f      	cmp	r7, r3
 8010e38:	d1c4      	bne.n	8010dc4 <_strtod_l+0x9b4>
 8010e3a:	ec51 0b18 	vmov	r0, r1, d8
 8010e3e:	f7ef fc7b 	bl	8000738 <__aeabi_d2lz>
 8010e42:	f7ef fc33 	bl	80006ac <__aeabi_l2d>
 8010e46:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8010e4a:	ec41 0b17 	vmov	d7, r0, r1
 8010e4e:	ea49 090a 	orr.w	r9, r9, sl
 8010e52:	ea59 0908 	orrs.w	r9, r9, r8
 8010e56:	ee38 8b47 	vsub.f64	d8, d8, d7
 8010e5a:	d03c      	beq.n	8010ed6 <_strtod_l+0xac6>
 8010e5c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8010f10 <_strtod_l+0xb00>
 8010e60:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e68:	f53f aced 	bmi.w	8010846 <_strtod_l+0x436>
 8010e6c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8010f18 <_strtod_l+0xb08>
 8010e70:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e78:	dda4      	ble.n	8010dc4 <_strtod_l+0x9b4>
 8010e7a:	e4e4      	b.n	8010846 <_strtod_l+0x436>
 8010e7c:	9906      	ldr	r1, [sp, #24]
 8010e7e:	b1e1      	cbz	r1, 8010eba <_strtod_l+0xaaa>
 8010e80:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8010e84:	d819      	bhi.n	8010eba <_strtod_l+0xaaa>
 8010e86:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8010e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e8e:	d811      	bhi.n	8010eb4 <_strtod_l+0xaa4>
 8010e90:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8010e94:	ee18 3a10 	vmov	r3, s16
 8010e98:	2b01      	cmp	r3, #1
 8010e9a:	bf38      	it	cc
 8010e9c:	2301      	movcc	r3, #1
 8010e9e:	ee08 3a10 	vmov	s16, r3
 8010ea2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8010ea6:	f1b8 0f00 	cmp.w	r8, #0
 8010eaa:	d111      	bne.n	8010ed0 <_strtod_l+0xac0>
 8010eac:	eeb1 7b48 	vneg.f64	d7, d8
 8010eb0:	ec53 2b17 	vmov	r2, r3, d7
 8010eb4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8010eb8:	1bcb      	subs	r3, r1, r7
 8010eba:	eeb0 0b49 	vmov.f64	d0, d9
 8010ebe:	ec43 2b1a 	vmov	d10, r2, r3
 8010ec2:	f7ff f94f 	bl	8010164 <__ulp>
 8010ec6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8010eca:	ec5b ab19 	vmov	sl, fp, d9
 8010ece:	e7aa      	b.n	8010e26 <_strtod_l+0xa16>
 8010ed0:	eeb0 7b48 	vmov.f64	d7, d8
 8010ed4:	e7ec      	b.n	8010eb0 <_strtod_l+0xaa0>
 8010ed6:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8010f20 <_strtod_l+0xb10>
 8010eda:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ee2:	f57f af6f 	bpl.w	8010dc4 <_strtod_l+0x9b4>
 8010ee6:	e4ae      	b.n	8010846 <_strtod_l+0x436>
 8010ee8:	2300      	movs	r3, #0
 8010eea:	9308      	str	r3, [sp, #32]
 8010eec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010eee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010ef0:	6013      	str	r3, [r2, #0]
 8010ef2:	f7ff bacc 	b.w	801048e <_strtod_l+0x7e>
 8010ef6:	2a65      	cmp	r2, #101	@ 0x65
 8010ef8:	f43f abbc 	beq.w	8010674 <_strtod_l+0x264>
 8010efc:	2a45      	cmp	r2, #69	@ 0x45
 8010efe:	f43f abb9 	beq.w	8010674 <_strtod_l+0x264>
 8010f02:	2301      	movs	r3, #1
 8010f04:	9306      	str	r3, [sp, #24]
 8010f06:	f7ff bbf0 	b.w	80106ea <_strtod_l+0x2da>
 8010f0a:	bf00      	nop
 8010f0c:	f3af 8000 	nop.w
 8010f10:	94a03595 	.word	0x94a03595
 8010f14:	3fdfffff 	.word	0x3fdfffff
 8010f18:	35afe535 	.word	0x35afe535
 8010f1c:	3fe00000 	.word	0x3fe00000
 8010f20:	94a03595 	.word	0x94a03595
 8010f24:	3fcfffff 	.word	0x3fcfffff
 8010f28:	000fffff 	.word	0x000fffff
 8010f2c:	7ff00000 	.word	0x7ff00000
 8010f30:	7fefffff 	.word	0x7fefffff
 8010f34:	7fe00000 	.word	0x7fe00000
 8010f38:	7c9fffff 	.word	0x7c9fffff

08010f3c <_strtod_r>:
 8010f3c:	4b01      	ldr	r3, [pc, #4]	@ (8010f44 <_strtod_r+0x8>)
 8010f3e:	f7ff ba67 	b.w	8010410 <_strtod_l>
 8010f42:	bf00      	nop
 8010f44:	2400006c 	.word	0x2400006c

08010f48 <_strtol_l.constprop.0>:
 8010f48:	2b24      	cmp	r3, #36	@ 0x24
 8010f4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f4e:	4686      	mov	lr, r0
 8010f50:	4690      	mov	r8, r2
 8010f52:	d801      	bhi.n	8010f58 <_strtol_l.constprop.0+0x10>
 8010f54:	2b01      	cmp	r3, #1
 8010f56:	d106      	bne.n	8010f66 <_strtol_l.constprop.0+0x1e>
 8010f58:	f7fd fe7e 	bl	800ec58 <__errno>
 8010f5c:	2316      	movs	r3, #22
 8010f5e:	6003      	str	r3, [r0, #0]
 8010f60:	2000      	movs	r0, #0
 8010f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f66:	4834      	ldr	r0, [pc, #208]	@ (8011038 <_strtol_l.constprop.0+0xf0>)
 8010f68:	460d      	mov	r5, r1
 8010f6a:	462a      	mov	r2, r5
 8010f6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010f70:	5d06      	ldrb	r6, [r0, r4]
 8010f72:	f016 0608 	ands.w	r6, r6, #8
 8010f76:	d1f8      	bne.n	8010f6a <_strtol_l.constprop.0+0x22>
 8010f78:	2c2d      	cmp	r4, #45	@ 0x2d
 8010f7a:	d12d      	bne.n	8010fd8 <_strtol_l.constprop.0+0x90>
 8010f7c:	782c      	ldrb	r4, [r5, #0]
 8010f7e:	2601      	movs	r6, #1
 8010f80:	1c95      	adds	r5, r2, #2
 8010f82:	f033 0210 	bics.w	r2, r3, #16
 8010f86:	d109      	bne.n	8010f9c <_strtol_l.constprop.0+0x54>
 8010f88:	2c30      	cmp	r4, #48	@ 0x30
 8010f8a:	d12a      	bne.n	8010fe2 <_strtol_l.constprop.0+0x9a>
 8010f8c:	782a      	ldrb	r2, [r5, #0]
 8010f8e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010f92:	2a58      	cmp	r2, #88	@ 0x58
 8010f94:	d125      	bne.n	8010fe2 <_strtol_l.constprop.0+0x9a>
 8010f96:	786c      	ldrb	r4, [r5, #1]
 8010f98:	2310      	movs	r3, #16
 8010f9a:	3502      	adds	r5, #2
 8010f9c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8010fa0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	fbbc f9f3 	udiv	r9, ip, r3
 8010faa:	4610      	mov	r0, r2
 8010fac:	fb03 ca19 	mls	sl, r3, r9, ip
 8010fb0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010fb4:	2f09      	cmp	r7, #9
 8010fb6:	d81b      	bhi.n	8010ff0 <_strtol_l.constprop.0+0xa8>
 8010fb8:	463c      	mov	r4, r7
 8010fba:	42a3      	cmp	r3, r4
 8010fbc:	dd27      	ble.n	801100e <_strtol_l.constprop.0+0xc6>
 8010fbe:	1c57      	adds	r7, r2, #1
 8010fc0:	d007      	beq.n	8010fd2 <_strtol_l.constprop.0+0x8a>
 8010fc2:	4581      	cmp	r9, r0
 8010fc4:	d320      	bcc.n	8011008 <_strtol_l.constprop.0+0xc0>
 8010fc6:	d101      	bne.n	8010fcc <_strtol_l.constprop.0+0x84>
 8010fc8:	45a2      	cmp	sl, r4
 8010fca:	db1d      	blt.n	8011008 <_strtol_l.constprop.0+0xc0>
 8010fcc:	fb00 4003 	mla	r0, r0, r3, r4
 8010fd0:	2201      	movs	r2, #1
 8010fd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010fd6:	e7eb      	b.n	8010fb0 <_strtol_l.constprop.0+0x68>
 8010fd8:	2c2b      	cmp	r4, #43	@ 0x2b
 8010fda:	bf04      	itt	eq
 8010fdc:	782c      	ldrbeq	r4, [r5, #0]
 8010fde:	1c95      	addeq	r5, r2, #2
 8010fe0:	e7cf      	b.n	8010f82 <_strtol_l.constprop.0+0x3a>
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d1da      	bne.n	8010f9c <_strtol_l.constprop.0+0x54>
 8010fe6:	2c30      	cmp	r4, #48	@ 0x30
 8010fe8:	bf0c      	ite	eq
 8010fea:	2308      	moveq	r3, #8
 8010fec:	230a      	movne	r3, #10
 8010fee:	e7d5      	b.n	8010f9c <_strtol_l.constprop.0+0x54>
 8010ff0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010ff4:	2f19      	cmp	r7, #25
 8010ff6:	d801      	bhi.n	8010ffc <_strtol_l.constprop.0+0xb4>
 8010ff8:	3c37      	subs	r4, #55	@ 0x37
 8010ffa:	e7de      	b.n	8010fba <_strtol_l.constprop.0+0x72>
 8010ffc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011000:	2f19      	cmp	r7, #25
 8011002:	d804      	bhi.n	801100e <_strtol_l.constprop.0+0xc6>
 8011004:	3c57      	subs	r4, #87	@ 0x57
 8011006:	e7d8      	b.n	8010fba <_strtol_l.constprop.0+0x72>
 8011008:	f04f 32ff 	mov.w	r2, #4294967295
 801100c:	e7e1      	b.n	8010fd2 <_strtol_l.constprop.0+0x8a>
 801100e:	1c53      	adds	r3, r2, #1
 8011010:	d108      	bne.n	8011024 <_strtol_l.constprop.0+0xdc>
 8011012:	2322      	movs	r3, #34	@ 0x22
 8011014:	f8ce 3000 	str.w	r3, [lr]
 8011018:	4660      	mov	r0, ip
 801101a:	f1b8 0f00 	cmp.w	r8, #0
 801101e:	d0a0      	beq.n	8010f62 <_strtol_l.constprop.0+0x1a>
 8011020:	1e69      	subs	r1, r5, #1
 8011022:	e006      	b.n	8011032 <_strtol_l.constprop.0+0xea>
 8011024:	b106      	cbz	r6, 8011028 <_strtol_l.constprop.0+0xe0>
 8011026:	4240      	negs	r0, r0
 8011028:	f1b8 0f00 	cmp.w	r8, #0
 801102c:	d099      	beq.n	8010f62 <_strtol_l.constprop.0+0x1a>
 801102e:	2a00      	cmp	r2, #0
 8011030:	d1f6      	bne.n	8011020 <_strtol_l.constprop.0+0xd8>
 8011032:	f8c8 1000 	str.w	r1, [r8]
 8011036:	e794      	b.n	8010f62 <_strtol_l.constprop.0+0x1a>
 8011038:	08012ab9 	.word	0x08012ab9

0801103c <_strtol_r>:
 801103c:	f7ff bf84 	b.w	8010f48 <_strtol_l.constprop.0>

08011040 <__ssputs_r>:
 8011040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011044:	688e      	ldr	r6, [r1, #8]
 8011046:	461f      	mov	r7, r3
 8011048:	42be      	cmp	r6, r7
 801104a:	680b      	ldr	r3, [r1, #0]
 801104c:	4682      	mov	sl, r0
 801104e:	460c      	mov	r4, r1
 8011050:	4690      	mov	r8, r2
 8011052:	d82d      	bhi.n	80110b0 <__ssputs_r+0x70>
 8011054:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011058:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801105c:	d026      	beq.n	80110ac <__ssputs_r+0x6c>
 801105e:	6965      	ldr	r5, [r4, #20]
 8011060:	6909      	ldr	r1, [r1, #16]
 8011062:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011066:	eba3 0901 	sub.w	r9, r3, r1
 801106a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801106e:	1c7b      	adds	r3, r7, #1
 8011070:	444b      	add	r3, r9
 8011072:	106d      	asrs	r5, r5, #1
 8011074:	429d      	cmp	r5, r3
 8011076:	bf38      	it	cc
 8011078:	461d      	movcc	r5, r3
 801107a:	0553      	lsls	r3, r2, #21
 801107c:	d527      	bpl.n	80110ce <__ssputs_r+0x8e>
 801107e:	4629      	mov	r1, r5
 8011080:	f7fe fc70 	bl	800f964 <_malloc_r>
 8011084:	4606      	mov	r6, r0
 8011086:	b360      	cbz	r0, 80110e2 <__ssputs_r+0xa2>
 8011088:	6921      	ldr	r1, [r4, #16]
 801108a:	464a      	mov	r2, r9
 801108c:	f000 fa18 	bl	80114c0 <memcpy>
 8011090:	89a3      	ldrh	r3, [r4, #12]
 8011092:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011096:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801109a:	81a3      	strh	r3, [r4, #12]
 801109c:	6126      	str	r6, [r4, #16]
 801109e:	6165      	str	r5, [r4, #20]
 80110a0:	444e      	add	r6, r9
 80110a2:	eba5 0509 	sub.w	r5, r5, r9
 80110a6:	6026      	str	r6, [r4, #0]
 80110a8:	60a5      	str	r5, [r4, #8]
 80110aa:	463e      	mov	r6, r7
 80110ac:	42be      	cmp	r6, r7
 80110ae:	d900      	bls.n	80110b2 <__ssputs_r+0x72>
 80110b0:	463e      	mov	r6, r7
 80110b2:	6820      	ldr	r0, [r4, #0]
 80110b4:	4632      	mov	r2, r6
 80110b6:	4641      	mov	r1, r8
 80110b8:	f000 f9c6 	bl	8011448 <memmove>
 80110bc:	68a3      	ldr	r3, [r4, #8]
 80110be:	1b9b      	subs	r3, r3, r6
 80110c0:	60a3      	str	r3, [r4, #8]
 80110c2:	6823      	ldr	r3, [r4, #0]
 80110c4:	4433      	add	r3, r6
 80110c6:	6023      	str	r3, [r4, #0]
 80110c8:	2000      	movs	r0, #0
 80110ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110ce:	462a      	mov	r2, r5
 80110d0:	f000 fd8b 	bl	8011bea <_realloc_r>
 80110d4:	4606      	mov	r6, r0
 80110d6:	2800      	cmp	r0, #0
 80110d8:	d1e0      	bne.n	801109c <__ssputs_r+0x5c>
 80110da:	6921      	ldr	r1, [r4, #16]
 80110dc:	4650      	mov	r0, sl
 80110de:	f7fe fbcd 	bl	800f87c <_free_r>
 80110e2:	230c      	movs	r3, #12
 80110e4:	f8ca 3000 	str.w	r3, [sl]
 80110e8:	89a3      	ldrh	r3, [r4, #12]
 80110ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80110ee:	81a3      	strh	r3, [r4, #12]
 80110f0:	f04f 30ff 	mov.w	r0, #4294967295
 80110f4:	e7e9      	b.n	80110ca <__ssputs_r+0x8a>
	...

080110f8 <_svfiprintf_r>:
 80110f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110fc:	4698      	mov	r8, r3
 80110fe:	898b      	ldrh	r3, [r1, #12]
 8011100:	061b      	lsls	r3, r3, #24
 8011102:	b09d      	sub	sp, #116	@ 0x74
 8011104:	4607      	mov	r7, r0
 8011106:	460d      	mov	r5, r1
 8011108:	4614      	mov	r4, r2
 801110a:	d510      	bpl.n	801112e <_svfiprintf_r+0x36>
 801110c:	690b      	ldr	r3, [r1, #16]
 801110e:	b973      	cbnz	r3, 801112e <_svfiprintf_r+0x36>
 8011110:	2140      	movs	r1, #64	@ 0x40
 8011112:	f7fe fc27 	bl	800f964 <_malloc_r>
 8011116:	6028      	str	r0, [r5, #0]
 8011118:	6128      	str	r0, [r5, #16]
 801111a:	b930      	cbnz	r0, 801112a <_svfiprintf_r+0x32>
 801111c:	230c      	movs	r3, #12
 801111e:	603b      	str	r3, [r7, #0]
 8011120:	f04f 30ff 	mov.w	r0, #4294967295
 8011124:	b01d      	add	sp, #116	@ 0x74
 8011126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801112a:	2340      	movs	r3, #64	@ 0x40
 801112c:	616b      	str	r3, [r5, #20]
 801112e:	2300      	movs	r3, #0
 8011130:	9309      	str	r3, [sp, #36]	@ 0x24
 8011132:	2320      	movs	r3, #32
 8011134:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011138:	f8cd 800c 	str.w	r8, [sp, #12]
 801113c:	2330      	movs	r3, #48	@ 0x30
 801113e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80112dc <_svfiprintf_r+0x1e4>
 8011142:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011146:	f04f 0901 	mov.w	r9, #1
 801114a:	4623      	mov	r3, r4
 801114c:	469a      	mov	sl, r3
 801114e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011152:	b10a      	cbz	r2, 8011158 <_svfiprintf_r+0x60>
 8011154:	2a25      	cmp	r2, #37	@ 0x25
 8011156:	d1f9      	bne.n	801114c <_svfiprintf_r+0x54>
 8011158:	ebba 0b04 	subs.w	fp, sl, r4
 801115c:	d00b      	beq.n	8011176 <_svfiprintf_r+0x7e>
 801115e:	465b      	mov	r3, fp
 8011160:	4622      	mov	r2, r4
 8011162:	4629      	mov	r1, r5
 8011164:	4638      	mov	r0, r7
 8011166:	f7ff ff6b 	bl	8011040 <__ssputs_r>
 801116a:	3001      	adds	r0, #1
 801116c:	f000 80a7 	beq.w	80112be <_svfiprintf_r+0x1c6>
 8011170:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011172:	445a      	add	r2, fp
 8011174:	9209      	str	r2, [sp, #36]	@ 0x24
 8011176:	f89a 3000 	ldrb.w	r3, [sl]
 801117a:	2b00      	cmp	r3, #0
 801117c:	f000 809f 	beq.w	80112be <_svfiprintf_r+0x1c6>
 8011180:	2300      	movs	r3, #0
 8011182:	f04f 32ff 	mov.w	r2, #4294967295
 8011186:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801118a:	f10a 0a01 	add.w	sl, sl, #1
 801118e:	9304      	str	r3, [sp, #16]
 8011190:	9307      	str	r3, [sp, #28]
 8011192:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011196:	931a      	str	r3, [sp, #104]	@ 0x68
 8011198:	4654      	mov	r4, sl
 801119a:	2205      	movs	r2, #5
 801119c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111a0:	484e      	ldr	r0, [pc, #312]	@ (80112dc <_svfiprintf_r+0x1e4>)
 80111a2:	f7ef f89d 	bl	80002e0 <memchr>
 80111a6:	9a04      	ldr	r2, [sp, #16]
 80111a8:	b9d8      	cbnz	r0, 80111e2 <_svfiprintf_r+0xea>
 80111aa:	06d0      	lsls	r0, r2, #27
 80111ac:	bf44      	itt	mi
 80111ae:	2320      	movmi	r3, #32
 80111b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80111b4:	0711      	lsls	r1, r2, #28
 80111b6:	bf44      	itt	mi
 80111b8:	232b      	movmi	r3, #43	@ 0x2b
 80111ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80111be:	f89a 3000 	ldrb.w	r3, [sl]
 80111c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80111c4:	d015      	beq.n	80111f2 <_svfiprintf_r+0xfa>
 80111c6:	9a07      	ldr	r2, [sp, #28]
 80111c8:	4654      	mov	r4, sl
 80111ca:	2000      	movs	r0, #0
 80111cc:	f04f 0c0a 	mov.w	ip, #10
 80111d0:	4621      	mov	r1, r4
 80111d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80111d6:	3b30      	subs	r3, #48	@ 0x30
 80111d8:	2b09      	cmp	r3, #9
 80111da:	d94b      	bls.n	8011274 <_svfiprintf_r+0x17c>
 80111dc:	b1b0      	cbz	r0, 801120c <_svfiprintf_r+0x114>
 80111de:	9207      	str	r2, [sp, #28]
 80111e0:	e014      	b.n	801120c <_svfiprintf_r+0x114>
 80111e2:	eba0 0308 	sub.w	r3, r0, r8
 80111e6:	fa09 f303 	lsl.w	r3, r9, r3
 80111ea:	4313      	orrs	r3, r2
 80111ec:	9304      	str	r3, [sp, #16]
 80111ee:	46a2      	mov	sl, r4
 80111f0:	e7d2      	b.n	8011198 <_svfiprintf_r+0xa0>
 80111f2:	9b03      	ldr	r3, [sp, #12]
 80111f4:	1d19      	adds	r1, r3, #4
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	9103      	str	r1, [sp, #12]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	bfbb      	ittet	lt
 80111fe:	425b      	neglt	r3, r3
 8011200:	f042 0202 	orrlt.w	r2, r2, #2
 8011204:	9307      	strge	r3, [sp, #28]
 8011206:	9307      	strlt	r3, [sp, #28]
 8011208:	bfb8      	it	lt
 801120a:	9204      	strlt	r2, [sp, #16]
 801120c:	7823      	ldrb	r3, [r4, #0]
 801120e:	2b2e      	cmp	r3, #46	@ 0x2e
 8011210:	d10a      	bne.n	8011228 <_svfiprintf_r+0x130>
 8011212:	7863      	ldrb	r3, [r4, #1]
 8011214:	2b2a      	cmp	r3, #42	@ 0x2a
 8011216:	d132      	bne.n	801127e <_svfiprintf_r+0x186>
 8011218:	9b03      	ldr	r3, [sp, #12]
 801121a:	1d1a      	adds	r2, r3, #4
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	9203      	str	r2, [sp, #12]
 8011220:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011224:	3402      	adds	r4, #2
 8011226:	9305      	str	r3, [sp, #20]
 8011228:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80112ec <_svfiprintf_r+0x1f4>
 801122c:	7821      	ldrb	r1, [r4, #0]
 801122e:	2203      	movs	r2, #3
 8011230:	4650      	mov	r0, sl
 8011232:	f7ef f855 	bl	80002e0 <memchr>
 8011236:	b138      	cbz	r0, 8011248 <_svfiprintf_r+0x150>
 8011238:	9b04      	ldr	r3, [sp, #16]
 801123a:	eba0 000a 	sub.w	r0, r0, sl
 801123e:	2240      	movs	r2, #64	@ 0x40
 8011240:	4082      	lsls	r2, r0
 8011242:	4313      	orrs	r3, r2
 8011244:	3401      	adds	r4, #1
 8011246:	9304      	str	r3, [sp, #16]
 8011248:	f814 1b01 	ldrb.w	r1, [r4], #1
 801124c:	4824      	ldr	r0, [pc, #144]	@ (80112e0 <_svfiprintf_r+0x1e8>)
 801124e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011252:	2206      	movs	r2, #6
 8011254:	f7ef f844 	bl	80002e0 <memchr>
 8011258:	2800      	cmp	r0, #0
 801125a:	d036      	beq.n	80112ca <_svfiprintf_r+0x1d2>
 801125c:	4b21      	ldr	r3, [pc, #132]	@ (80112e4 <_svfiprintf_r+0x1ec>)
 801125e:	bb1b      	cbnz	r3, 80112a8 <_svfiprintf_r+0x1b0>
 8011260:	9b03      	ldr	r3, [sp, #12]
 8011262:	3307      	adds	r3, #7
 8011264:	f023 0307 	bic.w	r3, r3, #7
 8011268:	3308      	adds	r3, #8
 801126a:	9303      	str	r3, [sp, #12]
 801126c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801126e:	4433      	add	r3, r6
 8011270:	9309      	str	r3, [sp, #36]	@ 0x24
 8011272:	e76a      	b.n	801114a <_svfiprintf_r+0x52>
 8011274:	fb0c 3202 	mla	r2, ip, r2, r3
 8011278:	460c      	mov	r4, r1
 801127a:	2001      	movs	r0, #1
 801127c:	e7a8      	b.n	80111d0 <_svfiprintf_r+0xd8>
 801127e:	2300      	movs	r3, #0
 8011280:	3401      	adds	r4, #1
 8011282:	9305      	str	r3, [sp, #20]
 8011284:	4619      	mov	r1, r3
 8011286:	f04f 0c0a 	mov.w	ip, #10
 801128a:	4620      	mov	r0, r4
 801128c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011290:	3a30      	subs	r2, #48	@ 0x30
 8011292:	2a09      	cmp	r2, #9
 8011294:	d903      	bls.n	801129e <_svfiprintf_r+0x1a6>
 8011296:	2b00      	cmp	r3, #0
 8011298:	d0c6      	beq.n	8011228 <_svfiprintf_r+0x130>
 801129a:	9105      	str	r1, [sp, #20]
 801129c:	e7c4      	b.n	8011228 <_svfiprintf_r+0x130>
 801129e:	fb0c 2101 	mla	r1, ip, r1, r2
 80112a2:	4604      	mov	r4, r0
 80112a4:	2301      	movs	r3, #1
 80112a6:	e7f0      	b.n	801128a <_svfiprintf_r+0x192>
 80112a8:	ab03      	add	r3, sp, #12
 80112aa:	9300      	str	r3, [sp, #0]
 80112ac:	462a      	mov	r2, r5
 80112ae:	4b0e      	ldr	r3, [pc, #56]	@ (80112e8 <_svfiprintf_r+0x1f0>)
 80112b0:	a904      	add	r1, sp, #16
 80112b2:	4638      	mov	r0, r7
 80112b4:	f7fc fda4 	bl	800de00 <_printf_float>
 80112b8:	1c42      	adds	r2, r0, #1
 80112ba:	4606      	mov	r6, r0
 80112bc:	d1d6      	bne.n	801126c <_svfiprintf_r+0x174>
 80112be:	89ab      	ldrh	r3, [r5, #12]
 80112c0:	065b      	lsls	r3, r3, #25
 80112c2:	f53f af2d 	bmi.w	8011120 <_svfiprintf_r+0x28>
 80112c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80112c8:	e72c      	b.n	8011124 <_svfiprintf_r+0x2c>
 80112ca:	ab03      	add	r3, sp, #12
 80112cc:	9300      	str	r3, [sp, #0]
 80112ce:	462a      	mov	r2, r5
 80112d0:	4b05      	ldr	r3, [pc, #20]	@ (80112e8 <_svfiprintf_r+0x1f0>)
 80112d2:	a904      	add	r1, sp, #16
 80112d4:	4638      	mov	r0, r7
 80112d6:	f7fd f81b 	bl	800e310 <_printf_i>
 80112da:	e7ed      	b.n	80112b8 <_svfiprintf_r+0x1c0>
 80112dc:	08012bb9 	.word	0x08012bb9
 80112e0:	08012bc3 	.word	0x08012bc3
 80112e4:	0800de01 	.word	0x0800de01
 80112e8:	08011041 	.word	0x08011041
 80112ec:	08012bbf 	.word	0x08012bbf

080112f0 <__sflush_r>:
 80112f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80112f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112f8:	0716      	lsls	r6, r2, #28
 80112fa:	4605      	mov	r5, r0
 80112fc:	460c      	mov	r4, r1
 80112fe:	d454      	bmi.n	80113aa <__sflush_r+0xba>
 8011300:	684b      	ldr	r3, [r1, #4]
 8011302:	2b00      	cmp	r3, #0
 8011304:	dc02      	bgt.n	801130c <__sflush_r+0x1c>
 8011306:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011308:	2b00      	cmp	r3, #0
 801130a:	dd48      	ble.n	801139e <__sflush_r+0xae>
 801130c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801130e:	2e00      	cmp	r6, #0
 8011310:	d045      	beq.n	801139e <__sflush_r+0xae>
 8011312:	2300      	movs	r3, #0
 8011314:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011318:	682f      	ldr	r7, [r5, #0]
 801131a:	6a21      	ldr	r1, [r4, #32]
 801131c:	602b      	str	r3, [r5, #0]
 801131e:	d030      	beq.n	8011382 <__sflush_r+0x92>
 8011320:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011322:	89a3      	ldrh	r3, [r4, #12]
 8011324:	0759      	lsls	r1, r3, #29
 8011326:	d505      	bpl.n	8011334 <__sflush_r+0x44>
 8011328:	6863      	ldr	r3, [r4, #4]
 801132a:	1ad2      	subs	r2, r2, r3
 801132c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801132e:	b10b      	cbz	r3, 8011334 <__sflush_r+0x44>
 8011330:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011332:	1ad2      	subs	r2, r2, r3
 8011334:	2300      	movs	r3, #0
 8011336:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011338:	6a21      	ldr	r1, [r4, #32]
 801133a:	4628      	mov	r0, r5
 801133c:	47b0      	blx	r6
 801133e:	1c43      	adds	r3, r0, #1
 8011340:	89a3      	ldrh	r3, [r4, #12]
 8011342:	d106      	bne.n	8011352 <__sflush_r+0x62>
 8011344:	6829      	ldr	r1, [r5, #0]
 8011346:	291d      	cmp	r1, #29
 8011348:	d82b      	bhi.n	80113a2 <__sflush_r+0xb2>
 801134a:	4a2a      	ldr	r2, [pc, #168]	@ (80113f4 <__sflush_r+0x104>)
 801134c:	410a      	asrs	r2, r1
 801134e:	07d6      	lsls	r6, r2, #31
 8011350:	d427      	bmi.n	80113a2 <__sflush_r+0xb2>
 8011352:	2200      	movs	r2, #0
 8011354:	6062      	str	r2, [r4, #4]
 8011356:	04d9      	lsls	r1, r3, #19
 8011358:	6922      	ldr	r2, [r4, #16]
 801135a:	6022      	str	r2, [r4, #0]
 801135c:	d504      	bpl.n	8011368 <__sflush_r+0x78>
 801135e:	1c42      	adds	r2, r0, #1
 8011360:	d101      	bne.n	8011366 <__sflush_r+0x76>
 8011362:	682b      	ldr	r3, [r5, #0]
 8011364:	b903      	cbnz	r3, 8011368 <__sflush_r+0x78>
 8011366:	6560      	str	r0, [r4, #84]	@ 0x54
 8011368:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801136a:	602f      	str	r7, [r5, #0]
 801136c:	b1b9      	cbz	r1, 801139e <__sflush_r+0xae>
 801136e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011372:	4299      	cmp	r1, r3
 8011374:	d002      	beq.n	801137c <__sflush_r+0x8c>
 8011376:	4628      	mov	r0, r5
 8011378:	f7fe fa80 	bl	800f87c <_free_r>
 801137c:	2300      	movs	r3, #0
 801137e:	6363      	str	r3, [r4, #52]	@ 0x34
 8011380:	e00d      	b.n	801139e <__sflush_r+0xae>
 8011382:	2301      	movs	r3, #1
 8011384:	4628      	mov	r0, r5
 8011386:	47b0      	blx	r6
 8011388:	4602      	mov	r2, r0
 801138a:	1c50      	adds	r0, r2, #1
 801138c:	d1c9      	bne.n	8011322 <__sflush_r+0x32>
 801138e:	682b      	ldr	r3, [r5, #0]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d0c6      	beq.n	8011322 <__sflush_r+0x32>
 8011394:	2b1d      	cmp	r3, #29
 8011396:	d001      	beq.n	801139c <__sflush_r+0xac>
 8011398:	2b16      	cmp	r3, #22
 801139a:	d11e      	bne.n	80113da <__sflush_r+0xea>
 801139c:	602f      	str	r7, [r5, #0]
 801139e:	2000      	movs	r0, #0
 80113a0:	e022      	b.n	80113e8 <__sflush_r+0xf8>
 80113a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80113a6:	b21b      	sxth	r3, r3
 80113a8:	e01b      	b.n	80113e2 <__sflush_r+0xf2>
 80113aa:	690f      	ldr	r7, [r1, #16]
 80113ac:	2f00      	cmp	r7, #0
 80113ae:	d0f6      	beq.n	801139e <__sflush_r+0xae>
 80113b0:	0793      	lsls	r3, r2, #30
 80113b2:	680e      	ldr	r6, [r1, #0]
 80113b4:	bf08      	it	eq
 80113b6:	694b      	ldreq	r3, [r1, #20]
 80113b8:	600f      	str	r7, [r1, #0]
 80113ba:	bf18      	it	ne
 80113bc:	2300      	movne	r3, #0
 80113be:	eba6 0807 	sub.w	r8, r6, r7
 80113c2:	608b      	str	r3, [r1, #8]
 80113c4:	f1b8 0f00 	cmp.w	r8, #0
 80113c8:	dde9      	ble.n	801139e <__sflush_r+0xae>
 80113ca:	6a21      	ldr	r1, [r4, #32]
 80113cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80113ce:	4643      	mov	r3, r8
 80113d0:	463a      	mov	r2, r7
 80113d2:	4628      	mov	r0, r5
 80113d4:	47b0      	blx	r6
 80113d6:	2800      	cmp	r0, #0
 80113d8:	dc08      	bgt.n	80113ec <__sflush_r+0xfc>
 80113da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80113e2:	81a3      	strh	r3, [r4, #12]
 80113e4:	f04f 30ff 	mov.w	r0, #4294967295
 80113e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113ec:	4407      	add	r7, r0
 80113ee:	eba8 0800 	sub.w	r8, r8, r0
 80113f2:	e7e7      	b.n	80113c4 <__sflush_r+0xd4>
 80113f4:	dfbffffe 	.word	0xdfbffffe

080113f8 <_fflush_r>:
 80113f8:	b538      	push	{r3, r4, r5, lr}
 80113fa:	690b      	ldr	r3, [r1, #16]
 80113fc:	4605      	mov	r5, r0
 80113fe:	460c      	mov	r4, r1
 8011400:	b913      	cbnz	r3, 8011408 <_fflush_r+0x10>
 8011402:	2500      	movs	r5, #0
 8011404:	4628      	mov	r0, r5
 8011406:	bd38      	pop	{r3, r4, r5, pc}
 8011408:	b118      	cbz	r0, 8011412 <_fflush_r+0x1a>
 801140a:	6a03      	ldr	r3, [r0, #32]
 801140c:	b90b      	cbnz	r3, 8011412 <_fflush_r+0x1a>
 801140e:	f7fd fb37 	bl	800ea80 <__sinit>
 8011412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d0f3      	beq.n	8011402 <_fflush_r+0xa>
 801141a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801141c:	07d0      	lsls	r0, r2, #31
 801141e:	d404      	bmi.n	801142a <_fflush_r+0x32>
 8011420:	0599      	lsls	r1, r3, #22
 8011422:	d402      	bmi.n	801142a <_fflush_r+0x32>
 8011424:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011426:	f7fd fc42 	bl	800ecae <__retarget_lock_acquire_recursive>
 801142a:	4628      	mov	r0, r5
 801142c:	4621      	mov	r1, r4
 801142e:	f7ff ff5f 	bl	80112f0 <__sflush_r>
 8011432:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011434:	07da      	lsls	r2, r3, #31
 8011436:	4605      	mov	r5, r0
 8011438:	d4e4      	bmi.n	8011404 <_fflush_r+0xc>
 801143a:	89a3      	ldrh	r3, [r4, #12]
 801143c:	059b      	lsls	r3, r3, #22
 801143e:	d4e1      	bmi.n	8011404 <_fflush_r+0xc>
 8011440:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011442:	f7fd fc35 	bl	800ecb0 <__retarget_lock_release_recursive>
 8011446:	e7dd      	b.n	8011404 <_fflush_r+0xc>

08011448 <memmove>:
 8011448:	4288      	cmp	r0, r1
 801144a:	b510      	push	{r4, lr}
 801144c:	eb01 0402 	add.w	r4, r1, r2
 8011450:	d902      	bls.n	8011458 <memmove+0x10>
 8011452:	4284      	cmp	r4, r0
 8011454:	4623      	mov	r3, r4
 8011456:	d807      	bhi.n	8011468 <memmove+0x20>
 8011458:	1e43      	subs	r3, r0, #1
 801145a:	42a1      	cmp	r1, r4
 801145c:	d008      	beq.n	8011470 <memmove+0x28>
 801145e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011462:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011466:	e7f8      	b.n	801145a <memmove+0x12>
 8011468:	4402      	add	r2, r0
 801146a:	4601      	mov	r1, r0
 801146c:	428a      	cmp	r2, r1
 801146e:	d100      	bne.n	8011472 <memmove+0x2a>
 8011470:	bd10      	pop	{r4, pc}
 8011472:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011476:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801147a:	e7f7      	b.n	801146c <memmove+0x24>

0801147c <strncmp>:
 801147c:	b510      	push	{r4, lr}
 801147e:	b16a      	cbz	r2, 801149c <strncmp+0x20>
 8011480:	3901      	subs	r1, #1
 8011482:	1884      	adds	r4, r0, r2
 8011484:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011488:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801148c:	429a      	cmp	r2, r3
 801148e:	d103      	bne.n	8011498 <strncmp+0x1c>
 8011490:	42a0      	cmp	r0, r4
 8011492:	d001      	beq.n	8011498 <strncmp+0x1c>
 8011494:	2a00      	cmp	r2, #0
 8011496:	d1f5      	bne.n	8011484 <strncmp+0x8>
 8011498:	1ad0      	subs	r0, r2, r3
 801149a:	bd10      	pop	{r4, pc}
 801149c:	4610      	mov	r0, r2
 801149e:	e7fc      	b.n	801149a <strncmp+0x1e>

080114a0 <_sbrk_r>:
 80114a0:	b538      	push	{r3, r4, r5, lr}
 80114a2:	4d06      	ldr	r5, [pc, #24]	@ (80114bc <_sbrk_r+0x1c>)
 80114a4:	2300      	movs	r3, #0
 80114a6:	4604      	mov	r4, r0
 80114a8:	4608      	mov	r0, r1
 80114aa:	602b      	str	r3, [r5, #0]
 80114ac:	f7f0 fa0c 	bl	80018c8 <_sbrk>
 80114b0:	1c43      	adds	r3, r0, #1
 80114b2:	d102      	bne.n	80114ba <_sbrk_r+0x1a>
 80114b4:	682b      	ldr	r3, [r5, #0]
 80114b6:	b103      	cbz	r3, 80114ba <_sbrk_r+0x1a>
 80114b8:	6023      	str	r3, [r4, #0]
 80114ba:	bd38      	pop	{r3, r4, r5, pc}
 80114bc:	24000570 	.word	0x24000570

080114c0 <memcpy>:
 80114c0:	440a      	add	r2, r1
 80114c2:	4291      	cmp	r1, r2
 80114c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80114c8:	d100      	bne.n	80114cc <memcpy+0xc>
 80114ca:	4770      	bx	lr
 80114cc:	b510      	push	{r4, lr}
 80114ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80114d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80114d6:	4291      	cmp	r1, r2
 80114d8:	d1f9      	bne.n	80114ce <memcpy+0xe>
 80114da:	bd10      	pop	{r4, pc}
 80114dc:	0000      	movs	r0, r0
	...

080114e0 <nan>:
 80114e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80114e8 <nan+0x8>
 80114e4:	4770      	bx	lr
 80114e6:	bf00      	nop
 80114e8:	00000000 	.word	0x00000000
 80114ec:	7ff80000 	.word	0x7ff80000

080114f0 <__assert_func>:
 80114f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80114f2:	4614      	mov	r4, r2
 80114f4:	461a      	mov	r2, r3
 80114f6:	4b09      	ldr	r3, [pc, #36]	@ (801151c <__assert_func+0x2c>)
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	4605      	mov	r5, r0
 80114fc:	68d8      	ldr	r0, [r3, #12]
 80114fe:	b954      	cbnz	r4, 8011516 <__assert_func+0x26>
 8011500:	4b07      	ldr	r3, [pc, #28]	@ (8011520 <__assert_func+0x30>)
 8011502:	461c      	mov	r4, r3
 8011504:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011508:	9100      	str	r1, [sp, #0]
 801150a:	462b      	mov	r3, r5
 801150c:	4905      	ldr	r1, [pc, #20]	@ (8011524 <__assert_func+0x34>)
 801150e:	f000 fba7 	bl	8011c60 <fiprintf>
 8011512:	f000 fbb7 	bl	8011c84 <abort>
 8011516:	4b04      	ldr	r3, [pc, #16]	@ (8011528 <__assert_func+0x38>)
 8011518:	e7f4      	b.n	8011504 <__assert_func+0x14>
 801151a:	bf00      	nop
 801151c:	2400001c 	.word	0x2400001c
 8011520:	08012c0d 	.word	0x08012c0d
 8011524:	08012bdf 	.word	0x08012bdf
 8011528:	08012bd2 	.word	0x08012bd2

0801152c <_calloc_r>:
 801152c:	b570      	push	{r4, r5, r6, lr}
 801152e:	fba1 5402 	umull	r5, r4, r1, r2
 8011532:	b93c      	cbnz	r4, 8011544 <_calloc_r+0x18>
 8011534:	4629      	mov	r1, r5
 8011536:	f7fe fa15 	bl	800f964 <_malloc_r>
 801153a:	4606      	mov	r6, r0
 801153c:	b928      	cbnz	r0, 801154a <_calloc_r+0x1e>
 801153e:	2600      	movs	r6, #0
 8011540:	4630      	mov	r0, r6
 8011542:	bd70      	pop	{r4, r5, r6, pc}
 8011544:	220c      	movs	r2, #12
 8011546:	6002      	str	r2, [r0, #0]
 8011548:	e7f9      	b.n	801153e <_calloc_r+0x12>
 801154a:	462a      	mov	r2, r5
 801154c:	4621      	mov	r1, r4
 801154e:	f7fd fb30 	bl	800ebb2 <memset>
 8011552:	e7f5      	b.n	8011540 <_calloc_r+0x14>

08011554 <rshift>:
 8011554:	6903      	ldr	r3, [r0, #16]
 8011556:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801155a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801155e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011562:	f100 0414 	add.w	r4, r0, #20
 8011566:	dd45      	ble.n	80115f4 <rshift+0xa0>
 8011568:	f011 011f 	ands.w	r1, r1, #31
 801156c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011570:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011574:	d10c      	bne.n	8011590 <rshift+0x3c>
 8011576:	f100 0710 	add.w	r7, r0, #16
 801157a:	4629      	mov	r1, r5
 801157c:	42b1      	cmp	r1, r6
 801157e:	d334      	bcc.n	80115ea <rshift+0x96>
 8011580:	1a9b      	subs	r3, r3, r2
 8011582:	009b      	lsls	r3, r3, #2
 8011584:	1eea      	subs	r2, r5, #3
 8011586:	4296      	cmp	r6, r2
 8011588:	bf38      	it	cc
 801158a:	2300      	movcc	r3, #0
 801158c:	4423      	add	r3, r4
 801158e:	e015      	b.n	80115bc <rshift+0x68>
 8011590:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011594:	f1c1 0820 	rsb	r8, r1, #32
 8011598:	40cf      	lsrs	r7, r1
 801159a:	f105 0e04 	add.w	lr, r5, #4
 801159e:	46a1      	mov	r9, r4
 80115a0:	4576      	cmp	r6, lr
 80115a2:	46f4      	mov	ip, lr
 80115a4:	d815      	bhi.n	80115d2 <rshift+0x7e>
 80115a6:	1a9a      	subs	r2, r3, r2
 80115a8:	0092      	lsls	r2, r2, #2
 80115aa:	3a04      	subs	r2, #4
 80115ac:	3501      	adds	r5, #1
 80115ae:	42ae      	cmp	r6, r5
 80115b0:	bf38      	it	cc
 80115b2:	2200      	movcc	r2, #0
 80115b4:	18a3      	adds	r3, r4, r2
 80115b6:	50a7      	str	r7, [r4, r2]
 80115b8:	b107      	cbz	r7, 80115bc <rshift+0x68>
 80115ba:	3304      	adds	r3, #4
 80115bc:	1b1a      	subs	r2, r3, r4
 80115be:	42a3      	cmp	r3, r4
 80115c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80115c4:	bf08      	it	eq
 80115c6:	2300      	moveq	r3, #0
 80115c8:	6102      	str	r2, [r0, #16]
 80115ca:	bf08      	it	eq
 80115cc:	6143      	streq	r3, [r0, #20]
 80115ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80115d2:	f8dc c000 	ldr.w	ip, [ip]
 80115d6:	fa0c fc08 	lsl.w	ip, ip, r8
 80115da:	ea4c 0707 	orr.w	r7, ip, r7
 80115de:	f849 7b04 	str.w	r7, [r9], #4
 80115e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80115e6:	40cf      	lsrs	r7, r1
 80115e8:	e7da      	b.n	80115a0 <rshift+0x4c>
 80115ea:	f851 cb04 	ldr.w	ip, [r1], #4
 80115ee:	f847 cf04 	str.w	ip, [r7, #4]!
 80115f2:	e7c3      	b.n	801157c <rshift+0x28>
 80115f4:	4623      	mov	r3, r4
 80115f6:	e7e1      	b.n	80115bc <rshift+0x68>

080115f8 <__hexdig_fun>:
 80115f8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80115fc:	2b09      	cmp	r3, #9
 80115fe:	d802      	bhi.n	8011606 <__hexdig_fun+0xe>
 8011600:	3820      	subs	r0, #32
 8011602:	b2c0      	uxtb	r0, r0
 8011604:	4770      	bx	lr
 8011606:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801160a:	2b05      	cmp	r3, #5
 801160c:	d801      	bhi.n	8011612 <__hexdig_fun+0x1a>
 801160e:	3847      	subs	r0, #71	@ 0x47
 8011610:	e7f7      	b.n	8011602 <__hexdig_fun+0xa>
 8011612:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8011616:	2b05      	cmp	r3, #5
 8011618:	d801      	bhi.n	801161e <__hexdig_fun+0x26>
 801161a:	3827      	subs	r0, #39	@ 0x27
 801161c:	e7f1      	b.n	8011602 <__hexdig_fun+0xa>
 801161e:	2000      	movs	r0, #0
 8011620:	4770      	bx	lr
	...

08011624 <__gethex>:
 8011624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011628:	b085      	sub	sp, #20
 801162a:	468a      	mov	sl, r1
 801162c:	9302      	str	r3, [sp, #8]
 801162e:	680b      	ldr	r3, [r1, #0]
 8011630:	9001      	str	r0, [sp, #4]
 8011632:	4690      	mov	r8, r2
 8011634:	1c9c      	adds	r4, r3, #2
 8011636:	46a1      	mov	r9, r4
 8011638:	f814 0b01 	ldrb.w	r0, [r4], #1
 801163c:	2830      	cmp	r0, #48	@ 0x30
 801163e:	d0fa      	beq.n	8011636 <__gethex+0x12>
 8011640:	eba9 0303 	sub.w	r3, r9, r3
 8011644:	f1a3 0b02 	sub.w	fp, r3, #2
 8011648:	f7ff ffd6 	bl	80115f8 <__hexdig_fun>
 801164c:	4605      	mov	r5, r0
 801164e:	2800      	cmp	r0, #0
 8011650:	d168      	bne.n	8011724 <__gethex+0x100>
 8011652:	49a0      	ldr	r1, [pc, #640]	@ (80118d4 <__gethex+0x2b0>)
 8011654:	2201      	movs	r2, #1
 8011656:	4648      	mov	r0, r9
 8011658:	f7ff ff10 	bl	801147c <strncmp>
 801165c:	4607      	mov	r7, r0
 801165e:	2800      	cmp	r0, #0
 8011660:	d167      	bne.n	8011732 <__gethex+0x10e>
 8011662:	f899 0001 	ldrb.w	r0, [r9, #1]
 8011666:	4626      	mov	r6, r4
 8011668:	f7ff ffc6 	bl	80115f8 <__hexdig_fun>
 801166c:	2800      	cmp	r0, #0
 801166e:	d062      	beq.n	8011736 <__gethex+0x112>
 8011670:	4623      	mov	r3, r4
 8011672:	7818      	ldrb	r0, [r3, #0]
 8011674:	2830      	cmp	r0, #48	@ 0x30
 8011676:	4699      	mov	r9, r3
 8011678:	f103 0301 	add.w	r3, r3, #1
 801167c:	d0f9      	beq.n	8011672 <__gethex+0x4e>
 801167e:	f7ff ffbb 	bl	80115f8 <__hexdig_fun>
 8011682:	fab0 f580 	clz	r5, r0
 8011686:	096d      	lsrs	r5, r5, #5
 8011688:	f04f 0b01 	mov.w	fp, #1
 801168c:	464a      	mov	r2, r9
 801168e:	4616      	mov	r6, r2
 8011690:	3201      	adds	r2, #1
 8011692:	7830      	ldrb	r0, [r6, #0]
 8011694:	f7ff ffb0 	bl	80115f8 <__hexdig_fun>
 8011698:	2800      	cmp	r0, #0
 801169a:	d1f8      	bne.n	801168e <__gethex+0x6a>
 801169c:	498d      	ldr	r1, [pc, #564]	@ (80118d4 <__gethex+0x2b0>)
 801169e:	2201      	movs	r2, #1
 80116a0:	4630      	mov	r0, r6
 80116a2:	f7ff feeb 	bl	801147c <strncmp>
 80116a6:	2800      	cmp	r0, #0
 80116a8:	d13f      	bne.n	801172a <__gethex+0x106>
 80116aa:	b944      	cbnz	r4, 80116be <__gethex+0x9a>
 80116ac:	1c74      	adds	r4, r6, #1
 80116ae:	4622      	mov	r2, r4
 80116b0:	4616      	mov	r6, r2
 80116b2:	3201      	adds	r2, #1
 80116b4:	7830      	ldrb	r0, [r6, #0]
 80116b6:	f7ff ff9f 	bl	80115f8 <__hexdig_fun>
 80116ba:	2800      	cmp	r0, #0
 80116bc:	d1f8      	bne.n	80116b0 <__gethex+0x8c>
 80116be:	1ba4      	subs	r4, r4, r6
 80116c0:	00a7      	lsls	r7, r4, #2
 80116c2:	7833      	ldrb	r3, [r6, #0]
 80116c4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80116c8:	2b50      	cmp	r3, #80	@ 0x50
 80116ca:	d13e      	bne.n	801174a <__gethex+0x126>
 80116cc:	7873      	ldrb	r3, [r6, #1]
 80116ce:	2b2b      	cmp	r3, #43	@ 0x2b
 80116d0:	d033      	beq.n	801173a <__gethex+0x116>
 80116d2:	2b2d      	cmp	r3, #45	@ 0x2d
 80116d4:	d034      	beq.n	8011740 <__gethex+0x11c>
 80116d6:	1c71      	adds	r1, r6, #1
 80116d8:	2400      	movs	r4, #0
 80116da:	7808      	ldrb	r0, [r1, #0]
 80116dc:	f7ff ff8c 	bl	80115f8 <__hexdig_fun>
 80116e0:	1e43      	subs	r3, r0, #1
 80116e2:	b2db      	uxtb	r3, r3
 80116e4:	2b18      	cmp	r3, #24
 80116e6:	d830      	bhi.n	801174a <__gethex+0x126>
 80116e8:	f1a0 0210 	sub.w	r2, r0, #16
 80116ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80116f0:	f7ff ff82 	bl	80115f8 <__hexdig_fun>
 80116f4:	f100 3cff 	add.w	ip, r0, #4294967295
 80116f8:	fa5f fc8c 	uxtb.w	ip, ip
 80116fc:	f1bc 0f18 	cmp.w	ip, #24
 8011700:	f04f 030a 	mov.w	r3, #10
 8011704:	d91e      	bls.n	8011744 <__gethex+0x120>
 8011706:	b104      	cbz	r4, 801170a <__gethex+0xe6>
 8011708:	4252      	negs	r2, r2
 801170a:	4417      	add	r7, r2
 801170c:	f8ca 1000 	str.w	r1, [sl]
 8011710:	b1ed      	cbz	r5, 801174e <__gethex+0x12a>
 8011712:	f1bb 0f00 	cmp.w	fp, #0
 8011716:	bf0c      	ite	eq
 8011718:	2506      	moveq	r5, #6
 801171a:	2500      	movne	r5, #0
 801171c:	4628      	mov	r0, r5
 801171e:	b005      	add	sp, #20
 8011720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011724:	2500      	movs	r5, #0
 8011726:	462c      	mov	r4, r5
 8011728:	e7b0      	b.n	801168c <__gethex+0x68>
 801172a:	2c00      	cmp	r4, #0
 801172c:	d1c7      	bne.n	80116be <__gethex+0x9a>
 801172e:	4627      	mov	r7, r4
 8011730:	e7c7      	b.n	80116c2 <__gethex+0x9e>
 8011732:	464e      	mov	r6, r9
 8011734:	462f      	mov	r7, r5
 8011736:	2501      	movs	r5, #1
 8011738:	e7c3      	b.n	80116c2 <__gethex+0x9e>
 801173a:	2400      	movs	r4, #0
 801173c:	1cb1      	adds	r1, r6, #2
 801173e:	e7cc      	b.n	80116da <__gethex+0xb6>
 8011740:	2401      	movs	r4, #1
 8011742:	e7fb      	b.n	801173c <__gethex+0x118>
 8011744:	fb03 0002 	mla	r0, r3, r2, r0
 8011748:	e7ce      	b.n	80116e8 <__gethex+0xc4>
 801174a:	4631      	mov	r1, r6
 801174c:	e7de      	b.n	801170c <__gethex+0xe8>
 801174e:	eba6 0309 	sub.w	r3, r6, r9
 8011752:	3b01      	subs	r3, #1
 8011754:	4629      	mov	r1, r5
 8011756:	2b07      	cmp	r3, #7
 8011758:	dc0a      	bgt.n	8011770 <__gethex+0x14c>
 801175a:	9801      	ldr	r0, [sp, #4]
 801175c:	f7fe f98e 	bl	800fa7c <_Balloc>
 8011760:	4604      	mov	r4, r0
 8011762:	b940      	cbnz	r0, 8011776 <__gethex+0x152>
 8011764:	4b5c      	ldr	r3, [pc, #368]	@ (80118d8 <__gethex+0x2b4>)
 8011766:	4602      	mov	r2, r0
 8011768:	21e4      	movs	r1, #228	@ 0xe4
 801176a:	485c      	ldr	r0, [pc, #368]	@ (80118dc <__gethex+0x2b8>)
 801176c:	f7ff fec0 	bl	80114f0 <__assert_func>
 8011770:	3101      	adds	r1, #1
 8011772:	105b      	asrs	r3, r3, #1
 8011774:	e7ef      	b.n	8011756 <__gethex+0x132>
 8011776:	f100 0a14 	add.w	sl, r0, #20
 801177a:	2300      	movs	r3, #0
 801177c:	4655      	mov	r5, sl
 801177e:	469b      	mov	fp, r3
 8011780:	45b1      	cmp	r9, r6
 8011782:	d337      	bcc.n	80117f4 <__gethex+0x1d0>
 8011784:	f845 bb04 	str.w	fp, [r5], #4
 8011788:	eba5 050a 	sub.w	r5, r5, sl
 801178c:	10ad      	asrs	r5, r5, #2
 801178e:	6125      	str	r5, [r4, #16]
 8011790:	4658      	mov	r0, fp
 8011792:	f7fe fa65 	bl	800fc60 <__hi0bits>
 8011796:	016d      	lsls	r5, r5, #5
 8011798:	f8d8 6000 	ldr.w	r6, [r8]
 801179c:	1a2d      	subs	r5, r5, r0
 801179e:	42b5      	cmp	r5, r6
 80117a0:	dd54      	ble.n	801184c <__gethex+0x228>
 80117a2:	1bad      	subs	r5, r5, r6
 80117a4:	4629      	mov	r1, r5
 80117a6:	4620      	mov	r0, r4
 80117a8:	f7fe fdf6 	bl	8010398 <__any_on>
 80117ac:	4681      	mov	r9, r0
 80117ae:	b178      	cbz	r0, 80117d0 <__gethex+0x1ac>
 80117b0:	1e6b      	subs	r3, r5, #1
 80117b2:	1159      	asrs	r1, r3, #5
 80117b4:	f003 021f 	and.w	r2, r3, #31
 80117b8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80117bc:	f04f 0901 	mov.w	r9, #1
 80117c0:	fa09 f202 	lsl.w	r2, r9, r2
 80117c4:	420a      	tst	r2, r1
 80117c6:	d003      	beq.n	80117d0 <__gethex+0x1ac>
 80117c8:	454b      	cmp	r3, r9
 80117ca:	dc36      	bgt.n	801183a <__gethex+0x216>
 80117cc:	f04f 0902 	mov.w	r9, #2
 80117d0:	4629      	mov	r1, r5
 80117d2:	4620      	mov	r0, r4
 80117d4:	f7ff febe 	bl	8011554 <rshift>
 80117d8:	442f      	add	r7, r5
 80117da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80117de:	42bb      	cmp	r3, r7
 80117e0:	da42      	bge.n	8011868 <__gethex+0x244>
 80117e2:	9801      	ldr	r0, [sp, #4]
 80117e4:	4621      	mov	r1, r4
 80117e6:	f7fe f989 	bl	800fafc <_Bfree>
 80117ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80117ec:	2300      	movs	r3, #0
 80117ee:	6013      	str	r3, [r2, #0]
 80117f0:	25a3      	movs	r5, #163	@ 0xa3
 80117f2:	e793      	b.n	801171c <__gethex+0xf8>
 80117f4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80117f8:	2a2e      	cmp	r2, #46	@ 0x2e
 80117fa:	d012      	beq.n	8011822 <__gethex+0x1fe>
 80117fc:	2b20      	cmp	r3, #32
 80117fe:	d104      	bne.n	801180a <__gethex+0x1e6>
 8011800:	f845 bb04 	str.w	fp, [r5], #4
 8011804:	f04f 0b00 	mov.w	fp, #0
 8011808:	465b      	mov	r3, fp
 801180a:	7830      	ldrb	r0, [r6, #0]
 801180c:	9303      	str	r3, [sp, #12]
 801180e:	f7ff fef3 	bl	80115f8 <__hexdig_fun>
 8011812:	9b03      	ldr	r3, [sp, #12]
 8011814:	f000 000f 	and.w	r0, r0, #15
 8011818:	4098      	lsls	r0, r3
 801181a:	ea4b 0b00 	orr.w	fp, fp, r0
 801181e:	3304      	adds	r3, #4
 8011820:	e7ae      	b.n	8011780 <__gethex+0x15c>
 8011822:	45b1      	cmp	r9, r6
 8011824:	d8ea      	bhi.n	80117fc <__gethex+0x1d8>
 8011826:	492b      	ldr	r1, [pc, #172]	@ (80118d4 <__gethex+0x2b0>)
 8011828:	9303      	str	r3, [sp, #12]
 801182a:	2201      	movs	r2, #1
 801182c:	4630      	mov	r0, r6
 801182e:	f7ff fe25 	bl	801147c <strncmp>
 8011832:	9b03      	ldr	r3, [sp, #12]
 8011834:	2800      	cmp	r0, #0
 8011836:	d1e1      	bne.n	80117fc <__gethex+0x1d8>
 8011838:	e7a2      	b.n	8011780 <__gethex+0x15c>
 801183a:	1ea9      	subs	r1, r5, #2
 801183c:	4620      	mov	r0, r4
 801183e:	f7fe fdab 	bl	8010398 <__any_on>
 8011842:	2800      	cmp	r0, #0
 8011844:	d0c2      	beq.n	80117cc <__gethex+0x1a8>
 8011846:	f04f 0903 	mov.w	r9, #3
 801184a:	e7c1      	b.n	80117d0 <__gethex+0x1ac>
 801184c:	da09      	bge.n	8011862 <__gethex+0x23e>
 801184e:	1b75      	subs	r5, r6, r5
 8011850:	4621      	mov	r1, r4
 8011852:	9801      	ldr	r0, [sp, #4]
 8011854:	462a      	mov	r2, r5
 8011856:	f7fe fb69 	bl	800ff2c <__lshift>
 801185a:	1b7f      	subs	r7, r7, r5
 801185c:	4604      	mov	r4, r0
 801185e:	f100 0a14 	add.w	sl, r0, #20
 8011862:	f04f 0900 	mov.w	r9, #0
 8011866:	e7b8      	b.n	80117da <__gethex+0x1b6>
 8011868:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801186c:	42bd      	cmp	r5, r7
 801186e:	dd6f      	ble.n	8011950 <__gethex+0x32c>
 8011870:	1bed      	subs	r5, r5, r7
 8011872:	42ae      	cmp	r6, r5
 8011874:	dc34      	bgt.n	80118e0 <__gethex+0x2bc>
 8011876:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801187a:	2b02      	cmp	r3, #2
 801187c:	d022      	beq.n	80118c4 <__gethex+0x2a0>
 801187e:	2b03      	cmp	r3, #3
 8011880:	d024      	beq.n	80118cc <__gethex+0x2a8>
 8011882:	2b01      	cmp	r3, #1
 8011884:	d115      	bne.n	80118b2 <__gethex+0x28e>
 8011886:	42ae      	cmp	r6, r5
 8011888:	d113      	bne.n	80118b2 <__gethex+0x28e>
 801188a:	2e01      	cmp	r6, #1
 801188c:	d10b      	bne.n	80118a6 <__gethex+0x282>
 801188e:	9a02      	ldr	r2, [sp, #8]
 8011890:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011894:	6013      	str	r3, [r2, #0]
 8011896:	2301      	movs	r3, #1
 8011898:	6123      	str	r3, [r4, #16]
 801189a:	f8ca 3000 	str.w	r3, [sl]
 801189e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80118a0:	2562      	movs	r5, #98	@ 0x62
 80118a2:	601c      	str	r4, [r3, #0]
 80118a4:	e73a      	b.n	801171c <__gethex+0xf8>
 80118a6:	1e71      	subs	r1, r6, #1
 80118a8:	4620      	mov	r0, r4
 80118aa:	f7fe fd75 	bl	8010398 <__any_on>
 80118ae:	2800      	cmp	r0, #0
 80118b0:	d1ed      	bne.n	801188e <__gethex+0x26a>
 80118b2:	9801      	ldr	r0, [sp, #4]
 80118b4:	4621      	mov	r1, r4
 80118b6:	f7fe f921 	bl	800fafc <_Bfree>
 80118ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80118bc:	2300      	movs	r3, #0
 80118be:	6013      	str	r3, [r2, #0]
 80118c0:	2550      	movs	r5, #80	@ 0x50
 80118c2:	e72b      	b.n	801171c <__gethex+0xf8>
 80118c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d1f3      	bne.n	80118b2 <__gethex+0x28e>
 80118ca:	e7e0      	b.n	801188e <__gethex+0x26a>
 80118cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d1dd      	bne.n	801188e <__gethex+0x26a>
 80118d2:	e7ee      	b.n	80118b2 <__gethex+0x28e>
 80118d4:	08012a60 	.word	0x08012a60
 80118d8:	080128f5 	.word	0x080128f5
 80118dc:	08012c0e 	.word	0x08012c0e
 80118e0:	1e6f      	subs	r7, r5, #1
 80118e2:	f1b9 0f00 	cmp.w	r9, #0
 80118e6:	d130      	bne.n	801194a <__gethex+0x326>
 80118e8:	b127      	cbz	r7, 80118f4 <__gethex+0x2d0>
 80118ea:	4639      	mov	r1, r7
 80118ec:	4620      	mov	r0, r4
 80118ee:	f7fe fd53 	bl	8010398 <__any_on>
 80118f2:	4681      	mov	r9, r0
 80118f4:	117a      	asrs	r2, r7, #5
 80118f6:	2301      	movs	r3, #1
 80118f8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80118fc:	f007 071f 	and.w	r7, r7, #31
 8011900:	40bb      	lsls	r3, r7
 8011902:	4213      	tst	r3, r2
 8011904:	4629      	mov	r1, r5
 8011906:	4620      	mov	r0, r4
 8011908:	bf18      	it	ne
 801190a:	f049 0902 	orrne.w	r9, r9, #2
 801190e:	f7ff fe21 	bl	8011554 <rshift>
 8011912:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8011916:	1b76      	subs	r6, r6, r5
 8011918:	2502      	movs	r5, #2
 801191a:	f1b9 0f00 	cmp.w	r9, #0
 801191e:	d047      	beq.n	80119b0 <__gethex+0x38c>
 8011920:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011924:	2b02      	cmp	r3, #2
 8011926:	d015      	beq.n	8011954 <__gethex+0x330>
 8011928:	2b03      	cmp	r3, #3
 801192a:	d017      	beq.n	801195c <__gethex+0x338>
 801192c:	2b01      	cmp	r3, #1
 801192e:	d109      	bne.n	8011944 <__gethex+0x320>
 8011930:	f019 0f02 	tst.w	r9, #2
 8011934:	d006      	beq.n	8011944 <__gethex+0x320>
 8011936:	f8da 3000 	ldr.w	r3, [sl]
 801193a:	ea49 0903 	orr.w	r9, r9, r3
 801193e:	f019 0f01 	tst.w	r9, #1
 8011942:	d10e      	bne.n	8011962 <__gethex+0x33e>
 8011944:	f045 0510 	orr.w	r5, r5, #16
 8011948:	e032      	b.n	80119b0 <__gethex+0x38c>
 801194a:	f04f 0901 	mov.w	r9, #1
 801194e:	e7d1      	b.n	80118f4 <__gethex+0x2d0>
 8011950:	2501      	movs	r5, #1
 8011952:	e7e2      	b.n	801191a <__gethex+0x2f6>
 8011954:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011956:	f1c3 0301 	rsb	r3, r3, #1
 801195a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801195c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801195e:	2b00      	cmp	r3, #0
 8011960:	d0f0      	beq.n	8011944 <__gethex+0x320>
 8011962:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011966:	f104 0314 	add.w	r3, r4, #20
 801196a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801196e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011972:	f04f 0c00 	mov.w	ip, #0
 8011976:	4618      	mov	r0, r3
 8011978:	f853 2b04 	ldr.w	r2, [r3], #4
 801197c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011980:	d01b      	beq.n	80119ba <__gethex+0x396>
 8011982:	3201      	adds	r2, #1
 8011984:	6002      	str	r2, [r0, #0]
 8011986:	2d02      	cmp	r5, #2
 8011988:	f104 0314 	add.w	r3, r4, #20
 801198c:	d13c      	bne.n	8011a08 <__gethex+0x3e4>
 801198e:	f8d8 2000 	ldr.w	r2, [r8]
 8011992:	3a01      	subs	r2, #1
 8011994:	42b2      	cmp	r2, r6
 8011996:	d109      	bne.n	80119ac <__gethex+0x388>
 8011998:	1171      	asrs	r1, r6, #5
 801199a:	2201      	movs	r2, #1
 801199c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80119a0:	f006 061f 	and.w	r6, r6, #31
 80119a4:	fa02 f606 	lsl.w	r6, r2, r6
 80119a8:	421e      	tst	r6, r3
 80119aa:	d13a      	bne.n	8011a22 <__gethex+0x3fe>
 80119ac:	f045 0520 	orr.w	r5, r5, #32
 80119b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80119b2:	601c      	str	r4, [r3, #0]
 80119b4:	9b02      	ldr	r3, [sp, #8]
 80119b6:	601f      	str	r7, [r3, #0]
 80119b8:	e6b0      	b.n	801171c <__gethex+0xf8>
 80119ba:	4299      	cmp	r1, r3
 80119bc:	f843 cc04 	str.w	ip, [r3, #-4]
 80119c0:	d8d9      	bhi.n	8011976 <__gethex+0x352>
 80119c2:	68a3      	ldr	r3, [r4, #8]
 80119c4:	459b      	cmp	fp, r3
 80119c6:	db17      	blt.n	80119f8 <__gethex+0x3d4>
 80119c8:	6861      	ldr	r1, [r4, #4]
 80119ca:	9801      	ldr	r0, [sp, #4]
 80119cc:	3101      	adds	r1, #1
 80119ce:	f7fe f855 	bl	800fa7c <_Balloc>
 80119d2:	4681      	mov	r9, r0
 80119d4:	b918      	cbnz	r0, 80119de <__gethex+0x3ba>
 80119d6:	4b1a      	ldr	r3, [pc, #104]	@ (8011a40 <__gethex+0x41c>)
 80119d8:	4602      	mov	r2, r0
 80119da:	2184      	movs	r1, #132	@ 0x84
 80119dc:	e6c5      	b.n	801176a <__gethex+0x146>
 80119de:	6922      	ldr	r2, [r4, #16]
 80119e0:	3202      	adds	r2, #2
 80119e2:	f104 010c 	add.w	r1, r4, #12
 80119e6:	0092      	lsls	r2, r2, #2
 80119e8:	300c      	adds	r0, #12
 80119ea:	f7ff fd69 	bl	80114c0 <memcpy>
 80119ee:	4621      	mov	r1, r4
 80119f0:	9801      	ldr	r0, [sp, #4]
 80119f2:	f7fe f883 	bl	800fafc <_Bfree>
 80119f6:	464c      	mov	r4, r9
 80119f8:	6923      	ldr	r3, [r4, #16]
 80119fa:	1c5a      	adds	r2, r3, #1
 80119fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011a00:	6122      	str	r2, [r4, #16]
 8011a02:	2201      	movs	r2, #1
 8011a04:	615a      	str	r2, [r3, #20]
 8011a06:	e7be      	b.n	8011986 <__gethex+0x362>
 8011a08:	6922      	ldr	r2, [r4, #16]
 8011a0a:	455a      	cmp	r2, fp
 8011a0c:	dd0b      	ble.n	8011a26 <__gethex+0x402>
 8011a0e:	2101      	movs	r1, #1
 8011a10:	4620      	mov	r0, r4
 8011a12:	f7ff fd9f 	bl	8011554 <rshift>
 8011a16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011a1a:	3701      	adds	r7, #1
 8011a1c:	42bb      	cmp	r3, r7
 8011a1e:	f6ff aee0 	blt.w	80117e2 <__gethex+0x1be>
 8011a22:	2501      	movs	r5, #1
 8011a24:	e7c2      	b.n	80119ac <__gethex+0x388>
 8011a26:	f016 061f 	ands.w	r6, r6, #31
 8011a2a:	d0fa      	beq.n	8011a22 <__gethex+0x3fe>
 8011a2c:	4453      	add	r3, sl
 8011a2e:	f1c6 0620 	rsb	r6, r6, #32
 8011a32:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011a36:	f7fe f913 	bl	800fc60 <__hi0bits>
 8011a3a:	42b0      	cmp	r0, r6
 8011a3c:	dbe7      	blt.n	8011a0e <__gethex+0x3ea>
 8011a3e:	e7f0      	b.n	8011a22 <__gethex+0x3fe>
 8011a40:	080128f5 	.word	0x080128f5

08011a44 <L_shift>:
 8011a44:	f1c2 0208 	rsb	r2, r2, #8
 8011a48:	0092      	lsls	r2, r2, #2
 8011a4a:	b570      	push	{r4, r5, r6, lr}
 8011a4c:	f1c2 0620 	rsb	r6, r2, #32
 8011a50:	6843      	ldr	r3, [r0, #4]
 8011a52:	6804      	ldr	r4, [r0, #0]
 8011a54:	fa03 f506 	lsl.w	r5, r3, r6
 8011a58:	432c      	orrs	r4, r5
 8011a5a:	40d3      	lsrs	r3, r2
 8011a5c:	6004      	str	r4, [r0, #0]
 8011a5e:	f840 3f04 	str.w	r3, [r0, #4]!
 8011a62:	4288      	cmp	r0, r1
 8011a64:	d3f4      	bcc.n	8011a50 <L_shift+0xc>
 8011a66:	bd70      	pop	{r4, r5, r6, pc}

08011a68 <__match>:
 8011a68:	b530      	push	{r4, r5, lr}
 8011a6a:	6803      	ldr	r3, [r0, #0]
 8011a6c:	3301      	adds	r3, #1
 8011a6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011a72:	b914      	cbnz	r4, 8011a7a <__match+0x12>
 8011a74:	6003      	str	r3, [r0, #0]
 8011a76:	2001      	movs	r0, #1
 8011a78:	bd30      	pop	{r4, r5, pc}
 8011a7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a7e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011a82:	2d19      	cmp	r5, #25
 8011a84:	bf98      	it	ls
 8011a86:	3220      	addls	r2, #32
 8011a88:	42a2      	cmp	r2, r4
 8011a8a:	d0f0      	beq.n	8011a6e <__match+0x6>
 8011a8c:	2000      	movs	r0, #0
 8011a8e:	e7f3      	b.n	8011a78 <__match+0x10>

08011a90 <__hexnan>:
 8011a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a94:	680b      	ldr	r3, [r1, #0]
 8011a96:	6801      	ldr	r1, [r0, #0]
 8011a98:	115e      	asrs	r6, r3, #5
 8011a9a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011a9e:	f013 031f 	ands.w	r3, r3, #31
 8011aa2:	b087      	sub	sp, #28
 8011aa4:	bf18      	it	ne
 8011aa6:	3604      	addne	r6, #4
 8011aa8:	2500      	movs	r5, #0
 8011aaa:	1f37      	subs	r7, r6, #4
 8011aac:	4682      	mov	sl, r0
 8011aae:	4690      	mov	r8, r2
 8011ab0:	9301      	str	r3, [sp, #4]
 8011ab2:	f846 5c04 	str.w	r5, [r6, #-4]
 8011ab6:	46b9      	mov	r9, r7
 8011ab8:	463c      	mov	r4, r7
 8011aba:	9502      	str	r5, [sp, #8]
 8011abc:	46ab      	mov	fp, r5
 8011abe:	784a      	ldrb	r2, [r1, #1]
 8011ac0:	1c4b      	adds	r3, r1, #1
 8011ac2:	9303      	str	r3, [sp, #12]
 8011ac4:	b342      	cbz	r2, 8011b18 <__hexnan+0x88>
 8011ac6:	4610      	mov	r0, r2
 8011ac8:	9105      	str	r1, [sp, #20]
 8011aca:	9204      	str	r2, [sp, #16]
 8011acc:	f7ff fd94 	bl	80115f8 <__hexdig_fun>
 8011ad0:	2800      	cmp	r0, #0
 8011ad2:	d151      	bne.n	8011b78 <__hexnan+0xe8>
 8011ad4:	9a04      	ldr	r2, [sp, #16]
 8011ad6:	9905      	ldr	r1, [sp, #20]
 8011ad8:	2a20      	cmp	r2, #32
 8011ada:	d818      	bhi.n	8011b0e <__hexnan+0x7e>
 8011adc:	9b02      	ldr	r3, [sp, #8]
 8011ade:	459b      	cmp	fp, r3
 8011ae0:	dd13      	ble.n	8011b0a <__hexnan+0x7a>
 8011ae2:	454c      	cmp	r4, r9
 8011ae4:	d206      	bcs.n	8011af4 <__hexnan+0x64>
 8011ae6:	2d07      	cmp	r5, #7
 8011ae8:	dc04      	bgt.n	8011af4 <__hexnan+0x64>
 8011aea:	462a      	mov	r2, r5
 8011aec:	4649      	mov	r1, r9
 8011aee:	4620      	mov	r0, r4
 8011af0:	f7ff ffa8 	bl	8011a44 <L_shift>
 8011af4:	4544      	cmp	r4, r8
 8011af6:	d952      	bls.n	8011b9e <__hexnan+0x10e>
 8011af8:	2300      	movs	r3, #0
 8011afa:	f1a4 0904 	sub.w	r9, r4, #4
 8011afe:	f844 3c04 	str.w	r3, [r4, #-4]
 8011b02:	f8cd b008 	str.w	fp, [sp, #8]
 8011b06:	464c      	mov	r4, r9
 8011b08:	461d      	mov	r5, r3
 8011b0a:	9903      	ldr	r1, [sp, #12]
 8011b0c:	e7d7      	b.n	8011abe <__hexnan+0x2e>
 8011b0e:	2a29      	cmp	r2, #41	@ 0x29
 8011b10:	d157      	bne.n	8011bc2 <__hexnan+0x132>
 8011b12:	3102      	adds	r1, #2
 8011b14:	f8ca 1000 	str.w	r1, [sl]
 8011b18:	f1bb 0f00 	cmp.w	fp, #0
 8011b1c:	d051      	beq.n	8011bc2 <__hexnan+0x132>
 8011b1e:	454c      	cmp	r4, r9
 8011b20:	d206      	bcs.n	8011b30 <__hexnan+0xa0>
 8011b22:	2d07      	cmp	r5, #7
 8011b24:	dc04      	bgt.n	8011b30 <__hexnan+0xa0>
 8011b26:	462a      	mov	r2, r5
 8011b28:	4649      	mov	r1, r9
 8011b2a:	4620      	mov	r0, r4
 8011b2c:	f7ff ff8a 	bl	8011a44 <L_shift>
 8011b30:	4544      	cmp	r4, r8
 8011b32:	d936      	bls.n	8011ba2 <__hexnan+0x112>
 8011b34:	f1a8 0204 	sub.w	r2, r8, #4
 8011b38:	4623      	mov	r3, r4
 8011b3a:	f853 1b04 	ldr.w	r1, [r3], #4
 8011b3e:	f842 1f04 	str.w	r1, [r2, #4]!
 8011b42:	429f      	cmp	r7, r3
 8011b44:	d2f9      	bcs.n	8011b3a <__hexnan+0xaa>
 8011b46:	1b3b      	subs	r3, r7, r4
 8011b48:	f023 0303 	bic.w	r3, r3, #3
 8011b4c:	3304      	adds	r3, #4
 8011b4e:	3401      	adds	r4, #1
 8011b50:	3e03      	subs	r6, #3
 8011b52:	42b4      	cmp	r4, r6
 8011b54:	bf88      	it	hi
 8011b56:	2304      	movhi	r3, #4
 8011b58:	4443      	add	r3, r8
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	f843 2b04 	str.w	r2, [r3], #4
 8011b60:	429f      	cmp	r7, r3
 8011b62:	d2fb      	bcs.n	8011b5c <__hexnan+0xcc>
 8011b64:	683b      	ldr	r3, [r7, #0]
 8011b66:	b91b      	cbnz	r3, 8011b70 <__hexnan+0xe0>
 8011b68:	4547      	cmp	r7, r8
 8011b6a:	d128      	bne.n	8011bbe <__hexnan+0x12e>
 8011b6c:	2301      	movs	r3, #1
 8011b6e:	603b      	str	r3, [r7, #0]
 8011b70:	2005      	movs	r0, #5
 8011b72:	b007      	add	sp, #28
 8011b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b78:	3501      	adds	r5, #1
 8011b7a:	2d08      	cmp	r5, #8
 8011b7c:	f10b 0b01 	add.w	fp, fp, #1
 8011b80:	dd06      	ble.n	8011b90 <__hexnan+0x100>
 8011b82:	4544      	cmp	r4, r8
 8011b84:	d9c1      	bls.n	8011b0a <__hexnan+0x7a>
 8011b86:	2300      	movs	r3, #0
 8011b88:	f844 3c04 	str.w	r3, [r4, #-4]
 8011b8c:	2501      	movs	r5, #1
 8011b8e:	3c04      	subs	r4, #4
 8011b90:	6822      	ldr	r2, [r4, #0]
 8011b92:	f000 000f 	and.w	r0, r0, #15
 8011b96:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011b9a:	6020      	str	r0, [r4, #0]
 8011b9c:	e7b5      	b.n	8011b0a <__hexnan+0x7a>
 8011b9e:	2508      	movs	r5, #8
 8011ba0:	e7b3      	b.n	8011b0a <__hexnan+0x7a>
 8011ba2:	9b01      	ldr	r3, [sp, #4]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d0dd      	beq.n	8011b64 <__hexnan+0xd4>
 8011ba8:	f1c3 0320 	rsb	r3, r3, #32
 8011bac:	f04f 32ff 	mov.w	r2, #4294967295
 8011bb0:	40da      	lsrs	r2, r3
 8011bb2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011bb6:	4013      	ands	r3, r2
 8011bb8:	f846 3c04 	str.w	r3, [r6, #-4]
 8011bbc:	e7d2      	b.n	8011b64 <__hexnan+0xd4>
 8011bbe:	3f04      	subs	r7, #4
 8011bc0:	e7d0      	b.n	8011b64 <__hexnan+0xd4>
 8011bc2:	2004      	movs	r0, #4
 8011bc4:	e7d5      	b.n	8011b72 <__hexnan+0xe2>

08011bc6 <__ascii_mbtowc>:
 8011bc6:	b082      	sub	sp, #8
 8011bc8:	b901      	cbnz	r1, 8011bcc <__ascii_mbtowc+0x6>
 8011bca:	a901      	add	r1, sp, #4
 8011bcc:	b142      	cbz	r2, 8011be0 <__ascii_mbtowc+0x1a>
 8011bce:	b14b      	cbz	r3, 8011be4 <__ascii_mbtowc+0x1e>
 8011bd0:	7813      	ldrb	r3, [r2, #0]
 8011bd2:	600b      	str	r3, [r1, #0]
 8011bd4:	7812      	ldrb	r2, [r2, #0]
 8011bd6:	1e10      	subs	r0, r2, #0
 8011bd8:	bf18      	it	ne
 8011bda:	2001      	movne	r0, #1
 8011bdc:	b002      	add	sp, #8
 8011bde:	4770      	bx	lr
 8011be0:	4610      	mov	r0, r2
 8011be2:	e7fb      	b.n	8011bdc <__ascii_mbtowc+0x16>
 8011be4:	f06f 0001 	mvn.w	r0, #1
 8011be8:	e7f8      	b.n	8011bdc <__ascii_mbtowc+0x16>

08011bea <_realloc_r>:
 8011bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bee:	4680      	mov	r8, r0
 8011bf0:	4615      	mov	r5, r2
 8011bf2:	460c      	mov	r4, r1
 8011bf4:	b921      	cbnz	r1, 8011c00 <_realloc_r+0x16>
 8011bf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011bfa:	4611      	mov	r1, r2
 8011bfc:	f7fd beb2 	b.w	800f964 <_malloc_r>
 8011c00:	b92a      	cbnz	r2, 8011c0e <_realloc_r+0x24>
 8011c02:	f7fd fe3b 	bl	800f87c <_free_r>
 8011c06:	2400      	movs	r4, #0
 8011c08:	4620      	mov	r0, r4
 8011c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c0e:	f000 f840 	bl	8011c92 <_malloc_usable_size_r>
 8011c12:	4285      	cmp	r5, r0
 8011c14:	4606      	mov	r6, r0
 8011c16:	d802      	bhi.n	8011c1e <_realloc_r+0x34>
 8011c18:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011c1c:	d8f4      	bhi.n	8011c08 <_realloc_r+0x1e>
 8011c1e:	4629      	mov	r1, r5
 8011c20:	4640      	mov	r0, r8
 8011c22:	f7fd fe9f 	bl	800f964 <_malloc_r>
 8011c26:	4607      	mov	r7, r0
 8011c28:	2800      	cmp	r0, #0
 8011c2a:	d0ec      	beq.n	8011c06 <_realloc_r+0x1c>
 8011c2c:	42b5      	cmp	r5, r6
 8011c2e:	462a      	mov	r2, r5
 8011c30:	4621      	mov	r1, r4
 8011c32:	bf28      	it	cs
 8011c34:	4632      	movcs	r2, r6
 8011c36:	f7ff fc43 	bl	80114c0 <memcpy>
 8011c3a:	4621      	mov	r1, r4
 8011c3c:	4640      	mov	r0, r8
 8011c3e:	f7fd fe1d 	bl	800f87c <_free_r>
 8011c42:	463c      	mov	r4, r7
 8011c44:	e7e0      	b.n	8011c08 <_realloc_r+0x1e>

08011c46 <__ascii_wctomb>:
 8011c46:	4603      	mov	r3, r0
 8011c48:	4608      	mov	r0, r1
 8011c4a:	b141      	cbz	r1, 8011c5e <__ascii_wctomb+0x18>
 8011c4c:	2aff      	cmp	r2, #255	@ 0xff
 8011c4e:	d904      	bls.n	8011c5a <__ascii_wctomb+0x14>
 8011c50:	228a      	movs	r2, #138	@ 0x8a
 8011c52:	601a      	str	r2, [r3, #0]
 8011c54:	f04f 30ff 	mov.w	r0, #4294967295
 8011c58:	4770      	bx	lr
 8011c5a:	700a      	strb	r2, [r1, #0]
 8011c5c:	2001      	movs	r0, #1
 8011c5e:	4770      	bx	lr

08011c60 <fiprintf>:
 8011c60:	b40e      	push	{r1, r2, r3}
 8011c62:	b503      	push	{r0, r1, lr}
 8011c64:	4601      	mov	r1, r0
 8011c66:	ab03      	add	r3, sp, #12
 8011c68:	4805      	ldr	r0, [pc, #20]	@ (8011c80 <fiprintf+0x20>)
 8011c6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c6e:	6800      	ldr	r0, [r0, #0]
 8011c70:	9301      	str	r3, [sp, #4]
 8011c72:	f000 f83f 	bl	8011cf4 <_vfiprintf_r>
 8011c76:	b002      	add	sp, #8
 8011c78:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c7c:	b003      	add	sp, #12
 8011c7e:	4770      	bx	lr
 8011c80:	2400001c 	.word	0x2400001c

08011c84 <abort>:
 8011c84:	b508      	push	{r3, lr}
 8011c86:	2006      	movs	r0, #6
 8011c88:	f000 fa08 	bl	801209c <raise>
 8011c8c:	2001      	movs	r0, #1
 8011c8e:	f7ef fda3 	bl	80017d8 <_exit>

08011c92 <_malloc_usable_size_r>:
 8011c92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011c96:	1f18      	subs	r0, r3, #4
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	bfbc      	itt	lt
 8011c9c:	580b      	ldrlt	r3, [r1, r0]
 8011c9e:	18c0      	addlt	r0, r0, r3
 8011ca0:	4770      	bx	lr

08011ca2 <__sfputc_r>:
 8011ca2:	6893      	ldr	r3, [r2, #8]
 8011ca4:	3b01      	subs	r3, #1
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	b410      	push	{r4}
 8011caa:	6093      	str	r3, [r2, #8]
 8011cac:	da08      	bge.n	8011cc0 <__sfputc_r+0x1e>
 8011cae:	6994      	ldr	r4, [r2, #24]
 8011cb0:	42a3      	cmp	r3, r4
 8011cb2:	db01      	blt.n	8011cb8 <__sfputc_r+0x16>
 8011cb4:	290a      	cmp	r1, #10
 8011cb6:	d103      	bne.n	8011cc0 <__sfputc_r+0x1e>
 8011cb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011cbc:	f000 b932 	b.w	8011f24 <__swbuf_r>
 8011cc0:	6813      	ldr	r3, [r2, #0]
 8011cc2:	1c58      	adds	r0, r3, #1
 8011cc4:	6010      	str	r0, [r2, #0]
 8011cc6:	7019      	strb	r1, [r3, #0]
 8011cc8:	4608      	mov	r0, r1
 8011cca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011cce:	4770      	bx	lr

08011cd0 <__sfputs_r>:
 8011cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cd2:	4606      	mov	r6, r0
 8011cd4:	460f      	mov	r7, r1
 8011cd6:	4614      	mov	r4, r2
 8011cd8:	18d5      	adds	r5, r2, r3
 8011cda:	42ac      	cmp	r4, r5
 8011cdc:	d101      	bne.n	8011ce2 <__sfputs_r+0x12>
 8011cde:	2000      	movs	r0, #0
 8011ce0:	e007      	b.n	8011cf2 <__sfputs_r+0x22>
 8011ce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ce6:	463a      	mov	r2, r7
 8011ce8:	4630      	mov	r0, r6
 8011cea:	f7ff ffda 	bl	8011ca2 <__sfputc_r>
 8011cee:	1c43      	adds	r3, r0, #1
 8011cf0:	d1f3      	bne.n	8011cda <__sfputs_r+0xa>
 8011cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011cf4 <_vfiprintf_r>:
 8011cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cf8:	460d      	mov	r5, r1
 8011cfa:	b09d      	sub	sp, #116	@ 0x74
 8011cfc:	4614      	mov	r4, r2
 8011cfe:	4698      	mov	r8, r3
 8011d00:	4606      	mov	r6, r0
 8011d02:	b118      	cbz	r0, 8011d0c <_vfiprintf_r+0x18>
 8011d04:	6a03      	ldr	r3, [r0, #32]
 8011d06:	b90b      	cbnz	r3, 8011d0c <_vfiprintf_r+0x18>
 8011d08:	f7fc feba 	bl	800ea80 <__sinit>
 8011d0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011d0e:	07d9      	lsls	r1, r3, #31
 8011d10:	d405      	bmi.n	8011d1e <_vfiprintf_r+0x2a>
 8011d12:	89ab      	ldrh	r3, [r5, #12]
 8011d14:	059a      	lsls	r2, r3, #22
 8011d16:	d402      	bmi.n	8011d1e <_vfiprintf_r+0x2a>
 8011d18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011d1a:	f7fc ffc8 	bl	800ecae <__retarget_lock_acquire_recursive>
 8011d1e:	89ab      	ldrh	r3, [r5, #12]
 8011d20:	071b      	lsls	r3, r3, #28
 8011d22:	d501      	bpl.n	8011d28 <_vfiprintf_r+0x34>
 8011d24:	692b      	ldr	r3, [r5, #16]
 8011d26:	b99b      	cbnz	r3, 8011d50 <_vfiprintf_r+0x5c>
 8011d28:	4629      	mov	r1, r5
 8011d2a:	4630      	mov	r0, r6
 8011d2c:	f000 f938 	bl	8011fa0 <__swsetup_r>
 8011d30:	b170      	cbz	r0, 8011d50 <_vfiprintf_r+0x5c>
 8011d32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011d34:	07dc      	lsls	r4, r3, #31
 8011d36:	d504      	bpl.n	8011d42 <_vfiprintf_r+0x4e>
 8011d38:	f04f 30ff 	mov.w	r0, #4294967295
 8011d3c:	b01d      	add	sp, #116	@ 0x74
 8011d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d42:	89ab      	ldrh	r3, [r5, #12]
 8011d44:	0598      	lsls	r0, r3, #22
 8011d46:	d4f7      	bmi.n	8011d38 <_vfiprintf_r+0x44>
 8011d48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011d4a:	f7fc ffb1 	bl	800ecb0 <__retarget_lock_release_recursive>
 8011d4e:	e7f3      	b.n	8011d38 <_vfiprintf_r+0x44>
 8011d50:	2300      	movs	r3, #0
 8011d52:	9309      	str	r3, [sp, #36]	@ 0x24
 8011d54:	2320      	movs	r3, #32
 8011d56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011d5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d5e:	2330      	movs	r3, #48	@ 0x30
 8011d60:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011f10 <_vfiprintf_r+0x21c>
 8011d64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011d68:	f04f 0901 	mov.w	r9, #1
 8011d6c:	4623      	mov	r3, r4
 8011d6e:	469a      	mov	sl, r3
 8011d70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d74:	b10a      	cbz	r2, 8011d7a <_vfiprintf_r+0x86>
 8011d76:	2a25      	cmp	r2, #37	@ 0x25
 8011d78:	d1f9      	bne.n	8011d6e <_vfiprintf_r+0x7a>
 8011d7a:	ebba 0b04 	subs.w	fp, sl, r4
 8011d7e:	d00b      	beq.n	8011d98 <_vfiprintf_r+0xa4>
 8011d80:	465b      	mov	r3, fp
 8011d82:	4622      	mov	r2, r4
 8011d84:	4629      	mov	r1, r5
 8011d86:	4630      	mov	r0, r6
 8011d88:	f7ff ffa2 	bl	8011cd0 <__sfputs_r>
 8011d8c:	3001      	adds	r0, #1
 8011d8e:	f000 80a7 	beq.w	8011ee0 <_vfiprintf_r+0x1ec>
 8011d92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011d94:	445a      	add	r2, fp
 8011d96:	9209      	str	r2, [sp, #36]	@ 0x24
 8011d98:	f89a 3000 	ldrb.w	r3, [sl]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	f000 809f 	beq.w	8011ee0 <_vfiprintf_r+0x1ec>
 8011da2:	2300      	movs	r3, #0
 8011da4:	f04f 32ff 	mov.w	r2, #4294967295
 8011da8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011dac:	f10a 0a01 	add.w	sl, sl, #1
 8011db0:	9304      	str	r3, [sp, #16]
 8011db2:	9307      	str	r3, [sp, #28]
 8011db4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011db8:	931a      	str	r3, [sp, #104]	@ 0x68
 8011dba:	4654      	mov	r4, sl
 8011dbc:	2205      	movs	r2, #5
 8011dbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011dc2:	4853      	ldr	r0, [pc, #332]	@ (8011f10 <_vfiprintf_r+0x21c>)
 8011dc4:	f7ee fa8c 	bl	80002e0 <memchr>
 8011dc8:	9a04      	ldr	r2, [sp, #16]
 8011dca:	b9d8      	cbnz	r0, 8011e04 <_vfiprintf_r+0x110>
 8011dcc:	06d1      	lsls	r1, r2, #27
 8011dce:	bf44      	itt	mi
 8011dd0:	2320      	movmi	r3, #32
 8011dd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011dd6:	0713      	lsls	r3, r2, #28
 8011dd8:	bf44      	itt	mi
 8011dda:	232b      	movmi	r3, #43	@ 0x2b
 8011ddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011de0:	f89a 3000 	ldrb.w	r3, [sl]
 8011de4:	2b2a      	cmp	r3, #42	@ 0x2a
 8011de6:	d015      	beq.n	8011e14 <_vfiprintf_r+0x120>
 8011de8:	9a07      	ldr	r2, [sp, #28]
 8011dea:	4654      	mov	r4, sl
 8011dec:	2000      	movs	r0, #0
 8011dee:	f04f 0c0a 	mov.w	ip, #10
 8011df2:	4621      	mov	r1, r4
 8011df4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011df8:	3b30      	subs	r3, #48	@ 0x30
 8011dfa:	2b09      	cmp	r3, #9
 8011dfc:	d94b      	bls.n	8011e96 <_vfiprintf_r+0x1a2>
 8011dfe:	b1b0      	cbz	r0, 8011e2e <_vfiprintf_r+0x13a>
 8011e00:	9207      	str	r2, [sp, #28]
 8011e02:	e014      	b.n	8011e2e <_vfiprintf_r+0x13a>
 8011e04:	eba0 0308 	sub.w	r3, r0, r8
 8011e08:	fa09 f303 	lsl.w	r3, r9, r3
 8011e0c:	4313      	orrs	r3, r2
 8011e0e:	9304      	str	r3, [sp, #16]
 8011e10:	46a2      	mov	sl, r4
 8011e12:	e7d2      	b.n	8011dba <_vfiprintf_r+0xc6>
 8011e14:	9b03      	ldr	r3, [sp, #12]
 8011e16:	1d19      	adds	r1, r3, #4
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	9103      	str	r1, [sp, #12]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	bfbb      	ittet	lt
 8011e20:	425b      	neglt	r3, r3
 8011e22:	f042 0202 	orrlt.w	r2, r2, #2
 8011e26:	9307      	strge	r3, [sp, #28]
 8011e28:	9307      	strlt	r3, [sp, #28]
 8011e2a:	bfb8      	it	lt
 8011e2c:	9204      	strlt	r2, [sp, #16]
 8011e2e:	7823      	ldrb	r3, [r4, #0]
 8011e30:	2b2e      	cmp	r3, #46	@ 0x2e
 8011e32:	d10a      	bne.n	8011e4a <_vfiprintf_r+0x156>
 8011e34:	7863      	ldrb	r3, [r4, #1]
 8011e36:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e38:	d132      	bne.n	8011ea0 <_vfiprintf_r+0x1ac>
 8011e3a:	9b03      	ldr	r3, [sp, #12]
 8011e3c:	1d1a      	adds	r2, r3, #4
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	9203      	str	r2, [sp, #12]
 8011e42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011e46:	3402      	adds	r4, #2
 8011e48:	9305      	str	r3, [sp, #20]
 8011e4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011f20 <_vfiprintf_r+0x22c>
 8011e4e:	7821      	ldrb	r1, [r4, #0]
 8011e50:	2203      	movs	r2, #3
 8011e52:	4650      	mov	r0, sl
 8011e54:	f7ee fa44 	bl	80002e0 <memchr>
 8011e58:	b138      	cbz	r0, 8011e6a <_vfiprintf_r+0x176>
 8011e5a:	9b04      	ldr	r3, [sp, #16]
 8011e5c:	eba0 000a 	sub.w	r0, r0, sl
 8011e60:	2240      	movs	r2, #64	@ 0x40
 8011e62:	4082      	lsls	r2, r0
 8011e64:	4313      	orrs	r3, r2
 8011e66:	3401      	adds	r4, #1
 8011e68:	9304      	str	r3, [sp, #16]
 8011e6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e6e:	4829      	ldr	r0, [pc, #164]	@ (8011f14 <_vfiprintf_r+0x220>)
 8011e70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011e74:	2206      	movs	r2, #6
 8011e76:	f7ee fa33 	bl	80002e0 <memchr>
 8011e7a:	2800      	cmp	r0, #0
 8011e7c:	d03f      	beq.n	8011efe <_vfiprintf_r+0x20a>
 8011e7e:	4b26      	ldr	r3, [pc, #152]	@ (8011f18 <_vfiprintf_r+0x224>)
 8011e80:	bb1b      	cbnz	r3, 8011eca <_vfiprintf_r+0x1d6>
 8011e82:	9b03      	ldr	r3, [sp, #12]
 8011e84:	3307      	adds	r3, #7
 8011e86:	f023 0307 	bic.w	r3, r3, #7
 8011e8a:	3308      	adds	r3, #8
 8011e8c:	9303      	str	r3, [sp, #12]
 8011e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e90:	443b      	add	r3, r7
 8011e92:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e94:	e76a      	b.n	8011d6c <_vfiprintf_r+0x78>
 8011e96:	fb0c 3202 	mla	r2, ip, r2, r3
 8011e9a:	460c      	mov	r4, r1
 8011e9c:	2001      	movs	r0, #1
 8011e9e:	e7a8      	b.n	8011df2 <_vfiprintf_r+0xfe>
 8011ea0:	2300      	movs	r3, #0
 8011ea2:	3401      	adds	r4, #1
 8011ea4:	9305      	str	r3, [sp, #20]
 8011ea6:	4619      	mov	r1, r3
 8011ea8:	f04f 0c0a 	mov.w	ip, #10
 8011eac:	4620      	mov	r0, r4
 8011eae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011eb2:	3a30      	subs	r2, #48	@ 0x30
 8011eb4:	2a09      	cmp	r2, #9
 8011eb6:	d903      	bls.n	8011ec0 <_vfiprintf_r+0x1cc>
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d0c6      	beq.n	8011e4a <_vfiprintf_r+0x156>
 8011ebc:	9105      	str	r1, [sp, #20]
 8011ebe:	e7c4      	b.n	8011e4a <_vfiprintf_r+0x156>
 8011ec0:	fb0c 2101 	mla	r1, ip, r1, r2
 8011ec4:	4604      	mov	r4, r0
 8011ec6:	2301      	movs	r3, #1
 8011ec8:	e7f0      	b.n	8011eac <_vfiprintf_r+0x1b8>
 8011eca:	ab03      	add	r3, sp, #12
 8011ecc:	9300      	str	r3, [sp, #0]
 8011ece:	462a      	mov	r2, r5
 8011ed0:	4b12      	ldr	r3, [pc, #72]	@ (8011f1c <_vfiprintf_r+0x228>)
 8011ed2:	a904      	add	r1, sp, #16
 8011ed4:	4630      	mov	r0, r6
 8011ed6:	f7fb ff93 	bl	800de00 <_printf_float>
 8011eda:	4607      	mov	r7, r0
 8011edc:	1c78      	adds	r0, r7, #1
 8011ede:	d1d6      	bne.n	8011e8e <_vfiprintf_r+0x19a>
 8011ee0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011ee2:	07d9      	lsls	r1, r3, #31
 8011ee4:	d405      	bmi.n	8011ef2 <_vfiprintf_r+0x1fe>
 8011ee6:	89ab      	ldrh	r3, [r5, #12]
 8011ee8:	059a      	lsls	r2, r3, #22
 8011eea:	d402      	bmi.n	8011ef2 <_vfiprintf_r+0x1fe>
 8011eec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011eee:	f7fc fedf 	bl	800ecb0 <__retarget_lock_release_recursive>
 8011ef2:	89ab      	ldrh	r3, [r5, #12]
 8011ef4:	065b      	lsls	r3, r3, #25
 8011ef6:	f53f af1f 	bmi.w	8011d38 <_vfiprintf_r+0x44>
 8011efa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011efc:	e71e      	b.n	8011d3c <_vfiprintf_r+0x48>
 8011efe:	ab03      	add	r3, sp, #12
 8011f00:	9300      	str	r3, [sp, #0]
 8011f02:	462a      	mov	r2, r5
 8011f04:	4b05      	ldr	r3, [pc, #20]	@ (8011f1c <_vfiprintf_r+0x228>)
 8011f06:	a904      	add	r1, sp, #16
 8011f08:	4630      	mov	r0, r6
 8011f0a:	f7fc fa01 	bl	800e310 <_printf_i>
 8011f0e:	e7e4      	b.n	8011eda <_vfiprintf_r+0x1e6>
 8011f10:	08012bb9 	.word	0x08012bb9
 8011f14:	08012bc3 	.word	0x08012bc3
 8011f18:	0800de01 	.word	0x0800de01
 8011f1c:	08011cd1 	.word	0x08011cd1
 8011f20:	08012bbf 	.word	0x08012bbf

08011f24 <__swbuf_r>:
 8011f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f26:	460e      	mov	r6, r1
 8011f28:	4614      	mov	r4, r2
 8011f2a:	4605      	mov	r5, r0
 8011f2c:	b118      	cbz	r0, 8011f36 <__swbuf_r+0x12>
 8011f2e:	6a03      	ldr	r3, [r0, #32]
 8011f30:	b90b      	cbnz	r3, 8011f36 <__swbuf_r+0x12>
 8011f32:	f7fc fda5 	bl	800ea80 <__sinit>
 8011f36:	69a3      	ldr	r3, [r4, #24]
 8011f38:	60a3      	str	r3, [r4, #8]
 8011f3a:	89a3      	ldrh	r3, [r4, #12]
 8011f3c:	071a      	lsls	r2, r3, #28
 8011f3e:	d501      	bpl.n	8011f44 <__swbuf_r+0x20>
 8011f40:	6923      	ldr	r3, [r4, #16]
 8011f42:	b943      	cbnz	r3, 8011f56 <__swbuf_r+0x32>
 8011f44:	4621      	mov	r1, r4
 8011f46:	4628      	mov	r0, r5
 8011f48:	f000 f82a 	bl	8011fa0 <__swsetup_r>
 8011f4c:	b118      	cbz	r0, 8011f56 <__swbuf_r+0x32>
 8011f4e:	f04f 37ff 	mov.w	r7, #4294967295
 8011f52:	4638      	mov	r0, r7
 8011f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f56:	6823      	ldr	r3, [r4, #0]
 8011f58:	6922      	ldr	r2, [r4, #16]
 8011f5a:	1a98      	subs	r0, r3, r2
 8011f5c:	6963      	ldr	r3, [r4, #20]
 8011f5e:	b2f6      	uxtb	r6, r6
 8011f60:	4283      	cmp	r3, r0
 8011f62:	4637      	mov	r7, r6
 8011f64:	dc05      	bgt.n	8011f72 <__swbuf_r+0x4e>
 8011f66:	4621      	mov	r1, r4
 8011f68:	4628      	mov	r0, r5
 8011f6a:	f7ff fa45 	bl	80113f8 <_fflush_r>
 8011f6e:	2800      	cmp	r0, #0
 8011f70:	d1ed      	bne.n	8011f4e <__swbuf_r+0x2a>
 8011f72:	68a3      	ldr	r3, [r4, #8]
 8011f74:	3b01      	subs	r3, #1
 8011f76:	60a3      	str	r3, [r4, #8]
 8011f78:	6823      	ldr	r3, [r4, #0]
 8011f7a:	1c5a      	adds	r2, r3, #1
 8011f7c:	6022      	str	r2, [r4, #0]
 8011f7e:	701e      	strb	r6, [r3, #0]
 8011f80:	6962      	ldr	r2, [r4, #20]
 8011f82:	1c43      	adds	r3, r0, #1
 8011f84:	429a      	cmp	r2, r3
 8011f86:	d004      	beq.n	8011f92 <__swbuf_r+0x6e>
 8011f88:	89a3      	ldrh	r3, [r4, #12]
 8011f8a:	07db      	lsls	r3, r3, #31
 8011f8c:	d5e1      	bpl.n	8011f52 <__swbuf_r+0x2e>
 8011f8e:	2e0a      	cmp	r6, #10
 8011f90:	d1df      	bne.n	8011f52 <__swbuf_r+0x2e>
 8011f92:	4621      	mov	r1, r4
 8011f94:	4628      	mov	r0, r5
 8011f96:	f7ff fa2f 	bl	80113f8 <_fflush_r>
 8011f9a:	2800      	cmp	r0, #0
 8011f9c:	d0d9      	beq.n	8011f52 <__swbuf_r+0x2e>
 8011f9e:	e7d6      	b.n	8011f4e <__swbuf_r+0x2a>

08011fa0 <__swsetup_r>:
 8011fa0:	b538      	push	{r3, r4, r5, lr}
 8011fa2:	4b29      	ldr	r3, [pc, #164]	@ (8012048 <__swsetup_r+0xa8>)
 8011fa4:	4605      	mov	r5, r0
 8011fa6:	6818      	ldr	r0, [r3, #0]
 8011fa8:	460c      	mov	r4, r1
 8011faa:	b118      	cbz	r0, 8011fb4 <__swsetup_r+0x14>
 8011fac:	6a03      	ldr	r3, [r0, #32]
 8011fae:	b90b      	cbnz	r3, 8011fb4 <__swsetup_r+0x14>
 8011fb0:	f7fc fd66 	bl	800ea80 <__sinit>
 8011fb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011fb8:	0719      	lsls	r1, r3, #28
 8011fba:	d422      	bmi.n	8012002 <__swsetup_r+0x62>
 8011fbc:	06da      	lsls	r2, r3, #27
 8011fbe:	d407      	bmi.n	8011fd0 <__swsetup_r+0x30>
 8011fc0:	2209      	movs	r2, #9
 8011fc2:	602a      	str	r2, [r5, #0]
 8011fc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011fc8:	81a3      	strh	r3, [r4, #12]
 8011fca:	f04f 30ff 	mov.w	r0, #4294967295
 8011fce:	e033      	b.n	8012038 <__swsetup_r+0x98>
 8011fd0:	0758      	lsls	r0, r3, #29
 8011fd2:	d512      	bpl.n	8011ffa <__swsetup_r+0x5a>
 8011fd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011fd6:	b141      	cbz	r1, 8011fea <__swsetup_r+0x4a>
 8011fd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011fdc:	4299      	cmp	r1, r3
 8011fde:	d002      	beq.n	8011fe6 <__swsetup_r+0x46>
 8011fe0:	4628      	mov	r0, r5
 8011fe2:	f7fd fc4b 	bl	800f87c <_free_r>
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	6363      	str	r3, [r4, #52]	@ 0x34
 8011fea:	89a3      	ldrh	r3, [r4, #12]
 8011fec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011ff0:	81a3      	strh	r3, [r4, #12]
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	6063      	str	r3, [r4, #4]
 8011ff6:	6923      	ldr	r3, [r4, #16]
 8011ff8:	6023      	str	r3, [r4, #0]
 8011ffa:	89a3      	ldrh	r3, [r4, #12]
 8011ffc:	f043 0308 	orr.w	r3, r3, #8
 8012000:	81a3      	strh	r3, [r4, #12]
 8012002:	6923      	ldr	r3, [r4, #16]
 8012004:	b94b      	cbnz	r3, 801201a <__swsetup_r+0x7a>
 8012006:	89a3      	ldrh	r3, [r4, #12]
 8012008:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801200c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012010:	d003      	beq.n	801201a <__swsetup_r+0x7a>
 8012012:	4621      	mov	r1, r4
 8012014:	4628      	mov	r0, r5
 8012016:	f000 f883 	bl	8012120 <__smakebuf_r>
 801201a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801201e:	f013 0201 	ands.w	r2, r3, #1
 8012022:	d00a      	beq.n	801203a <__swsetup_r+0x9a>
 8012024:	2200      	movs	r2, #0
 8012026:	60a2      	str	r2, [r4, #8]
 8012028:	6962      	ldr	r2, [r4, #20]
 801202a:	4252      	negs	r2, r2
 801202c:	61a2      	str	r2, [r4, #24]
 801202e:	6922      	ldr	r2, [r4, #16]
 8012030:	b942      	cbnz	r2, 8012044 <__swsetup_r+0xa4>
 8012032:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012036:	d1c5      	bne.n	8011fc4 <__swsetup_r+0x24>
 8012038:	bd38      	pop	{r3, r4, r5, pc}
 801203a:	0799      	lsls	r1, r3, #30
 801203c:	bf58      	it	pl
 801203e:	6962      	ldrpl	r2, [r4, #20]
 8012040:	60a2      	str	r2, [r4, #8]
 8012042:	e7f4      	b.n	801202e <__swsetup_r+0x8e>
 8012044:	2000      	movs	r0, #0
 8012046:	e7f7      	b.n	8012038 <__swsetup_r+0x98>
 8012048:	2400001c 	.word	0x2400001c

0801204c <_raise_r>:
 801204c:	291f      	cmp	r1, #31
 801204e:	b538      	push	{r3, r4, r5, lr}
 8012050:	4605      	mov	r5, r0
 8012052:	460c      	mov	r4, r1
 8012054:	d904      	bls.n	8012060 <_raise_r+0x14>
 8012056:	2316      	movs	r3, #22
 8012058:	6003      	str	r3, [r0, #0]
 801205a:	f04f 30ff 	mov.w	r0, #4294967295
 801205e:	bd38      	pop	{r3, r4, r5, pc}
 8012060:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012062:	b112      	cbz	r2, 801206a <_raise_r+0x1e>
 8012064:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012068:	b94b      	cbnz	r3, 801207e <_raise_r+0x32>
 801206a:	4628      	mov	r0, r5
 801206c:	f000 f830 	bl	80120d0 <_getpid_r>
 8012070:	4622      	mov	r2, r4
 8012072:	4601      	mov	r1, r0
 8012074:	4628      	mov	r0, r5
 8012076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801207a:	f000 b817 	b.w	80120ac <_kill_r>
 801207e:	2b01      	cmp	r3, #1
 8012080:	d00a      	beq.n	8012098 <_raise_r+0x4c>
 8012082:	1c59      	adds	r1, r3, #1
 8012084:	d103      	bne.n	801208e <_raise_r+0x42>
 8012086:	2316      	movs	r3, #22
 8012088:	6003      	str	r3, [r0, #0]
 801208a:	2001      	movs	r0, #1
 801208c:	e7e7      	b.n	801205e <_raise_r+0x12>
 801208e:	2100      	movs	r1, #0
 8012090:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012094:	4620      	mov	r0, r4
 8012096:	4798      	blx	r3
 8012098:	2000      	movs	r0, #0
 801209a:	e7e0      	b.n	801205e <_raise_r+0x12>

0801209c <raise>:
 801209c:	4b02      	ldr	r3, [pc, #8]	@ (80120a8 <raise+0xc>)
 801209e:	4601      	mov	r1, r0
 80120a0:	6818      	ldr	r0, [r3, #0]
 80120a2:	f7ff bfd3 	b.w	801204c <_raise_r>
 80120a6:	bf00      	nop
 80120a8:	2400001c 	.word	0x2400001c

080120ac <_kill_r>:
 80120ac:	b538      	push	{r3, r4, r5, lr}
 80120ae:	4d07      	ldr	r5, [pc, #28]	@ (80120cc <_kill_r+0x20>)
 80120b0:	2300      	movs	r3, #0
 80120b2:	4604      	mov	r4, r0
 80120b4:	4608      	mov	r0, r1
 80120b6:	4611      	mov	r1, r2
 80120b8:	602b      	str	r3, [r5, #0]
 80120ba:	f7ef fb7d 	bl	80017b8 <_kill>
 80120be:	1c43      	adds	r3, r0, #1
 80120c0:	d102      	bne.n	80120c8 <_kill_r+0x1c>
 80120c2:	682b      	ldr	r3, [r5, #0]
 80120c4:	b103      	cbz	r3, 80120c8 <_kill_r+0x1c>
 80120c6:	6023      	str	r3, [r4, #0]
 80120c8:	bd38      	pop	{r3, r4, r5, pc}
 80120ca:	bf00      	nop
 80120cc:	24000570 	.word	0x24000570

080120d0 <_getpid_r>:
 80120d0:	f7ef bb6a 	b.w	80017a8 <_getpid>

080120d4 <__swhatbuf_r>:
 80120d4:	b570      	push	{r4, r5, r6, lr}
 80120d6:	460c      	mov	r4, r1
 80120d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120dc:	2900      	cmp	r1, #0
 80120de:	b096      	sub	sp, #88	@ 0x58
 80120e0:	4615      	mov	r5, r2
 80120e2:	461e      	mov	r6, r3
 80120e4:	da0d      	bge.n	8012102 <__swhatbuf_r+0x2e>
 80120e6:	89a3      	ldrh	r3, [r4, #12]
 80120e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80120ec:	f04f 0100 	mov.w	r1, #0
 80120f0:	bf14      	ite	ne
 80120f2:	2340      	movne	r3, #64	@ 0x40
 80120f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80120f8:	2000      	movs	r0, #0
 80120fa:	6031      	str	r1, [r6, #0]
 80120fc:	602b      	str	r3, [r5, #0]
 80120fe:	b016      	add	sp, #88	@ 0x58
 8012100:	bd70      	pop	{r4, r5, r6, pc}
 8012102:	466a      	mov	r2, sp
 8012104:	f000 f848 	bl	8012198 <_fstat_r>
 8012108:	2800      	cmp	r0, #0
 801210a:	dbec      	blt.n	80120e6 <__swhatbuf_r+0x12>
 801210c:	9901      	ldr	r1, [sp, #4]
 801210e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012112:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012116:	4259      	negs	r1, r3
 8012118:	4159      	adcs	r1, r3
 801211a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801211e:	e7eb      	b.n	80120f8 <__swhatbuf_r+0x24>

08012120 <__smakebuf_r>:
 8012120:	898b      	ldrh	r3, [r1, #12]
 8012122:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012124:	079d      	lsls	r5, r3, #30
 8012126:	4606      	mov	r6, r0
 8012128:	460c      	mov	r4, r1
 801212a:	d507      	bpl.n	801213c <__smakebuf_r+0x1c>
 801212c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012130:	6023      	str	r3, [r4, #0]
 8012132:	6123      	str	r3, [r4, #16]
 8012134:	2301      	movs	r3, #1
 8012136:	6163      	str	r3, [r4, #20]
 8012138:	b003      	add	sp, #12
 801213a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801213c:	ab01      	add	r3, sp, #4
 801213e:	466a      	mov	r2, sp
 8012140:	f7ff ffc8 	bl	80120d4 <__swhatbuf_r>
 8012144:	9f00      	ldr	r7, [sp, #0]
 8012146:	4605      	mov	r5, r0
 8012148:	4639      	mov	r1, r7
 801214a:	4630      	mov	r0, r6
 801214c:	f7fd fc0a 	bl	800f964 <_malloc_r>
 8012150:	b948      	cbnz	r0, 8012166 <__smakebuf_r+0x46>
 8012152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012156:	059a      	lsls	r2, r3, #22
 8012158:	d4ee      	bmi.n	8012138 <__smakebuf_r+0x18>
 801215a:	f023 0303 	bic.w	r3, r3, #3
 801215e:	f043 0302 	orr.w	r3, r3, #2
 8012162:	81a3      	strh	r3, [r4, #12]
 8012164:	e7e2      	b.n	801212c <__smakebuf_r+0xc>
 8012166:	89a3      	ldrh	r3, [r4, #12]
 8012168:	6020      	str	r0, [r4, #0]
 801216a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801216e:	81a3      	strh	r3, [r4, #12]
 8012170:	9b01      	ldr	r3, [sp, #4]
 8012172:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012176:	b15b      	cbz	r3, 8012190 <__smakebuf_r+0x70>
 8012178:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801217c:	4630      	mov	r0, r6
 801217e:	f000 f81d 	bl	80121bc <_isatty_r>
 8012182:	b128      	cbz	r0, 8012190 <__smakebuf_r+0x70>
 8012184:	89a3      	ldrh	r3, [r4, #12]
 8012186:	f023 0303 	bic.w	r3, r3, #3
 801218a:	f043 0301 	orr.w	r3, r3, #1
 801218e:	81a3      	strh	r3, [r4, #12]
 8012190:	89a3      	ldrh	r3, [r4, #12]
 8012192:	431d      	orrs	r5, r3
 8012194:	81a5      	strh	r5, [r4, #12]
 8012196:	e7cf      	b.n	8012138 <__smakebuf_r+0x18>

08012198 <_fstat_r>:
 8012198:	b538      	push	{r3, r4, r5, lr}
 801219a:	4d07      	ldr	r5, [pc, #28]	@ (80121b8 <_fstat_r+0x20>)
 801219c:	2300      	movs	r3, #0
 801219e:	4604      	mov	r4, r0
 80121a0:	4608      	mov	r0, r1
 80121a2:	4611      	mov	r1, r2
 80121a4:	602b      	str	r3, [r5, #0]
 80121a6:	f7ef fb67 	bl	8001878 <_fstat>
 80121aa:	1c43      	adds	r3, r0, #1
 80121ac:	d102      	bne.n	80121b4 <_fstat_r+0x1c>
 80121ae:	682b      	ldr	r3, [r5, #0]
 80121b0:	b103      	cbz	r3, 80121b4 <_fstat_r+0x1c>
 80121b2:	6023      	str	r3, [r4, #0]
 80121b4:	bd38      	pop	{r3, r4, r5, pc}
 80121b6:	bf00      	nop
 80121b8:	24000570 	.word	0x24000570

080121bc <_isatty_r>:
 80121bc:	b538      	push	{r3, r4, r5, lr}
 80121be:	4d06      	ldr	r5, [pc, #24]	@ (80121d8 <_isatty_r+0x1c>)
 80121c0:	2300      	movs	r3, #0
 80121c2:	4604      	mov	r4, r0
 80121c4:	4608      	mov	r0, r1
 80121c6:	602b      	str	r3, [r5, #0]
 80121c8:	f7ef fb66 	bl	8001898 <_isatty>
 80121cc:	1c43      	adds	r3, r0, #1
 80121ce:	d102      	bne.n	80121d6 <_isatty_r+0x1a>
 80121d0:	682b      	ldr	r3, [r5, #0]
 80121d2:	b103      	cbz	r3, 80121d6 <_isatty_r+0x1a>
 80121d4:	6023      	str	r3, [r4, #0]
 80121d6:	bd38      	pop	{r3, r4, r5, pc}
 80121d8:	24000570 	.word	0x24000570

080121dc <checkint>:
 80121dc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80121e0:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 80121e4:	429a      	cmp	r2, r3
 80121e6:	b570      	push	{r4, r5, r6, lr}
 80121e8:	dd2a      	ble.n	8012240 <checkint+0x64>
 80121ea:	f240 4333 	movw	r3, #1075	@ 0x433
 80121ee:	429a      	cmp	r2, r3
 80121f0:	dc24      	bgt.n	801223c <checkint+0x60>
 80121f2:	1a9b      	subs	r3, r3, r2
 80121f4:	f1a3 0620 	sub.w	r6, r3, #32
 80121f8:	f04f 32ff 	mov.w	r2, #4294967295
 80121fc:	fa02 f403 	lsl.w	r4, r2, r3
 8012200:	fa02 f606 	lsl.w	r6, r2, r6
 8012204:	f1c3 0520 	rsb	r5, r3, #32
 8012208:	fa22 f505 	lsr.w	r5, r2, r5
 801220c:	4334      	orrs	r4, r6
 801220e:	432c      	orrs	r4, r5
 8012210:	409a      	lsls	r2, r3
 8012212:	ea20 0202 	bic.w	r2, r0, r2
 8012216:	ea21 0404 	bic.w	r4, r1, r4
 801221a:	4322      	orrs	r2, r4
 801221c:	f1a3 0420 	sub.w	r4, r3, #32
 8012220:	f1c3 0220 	rsb	r2, r3, #32
 8012224:	d10c      	bne.n	8012240 <checkint+0x64>
 8012226:	40d8      	lsrs	r0, r3
 8012228:	fa01 f302 	lsl.w	r3, r1, r2
 801222c:	4318      	orrs	r0, r3
 801222e:	40e1      	lsrs	r1, r4
 8012230:	4308      	orrs	r0, r1
 8012232:	f000 0001 	and.w	r0, r0, #1
 8012236:	f1d0 0002 	rsbs	r0, r0, #2
 801223a:	bd70      	pop	{r4, r5, r6, pc}
 801223c:	2002      	movs	r0, #2
 801223e:	e7fc      	b.n	801223a <checkint+0x5e>
 8012240:	2000      	movs	r0, #0
 8012242:	e7fa      	b.n	801223a <checkint+0x5e>
 8012244:	0000      	movs	r0, r0
	...

08012248 <pow>:
 8012248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801224c:	ee10 4a90 	vmov	r4, s1
 8012250:	ed2d 8b0a 	vpush	{d8-d12}
 8012254:	ea4f 5814 	mov.w	r8, r4, lsr #20
 8012258:	ee11 aa90 	vmov	sl, s3
 801225c:	f108 32ff 	add.w	r2, r8, #4294967295
 8012260:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 8012264:	429a      	cmp	r2, r3
 8012266:	ee10 5a10 	vmov	r5, s0
 801226a:	ee11 0a10 	vmov	r0, s2
 801226e:	b087      	sub	sp, #28
 8012270:	46c4      	mov	ip, r8
 8012272:	ea4f 561a 	mov.w	r6, sl, lsr #20
 8012276:	d806      	bhi.n	8012286 <pow+0x3e>
 8012278:	f3c6 030a 	ubfx	r3, r6, #0, #11
 801227c:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 8012280:	2b7f      	cmp	r3, #127	@ 0x7f
 8012282:	f240 8157 	bls.w	8012534 <pow+0x2ec>
 8012286:	1802      	adds	r2, r0, r0
 8012288:	eb4a 010a 	adc.w	r1, sl, sl
 801228c:	f06f 0b01 	mvn.w	fp, #1
 8012290:	1e57      	subs	r7, r2, #1
 8012292:	f141 33ff 	adc.w	r3, r1, #4294967295
 8012296:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 801229a:	45bb      	cmp	fp, r7
 801229c:	eb7e 0303 	sbcs.w	r3, lr, r3
 80122a0:	d242      	bcs.n	8012328 <pow+0xe0>
 80122a2:	ea52 0301 	orrs.w	r3, r2, r1
 80122a6:	f04f 0300 	mov.w	r3, #0
 80122aa:	d10c      	bne.n	80122c6 <pow+0x7e>
 80122ac:	196d      	adds	r5, r5, r5
 80122ae:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 80122b2:	4164      	adcs	r4, r4
 80122b4:	42ab      	cmp	r3, r5
 80122b6:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80122ba:	41a3      	sbcs	r3, r4
 80122bc:	f0c0 808f 	bcc.w	80123de <pow+0x196>
 80122c0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80122c4:	e02b      	b.n	801231e <pow+0xd6>
 80122c6:	4ed4      	ldr	r6, [pc, #848]	@ (8012618 <pow+0x3d0>)
 80122c8:	42b4      	cmp	r4, r6
 80122ca:	bf08      	it	eq
 80122cc:	429d      	cmpeq	r5, r3
 80122ce:	d109      	bne.n	80122e4 <pow+0x9c>
 80122d0:	1800      	adds	r0, r0, r0
 80122d2:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 80122d6:	eb4a 0a0a 	adc.w	sl, sl, sl
 80122da:	4283      	cmp	r3, r0
 80122dc:	4bcf      	ldr	r3, [pc, #828]	@ (801261c <pow+0x3d4>)
 80122de:	eb73 030a 	sbcs.w	r3, r3, sl
 80122e2:	e7eb      	b.n	80122bc <pow+0x74>
 80122e4:	196d      	adds	r5, r5, r5
 80122e6:	48ce      	ldr	r0, [pc, #824]	@ (8012620 <pow+0x3d8>)
 80122e8:	4164      	adcs	r4, r4
 80122ea:	42ab      	cmp	r3, r5
 80122ec:	eb70 0604 	sbcs.w	r6, r0, r4
 80122f0:	d375      	bcc.n	80123de <pow+0x196>
 80122f2:	4281      	cmp	r1, r0
 80122f4:	bf08      	it	eq
 80122f6:	429a      	cmpeq	r2, r3
 80122f8:	d171      	bne.n	80123de <pow+0x196>
 80122fa:	4aca      	ldr	r2, [pc, #808]	@ (8012624 <pow+0x3dc>)
 80122fc:	4294      	cmp	r4, r2
 80122fe:	bf08      	it	eq
 8012300:	429d      	cmpeq	r5, r3
 8012302:	d0dd      	beq.n	80122c0 <pow+0x78>
 8012304:	4294      	cmp	r4, r2
 8012306:	ea6f 0a0a 	mvn.w	sl, sl
 801230a:	bf34      	ite	cc
 801230c:	2400      	movcc	r4, #0
 801230e:	2401      	movcs	r4, #1
 8012310:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8012314:	4554      	cmp	r4, sl
 8012316:	f040 81dc 	bne.w	80126d2 <pow+0x48a>
 801231a:	ee21 0b01 	vmul.f64	d0, d1, d1
 801231e:	b007      	add	sp, #28
 8012320:	ecbd 8b0a 	vpop	{d8-d12}
 8012324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012328:	196f      	adds	r7, r5, r5
 801232a:	eb44 0904 	adc.w	r9, r4, r4
 801232e:	1e7a      	subs	r2, r7, #1
 8012330:	f169 0300 	sbc.w	r3, r9, #0
 8012334:	4593      	cmp	fp, r2
 8012336:	eb7e 0303 	sbcs.w	r3, lr, r3
 801233a:	d225      	bcs.n	8012388 <pow+0x140>
 801233c:	ee20 0b00 	vmul.f64	d0, d0, d0
 8012340:	2c00      	cmp	r4, #0
 8012342:	da13      	bge.n	801236c <pow+0x124>
 8012344:	4651      	mov	r1, sl
 8012346:	f7ff ff49 	bl	80121dc <checkint>
 801234a:	2801      	cmp	r0, #1
 801234c:	d10e      	bne.n	801236c <pow+0x124>
 801234e:	eeb1 0b40 	vneg.f64	d0, d0
 8012352:	ea57 0909 	orrs.w	r9, r7, r9
 8012356:	d10b      	bne.n	8012370 <pow+0x128>
 8012358:	f1ba 0f00 	cmp.w	sl, #0
 801235c:	dadf      	bge.n	801231e <pow+0xd6>
 801235e:	b007      	add	sp, #28
 8012360:	ecbd 8b0a 	vpop	{d8-d12}
 8012364:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012368:	f000 b9ee 	b.w	8012748 <__math_divzero>
 801236c:	2000      	movs	r0, #0
 801236e:	e7f0      	b.n	8012352 <pow+0x10a>
 8012370:	f1ba 0f00 	cmp.w	sl, #0
 8012374:	dad3      	bge.n	801231e <pow+0xd6>
 8012376:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801237a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801237e:	ed8d 7b00 	vstr	d7, [sp]
 8012382:	ed9d 0b00 	vldr	d0, [sp]
 8012386:	e7ca      	b.n	801231e <pow+0xd6>
 8012388:	2c00      	cmp	r4, #0
 801238a:	da2b      	bge.n	80123e4 <pow+0x19c>
 801238c:	4651      	mov	r1, sl
 801238e:	f7ff ff25 	bl	80121dc <checkint>
 8012392:	b930      	cbnz	r0, 80123a2 <pow+0x15a>
 8012394:	b007      	add	sp, #28
 8012396:	ecbd 8b0a 	vpop	{d8-d12}
 801239a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801239e:	f000 b9eb 	b.w	8012778 <__math_invalid>
 80123a2:	1e41      	subs	r1, r0, #1
 80123a4:	4248      	negs	r0, r1
 80123a6:	4148      	adcs	r0, r1
 80123a8:	0480      	lsls	r0, r0, #18
 80123aa:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80123ae:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 80123b2:	f3c6 020a 	ubfx	r2, r6, #0, #11
 80123b6:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 80123ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80123bc:	d92d      	bls.n	801241a <pow+0x1d2>
 80123be:	4b96      	ldr	r3, [pc, #600]	@ (8012618 <pow+0x3d0>)
 80123c0:	2000      	movs	r0, #0
 80123c2:	429c      	cmp	r4, r3
 80123c4:	bf08      	it	eq
 80123c6:	4285      	cmpeq	r5, r0
 80123c8:	f43f af7a 	beq.w	80122c0 <pow+0x78>
 80123cc:	f240 31bd 	movw	r1, #957	@ 0x3bd
 80123d0:	428a      	cmp	r2, r1
 80123d2:	d80c      	bhi.n	80123ee <pow+0x1a6>
 80123d4:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80123d8:	42a8      	cmp	r0, r5
 80123da:	41a3      	sbcs	r3, r4
 80123dc:	d204      	bcs.n	80123e8 <pow+0x1a0>
 80123de:	ee31 0b00 	vadd.f64	d0, d1, d0
 80123e2:	e79c      	b.n	801231e <pow+0xd6>
 80123e4:	2000      	movs	r0, #0
 80123e6:	e7e4      	b.n	80123b2 <pow+0x16a>
 80123e8:	ee30 0b41 	vsub.f64	d0, d0, d1
 80123ec:	e797      	b.n	801231e <pow+0xd6>
 80123ee:	2d01      	cmp	r5, #1
 80123f0:	eb74 0303 	sbcs.w	r3, r4, r3
 80123f4:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80123f8:	bf34      	ite	cc
 80123fa:	2301      	movcc	r3, #1
 80123fc:	2300      	movcs	r3, #0
 80123fe:	4296      	cmp	r6, r2
 8012400:	bf8c      	ite	hi
 8012402:	2600      	movhi	r6, #0
 8012404:	2601      	movls	r6, #1
 8012406:	42b3      	cmp	r3, r6
 8012408:	f000 809c 	beq.w	8012544 <pow+0x2fc>
 801240c:	b007      	add	sp, #28
 801240e:	ecbd 8b0a 	vpop	{d8-d12}
 8012412:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012416:	f000 b98f 	b.w	8012738 <__math_oflow>
 801241a:	f1bc 0f00 	cmp.w	ip, #0
 801241e:	d10a      	bne.n	8012436 <pow+0x1ee>
 8012420:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 8012608 <pow+0x3c0>
 8012424:	ee20 7b07 	vmul.f64	d7, d0, d7
 8012428:	ec53 2b17 	vmov	r2, r3, d7
 801242c:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8012430:	4615      	mov	r5, r2
 8012432:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 8012436:	4a7c      	ldr	r2, [pc, #496]	@ (8012628 <pow+0x3e0>)
 8012438:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801243c:	4422      	add	r2, r4
 801243e:	1513      	asrs	r3, r2, #20
 8012440:	f3c2 3146 	ubfx	r1, r2, #13, #7
 8012444:	ee03 3a10 	vmov	s6, r3
 8012448:	0d12      	lsrs	r2, r2, #20
 801244a:	4b78      	ldr	r3, [pc, #480]	@ (801262c <pow+0x3e4>)
 801244c:	0512      	lsls	r2, r2, #20
 801244e:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 8012452:	1aa7      	subs	r7, r4, r2
 8012454:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 8012458:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 801245c:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 8012460:	1e2e      	subs	r6, r5, #0
 8012462:	ec47 6b14 	vmov	d4, r6, r7
 8012466:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 801246a:	eea4 6b05 	vfma.f64	d6, d4, d5
 801246e:	ed93 5b00 	vldr	d5, [r3]
 8012472:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8012476:	eea3 2b05 	vfma.f64	d2, d3, d5
 801247a:	ed93 5b02 	vldr	d5, [r3, #8]
 801247e:	ee36 4b02 	vadd.f64	d4, d6, d2
 8012482:	ee32 2b44 	vsub.f64	d2, d2, d4
 8012486:	eea3 7b05 	vfma.f64	d7, d3, d5
 801248a:	ed93 5b04 	vldr	d5, [r3, #16]
 801248e:	ee32 2b06 	vadd.f64	d2, d2, d6
 8012492:	ee37 7b02 	vadd.f64	d7, d7, d2
 8012496:	ee26 5b05 	vmul.f64	d5, d6, d5
 801249a:	ee26 0b05 	vmul.f64	d0, d6, d5
 801249e:	ee34 8b00 	vadd.f64	d8, d4, d0
 80124a2:	eeb0 9b40 	vmov.f64	d9, d0
 80124a6:	ee34 4b48 	vsub.f64	d4, d4, d8
 80124aa:	ee96 9b05 	vfnms.f64	d9, d6, d5
 80124ae:	ee34 ab00 	vadd.f64	d10, d4, d0
 80124b2:	ed93 5b06 	vldr	d5, [r3, #24]
 80124b6:	ee26 bb00 	vmul.f64	d11, d6, d0
 80124ba:	ee37 7b09 	vadd.f64	d7, d7, d9
 80124be:	ed93 4b08 	vldr	d4, [r3, #32]
 80124c2:	ee37 7b0a 	vadd.f64	d7, d7, d10
 80124c6:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 80124ca:	eea6 5b04 	vfma.f64	d5, d6, d4
 80124ce:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 80124d2:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 80124d6:	eea6 4b03 	vfma.f64	d4, d6, d3
 80124da:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 80124de:	eea6 3b0c 	vfma.f64	d3, d6, d12
 80124e2:	eea0 4b03 	vfma.f64	d4, d0, d3
 80124e6:	eea0 5b04 	vfma.f64	d5, d0, d4
 80124ea:	eeab 7b05 	vfma.f64	d7, d11, d5
 80124ee:	ee38 4b07 	vadd.f64	d4, d8, d7
 80124f2:	ee21 6b04 	vmul.f64	d6, d1, d4
 80124f6:	ee16 3a90 	vmov	r3, s13
 80124fa:	eeb0 5b46 	vmov.f64	d5, d6
 80124fe:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8012502:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 8012506:	18b2      	adds	r2, r6, r2
 8012508:	2a3e      	cmp	r2, #62	@ 0x3e
 801250a:	ee91 5b04 	vfnms.f64	d5, d1, d4
 801250e:	ee38 8b44 	vsub.f64	d8, d8, d4
 8012512:	ee38 8b07 	vadd.f64	d8, d8, d7
 8012516:	eea1 5b08 	vfma.f64	d5, d1, d8
 801251a:	d91b      	bls.n	8012554 <pow+0x30c>
 801251c:	2a00      	cmp	r2, #0
 801251e:	da0b      	bge.n	8012538 <pow+0x2f0>
 8012520:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8012524:	ee36 0b00 	vadd.f64	d0, d6, d0
 8012528:	2800      	cmp	r0, #0
 801252a:	f43f aef8 	beq.w	801231e <pow+0xd6>
 801252e:	eeb1 0b40 	vneg.f64	d0, d0
 8012532:	e6f4      	b.n	801231e <pow+0xd6>
 8012534:	2000      	movs	r0, #0
 8012536:	e77e      	b.n	8012436 <pow+0x1ee>
 8012538:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 801253c:	d909      	bls.n	8012552 <pow+0x30a>
 801253e:	2b00      	cmp	r3, #0
 8012540:	f6bf af64 	bge.w	801240c <pow+0x1c4>
 8012544:	b007      	add	sp, #28
 8012546:	ecbd 8b0a 	vpop	{d8-d12}
 801254a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801254e:	f000 b8eb 	b.w	8012728 <__math_uflow>
 8012552:	2600      	movs	r6, #0
 8012554:	4936      	ldr	r1, [pc, #216]	@ (8012630 <pow+0x3e8>)
 8012556:	ed91 4b02 	vldr	d4, [r1, #8]
 801255a:	ed91 3b00 	vldr	d3, [r1]
 801255e:	eeb0 7b44 	vmov.f64	d7, d4
 8012562:	eea6 7b03 	vfma.f64	d7, d6, d3
 8012566:	ee17 5a10 	vmov	r5, s14
 801256a:	ee37 7b44 	vsub.f64	d7, d7, d4
 801256e:	ed91 4b04 	vldr	d4, [r1, #16]
 8012572:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 8012576:	eea7 6b04 	vfma.f64	d6, d7, d4
 801257a:	ed91 4b06 	vldr	d4, [r1, #24]
 801257e:	18dc      	adds	r4, r3, r3
 8012580:	f104 030f 	add.w	r3, r4, #15
 8012584:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8012588:	eea7 6b04 	vfma.f64	d6, d7, d4
 801258c:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 8012590:	ee35 5b06 	vadd.f64	d5, d5, d6
 8012594:	ee25 6b05 	vmul.f64	d6, d5, d5
 8012598:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 801259c:	ed91 4b08 	vldr	d4, [r1, #32]
 80125a0:	ee35 7b07 	vadd.f64	d7, d5, d7
 80125a4:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 80125a8:	eea5 4b03 	vfma.f64	d4, d5, d3
 80125ac:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 80125b0:	eea6 7b04 	vfma.f64	d7, d6, d4
 80125b4:	ee26 6b06 	vmul.f64	d6, d6, d6
 80125b8:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 80125bc:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 80125c0:	f8d2 e004 	ldr.w	lr, [r2, #4]
 80125c4:	eea5 4b03 	vfma.f64	d4, d5, d3
 80125c8:	1940      	adds	r0, r0, r5
 80125ca:	2700      	movs	r7, #0
 80125cc:	eb17 020c 	adds.w	r2, r7, ip
 80125d0:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 80125d4:	eea6 7b04 	vfma.f64	d7, d6, d4
 80125d8:	2e00      	cmp	r6, #0
 80125da:	d175      	bne.n	80126c8 <pow+0x480>
 80125dc:	42bd      	cmp	r5, r7
 80125de:	db29      	blt.n	8012634 <pow+0x3ec>
 80125e0:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 80125e4:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 80125e8:	4610      	mov	r0, r2
 80125ea:	ec41 0b10 	vmov	d0, r0, r1
 80125ee:	eea7 0b00 	vfma.f64	d0, d7, d0
 80125f2:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8012610 <pow+0x3c8>
 80125f6:	ee20 0b07 	vmul.f64	d0, d0, d7
 80125fa:	b007      	add	sp, #28
 80125fc:	ecbd 8b0a 	vpop	{d8-d12}
 8012600:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012604:	f000 b8d0 	b.w	80127a8 <__math_check_oflow>
 8012608:	00000000 	.word	0x00000000
 801260c:	43300000 	.word	0x43300000
 8012610:	00000000 	.word	0x00000000
 8012614:	7f000000 	.word	0x7f000000
 8012618:	3ff00000 	.word	0x3ff00000
 801261c:	fff00000 	.word	0xfff00000
 8012620:	ffe00000 	.word	0xffe00000
 8012624:	7fe00000 	.word	0x7fe00000
 8012628:	c0196aab 	.word	0xc0196aab
 801262c:	08012c70 	.word	0x08012c70
 8012630:	08013cb8 	.word	0x08013cb8
 8012634:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8012638:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 801263c:	4610      	mov	r0, r2
 801263e:	ec41 0b15 	vmov	d5, r0, r1
 8012642:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 8012646:	ee27 6b05 	vmul.f64	d6, d7, d5
 801264a:	ee35 7b06 	vadd.f64	d7, d5, d6
 801264e:	eeb0 4bc7 	vabs.f64	d4, d7
 8012652:	eeb4 4bc3 	vcmpe.f64	d4, d3
 8012656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801265a:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 80126d8 <pow+0x490>
 801265e:	d52a      	bpl.n	80126b6 <pow+0x46e>
 8012660:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012664:	ee35 5b47 	vsub.f64	d5, d5, d7
 8012668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801266c:	ee35 5b06 	vadd.f64	d5, d5, d6
 8012670:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 8012674:	bf58      	it	pl
 8012676:	eeb0 4b43 	vmovpl.f64	d4, d3
 801267a:	ee37 3b04 	vadd.f64	d3, d7, d4
 801267e:	ee34 6b43 	vsub.f64	d6, d4, d3
 8012682:	ee36 6b07 	vadd.f64	d6, d6, d7
 8012686:	ee36 6b05 	vadd.f64	d6, d6, d5
 801268a:	ee36 6b03 	vadd.f64	d6, d6, d3
 801268e:	ee36 7b44 	vsub.f64	d7, d6, d4
 8012692:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801269a:	d104      	bne.n	80126a6 <pow+0x45e>
 801269c:	4632      	mov	r2, r6
 801269e:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 80126a2:	ec43 2b17 	vmov	d7, r2, r3
 80126a6:	ed8d 0b02 	vstr	d0, [sp, #8]
 80126aa:	ed9d 6b02 	vldr	d6, [sp, #8]
 80126ae:	ee26 6b00 	vmul.f64	d6, d6, d0
 80126b2:	ed8d 6b04 	vstr	d6, [sp, #16]
 80126b6:	ee27 0b00 	vmul.f64	d0, d7, d0
 80126ba:	b007      	add	sp, #28
 80126bc:	ecbd 8b0a 	vpop	{d8-d12}
 80126c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126c4:	f000 b867 	b.w	8012796 <__math_check_uflow>
 80126c8:	ec43 2b10 	vmov	d0, r2, r3
 80126cc:	eea7 0b00 	vfma.f64	d0, d7, d0
 80126d0:	e625      	b.n	801231e <pow+0xd6>
 80126d2:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 80126e0 <pow+0x498>
 80126d6:	e622      	b.n	801231e <pow+0xd6>
 80126d8:	00000000 	.word	0x00000000
 80126dc:	00100000 	.word	0x00100000
	...

080126e8 <with_errno>:
 80126e8:	b510      	push	{r4, lr}
 80126ea:	ed2d 8b02 	vpush	{d8}
 80126ee:	eeb0 8b40 	vmov.f64	d8, d0
 80126f2:	4604      	mov	r4, r0
 80126f4:	f7fc fab0 	bl	800ec58 <__errno>
 80126f8:	eeb0 0b48 	vmov.f64	d0, d8
 80126fc:	ecbd 8b02 	vpop	{d8}
 8012700:	6004      	str	r4, [r0, #0]
 8012702:	bd10      	pop	{r4, pc}

08012704 <xflow>:
 8012704:	b082      	sub	sp, #8
 8012706:	b158      	cbz	r0, 8012720 <xflow+0x1c>
 8012708:	eeb1 7b40 	vneg.f64	d7, d0
 801270c:	ed8d 7b00 	vstr	d7, [sp]
 8012710:	ed9d 7b00 	vldr	d7, [sp]
 8012714:	2022      	movs	r0, #34	@ 0x22
 8012716:	ee20 0b07 	vmul.f64	d0, d0, d7
 801271a:	b002      	add	sp, #8
 801271c:	f7ff bfe4 	b.w	80126e8 <with_errno>
 8012720:	eeb0 7b40 	vmov.f64	d7, d0
 8012724:	e7f2      	b.n	801270c <xflow+0x8>
	...

08012728 <__math_uflow>:
 8012728:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012730 <__math_uflow+0x8>
 801272c:	f7ff bfea 	b.w	8012704 <xflow>
 8012730:	00000000 	.word	0x00000000
 8012734:	10000000 	.word	0x10000000

08012738 <__math_oflow>:
 8012738:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012740 <__math_oflow+0x8>
 801273c:	f7ff bfe2 	b.w	8012704 <xflow>
 8012740:	00000000 	.word	0x00000000
 8012744:	70000000 	.word	0x70000000

08012748 <__math_divzero>:
 8012748:	b082      	sub	sp, #8
 801274a:	2800      	cmp	r0, #0
 801274c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8012750:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8012754:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8012758:	ed8d 7b00 	vstr	d7, [sp]
 801275c:	ed9d 0b00 	vldr	d0, [sp]
 8012760:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8012770 <__math_divzero+0x28>
 8012764:	2022      	movs	r0, #34	@ 0x22
 8012766:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801276a:	b002      	add	sp, #8
 801276c:	f7ff bfbc 	b.w	80126e8 <with_errno>
	...

08012778 <__math_invalid>:
 8012778:	eeb0 7b40 	vmov.f64	d7, d0
 801277c:	eeb4 7b47 	vcmp.f64	d7, d7
 8012780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012784:	ee30 6b40 	vsub.f64	d6, d0, d0
 8012788:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801278c:	d602      	bvs.n	8012794 <__math_invalid+0x1c>
 801278e:	2021      	movs	r0, #33	@ 0x21
 8012790:	f7ff bfaa 	b.w	80126e8 <with_errno>
 8012794:	4770      	bx	lr

08012796 <__math_check_uflow>:
 8012796:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801279a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801279e:	d102      	bne.n	80127a6 <__math_check_uflow+0x10>
 80127a0:	2022      	movs	r0, #34	@ 0x22
 80127a2:	f7ff bfa1 	b.w	80126e8 <with_errno>
 80127a6:	4770      	bx	lr

080127a8 <__math_check_oflow>:
 80127a8:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 80127c8 <__math_check_oflow+0x20>
 80127ac:	eeb0 7bc0 	vabs.f64	d7, d0
 80127b0:	eeb4 7b46 	vcmp.f64	d7, d6
 80127b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127b8:	dd02      	ble.n	80127c0 <__math_check_oflow+0x18>
 80127ba:	2022      	movs	r0, #34	@ 0x22
 80127bc:	f7ff bf94 	b.w	80126e8 <with_errno>
 80127c0:	4770      	bx	lr
 80127c2:	bf00      	nop
 80127c4:	f3af 8000 	nop.w
 80127c8:	ffffffff 	.word	0xffffffff
 80127cc:	7fefffff 	.word	0x7fefffff

080127d0 <_init>:
 80127d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127d2:	bf00      	nop
 80127d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80127d6:	bc08      	pop	{r3}
 80127d8:	469e      	mov	lr, r3
 80127da:	4770      	bx	lr

080127dc <_fini>:
 80127dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127de:	bf00      	nop
 80127e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80127e2:	bc08      	pop	{r3}
 80127e4:	469e      	mov	lr, r3
 80127e6:	4770      	bx	lr
